Follow-up to bug 404489.

package jsr308.bug;
public class X {
    @java.lang.annotation.Target(java.lang.annotation.ElementType.TYPE_USE)
    @interface Marker {
    }

    class Y {
        class Z {
        }
    }

    jsr308.bug.X.Y.Z z0;
    jsr308.bug.@Marker X.@Marker Y.@Marker Z z;
}
                                 ^
The QualifiedType for Y here     ^ has a type binding for Z, but should be for Y, like its "name" child.

The PackageQualifiedType for X also has a type binding for Z. The qualifier of X has the correct package binding for jsr308.bug.

Follow-up to bug 404489.

package jsr308.bug;
public class X {
    @java.lang.annotation.Target(java.lang.annotation.ElementType.TYPE_USE)
    @interface Marker {
    }

    class Y {
        class Z {
        }
    }

    jsr308.bug.X.Y.Z z0;
    jsr308.bug.@Marker X.@Marker Y.@Marker Z z;
}
                                 ^
The QualifiedType for Y here     ^ has a type binding for Z, but should be for Y, like its "name" child.

The PackageQualifiedType for X also has a type binding for Z. The qualifier of X has the correct package binding for jsr308.bug.
Created attachment 230099
Proposed Patch
At first glance, the patch looks good in the sense, it fixes the reported issue. One question, though is:

Why was the following piece of code necessary ?

if (type instanceof QualifiedType) {
    return resolveTypeBindingForName(((QualifiedType)type).getName());
}

For a qualified type, I see the typeReference.resolvedType already appears to have the necessary/correct binding. Am I missing something?
(In reply to comment #2)
> At first glance, the patch looks good in the sense, it fixes the reported
> issue. One question, though is:
> 
> Why was the following piece of code necessary ?
> 
> if (type instanceof QualifiedType) {
>     return resolveTypeBindingForName(((QualifiedType)type).getName());
> }
> 
> For a qualified type, I see the typeReference.resolvedType already appears
> to have the necessary/correct binding. Am I missing something?

This binding refers to the entire typereference binding. It would not be possible to "cut" the binding at the appropriate indices for different parts of a QualifiedType or a PackageQualifiedType which are formed by multiple binding (enclosingType). For QT & PackageQT, the binding could be determined using an index based approach on enclosingType(ref ParameterizedQT above) since the binding would be a partial one. However, as Markus pointed out, the binding of the name would be the same of that of QT and PacakageQT and hence the code above.
(In reply to comment #2)
> For a qualified type, I see the typeReference.resolvedType already appears
> to have the necessary/correct binding. Am I missing something?

Looks like I was confused myself with something else. Everything seems alright now. Patch looks good, too. 

Only I was only wondering that for the qualified types and packaged qualified types, we do not create their own type reference (which is alright) and as  result, we don't cache it (newAstToOldAst and compilerBindingsToASTBindings ?) and end up creating the bindings every time it's requested.
(In reply to comment #4)
> we don't cache it (newAstToOldAst and compilerBindingsToASTBindings ?)
> and end up creating the bindings every time it's requested.

Eventually, the binding is cached here:

DefaultBindingResolver.getTypeBinding(TypeBinding) line: 393	
DefaultBindingResolver.resolveTypeBindingForName(Name) line: 1026	
DefaultBindingResolver.resolveType(Type) line: 1601	
QualifiedType(Type).resolveBinding() line: 236	
ASTViewContentProvider.getNodeChildren(ASTNode) line: 169	

I verified in the ASTView (right-click on binding > Add to Comparison Tray) that the bindings for the (Package)QualifiedType and the SimpleName nodes are identical. The overhead looks no worse than org.eclipse.jdt.core.dom.Expression#resolveTypeBinding(), so I'd say that's fine.

This check could also be added to the test: Store the typeBinding on line 2196 and assertSame(..) it with the typeBinding at the end of the test method.
Thanks for the explanation, Markus. +1 for the patch.
Created attachment 230146
Proposed Patch

Minor addition: adding an additional check of assertSame() in the testcase as suggested in comment 5.
Released as http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=d933dccfeeba25c2c3d8c1c59897e3604969c217


[1.8][dom ast] Wrong type binding for qualifier of QualifiedType and PackageQualifiedType



Bug 406467: [1.8][dom ast] Wrong type binding for qualifier of QualifiedType and PackageQualifiedType 