BETA_JAVA8:

The compiler node type LambdaExpression needs a corresponding DOM/AST node.
The interesting properties are arguments (which may have types or type and 
parenthesis elided) and body.

BETA_JAVA8:

The compiler node type LambdaExpression needs a corresponding DOM/AST node.
The interesting properties are arguments (which may have types or type and 
parenthesis elided) and body.
Manoj, please take a look.
Created attachment 226670
WIP Patch for Structural Review

Srikanth: Please comment on the structural aspect of the LambdaExpression and TypeElidedVariableDeclaration. The javadoc, methods and other fields (including getType()) are WIP. Body will have Expression and Block as valid values in coversion.
Created attachment 226701
Patch - wip

This is a working prototype patch with a few ASTConverter test cases.
Created attachment 226802
Patch - WIP

Implementation coding done (save doc and format) with a few tests - both convert and match. Need to add more tests and cleanup. Comments welcome.
Created attachment 226974
Proposed Patch
Review is blocked due to non-compliance with the 3 jokes per patch review
requirement.
@Markus, comments (0), (6), (10) below need your weighing in - TIA.

Comments:

(0) Markus, Manoj and I discussed and prototyped a version that introduces
a new node type TypeElidedVariableDeclaration (apart from LambdaExpression)
that is a subtype of VariableDeclaration to represent a lambda type elided 
parameter. The alternative is to use SimpleName for these and have a 
boolean in LambdaExpression that informs a client which form to expect. 
What has been prototyped looks like a workable model, but from a client 
side perspective do you have different opinions ? 

(1) Per the documentation in ASTNode, any time a new node is added, we need
to add an entry for ASTNode.nodeClassForType(int) - this needs to be taken
care of

(2) Does org.eclipse.jdt.core.dom.SimpleName.isDeclaration() needs to
cover TypeElidedVar* ? 

(3) public Expression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)
should return a LambdaExpression ? 

(4) Javadoc of Expression needs to be updated to mention LE.

(5) NaiveASTFlattener:

This block:

		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=399793 
		// For nested lambda expressions a semicolon with <CR> results in unclean display, best avoided.
		// example test: I I = () -> () -> 10;
		Expression expression = node.getAST().apiLevel() >= AST.JLS8 ? node.getExpression() : null;
		LambdaExpression lambdaExpression = expression != null && expression instanceof LambdaExpression ? (LambdaExpression)expression : null;
		if (lambdaExpression == null) {
			this.buffer.append(";\n");//$NON-NLS-1$
		}

could be written simply as:

      if (!(node.getExpression() instanceof LambdaExpression))
          this.buffer.append(";\n");//$NON-NLS-1$

(6) That said, this seems indicative of abstraction/modelling problem.
In the compiler AST Expression is a subtype of Statement and Block is
also a subtype of Statement - In the DOM universe this is not the case.
So either, we have to resort to approximations/wrappers like this or
Change LE to have Block body and expression body and select the body
type via a boolean property - This may be an overkill - Markus do you
have a preference/recommendation from client side ? I am mildly uncomfortable
that the flattener issue is not only about printing some extra semicolons.

Thinking a bit more, it looks like the ExpressionStatement class was
introduced precisely to address these kinds of situations, if so,
this could just be a semicolon printing issue.

(7) for loop in LE visitor calls hasNext() twice - can be restructured.

(8) Object creation can be avoided in single char string literals by
using character literals instead. e.g "(" ==> '('

(9) org.eclipse.jdt.internal.core.dom.NaiveASTFlattener.visit(TypeElidedVariableDeclaration) should not return false. 

(10) Markus, for binding resolution on lambda what would you like to see.
In the patch, presently I see (in BindingResolver boiler plate)

IMethodBinding resolveMethod(LambdaExpression lambda) {
		return null;
	}

A lambda stands for both the method and the type that implements the
single abstract method from the functional interface. So there should
probably me a resolveExpressionType(LambdaExpression) ??

(11) Javadoc of org.eclipse.jdt.core.dom.BindingResolver.resolveMethod(LambdaExpression) has
copy + paste hangover, Also lambdaexpression is misspelt.

(12) LambdaExpression javadoc needs clean up for grammar and precision.
We should use kind instead of type as it is confusing.

(13) Javadoc of org.eclipse.jdt.core.dom.LambdaExpression.ARGUMENTS_PROPERTY
mentions Variable structural property - it should be arguments

(14) I think ASTRewrite would need to know if the lambda argument list is
parenthesized or not - right now the compiler AST does not capture this.

I'll continue the review after these are addressed and a fresh patch is
posted.
Re (0): The proposed LambdaExpression is incomplete. There are actually 3 forms:
 *    Identifier <b>-></b> Body
 *    <b>(</b> [ Identifier { <b>,</b> Identifier } ] <b>)</b> <b>-></b> Body
 *    <b>(</b> [ FormalParameter { <b>,</b> FormalParameter } ] <b>)</b> <b>-></b> Body

I think we need separate types like this:

Expression
+ LambdaExpression -- declares body property and resolveMethodBinding()
  + SingleParameterLambdaExpression -- first form
  + NormalLambdaExpression -- second and third form

We could also split NormalLambdaExpression into two types, but I think a parameters() property with element type VariableDeclaration is fine.
Note that "arguments" is not the right name here.

I chose the type names in analogy to the Annotation node types. We could also go the other direction and call the top type AbstractLambdaExpression and the subtypes SimpleLambdaExpression and LambdaExpression.

I don't see a big difference between VariableDeclarationFragment and TypeElidedVariableDeclaration. Once the latter is finished, it will look the same as the former, so I think we should just use VariableDeclarationFragment for the second form.


Re (6): The body is either a Block or an Expression. We cannot use ExpressionStatement, since that node includes a ";", which is wrong at the end of a LambdaExpression. I don't think it's worth creating even more node types, so I'd just declare the node type of the body property as ASTNode and explain the allowed types in the Javadoc.

Note that Statement as child type of body was already way too broad in the proposed solution, since only Block and ExpressionStatement are actually legal.

An alternative would be to change the type hierarchy like this, but that's overkill, IMHO:
Statement
+ Body -- new abstract type, no properties nor child nodes
  + Block
  + ExpressionBody -- new node type, similar to ExpressionStatement, but w/o ";"

Note that both property descriptors need the CYCLE_RISK flag.


Re (10): LambdaExpression already inherits Expression#resolveTypeBinding(), so the type of the lambda expression is already covered by the API. Similar to (Super)MethodInvocation#resolveMethodBinding(), the additional resolve method in LambdaExpression should be called resolveMethodBinding() (not resolveBinding).
(In reply to comment #8)
> Re (0): The proposed LambdaExpression is incomplete. There are actually 3
> forms:
>  *    Identifier <b>-></b> Body
>  *    <b>(</b> [ Identifier { <b>,</b> Identifier } ] <b>)</b> <b>-></b> Body
>  *    <b>(</b> [ FormalParameter { <b>,</b> FormalParameter } ] <b>)</b>
> <b>-></b> Body

This was pointed out in the review, but I forgot to capture it in the
review comments. Manoj, the first thing a client side programmer is going
to look at is the javadoc so we should strive for as much precision as
possible there.
 
> I think we need separate types like this:
> 
> Expression
> + LambdaExpression -- declares body property and resolveMethodBinding()
>   + SingleParameterLambdaExpression -- first form
>   + NormalLambdaExpression -- second and third form

Let us discuss this further. Since a singleton type elided parameter could
also feature in the proposed NormalLambdaExpression, the only distinction
between SingleParameterLambdaExpression and NormalLambdaExpression for
that scenario would be a boolean discriminating the presence or lack of
parenthesis. 

This could easily be captured either as a boolean or as "suitable" source 
position values in the NormalLambdaExpression form obviating the need for a 
separate node type SingleParameterLambdaExpression. And if we do that the 
need for the hierarchy goes away and the whole thing collapses into a single, 
simple class avoiding proliferation.

This boolean does not even have to a property - clients should not care
only the rewriter could/would want to know.

> We could also split NormalLambdaExpression into two types, but I think a
> parameters() property with element type VariableDeclaration is fine.
> Note that "arguments" is not the right name here.

Yes, we discussed about how the confusion between arguments and parameters
is all pervsaive in JDT/Core code. But APIs should not perpetuate improper
form - Manoj, please follow up.

> I don't see a big difference between VariableDeclarationFragment and
> TypeElidedVariableDeclaration. Once the latter is finished, it will look the
> same as the former, so I think we should just use
> VariableDeclarationFragment for the second form.

This needs some further thought: A type elided method parameter is a new
"concept" in the domain and so is worth modeling as a new abstraction.
A type elided lambda parameter is not a VariableDeclarationFragment,
in that it is not a part of a larger declaration with some elements of
which it shares some properties, while being unique on its own wrt
to some other properties. Some operations like setting initializers and
extra dimensions(info), does not make sense for this case and are
not conveniently rejected. We "document it away", but why do that and
why not retain the new abstraction ?

The other alternative we considered was to make the type elided 
parameter be represented as a SimpleName - this would require
argument list to be a ASTNode list loosening precision needlessly.

> Re (6): The body is either a Block or an Expression. We cannot use
> ExpressionStatement, since that node includes a ";", which is wrong at the
> end of a LambdaExpression. I don't think it's worth creating even more node
> types, so I'd just declare the node type of the body property as ASTNode and
> explain the allowed types in the Javadoc.

I wonder if the existing ExpressionStatement itself is an overkill.
Why didn't we simply make Expression extend Statement ??? This is what
is done in the compiler side. After all the language allows certain
expressions to qualify as statements and any illegitimate attempt on
the part of an expression to posture itself as a statement would be
rejected by the compiler.

Is it too late/complicated to reparent Expression to extend Statement
on the DOM side ? What are the complications ?
(In reply to comment #9)

> not conveniently rejected. We "document it away", but why do that and
> why not retain the new abstraction ?

Read as: We could "document it away".

Manoj, TEVD should silently accept some invalid operations like set 
initializer. It should throw IAE where the API would allow. If the
API is new it should be documented as throwing IAE.
(In reply to comment #10)

> The other alternative we considered was to make the type elided 
> parameter be represented as a SimpleName - this would require
> argument list to be a ASTNode list loosening precision needlessly.

Are these other alternatives acceptable:

(1) Could the lambda parameters be SingleVariableDeclarations with
SingleVariableDeclaration's getType() returning null ? I see that
this is tagged as MANDATORY in SVD at the moment.

(2) If returning null is not acceptable, would a singleton object of
type ElidedType be acceptable ?
(In reply to comment #10)
> (In reply to comment #9)
> 
> > not conveniently rejected. We "document it away", but why do that and
> > why not retain the new abstraction ?
> 
> Read as: We could "document it away".
> 
> Manoj, TEVD should silently accept some invalid operations like set 
> initializer. It should throw IAE where the API would allow. If the
> API is new it should be documented as throwing IAE.

This may be need to be UnsupportedOperationException and not IAE.
Gentlemen, can we decide what we are agreeing to ? Thanks.
The single LambdaExpression node with a boolean "parameterParentheses" property sounds good. The property should be explicit and settable, since clients of the DOM API should have full control over the presentation.


Re element type of the "parameters" property: The element type should always be a VariableDeclaration (and not a SimpleName), see that class's Javadoc:
 * Abstract base class of all AST node types that declare a single
 * variable.

VariableDeclaration also has #resolveBinding(), which should stay the only way to get a variable declaration's IVariableBinding.

The alternatives from comment 11 won't work:
(1) SingleVariableDeclaration with null type: Would be a breaking change.
(2) Singleton object of type ElidedType: Nope, see e.g. PrimitiveType's Javadoc:
 * Note that due to the fact that AST nodes belong to a specific AST and
 * have a specific parent, there needs to multiple instances of these nodes.

I agree that VariableDeclarationFragment was not originally intended as a TypeElidedVariableDeclaration, but the two are not that much different: They both don't declare a type but get it from the context. Yes, the latter doesn't have an explicit node for the type, but for a client of the DOM API, this doesn't really matter. VariableDeclarationFragment is already used as child of three different node types, and a fourth usage doesn't hurt. Clients that process this node have to check getLocationInParent() anyway, and then they immediately see whether it's used as a LambdaExpression's parameter or not.

And since we can't do away with the existing properties of VariableDeclaration, adding a third subtype TypeElidedVariableDeclaration and deprecating most of its properties doesn't help much in terms of a better abstraction. Compare this to SingleVariableDeclaration, which is also restricted in practice, e.g. when used as a CatchClause parameter (no varargs, no extra dimensions, no initializer).


> I wonder if the existing ExpressionStatement itself is an overkill.
> Why didn't we simply make Expression extend Statement ?[..]

That view is probably fine in the compiler, but less so for ASTRewrite. After the compiler has passed syntax validation, it doesn't have to care about ';' and other syntactic details any more. But in the DOM AST up to JLS7, an Expression cannot serve as a Statement without a ';'. The ASTRewrite should not insert/remove ';' behind the scenes when nodes are moved around.

Furthermore, I quickly looked for places in the jdt.ui code where we walk up the hierarchy until we find a Statement. I found at least 4 usages of "ASTNodes.getParent(node, Statement.class)", and there are probably more places where we expect that an Expression is not a Statement. Given that this would also affect clients that request a JLS4 AST, I don't think we should do that.
(In reply to comment #14)
> The single LambdaExpression node with a boolean "parameterParentheses"
> property sounds good. The property should be explicit and settable, since
> clients of the DOM API should have full control over the presentation.

Sounds good.

> Re element type of the "parameters" property: The element type should always
> be a VariableDeclaration (and not a SimpleName), see that class's Javadoc:
>  * Abstract base class of all AST node types that declare a single
>  * variable.

Agreed. Without having studied the cited javadoc, I was recommending that
it be a VariableDeclaration, because it sounded the right model.

> The alternatives from comment 11 won't work:
> (1) SingleVariableDeclaration with null type: Would be a breaking change.
> (2) Singleton object of type ElidedType: Nope, see e.g. PrimitiveType's
> Javadoc:
>  * Note that due to the fact that AST nodes belong to a specific AST and
>  * have a specific parent, there needs to multiple instances of these nodes.

These context citations are useful, thanks.

> I agree that VariableDeclarationFragment was not originally intended as a
> TypeElidedVariableDeclaration, but the two are not that much different: They
> both don't declare a type but get it from the context. Yes, the latter
> doesn't have an explicit node for the type, but for a client of the DOM API,
> this doesn't really matter. VariableDeclarationFragment is already used as
> child of three different node types, and a fourth usage doesn't hurt.
> Clients that process this node have to check getLocationInParent() anyway,
> and then they immediately see whether it's used as a LambdaExpression's
> parameter or not.
> 
> And since we can't do away with the existing properties of
> VariableDeclaration, adding a third subtype TypeElidedVariableDeclaration
> and deprecating most of its properties doesn't help much in terms of a
> better abstraction. Compare this to SingleVariableDeclaration, which is also
> restricted in practice, e.g. when used as a CatchClause parameter (no
> varargs, no extra dimensions, no initializer).

This is not very clean, but I concur that it is "clean enough" and practical 
enough.

> Given that
> this would also affect clients that request a JLS4 AST, I don't think we
> should do that.

Great, again these client side perspectives are very useful.

Manoj, I think you have all the answers, so please proceed to wrap this
up. TIA.
(In reply to comment #7)
> (6) That said, this seems indicative of abstraction/modelling problem.
> In the compiler AST Expression is a subtype of Statement and Block is
> also a subtype of Statement - In the DOM universe this is not the case.

[...]


(In reply to comment #8)
> Re (6): The body is either a Block or an Expression. We cannot use
> ExpressionStatement, since that node includes a ";", which is wrong at the
> end of a LambdaExpression. I don't think it's worth creating even more node
> types, so I'd just declare the node type of the body property as ASTNode and
> explain the allowed types in the Javadoc.

[...]

This whole confusion around semicolon printing is arising because the proposed
patch does not discriminate between Block and Expression forms of lambda body:
The fix is trivial:

Instead of in the converter trying to do this:

lambdaExpression.setBody(convert(lambda.body));  // always goes to convert(Statement)

do this:

lambdaExpression.setBody(lambda.body instanceof Expression ?
                          convert((Expression) lambda.body) :
                          convert((Block) lambda.body);

You need to spell out the fully qualified Expression and Block of course.

// ------------  detour ------
It would be neat if Java allowed me to say:

lambdaExpression.setBody(convert(lambda.body instanceof Expression ?
                          (Expression) lambda.body) :
                          (Block) lambda.body);

but because of the way the conditional expression's overall type is
defined this won't work of course.

Perhaps there could be a ?? operator that can allow the new semantics.
May be this could be proposed for a coins items for Java9
----------------------------------------
(In reply to comment #16)

> > types, so I'd just declare the node type of the body property as ASTNode and
> > explain the allowed types in the Javadoc.

Manoj, you still need to do this of course.
(In reply to comment #16)
> // ------------  detour ------
> It would be neat if Java allowed me to say:
> 
> lambdaExpression.setBody(convert(lambda.body instanceof Expression ?
>                           (Expression) lambda.body) :
>                           (Block) lambda.body);

Java only supports polymorphic dispatch on the receiver of a method invocation, but doesn't do pattern matching on the types of the arguments. Other languages support such "multiple dispatch", but I don't think this should be added to Java (since it makes method dispatch even harder to understand).
Created attachment 227733
Proposed Patch
(In reply to comment #19)
> Created attachment 227733 [details] [diff]
> Proposed Patch

* AST:
- newLambdaExpression() misses:
 * @exception UnsupportedOperationException if this operation is used below JLS8
- please sort the new*() methods alphabetically (newExtraDimension() and newUnionType() as well).

* ASTVisitor, ASTMatcher, NaiveASTFlattener:
- order

* LambdaExpression:
- duplicated header comment after first import
- parenthesis => parentheses (everywhere)
- please sort everything according to source order: constant declarations, field declarations, property descriptor list. Move has/setParentheses(..) down to before the parameters() method.
- bad line comment in setBody()
- setBody(..) should throw an IAE if the node is not a Block or Expression
- handling of "null" for body doesn't makes sense. Look for another child property that cannot be null and copy lazy initialization and all comments from there.
- clean up Javadocs: No . or - etc. at the end of a tag description that is not a full sentence. Full stop at the end of main description.
- has/setParentheses(..) Javadoc: "this has parenthesis" => "this lambda expression has parentheses around the parameters"
- class Javadoc: explain that first two forms use VariableDeclarationFragment as parameter type, and the third form uses SingleVariableDeclaration. Explain what happens if #hasParentheses is set to false and #parameters contains SingleVariableDeclarations: Is this illegal, or will #hasParentheses just not be used?

I didn't look at the other (non-API) changes.
(In reply to comment #18)
> (In reply to comment #16)
> > // ------------  detour ------
> > It would be neat if Java allowed me to say:
> > 
> > lambdaExpression.setBody(convert(lambda.body instanceof Expression ?
> >                           (Expression) lambda.body) :
> >                           (Block) lambda.body);
> 
> Java only supports polymorphic dispatch on the receiver of a method
> invocation, but doesn't do pattern matching on the types of the arguments.
> Other languages support such "multiple dispatch", but I don't think this
> should be added to Java (since it makes method dispatch even harder to
> understand).

I simply meant it as syntactic sugar with no new dispatch semantics, 
hence the mention of coin. So I would have expected the compiler to
have transformed this code into the code suggested as the one to be
done.
(In reply to comment #20)

> * AST:
> - newLambdaExpression() misses:
>  * @exception UnsupportedOperationException if this operation is used below
> JLS8

(1) and actually throw the exception from the constructor. See UnionType.

(2) Expression.java is missing JCP disclaimer.

(3) ASTConverter: lambda conversion method: case argument.type == null:
Should use internalSetIdentifier like the other places rather than go 
through API. The name would have been validated by the compiler.

(4) Same place, SimpleName's source ranges are not set. (Search for other
uses of "new SimpleName(this.ast)" in the converter.)

(5) lambdaExpression.setBody call is better written with an if-else:
the line as is runs to 270 columns (!) 

(6) hasParens - can be renamed to the same name used on the DOM side.

(7) DOM LambdaExpression copyright: I believe the right thing to do is
to mention only 2013 for new files and not 2011 - 2013.

(8) getBody() javadoc mentions it will throw NPE is body is null, this
does not sound right.

(9) setBody javadoc: @param body the block node, or <code>null</code> if there is none: Misses mention that body can be an expression.
(10) getBody javadoc: a expression => an expression

(11) setBody javadoc: presently mentions "Sets or clears the body of this 
lambda expression." and then throws an exception if body is null. As was
pointed earlier, null handling here does not make sense here, when that is
fixed, remember to fix the javadoc also.
(In reply to comment #20)

> - handling of "null" for body doesn't makes sense. Look for another child
> property that cannot be null and copy lazy initialization and all comments
> from there.

I think what Markus is trying to say here is that body being a mandatory
property for the structural integrity of the node type, getBody() should
not return null.

In LambdaExpression.java: this piece of code:

	/**
	 * The method body.
	 * Defaults to none.
	 */
	private ASTNode body = null;

should be changed to:

	/**
	 * The method body; lazily initialized, defaults to an empty Block
	 */
	private ASTNode body = null;

and getBody should synthesize an empty body and return it if body == null.
Created attachment 227789
Proposed Patch - In Progress

Most of the comments addressed, eyeballing and possible cleanup left.

A couple of points need more clarification:

Markus and Srikanth: 
1) => Explain what happens if #hasParentheses is set to false and #parameters contains SingleVariableDeclarations: Is this illegal, or will #hasParentheses just not be used?
 - The above has been addressed in the patch as 
"	 * Indicates the presence or absence of parenthesis.
	 * defaults to false. In case of parameters having no elements,
	 * {@link SingleVariableDeclaration} elements or
	 * more than one {@link VariableDeclarationFragment}, this field is 
	 * ignored; ie this field is ignored in case of illegal false value.
"
Srikanth:
2) =>(3) ASTConverter: lambda conversion method: case argument.type == null:
Should use internalSetIdentifier like the other places rather than go 
through API. The name would have been validated by the compiler.

internalSetIdentifier has been added, but what is the case when argument.type == null?
(In reply to comment #25)

> A couple of points need more clarification:
> 
> Markus and Srikanth: 
> 1) => Explain what happens if #hasParentheses is set to false and
> #parameters contains SingleVariableDeclarations: Is this illegal, or will
> #hasParentheses just not be used?
>  - The above has been addressed in the patch as 
> "	 * Indicates the presence or absence of parenthesis.

Should be parentheses. It is better phrased as: Indicates whether or
not the lambda parameters are parenthesized.

> 	 * defaults to false. In case of parameters having no elements,

Defaults to true is more natural and less burdensome some for clients 
I think. Also leads to less prone-to-error situations as it is always
legal to parenthesize.

> 	 * {@link SingleVariableDeclaration} elements or
> 	 * more than one {@link VariableDeclarationFragment}, this field is 
> 	 * ignored; ie this field is ignored in case of illegal false value.
> "

ie => i.e., 

Such a disclaimer is more useful in the API than just in the private field
declaration. 

> Srikanth:
> 2) =>(3) ASTConverter: lambda conversion method: case argument.type == null:
> Should use internalSetIdentifier like the other places rather than go 
> through API. The name would have been validated by the compiler.
> 
> internalSetIdentifier has been added, but what is the case when
> argument.type == null?

I don't see a call to internalSetIdentifier in the patch.

In ASTConverter:

if (argument.type == null) {
+					VariableDeclarationFragment variableDeclarationFragment = new VariableDeclarationFragment(this.ast);
+					SimpleName simpleName = new SimpleName(this.ast);
+					int start = argument.sourceStart;
+					int end = argument.sourceEnd;
+					simpleName.setSourceRange(start, end - start + 1);
+					simpleName.setIdentifier(new String(argument.name));

does the last line quoted have to be setIndentifier ? Can it be internalSetIdentifier as is the case for the other SimpleName's created in
the converter ?
The latest patch also generates an additional warning, which is a no-no.
Please address that also before reposting.
Created attachment 227839
Proposed Patch
(0) For committers, the recommended way to handle code reordering (moving
methods around to maintain sort order etc) changes is to make an altogether
separate commit that clearly calls out the nature of the change. We should 
not piggy back such non-material changes on top of implementation of some 
capability since it makes it hard for some one to understand the change set
in future.

(1) Javadoc on AST.newLambdaExpression() claims "By default, the declaration 
is for a lambda expression with an empty argument list and no body." The word
declaration is a hangover from copy/paste and I changed it to:

"By default, the new lambda expression contains an empty argument list and 
the body is an empty block."

(2) Deleted the new method AST.unsupportedIn2_3_4() and removed the call to
it from the factory method. The constructor already throws it properly using
ASTNode.unsup* - why invent a new method ? 

(3) The pre-existing UnionType factory method claims it return a do statement
(!) - Fixed.

(4) In future, please declare variables as closes to their usage as required.
in ASTConverter.convert(LE), the first line starts with:
int sourceStart = lambda.sourceStart;
The first usage of this variable is 35 lines below. It can be distraction
to somebofy studying the code - Fixed.

(5) BindingResolver.resolveMethod(LambdaExpression lambda) mentions that
"The implementation of <code>LambdaExpression.resolveMethod</code>
forwards to this method." - this should be LambdaExpression.resolveMethodBinding
- Fixed. I left the mentions of "method" and "method declarations" as is

(6) LambdaExpression top level Javadoc mentions:

* LambdaExpression:
 *    Identifier <b>-></b> Body
 *    <b>(</b> [ Identifier { <b>,</b> Identifier } ] <b>)</b> <b>-></b> Body
 *    <b>(</b> [ FormalParameter { <b>,</b> FormalParameter } ] <b>)</b> <b>-></b> Body
 * </pre>
 * 
 *<p> 
 * First two forms use {@link SingleVariableDeclaration} while the third form
 * uses {@link VariableDeclarationFragment}.</p>

This should be:

 * First two forms use {@link VariableDeclarationFragment} while the third form
 * uses {@link SingleVariableDeclaration}.</p>

- Fixed.

(7) Fixed javadoc on LE.body from being:

        /**
	 * The method body.
	 * The method body; lazily initialized, defaults to an empty Block.
	 */
	private ASTNode body = null;

to

        /**
	 * The method body; lazily initialized, defaults to an empty Block.
	 */

(8) I don't think the method LambdaExpression.hasParentheses() should be
doing what it is doing: You have implemented the logic for 
shouldHaveParentheses(). This was never agreed upon in earlier comments. 
This method should just faithfully report whether or not the lambda 
parameters are parenthesized - Fixed.

(9) @return <code>true</code> if this lambda expression has parentheses an,
	 *    and <code>false</code> if it does not have parentheses legally

an and => and - fixed.

Also changed the comment to reflect (8)

(10) Changed the javadoc of setParentheses from being:

	/**
	 * Sets whether this has parentheses or not.
	 *
	 * @param hasParentheses <code>true</code> if this lambda expression has parentheses around parameters
	 *  and <code>false</code> otherwise
	 */

to

/**
	 * Sets whether this lambda expression should have parentheses around its parameters or not.
	 *
	 * @param hasParentheses <code>true</code> if this lambda expression should have parentheses around parameters
	 *  and <code>false</code> otherwise. Note: Illegal value settings are silently ignored.
	 */

(11) Fixed LE.memSize from being 3 * 4 to:
BASE_NODE_SIZE + 3 * 4;

Tests are running.
(In reply to comment #29)

> Tests are running.

(12) Please run all tests before posting a patch. The following test was failing
and I have fixed it:

ASTStructuralPropertyTest.testNodeClassForType()

(13) I think in converter tests we should not be overly relying on
toString output comparisons. These are welcome, but there should be
more of structural verification.

Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=85d82ef92c86e257cfcb71c0ec95b6b64432a5cb
(In reply to comment #20)

> - handling of "null" for body doesn't makes sense. Look for another child
> property that cannot be null and copy lazy initialization and all comments
> from there.

Manoj, you have forgotten to incorporate this correction.

if (this.body == null) this.body = new Block(this.ast);

is not the right way of doing this - Fixed and released.

Please run through all the comments to make sure nothing got dropped, Thanks.
Fixed various remaining problems: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=f041a95e804fa0b26cd4f55b03c8572e9e742dad
(In reply to comment #32)
> Fixed various remaining problems:
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
> ?id=f041a95e804fa0b26cd4f55b03c8572e9e742dad

-		while (hasNext) {
-			VariableDeclaration  variableDeclaration =VariableDeclaration) it.next();
-			variableDeclaration.accept(this);
-			if ((hasNext = it.hasNext()) == true)
-				this.buffer.append(',');
-		}
-	

+		for (Iterator it = node.parameters().iterator(); it.hasNext(); ) {
+			VariableDeclaration v = (VariableDeclaration) it.next();
+			v.accept(this);
+			if (it.hasNext()) {
+				this.buffer.append(",");//$NON-NLS-1$
+			}

Though the initial patch contained for loop, later it was changed to a while loop (after a review) since the hasNext() call is done only once per iteration in the while loop.
(In reply to comment #33)
> Though the initial patch contained for loop, later it was changed to a while
> loop (after a review) since the hasNext() call is done only once per
> iteration in the while loop.

That's correct. But the same pattern is used everywhere else in this class, so we should keep things regular and avoid surprises for the next one who touches this code.

If we really measured a performance difference and decided this is a critical region, then we would probably iterate over toArray() and not use an Iterator. And we would do that change globally (or at least in the whole class).
(In reply to comment #34)
> (In reply to comment #33)
> > Though the initial patch contained for loop, later it was changed to a while
> > loop (after a review) since the hasNext() call is done only once per
> > iteration in the while loop.
> 
> That's correct. But the same pattern is used everywhere else in this class,
> so we should keep things regular and avoid surprises for the next one who
> touches this code.

Manoj is caught between a rock and a hard place with there being two
reviewers :) - Sorry for subjecting you to pulls in different directions. 

I don't fully agree with the point about regularity(regularness ?), but it 
is not a strong enough disagreement that I can leave it as is.

> If we really measured a performance difference and decided this is a
> critical region

There is a general belief that programmers are poor judges of program hotspots
and sometimes come up with contorted code full of micro-optimizations with
the aim of improving performance where there is no real benefit. While that
sort of "optimizations" should be avoided, the case at hand is not that.


[1.8][dom ast] Add a new node type for compiler node LambdaExpression



Bug 399793 - [1.8][dom ast] Add a new node type for compiler node LambdaExpression 

Fixed Bug 399793 - [1.8][dom ast] Add a new node type for compiler node LambdaExpression 