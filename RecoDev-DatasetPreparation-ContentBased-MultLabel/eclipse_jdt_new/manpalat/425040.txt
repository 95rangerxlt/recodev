The formatter should have an option "Insert new line after type annotation", which should be disabled by default.

E.g. for the following source, the formatter should only insert a new line after "@Deprecated", but not after any occurrence of @Annot (even if all other "Insert new line after annotations on ..." options are enabled):

package xy;

import java.lang.annotation.*;
import java.util.List;

public class Try extends@Annot Object {
    @Deprecated public @Annot int b;
    public@Annot()int foo(@Annot  List<@Annot()Object> a) {
        return 0;
    }
}

@Documented
@Target(ElementType.TYPE_USE)
@interface Annot {
}


Bug 401848 / bug 403816 have already discussed the problem that type annotations cannot be distinguished from declaration annotations in all cases, e.g.:

    @Deprecated @Annot boolean hardToDecide() {
        return true;
    }

I don't think the formatter should resolve types, so the next best solution is to rely on a heuristic:

    In ambiguous cases, consider annotations as type annotations
    iff they appear after the last keyword in a modifier list.

This heuristic fails for the hardToDecide() example, but that's acceptable (and still way better than the current state, where the formatter produces bad results in many more cases).

The formatter should have an option "Insert new line after type annotation", which should be disabled by default.

E.g. for the following source, the formatter should only insert a new line after "@Deprecated", but not after any occurrence of @Annot (even if all other "Insert new line after annotations on ..." options are enabled):

package xy;

import java.lang.annotation.*;
import java.util.List;

public class Try extends@Annot Object {
    @Deprecated public @Annot int b;
    public@Annot()int foo(@Annot  List<@Annot()Object> a) {
        return 0;
    }
}

@Documented
@Target(ElementType.TYPE_USE)
@interface Annot {
}


Bug 401848 / bug 403816 have already discussed the problem that type annotations cannot be distinguished from declaration annotations in all cases, e.g.:

    @Deprecated @Annot boolean hardToDecide() {
        return true;
    }

I don't think the formatter should resolve types, so the next best solution is to rely on a heuristic:

    In ambiguous cases, consider annotations as type annotations
    iff they appear after the last keyword in a modifier list.

This heuristic fails for the hardToDecide() example, but that's acceptable (and still way better than the current state, where the formatter produces bad results in many more cases).
Consider the following example:
--------------------------------------------
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

public class X {
}

@Target(ElementType.TYPE_USE)
@interface Ann1 { }

class A {
	public void foo(X x, @Ann1 X arg) { }
}
--------------------------------------------
Move method #foo to X by choosing 'X x' as the receiver. It results in inserting a new line after annotation on the parameter as shown below:
--------------------------------------------
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

public class X {

	public void foo(@Ann1
	X arg) { }
}

@Target(ElementType.TYPE_USE)
@interface Ann1 { }

class A {
}
--------------------------------------------
It happens as the parameter (@Ann1 X arg) is considered as a SingleVariableDeclaration during AST rewrite and the formatter option "Insert new line after annotations on local variables" is enabled. 

After the new option is added and when it is disabled, new line should not be added after the type use annotation on parameter.

However, until we have the new option, it is not correct to add a new line as above because the option "Insert new line after annotations on parameters" is disabled but still the new line is being added.
(In reply to Noopur Gupta from comment #1)

> After the new option is added and when it is disabled, new line should not
> be added after the type use annotation on parameter.

Noopur, this would fall in the hard to decide - basically Ann1 is featuring in
SE7 location and we cannot decide it is a type annotation without symbol
resolution.

> However, until we have the new option, it is not correct to add a new line
> as above because the option "Insert new line after annotations on
> parameters" is disabled but still the new line is being added.

This should be fixed, but I don't see this behavior. Can you double check ?
The only way given where the spec is headed is to impose conventions - such as
specify type annotations after all modifiers. We don't know whether there would
be adoption of such a convention, it cannot be enforced in all places - 
i.e parameters - most of them they will lack any modifiers.

Not saying we won't do this for BETA_JAVA8, given the restrictions the solution
would have and questions around its adoption, perhaps other tasks could be
pursued profitably in the GA time.

I am open to being persuaded.
(In reply to Srikanth Sankaran from comment #2)
> This should be fixed, but I don't see this behavior. Can you double check ?

I checked with the latest code and also tried with Kepler (4.3.2) with latest Java8 bundles. I am able to reproduce the issue in both.
(In reply to Noopur Gupta from comment #4)

> I checked with the latest code and also tried with Kepler (4.3.2) with
> latest Java8 bundles. I am able to reproduce the issue in both.

Sorry for wasting your time, yes I can see the problem, I was merely formatting
the code and didn't see that I should move. 

See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=401848
I tried this on Helios. We drop the whole annotation, not just badly format it.

I agree this particular thing should be fixed so that formatting during rewrite
honors the setting.
It turned out comment 1 is actually a bug in the ASTRewriteFormatter. Fixed with bug 427362.

This bug (comment 0) is about the formatter problem (independent of ASTRewrite).
(In reply to Srikanth Sankaran from comment #3)
> it cannot be enforced in all places - 
> i.e parameters - most of them they will lack any modifiers.

The current default behavior is bad for type annotations on all declarations except for parameters (where the formatter setting to insert new lines is off by default).

Type parameters are also not affected, since the formatter doesn't seem to insert new lines after annotated type parameters anyway.

With the heuristic from comment 0, I think we would be on a good track. For annotations on parameters, I don't see a good solution, but the default formatter settings are working in our favor there (i.e. it doesn't matter if we mis-classify annotations on parameters).

For type annotations in declarations, at least a visibility modifier is often present, so I expect the heuristic to work well.

Of course, users have to adhere to conventions [1], but that's still better than producing a wrong formatting in most cases and not offering a solution.


[1] The JLS8 preview says in 9.7.4: "It is customary, though not required, to place annotations before all other modifiers."
=> Wrong; that's not the tradition for type annotations!

The java-annotation-design.html said: "It is strongly recommended that type annotations be written immediately before the type, after declaration annotations and modifiers."

A more useful recommendation to alleviate the grammar problems is this:
"It is strongly recommended that declaration annotations be written before all other modifiers, and type annotations immediately before the type."
Created attachment 239680
Proposed Patch

In this proposed solution, the new line insertion is controlled by an option, which is, by default, false. In the current code, the modifier list is traversed from left to right and emitted as and when encountered with or without the new line. Proposed solution does not emit the new line after it finds a non-annotation modifier. Note that this heuristic is different in that it does not wait until it sees the end of the list. However, this is simpler and fits into the existing code. And in all the "well behaved cases" where type annotations occur in after the non-annotation modifiers, the behavior is the same as that of the suggested heuristic of figuring out whether this is the last set of annotations (here it checks whether these are *not* the first set of annotations).
Jay, can you please review this ? I already have 7-8 patches in the pipeline
for reviews. TIA.
(In reply to Manoj Palat from comment #9)
Thanks for the patch and the explanations. Makes sense to me and works well.

Released with a few adjustments:

- Typo in Javadoc of DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_TYPE_ANNOTATION

- Reverted the changes in DefaultCodeFormatterOptions#setDeprecatedOptions(Map). Type annotations are a new construct that was not covered by the old option, and since the new default is DO_NOT_INSERT, we don't want to enable it there.

- In Scribe#printModifiers(..), added the same treatment for all kinds of declaration annotations. It's definitely necessary for local variables and parameters (see updated tests), but I think it also doesn't hurt for packages (where it shouldn't occur with JLS8) and for types (where it only makes a difference for non-recommended code styles).

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=90a561fc4554bf1cfedd4387faeef02d32d66ca5
(In reply to Markus Keller from comment #11)
> - Reverted the changes in
> DefaultCodeFormatterOptions#setDeprecatedOptions(Map).

Forgot that the new option must still be stored in set(Map): http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=55d39504efb3d0b23ce8f4487f5528fe899ca35d


And I've also added the UI for the new option: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=55d39504efb3d0b23ce8f4487f5528fe899ca35d
Created attachment 239742
local vars / parameters assume type annotations by default

Spoke too soon. I had tested the new heuristic from comment 9 before I added the fix in comment 11 that also enabled type annotations formatting in local variables and parameters.

But now, common cases like this don't treat the annotation as type annotation any more, because the heuristic assumes declaration annotations until the first keyword modifier is seen (i.e. inserts new lines if the "new lines after parameter / local variable annotations" options are enabled):

    void foo(@NonNull String name) {
        @NonNull String upper = name.toUpperCase();
    }

However, for annotations on types/methods/fields, I agree the default should be to assume declaration annotations (unless they appear after a keyword modifier):

    @Deprecated
    @Annot
    boolean hardToDecide() {
        return true;
    }

=> The heuristic cannot be the same for both cases if we expect different defaults.

The attached patch implements context-dependent heuristics via the last argument to Scribe#printModifiers(..) if keywords are absent in the modifiers list:
- parameter / local variable: assumes type annotations
- other element kinds: assumes declaration annotations

I'm not really sure what's the best solution. An alternative would be to go with the current solution in BETA_JAVA8 but disable "New line after annotation on local variable" by default.
(In reply to Markus Keller from comment #13)
(In reply to Markus Keller from bug 401848 comment #25)
> I now think we should only treat method parameters specially,
> i.e. assume type annotations if there are no other keywords in the modifier
> list.
> 
> A common usage pattern is to have @SuppressWarnings("...") on a local
> variable, and we should not start treating these as type annotations.

Fixed this and bug 401848 with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=cd140389e1d0cdca9f232f9b33d1b09e90034b22


[1.8][formatter] Add option: "Insert new line after type annotation"



Bug 425040: [1.8][formatter] Add option: "Insert new line after type annotation" 

Bug 425040: [1.8][formatter] Add option: "Insert new line after type annotation" 

Bug 425040: [1.8][formatter] Add option: "Insert new line after type annotation" 

Fixed Bug 425949: [1.8] [move method] Type annotated target should be converted to receiver parameter - Updated tests after the fix for bug 425040 

Bug 425040: [1.8][formatter] Add option: "Insert new line after type annotation" 

Fixed Bug 420116: [1.8] Add implemented methods should consider type annotations - Updated tests after the fix for bug 425040 

Bug 425040: [1.8][formatter] Add option: "Insert new line after type annotation" 