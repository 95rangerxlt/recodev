If IPropertySource is appearing in the property sheet as the value of a property
of some other IPropertySource then the source is asked for getEditableValue. If
the returned value is null, then the PropertySheetEntry should use the original
value, and not null value.

For example, my PropertySource contains a property with value of type jdt.IType.
The PropertySource for IType returns null in getEditableValue, and this null is
actually used by PropertySheetEntry as the edit value;  the consequence is that
CellEditor provided in PropertyDescriptor of the property does not work.

@see PropertySheetEntry#getEditValue

If IPropertySource is appearing in the property sheet as the value of a property
of some other IPropertySource then the source is asked for getEditableValue. If
the returned value is null, then the PropertySheetEntry should use the original
value, and not null value.

For example, my PropertySource contains a property with value of type jdt.IType.
The PropertySource for IType returns null in getEditableValue, and this null is
actually used by PropertySheetEntry as the edit value;  the consequence is that
CellEditor provided in PropertyDescriptor of the property does not work.

@see PropertySheetEntry#getEditValue
For reasons explained in the comment for IPropertySource.getEditableValue, it 
is important to return a value (null is not an acceptable return value).

While returning "this" might be an option, I don't think that the property 
sheet should implement this as the default.

Moved to JDT
Fixed in build > 20010108


keep property value if IPropertySource.getEditableValue returns null



HEAD - Fixed bug 362331: Resource leak not detected when closeable not assigned to variable 

Fixed bug 216233: [preferences] Surface new compiler option unusedDeclaredThrownExceptionIncludeUncheckedExceptions 

[6233] 