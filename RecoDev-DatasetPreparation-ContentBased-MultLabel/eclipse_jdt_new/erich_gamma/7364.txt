With a large number of projects, just the time needed to CHECK if a project or 
class needs to be recompiled due to a change somewhere else can take a long 
time.  It would be nice if compilation were broken in to two steps:  

Step One, verify the current compilation unit.  If this passes, and the user 
has the "perform build automatically" preference checked, then continue with 
incremental compilation just like it works now.  If it FAILS however, then it 
should be user-configurable (or default behavior) NOT to perform the auto build 
until the local problem is fixed -- in other words, halt the rest of the 
compilation until they fix the (probably small) syntax error, and then try 
again next time they save. 

This is kind of like the pop-up dialog that appeared when saving in Visual Age, 
but no pop-up dialog is necessary. Users will just fix the local problem and 
then hit save again, when everything will happen the "normal" way.  

This will prevent a problem I have where I compile, and because of a stupid 
mistake I end up with two time consuming saves as WSAD cycles through all 25 
EJBs checking to see if they are affected -- all because I misplaced a double 
quote.  I understand that WSAD is a bit behind the curve in incremental compile 
speed, but it will never be no-time. 

-Andrew

With a large number of projects, just the time needed to CHECK if a project or 
class needs to be recompiled due to a change somewhere else can take a long 
time.  It would be nice if compilation were broken in to two steps:  

Step One, verify the current compilation unit.  If this passes, and the user 
has the "perform build automatically" preference checked, then continue with 
incremental compilation just like it works now.  If it FAILS however, then it 
should be user-configurable (or default behavior) NOT to perform the auto build 
until the local problem is fixed -- in other words, halt the rest of the 
compilation until they fix the (probably small) syntax error, and then try 
again next time they save. 

This is kind of like the pop-up dialog that appeared when saving in Visual Age, 
but no pop-up dialog is necessary. Users will just fix the local problem and 
then hit save again, when everything will happen the "normal" way.  

This will prevent a problem I have where I compile, and because of a stupid 
mistake I end up with two time consuming saves as WSAD cycles through all 25 
EJBs checking to see if they are affected -- all because I misplaced a double 
quote.  I understand that WSAD is a bit behind the curve in incremental compile 
speed, but it will never be no-time. 

-Andrew
Are you using a 1.0 product (which it seems if using WSAD). We made big 
performance improvement around the Java builder in the 2.0 stream.

Now for the particular item you mention, do not recompile the rest of the world 
until you resolve all problems first, this sounds like an interesting idea. I 
do not see well how this would scale with running with problem types (since 
recompilation might be necessary anyway to react to other correct changes).

VAJ did only prompt you when saving a file with errors. It did only perform a 
compile check before save. This very item is on the 2.0 plan already.



I use both a 1.0 build (WSAD) and a 2.0 build of just Eclipse, depending on 
which computer I am using and/or what I am trying to do.  Basically, that means 
if I need to do J2EE testing, I use WSAD for the Websphere support.  In WSAD is 
where I really notice this problem, because my workspace is much larger, and 
the addition of EJB validation.  

However, if I understand the architecture correctly, plugins can define their 
own validators (like an EJB validator), and so the number & complexity of 
incremental compilation checks has no theoretical limit -- and large workspaces 
with large # of interdepependent projects could suffer.  

The basic point here is this:   If the CU you are compiling has syntax errors 
in it, then it doesn't seem correct to use an invalid CU to 
verify/check/recompile the other CUs.  More specifically, there is no need to 
do a full incremental build if there is a simple syntax error in the current CU 
being saved -- that full incremental build can be delayed until the active CU 
is corrected and saved again.  This gets more complicated if the syntax error 
is due to a dependency on another CU (e.g. you call a method that doesn't exist 
on another object), but I am not sure that it really matters.  

Now.. another point.  I realize that if the public interface of the object does 
not change, then no CU's outside the hierarchy & package need to be recompiled -
- but isn't there at least a cursory "check" of every project in the workspace 
to ask if it needs to be rebuilt due to the latest change?  I can see this in 
WSAD with 1.0 -- when you save an EJB project, it (quickly, but not instantly) 
cycles through all the other EJB projects to verify they are still valid.  This 
takes time, and becomes annoying when you have to do it twice.  

Perhaps we can even make this simpler and just add another accelerator 
for "save & compile this CU only", and then figure out how to trigger the 
incremental build another way -- though I am not sure what.  Perhaps, if you 
use that accelerator the CU is automatically marked as "dirty" or "modified" 
(with the asterisk, whatever your term for it is), so the user will have to 
save again the "normal" way before closing it/moving on.  So "save & compile CU 
only" would do this:

1. Save CU to disk
2. Recompile CU -- skip incremental, but report errors in current CU
3. Mark CU as "modified" or "dirty" -- requiring another (regular) save at a 
later time

In fact... the more I think about it, the more this approach makes sense to 
me.  


Obviously you have a much better understanding of how all this "really works" 
so you tell me what seems reasonable.  All I know for sure is that saving a 
Class in one of my EJB projects makes me nervous :)
The new Java builder released in 2.0 stream has this nice property you 
described (structural change). 

If you do a one method body change, it should take no time.

Your point on a syntax error is well-taken though (note that syntax errors do 
not include unbound method, type, field ones). On the 2.0 plan, we have an open 
request for adding the sanity check before saving. 

When a syntax error occurs inside a method body, we still produce a classfile 
which can be compiled/run against. If in the same process, you did add/delete 
an extra method which affects other type, then if we did not rebuild 
dependents, you might end up dying when attempting to test run your code.

Please give a try to the new builder performance, and let us know if you think 
this is still an issue. Thanks for your feedback.

Having discovered Bug 4164 (feature request), I believe these two can be 
consolidated.  My only caveat would be to make sure 4164 applies even if you 
have "build automatically on resource modification" selected.  That means, 
either knowing what to do when I hit ctrl-S (syntax-check-then-if-successful-
compile), or using a system like the one I describe below, where a save-with-
syntax-errors does not trigger a build, but DOES mark the editor as modified, 
so you won't "forget" to fix the problem and trigger a real compile.  I suppose 
we would also need a "compile-anyway-despite-the-syntax-error" capability. 

 
*** Bug 4164 has been marked as a duplicate of this bug. ***
we are now supporting checking as the user types.


Two-step compilation:  Verify current compilation unit first, if that fails, Do not continue checking for affected CU's



Fixed Bug 407364 - [1.8][dom ast] Incorrect ASTRewrite for QualifiedType 