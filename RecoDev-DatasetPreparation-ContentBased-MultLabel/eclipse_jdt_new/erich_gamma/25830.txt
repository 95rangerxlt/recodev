Eclipse will allow you to specify JDK 1.1.8 a JRE for running code.  This is 
quite useful for those developing code for environments that don't support Java 
2, such as some browser VMs.  However, the JUnit plugin does not work with the 
JDK 1.1.8 because the RemoteTestRunner uses classes that aren't available in 
that VM.  When I create a simple JUnit test and attempt to run it in Eclipse 
using JDK 1.1.8, I get the following message in the console:

java.lang.NoClassDefFoundError: java/util/ArrayList
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.<init>
(RemoteTestRunner.java:32)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main
(RemoteTestRunner.java:149)

I know the Vector class isn't as elegant as ArrayList, but it's available 
everywhere - could it be used instead, or perhaps an alternate JDK 1.1.8-
friendly remote test runner could be invoked in such a scenario?

Eclipse will allow you to specify JDK 1.1.8 a JRE for running code.  This is 
quite useful for those developing code for environments that don't support Java 
2, such as some browser VMs.  However, the JUnit plugin does not work with the 
JDK 1.1.8 because the RemoteTestRunner uses classes that aren't available in 
that VM.  When I create a simple JUnit test and attempt to run it in Eclipse 
using JDK 1.1.8, I get the following message in the console:

java.lang.NoClassDefFoundError: java/util/ArrayList
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.<init>
(RemoteTestRunner.java:32)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main
(RemoteTestRunner.java:149)

I know the Vector class isn't as elegant as ArrayList, but it's available 
everywhere - could it be used instead, or perhaps an alternate JDK 1.1.8-
friendly remote test runner could be invoked in such a scenario?
Erich, please comment.

can now compile the remote test runner against 1.1.7


JUnit plugin does not run using JDK 1.1.8



25830 