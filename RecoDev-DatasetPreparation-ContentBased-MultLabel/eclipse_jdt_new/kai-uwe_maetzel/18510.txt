In the 0530 build the leaks with the .java editor appear to have been fixed. 
The scenario I was using before:

Create a .java file, close it.
In memory profiler do a global GC and mark objects
Open the same .java file, close it

Does not leave tons of objects around anymore. 

However, if you import a binary plugin (I did this by importing all plugins) 
and open the .class file there is a significant leak.

To recreate:

Select a .class file (I used junit.awtui.AboutDialog.cass) from the junit.jar
Open/Close it.
Do a global GC, snapshot
Open/Close the .class editor
Do a global GC

In the 0530 build the leaks with the .java editor appear to have been fixed. 
The scenario I was using before:

Create a .java file, close it.
In memory profiler do a global GC and mark objects
Open the same .java file, close it

Does not leave tons of objects around anymore. 

However, if you import a binary plugin (I did this by importing all plugins) 
and open the .class file there is a significant leak.

To recreate:

Select a .class file (I used junit.awtui.AboutDialog.cass) from the junit.jar
Open/Close it.
Do a global GC, snapshot
Open/Close the .class editor
Do a global GC
Reduced priority.
Adam pls investigate
i think it is ClassFileEditor that is registered as a listener on 
ClassFileDocumentProvider and not removed from the listener list on dispose()

verified that adding the following method to ClassFileEditor fixes the leak
(super must be called after deregistering as listener)
back to Kai

/*
 * @see org.eclipse.ui.IWorkbenchPart#dispose()
 */
public void dispose() {
 IDocumentProvider documentProvider= getDocumentProvider();
 if (documentProvider instanceof ClassFileDocumentProvider)
  ((ClassFileDocumentProvider)documentProvider).removeInputChangeListener(this);
 super.dispose();
}
Reviewed & released.


ClassFileEditor leaks



Bug 185102 [actions] Assign Working Sets if there are no working sets 

Fixed bug 185100: Copy Qualified Name should not be enabled in Class File Editor without source 

#18510 