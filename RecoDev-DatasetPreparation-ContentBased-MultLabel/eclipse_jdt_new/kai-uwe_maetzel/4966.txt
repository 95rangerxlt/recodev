I was trying to type the following into a subclass of JUnit's TestCase class:

static public void assertEquals(String message, int expected[], int actual[]) {
	boolean equal = false;
	... // other stuff here
	if (!equal) {

When I got to the 'if' statement and typed the opening "(" the automatic code 
assist came up. I kept typing "!equal" but when I typed the closing ")" I was 
surprised to see that code assist stayed active. I kept typing the space and 
the open "{". At that point, code assist decided to automatically insert 
something bogus for me, and my line ended up looking like this:

	if (!equal) actual{

I was trying to type the following into a subclass of JUnit's TestCase class:

static public void assertEquals(String message, int expected[], int actual[]) {
	boolean equal = false;
	... // other stuff here
	if (!equal) {

When I got to the 'if' statement and typed the opening "(" the automatic code 
assist came up. I kept typing "!equal" but when I typed the closing ")" I was 
surprised to see that code assist stayed active. I kept typing the space and 
the open "{". At that point, code assist decided to automatically insert 
something bogus for me, and my line ended up looking like this:

	if (!equal) actual{
A similar case, showing additional problems:
Trying to type:

public boolean isClassTestable (ClassFile cf) {
	int flags = cf.accessFlags();
	...
	new String(cf.className()).indexOf('$') == -1

When typing the last line, "(" brings up automatic code assist,
then type cf,
then "." halts the automatic code assist but does not trigger a new one.
(which is fine by me, really, but it might not be what you want... <g>)
Keep typing (ignoring the code assist) and after you type "className())" and 
then "." you suddently get a bogus extra "cf" inserted into your code before 
the "." as follows:

new String(cf.className())cf.


Another one, this time with ";".

While typing this:

out.write(buf,0,buf.length);

you get this:

out.write(buf,0,buf.length)buf;
Build 20011218.


Automatic Code Assist needs to be smarter #2



HEAD - 149665 

HEAD - 149665 

CR249664 |  APT needs to mark files and folders as derived 

Fix for 49660 

Bug 349665: [1.7][quick fix] Need 'Surround with try/multi-catch' 

Fixed bug 349665: [1.7][quick fix] Need 'Surround with try/multi-catch' 

Fixed bug 349665: [1.7][quick fix] Need 'Surround with try/multi-catch' 

Fixed bug 349665: [1.7][quick fix] Need 'Surround with try/multi-catch' 

fixed #84966: JavaHistoryActionImpl.getEditor(IFile) picks first dirty editor, ignoring argument 

4964, 4966, 4967, 4968, 4969, 4999 