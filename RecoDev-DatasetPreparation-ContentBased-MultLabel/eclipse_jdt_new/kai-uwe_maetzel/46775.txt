I20031113

Each working copy has a problem requestor for its lifetime. The problem 
requestor needs to be updated transactionally, i.e. no interleaving start/end 
call pairs. In order to ensure that, IWorkingCopy.reconcile should only be 
called when being in a monitor locking the working copy. This scheme is "per 
convention" and not satisfied by the Java core itself. 

We need a better scheme to also avoid the reconciler to become active during 
long running operations involving files open in editors such as refactorings 
across many files. A workspace operation using the working copy as scheduling 
rule seems appropriate. Need to check how to deal with working copies without 
an underlying resource. Need to check for the most appropriate location, i.e. 
caller or callee.

I20031113

Each working copy has a problem requestor for its lifetime. The problem 
requestor needs to be updated transactionally, i.e. no interleaving start/end 
call pairs. In order to ensure that, IWorkingCopy.reconcile should only be 
called when being in a monitor locking the working copy. This scheme is "per 
convention" and not satisfied by the Java core itself. 

We need a better scheme to also avoid the reconciler to become active during 
long running operations involving files open in editors such as refactorings 
across many files. A workspace operation using the working copy as scheduling 
rule seems appropriate. Need to check how to deal with working copies without 
an underlying resource. Need to check for the most appropriate location, i.e. 
caller or callee.
*** Bug 46657 has been marked as a duplicate of this bug. ***
One idea is to allow multiple requestors to work in parallel and to use only 
the result of the last one that finished. An approach similar to ThreadLocal.
Moving to M7.
*** Bug 49630 has been marked as a duplicate of this bug. ***
Moving to M8. Not yet done.
Build I20040316.


[reconciling] Need a save synchronization method to ensure transactional updating of problem requestor



#46775, #54270 