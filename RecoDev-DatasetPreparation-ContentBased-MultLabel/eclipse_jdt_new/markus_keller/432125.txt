Consider this code: 

  public static  void method(Collection<? extends Number> coll) { /* ... */ }

  public static void main(String[] args) {
    method(Collections.EMPTY_LIST);
  }

The "method" call comes with a warning: "Type safety: The expression of type List needs unchecked conversion to conform to Collection<? extends Number>". The quick fix (which, btw, I appreciate very much in non-generic situations) replaces it with

    method(Collections.<? extends Number> emptyList());

which is a compile error. It should be Collections<Number>, or more generally the lower bound for the generic type parameter (e.g. Object in case of the type argument simply being <?>).


Of course, there is no obvious quick fix if there are multiple bounds as in the following line, so probably no quick fix should be attempted here:

  public static <T extends Number & Comparable<?>> void method2(Collection<T> coll) { /* ... */ }

Consider this code: 

  public static  void method(Collection<? extends Number> coll) { /* ... */ }

  public static void main(String[] args) {
    method(Collections.EMPTY_LIST);
  }

The "method" call comes with a warning: "Type safety: The expression of type List needs unchecked conversion to conform to Collection<? extends Number>". The quick fix (which, btw, I appreciate very much in non-generic situations) replaces it with

    method(Collections.<? extends Number> emptyList());

which is a compile error. It should be Collections<Number>, or more generally the lower bound for the generic type parameter (e.g. Object in case of the type argument simply being <?>).


Of course, there is no obvious quick fix if there are multiple bounds as in the following line, so probably no quick fix should be attempted here:

  public static <T extends Number & Comparable<?>> void method2(Collection<T> coll) { /* ... */ }
Build id: 4.4, I20140402-0100.
To reproduce - Hover over the warnings at [1] and [2] and apply the Replace with... quick fix:

import java.util.Collection;
import java.util.Collections;

public class C {
	public static void method(Collection<? extends Number> coll) {}
	
	public static <T extends Number & Comparable<?>> void method2(Collection<T> coll) {}

	public static void main(String[] args) {
		method(Collections.EMPTY_LIST); //[1]
		
		method2(Collections.EMPTY_LIST); //[2]
	}
}
Well ... there are quite a few problems at work here, and Java 8 adds even more cases.

For Java 5 - 7, the best we can do is to avoid the <? extends Number> type argument. That will not work if there are multiple bounds, but I think that's a rare situation.

In Java 8, type inference has massively improved and now works in method invocations as well. None of the examples in this bug nor in bug 338018 need explicit type arguments any more. For Java 8, we can just avoid the type arguments (as we already do when the EMPTY_LIST is assigned to a variable).

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=1324581476890684abe9ae157fb07b8e09d947e2

This also avoids the IAE in ImportRewrite that Noopur found when trying this in a Java 8 project. Filed bug 432175 for that (with slightly different steps, since this bug cannot be used to reproduce any more).


[quick fix] "Expression needs unchecked conversion" "Replace with..." quick fix should not insert wild cards (resulting in a compile error)



Bug 432125: [quick fix] "Expression needs unchecked conversion" "Replace with..." quick fix should not insert wild cards (resulting in a compile error) 