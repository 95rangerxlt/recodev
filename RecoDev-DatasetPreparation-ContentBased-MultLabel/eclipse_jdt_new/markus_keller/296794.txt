User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.1; ru; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2
Build Identifier: I20090611-1540

This code worked in Eclipse 3.4 but throws org.eclipse.swt.SWTException: Invalid thread access in Eclipse 3.5.
Seems like this is because of you try to run the refactoring changes in non ui thread when possible.

Reproducible: Always

Steps to Reproduce:
final Document doc; //SynchronizableDocument
final Point position;
Refactoring ref = new Refactoring(){
  @Override
  public Change createChange(IProgressMonitor pm){
    DocumentChange change = new DocumentChange("test", doc);
    TextEdit replaceEdit = new ReplaceEdit(position.x, position.y, "replaced");
    change.setEdit(replaceEdit);
    return change;
  }
...};

RefactoringWizard wizard = new RefactoringWizard(ref, RefactoringWizard.DIALOG_BASED_USER_INTERFACE){
  @Override
  protected void addUserInputPages() {
    UserInputWizardPage page = new UserInputWizardPage("wizard_title"){
        public void createControl(Composite parent) {...}};
    addPage(page);
  }
};
IWorkbenchWindow win = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
new RefactoringStarter().activate(wizard, win.getShell(), "wizard_title", RefactoringSaveHelper.SAVE_ALL)

User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.1; ru; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2
Build Identifier: I20090611-1540

This code worked in Eclipse 3.4 but throws org.eclipse.swt.SWTException: Invalid thread access in Eclipse 3.5.
Seems like this is because of you try to run the refactoring changes in non ui thread when possible.

Reproducible: Always

Steps to Reproduce:
final Document doc; //SynchronizableDocument
final Point position;
Refactoring ref = new Refactoring(){
  @Override
  public Change createChange(IProgressMonitor pm){
    DocumentChange change = new DocumentChange("test", doc);
    TextEdit replaceEdit = new ReplaceEdit(position.x, position.y, "replaced");
    change.setEdit(replaceEdit);
    return change;
  }
...};

RefactoringWizard wizard = new RefactoringWizard(ref, RefactoringWizard.DIALOG_BASED_USER_INTERFACE){
  @Override
  protected void addUserInputPages() {
    UserInputWizardPage page = new UserInputWizardPage("wizard_title"){
        public void createControl(Composite parent) {...}};
    addPage(page);
  }
};
IWorkbenchWindow win = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
new RefactoringStarter().activate(wizard, win.getShell(), "wizard_title", RefactoringSaveHelper.SAVE_ALL)
The stacktrace is:
org.eclipse.swt.SWTException: Invalid thread access
at org.eclipse.swt.SWT.error(SWT.java:3884)
at org.eclipse.swt.SWT.error(SWT.java:3799)
at org.eclipse.swt.SWT.error(SWT.java:3770)
at org.eclipse.swt.widgets.Widget.error(Widget.java:463)
at org.eclipse.swt.widgets.Widget.checkWidget(Widget.java:355)
at org.eclipse.swt.custom.StyledText.getBlockSelection(StyledText.java:3483)
at org.eclipse.jface.text.TextViewer.getSelection(TextViewer.java:2523)
at org.eclipse.jface.text.TextViewer$ViewerState.connect(TextViewer.java:1283)
at org.eclipse.jface.text.TextViewer$ViewerState.<init>(TextViewer.java:1172)
at org.eclipse.jface.text.TextViewer.disableRedrawing(TextViewer.java:5071)
at org.eclipse.jface.text.TextViewer.setRedraw(TextViewer.java:5109)
at org.eclipse.jface.text.TextViewer.setRedraw(TextViewer.java:5089)
at org.eclipse.jface.text.TextViewer$RewriteTarget.setRedraw(TextViewer.java:1065)
at org.eclipse.jface.text.TextViewer$DocumentRewriteSessionListener.documentRewriteSessionChanged(TextViewer.java:1465)
at org.eclipse.jface.text.AbstractDocument.fireRewriteSessionChanged(AbstractDocument.java:1524)
at org.eclipse.jface.text.AbstractDocument.startRewriteSession(AbstractDocument.java:1550)
at org.eclipse.core.internal.filebuffers.SynchronizableDocument.startRewriteSession(SynchronizableDocument.java:98)
at org.eclipse.ltk.core.refactoring.TextChange.performEdits(TextChange.java:271)
at org.eclipse.ltk.core.refactoring.TextChange.perform(TextChange.java:238)
at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
at org.eclipse.ltk.core.refactoring.PerformChangeOperation$1.run(PerformChangeOperation.java:260)
at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:308)
at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:92)
at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:225)
at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Move to JDT/Text
Indeed, changes are now executed in a background thread. The underlying issue is that that TextViewer is not thread-safe. When a document used by a TextViewer is passed to a DocumentChange, this deficiency becomes apparent.

We probably need to use the ITextFileBufferManager's synchronization context as well for DocumentChange (similar to changes for bug 175733 in TextFileChange).
Workaround is use MultiStateTextFileChange.
(In reply to comment #4)
> Workaround is use MultiStateTextFileChange.

Can you offer some details on how this can be used as a workaround? I.e. how does one get Changes applied to an open (unsaved) document without running into the thread access problem?
(In reply to comment #5)
> (In reply to comment #4)
> > Workaround is use MultiStateTextFileChange.
> 
> Can you offer some details on how this can be used as a workaround? I.e. how
> does one get Changes applied to an open (unsaved) document without running into
> the thread access problem?

 Just wrap your change as whown below
 MultiStateTextFileChange mChange = new MultiStateTextFileChange(name, file);
 mChange.addChange(your_old_change);
Created attachment 165634
Fix & Test
Fixed in HEAD.
Need this for UndoTextFileChange as well.
(In reply to comment #9)
> Need this for UndoTextFileChange as well.

For UndoDocumentChange, I meant. Fixed in HEAD and updated test.
Dmitry or Stan, could you please verify the fix in I20100423-0800 or later?

I just realized I forgot to add the test to the suite. Released to AllChangeTests.
(In reply to comment #11)
> I just realized I forgot to add the test to the suite. Released to
> AllChangeTests.

That fix didn't work in the org.eclipse.jdt.ui.tests.refactoring.AllTests suite. Fixed in AllChangeTests and DocumentChangeTest.
Created attachment 182909
Patch for UndoDocumentChange

I am getting NPEs when undoing DocumentChange that disappear when I add a NP guard in UndoDocumentChange as in the attached patch.
This bug is marked as fixed. Please open a new bug with steps to reproduce the NPE.
Oh, sorry, I had been testing again 3.6.0. Apparently this has been fixed in 3.6.1.
> Oh, sorry, I had been testing again 3.6.0. Apparently this has been fixed in
> 3.6.1.

I doubt that this is different in 3.6.1 -- nothing has been changed in that area. But you've indeed spotted a problem in UndoDocumentChange.

Fixed in HEAD with a slightly different fix than your patch (same as in DocumentChange).
Filed bug 330438 to backport this to 3.6.2.
(In reply to comment #16)
> Fixed in HEAD with a slightly different fix than your patch (same as in
> DocumentChange).

I've added a regression test for this in HEAD of org.eclipse.jdt.ui.tests.refactoring.DocumentChangeTest.testDocumentChange().


[ltk] DocumentChange fails if document is not thread safe



Bug 296794: [ltk] DocumentChange fails if document is not thread safe 

Bug 296794: DocumentChange fails if document is not thread safe - comment 16 

Bug 296794: DocumentChange fails if document is not thread safe 

Bug 296794: DocumentChange fails if document is not thread safe 

Bug 296794: DocumentChange fails if document is not thread safe 

Bug 296794: DocumentChange fails if document is not thread safe 