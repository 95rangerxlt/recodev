Platform requires Java 1.6 since Luna and I think it would be nice to be able to use @Override for interfaces also in JDT.ui

Platform requires Java 1.6 since Luna and I think it would be nice to be able to use @Override for interfaces also in JDT.ui
Out of curiosity, what is the value of having @Override for interfaces?
(In reply to Szymon Ptaszkiewicz from comment #1)
> Out of curiosity, what is the value of having @Override for interfaces?

I think it has the same value as having @Override for overridden methods of super classes.
(In reply to Lars Vogel from comment #2)
> (In reply to Szymon Ptaszkiewicz from comment #1)
> > Out of curiosity, what is the value of having @Override for interfaces?
> 
> I think it has the same value as having @Override for overridden methods of
> super classes.

And what is that value?
(In reply to Szymon Ptaszkiewicz from comment #3)
> And what is that value?

Ah sorry, maybe I misunderstood your question. I think the "value" is very subjective, as you are asking it seems that you don't see personally a value here. 

In short (from my point of view):

1.) Clear visibility of inheritance
2.) Compiler can check that the method is implemented as intended
3.) We can avoid unnecessary Javadoc code (non-Javadoc statements) in Eclipse 

For a general discussion about the usage of this feature and potential value I googled the following link which looks like a good discussion: http://stackoverflow.com/questions/94361/when-do-you-use-javas-override-annotation-and-why
(In reply to Lars Vogel from comment #4)
> (In reply to Szymon Ptaszkiewicz from comment #3)
> > And what is that value?
> 
> Ah sorry, maybe I misunderstood your question. I think the "value" is very
> subjective, as you are asking it seems that you don't see personally a value
> here. 

Thanks for clarification. I fully agree with adding @Override everywhere it is possible as it is very useful. I just didn't think personally it is sufficient to bump the BREE version. The request to increase BREE makes sense if that's desired by the team.
(In reply to Szymon Ptaszkiewicz from comment #5)
> just didn't think personally it is sufficient to bump the BREE version. 

Just to clarfiy this: the second reason for bumping the Java version is that the Equinox runtime also requires Java 1.6 (EPP in some cases even Java 1.7 AFAIK).
(In reply to Lars Vogel from comment #6)
> Just to clarfiy this: the second reason for bumping the Java version is that
> the Equinox runtime also requires Java 1.6 (EPP in some cases even Java 1.7
> AFAIK).

This is no valid reason. The BREE should never be increased just because a required bundle increases it's BREE.
We probably get more value (better code) if we directly go to 1.7 rather than 1.6. Plus, we can use the "new" features in our daily work.
(In reply to Dani Megert from comment #8)
> We probably get more value (better code) if we directly go to 1.7 rather
> than 1.6. Plus, we can use the "new" features in our daily work.

+1 for that. Let me know if you want a patch for this change.
I'll do it in M2. No need for a patch.
(In reply to Markus Keller from comment #10)
> I'll do it in M2. No need for a patch.

M3 is work in progress.
Increased BREE and project properties and used the Clean action to generate the missing annotations.  Should be save to apply, I did not do any additional manually change.

https://git.eclipse.org/r/34282
Have to move again; too many more relevant things going on.
This would be very helpful to me as I am working on an issue related to Organize Imports where NavigableMap would be quite useful. Is it possible to expedite this change?
(In reply to Lars Vogel from comment #12)
> https://git.eclipse.org/r/34282

Abondan, as it was out of date.
New Gerrit change created: https://git.eclipse.org/r/43992

WARNING: this patchset contains 1117 new lines of code and may require a Contribution Questionnaire (CQ) if the author is not a committer on the project. Please see:https://wiki.eclipse.org/Project_Management_Infrastructure/Creating_A_Contribution_Questionnaire
(In reply to Eclipse Genie from comment #16)
> New Gerrit change created: https://git.eclipse.org/r/43992

Unfortunately, I couldn't finish this before the M6 test pass, so it has to wait until 4.6.

I pushed it to Gerrit to
a) save the work somewhere
b) test tycho-surefire

And (b) revealed that our Gerrit job was not correctly set up. In Job 168, https://hudson.eclipse.org/platform/job/eclipse.jdt.ui-Gerrit/ws/org.eclipse.ltk.ui.refactoring/target/compilelogs/@dot.xml
showed that the bundle was compiling against an 1.8 JRE. This lead to a wrong compile error:

[ERROR] Failed to execute goal org.eclipse.tycho:tycho-compiler-plugin:0.23.0-SNAPSHOT:compile (default-compile) on project org.eclipse.ltk.ui.refactoring: Compilation failure: Compilation failure:
[ERROR] /jobs/genie.platform/eclipse.jdt.ui-Gerrit/workspace/org.eclipse.ltk.ui.refactoring/src/org/eclipse/ltk/internal/ui/refactoring/model/RefactoringDescriptorSynchronizationProxy.java:[68]
[ERROR] public int compareTo(final Object object) {
[ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ERROR] Name clash: The method compareTo(Object) of type RefactoringDescriptorSynchronizationProxy has the same erasure as compareTo(T) of type Comparable<T> but does not override it

I've now added "-Pbree-libs" to the Maven 3 Goals in the job configuration, and with that, it correctly compiles that bundle against 1.4.
(In reply to Markus Keller from comment #17)
> so it has to wait until 4.6.

Target is set to 4.5M7, so the above is a typo or the target is incorrect.
The Gerrit change was only for ltk.core.refactoring, and that one can't go into 4.5, because it needs a bundle version increase.

I initially planned to still move jdt.ui to 1.7 in 4.5 M7, but it's probably best to defer the entire transition to 4.6.
*** Bug 470315 has been marked as a duplicate of this bug. ***
WARNING: this patchset contains 2054 new lines of code and may require a Contribution Questionnaire (CQ) if the author is not a committer on the project. Please see:https://wiki.eclipse.org/Project_Management_Infrastructure/Creating_A_Contribution_Questionnaire
Would it be possible to do this change in M1?
(In reply to Lars Vogel from comment #22)
> Would it be possible to do this change in M1?

Yes, that was the plan. And I've finally finished and pushed that little cleanup:

http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=e44d6cf0cde7fe2f2a4c30c23ed863ecc2a249e9

I've also updated https://wiki.eclipse.org/Generify_A_Java_Project .
(In reply to Markus Keller from comment #23)
> I've also updated https://wiki.eclipse.org/Generify_A_Java_Project .

For the removal of the Non-Javadoc we have also written a small UI tool for Eclipse, which can be found here: http://codemodify.vogella.com/
(In reply to Markus Keller from comment #23)
> (In reply to Lars Vogel from comment #22)
> > Would it be possible to do this change in M1?
> 
> Yes, that was the plan. And I've finally finished and pushed that little
> cleanup:
> 
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=e44d6cf0cde7fe2f2a4c30c23ed863ecc2a249e9

I noticed that this commit causes plenty of warnings against javadoc in tests like org.eclipse.jdt.ui.tests.quickfix.AnnotateAssistTest18

What am I expected to do here?
- "document" all exceptions like:
     @throws Exception a lot can happen here
- avoid javadoc
- @SuppressWarnings("javadoc")
- revert changes affecting javadoc warnings in test projects
?


Increase BREE for JDT UI



Bug 439874: Increase BREE for JDT UI to 1.7 