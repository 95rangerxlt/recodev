Recently support for Go Into was added to the Project Explorer, however this does not work for non-resource Java objects (like packages).

A patch will be provided to add the necessary support using the GoIntoActionProvider that is now part of o.e.ui.navigator.resources.

Recently support for Go Into was added to the Project Explorer, however this does not work for non-resource Java objects (like packages).

A patch will be provided to add the necessary support using the GoIntoActionProvider that is now part of o.e.ui.navigator.resources.
Created attachment 123438
Suggested patch
Created attachment 123453
Revised because of move of GoIntoActionProvider to API
Quickly looked over the patch: I don't like the idea that clients have to provide a property tester. I would expect that the CNF's GoInto extension point would require a GoIntoTester or GoIntoHandler.

Also note that you must not put UI related stuff into core.manipulations.
(In reply to comment #3)
> Quickly looked over the patch: I don't like the idea that clients have to
> provide a property tester. I would expect that the CNF's GoInto extension point
> would require a GoIntoTester or GoIntoHandler.
I don't follow; the CNF does not provide a GoInto extension point.  The resources portion of the CNF simply uses an actionProvider like anything else with the CNF.  Can you explain more what you want here?  Some sort of property tester in code is necessary to get to the Java-specific state required for GoInto.

> 
> Also note that you must not put UI related stuff into core.manipulations.
OK, I can make a separate property tester and put it in the ...ui.navigator package.  Or the existing property tester can be used but with a more abstract (non-UI) name for the property to describe it's go-into-ness.  I will go with the former.
> 


Francis, from your last comment I concluded that you work on the bug, hence it should stay assigned to you so that others know you're working on it.
(In reply to comment #5)
> Francis, from your last comment I concluded that you work on the bug, hence it
> should stay assigned to you so that others know you're working on it.
> 

OK, however, I'm waiting for a response to my questions, and I can't work on it until I get the response.  If I make a new property tester as I suggest above instead of modifying the existing one in core.manipulations, will you be happy with the patch?
I was thinking that maybe going into something might also be custom and hence you (or better clients) would need more than just a generic action plus its enablement, but I might be wrong here.

If CNF provides the property tester then that's fine, though I'm not sure whether you can express this for Java. A possible tester in core.manipulations could be javaElementTypeIs which would test whether the tested element is of specified element type. You could then express the allowGoInto in plugin.xml by using javaElementTypeIs in an or-expressions.

What I also don't like too much is that we need to depend on navigator.resources, however, layering wise we already refer to it in plugin.xml.
(In reply to comment #7)
> I was thinking that maybe going into something might also be custom and hence
> you (or better clients) would need more than just a generic action plus its
> enablement, but I might be wrong here.

No, that's all you need, just the enablement and to refer to the action.  A CNF client can use the GoIntoAction as they like with a non-Project Explorer implementation.  And the Project Explorer uses it for resources.

> 
> If CNF provides the property tester then that's fine, though I'm not sure
> whether you can express this for Java. A possible tester in core.manipulations
> could be javaElementTypeIs which would test whether the tested element is of
> specified element type. You could then express the allowGoInto in plugin.xml by
> using javaElementTypeIs in an or-expressions.

I like this; in my previous comment I was proposing the property tester be moved into the jdt.ui.internal.navigator package, not CNF, because as you point out, we don't have the info.  I will adjust the patch for this change.

> 
> What I also don't like too much is that we need to depend on
> navigator.resources, however, layering wise we already refer to it in
> plugin.xml.
 


(In reply to comment #8)
 A possible tester in core.manipulations
> > could be javaElementTypeIs which would test whether the tested element is of
> > specified element type. You could then express the allowGoInto in plugin.xml by
> > using javaElementTypeIs in an or-expressions.
> 
> I like this; in my previous comment I was proposing the property tester be
> moved into the jdt.ui.internal.navigator package, not CNF, because as you point
> out, we don't have the info.  I will adjust the patch for this change.

Now I remember why I did not do this initially; this was my first inclination.
If I did this, then I would have to put the numeric element values in 
the plugin.xml file which I found to be unfriendly (I assume that's safe as
for compatibility reasons they cannot change -- but maybe even that assumption
is not correct).  Are you OK with having those numeric values be there?  Or
can you think of a better option.

One possibility is just name it something different like, "HAS_JAVA_CONTENT", or something that's not really UI based.  I don't know enough about the JDT to know a good name or if that's even a reasonable distinction.
I would define the tester to use the constant names in IJavaElement, e.g. "PACKAGE_FRAGMENT".
Created attachment 123930
Revised as requested
Why do you need an additional property tester at all, given that each IJavaElement type has a corresponding interface? Can't we just add ...

<instanceof value="org.eclipse.jdt.core.IJavaProject" />
<instanceof value="org.eclipse.jdt.core.IPackageFragmentRoot" />
<instanceof value="org.eclipse.jdt.core.IPackageFragment" />

... to the <or> clause? Furthermore, the <and> here looks redundant:

<enablement>
    <and>
        <or>
Created attachment 124015
Revised as requested

Here is the latest version per your comments.
Almost...

The <or> around the 3 <instanceof> is not necessary.
Created attachment 124039
Revised as requested
Fixed in HEAD.


Add support for Go Into with the ProjectExplorer



Bug 262091: Add support for Go Into with the ProjectExplorer 