I don't know if this is intentional, but when I have the following code, the IDE doesn't show the javadoc text if I hover over the getEnum() call in the main method:

public class JdocTest {
	interface Param {
		/**
		 * Returns an enumeration.
		 * @param name the name
		 * @param clazz the class
		 * @return the enumeration
		 */
		<T extends Enum<T>> T getEnum(String name, Class<T> clazz);
	}
	static class ParamImpl implements Param {
		@Override
		public <E extends Enum<E>> E getEnum(String name, Class<E> clazz) {
			return clazz.getEnumConstants()[0];
		}
	}
	enum E1 {
		A, B, C
	}
	public static void main(String[] args) {
		new ParamImpl().getEnum("abc", E1.class);
	}
}

The hover just shows the method name and the @Override tag, but no other text or parameter list. If I change the interface parameter name to E:

<E extends Enum<E>> E getEnum(String name, Class<E> clazz);

the javadoc hover properly shows the documentation "Returns an enumeration." etc.

I don't know if this is intentional, but when I have the following code, the IDE doesn't show the javadoc text if I hover over the getEnum() call in the main method:

public class JdocTest {
	interface Param {
		/**
		 * Returns an enumeration.
		 * @param name the name
		 * @param clazz the class
		 * @return the enumeration
		 */
		<T extends Enum<T>> T getEnum(String name, Class<T> clazz);
	}
	static class ParamImpl implements Param {
		@Override
		public <E extends Enum<E>> E getEnum(String name, Class<E> clazz) {
			return clazz.getEnumConstants()[0];
		}
	}
	enum E1 {
		A, B, C
	}
	public static void main(String[] args) {
		new ParamImpl().getEnum("abc", E1.class);
	}
}

The hover just shows the method name and the @Override tag, but no other text or parameter list. If I change the interface parameter name to E:

<E extends Enum<E>> E getEnum(String name, Class<E> clazz);

the javadoc hover properly shows the documentation "Returns an enumeration." etc.
JavadocContentAccess2#findAttachedDocInHierarchy(method) returns null in this case.
Thanks for the test case, David.

Turned out to be a bug in org.eclipse.jdt.internal.corext.util.MethodOverrideTester#getTypeParameterErasure(ITypeParameter, IType) in case the type variable also showed up as type argument in the bound.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=b1e162155f1ce621f16dbc5e3d34bdc9f4ebe6d1


[hovering][javadoc] Javadoc hover not showing inherited document if the type parameter name differs between interface and implementation



Bug 438390: [hovering][javadoc] Javadoc hover not showing inherited document if the type parameter name differs between interface and implementation 