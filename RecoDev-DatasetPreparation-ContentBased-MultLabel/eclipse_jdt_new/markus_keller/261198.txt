I have a project with the following structure:

123 (project shared using CVS)
+- src (source folder)
   +- somebusiness
      +- some-business
      |  +- file1.txt
      +-file2.txt

Now when I make changes only to file1.txt and do "Team->Synchronize with Repository", I don't see the file1.txt, only:

123
+- src

But when I make changes to file2.txt, in "Team->Synchronize with Repository"
I see that both file1.txt and file2.txt have changed.

This problem was originally spotted on Eclipse 3.2.2, but appears still on 3.5M4.

So far I had traced it to org.eclipse.jdt.internal.ui.model.JavaSynchronizationContentProvider

I have a project with the following structure:

123 (project shared using CVS)
+- src (source folder)
   +- somebusiness
      +- some-business
      |  +- file1.txt
      +-file2.txt

Now when I make changes only to file1.txt and do "Team->Synchronize with Repository", I don't see the file1.txt, only:

123
+- src

But when I make changes to file2.txt, in "Team->Synchronize with Repository"
I see that both file1.txt and file2.txt have changed.

This problem was originally spotted on Eclipse 3.2.2, but appears still on 3.5M4.

So far I had traced it to org.eclipse.jdt.internal.ui.model.JavaSynchronizationContentProvider
Ok, it seems to fix the issue if I change IResource.DEPTH_ONE to IResource.DEPTH_INFINITY in JavaElementResourceMapping.LocalPackageFragementTraversal class constructor in line
super(new IResource[] {pack.getResource()}, IResource.DEPTH_ONE, 0);


The problem is that when checking Java packages for diffs, they're traversed only one level deep, because classes (or other files) are at level one.

However in this case, package contains a folder ("some-business", not classified as regular subpackage, probably because of invalid dash in name), which has changes. So there's no diffs at level one, but deeper - they are.

I don't know if that change has any side effects.

Created attachment 122693
patch
Dear JDT-UI, Could you have a look at this?
The problem is that both DEPTH_ONE and DEPTH_INFINITE are wrong. Regarding to files and folders that are considered as subpackages, it's DEPTH_ONE, but for other folders, it's DEPTH_INFINITE.

While ResourceTraversal is theoretically subclassable, it is not clear in practice whether clients can rely solely on the get*() methods, or whether they have to use the other three methods.

In this case, CVSWorkspaceSubscriber.hasLocalChanges(..) implements the traversal using only the get*() methods, and thus skipping the overridden org.eclipse.jdt.internal.corext.util.JavaElementResourceMapping.LocalPackageFragementTraversal.accept(IResourceVisitor)


The proposed fix shows the change, but it misses to decorate package somebusiness with the '>' for outgoing changes.

Michael, do you have a good idea how to map non-package folders in Java packages?
I may be missing something because I haven't look at any of this in over a year. Is it hard to detect whether the folder is a valid package or not? Wouldn't the correct code look something like this?

if (isInvalid(pack)) {
    super(new IResource[] {pack.getResource()}, IResource.DEPTH_INFINITE, 0);
} else {
    super(new IResource[] {pack.getResource()}, IResource.DEPTH_ONE, 0);
}


Created attachment 123089
patch 2

No, the problem is not the traversal of the folder inside the package. The problem is the traversal of the package somebusiness which contains files and folders in this package, but excludes folders that are packages themselves.

I think subclassing ResourceTraversal is dommed to fail, so I rewrote the package fragment related parts of JavaElementResourceMapping to use normal ResourceTraversals.
Fixed in HEAD. Jacek, could you please verify?
Verified with today's HEAD. Thanks Markus
Comment on attachment 123089
patch 2

The fix is not OK, see bug 261797.
Correct fix is in JavaElementResourceMapping rev. 1.23.
Argh! And it also causes a test failure.
Sorry, but I don't have time to dig into the failing test and check whether the fix or the ContentProviderTests.testOutgoingDeletion148118() is wrong.

FYI, the issue that caused bug 261797 was the usage of add(...) instead of addAll(...).

Reverted the code to its previous state.
Problem may be a mistake in patch 2 in line:
res.add(new ResourceTraversal(new IResource[] { container }, IResource.DEPTH_ZERO, 0));

Because traversal with depth zero probably won't traverse anything - so why add it?
If I change it to DEPTH_ONE, all tests in ContentProviderTests pass, and my initial scenario works as well.

(In reply to comment #13)
> Problem may be a mistake in patch 2 in line:

how do you think Markus?


Fixed in HEAD and updated tests.

I used DEPTH_ONE for the folder and removed the special handling for derived *.class files (those are not shown anyway).

I didn't find a way to make it perfect, since the ResourceMapping framework is a bit flawed:
-  Overriding ResourceTraversal#accept(IResourceVisitor) in a subclass is domed to fail as long as there are clients like CVSWorkspaceSubscriber#hasLocalChanges(..) which implement their own traversal by only using the other methods of ResourceTraversal.
-  On the other hand, when an implementation of ResourceMapping#getTraversals(..) returns a ResourceTraversal for a package folder with DEPTH_ZERO and individual traversals for the actual children (files and non-package folders), this also fails, because DiffTree.accept(..) assumes that a folder traversal with DEPTH_ZERO means that the folder has no children.
NOTE: This fix causes bug 269167.
*** Bug 278749 has been marked as a duplicate of this bug. ***
The fix original fix also caused bug NOTE: This fix causes bug 261797.
>The fix original fix also caused bug NOTE: This fix causes bug 261797.
Should read: The original fix also caused bug 261797.
Created attachment 141771
Patch against 3.4.2.


nodes missing in Java Model  in Synchronize view



Backported fix for bug 261198 to R3_4_maintenance. 

261198: nodes missing in Java Model in Synchronize view 

Reverted fix for bug 261198 as it caused a test failure. 

261198: nodes missing in Java Model in Synchronize view 