200412142000:

Method Object#clone() should be considered returning an object of the same 
type as the target of its invocation, particularly if the returned object is 
immediately casted to the former type of the target.

Steps to reproduce:
- Create 1.5 project
- Import Junit.zip
- Invoke "Infer Type Arguments" refactoring on project
- Open method TestResult#cloneListeners()
->Its return type has not been generified, which results in many missed 
opportunities to introduce type arguments (visible in call hierarchy of 
cloneListeners())

200412142000:

Method Object#clone() should be considered returning an object of the same 
type as the target of its invocation, particularly if the returned object is 
immediately casted to the former type of the target.

Steps to reproduce:
- Create 1.5 project
- Import Junit.zip
- Invoke "Infer Type Arguments" refactoring on project
- Open method TestResult#cloneListeners()
->Its return type has not been generified, which results in many missed 
opportunities to introduce type arguments (visible in call hierarchy of 
cloneListeners())
Good point.

However if we start rewriting all kings of declaration it will not be clear what
the refactoring is doing. Why don't we rewrite field and local declarations as well?

Markus, any comments.
Why would rewriting of declarations make the intentions of the refactoring 
unclear? After all, to infer type arguments applies to declarations as well. 
Should not every reasonable opportunity to introduce type arguments be taken?
Fixed for I20050301 by adding an option to assume that clone() is well-behaved
(returns an object of the same type).


[5.0] Infer type arguments should better handle Object#clone()

