Normally when I have an error because my code is calling a non-existant method, then CTRL+1 will show me a quickfix to create the method.

This is mighty useful :-)

Unfortunately when the method that needs to be created has a generic method signature than the quickfix is not suggested. This is fairly annoying if you have gotten used to having this quickfix available.

To reproduce here is a concrete example:

---------------------------------------------------------------->8
package bork.it;

public class Bork<T> {
	
	Class<T> type;
	
	private Help help = new Help();
	
	public void method() {
		help.help(this);
	}

}

class Help {
	
	<T> void help(T requestor) {
		return;
	}
	
}
---------------------------------------------------------------->8

Comment the method Help.help. Try to invoke quick fixes on the error that appears on the call to help.help. You will see the option to create the method
is missing.

Normally when I have an error because my code is calling a non-existant method, then CTRL+1 will show me a quickfix to create the method.

This is mighty useful :-)

Unfortunately when the method that needs to be created has a generic method signature than the quickfix is not suggested. This is fairly annoying if you have gotten used to having this quickfix available.

To reproduce here is a concrete example:

---------------------------------------------------------------->8
package bork.it;

public class Bork<T> {
	
	Class<T> type;
	
	private Help help = new Help();
	
	public void method() {
		help.help(this);
	}

}

class Help {
	
	<T> void help(T requestor) {
		return;
	}
	
}
---------------------------------------------------------------->8

Comment the method Help.help. Try to invoke quick fixes on the error that appears on the call to help.help. You will see the option to create the method
is missing.
Reproducible in Eclipse 3.8.1 also.
The problem is that ASTResolving#isUseableTypeInContext(ITypeBinding[], ..) just gives up and returns false if the signature contains type variables that are not accessible at the place where the new method should be declared.

When I disable that check, I get a method proposal like this ("T" is unresolved):

    public void help(Bork<T> bork) {
        // TODO Auto-generated method stub
    }

I don't think we can find out that you actually intended to have a type variable for the whole parameter type. But we could collect the missing type variables and then create equivalent type variables on the generated method, i.e.:

    public <T> void help(Bork<T> bork) {
        // TODO Auto-generated method stub
    }

But that can still fail if the type variable's bounds are not accessible. On the other hand, we also don't stop creating a method if a type in the signature is not visible for the generated method, etc.

I think we should just remove that check, and then create parameters based on the passed argument types. In the given example, that would yield a method with an unresolved "T", but that can easily be fixed with another Quick Fix.

Noopur, do you agree?
> I don't think we can find out that you actually intended to have a type variable for the whole parameter type.

Actually I didn't intend that. It is a mistake I made creating the example.
(Incidentally, that makes it a good example of why its painfull to write the generic method signature without the help of quickfix :-)

If it would have created 

    public <T> void help(Bork<T> bork) {
        // TODO Auto-generated method stub
    }

That would have been right.

(I.e. putting just "T" instead of "Bork<T>" is like I call help("Hello") and quickfix generates a method with parameter type Object. That would not technically be 'incorrect' but generalt I think you want it to generate the most specific method signature that fits the arguments.

If I want to make it more generic (less specific) after that then I don't mind editing the auto-generated signature.
BTW: even if it generated this:

    public void help(Bork<T> bork) {
        // TODO Auto-generated method stub
    }

(i.e. without the <T> in front...) 

That's still better than nothing. I can easily add the <T> myself so having even a slightly incomplete signature generated is actually helpful. (Though ofcourse even better if the <T> was there also :-)
Created attachment 248480
Patch

(In reply to Markus Keller from comment #2)
> I think we should just remove that check, and then create parameters based
> on the passed argument types. In the given example, that would yield a
> method with an unresolved "T", but that can easily be fixed with another
> Quick Fix.
> 
> Noopur, do you agree?

Yes, attached a patch which removes the check and results in the above behavior. It also needs updates in existing tests. Markus, please take a look if the changes in TypeMismatchQuickFixTests are fine.
(In reply to Noopur Gupta from comment #5)
> Created attachment 248480 [details] [diff]
> Patch

No, that's not what I meant. I meant to remove the calls to isUseableTypeInContext in UnresolvedElementsSubProcessor#addNewMethodProposals().

Your change in ASTResolving effectively degrades isUseableTypeInContext(..) to "return !type.isAnonymous()" if noWildcards is false. I don't think the new proposal in TypeMismatchQuickFixTests#testMismatchingReturnTypeOnGeneric2() is very helpful, so it's OK not to add that.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=03906c3a37c3d6861c5bd0e2ed629dfd0b24b503


[quick fix] Create method quickfix not working for methods using type variables



Bug 450208: [quick fix] Create method quickfix not working for methods using type variables 