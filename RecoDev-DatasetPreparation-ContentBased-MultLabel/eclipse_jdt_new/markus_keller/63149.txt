In the current implementation, during an undo, the changes provided by the
participants are executed (in reverse order) before the 'main' changes provided
by the refactoring processor.
This is a problem if the participant's changes need the state after refactoring
(or after undo refactoring) to be successfully executed (see bug 60049).
It would be better if there was a way to say 'this change need to be executed
when the workbench is in its new state'.

In the current implementation, during an undo, the changes provided by the
participants are executed (in reverse order) before the 'main' changes provided
by the refactoring processor.
This is a problem if the participant's changes need the state after refactoring
(or after undo refactoring) to be successfully executed (see bug 60049).
It would be better if there was a way to say 'this change need to be executed
when the workbench is in its new state'.
Luc, this needs API additions which can't be done for 3.0 anymore. I am 
tagging the PR as 3.1.
Luc, I have to postpone this > 3.1. 
Moving due to ownership changes. 

Tobias, the story behind this is as follows:

- participant add there changes to the end of the composite change
- since the undo is executed in revers order the undos of the particpants are
  executed first.

There are some conditions in debug land where they want to execute the undo after the processors undo (if I remember it had something to do with breakpoints) since then the new element already exists. For now debug simply doesn't provide an undo.
Bug 160729 provides additional motivation for this.  This is required to allow a user to restore persistent properties after a delete undo.

If anyone wants, I can work on a patch for this.  It would be along the lines of a boolean added to the *Participant extension points that would indicate the participants were executed before or after the "main" change.  Let me know.
Help is welcome.
We should only do it if someone is also going to use this new feature. We need to get feedback and make sure the new feature is well tested.
I will certainly use it; I develop an RCP application, so everything I report or comment on is needed by that application.  I try to use as much as Eclipse as I can, so I run into things all the time where improvements or bug fixes will benefit me.

What do you think about the idea I presented for a patch, to just add a boolean to these extension points?  I don't want to do a patch until I get some feedback on the direction first; I don't want to waste my time with things that you don't like.

(In reply to comment #5)
> Help is welcome.
> We should only do it if someone is also going to use this new feature. We need
> to get feedback and make sure the new feature is well tested.
> 


The extra boolean sound like a good idea. The contributor can decide that the 'undo' is executed before or after the original change.

Actually, the boolean would determine that the participant action would be executed before or after the main change.  Currently it is only executed after.  And since undos always need to happen in the reverse order of original execution, the opposite would be true on the undo.  But there is no special specification for the undo execution.

Does this make sense?

(In reply to comment #7)
> The extra boolean sound like a good idea. The contributor can decide that the
> 'undo' is executed before or after the original change.
> 


You're right, make it symetrical:
Run before and undo after.

As with the normal participant, we will specify that changing the content of the files involved in the main refactoring is not allowed.
The idea is that participants work only on their own model elements.
I talked to Martin about this, here's the outcome: Please don't add a flag to the extension point. Rather, add a new method in RefactoringParticipant, something like
	public abstract Change createPreChange(IProgressMonitor pm) throws CoreException, OperationCanceledException;

This avoids that clients have to implement two participants for the same problem.

For the implementation, you have to be very careful to ensure that a broken preChange participant cannot make the system unusable. Since a preChange can violate its obligations (must not conflict with refactoring changes), you have to add code that detects when the refactoring change execution fails with an exception. In that case, just disable all participants that returned a non-null preChange (and inform the user, like when a participant fails today). This sounds drastic, but it's the only way I found how we can make sure that a broken participant cannot make a refactoring unusable.

And of course, we need test cases for this (-;see existing tests in package org.eclipse.ltk.core.refactoring.tests.participants)
Thanks Marcus for your guidance with this.  I don't understand the last sentence below, that clients have to implement two participants for the same problem.  Can you elaborate for me?

(In reply to comment #10)
> I talked to Martin about this, here's the outcome: Please don't add a flag to
> the extension point. Rather, add a new method in RefactoringParticipant,
> something like
>         public abstract Change createPreChange(IProgressMonitor pm) throws
> CoreException, OperationCanceledException;
> 
> This avoids that clients have to implement two participants for the same
> problem.
> 

(In reply to comment #11)
> Thanks Marcus for your guidance with this.  I don't understand the last
> sentence below, that clients have to implement two participants for the same
> problem.  Can you elaborate for me?

I meant: This avoids that clients have to implement two participants to implement a single functionality and create Change objects which depend on each other.

If you take the Java breakpoints example that triggered this bug, it should be possible to just override createPreChange(..) in the existing participant to add the necessary preChanges (which will probably do nothing when executed, but their undo will be executed as postChanges, after the refactoring).

Keeping this together also allows to disable failing participants as a whole. If they were implemented as two participants, we would not know that they are connected.
I think I understand.  But let me go over it just so I'm clear.  The current implementation does this:

do:

1) execute main action
2) execute participant

undo:

1) execute participant
2) execute main action

My proposal was to add a boolean which would be called "afterMainAction" (or something), so if the boolean was not set, it would execute as above (which is of course necessary for compatibility reasons).  If the boolean was set, it would execute as follows:

do:

1) execute participant
2) execute main action

undo:

1) execute main action
2) execute participant

Your proposal would accomplish the same thing, except instead of adding a boolean, you would add another extension point.  But semantically they are the same.  I would still prefer the boolean as it helps to cut down on the number of extension points and would be immediately easier for the clients to see that the participant can be executed on either side of the main action.  Having a separate extension point makes this less clear.

I will defer to your judgment, but I had a feeling you misunderstood my original proposal, because I was not clear.
I think I understood what you meant, but I don't agree with your proposed solution. Please forget about changing the extension point or even adding a new extension point. This is not necessary.

> Your proposal would accomplish the same thing, except instead of adding a
> boolean, you would add another extension point. 

No, that's not what I proposed.

My point is that the same participant should be able to create pre- and post-changes. I've outlined the reasons for this above (easy way do disable failing participant, clients who need both pre and post changes should only have to contribute a single participant).

Just add this method to RefactoringParticipant (with proper Javadoc):

 /** ... the returned Change object will be executed <em>before</em> the
  * changes from the refactoring are executed. Note that this implies that the
  * undo change of the returned Change object will be executed <em>after</em>
  * the undo changes from the refactoring have been executed. ...
  */
  public Change createPreChange(IProgressMonitor pm)
      throws CoreException, OperationCanceledException {
    return null;
  }

The execution phase will look like this:

Do:
1) perform participant preChanges -- from new createPreChange()
2) perform refactoring change
3) perform participant postChanges -- from RefactoringParticipant.createChange()

Undo:
A) perform undo of participant postChanges -- from 3)
B) perform undo of refactoring change      -- from 2)
C) perform undo of participant preChanges  -- from 1)

Redo:
a) undo of undo of participant preChanges  -- should do the same as 1)
a) undo of undo of refactoring change      --                       2)
a) undo of undo of participant postChanges -- should do the same as 3)
Thank you, I completely understand now and agree with what you propose.  That's what I will build.  Thanks for your patience in helping me understand.
Created attachment 90587
Patch for HEAD as of 20080224

Implementation and test cases per the comments above.

One thing that occurred to me in implementing this:  You suggest that the pre-changes be disabled in the event of an exception by the main refactoring (I have implemented this).  However, to be symmetric with this logic, we would want to disable the participants that create a change (not a preChange) in the event of an exception by the main refactoring *undo*.  Of course this issue is really not related to this change (maybe it has already been addressed, but I did not see it), and the fix and test cases should be pretty easy to add to this if you think it makes sense.
Thanks, Francis. Released with a few Javadoc changes.

> However, to be symmetric with this logic, we would
> want to disable the participants that create a change (not a preChange) in the
> event of an exception by the main refactoring *undo*.

You're right, the undo of a ProcessorChange is a plain CompositeChange that does not now where the changes are coming from. I guess it has been implemented like this to keep things simple, because undo is not as important as the initial execution, and due to lack of resources. Still not a priority for us. If you want to do this and find a simple way to implement it, you could open a new bug.
.


[ltk] allow changes to be executed after the 'main' change during an undo [refactoring]

contributed

63149: [ltk] allow changes to be executed after the 'main' change during an undo [refactoring] 