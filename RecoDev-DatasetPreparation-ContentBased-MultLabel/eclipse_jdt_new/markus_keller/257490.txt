build  I20081202-1812

1) enable dead code diagnosis
2) create Test.java
public class Test {
	void foo() {
		if (true) {
			return;
		}
		System.out.println("1");
		System.out.println("2");
		System.out.println("3");
	}
}

A dead code problem is reported on the line 'System.out.println("1");'
3) apply the proposed quickfix 'Remove'
The line 'System.out.println("1");' is removed.

The quickfix could also remove next lines which are also dead code.

build  I20081202-1812

1) enable dead code diagnosis
2) create Test.java
public class Test {
	void foo() {
		if (true) {
			return;
		}
		System.out.println("1");
		System.out.println("2");
		System.out.println("3");
	}
}

A dead code problem is reported on the line 'System.out.println("1");'
3) apply the proposed quickfix 'Remove'
The line 'System.out.println("1");' is removed.

The quickfix could also remove next lines which are also dead code.
We remove the code that JDT Core flags as dead. Since the next two methods are not considered to be dead code we don't remove it.
We need to adjust the quick fix implementation when the dead code problem range covers multiple statements.
>We need to adjust the quick fix implementation when the dead code problem range
>covers multiple statements.
Markus, are you fixing this right away or do we need a new bug?
The remaining lines are dead code as well, but not reported to avoid cluttering the UI with secondary issues.
This is consistent with what we do for unreachable code as well.

We could surface this information in the DOM AST, but another way would be for quickfix to simply discard all statements in sequence after a dead/unreachable one.

Back to quickfix land.
Same for unreachable code.
Fixed in HEAD. See bug 246627 comment 2 for indentation problem in the ASTRewrite.


[compiler] Quick fix for dead code does not remove all the dead code



257490: [compiler] Quick fix for dead code does not remove all the dead code 