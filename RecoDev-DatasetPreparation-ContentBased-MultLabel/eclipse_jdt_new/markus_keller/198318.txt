Created attachment 74968
patch

When a CompositeChange has several TextFileChanges as its children and they are rendered in the ChangeElementTreeViewer, unchecking one of the children will fully uncheck the parent composite node instead of setting it to PARTLY_ACTIVE.

This is because the getActive() method for InternalTextEditChangeNode relies on AbstractCompositeChange.getCompositeChangeActive() which will always return ACTIVE when the node has no children. Using this method does not make logical sense anyway since the node does not represent a CompositeChange.

This bug manifests itself in the new preview added to the Organize Manifests wizard in bug 173793.

To reproduce:

- Run the latest code on head.
- Open the manifest editor for a project with at least one externalized property and switch to the source page.
- Remove all references to an externalized property (e.g. the name).
- Add a non-existent package to "Export-Package:".
- Save the changes, right click the project in the package explorer and select "PDE Tools > Organize Manifests..."
- Select the options "Remove unresolved packages" and "Remove unused keys from the plug-in's properties file" and click the preview button.

This will give you a preview of one CompositeChange with two TextFileChange children. You can see that unchecking one unchecks the parent instead of setting it to PARTLY_ACTIVE.

Attached is a proposed patch which returns ACTIVE if the underlying change is enabled and INACTIVE otherwise.

Created attachment 74968
patch

When a CompositeChange has several TextFileChanges as its children and they are rendered in the ChangeElementTreeViewer, unchecking one of the children will fully uncheck the parent composite node instead of setting it to PARTLY_ACTIVE.

This is because the getActive() method for InternalTextEditChangeNode relies on AbstractCompositeChange.getCompositeChangeActive() which will always return ACTIVE when the node has no children. Using this method does not make logical sense anyway since the node does not represent a CompositeChange.

This bug manifests itself in the new preview added to the Organize Manifests wizard in bug 173793.

To reproduce:

- Run the latest code on head.
- Open the manifest editor for a project with at least one externalized property and switch to the source page.
- Remove all references to an externalized property (e.g. the name).
- Add a non-existent package to "Export-Package:".
- Save the changes, right click the project in the package explorer and select "PDE Tools > Organize Manifests..."
- Select the options "Remove unresolved packages" and "Remove unused keys from the plug-in's properties file" and click the preview button.

This will give you a preview of one CompositeChange with two TextFileChange children. You can see that unchecking one unchecks the parent instead of setting it to PARTLY_ACTIVE.

Attached is a proposed patch which returns ACTIVE if the underlying change is enabled and INACTIVE otherwise.
Markus, can you look at the patch?
Created attachment 75035
patch

I just discovered that my patch actually caused the problem I'm seeing (without the patch) to occur for the JDT rename preview. This new patch works for both cases by only returning the enablement state of the associated change object if it has no children. Otherwise it uses the getCompositeChangeActive method as before.
Adam, do you still need any change in LTK? I tried the scenario from comment 0 on HEAD, and it worked fine.
Markus, the fix for bug 198309 seems to have corrected this problem for the PDE wizards. It only occurs when you have a CompositeChange with two or more TextFileChanges as children that have a root edit, but no child edits. Adding children to the edits made the checkboxes function as expected.
(In reply to comment #4)
OK, thanks. I'll release it for M2 then.
This bug can still be reproduced as follows on the latest code from head:

- Check out a plug-in from CVS that is running in the runtime
- Open the Plug-ins view
- Find the project that has been checked out (it will have a folder icon)
- Right click it and select "Rename..."
- Input a new name, check both boxes and click preview

In the preview there will be two changes that are children of the root CompositeChange. If the change to Manifest.MF is deselected, the root change is deselected instead of set to partly active.
I fixed in right in AbstractChangeNode.getCompositeChangeActive():
Now returns enablement of wrapped change if it has no children.


[ltk] getActive() is incorrect for InternalTextEditChangeNode



198318: [ltk] getActive() is incorrect for InternalTextEditChangeNode 