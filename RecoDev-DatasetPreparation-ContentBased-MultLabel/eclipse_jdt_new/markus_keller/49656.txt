When the result class is changed during a method refactoring of a method in an
interface, the result class is not added as an import if it does not already
resolve. ie:

The interface:

public interface Composable {
  public List getComposers();
}

and, The implementor:

import java.util.List;

public class MyComposable 
implements Composable {
  public List getComposers() { return null; }
}

Bringing up the 'Change Method Signature' on getComposers() in Composable and
changing the result type to Collection causes the refactor of MyComposable:

import java.util.List;

public class MyComposable 
implements Composable {
  public Collection getComposers() { return null; }
}

Which does not compile as Collection is not added to the list of imports.  What
could happen is a scan for and on fail the auto addition of java.util.Collection
as an import and possibly a scan and on fail removal of java.util.List.

Thanks,

Andrew

When the result class is changed during a method refactoring of a method in an
interface, the result class is not added as an import if it does not already
resolve. ie:

The interface:

public interface Composable {
  public List getComposers();
}

and, The implementor:

import java.util.List;

public class MyComposable 
implements Composable {
  public List getComposers() { return null; }
}

Bringing up the 'Change Method Signature' on getComposers() in Composable and
changing the result type to Collection causes the refactor of MyComposable:

import java.util.List;

public class MyComposable 
implements Composable {
  public Collection getComposers() { return null; }
}

Which does not compile as Collection is not added to the list of imports.  What
could happen is a scan for and on fail the auto addition of java.util.Collection
as an import and possibly a scan and on fail removal of java.util.List.

Thanks,

Andrew
Refactoring is a JDT/UI feature.
Moving to JDT/UI for comment.
Markus, we should at least add the needed imports. However removing unused 
imports is hard to do since we actually have to "compile" the file to figure 
this out.
Imports are now added if required.
Removing unused imports is expensive and may be dealt with in bug 49772.


Changing the result class when refactoring a method in an interface should cause the result class to be imported in implementing classes [refactoring]

