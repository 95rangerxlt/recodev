If you perform a Rename Type refactoring on a type whose name matches a type 
in another package, fully-qualified references to the other type appearing in 
JavaDoc, literal strings (and perhaps elsewhere) will erroneously get renamed. 
E.g., if you attempt to rename type p1.A to p1.B, and p2.A exists, fully-
qualified references to p2.A in JavaDoc and strings will erroneously get 
renamed to p2.B.

If you perform a Rename Type refactoring on a type whose name matches a type 
in another package, fully-qualified references to the other type appearing in 
JavaDoc, literal strings (and perhaps elsewhere) will erroneously get renamed. 
E.g., if you attempt to rename type p1.A to p1.B, and p2.A exists, fully-
qualified references to p2.A in JavaDoc and strings will erroneously get 
renamed to p2.B.
Fixed for I20041123. Now, we don't rename textual matches in comments and
strings when the qualifier is wrong.

Note: Textual references are only updated when the checkbox "Update textual
references in comments and strings" is checked in the rename dialog.

> [..] appearing in JavaDoc, literal strings (and perhaps elsewhere) [..]
Also in non-javadoc comments (single- and multiline).


Rename Type refactoring ignores qualification in comments/strings



79131: Rename Type refactoring ignores qualification in comments/strings 

79131: Rename Type refactoring ignores qualification in comments/strings 

79131: Rename Type refactoring ignores qualification in comments/strings 

79131: Rename Type refactoring ignores qualification in comments/strings 