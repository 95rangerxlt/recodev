** Background:

When using Source->Generate hashCode() and equals(), there is a check on whether all included fields implement their own version of hashCode() and equals().  If one of the fields does not implement hashCode() or equals(), then the following warning is shown (see example below).

For example, attempt to run the hashCode/equals generator for the following class:

<code>
import java.util.ArrayList;

public class HashCodeEquals
{
    private ArrayList<Integer> myList;

    /**
     * @param myList
     */
    public HashCodeEquals( ArrayList<Integer> myList )
    {
        super();
        this.myList = myList;
    }
}
</code>

The following "problem" is found:

"The field type 'java.util.ArrayList<java.lang.Integer>' does not implement equals() and hashCode() - the resulting code may not work correctly."


** What I'm requesting:

Currently, this check for equals() and hashCode() only looks in the class of the field itself, not any of its ancestors (super classes) of that class.  This make sense, because looking at the entire ancestry would reveal Object's implementation, and so we'd always have a positive.  I propose checking the entire ancestry, except for Object itself.  If one of the ancestor classes (except Object) implements hashCode() and equals(), then the above warning should not be issued for the field in question.

In the example above, the superclass of ArrayList, java.util.AbstractList, does in fact implement both hashCode() and equals(), so it should be safe.

** Background:

When using Source->Generate hashCode() and equals(), there is a check on whether all included fields implement their own version of hashCode() and equals().  If one of the fields does not implement hashCode() or equals(), then the following warning is shown (see example below).

For example, attempt to run the hashCode/equals generator for the following class:

<code>
import java.util.ArrayList;

public class HashCodeEquals
{
    private ArrayList<Integer> myList;

    /**
     * @param myList
     */
    public HashCodeEquals( ArrayList<Integer> myList )
    {
        super();
        this.myList = myList;
    }
}
</code>

The following "problem" is found:

"The field type 'java.util.ArrayList<java.lang.Integer>' does not implement equals() and hashCode() - the resulting code may not work correctly."


** What I'm requesting:

Currently, this check for equals() and hashCode() only looks in the class of the field itself, not any of its ancestors (super classes) of that class.  This make sense, because looking at the entire ancestry would reveal Object's implementation, and so we'd always have a positive.  I propose checking the entire ancestry, except for Object itself.  If one of the ancestor classes (except Object) implements hashCode() and equals(), then the above warning should not be issued for the field in question.

In the example above, the superclass of ArrayList, java.util.AbstractList, does in fact implement both hashCode() and equals(), so it should be safe.
Moving to JDT/UI
It's only a warning. Maybe we should reword the warning to be more of an 'information'. Most types don't need to implement hashCode/equals as object equality is the same as object identity.
I suggest we remove the warning completely. There is nothing uncommon on types that don't have an own 'equals/hashcode'. Markus, your opinion?
(In reply to comment #3)
I agree. Even with checking the hierarchy (except for Object), it is just a guess, and it's wrong for many valid cases (e.g. value types where the constructor guarantees uniqueness).
Created attachment 101022
removed code generating the warning

Yey, this is my firs contribution ever :) I hope the patch is ok. Could someone verify?
Thanks Mateusz. You might also want to remove the strings that are not used anymore. Setting target to 3.5 (too late for 3.4)
Created attachment 101170
same as before + removed unused strings
Patch should also remove the strings in the ActionMessages.properties file...
Created attachment 101216
more strings removed

hehe, third time lucky :)
Sorry this some got lost. Will look into this early 3.6.
I thought about this again, and I now think the warning could often be helpful if the test also takes superclasses (except Object) into account , as suggested in comment 0.

Fixed it that way in GenerateHashCodeEqualsAction.


[hashcode/equals] Remove unnecessary warning from hashcode/equals generator



Bug 203132: [hashcode/equals] Remove unnecessary warning from hashcode/equals generator 