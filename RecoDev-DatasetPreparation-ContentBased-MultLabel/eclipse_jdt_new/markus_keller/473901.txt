The current Java model is proving to be insufficient to represent the Jimage structure. As of now now (head of BETA_JAVA9) the entire Jimage is represented as a PackageFragmentRoot and packages are modeled as PackageFragment.
But there is nothing really to hold the modules except for the package-module cache we maintain internally.

It is also a problem for resources that don't have a package and hence no package-module mapping. I think we need to start thinking about changing models. I propose the following:

A new kind of PackageFragmentRoot namely ModulePackageFragmentRoot
Optional - A new model Jimage to hold the modules. It will make sense when in future we will be required to load individual Jimage files and might also have a mixed set up of Jars and Jimages.

We also need to discuss what happens when we also have modules as source.

The current Java model is proving to be insufficient to represent the Jimage structure. As of now now (head of BETA_JAVA9) the entire Jimage is represented as a PackageFragmentRoot and packages are modeled as PackageFragment.
But there is nothing really to hold the modules except for the package-module cache we maintain internally.

It is also a problem for resources that don't have a package and hence no package-module mapping. I think we need to start thinking about changing models. I propose the following:

A new kind of PackageFragmentRoot namely ModulePackageFragmentRoot
Optional - A new model Jimage to hold the modules. It will make sense when in future we will be required to load individual Jimage files and might also have a mixed set up of Jars and Jimages.

We also need to discuss what happens when we also have modules as source.
> the entire Jimage is represented as a PackageFragmentRoot

I'd expect the *module* to be represented by an IPackageFragmentRoot. The IPFR is the structure that holds package fragments. The Jimage may contain multiple modules that may each hold a package fragment with the same name. This shows that IPFR doesn't map well to JImages, since an IPFR can only hold a single package fragment with a given name.

Multiple modules/IPackageFragmentRoots can be backed by the same Jimage file. I'm not sure if we really need a separate model object for Jimages at this time. Isn't the grouping of modules into Jimage files an implementation detail of the runtime?
(In reply to Markus Keller from comment #1)
> Isn't the grouping of modules into Jimage files an implementation
> detail of the runtime?

Probably we can keep it that way. I was merely wondering (because we show the JARs in the bundle path being listed), we might also want to show the list of jimages. Of course, as of now, we have no control over what images are being added to the buildpath as we simply take everything from the JRE, so it might not make a difference.
(In reply to Jay Arthanareeswaran from comment #2)
> Probably we can keep it that way.

No, I think we really shouldn't.

(In reply to Markus Keller from comment #1)
> The Jimage may contain multiple modules that may each hold a package fragment with the same name.

I didn't find anything in the current Jigsaw drafts that would allow or prevent that situation, but I think we should be prepared to handle it. And that can only work if we turn modules into package fragment roots.
(In reply to Markus Keller from comment #3)
> (In reply to Jay Arthanareeswaran from comment #2)
> > Probably we can keep it that way.
> 
> No, I think we really shouldn't.
> 
> (In reply to Markus Keller from comment #1)
> > The Jimage may contain multiple modules that may each hold a package fragment with the same name.
> 
> I didn't find anything in the current Jigsaw drafts that would allow or
> prevent that situation, but I think we should be prepared to handle it. And
> that can only work if we turn modules into package fragment roots.

+1.
(In reply to Markus Keller from comment #3)
> I didn't find anything in the current Jigsaw drafts that would allow or
> prevent that situation, but I think we should be prepared to handle it. And
> that can only work if we turn modules into package fragment roots.

May be I wasn't clear. There's no question about that really. Modules will become package fragment roots. The only question is, what happens to the jimages. Do they get displayed in the package explorer at all? If the user is allowed to pick/choose jimage files, this becomes relevant.
Created attachment 256516
Draft

I had a half cooked patch lying about and after the update from the Jigsaw project team, I dusted it up and attaching the same here.

I haven't gone through all the available material. But in light of the recent developments, we need to discuss 'modules' in general. Esp in the context of this bug, we need to decide where the 'modules' fit in the existing eclipse model.

My initial thought is that module
  - is a package fragment root (source/binary)
  - can be added to a Java project as a source folder (1x1)
  - can be added to a Java project as a JAR (1x1)
  - (s) can be added through Jimage files (many x 1)

In the Java 9 effort so far, we have carefully avoided any new API, but in this patch I am proposing a new one in IPackageFragmentRoot:

	/**
	 * Sorry, no doc yet.
	 *
	 * @since 3.12 BETA_JAVA9
	 */
	public boolean isModule();

Other notes about the patch:
 1. Moved the jimage specific code to a new kind of root - ModulePackageFragmentRoot. With this, all the unnecessary passing around of isJimage flag have been left out.
 2. The image visitor is also smarter and loads the java elements only on need basis (I can see the difference in the package explorer)
 3. Only hiccup was with some internal clients of IJavaProject#getPackageFragmentRoot(String). With Jimages, we don't get 'one' root, but many roots with a given path. I have fixed in search, but this is worth another look later and other clients might need a proper fix too.

Manoj, you might also want to store the module name as well in the index to make the search bit more robust.
(In reply to Jay Arthanareeswaran from comment #6)
> Other notes about the patch:

Actually, the most visible change is that we now have individual modules appearing under the project instead of all packages being listed under one package fragment root for the bootmodules.jimage. And it only required a simple change in the UI for the module name to appear nicely in the package explorer.
Created attachment 256527
Same as above, fixed failing tests
Created attachment 256537
Updated patch

Fixed another failing case while creating Java elements from memento.

Manoj,
The patch has a known issue - Search doesn't find types that are not in java.base module. I think we should fix it by storing and restoring the module to the package fragment while indexing. Please take a look.
I released the first set via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA9&id=19d831578c7752138307147c2a19ddfc6ea54777

The proposed API is part of the change, but needs closer look as we start working on Java modules.
(In reply to Jay Arthanareeswaran from comment #10)
> I released the first set via:
> 
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
> ?h=BETA_JAVA9&id=19d831578c7752138307147c2a19ddfc6ea54777

And search still doesn't work if the type being searched for doesn't belong in java.base module. This can be fixed by simply persisting the module name while indexing and using that later.
Fixed a bug in opening non-Java resources from a Jimage file:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA9&id=34f77b81d2ca13f7239cc4e93d13f95d804f08f3
(In reply to Jay Arthanareeswaran from comment #7)
> simple change in the UI for the module name to appear nicely in the package
> explorer.

Jay, I don't see the module name in the package explorer - instead bootmodules.jimage is shown for all the module names.
(In reply to Manoj Palat from comment #13)
> Jay, I don't see the module name in the package explorer - instead
> bootmodules.jimage is shown for all the module names.

This has been fixed with bug 478077. Since that commit is not yet in any BETA_JAVA9 build, you have to take o.e.jdt.ui from Git (BETA_JAVA9 branch).
(In reply to Jay Arthanareeswaran from comment #6)
> I haven't gone through all the available material. But in light of the
> recent developments, we need to discuss 'modules' in general. Esp in the
> context of this bug, we need to decide where the 'modules' fit in the
> existing eclipse model.
> 
> My initial thought is that module
>   - is a package fragment root (source/binary)
>   - can be added to a Java project as a source folder (1x1)
>   - can be added to a Java project as a JAR (1x1)
>   - (s) can be added through Jimage files (many x 1)

In order to proceed further, we need to freeze on this. When I wrote that, I was sure this was the only way forward, but after having discussion on this with the team, there is a thought about considering the module to be equivalent of a eclipse bundle, mainly because the slated module dependencies resemble that of eclipse bundles, which is already provided by PDE. I would like know what others think about this.

Let me know if you think this needs its own bug.
(In reply to Jay Arthanareeswaran from comment #15)
> In order to proceed further, we need to freeze on this. When I wrote that, I
> was sure this was the only way forward, but after having discussion on this
> with the team, there is a thought about considering the module to be
> equivalent of a eclipse bundle, mainly because the slated module
> dependencies resemble that of eclipse bundles, which is already provided by
> PDE. I would like know what others think about this.
> 
> Let me know if you think this needs its own bug.

I raised bug 479483 to discuss this. This one can be closed as the relevant fixes have already been released.


[1.9] Restructure Java Model for Jimage



Bug 473901 - Fix bug in opening non Java resources from Jimage 

Bug 473901 - [1.9] Restructure Java Model for Jimage 