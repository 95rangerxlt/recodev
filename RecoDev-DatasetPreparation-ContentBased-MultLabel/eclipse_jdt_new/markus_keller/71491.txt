There should be a refactoring tool that will convert 1.4 style collections to 
the new parameterized types introduced in the generics spec. This refactoring 
tool should have the following features:  
 
1) Allow the user to select a collection and then refactor to a generic.  
2) Refactoring dialog would ask for the type to be used for the parameters. 
(Note that it would be cool if the tool could figure this out for itself by 
looking for an add method for the collection and suggesting the type. ) 
3) Remove unnecessary casts in extraction of elements of the collection. 
4) Convert iterators to the apporpriate type and remove unecessary casts.  
 
-------------------------- 
For Example:  
 
public class SomeClass { 
    private ArrayList values = new ArrayList();  
 
    public void addValue(final String value) { 
        this.values.add(value); 
    } 
 
    public String getValue(final int index) { 
        return (String)this.values.get(index); 
    } 
 
    public void writeLengths(final List names) { 
        for (final Iterator iter = names.iterator; iter.hasNext();) { 
            final String element = (String)iter.next(); 
            System.out.println(element.length()); 
        } 
    } 
 
    // .... etc 
} 
 
would become: 
 
public class SomeClass { 
    private ArrayList<String> values = new ArrayList<String>();  
 
    public void addValue(final String value) { 
        this.values.add(value); 
    } 
 
    public String getValue(final int index) { 
        return this.values.get(index); 
    } 
 
    public void writeLengths(final List<String> names) { 
        for (final Iterator<String> iter = names.iterator; iter.hasNext();) { 
            final String element = iter.next(); 
            System.out.println(element.length()); 
        } 
    } 
 
    // .... etc 
}

There should be a refactoring tool that will convert 1.4 style collections to 
the new parameterized types introduced in the generics spec. This refactoring 
tool should have the following features:  
 
1) Allow the user to select a collection and then refactor to a generic.  
2) Refactoring dialog would ask for the type to be used for the parameters. 
(Note that it would be cool if the tool could figure this out for itself by 
looking for an add method for the collection and suggesting the type. ) 
3) Remove unnecessary casts in extraction of elements of the collection. 
4) Convert iterators to the apporpriate type and remove unecessary casts.  
 
-------------------------- 
For Example:  
 
public class SomeClass { 
    private ArrayList values = new ArrayList();  
 
    public void addValue(final String value) { 
        this.values.add(value); 
    } 
 
    public String getValue(final int index) { 
        return (String)this.values.get(index); 
    } 
 
    public void writeLengths(final List names) { 
        for (final Iterator iter = names.iterator; iter.hasNext();) { 
            final String element = (String)iter.next(); 
            System.out.println(element.length()); 
        } 
    } 
 
    // .... etc 
} 
 
would become: 
 
public class SomeClass { 
    private ArrayList<String> values = new ArrayList<String>();  
 
    public void addValue(final String value) { 
        this.values.add(value); 
    } 
 
    public String getValue(final int index) { 
        return this.values.get(index); 
    } 
 
    public void writeLengths(final List<String> names) { 
        for (final Iterator<String> iter = names.iterator; iter.hasNext();) { 
            final String element = iter.next(); 
            System.out.println(element.length()); 
        } 
    } 
 
    // .... etc 
}
Refactoring is JDT/UI.
Move to JDT/UI for comment.
This is already in the works....
'Infer type arguments' gort added in 3.1


[infer type arguments] JDK 5.0: Refactoring Tool to convert Collections to Parameterized types. [refactoring]

