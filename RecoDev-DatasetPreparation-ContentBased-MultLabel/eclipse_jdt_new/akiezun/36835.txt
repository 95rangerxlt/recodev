Like #36481, we discovered this failure, because we split some classes to
generated and hand-written ones, partly inheriting from generated classes. 

This is some given code, not being changed (to understand our motivation:
consider a.Base as a generated class and b.Leaf as a hand-written extension,
providing just some static configuration values):

package a;
public class Base {
  public static String getSomething(){return "something";}
}

package b;
import a.Base;
public class Leaf extends Base {
}

We usually use Leaf.getSomething() in our code like in:

import b.Leaf;
public class Source {
  public static void methodToBeMoved() {
    System.out.println(Leaf.getSomething()); 
  }
}

public class Target{
}

If we Refactor/Move the methodToBeMoved from Source to Target the involved
classes have changed to: 

import a.Base;
import b.Leaf;
public class Source {
}

import before.b.Leaf;
public class Target{
	public static void methodToBeMoved() {
		System.out.println(Base.getSomething()); 
	}
}

Note that the method body has changed to call Base.getSomething() instead of the
former Leaf.getSomething() and that the needed import statement has been added
to Source.java instead of Target.java while import b.Leaf has been added to
Target.java, though it is not needed after re-writing the method body.

When moving a method, I would not expect that the code would be changed in this
way, but if it was, it should at least not result in a compiler error.

Like #36481, we discovered this failure, because we split some classes to
generated and hand-written ones, partly inheriting from generated classes. 

This is some given code, not being changed (to understand our motivation:
consider a.Base as a generated class and b.Leaf as a hand-written extension,
providing just some static configuration values):

package a;
public class Base {
  public static String getSomething(){return "something";}
}

package b;
import a.Base;
public class Leaf extends Base {
}

We usually use Leaf.getSomething() in our code like in:

import b.Leaf;
public class Source {
  public static void methodToBeMoved() {
    System.out.println(Leaf.getSomething()); 
  }
}

public class Target{
}

If we Refactor/Move the methodToBeMoved from Source to Target the involved
classes have changed to: 

import a.Base;
import b.Leaf;
public class Source {
}

import before.b.Leaf;
public class Target{
	public static void methodToBeMoved() {
		System.out.println(Base.getSomething()); 
	}
}

Note that the method body has changed to call Base.getSomething() instead of the
former Leaf.getSomething() and that the needed import statement has been added
to Source.java instead of Target.java while import b.Leaf has been added to
Target.java, though it is not needed after re-writing the method body.

When moving a method, I would not expect that the code would be changed in this
way, but if it was, it should at least not result in a compiler error.
Adam, please comment
will have a look
producing Base.getSomething() will have to be lived with for now (for 
simplicity it, changes the call receiver.method() to declaringClass.method)
- please open a separate report if it really bugs you

i fixed the missing import



Refactor: move static method "corrects" code, but fails to update imports in target [refactoring]

