Eclipse 2.1 RC1, win2k

Test case:

New java project, create interface I such that:

interface I {
   void method(Integer i, Object o);
}

then create class C such that:

class C implements I {
   public void method(Integer i, Object o) {
   }
   public void method(Double d, Object o) {
   }
}

Now, select the second method of class C, choose "Change Method Signature" from refactoring menu, Eclipse gives a warning that this method is required to implement ineterface I (it's got the wrong method).  Go ahead with the refactoring, remove the second parameter, and Eclipse removed the second parameter from both methods in class C AND from the method declaration in interface I.

Oddly enough, if you now re-select any of the methods in class C, that particular refactoring option has vanished from the menu.  Not sure if that's a related problem or not.

Eclipse 2.1 RC1, win2k

Test case:

New java project, create interface I such that:

interface I {
   void method(Integer i, Object o);
}

then create class C such that:

class C implements I {
   public void method(Integer i, Object o) {
   }
   public void method(Double d, Object o) {
   }
}

Now, select the second method of class C, choose "Change Method Signature" from refactoring menu, Eclipse gives a warning that this method is required to implement ineterface I (it's got the wrong method).  Go ahead with the refactoring, remove the second parameter, and Eclipse removed the second parameter from both methods in class C AND from the method declaration in interface I.

Oddly enough, if you now re-select any of the methods in class C, that particular refactoring option has vanished from the menu.  Not sure if that's a related problem or not.
OK, this bug is worse than it first appeared.  It not only incorrectly matches
methods in the same class, it incorrectly matches methods in DIFFERENT 
PROJECTS.

Test case:
- Create two java projects, proj1 and proj2
- In each project create these two types:

public interface I {
    void method(Object o);
}

public class C implements I {
    public void method(Object o) {
    }
}

Now, in proj1, select I.method() and go to "Change method Signature", remove
the method parameter, and Eclipse changes it in BOTH projects.

This is a very serious bug, effectively rendering this refactoring useless.
It may also happen with other refactorings, I haven't tried them.

Upgrading severity field accordingly.
i understand your original problem
but the case described in comment 1 looks legit
C.method is an implementation of I.method so they both must be changed together
No - Class C in the first example has TWO methods with the same name but only ONE 
of those methods has the signature defined in the interface.

When I refactor method(Integer,Object), it should NOT affect method(Double,Object).
Eclipse seems to be matching solely on the name of the method, and perhaps also the 
number of parameters, but it is not correctly matching the signature of those 
parameters.

Oops, apologies, I thought you had a problem with the first problem.
The problem with comment 1 is that Eclipse is incorrectly matching types across
projects, even thought there's no relationship between those two projects.

Just because two projects have classes of the same name does not mean they have 
anything to do with each other.  Take, for example, two projects, each of which
represents two branches of the same CVS projects.  Tey share many type names,
but changing one project should have absolutely no affect on the other.
i'm missing something here:
if the superinterface of C is not that I from the other project,
then how come class C compiles? there must be some I somewhere
Each project has it's own definition of the interface.
The two projects have no compile-time dependencies.
ok, i reproduced the problem
i will fix it because it's nasty

the other problem is quite different - it has to do with overloading
i have a fix but it's too scary to put it in for 2.1 (we have lived with this 
since 1.0)  

so, i will split the report in 2:
 a. the overloading problem
 b. the wrong scope problem

them i will mark 'a' as LATER
and fix 'b' for 2.1 
Ok, that's fine.  Are you going to post a new bug for the overloading problem?  
If so, can you post the bug ID here?
fixed
see bug 33797
Thanks, Adam
no probs
(btw, indirect culprit of this was bug 33800)


[Refactoring] "Change method signature" changes more than one method



fix for 33473 [Refactoring] "Change method signature" changes more than one method 