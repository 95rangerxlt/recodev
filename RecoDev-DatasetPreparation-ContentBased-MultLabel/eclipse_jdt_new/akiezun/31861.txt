Given the following class:
------------------------------------------------------------
public class Top {

	public class Inner {

		public Inner() {
			super();
			System.out.println(getName());
		}

		public String getName() {
			return getTopName() + ".Inner";
		}
	}

	public Top() {
		System.out.println(new Inner().getName());
	}

	public String getTopName() {
		return "Top";
	}

	static public void main(String[] argv) {
		new Top();
	}
}
------------------------------------------------------------

Refactoring by converting nested type to top level will result
in the two following classes:

------------------------------------------------------------
import java.lang.String;
import java.lang.System;
public class Inner {
	private final Top top;

	public Inner(Top top) {
		super();
		System.out.println(getName());
		this.top = top;
	}

	public String getName() {
		return this.top.getTopName() + ".Inner";
	}
}
public class Top {

	public Top() {
		System.out.println(new Inner(this).getName());
	}

	public String getTopName() {
		return "Top";
	}

	static public void main(String[] argv) {
		new Top();
	}
}

------------------------------------------------------------
... which will result in 
java.lang.NullPointerException
	at Inner.getName(Inner.java:13)
	at Inner.<init>(Inner.java:8)
	at Top.<init>(Top.java:4)
	at Top.main(Top.java:12)
Exception in thread "main" 

because the assignment this.top = top in the constructor for 
Inner is performed after the call to getName(). The correct 
algorithm would be to insert that call after the call to super().

Moreover, the two import from java.lang.* are not necessary and
removed by a later "organize imports"

-Stephane

Given the following class:
------------------------------------------------------------
public class Top {

	public class Inner {

		public Inner() {
			super();
			System.out.println(getName());
		}

		public String getName() {
			return getTopName() + ".Inner";
		}
	}

	public Top() {
		System.out.println(new Inner().getName());
	}

	public String getTopName() {
		return "Top";
	}

	static public void main(String[] argv) {
		new Top();
	}
}
------------------------------------------------------------

Refactoring by converting nested type to top level will result
in the two following classes:

------------------------------------------------------------
import java.lang.String;
import java.lang.System;
public class Inner {
	private final Top top;

	public Inner(Top top) {
		super();
		System.out.println(getName());
		this.top = top;
	}

	public String getName() {
		return this.top.getTopName() + ".Inner";
	}
}
public class Top {

	public Top() {
		System.out.println(new Inner(this).getName());
	}

	public String getTopName() {
		return "Top";
	}

	static public void main(String[] argv) {
		new Top();
	}
}

------------------------------------------------------------
... which will result in 
java.lang.NullPointerException
	at Inner.getName(Inner.java:13)
	at Inner.<init>(Inner.java:8)
	at Top.<init>(Top.java:4)
	at Top.main(Top.java:12)
Exception in thread "main" 

because the assignment this.top = top in the constructor for 
Inner is performed after the call to getName(). The correct 
algorithm would be to insert that call after the call to super().

Moreover, the two import from java.lang.* are not necessary and
removed by a later "organize imports"

-Stephane
it lives in the ui component
fyi: the import issue is fixed now (another report)
i have a fix
test added, bug fixed

thanks St√©phane - this is _exactly_ the kind of detailed report we like best


Refactoring / "Convert Nested Type to Top Level" binds to enclosing object too late.



231861 for 3.3.x 

231861 

fix for 31861 Refactoring / "Convert Nested Type to Top Level" binds to enclosing object too late. 

fix for 31861 Refactoring / "Convert Nested Type to Top Level" binds to enclosing object too late. 

31861 