 

 
Using the result of a bad build (I'm doing my own build), 
I was not able to open a Java perspective.

I quickly tracked down the problem and it appears that
the Java perspective was accessing the debug.ui that 
has been unactivated due to some other problems.

So my questions are: Why does the Java perspective needs 
to access the debugger when it opens?
Can this dependency be loosen?

Isn't it occurring through an extension point ? Likely the classpath variable 
initialization or the classpath container initialization.

Maybe we should be more defensive. Do you have steps to reproduce ?
If you are interested I have the .zip file containing the platform
that caused problems.

Debug contributes an extension to initialize JRE_LIB classpath variables, the 
fact it activates its UI part is a Debug issue.

We are currently working on avoiding activating our extensions during startup, 
and have a separate PR for this issue.

Moving this PR to Debug to see if they can better organize variable 
initialization (or whatever makes them think they should open their UI part).
Its not JRE_LIB. The initlializer is defined in a non-UI plug-in that does not 
pre-req the debug UI. The java UI pre-reqs the debug UI explicitly. Moving to 
JUI for comment.
Adam, did this get fixed by the performance work we did for M4 ?.
we fixed a whole bunch of dependencies before M4 - one outstanding problem was 
the external tools toolbar button which i think loaded some debug code

i will close this report now - the same exercise will have to be repeated 
anyway for 2.2


Loosening the dependencies between Java perspective and the debugger

