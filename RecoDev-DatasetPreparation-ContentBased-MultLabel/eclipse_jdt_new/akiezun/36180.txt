Eclipse doesn't have a Callers/Callees view (a Call Hierarchy view).

Although it is possible to search for references to a method, the results are
only presented in one level. If you want to search for references to the search
results, you have to select each method in turn and search for these.

I'd like a callers/callees view which presents a method's static call hierarchy
with one mode for callers (references to method) and one for callees (calls from
method).

Eclipse doesn't have a Callers/Callees view (a Call Hierarchy view).

Although it is possible to search for references to a method, the results are
only presented in one level. If you want to search for references to the search
results, you have to select each method in turn and search for these.

I'd like a callers/callees view which presents a method's static call hierarchy
with one mode for callers (references to method) and one for callees (calls from
method).
I have already made a standalone plugin
(http://eclipse-tools.sourceforge.net/call-hierarchy) for this purpose, which I
would like to contribute if you're interested. I need to clean it up a bit
first, though. I'm also willing to make a patch to integrate the changes with JDT.
Hi Jesper,

this is excellent timing. We are in the planning process for 2.2 and a 
callers/callee view is on our list. So we are very interested in your 
contribution. 

Next steps:
* can you please attach your plug-in to this bug report. This is the official 
way for us to get a contribution. Please check out the charter 
http://www.eclipse.org/eclipse/eclipse-charter.html with regard copyrights in 
the code (the relevant section is at the bottom). We can also take care of this 
if you like.

* once we have access to your plug-in we will look into it and provide you with 
feedback. This is usually an iterative process where you work with one of the 
JDT-UI committers. 
 
Question:
* are you willing to actively maintain the plug-in once it is part of eclipse?

Created attachment 4492
Call Hierarchy plugin

This is my current implementation of a Call Hierarchy plugin.
Hi Erich,

I have attached the plugin to the bug report. The license is CPL v1.0. I have
shamelessly copied some code from internal JDT classes which I guess is not a
legal issue. I just remembered that have also borrowed a lot from a preferences
page in the JDepend4Eclipse plugin. I'm not totally sure whether this is an
issue. Overall, I'm not that much into this legal stuff.

Regarding the maintenance of the plugin when integrated: I'd gladly maintain it.
Jesper:

Please don't forget youre integration with youre implementors plugin with the 
Call Hierarchy.. 
because ALT-F3 (or SHIFT-F3 later on...) to popup a dialog of implementing 
classes of that method call your are on is also a very good contribution, (also 
when it is also used through the Call hierarchy)

i'll grab this - review it and work as the eclipse.org side of this work 
(for now, until you yourself get promoted to a commiter status :-) )
Jesper, your plugin requires dk.kamstruplinnet.implementors.core


can you attach that as well?

Jesper, i'd like to start on this as soon as i can. i have a bunch of 
observations and little things that should be worked on but the overal first 
impression is very good and i guess we can work on it to make it a valueable 
contribution to the eclipse project.




but ... first i need to have the whole source :-)


cheers

Created attachment 4534
Implementors plugin

Hi Adam,

I have attached the dk.kamstruplinnet.implementors feature (consists of three
plugins, of which one is for EJB handling, something which should probably not
go into JDT).
Adam,

As soon as you have anything you think I should take a look at (regardless of
whether my code will be incorporated or not), please let me know as I have a
pretty good amount of time in the next week's time.
cool, thanks


below is a lost of issues i came up quickly (i numbered them for easier 
reference)




P1s (specially the legal issue with JDepend4Eclipse) should be resolved before 
we can release the code, the rest could be worked one once all is in place.


I can then read the code and review it more carefully.




ok, here's the list - please ask any question you may have. you can ask either 
here on on the mailing list (maybe preferable because this is just a bug report)
. I'm sure you will have questions about tests, nls, help etc etc. I'm here to 
anwer them.




---------------------------------


there's a bunch of isses but we can resolve many of them with the code already 
in the repository


some things, however, must be resolved prior to that




(yes, the ejb plugin will not make in to jdt for now)




P1 (things that must happen before we can start thinking about incorporating it)
: 


1.1 legal issues - borrowing from jdt is of course not a problem


 (i will ask someone about the JDepend4Eclipse dependency)


 


1.2 i'd like to see all that code (let's talk callhierarchy and implementors 
core for now)


living in one package in the ui source folder of org.eclipse.jdt.ui. 


Package name would probably be sometinhg like 'org.eclipse.jdt.internal.ui.
callhierarchy'




1.3 icons would be merged with jdt ui icons, Plugin subclasses dropped 


(with their functionality move elsewhere - might even be the same class just it 
should not 


subclass Plugin once we incorporate it)




P2: less urgent but should happen as well


2.1 junit tests: we will need tests for at least the core functionality of your 
code: finding callees etc.


(finding callers is done using the search engine so testing is not all that 
necessary)




2.2 naming conventions: - jdt ui uses an 'f' prefix convention and your code 
should be converted to use it as well


                     - all interfaces in eclipse should have names starting with 
'I'




2.3 the following functionaly now located on the preference page should


 be moved closer to the place where it's used, which is the view (note that this 
would eliminate the preferenceage altogether):


   -- detail orientation (see Type Hierarchy for how it's done - we should be 
consistent here)


   -- label format. i suggest a 3-state radio menu item group in the view's 
'Menu' dropdown (the triangle button)


   -- 'Search for callers' - do we need this?


   -- Filters should be done like Package Explorer filters, in the view's 
dropdown 


     (i know, just realized, the junit view does it incorrectly - i'll enter a 
bug report)


   -- setting the max depth can also be in the dropdown: something that opens a 
little inoput dialog 


   (or it could be put together with 'Filters' - like Task list does it with the 
number of visible items)


                     


2.4 the usefulness of the detail pane remains for me to be seen. the same info 
is available via a double click on a node


(after using it for a while i starting to think that it really should be removed 
- but i can be convinced otherwise)




2.5 'Open Call Hierarchy' menu option should be located right after 'Open Type 
Hierarchy' 


(you should now be able to do it because it's the same plugin (although it 
should be made possible to do from elsewhere too))




2.6 we should provide Adapters for elements displayed in the view so that normal 
eclipse's mechanism of object contribution works 


(it's would allow all normal menus etc to be available on the elements from your 
view)




2.7 the view is now open, i think, using the method that encloses the selection. 
this is not intuitive


 and i'd like it to open on the method to which the selection resolves. So if i 
select a call to foo that lives inside bar, 


 the view opens on foo not bar


 


2.8 maybe a special end-node should be used to signalize recursion (it would 
communicate it clearly, 


now i kind of have to know)




2.9 the global toolbar button should be removed - it's enough to have 'Open Call 
Hierarchy' 


(to which we could assign a shortcut like for 'Open Type Hierarchy')


          


P3


3.1 exception logging: ExceptionHandler or JavaPlugin.log should be used


3.2 copyright notice: please look at AddDelegateMethodsAction to see what


  the convention for external contributions looks like  


3.3 NLSing - all strings should be externalized (i can help you on that)


3.4 all actions, views, dialogs etc should have help context IDs defines (for 
the F1 help) - i can help on that


3.5 'Open Declaration' should i think be changed to 'Open' - like it is in the 
Type Hierarchy


3.6 we don't need so many places to turn on the detail page (if we keep it) - 
the toolbar button is enough


3.7 the 'Search scope' should also include the list of existing working sets, 
like the normal Search submenu does


3.8 it's enough to have Refresh in only 1 place - i'd prefer the context menu


3.9 the F8 is already taken by Resume (do we need shortcuts at all here? if we 
do, we should take something less prominent, 


	F* keys should be reserved for more ofter used things)


3.10 UNKNOWN progress monitors should be avoided if possible - i think in this 
plugin we could always show 


real progress (i can help on that)


3.11 all classes/methods etc should be made as hidden as possible (many classes 
can be made package-visible)




P4: little glitches


4.1 all menu entries should use Chapter capiliatization, so 'Focus on Selection' 
rather than 'Focus on selection'


4.2 hierarchy history drowpdown should have icons


4.3 names should be displayed using JavaElementProvider - that way they follow 
our conventions (e.g. compressed package names etc.)


4.4 ArrayContentProvider can be used instead of LocationContentProvider

(stupid Opera puts so much space between lines - i guess i'll switch back to IE) 
:-) 

1> 'Search for callers' - do we need this?

Don't use it a lot but sometimes can this be handy, but of couse always one 
level deep... But to have this in one view is nice..



>the usefulness of the detail pane remains for me to be seen. the same info 
>is available via a double click on a node

i don;t see that info right away when i double click on the node!
I find it very handy to see that it did call 2x!
I think you mean that when it only returns one time there is no much use for it 
(besides you allready see the compleet call including arguments without 
openening the file!!) But when the call happes 2x in the search this 
information is very handy to have. So please don't remove it. I have the 
detailpane on by default!
So PLEASE keep the detailpane. I have space enough on my screen..

The thing i really miss right now in the Call Hierarchy/Open implementation 
plugin is that ALT-F3 (open implementation) doesn't do anything now when the 
method is not an interface method. It should default to normal F3 mode (just 
open/jump to the method of that class)

The more i think about it, can the normal F3 not be open implementation when it 
notice that it is a interface call? Because you almost want never to jump to an 
interface declaration. But almost always to a concreet class.

If open implementation did do normal F3 on a non interface method. I would use 
that call 99,9% of the time above only F3.
Has anyone considered a graphical view that would allow the search to go in 
both directions (caller/callee) and display results graphically, similar to 
JProbes call-graph?

Advantages might be:
1.fewer duplicates would appear.
2.the graph layout could be horizontal, which would be a better fit for a View 
docked on the bottom of a perspective.

Short of this, what about being able to toggle the direction at any moment?  
Essentially re-rooting the viewer's input on the current selection, and 
changing direction.  I haven't tried the plugin, maybe this is the current 
implementation already.
graphs are always nasty do display - i've never seen a good ui story for them
Randy,

The "Focus on Selection" action changes the root of the hierarchy - you still
have to change mode, though.
before i forget: another P2
2.10 key bindings should not be hard-coded (they are now)


Johan, guys - i now do see the value of the detail pane (it could be tweaked 
but it does add function)
Adam,

I have begun working on your issue list. I have a couple of comments below -
let's see if Mozilla behaves better than Opera... :-)

1.1: Let's consider this a non-issue. I'll change the code to use filtering á la
Package Explorer instead (btw, on closer looks the package filter code from
JDepend4Eclipse actually seems to be heavily based on the
JavaStepFilterPreferencePage in JDT Debug UI.)

1.2: I'm working on this. Do you mean that you want all of the code to go into
JDT UI (or is that just for starters)? Some of it, especially the parts from
implementors core, would in my opinion fit nicely into JDT Core.

1.3: I get your point. How do I/we go about this merging? I can make a patch to
JavaPluginImages to get my images into this class. Is that what you mean?

For the moment, I've moved everything from dk...callers.* into
org.eclipse.jdt.internal.ui.callhierarchy, and extracted everything but the
"infrastructure" code (i.e. getDefault, getResourceBundle etc.) from
CallersPlugin into another class in the new package. I'd like to keep
CallersPlugin for a while in order to keep the plugin available as a separate
plugin for Eclipse 2.1 users (but I guess that is my business only :-)

Re 2.x issues:
I haven't done much about these yet. Below are some comments and questions.

2.3: I agree that these setting could just as well be set up in view itself.

'Search for callers ...' (and the other which should have said 'Search for
callees ...'): These are related to the Implementors plugin.

When searching for calls to a method which implements a method in one or more
interfaces, the call hierarchy also finds calls to the method on these
interfaces. This may be very useful when finding out where your code is used.
However, it should be possible to just search for the method itself.

When searching for callees the call hierarchy uses the Implementors plugin to
"replace" calls to an interface with a call to the implementation class (if
there is only one implementation). This way, the call chain is not "broken" by a
call on an interface (unless there are more implementations).

2.4: I'm glad you withdrew your comments about the detail view since I'd be very
sorry to remove it :-). I've had the idea to change the list into a table and
add the line number in the source as a column. Does that help on the usefulness?
>1.1: Let's consider this a non-issue. I'll change the code to use filtering 
happy!

>1.2: ...Some of it, especially the parts from implementors core, would in my 
>opinion fit nicely into JDT Core.
we use some kind of promotion model when it comes to JDT Core API. We stage 
helper and support classes in JDT UI in special packages in 
*jdt.internal.corext.*. From time to time we iterate with the core team on 
which parts they can adopt and how the API needs to be tweaked to make it 
consistent.  This approach helps us to get consistency and we can still make 
progress. So for now I suggest that you put these JDT Core candidate classes 
into a coreext package.

>2.3: I agree that these setting could just as well be set up in view itself.
for post 2.1 we want to make an effort to make settings more directly 
accessible so that the user doesn't have find them in a jungle of preference 
settings. Moving the settings to the view is a step in this direction.

>2.4: I'm glad you withdrew your comments about the detail view 
>since I'd be very sorry to remove it :-). 
It took Adam and me quiet a while to figure when this is useful (in our code we 
didn't find many methods with more than one call to another method).
I also agree that the view adds value, but its purpose has to be more obvious, 
see below.

>I've had the idea to change the list into a table and
>add the line number in the source as a column. 
>Does that help on the usefulness?
Yes this is in the right direction. In fact, the view should look the same as 
the result of "Search>Occurrences in File" with a method. To make it obvious 
that the line shows the call site context you could show the line and not only 
the line number. I'll attach a screen shot.

In addition could the labels in the call tree view show how many calls there 
are (if the number of calls is > 1).

Finally, remove the BORDER style bit so that the details view looks flat and is 
consistent with the other views.
Created attachment 4554
Screenshot "Find occurrences in File" 

Screenshot of a "Find Occurrences in File" search for a method.
Jesper, 
so i guess the way for us to go is:

- fix the legal problem by rewriting that code (Important: is that the only 
place where you 'mimiced/copied' code from elsewhere?)

- you create 1 master plugin for the 3 (all but the ejb plugin) and attach it 
here (i guess we split the code in 2 packages: 'org.eclipse.jdt.internal.ui.
callhierarchy' for the ui and 'org.eclipse.jdt.internal.corext.
callhierarchy' for the non-ui : i will put them in 2 src folders)

- i move the code to our land, merge images, put appropriate copyright notices, 
give it a smoke test and we're ready to release it to eclipse.org cvs

- and then, we start working on the other issues
Created attachment 4558
Call Hierarchy and Implementors integrated

Adam,

I have attached the master plugin including the Call Hierarchy, the
Implementors UI and the Implementors Core.

The package filter page with the legal issue has been deleted. There is no more
code which has been copied from elsewhere (except the Eclipse source itself.)
Currently, the filtering doesn't work - the TreeViewer contains MethodWrapper
instances and the NamePackageFilter doesn't obtain an adapter for
IJavaElements, only IResource. Unless I can persuade someone that the
NamePackageFilter.select(...) contains a bug, I guess I will have to roll my
own .

I look forward to hearing your comments.
excelent!!
i will not be able to do anything with this during the weekend but if you want 
to, then i guess you can work on some of the other items: my preference would 
be 2.2, 2.3, 2.5, 2.7, 2.8, 3.6, 3.7, 3.8, 3.10, 3.11, 4.*

(naturally, you are free to disagree with any item and we will discuss)

as for the tests, you can have a look at org.eclipse.jdt.ui tests project to 
see how it's done (you will need to download pde.junit from jdt ui website)

feel free to ask questions or/and put comments
i will start working on it first thing moday morning

thanks Jesper for the solid piece of work you've done - this is going to be a 
significant contribution to the eclipse sdk
>NamePackageFilter doesn't obtain an adapter for IJavaElements, only IResource.
we should add more support for adapting to IJavaElements, so I suggest that you 
file a separate bug on this.
Created attachment 4568
Plugin 20030413

Changes made during the weekend.
Adam,

I've been working a bit on the plugin during the weekend. If you haven't already
looked at the previous attachment, disregard it and look at the new one.

Below is a list of comments and new questions.

General usability question: There seems to be differences in how different views
react to selection changes. The Search Results view shows the result in the
editor when double clicking, but does not automatically activate the editor. The
Type Hierarchy selects the method in the editor when selecting the method in the
method viewer (and if the corresponding compilation unit is open). Currently (in
the latest version), I do like the Search Results. Are there any guidelines on
this issue? Any suggestions?

Re 2.1: I haven't started making JUnit tests yet (sorry, Erich :-) ).
Actually, I'm not sure that it's that less necessary to test the callers search
since I do things to the search results after I receive them from in the
SearchResultCollector (I have just corrected two errors related to search for
calls from implicit constructors and anonymous inner classes.)

Re 2.2: Should have been fixed.

Re 2.3: Parts of the preference page have been moved to the view:
Detail orientation has been merged with Show Call Details (like in the Type
Hierarchy).
Label format: 3-state radio menu item (the icons should be fixed).
Filters: I'm hoping for a change in NamePatternFilter.select(...) (see bug
#36427). I still have to figure out where to place the Max Call Depth setting,
although I guess it should go into the filter dialog as you suggested.

Re 2.4: I've added "(n matches)" to the method label in the hierarchy if there
are more call locations (like in the search results). I haven't yet had time to
incorporate Erich's other comments on this issue.

Re 2.6: 
Re 2.7: Changed the activation from the editor to mimic that of the Type
Hierarchy (if selection resolves to a method, use that. Otherwise use the
enclosing method, if any).

Re 2.8: A very simple recursion node is inserted if recursion is detected. Example:

void a() {
    b();
}

void b() {
    a();
}

If showing the call hierarchy for method a(), it currently shows a() / b() / a()
/ "recursion".

I'd like your input as to whether this node comes at the right "time" in the
hierarchy

Re 2.9: The global toolbar button is removed. Still need to add the Open Call
Hierarchy entry to the menus (and in the correct locations). However, I guess
that the adding of actions should be done differently than I do now (i.e. it
should be more JDT'ish).

Re 3.3: I've started a bit with NLS'ing (among other places in code I've copied
from Type Hierarchy). I guess I get the idea, but let me know if there are
things I should be aware of.

Re 3.6: Turning details on is now part of the layout 3-state button on the view
menu (like in the Type Hierarchy).

Re 3.7: It does that already (although I don't have any icons like in the
ordinary Search submenus)? Maybe I just don't understand what you mean. Please
elaborate.

Re 3.8: I've reduced it to the toolbar and the context menu. You really only
want it in one place?
In general, I've cleaned up the toolbar, context menu and view menu.

Re 3.9: I've removed the use of internal shortcuts except for F3 (Open
Declaration) and F5 (refresh). The Type Hierarchy does the same for F5. However,
isn't that a problem in relation to the key bindings or is that not an issue
inside a view? What is the policy on shortcuts local to a view? As I recall,
Type Hierarchy at some time had Ctrl+1-3 for switching between the view modes.
This has been removed. Was that due to a design decision or was it because
Ctrl+1 was eaten by someone else?

Re 3.11: Started cleaning up a bit.

Re 4.2: History downdown now has icons.
Unlike the Type Hierarchy, I don't display a dialog for selecting history
entries when clicking the button itself. Should I do that?

Re 4.3: You say that names should be displayed using JavaElementProvider. As far
as I can see, you don't mean that :-)
Currently I use the settings selected by the user from the view menu's 3-state
label items. This sets the entire set of flags used for presenting Java elements
(I use JavaElementLabelProvider for this). Should I do something else instead?

Re 4.4: LocationContentProvider has been replaced by ArrayContentProvider.

---------------------
That's about it for now. I'm looking forward to your comments when you have read
all the way through... :-) In the meantime, I'll continue with the remaining
issues on your list.
>Re 2.1: I haven't started making JUnit tests yet (sorry, Erich :-) ).
I don't give up yet <g>

>Actually, I'm not sure that it's that less necessary to test the 
>callers search
correct, you don't want to test the search engine. A good starting point for 
tests is the CallersContentProvider. For an example for content provider tests 
check out the org.eclipse.jdt.ui.tests.packageview in the 
org.eclipse.jdt.ui.tests project. Tests that come to mind:
- testSimpleCall
- testSimpleCaller
- testRecursiveCall
- testInnerClassCall
- testWithMaxCallDepth 
etc.

Another good source for unit tests is your ASTUtility class.
> There seems to be differences in how different views react to 
>selection changes.
The scenario you have to keep in mind is when the view is used as a fast view. 
There are different usage models (browsing vs. editing). The search results 
doesn't activate the editor so that you can step through the different matches 
without dismissing the open fast view (browsing). The type hierarchy activates 
the editor so that you can immediately start editing (editing). I haven't used 
the view yet enough to get a feel what is better. So try to use it as a fast 
view for a while and see what feels better. 

>Re 3.8: I've reduced it to the toolbar and the context menu. 
>You really only want it in one place?
For accessibility reason you should provide actions that are available in the 
toolbar also in the view menu. See the CVS Repositories view for an example for 
how refresh is surfaced. The UI guide lines are somewhat dated and will be 
updated soon, but they are still worthwhile to check out. In particular if you 
don't find an answer you would like to get, let the UI team know. The current 
UI guidelines are available at: 
http://www.eclipse.org/articles/Article-UI-Guidelines/Index.html.

>Re 3.3: I've started a bit with NLS'ing 
the following article provides good info about NLSing and it is based on the 
JDT UI conventions: 
http://www.eclipse.org/articles/Article-Internationalization/how2I18n.html

>Re 3.9: I've removed the use of internal shortcuts except for F3 (Open
>Declaration) and F5 (refresh). The Type Hierarchy does the same for F5. 
Whenever possible don't use key listeners. We are aware of the F5 
inconsistency. However, for F3 you should retarget the Open action. If you use 
the JDT Action Groups as it is done in the type hierarchy then you should get 
this behaviour for free (haven't looked at your latest code). The fact that you 
wrapper the Java elements might get in the way here and this would be another 
argument that more of our actions should support adapting to IJavaElement.

>Type Hierarchy at some time had Ctrl+1-3 for switching between 
>the view modes. This has been removed. Was that due to a design 
>decision or was it because Ctrl+1 was eaten by someone else?
It was inconsistent with the new configurable key binding support and this is 
why we have removed it. Instead we added actions to the view drop down, so that 
you can still easily switch the view using the key board with ctrl-f10.

>icons/artwork
we work with the IBM visual design team for the artwork. Can you file a 
separate bug with the icon specifications (purpose, icon file name) for all the 
icons you need. We can then start the interaction with the artwork team.

> 4.2 I don't display a dialog for selecting history entries when 
> clicking the button itself
yes, please do so, we use this convention in the search results view as well.

BTW, thanks for your patience to go through this with us, there are many rules 
that are currently not explicit documented, but I hope we improve this over 
time. I really like the progress we make. 
I currently allow the user to select a label format from the view menu. Should
it actually be up to the view to decide this or should it just abide by the
rules set elsewhere (e.g. the Java / Appearance settings)?
Jesper, thanks for all the hard work over the weekend - i really appreciate it

there's a few more details we should resolve before releasing the code:
- the view somehow lost its icons for incomming/outgoing 
- we cannot create a new 'implementorproviders' extension point for now - 
please remove it for now and make appropriate changes
- i will not surface the implementors ui for now - please yell if you think 
it's crucial
Adam,

> - the view somehow lost its icons for incomming/outgoing 
Actually, the icons disappeared because I've changed the action (ToggleCallMode)
to fetch the icons from JavaPluginImages (by the names "ch_callers.gif" and
"ch_callees.gif". So now, it's just waiting for you to put the icons in the
right place :-)

> - i will not surface the implementors ui for now - please yell if you think
it's crucial
It's not extremely important to get that into Eclipse. I'll just keep
maintaining it as an external plugin (although I'm gonna miss the nice
jdt.internal details...).

> - we cannot create a new 'implementorproviders' extension point for now - 
> please remove it for now and make appropriate changes
OK, I will remove it. Does that mean that you want me to remove the Implementor
related classes (those in the corext.callhierarchy package)?

I'm a bit sorry this has to go since it added quite some value to the call
hierarchy since it was possible to find calls to methods in implementation
classes as well as the interfaces they implement (which is especially useful in
EJB scenarios). I now have great hopes for the "Support Java references from
non-Java files" in the 2.2 plan which will hopefully allow other (external)
plugins to feed info like that into the call hierarchy).
>OK, I will remove it. Does that mean that you want me to remove the Implementor
>related classes (those in the corext.callhierarchy package)?
>I'm a bit sorry this has to go since it added quite some value to the call
>hierarchy since it was possible to find calls to methods in implementation
>classes as well as the interfaces they implement 

i only mean the extension point and the ui for the implementors - the ui-less 
function can stay no problem

(a new extension point would mean a new public API fro jdt ui and that needs 
more work )

phh. So ALT-F3 (or whatever key combo is being assigned) for open 
implementation will still work?
It is a great feature i really mis from normal F3!! (F3 should do that by 
default if you ask me)
>So now, it's just waiting for you to put the icons in the
>right place :-)

ok - will do (will need to create black&white versions too i guess)

on a minor note (can be done later): there's a bunch of classes that should 
live in the corext package (because they're model, not ui - in particular:
CalleeAnalyzerVisitor, CalleeMethodWrapper, CallerMethodWrapper, CallLocation, 
CallSearchResultCollector, MethodCall, MethodReferencesSearchCollector)
some will have to be made public - which is ok

Johan,

I intend to continue maintaining the Implementors plugin as it is today outside
the Eclipse project. I can't live without it either... :-)
i fixed the icon problem by copying your icons and making b/w versions of them 
(it looks kind of lame but i'm not going to spend time drawing icons which will 
be replaced by those drawn by a professional anyway)

i also added the view to the 'Show View' dialog under 'Java'

so, now only the extension point thingy and we're ready to rock'n'roll
Created attachment 4585
Plugin 20030415

Hi Adam,

I've removed the extension point from the plugin.xml and its usage in the code.
Also, Implementors UI classes have been removed and the actions have been
removed from plugin.xml.

I don't know if you noticed, but I've included a very simple test case
(CallHierarchyTest) in the tests subdirectory. I guess this should go into the
jdt.ui.tests plugin once integrated (there is another test class but so far it
contains only empty test methods).
great - we're almost there


there's a reference to UpdateCallHierarchyObjectActionDelegate in plugin.xml but 
such a class does not exist.


i replaced that reference with OpenCallHierarchyActionDelegate - tell me if this 
was all right




i also removed a bunch of catch clauses for 'RuntimeExceptions' and 'Exceptions' 
- catching these is a bad idea

> there's a reference to UpdateCallHierarchyObjectActionDelegate in plugin.xml but
> such a class does not exist.
> i replaced that reference with OpenCallHierarchyActionDelegate - tell me if this
> was all right
Yep, that's correct.

> i also removed a bunch of catch clauses for 'RuntimeExceptions' and 'Exceptions' 
> - catching these is a bad idea
I hear you loud and clear :-)
>Regarding the Open Implementors support
this feature is also on our radar for 2.2. So this is another collaboration 
opportunity. However, let's do it one step at a time and first get in the 
Callers/Callees view.

Once there are tests we can take the next step <g>
Jesper,
i have just released the code (test too)!
Thanks again for writting it and the great collaboration we've had. I think I 
may say that this is the most significant external contribution to JDT UI so 
far.
There's still work to do (there always is) - i think it's best if we enter 
separate bug reports now, assign them to me and put you on CC. 

Thanks again, Jesper
ps. I guess we can close this report now
Adam,

How do we continue from here (in detail)?

Do I/we create bug reports with the remaining items on the many open issues on
this bug report?

Do I just attach patches to these bug reports?
yes, we enter bug reports for problems that we see and we fix'em
- yes, creating patches is best
ok, i enter a bunch of reports to keep us busy:

bug 36484  call hierarchy: missing mnemonics  
bug 36485  call hierarchy: location of menu entry  
bug 36486  call hierarchy: should use adapters  
bug 36487  call hierarchy: drop to should set input  
bug 36488  call hierarchy: needs full NLS  
bug 36489  call hierarchy: help context ids  
bug 36491  call hierarchy: search scope should include the list of a...  
bug 36492  call hierarchy: recursion should be indicated by a decora...  
bug 36494  call hierarchy: decorations to indicate direction  

hack away and attach patches
fyi, the icon bug report is bug 36482


Callers/Callees view

