Steps to reproduce:
1. Invoke "Introduce Factory" on the constructor in code below
2. The resulting code does not compile

abstract class IntroduceFactoryBug1 {
    // Invoke "Introduce Factory" on the constructor
    IntroduceFactoryBug1() {
    }
}

(Thanks to Yilong Li for helping with the bug report.)

Steps to reproduce:
1. Invoke "Introduce Factory" on the constructor in code below
2. The resulting code does not compile

abstract class IntroduceFactoryBug1 {
    // Invoke "Introduce Factory" on the constructor
    IntroduceFactoryBug1() {
    }
}

(Thanks to Yilong Li for helping with the bug report.)
Issue is reproducible using I20121029-2000. The code refactoring results in compiler error. The refactoring should have created an anonymous inner type and not an instance of abstract class.
You could also argue that "Introduce Factory" should be disabled for abstract classes.

However, the refactoring can still be handy, since it saves a few manual steps if the user wants to create an anonymous class or instantiate a subclass or leave the factory method abstract.

We should not silently create an anonymous class. But we could show a warning or non-fatal error in this case.
(In reply to Markus Keller from comment #2)
> You could also argue that "Introduce Factory" should be disabled for
> abstract classes.
> 
> However, the refactoring can still be handy, since it saves a few manual
> steps if the user wants to create an anonymous class or instantiate a
> subclass or leave the factory method abstract.
> 
> We should not silently create an anonymous class. But we could show a
> warning or non-fatal error in this case.

Should the fix only show the Warning/Error or show Warning/Error and create an anonymous class in the factory method?
Created attachment 237087
Fix and Test

Now displaying a warning that stub methods/implementation will be added in factory method when instantiating an abstract class. Also the factory method has implementation of the abstract class and abstract methods.

This contribution complies with http://www.eclipse.org/legal/CoO.php
1. I have split the single testcase into two as they were testing two different scenario. In future if one fails we don't need to re-run the test to find which among the 2 had actually failed.
2. Modified the warning message shown in the preview page.
3. While adding details in contributors section make sure to follow the pattern as: Samrat Dhillon <samrat.dhillon@gmail.com> - bug summary - bug url

Released the patch with :http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=eda2f601b4777e874bf43ae1cb1cfe2259455707
> "Method stub will be added to instantiate abstract type."

The message must tell the primary action in standard terminology, not some consequence of the primary action. E.g.: "The factory method will create an anonymous class."


You also have to fix the code formatting. If in doubt, just use the formatter on changed lines (but not on the whole file!):

- use a single space between keyword and '('
- use a single space between variable type and variable name
- use compact assignment with no space on the left of '='.
Changed the message to "Anonymous class will be created within the factory method."
Fixed the code formatting and released with: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=363e2524f2e1a153e42c06e4ac9d7b8e953c859f
(In reply to Manju Mathew from comment #7)
Setting to FIXED again.


[introduce factory] Introduce Factory on an abstract class adds a statement to create an instance of that class



Fixed Bug 395016: [introduce factory] Introduce Factory on an abstract class adds a statement to create an instance of that class 

Fixed Bug 395016: [introduce factory] Introduce Factory on an abstract class adds a statement to create an instance of that class 