In the following code:

class Y {
	class Z {
	}
	Z z1 = (@Marker ZZ) null;  // 1
	Z z2 = new @Marker ZZ();  // 2
}
@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)
@interface Marker{}

The error highlighting includes the annotations as well, which shouldn't be the case. It appears that the we are reporting the problem against the TypeReference and the source locations for the type reference includes the annotations as well.
It doesn't happen in other cases, let's say arguments, because the annotations are part of the argument and not TypeReference and hence the location for the TypeReference is accurate.

Also note that in the first line, the same error "ZZ cannot be resolved" is reported twice!

In the following code:

class Y {
	class Z {
	}
	Z z1 = (@Marker ZZ) null;  // 1
	Z z2 = new @Marker ZZ();  // 2
}
@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)
@interface Marker{}

The error highlighting includes the annotations as well, which shouldn't be the case. It appears that the we are reporting the problem against the TypeReference and the source locations for the type reference includes the annotations as well.
It doesn't happen in other cases, let's say arguments, because the annotations are part of the argument and not TypeReference and hence the location for the TypeReference is accurate.

Also note that in the first line, the same error "ZZ cannot be resolved" is reported twice!
Shankha, please take a look. Work with Jay for review & release.
org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java

test226 (//https://bugs.eclipse.org/bugs/show_bug.cgi?id=179477 - variation)

public class X {
    public @interface Annot {
        float[] value();
        Class<X>[] classe();
    }
    @Annot(value={x}, classe={Zork.class,zork})
    class Inner {
    }
} 

Oracle Compiler: b115 
====================
Eclipse Compiler errors:
[]$ java -jar ecj_all.jar -1.8 X.java
----------
1. ERROR in C:\tmp\391521\X.java (at line 6)
        @Annot(value={x}, classe={Zork.class,zork})
                      ^
x cannot be resolved to a variable
----------
2. ERROR in C:\tmp\391521\X.java (at line 6)
        @Annot(value={x}, classe={Zork.class,zork})
                                  ^^^^
Zork cannot be resolved to a type
----------
3. ERROR in C:\tmp\391521\X.java (at line 6)
        @Annot(value={x}, classe={Zork.class,zork})
                                  ^^^^^^^^^^
Class<Zork> cannot be resolved to a type
----------
4. ERROR in C:\tmp\391521\X.java (at line 6)
        @Annot(value={x}, classe={Zork.class,zork})
                                             ^^^^
zork cannot be resolved to a variable
----------
5. ERROR in C:\tmp\391521\X.java (at line 6)
        @Annot(value={x}, classe={Zork.class,zork})
                                             ^^^^
The value for annotation attribute X.Annot.classe must be a class literal
----------
5 problems (5 errors)
====================

Oracle Compiler:
X.java:6: error: cannot find symbol
    @Annot(value={x}, classe={Zork.class,zork})
                  ^
  symbol:   variable x
  location: class X
X.java:6: error: cannot find symbol
    @Annot(value={x}, classe={Zork.class,zork})
                              ^
  symbol:   class Zork
  location: class X
X.java:6: error: cannot find symbol
    @Annot(value={x}, classe={Zork.class,zork})
                                         ^
  symbol:   variable zork
  location: class X
3 errors

====================

The following description :
https://bugs.eclipse.org/bugs/show_bug.cgi?id=196200#c0

does show the reason to produce extra errors?

Should we imitate the oracle compiler's present form.
In my opinion the present form makes more sense as if the type is incorrect therefore the error message on the annotation is irrelevant.


Thanks
class Y {
	class Z {
	}
	Z z1 = (@Marker ZZ) null;  // 1
	Z z2 = new @Marker ZZ();  // 2
}
@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)
@interface Marker{}

2 errors
[]$ /c/Work/JDK/b115/jdk8/jdk1.8.0/bin/javac -source 1.8 Y.java
Y.java:4: error: cannot find symbol
        Z z1 = (@Marker ZZ) null;  // 1
                        ^
  symbol:   class ZZ
  location: class Y
Y.java:5: error: cannot find symbol
        Z z2 = new @Marker ZZ();  // 2
                           ^
  symbol:   class ZZ
  location: class Y
2 errors
(In reply to shankha banerjee from comment #2)
> 
> The following description :
> https://bugs.eclipse.org/bugs/show_bug.cgi?id=196200#c0
> 
> does show the reason to produce extra errors?
> 
> Should we imitate the oracle compiler's present form.
> In my opinion the present form makes more sense as if the type is incorrect
> therefore the error message on the annotation is irrelevant.


I would not worry about this. All ECJ messages are valid ones, even though
we could have avoided some secondary errors.
Created attachment 237483
Patch

The patch is complete in itself. All test results are green.

There is one change I have made which is not related to the patch.

org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java 
@@ -7704,6 +7718,10 @@ public void typeMismatchError(TypeBinding actualType, TypeBinding expectedType,
 				expectingLocation.sourceEnd);
 			return;
 	}
+
+	if (actualType == null || expectedType == null)
+		return;
+  

As I thought the statements following it:

	char[] actualShortReadableName = actualType.shortReadableName();
 	char[] expectedShortReadableName = expectedType.shortReadableName();

may lead to a null pointer exception. 

None of the test cases lead to this (null pointer exception) case and I can't think of a test case which will.

Thanks
(In reply to shankha banerjee from comment #5)
> Created attachment 237483 [details]
> Patch

I will run all the set of test cases other than the ones which we run for JAva8 and update the results. There is a possibility other test cases may be effected as well.

Thanks
(In reply to Jayaprakash Arthanareeswaran from comment #0)

> Also note that in the first line, the same error "ZZ cannot be resolved" is
> reported twice!

I may have spoken too soon in comment#4 to say we need not worry about 
the double reporting. If this behavior exists on master also, then let us
keep the present bug just for the range correction, raise a new bug for
master. Otherwise if master is good and Java 8 issues an extra error,
let us address it here.
I compiled the following on master :

// --
class Y {
	class Z {
	}
	Z z1 = (ZZ) null;  // 1
}

// --

and I see that the double reporting behavior exists there too. So let us raise
a separate bug for that against master and tackle in due course.
I will file the bug.
The bug on Master : https://bugs.eclipse.org/bugs/show_bug.cgi?id=421821
Tests for the master branch are fine.
Created attachment 237520
Patch

I had forgot to add few test cases for with respect to Qualified Types and few minor changes.

Tests are green.

Thanks
Created attachment 237521
Patch

Renaming of the variable : typeSourceStart
Tests are Green.
(In reply to shankha banerjee from comment #13)
> Created attachment 237521 [details]
> Patch


Some comments:

1. I don't know if I am missing something, but is there a reason why the if/else is not part of the already present if/else block?
2. Please wrap the 'else {' to end line of if block, to make it consistent with all our code.
3. Add a space after the cast  - (int)
4. The code inside typeMismatchError() - I don't hit this with the examples given in comment #0. Is this necessary?
Created attachment 237540
Patch: https://bugs.eclipse.org/bugs/show_bug.cgi?id=391521#c14 (corrections)

(In reply to Jayaprakash Arthanareeswaran from comment #14)

> 1. I don't know if I am missing something, but is there a reason why the
> if/else is not part of the already present if/else block?

Please consider two examples:

a) Y[] y5 = (@Marker Y.Z) null;
b) Y[] y7 = (@Marker Y.Z[]) null;

Y.Z and Y.Z[] are of type QualifiedTypeReference but Y.Z[] is also of type 
ArrayQualifiedTypeReference. 

I would had to put my code in two places if I had placed it in the previous if
block.

> 2. Please wrap the 'else {' to end line of if block, to make it consistent
> with all our code.

Done.

+			sourceStart = end - ref.token.length + 1;
+	} else if (location instanceof QualifiedTypeReference) { 

> 3. Add a space after the cast  - (int)

Done

sourceStart = (int) (ref.sourcePositions[0] & 0x00000000FFFFFFFFL ) - ref.tokens[0].length + 1;

> 4. The code inside typeMismatchError() - I don't hit this with the examples
> given in comment #0. Is this necessary?

The code is not hit by the test cases. The reason is at line no

7705:	if (actualType != null && (actualType.tagBits & TagBits.HasMissingType) != 0)

We can have actualType to be null.

7714: if (expectingLocation != null && (expectedType.tagBits & TagBits.HasMissingType) != 0) { // improve secondary error

We can have expectingLocation  to be null.

At line 7727:

char[] actualShortReadableName = actualType.shortReadableName();
char[] expectedShortReadableName = expectedType.shortReadableName();

There is a possibility that actualType or expectedType is null and we 
still try to call the functions on them.
I have released the patch with a small change - I have omitted the null checks in typeMismatchError() as it's not relevant to this bug.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=f9abe0eae1be0e7103573798b92ccd764f2825ac


[1.8][compiler] Error highlighting is not accurate for type references with type annotations



Fix for bug 391521 - [1.8][compiler] Error highlighting is not accurate for type references with type annotations 