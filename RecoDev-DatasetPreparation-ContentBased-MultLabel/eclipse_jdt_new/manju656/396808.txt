Hover over the package import java.lang.*; code present in a java file. Make sure the package is present in multiple jars and the jars are included in the classpath of the current project. While hovering multiple links of "java.lang" are displayed in the hover window and all of them point to the same Javadoc content.

Duplicate link should not be displayed in the hover window if the Javadoc contents are the same.

Hover over the package import java.lang.*; code present in a java file. Make sure the package is present in multiple jars and the jars are included in the classpath of the current project. While hovering multiple links of "java.lang" are displayed in the hover window and all of them point to the same Javadoc content.

Duplicate link should not be displayed in the hover window if the Javadoc contents are the same.
Created attachment 225801
Proposed Fix

Initially proposed solution for removing duplicate links with identical Javadoc could not be implemented as we ran into problems when the Javadoc contained external links to be resolved. Though the content of the Javadoc was same, after resolving the links the relative path of the package Javadoc was different for each of the link.

The next best solution proposed was to show the multiple links along with the package fragment root from where the package is accessed. This way the user can decide which package Javadoc to view from a specific package fragment root.

java.lang - vm.jar
java.lang - jlm.jar
java.lang - resources.jar
java.lang - rt.jar

The current proposed patch is not complete as we are showing the complete path of the package fragment root and not just the name of the package fragment root.
(In reply to comment #1)
> Created attachment 225801 [details] [diff]
> Proposed Fix
> 
> Initially proposed solution for removing duplicate links with identical
> Javadoc could not be implemented as we ran into problems when the Javadoc
> contained external links to be resolved. Though the content of the Javadoc
> was same, after resolving the links the relative path of the package Javadoc
> was different for each of the link.
> 
> The next best solution proposed was to show the multiple links along with
> the package fragment root from where the package is accessed. This way the
> user can decide which package Javadoc to view from a specific package
> fragment root.
> 
> java.lang - vm.jar
> java.lang - jlm.jar
> java.lang - resources.jar
> java.lang - rt.jar
> 
> The current proposed patch is not complete as we are showing the complete
> path of the package fragment root and not just the name of the package
> fragment root.

As discussed this would be an acceptable approach. However, I thought about this a little longer and also discussed it quickly with Markus: except for the links, the doc is really the same (in the case of the IBM JRE they share the source and Javadoc attachment) and the user should not have to pick it manually. She won't be interested in the links in 99% of the cases.

So, if all the elements are package fragments with the same name, just iterate over them and take the first one which provides Javadoc and show it.
Agreed that the Javadoc would be same in the case of java.lang and similar packages.

There could be a scenario where there are two Java projects with identical package name. Classes from these two packages are used within a third project. When user hover over the package name, then we get two package fragments. In this case the package Javadoc would be different for each of these packages and hence we need to show the two separate links for each of the packages. Isn't this a valid scenario to show multiple links?
(In reply to comment #3)
> Agreed that the Javadoc would be same in the case of java.lang and similar
> packages.
> 
> There could be a scenario where there are two Java projects with identical
> package name. Classes from these two packages are used within a third
> project. When user hover over the package name, then we get two package
> fragments. In this case the package Javadoc would be different for each of
> these packages and hence we need to show the two separate links for each of
> the packages. Isn't this a valid scenario to show multiple links?

No, because package names are not random. "a.b" should mean the same everywhere and hence also have the same Javadoc. If it doesn't then it's a bug of the provider and we don't have to support this broken setup.
Created attachment 225887
Proposed Fix.

The fix returns the first package fragment with a valid Javadoc.
Comment on attachment 225887
Proposed Fix.

The patch has several issues:
- I have no clue why you use a map or even a collection  ;-)
- if none of the packages has Javadoc it will show a link for each again
- exception handling is wrong: if one package fails we should try the next one
  and only if all fail with an exception, report it.
- the exception is not shown to the user but only logged and then all links are
  shown again in the hover. It should be handled like the other cases.
- "getPackageFragmentWithValidJavadoc" is a wrong name since this method can also
  return other kinds of elements. Maybe "filterDuplicatePackages"?
- "if ( elements.length > 1)" has a superfluous space
Created attachment 225922
Proposed Fix.

In this fix,
1. reused the parameter array to return the package after removing duplicates.
2. iterate over the complete array to find a package with valid Javadoc, exception handling is modified.
3. If no package exists with a valid Javadoc, then returns the first package in the array. This way the user is informed about missing Javadoc using the existing framework.
4. renamed the method to filterDuplicatePackages.
5. removed the superfluous space.
(In reply to comment #7)
> Created attachment 225922 [details] [diff]
> Proposed Fix.
> 
> In this fix,
> 1. reused the parameter array to return the package after removing
> duplicates.
> 2. iterate over the complete array to find a package with valid Javadoc,
> exception handling is modified.
> 3. If no package exists with a valid Javadoc, then returns the first package
> in the array. This way the user is informed about missing Javadoc using the
> existing framework.
> 4. renamed the method to filterDuplicatePackages.
> 5. removed the superfluous space.

Thanks Manju, the patch works and is almost perfect ;-)

Remaining issues:
- we don't need to log the exception (ignore it as it might
  even be logged again later when trying to get the Javadoc
- use early exit in your code, e.g. return after those checks:
  - elements[0] instanceof IPackageFragment
  - content == null
  this makes the code easier to ready and less indented
- the Javadoc can get a bit more love, e.g.
  @param elements whose Javadoc has to be found
  does not really apply. I'd rather write:
  @param elements array from which to filter duplicate packages
Created attachment 225932
Proposed Fix.

In this fix

- exception thrown while filtering the packages is ignored.
- use early exit in your code, e.g. return after those checks:
  - elements[0] instanceof IPackageFragment - Done
  - content == null => here we do not exit, we need to continue and consider other     packages to retrieve a valid Javadoc
- updated the Javadoc for @param elements
(In reply to comment #9)
> Created attachment 225932 [details] [diff]
> Proposed Fix.
> 
> In this fix
> 
> - exception thrown while filtering the packages is ignored.
>   - content == null => here we do not exit, we need to continue and consider
> other     packages to retrieve a valid Javadoc

Yes, but what if content != null? ;-)
Created attachment 225935
Proposed Fix.

Result is returned when content != null.
(In reply to comment #11)
> Created attachment 225935 [details] [diff]
> Proposed Fix.
> 
> Result is returned when content != null.

Thanks Manju, this patch is good.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=b07362bebd05c4fa6e7038aae57472cef42ba346

Note that it's hard to test because one runs into NPEs depending on what pacakge is used (see bug 397455).
Markus reminded me that the filter method has a problem when there's only a package.html file in a package since that's not part of the children. Hence I removed the performance optimization that checks for children.


[hovering] Package hovering shows multiple hyperlinks if the package is present in multiple location in the build path.



Fixed bug 396808: [hovering] Package hovering shows multiple hyperlinks if the package is present in multiple location in the build path. 