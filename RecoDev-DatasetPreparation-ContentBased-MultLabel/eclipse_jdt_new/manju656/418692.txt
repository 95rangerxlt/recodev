Created attachment 236121
the semicolon makes the difference

The result of detecting so called 'additional occurences' depends on whether or not the selection includes the semicolon.

See Screenshot.

Created attachment 236121
the semicolon makes the difference

The result of detecting so called 'additional occurences' depends on whether or not the selection includes the semicolon.

See Screenshot.
Tested using Eclipse Version: 4.4.0 and Build: I20130916-0900. The issue is not reproducible. With the given sample code snippet, whether semicolon is included or not, i could see all the 3 occurrences of s.length() replaced after the refactoring. 

Closing the bug as it is not reproducible in the latest Eclipse build. Let us know the Eclipse build you have used for testing this scenario. We can open the bug if you are able to reproduce the bug in one of the latest Eclipse builds.
I observe the behavior of the screenshot with rcp-kepler-win32 and rcp-kepler-sr1-win32 as well as with standard-luna-M2-win32 (Version: Luna Release Build id: 20131003-0825)

I did the following to reproduce it with luna:
 * download http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/luna/M2/eclipse-standard-luna-M2-win32.zip
 * unpack the downloaded zip
 * doubleclick the unzipped eclipse/eclipse.exe
 * choose a new folder when prompted for workspace directory
 * paste the code snippet (see below) into package explorer
 * highlight the code 's.length();' within m1()  !include the semicolon!
 * open the refactoring dialog with shortcut <Alt>+<Shift>+M

>>>BEGIN snippet
package pck;

public class Foo {
    String s;
    int i;

    void m1() {
        s.length();
    }

    void m2() {
        s.length();
    }

    void m3() {
        if (i > 0) {
            s.length();
        }
    }
}
<<<END snippet

The extract-method-dialog informs one that only 1 additional occurence will be replaced.

 * choose 'x' as the method name
 * confirm the dialog

As a result of the refactoring the content is changed to:
>>>BEGIN refactored code
package pck;

public class Foo {
    String s;
    int i;

    void m1() {
        x();
    }

	private void x() {
		s.length();
	}

    void m2() {
        s.length();
    }

    void m3() {
        if (i > 0) {
            x();
        }
    }
}
<<<END refactored code
With the test data you have provided, the issue is now reproducible. In #m2() if there is an executable statement before s.length(); then it reports the right number of occurrences.
void m2() {
		System.out.println();
		s.length();
	}
Created attachment 236247
Proposed patch

Here is another variation of this bug using the snippet below:

class Test{
	public void foo1(){
		System.out.println("Hello world");
	}
	
	public void foo2(){
		//Select from here
		{
			System.out.println("Hello world");
		}
		//Select till here and execute extract method refactoring and name the new method x
	}
}

The resulting refactoring results in compilation failure

class Test{
	public void foo1()x();
	
	public void foo2(){
		//Select from here
		x();
		//Select till here and execute extract method refactoring
	}

	private void x() {
		{
			System.out.println("Hello world");
		}
	}
}

The proposed patch fixes both the scenarios, but it will break two tests in ExtractMethodTests test652() and test800(). It was not very clear as to what conditions were being tested/guarded by these tests. In my opinion its safe to remove these tests. 

If the patch looks fine and the failure of test652() and test800() is acceptable, then I can add tests for this change.

This contribution complies with http://www.eclipse.org/legal/CoO.php
With your patch SnippetFinder#isMethodBody() will return true only for the scenario mentioned in comment #5. Below scenario will fail.
public void foo1(){
		System.out.println("Hello world");
                System.err.println();
	}
	
	public void foo2(){
		//Select from here
		{
			System.out.println("Hello world");
                        System.err.println();
		}
		//Select till here and execute extract method refactoring and name the new method x
	}
}

Also it will leave garbage code and also a wrong Javadoc. I took your change, modified the code, modified the test, added a new test case and updated Javadoc and released the fix as: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=baf1e0ecfb36327ff5288cd2beec9ef03936d3b1
Comment on attachment 236247
Proposed patch

I meant comment #4 in my previous comment.
*** Bug 71575 has been marked as a duplicate of this bug. ***


[extract method] Does not replace duplicates that span the whole method body



Fixed Bug 418692: [extract method] Does not replace duplicate if it span the whole method body 

Fixed Bug 418692: [extract method] Does not replace duplicate if it span the whole method body 

Fixed Bug 418692: [extract method] Does not replace duplicate if it span the whole method body 