I'm using Eclipse 3.0 M8 trying to participate in refactoring for compilation 
units. I ran into what appears to be a bug, as follows:

In org.eclipse.ltk.core.refactoring.participants.ParticipantManager.java, in 
the function getRenameParticipants, it does a System.arraycopy from an array of 
RefactoringParticipants to an array of RenameParticipants. But 
RenameParticipant extends RefactoringParticipant, not the other way around, so 
it throws an ArrayStoreException. 

This occurs when I add a refactoring participant to ICompilationUnit and have 
isAvailable() return true.

    public static RenameParticipant[] getRenameParticipants
(RefactoringProcessor processor, Object element, String affectedNatures[], 
SharableParticipants shared)
        throws CoreException
    {
        RefactoringParticipant participants[] = 
fgRenameInstance.getParticipants2(processor, element, affectedNatures, shared);
        RenameParticipant result[] = new RenameParticipant[participants.length];
        System.arraycopy(participants, 0, result, 0, participants.length);
        return result;
    }

I'm using Eclipse 3.0 M8 trying to participate in refactoring for compilation 
units. I ran into what appears to be a bug, as follows:

In org.eclipse.ltk.core.refactoring.participants.ParticipantManager.java, in 
the function getRenameParticipants, it does a System.arraycopy from an array of 
RefactoringParticipants to an array of RenameParticipants. But 
RenameParticipant extends RefactoringParticipant, not the other way around, so 
it throws an ArrayStoreException. 

This occurs when I add a refactoring participant to ICompilationUnit and have 
isAvailable() return true.

    public static RenameParticipant[] getRenameParticipants
(RefactoringProcessor processor, Object element, String affectedNatures[], 
SharableParticipants shared)
        throws CoreException
    {
        RefactoringParticipant participants[] = 
fgRenameInstance.getParticipants2(processor, element, affectedNatures, shared);
        RenameParticipant result[] = new RenameParticipant[participants.length];
        System.arraycopy(participants, 0, result, 0, participants.length);
        return result;
    }
This can only happen if your rename participant doesn't extend the abstract 
class RenameParticipant as required by the extension point. How does the 
implementation of your rename participant look like ?
I couldn't find the documentation for this stuff, so I had inadvertantly 
extended RefactoringParticipant instead of RenameParticipant.  When I ran it 
with isAvailable() returning false, it worked fine (although it didn't do 
anything, obviously).  When I had isAvailable() return true, I got the 
ArrayStoreException, and it took me a while to track down what the actual 
problem was.  If it had thrown a ClassCastException or something, it would have 
been far easier to track down what the problem was.  Its not a high priority 
issue.
The latest build contains a schema file for all refactoring extension points. 
I also added a check that the participants implement the right class. If not 
the get disabled and a log entry will be generated.
Fixed for next I-Build.


Apparent bug in ParticipantManager.getRenameParticipants()

