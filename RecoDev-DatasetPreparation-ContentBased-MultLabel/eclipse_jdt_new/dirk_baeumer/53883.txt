Build id: 200312182000

Test case:

class C {
  private Object object;
  public Object getObject ()
  {
    return object;
  }
}
  
public class Bug {
  void test ()
  {
    C c = new C ();
    Object o = c.getObject ();
  }
}

Select either occurence of "getObject", run Refactor:Inline..., press OK.
The call gets replaced with a reference to the field "object" in class C
that is undefined in class Bug.

Build id: 200312182000

Test case:

class C {
  private Object object;
  public Object getObject ()
  {
    return object;
  }
}
  
public class Bug {
  void test ()
  {
    C c = new C ();
    Object o = c.getObject ();
  }
}

Select either occurence of "getObject", run Refactor:Inline..., press OK.
The call gets replaced with a reference to the field "object" in class C
that is undefined in class Bug.
Fixed for M9.
...
The problem occurs (as originally described) in 3.1M4 (200412162000)

Frank,

running the example produces the following code:

class C {
	private Object object;

	public Object getObject() {
		return object;
	}
}

public class Bug {
	void test() {
		C c= new C();
		Object o= c.object;
	}
}

The compile error that you see is due to the fact the object isn't visible in
Bug, not that it is a undefined field reference. 

We are debating if inline method should relax visibility in these cases or not.

Closing PR again since the original problem got fixed (e.g. producing object
instead of c.object).


inline refactoring inserts undefined field reference



[53883] 

[53883] 