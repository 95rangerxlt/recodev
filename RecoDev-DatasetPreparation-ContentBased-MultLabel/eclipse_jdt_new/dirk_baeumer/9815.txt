void f1(){
	String j= /*[*/"text"/*]*/;
}

it creates:

void f1(){
	String j= ss();
}
private void ss() {
	"text";
}

which does not compile

void f1(){
	String j= /*[*/"text"/*]*/;
}

it creates:

void f1(){
	String j= ss();
}
private void ss() {
	"text";
}

which does not compile
I disagree that the severity is major. this isn't a common scenario to run into.
I think he has overcomplicated it.  In the simple form, it may be more common. 
I ran into it today.  And I think any refactoring that generates code that
doesn't compile is a bad thing. Build: 20020214

void f1(){
	String j= "text";
}

it creates:

void f1(){
	String j= ss();
}
private void ss() {
	"text";
}
the /*[*/ /*]*/
braces were used only to show the selection
:)
so it's exactly the same test case
May be some clarification for /*[*/.../*]*/. We use this syntax in our test 
cases to denote the selection in a position independent way. That is the reason 
why we use it in PRs too.
Fixed in build > 20020307.


extract method: incorrect extraction of string literals (compile errors)



Fix for bug 398158 - Receiver qualifier can only be a simple name and not a qualified name 

3.3 maintenance - Fix for 197169, 198153 and 109636 

3.3 maintenance - Fix for 197169, 198153 and 109636 

HEAD - Fix for 198153 

HEAD - Fix for 198153 

HEAD - bug 98154 

89815 

verified Bug 159815 isRemote(...) test performed 5 times for each variable selection 

Bug 159815 isRemote(...) test performed 5 times for each variable selection 

Fixed - bug 200055:  [spell checking] BadLocationException thrown for newly created class - bug 198159: [clean up] Assertion failure when saving (A save participant caused problems.) 

Fixed - bug 200055:  [spell checking] BadLocationException thrown for newly created class - bug 198159: [clean up] Assertion failure when saving (A save participant caused problems.) 