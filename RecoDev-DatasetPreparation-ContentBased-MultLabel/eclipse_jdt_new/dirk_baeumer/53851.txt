Test case:

public class Bug {
  void test ()
  {
    new Object () {
      public void yes ()
      {
        System.out.println ("hello world");
      }
    };
    System.out.println ("hello world");
  }
}

Three (possibly related) problems:

1. Select the first print statement (whole line).
   Refactor:Extract Method..., enter some name and press OK,
   leaving "replace 1 duplicate code fragment" checked.
   The method is created inside the anonymous class but called from outside.

2. Select the second print statement (whole line).
   Refactor:Extract Method...
   The duplicate code fragment is not recognized.

3. Select only "println" in either print statement.
   Refactor:Extract Method..., enter some name and press OK.
   You get a strange error message:
   "Cannot determine expression's return type. Using void instead."
   Pressing Continue produces meaningless code.

Test case:

public class Bug {
  void test ()
  {
    new Object () {
      public void yes ()
      {
        System.out.println ("hello world");
      }
    };
    System.out.println ("hello world");
  }
}

Three (possibly related) problems:

1. Select the first print statement (whole line).
   Refactor:Extract Method..., enter some name and press OK,
   leaving "replace 1 duplicate code fragment" checked.
   The method is created inside the anonymous class but called from outside.

2. Select the second print statement (whole line).
   Refactor:Extract Method...
   The duplicate code fragment is not recognized.

3. Select only "println" in either print statement.
   Refactor:Extract Method..., enter some name and press OK.
   You get a strange error message:
   "Cannot determine expression's return type. Using void instead."
   Pressing Continue produces meaningless code.
Change algorithm so that only duplicate code fragments in the same type are 
found. Considering fragements outside would involve further inspection. This 
means:

1.) no dupilcate is detected
2.) a dupilcate is detected if the snippet doesn't represent the whole
    method body. This ensure that we don't generate method which simple
    forward to another generated method.
3.) is fixed.


1. and 3. are fixed.

For 2., I don't think it's a problem if the entire method body is replaced by
one method call. There are two cases: If the method implements or overrides a
method declared somewhere else, having it forward to the newly generated method
could actually be the intention; if it doesn't, you can easily resolve the
situation by inlining it. It seems unlikely that leaving the duplicate code
sitting there unchanged is what is desired.

And a new problem:

4. Select either copy of "out.println".
   Choose Refactor:Extract Method...
   The error message
   "Not all selected statements are enclosed by the same parent statement."
   is inappropriate.

Felix, please open separate bug reports for your new request 2.) and 4.). 


extract method in anonymous class introduces error [refactoring]



[53851] 