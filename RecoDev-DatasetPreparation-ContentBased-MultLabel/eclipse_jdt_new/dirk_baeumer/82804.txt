I noticed that the JarWriter will read the entire file it plans to store into
memory.
An optimization would be to stream the file directly into the JarOutputStream. 
The only catch is with STORED items which need the CRC32 computed.  A penalty
could be taken in that case to compute the CRC in a loop and then stream the file.

I noticed that the JarWriter will read the entire file it plans to store into
memory.
An optimization would be to stream the file directly into the JarOutputStream. 
The only catch is with STORED items which need the CRC32 computed.  A penalty
could be taken in that case to compute the CRC in a loop and then stream the file.
Created attachment 17152
Optimize memory usage

The patch will only use 4k per file rather than loading the file into memory.
When compression is disabled, the files are pre-processed to calculate the size
and crc.
Its a shame that the ui.ide archive routines couldn't be reused.
Daniel, any comments.
Dirk, this is correct: a buffer is used to read the file but it is then written
as a unit to the JAR.
Created attachment 17619
Merged with HEAD (02/01)
Michael,

thanks a lot for the patch. Unfortunatelly this breaks existing API. The write
method is protected and clients are allowed to subclass JarWriter. So we have to
preserve the method write(IPath path, IFile resource, long lastModified) somehow
(don't know if this is possible though).

Do you want to give it a try ?
Preserving the old API is a problem since it assumes the second parameter is the
entire contents of the resource.  The only way to preserve the old API is to
keep that entire implementation around.
Jeem, I need your opinion here. 

The current implementation reads the whole file content into memory instead of
doing it in chunks.

Changing this will break existing API which we put in to support some WSAD
clients. What we can do is adding the new method and making the old one final
since it won't be called anymore.
You should be able to achieve this by adding the new method. However, the old 
method cannot be marked final because that would break clients in the field 
that are defining subclasses as permitted by the API spec. The old method 
should instead can be marked as deprecated, with a comment explaining why it's 
advisable to use the new method.
Jeem, the problem is that clients can create subclasses and override the
existing method. If we change it and call the new method the old method won't be
called any longer hence clients are broken as well. That's why I suggested to
mark the method as final to signal this.

We can't emulate the old API without reading in the file into memory. So we
either fix this and break or we leave the current behaviour.
You need to leave the existing behavior in place for existing subclasses. 
However, you may be able to figure out a way to add the new behavior as well. 
Clients that override or call the new method are obviously new clients, and 
they can be told that they must not use a mix of old and new methods. Clients 
that override or call the old method can be considered old-style clients and 
should see the old story.
Jeem, if we have to keep the old method than there is no way that we can avoid
reading in the whole file into memory. That's the way how the API is speced
right now. 

So if I understand you correctly there is nothing we can do then.
Michael,

here is an idea how to avoid reading in the files in at least Eclipse itself.

- we add a flag in which API mode we are <=3.0 or >= 3.1
- we deprecate the constructor and the write method
- we add a new constrcutor that takes the API Level. Eclipse itseld calls the
  constructor with API Level >= 3.1
- depending on the API level we either call the old or the new API.

Do you have time to investigate into such a patch.
Rather than adding API mode flags to JarWriter, which make the API more 
complex, you should consider defining a JarWriter2 and deprecating JarWriter.
*** Bug 85771 has been marked as a duplicate of this bug. ***
So which path do you want me to go down?
What I could do is create a JarWriter2 which is driven by JarWriter in the cases
you describe.

One dumb way would be to see if one is using JarWriter directly or derived.  In
the derived case, the old API is used.

If we are going down a new JarWriter2 path, wouldn't we want to "get it right"
this time.  I wouldn't say that what I produced is the "right" path but one of
convenience.
+1 for comment 14.

Note: You also have to take care of JarPackageData.createJarWriter(Shell).
The two appraoches differ in the following way:

- if we create a JarWriter2 we have to remove all references inside Eclipse to
  JarWriter and use JarWriter2 instead. We deprecate JarWriter. Since we don't
  create a JarWriter via an extension point clients which subclasses JarWriter
  have to have a new somewhere and will still use their class which subclasses
  JarWriter. So there is no need to drive JarWriter2 through JarWriter. We 
  update all call sides.
  The downside of JarWriter2 is that we have to copy the code and basically have
  to maintain two version (at least for ciritcal bugs). Pro is that we could
  start a complete new implementation which has nothing in common with the old
  one.

- having the API flag basically follows the same approach. All the Eclipse code
  will call the API with version >=3.1. For compatibility we will leave the 
  current constructors in place which use API < 3.1.

If we know that "doing it the right way" is more than tweaking one method we
should follow the path of having a complete new JarWriter2. Michael, can you
provide code that demonstrates how you think the right way looks like ?
Created attachment 18223
New JarWriter2 implementation

This is close to something a bit better.  I was trying to make the APIs
somewhat consistent.  The only piece I don't like is passing the buffer to
calculateCrcAndSize.  One could just move it to an instance variable.

One thing I noticed is when compressed is disabled the MANIFEST.MF is
compressed.
*** Bug 87099 has been marked as a duplicate of this bug. ***
Micheal, thanks for the patch.

I have released it with some modifications:

- javadoc cleanup
- I made calculateCrcAndSize private and kept passing the buffer. So we are
  able to change this in the future if we want since it isn't API. The pro
  for passing the buffer is that we don't allocate it twice.


Jar creation should use less memory



[82804] Jar creation should use less memory 