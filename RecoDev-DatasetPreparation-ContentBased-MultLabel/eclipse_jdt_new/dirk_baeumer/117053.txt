Build: I20051115

1) Start with this code:

	void foo(int x) {
		if (x++ < 6)
			x++;
	}
	void bar() {
		int x = 2;
		if (x < 10)
			x++;
		else
			foo(x);
	}

2) After a refactor > inline of foo(), the result is:

	void bar() {
		int x = 2;
		if (x < 10)
			x++;
		else
			if (x++ < 6)
			x++;
	}


Note the inlined if statement is incorrectly indented (with default formatter
settings).

Build: I20051115

1) Start with this code:

	void foo(int x) {
		if (x++ < 6)
			x++;
	}
	void bar() {
		int x = 2;
		if (x < 10)
			x++;
		else
			foo(x);
	}

2) After a refactor > inline of foo(), the result is:

	void bar() {
		int x = 2;
		if (x < 10)
			x++;
		else
			if (x++ < 6)
			x++;
	}


Note the inlined if statement is incorrectly indented (with default formatter
settings).
Martin, I am moving this to you since the inline refactoring is using the AST
rewriter to perform the operation. Here is what is happening:

- the refactoring is creating a string place holder for the following string:
  "if (x++ < 6)\r\nx++;"
  The type of the string place holder is ASTNode.RETURN_STATEMENT.

- it the replaces the ExpressionStatement foo(); with the node return from the
  createStringPlaceHolder call.

Martin, please let me know if I am supposed to use a different place holder type
to get correct formatting here.

The AST rewriter has to take the string placeholder as is. It might increase the indentation if necessary but that would be the extra indentation for every line. The rewriter doesn't try to understand what the string consists of.
Fixed for RC1. 

Added test case InlineMethodTests#test_117053.


[ast rewriter] Incorrect indenting after inline method



[117053] [ast rewriter] Incorrect indenting after inline method 