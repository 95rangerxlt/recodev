AK (7/18/2001 4:45:27 PM)
	i stumbled across this when doing Reorder Parameters.

	consider the following text: m(m(1, 2),3) 
	lets's say you want to swap the parameters. so your desired output is: m(3, m(2, 1))

	you create 4 move entries in the change creator (first 'm' has position 1):
		. move(5, 1] -> 7 //moves the first parameter of the inner call
		. move[7, 1] -> 5 //moves the 2nd parameter of the inner call
		. move [3, 6] -> 10 //moves the first parameter of the outer call
		. move [10, 1] -> 3 //moves the 2nd parameter of the outer call

		this gets splitted into 4 replaces (will not give details here - see code of AbstractTextBufferChange)
	
		anyways,	the replaces are sorted backwards before execution.
		to cut the story short - you end up with: m(3, m(1, 2))
		
		the reason is: 	the moves are treated in the same way as replaces. they should not be, if they overlap.
		there should a hierarchy of moves - or another way to say: 'this move must be done before that move' 
		in the case above - the inner moves must be done before the outer ones.

		this is quite serious and i'm not sure how to nicely work around it.

DB (31.07.2001 15:12:06)
	The current change infrastructure doesn't support any kind of overlapping manipulation. So this is somehow
	by design. What you can do is to create two distinct text changes. The first changing m(1,2) to m(2,1) and a second
	one changing m(m(2,1), 3) to m(3, m(2,1)).

DB (08.08.2001 14:50:58)
	I opt to not fix this PR since creating two document changes fixes the problem, although it is not optimal from a speed
	point of view (the document gets read two times).

	May be with an improved IBuffer implementation (see 1GEJ61L) the speed trade off isn't a problem anymore.

AK (7/18/2001 4:45:27 PM)
	i stumbled across this when doing Reorder Parameters.

	consider the following text: m(m(1, 2),3) 
	lets's say you want to swap the parameters. so your desired output is: m(3, m(2, 1))

	you create 4 move entries in the change creator (first 'm' has position 1):
		. move(5, 1] -> 7 //moves the first parameter of the inner call
		. move[7, 1] -> 5 //moves the 2nd parameter of the inner call
		. move [3, 6] -> 10 //moves the first parameter of the outer call
		. move [10, 1] -> 3 //moves the 2nd parameter of the outer call

		this gets splitted into 4 replaces (will not give details here - see code of AbstractTextBufferChange)
	
		anyways,	the replaces are sorted backwards before execution.
		to cut the story short - you end up with: m(3, m(1, 2))
		
		the reason is: 	the moves are treated in the same way as replaces. they should not be, if they overlap.
		there should a hierarchy of moves - or another way to say: 'this move must be done before that move' 
		in the case above - the inner moves must be done before the outer ones.

		this is quite serious and i'm not sure how to nicely work around it.

DB (31.07.2001 15:12:06)
	The current change infrastructure doesn't support any kind of overlapping manipulation. So this is somehow
	by design. What you can do is to create two distinct text changes. The first changing m(1,2) to m(2,1) and a second
	one changing m(m(2,1), 3) to m(3, m(2,1)).

DB (08.08.2001 14:50:58)
	I opt to not fix this PR since creating two document changes fixes the problem, although it is not optimal from a speed
	point of view (the document gets read two times).

	May be with an improved IBuffer implementation (see 1GEJ61L) the speed trade off isn't a problem anymore.
PRODUCT VERSION:
	R0.9


The new code manipulation infrastructure allows swapping of text. To do so a 
special SwapTextEdit has to be implemented.
SwapTextEdit implemented


document change infrastructure - missing functionality (1GH2DWC)



Fixed Bug 405250 - [1.8][code assist] Annotations getting suggested at import statements 

Fix for bug 405225 - BatchCompiler throws NPE in Java 7 

Fix for bug 405225 - BatchCompiler throws NPE in Java 7 

Bug 404052: [formatter] NEXT_LINE_ON_WRAP not implemented for various formatter options 

3.7.1 Maintenance: Fix for 354052: [1.7] NPE in org.eclipse.jdt.internal.compiler.ClassFile.traverse(ClassFile.java:4507) 

3.7.1 Maintenance: Fix for 354052: [1.7] NPE in org.eclipse.jdt.internal.compiler.ClassFile.traverse(ClassFile.java:4507) 

Bugzilla Bug 140521 Implementations of Declaration#accept(DeclarationVisitor) must not call super.accept(visitor). 

44052 

44052 

Bug 34052 - CTRL-Z Not Recognized as EOF 

Bug 34052 - CTRL-Z Not Recognized as EOF 

Fix for bug 405270: [1.8][refactoring] Handling of receiver parameter during UI refactoring. Updated changes wrt AnnotatableType. 

Fix for bug 405270: [1.8][refactoring] Handling of receiver parameter during UI refactoring 

Fix for bug 405270: [1.8][refactoring] Handling of receiver parameter during UI refactoring 

UI for bug 404052: [formatter] NEXT_LINE_ON_WRAP not implemented for various formatter options 

Bug 304052: [preferences] Add new 'code formatter' options to disable formatting of line/block comments starting on first column 

264052 [templates] new SWT templates - ToolBar and ToolItem 

134052 Configure Deprication Fix action should be disabled for abstract method/non constant fields 

This commit was manufactured by cvs2svn to create tag 'v20040528_1200'. 

This commit was manufactured by cvs2svn to create tag 'v20040525_1600'. 

Build notes for I200405250800 

This commit was manufactured by cvs2svn to create tag 'v20040521_0800'. 

This commit was manufactured by cvs2svn to create tag 'v20040521_0010'. 

This commit was manufactured by cvs2svn to create tag 'v20040520_0010'. 

[4052] [3688] 