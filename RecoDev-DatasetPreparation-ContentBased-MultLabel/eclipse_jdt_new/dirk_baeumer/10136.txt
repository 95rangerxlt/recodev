As near as I can tell, unless the Outline view is open, all of the menu items on
the Refactor drop-down are disabled.  I don't use the Outline view.  I close it
get more editor real estate.  Refactoring should be divorced from this view.

As near as I can tell, unless the Outline view is open, all of the menu items on
the Refactor drop-down are disabled.  I don't use the Outline view.  I close it
get more editor real estate.  Refactoring should be divorced from this view.
fyi: some refactoring actions work also on multi-selection so you'll loose that 
functionality by using only the editor

the actions the global 'refactor' menu are enabled (if you have sth selection 
in the editor) - please provide more precise steps if you don't see them.
which build are you using?
do you see the global 'refactor' menu at all? (or were you referring to context 
menus?)




I tend to use the global refactor menu, but I think I've misunderstood the problem.

The problem is that it is not sufficient to simply place the caret on the symbol
name, the symbol name must be actually selected to get the refactoring options
enabled.  I've notice this to be true with other things (Open in Editor, Open in
Heirarchy, Search) seem to have the same behavior.  I think the bug should be
re-written to reflect this behavior.  And will do so.

Sorry for not understanding.
For accessability reasons having the care inside a symbol should be 
interpreted as the current szmbol. This should be supported by the JDT Core 
selection engine.

Once the JDT Core's selection engine provides this support we should adapt the 
OpenOn*, search, and refactoring actions. 

Jdt/Core support has been in since 20020212 (see bug 6064).
I remember there was an issue in the UI which explicitly disallowed empty 
selections to reach JdtCore. 

Are you saying you did remove the constraint in the UI and didn't see the 
selection work ?
We have temporarily the empty selection constraint but didn't get any results 
back. We will release the code into the integration build of 20020312.
There is still a protection in Jdt/Core which doesn't allow to call 
SelectionEngine with empty selection.
This bugs is fixed. See http://dev.eclipse.org/bugs/show_bug.cgi?id=11152.


Code resolve is now working properly on empty selections (resolving the 
identifier containing the caret). Open on Selection now works with empty 
selections.

The refactoring actions should be changed to allow emtpy selections.

Once refactoring is done we should do the same for the search actions.
the problem lies chiefly in StructuredSelectionProvider::asStructuredSelection
which returns an empty selection if 
FLAGS_DO_CODERESOLVE is set and textselection is of length 0
Has been fixed by Daniel Megert. 

Fixed for build > 20020321


Selecting a symbol name should be the same as have the caret on it

