HEAD

- Have these declarations:

class Generic<E> { }
class Ref {
    Generic<Integer> gi= new Generic<Integer>();
    Generic<Double> gd= new Generic<Double>();
}

- set caret into 'Generic' of 'Generic<Integer> gi'
-> Ctrl+H and Ctrl+Shift+G do a search for 'Generic<E>'
-> expected: they (offer to) search for 'Generic<Integer>'

HEAD

- Have these declarations:

class Generic<E> { }
class Ref {
    Generic<Integer> gi= new Generic<Integer>();
    Generic<Double> gd= new Generic<Double>();
}

- set caret into 'Generic' of 'Generic<Integer> gi'
-> Ctrl+H and Ctrl+Shift+G do a search for 'Generic<E>'
-> expected: they (offer to) search for 'Generic<Integer>'
I am working on presenting the right text. We can use binding keys here.
I fixed the user interface. However search for pack.Generic<Integer> in this
case from the dialog doesn't report any exact match. All matches are marked as
erasure matches.

Moving to JDT/Core.
The user interface will be in tomorrows I build.
Dirk, where does "pack" come from in "search for pack.Generic<Integer>"?

Trying with comment 0 sample find 2 exact and 2 erasures matches.

Trying with an additional package:
1)
pack/Generic.java
    package pack;
    public class Generic<E> {}

Ref.java:
    import pack.Generic;
    public class Ref {
        Generic<Integer> gi2= new Generic<Integer>();
        Generic<Double> gd2= new Generic<Double>();
        pack.Generic<Integer> gi3= new pack.Generic<Integer>();
        pack.Generic<Double> gd3= new pack.Generic<Double>();
    }
or 2)
pack/Generic.java
    package pack;
    public class Generic<E> {}

pack/Ref.java:
    package pack;
    public class Ref {
        Generic<Integer> gi2= new Generic<Integer>();
        Generic<Double> gd2= new Generic<Double>();
        pack.Generic<Integer> gi3= new pack.Generic<Integer>();
        pack.Generic<Double> gd3= new pack.Generic<Double>();
    }
find correct matches: 4 exact and 4 erasure in these 1) and 2) examples.

So, I do not see where the problem is. Could you describe your search a little
bit more precisely?
Thx
The class is located in package "pack".

I tested it with JDT/Core from last weeks integration build. What I did is the
following:

- create a project
- added a package pack
- added the above code
- put the cursor into Generic<Integer>
- Ctrl+H for search dialog. This initialized the field with pack.Generic<Integer>
- search for references to type

All matches were erasure matches.
I think there's something unclear in API...
All found matches are *always* erasure. When a match is exact, it has same
erasure than pattern. See new API Method isErasure() of SearchMatch:
/**
 * Returns whether match element only has same erasure than searched pattern or not.
 * Note that this is always true for both generic and non-generic element as soon
 * as the accuracy is accurate.
 * 
 * @return <code>true</code> if match element has same erasure
 * 				<code>false</code> otherwise
 * @since 3.1
 */

So, all matches (except inaccurate ones) are erasure. Distinction is now to know
whether a match is exact or not (@see API method isExact()).

If you use it, I'm sure you'll see that there are half of matches which are
exact exact and the other half are not...

=> Put back this bug in JDT/UI inbox to close as FIXED...
I've added a comment in Javadoc of SearchMatch isExact() and isEquivalent() methods
to precise that there are respectively also erasure+equivalent and erasure
matches...
Fixed.


Search for references to parameterized type takes generic type [search][5.0]



86815 (update javadocs) 

[86815] Search for references to parameterized type takes generic type [search][5.0] 