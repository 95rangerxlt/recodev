In user assistance documents, like help xhtml, the author can specify filters on elements so that they only show under certain conditions. Currently it's very simple but our clients ask for more flexibility, like AND/OR and custom-defined filters.

The XML expression language would be perfect for us since it already has all this. However, there is currently not enough API to tap into expressions support from outside plug-in manifests. The only way I see we can build an expression is by passing IConfigurationElements, but this interface is not meant to be implemented by clients and the runtime provides no way to create these that I can see. My only option is to duplicate all the parsing and evaluating code.

Can we expand the support to any XML format, not just plug-in manifests? You could simply add a new converter that takes DOM elements.

In user assistance documents, like help xhtml, the author can specify filters on elements so that they only show under certain conditions. Currently it's very simple but our clients ask for more flexibility, like AND/OR and custom-defined filters.

The XML expression language would be perfect for us since it already has all this. However, there is currently not enough API to tap into expressions support from outside plug-in manifests. The only way I see we can build an expression is by passing IConfigurationElements, but this interface is not meant to be implemented by clients and the runtime provides no way to create these that I can see. My only option is to duplicate all the parsing and evaluating code.

Can we expand the support to any XML format, not just plug-in manifests? You could simply add a new converter that takes DOM elements.
I agree that the core expression language may be of other uses than just specifying action enablement and availability.

From my point of view, it would be possible to provide API to use core expressions standalone.

Could you outline the detailed scenarios that would need to be supported?
The language itself is rich enough for pretty much everything we need. It's just a matter of being able to use the support outside plug-in manifests.

We would like to use it in every XML-based user assistance format, which includes:

- Help XHTML documents
- Help table of contents XML
- Help keyword index XML
- Welcome XHTML and XML
- Cheat sheet XML

Also for each of these formats we either have or hope to have content providers where you can plug-in code to generate the content rather than defining it statically as XML. We would like to allow it in both cases if possible.

Basically what we need is the ability to programmatically create Expressions from any source. I had suggested adding a converter for DOM elements because it would cover the common case of XML files parsed in to DOMs, and for the providers we can just create our own DOMs and pass them in.

Created attachment 53936
patch

Here's a patch for the new API and implementation. It extends the ExpressionConverter to also accept DOM elements in addition to configuration elements. I also updated the documentation, plug-in version and dependencies (for DOM API in JREs < 1.4).

Could you review and apply? thanks
Hi Dirk, would it be possible to look at this one soon? I was hoping to get my feature in for M4
Hi Curtis,

thanks a lot for the patch. The problem I see with it is that according to 

http://www.eclipse.org/eclipse/development/eclipse_project_plan_3_3.html

core.expression has to run on F1.0 which to my knowledge doesn't have any DOM API in it. Upgrading it to 1.4 will not be an option since I just downgraded it to F1.0 for 3.2.

So what can we do:

- define your own Element interface for which you are providing an adapter to
  dom elements
- define a public factory for the expression elements. Each factory method takes
  a list of necessary concrete arguments insted of reading them from a DOM 
  Element. Something like this:

  Expression ExpressionFactory#createIterateExpression(String opValue)
  CompositeExpression ExpressionFactory#createAndExpression()

  The only change would be is that CompositeExpression or some interface as
  to become API.

I am in favour of doing the factory. What do you think ?
Thanks for taking a look Dirk. The way it works for using DOM api in 1.0 is that you have to import the DOM api packages, and you have to supply another bundle that exports these (you have to supply the DOM implementation). This is how the core team suggests we do it, and it's how we do it in help.

Here it would be technically possible to use expressions without any DOM or SAX implementation, but I don't think there would be any value in it since it's an XML format. You wouldn't be able to get IConfigurationElements either without an XML parser. Any thoughts?
Curtis, thanks for clarifying this.

Question: what exactly is meant with "you have to supply another
bundle that exports these (you have to supply the DOM implementation)". Does "you" mean core.expression or the client who runs Eclipse in a F1.0 environment ?
I meant the client, whoever is packaging the tool or product. They have to ensure that there is a DOM implementation available. So whoever is shipping the tool or product with a 1.0 EE must also ship the bundle.

CC'ing DJ if more clarification is needed.
Any chance we can get this in time for M4?
Curtis, I have released the patch. 

What I would like to see are some test cases that read DOM XML structures. Something comparable to ExpressionTests#testReadXMLExpression
Created attachment 55052
expression tests + 1 bug fix

Thanks Dirk! Here is the test, along with a fix for one bug in EqualsExpression I found while running the test :-)

The test works by converting every available testParticipant expression using both IConfigurationElements and DOM Elements, then comparing the expressions to ensure that they're identical to each other.
Curtis, thanks a lot for the test case and the fix. 


[expressions] Expression support for any XML format

