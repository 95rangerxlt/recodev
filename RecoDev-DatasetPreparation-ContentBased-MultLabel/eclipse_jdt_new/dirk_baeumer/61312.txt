Build I20040506

The ltk.ui.refactoring plug-in depends on jdt.core. In order for 
ltk.ui.refactoring plug-in to serve its role as common language 
infrastructure, it must not depend on jdt.core.

The references are in these classes:
  org.eclipse.ltk.internal.ui.refactoring.ChangeElementContentProvider
  org.eclipse.ltk.internal.ui.refactoring.ChangeElementLabelProvider
  org.eclipse.ltk.internal.ui.refactoring.PseudoJavaChangeElement

Build I20040506

The ltk.ui.refactoring plug-in depends on jdt.core. In order for 
ltk.ui.refactoring plug-in to serve its role as common language 
infrastructure, it must not depend on jdt.core.

The references are in these classes:
  org.eclipse.ltk.internal.ui.refactoring.ChangeElementContentProvider
  org.eclipse.ltk.internal.ui.refactoring.ChangeElementLabelProvider
  org.eclipse.ltk.internal.ui.refactoring.PseudoJavaChangeElement
Jeem, you are right but we decided to have this reference due to the following 
reasons:

- for the preview refactoring needs some sort of generic navigator. Since it
  got canceled I didn't want to introduce API that might be conflicting
  with a future version. Furthermore designing such a API isn't an easy
  thing to do ;-).

- LTK ships inside the JDT-feature so the dependency doesn't cause any harm.
  The PMC decided to not but the feature into the platform anyway for 3.0.

- I carefully looked that I don't use any JDT/Core types in the API. So it
  is possible to remove this reference in the future without breaking any
  clients, which is planned for 3.1.

Jeem, do you see any strong reason why this isn't OK for 3.0.
If some client such as CDT expects to use the ltk framework for their 
language, they will be disappointed that they require all of the JDT plug-
ins.  That said, it is just a space and packaging issue because the references 
are internal and are not entrenched at the lkt API.

I suggest adding TODOs in the code to remove the dependencies on jdt.core, 
with a link to this PR.
Added the todo and removed one reference.
We decided for 3.1 to still leave the LTK code in the JDT feature. Since
decoupling requires additional API that is very similar to the API for a generic
Navigator (which Platform/UI will look at for 3.2) I will postpone this to 3.2.
I wish that we knew this prior to investing in a new refactoring feature for CDT. 
We cannot go forward with the dependency on JDT as it is right now. 
John, can you explain why.
CDT's contributions are used by > 10 different companies in their products.  
While it is not immediately clear to me which companies are planning on basing
their commercial offering upon this upcoming release (CDT 3.0 on Platform 3.1),
I do know that many of our partners do not include the JDT in their offering.  

CDT has become the collaboration point for different technical product offerings
based upon Eclipse, where some of our partners are more interested in providing
an assembly development environment as compared to C or Java.  Up to this point
we have not required a dependency on the JDT and in order to change this I would
need to reach consensus amongst the community. 

I'll look into our options wrt what the community wants.  Perhaps if there is
something that we can help out with regarding the work required to decouple the
ltk from the jdt ... if not, then if you have any other suggestions as to other
ways of going forward, I'd appreciate it. 
I see two different solutions to the problem:

- the correct one ;-): this means LTK/UI has to provide new API and extension
  points to allow structural content providers for content types and we move
  LTK into its own feature. I am really reluctent to add this API to LTK/UI 
  since it should be provided by Platform/UI (see general navigator). Otherwise 
  we do something we have to deprecate in 3.2. Furthermore adding a new feature
  is not trivial and should somehow be coordinated with the upcoming LDT 
  project.

- the hack: we decouple the LTK/UI from JDT/Core by using an adapter and the
  code will not become API. This will not allow CDT to provide its own
  structure provider for C/C++ files. And the plug-in will still stay in the JDT
  feature. 

Doing the hack should be ~1 day effort and I can look into it in M7 if this is
helpful for CDT. 
I'm fine with the hack so long as we make a public API next release.  
I'll leave the final say w/my friend from Wind River who is driving this feature
however ... :-)
At the end of the day, the LTK needs to be in the Platform Runtime binaries on
which an number of CDT members build their products. You will probably need to
create a feature for that anyway or move it into the platform feature.

It's clear if we are to be consumers of the LTK and you guys are to be suppliers
of a true LTK, we need to keep the communication channels open and make sure
everyone is being informed of what is needed/supplied. I also wouldn't wait for
the LTD project since their mandate doesn't seem to cover the needs of the CDT
and those building other languaged DTs based on the CDT, at least not any time soon.
OK. I have decoupled ltk.ui from jdt.core, however I am not providing public API
for 3.1 to plug-in structure creators. I still believe that this should be
coordinated with Platform/UI in 3.2 to not come up with two different approaches.

I will change the title to reflect this.
This will be available in M7 then?
The decoupled version of ltk.ui will already be in M6.
Thanks Dirk!

I see that these plugins are included in the JDT feature.  
Should these not be moved to the platform or to an LTK feature of sorts?
Opinions?
The CDT requirement is to be able to use these plugins without the JDT feature
being present. I guess that would imply that they need to be in the Platform builds.
I agree that LTK should best be hosted in its own feature. Moving it to Platform
is the right thing to do since Platform is language agnostic. However doing this
might not happend for 3.1.
I wanted to say "isn't the right thing to do"...
What do you recommend we do if we want to ship refactoring in the CDT that uses
the LTK?
Any more thought on this? We have a nice refactoring feature working but we
can't include it in the CDT feature until the LTK is available in the Platform
builds (or, heaven forbid, we clone the LTK)
We are investigating moving LTK into the platform feature.
Erich, can you please approve moving the LTK plug-ins into the platform feature ?
This was discussed in our last PMC call and we have agreed that the LTK should
become part of the platform feature. Jeem did we overlook anything?
Nothing that I can think of. When the plug-ins move into the platform, the 
javadoc and extension point generation scripts in the doc.isv plug-ins will 
need to be updated, along with the platform and jdt feature definitions, etc. 
Sonia should be able to help with some of this.

Also, the o.e.ltk.ui plug-in looks defunct (and it's not mentioned in any of 
the map files). For projects that are dead, please delete all the files in the 
CVS repository including the plugin.xml, and create a root file named 
something like defunct_project.txt. That alerts people (like me) who may load 
the project from CVS that it is no longer a going concern.
Thanks Jeem.

>Also, the o.e.ltk.ui plug-in looks defunct 
this plug-in will eventually re-appear, unfortunatly we couldn't reach closure
on some of the issues for 3.1. I'd like to keep in existance so that it can be
picked up after 3.1.
Taggingas M7 then.
I moved the ltk.* plug-ins from JDT feature into Platform feature.

Opened bug 93400 for the official API to provide structured content in the
preview tree pane.


Provide official API to create strucutrual content for text changes



[61312] Provide official API to create strucutrual content for text changes 

[61312] ltk.ui.refactoring should not depend on jdt.core 

[61312] 