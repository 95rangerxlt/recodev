Example:

public class X<T> {
	public X(T t) {
	}
}

class call {
	void foo() {
		X<String> x= new X<String>("Eclipse");
	}
}

- select  X in "new X<String>("Eclipse");
- introduce factory produces:

public class X<T> {
	public static X<String> createX<String>(String arg1){return new X<String>(arg1);}

	public X(T t) {
	}
}

class call {
	void foo() {
		X<String> x= X.createX < String > ("Eclipse");
	}
}

which doesn't compile.

Example:

public class X<T> {
	public X(T t) {
	}
}

class call {
	void foo() {
		X<String> x= new X<String>("Eclipse");
	}
}

- select  X in "new X<String>("Eclipse");
- introduce factory produces:

public class X<T> {
	public static X<String> createX<String>(String arg1){return new X<String>(arg1);}

	public X(T t) {
	}
}

class call {
	void foo() {
		X<String> x= X.createX < String > ("Eclipse");
	}
}

which doesn't compile.
It does the right thing if I select the constructor declaration.
Interesting. The method binding I got from the ClassInstanceCreation node at 
the call site was for an *instantiation* of the generic type, and so was 
already bound to the type parameter <String>. This even affected the value of 
IMethodBinding.getName(), which included the type parameter (hence the bogus 
syntax in the generated factory method).

The solution was to call IMethodBinding.getMethodDeclaration(), which retrieves 
the original (generic) method binding.

It's a two-line fix; I'll submit a micro-patch.
Created attachment 17804
Tiny patch to fix bug when ctor call site of instantiated generic type is selected

This patch is nominally against the integration build I2005-0202, but only has
the given fix (which should be easier to apply, given that you've released the
changes from the other patches already). You'll probably have to increase the
"fuzz factor" when you apply the patch, since the original line #'s will be off
by a fair amount.
Created attachment 17805
Additional unit test for when ctor call site of instantiated generic type is selected

This patch is nominally against the integration build I2005-0202, but only has
the given additional test (which should be easier to apply, given that you've
released the changes from the other patches already). You'll probably have to
increase the "fuzz factor" when you apply the patch, since the original line
#'s will be off by a fair amount.
Bob, thanks for the quick fix.


Introduce Factory: strange generation of source code



[84807] Introduce Factory: strange generation of source code 