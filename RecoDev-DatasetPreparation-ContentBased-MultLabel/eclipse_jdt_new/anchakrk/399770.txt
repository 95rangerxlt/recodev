BETA_JAVA8:

Per 9.6.3.8 FunctionalInterface [New]

The annotation type FunctionalInterface is used to indicate that an interface is meant to be a functional interface (9.8).

If an interface is annotated with the annotation @FunctionalInterface but is not, in fact, a functional interface, a compile-time error occurs.

This facilitates early detection of inappropriate method declarations appearing in or inherited by an interface that is meant to be functional.

Because some interfaces are functional incidentally, it is not necessary or desirable that all functional interfaces be annotated with the @FunctionalInterface annotation.

BETA_JAVA8:

Per 9.6.3.8 FunctionalInterface [New]

The annotation type FunctionalInterface is used to indicate that an interface is meant to be a functional interface (9.8).

If an interface is annotated with the annotation @FunctionalInterface but is not, in fact, a functional interface, a compile-time error occurs.

This facilitates early detection of inappropriate method declarations appearing in or inherited by an interface that is meant to be functional.

Because some interfaces are functional incidentally, it is not necessary or desirable that all functional interfaces be annotated with the @FunctionalInterface annotation.
Please follow up. Look at how @Deprecated or @Override annotations are
handled for example.
i.e start with understanding how org.eclipse.jdt.internal.compiler.lookup.TagBits.AnnotationDeprecated is
used and understand the related code.
*** Bug 400159 has been marked as a duplicate of this bug. ***
Created attachment 226978
Posting regression clean patch, including source code and testcases.

Hello,
Posting regression clean patch, including source code and testcases.
Thanks
Anirban
Review comments:

1. InterfaceNotFunctionalInterface: should be numbered 664 and not 665.
2. TypeDeclaration: Extract sourceType.getAnnotationTagBits() into a
local annotationTagBits and reuse them.
3. Suggest rename mustBeFunctionalInterfaceForType to notAFunctionalInterface
or mustBeFunctionalInterface
4. JAVA_LANG_FUNCTIONALINTERFACE should be JAVA_LANG_FUNCTIONAL_INTERFACE
5. Is the code:

public boolean isFunctionalInterface(Scope scope) {
	if(isInterface()) {
		MethodBinding pm = getSingleAbstractMethod(scope);
		return ((pm != null) && (pm.isValidBinding()));
	}
	return false;
}

better written as:

   MethodBinding method;
   return isInterface() && (method = getSingleAbstractMethod(scope)) != null &&
                               method.isValidBinding();

6. pm is not meaningful in context, usually we simply call them method.
7. extra paranthesis should be removed in the return statement.
8.ProblemReporter: Compiler errors required by the language cannot be suppressed. Only eclipse introduced optional errors can be. So there is
no need for the check:

int severity = computeSeverity(IProblem.InterfaceNotFunctionalInterface);
	if (severity == ProblemSeverities.Ignore) return;

9. Invalid '@FunctionalInterface' annotation; {0} is not a Functional Interface
is better worded as:
Invalid '@FunctionalInterface' annotation; {0} is not a functional interface
Created attachment 226991
Patch after accommodating the review comments

Patch after accommodating the review comments. Thx
Patch looks good. Fix and tests released via: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=97e97b88721b4de5a807118c9ff5efc5e22e05aa.

Thanks Anirban.

A few more points to note in future:

1. Ensure that all modified files have upto date copyright. I fixed the ones
that still said 2012. The easiest way to do this is to install the copyright
update plugin.

2. All modified files on BETA_JAVA8 branch must have the disclaimer in
the copyright that reads:

* This is an implementation of an early-draft specification developed under the Java
 * Community Process (JCP) and is made available for testing and evaluation purposes
 * only. The code is not compatible with any specification of the JCP.
 * 
I fixed a couple of files that were missing this.

3. We typically prefix a test with the bug link and bug title.


[1.8][compiler] Implement support for @FunctionalInterface



Bug 399770 - [1.8][compiler] Implement support for @FunctionalInterface 