master and BETA_JAVA8

ITypeBinding#getModifiers() misses the implicit "static" modifier for member interfaces of a class:

public class C {
	interface IC {} // implicitly static, see JLS7 8.5.1
}

(If you wonder about the reference to JLS7 8.5.1, then you may have an old version of JLS7 that contains a section 8.5.2 and a bogus 8.5.1 that said IC would be implicitly public -- that part has been removed again).

master and BETA_JAVA8

ITypeBinding#getModifiers() misses the implicit "static" modifier for member interfaces of a class:

public class C {
	interface IC {} // implicitly static, see JLS7 8.5.1
}

(If you wonder about the reference to JLS7 8.5.1, then you may have an old version of JLS7 that contains a section 8.5.2 and a bogus 8.5.1 that said IC would be implicitly public -- that part has been removed again).
Anirban, since you are working on the modifier problem to do with
default/abstract, you could take a look at this one too.
Created attachment 237158
Solution and testcase

Solution and testcase attached
The section 8.5.1 of JLS 7 states that :
A member interface is implicitly static (ยง9.1.1). It is permitted for the declaration of a member interface to redundantly specify the static modifier.

So, an interface, which is a member of another interface or class is automatically made static.
Thanks
(In reply to ANIRBAN CHAKRABORTY from comment #2)
I may be totally wrong, but I wonder why the "implicitly static" state is not set at same place as ยง9.5 is implemented, i.e. at the very end of org.eclipse.jdt.internal.compiler.lookup.ClassScope#checkAndSetModifiers().
(In reply to Markus Keller from comment #4)
> (In reply to ANIRBAN CHAKRABORTY from comment #2)
> I may be totally wrong, but I wonder why the "implicitly static" state is
> not set at same place as ยง9.5 is implemented, i.e. at the very end of
> org.eclipse.jdt.internal.compiler.lookup.ClassScope#checkAndSetModifiers().

Hello Markus,

Thanks for reviewing the patch.

The reasons I set the static bit in parser are:
(1) I wanted to set this as early as possible, so that any subsequent decisions taken on the basis of the static nature of this interface, as of today, or any future possible code, they come correct. And, anyway, certain decisions are being taken at that place in parser on the basis of the member nature of this interface; so I decided to put that there.
(2) That a member interface will be static is a very plain-vanilla inference, as per the JLS, devoid of any other conditionality. If I see the call-tree of the checkAndSetModifiers(), the callers of this method higher up in the tree are not always called unconditionally. This puts a conditionality constraint to something which is pretty much unconditional as per the JLS. The parser flow is a much more (if not fully) unconditional flow - one just cannot bypass the parser. So, I thought this might be an appropriate place.

Please let me know if You agree with this argument; I don't mind shifting the setting of static bit to the checkAndSetModifiers() if that is more appropriate.

Thanks
Anirban
(In reply to ANIRBAN CHAKRABORTY from comment #5)
Thanks for the explanations. I don't know the compiler code well enough to tell which place is the best. I just don't think it's good to handle two very similar paragraphs of the spec so far apart. Maybe the condition in checkAndSetModifiers() should also be moved into the Parser class then?
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c33f41f43558cbfed253266a4a366ce7c1f4e32c

I moved the code to ClassScope.checkAnd*() method - this is the right place
for this change - I don't see it being called only conditionally.

I raised a follow up bug (pre-existing)
https://bugs.eclipse.org/bugs/show_bug.cgi?id=421040
(In reply to Srikanth Sankaran from comment #7)

> I moved the code to ClassScope.checkAnd*() method - this is the right place
> for this change - I don't see it being called only conditionally.

This also allowed me to get rid of the changes made to three suites as part
of prior patch.

I don't think the new tests quite belong where they have been added, but I
let that slide.


ITypeBinding#getModifiers() misses implicit "static" for class member interface



Fixed Bug 419057 - ITypeBinding#getModifiers() misses implicit "static" for class member interface 

Fixed Bug 419057 - ITypeBinding#getModifiers() misses implicit "static" for class member interface 