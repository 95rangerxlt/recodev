Bug 391894 added support for type annotations Array creation nodes. This bug will be used to add the rewrite support for array creation with type annotations.

Bug 391894 added support for type annotations Array creation nodes. This bug will be used to add the rewrite support for array creation with type annotations.
Created attachment 227381
Unit test and WIP fix

Patch includes a test and non-functional fix. Continuing the work.
Created attachment 227431
Updated patch

A better patch, but still has flaws/bugs.
Created attachment 227872
Updated patch

An improved patch but still has problems for overlapping text edits - i.e when there are changes both to annotations and dimension expression. The overlapping children was pointed out by Markus in bug 391894, comment #4.

Markus, I can't find any precedence to this. Do you know if there is any and any usual way we handle things in such cases?
No, AFAIK, this is the only case where nodes are not properly nested. I don't have a silver bullet, and I don't know exactly what goes wrong here.

I also don't know if we have old tests that do something similar to what you want to do in the new test. There's ASTRewritingExpressionsTest#testArrayCreation(), but I don't know how much it really tests. There are very few places in JDT UI that deal with ArrayCreation nodes.

The general strategy I'd recommend is to traverse nodes from left to right in the document, no matter where they are in the AST. In a first step, I would also try to remove everything that deals with whitespace handling (especially about removing text). The potential for trouble in that area is quite high if we have to deal with improperly nested nodes.
Thanks for the tips, Markus. I found the problem to be elsewhere. The overlap was actually because I was allowing annotations being processed via TYPE_PROPERTY already, which shouldn't be allowed for an array creation node.
It would be better if we could avoid special processing of ArrayType nodes depending on whether they're in an ArrayCreation or not. But if that doesn't work or is too cumbersome, then we can also live with the special case.
Created attachment 227981
Patch for review

Final patch with regression tests.
(In reply to comment #7)
> Final patch with regression tests.

A note about the change in ASTConverter: The null check is required since the annotationsOnDimensions array contains null for dimensions without any annotations. I am not sure if that is the expected behavior.

For e.g. the following cases produce such result:

int [] i @Annot [][] = null;
int [][] = new int @Annot [] [];

Srikanth, can you confirm if the null element is as expected?
(In reply to comment #8)

> Srikanth, can you confirm if the null element is as expected?

Yes, there is no value in creating empty arrays when annotations are
not present. We could create static empty arrays and store those, but
the approach taken is the approach taken and I would leave it as is
unless there are some real issues.
(In reply to comment #9)
> Yes, there is no value in creating empty arrays when annotations are
> not present.

Thanks for confirming. The last patch covers this already.
I didn't review the patch in detail, but it looks good over all, and the tests also look good (except for the wrong comments //Get while statement block).

The fix in the ASTConverter came just in time (already wanted to file a bug;-).
Jay, please proceed to release. TIA.

Manoj, please review post release and raise bugs for any issues found.

Jay & Manoj, in future, for ASTrewrite work, please buddy up and always 
review each other's patch before requesting Markus for a final review - 
this will result in better utilization of an expert resource from outside 
the core project.
All tests pass and released in BETA_JAVA8.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=8c67d56825136ce0d7026162576ad6997e930bdc
The changes in ASTRewriteFlattener turned out to be bad. They caused about a dozen test failures in JDT UI tests (I think Manju found this first -- thanks).

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=ASTRewriteFlattener

Jay, please have another look at these changes. I actually went back to the code before comment 13 and added the annotation handling there.

Lesson learned: Green tests are not enough. We also need a test that actually runs the code. For ASTRewriteFlattener, that means a test needs to create AST nodes manually.


[1.8][ast rewrite] AST Rewrite support for Array creation nodes



Bug 400568: [1.8][ast rewrite] AST Rewrite support for Array creation nodes 

Fix for bug 400568 - [1.8][ast rewrite] AST Rewrite support for Array creation nodes 