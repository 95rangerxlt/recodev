BETA_JAVA8:

Interfaces can have default methods and static methods beginning Java 8.
We should stop tagging the AST as being malformed (see org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(TypeDeclaration, AbstractTypeDeclaration, boolean)) and add tests to verify that the construction
looks ok.

BETA_JAVA8:

Interfaces can have default methods and static methods beginning Java 8.
We should stop tagging the AST as being malformed (see org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(TypeDeclaration, AbstractTypeDeclaration, boolean)) and add tests to verify that the construction
looks ok.
Jay, please take a look
Created attachment 228477
Patch - WIP

Patch with test - a work in progress.

We probably need to create new modifier constants in org.eclipse.jdt.core.dom.Modifier for 'default'. This bug isn't necessarily blocked by that. But it would be nice to get this specific question answered: Are default methods to be declared explicitly with the 'default' keyword' or can it be inferred also by the presence of a body, lack of abstract and such?

Stephan, has this been finalized? Thanks for chipping in!
Another piece of information:

As of JDK 8 b76 looking at the disassembled code, 'default' keyword doesn't make it to the class file. The same case with ECJ as of now.
Markus,

Looks like the class file constants are not being redefined to include default as a modifier and the mere presence of a body for the interface method (in the absence of static modifier) signals a default method - what would you like to see here from a client side perspective on the DOM/AST side? On the compiler AST side we have a modifier bit that is JDT/Core specific that is outside of the 16 flag bits reserved for class file flags.
Created attachment 228492
Updated patch

Patch includes new Modifier constant for default. 

Documentation still need to be updated in a couple of places:

1. In the AST#newModifiers() where we specify the order of the modifiers is consistent with JLS recommendation.
2. Javadoc for Modifier specifies org.eclipse.jdt.core.Flags - the new modifier will need to make it to the Flags as well. I will raise a new defect for handling Java model side of things.
Does the AST for an interface with method body continue to get tagged as 
MALFORMED at JLS levels < 8 ? It doesn't look like it.
It seems you found the relevant information already, but let me confirm:


(In reply to comment #2)
> ... But it would be nice to get this specific question
> answered: Are default methods to be declared explicitly with the 'default'
> keyword' or can it be inferred also by the presence of a body, lack of
> abstract and such?

At source level default methods require the 'default' modifier.

(In reply to comment #3)
> Another piece of information:
> 
> As of JDK 8 b76 looking at the disassembled code, 'default' keyword doesn't
> make it to the class file. The same case with ECJ as of now.

A byte-code level flag bit for 'default' has not been defined.
So when reading a default method from byte-code, the modifier is indeed
inferred from the lack of 'abstract' (inside an interface).
Created attachment 228543
Updated patch

Added a new test for JLS4 level and reo-introduced the MALFORMED error for levels below JLS8.

Tests are still running and patch still has the documentation issues I mentioned earlier. Another point to note is that I am intentionally not marking the AST node as malformed when the interface method has both 'default' and 'static' as keywords even though they method would have a compilation error. I guess we don't have to transform every compilation error into a malformed AST, do we?
(In reply to comment #4 / comment #5)
I agree it makes sense to have Modifier.DEFAULT and Flags.AccDefaultFlag (the latter with proper warnings to avoid confusion with the existing AccDefault).

But I would use a different constant. If the access_flags in the class file format is ever changed to u4, then it will most likely use 0x10000 as the next value. Since our value will become API, I think it's safer to use 0x80000000.

And the Javadocs of Modifer, Flags and the new constants need to point out that these are not values from the VM spec.


(In reply to comment #8)
> I guess we don't have to transform every compilation
> error into a malformed AST, do we?

Correct. From the Javadoc of ASTNode.MALFORMED: "The standard parser (ASTParser) sets this flag on a node to indicate a syntax error detected in the vicinity."

We only set MALFORMED if the source is not completely representable in the AST.
Created attachment 228812
Updated patch

Updated the value for the new modifier constant and made the suggested changes to the documentation. For now, I have only added a a new flag to Flags. I will raise a new bug to cover the other aspects in the java model area, like adding isDefault() method, test etc.

Markus, when you said a different value for default, did you mean only the modifier constant or should we apply it all the way to ExtraCompilerModifiers#AccDefaultMethod? Thanks for clarifying.
(In reply to comment #10)

> Markus, when you said a different value for default, did you mean only the
> modifier constant or should we apply it all the way to
> ExtraCompilerModifiers#AccDefaultMethod? 

(jumping in) The latter is not API, but an constant internal to the compiler.
Jay, let me know when this is ready for review and I can review
it. For any rewrite work, please raise a separate bug. Thanks,
Srikanth, please review the last patch. I don't think this would require any ast rewrite work. In any case, I will add new tests via bug 403985 to ensure default methods are taken care of.
> ExtraCompilerModifiers#AccDefaultMethod?
Yes, I would also change this to ASTNode.Bit32, so that Flags#AccDefaultFlag gets the same value. It's always good to minimize surprises by using the same values internally and externally.

The Flags class also needs an isDefaultFlag(int) method. With a note in the Javadoc that this is not about default (package) access visibility.

Both Flags and Modifier class Javadocs still need something like
"(except for {@link #AccDefaultFlag/DEFAULT})".

BTW: When looking at ExtraCompilerModifiers, I also saw AccJustFlag. It's not used in many places, but the usage in SourceElementNotifier#notifySourceElementRequestor(AbstractMethodDeclaration, ..)
looks like it strips off the "default" flag.
(In reply to comment #10)
> I will raise a new bug to cover the other aspects in the java model
> area, like adding isDefault() method, test etc.

(In reply to comment #13)
> The Flags class also needs an isDefaultFlag(int) method. With a note in the
> Javadoc that this is not about default (package) access visibility.


That's why I used names like AccDefaultMethod and 
MethodBinding.isDefaultMethod()

I assume we *don't* want to rename all existing isDefault() to isPackage()
right?


(In reply to comment #13)
> > ExtraCompilerModifiers#AccDefaultMethod?
> Yes, I would also change this to ASTNode.Bit32, so that Flags#AccDefaultFlag
> gets the same value. It's always good to minimize surprises by using the
> same values internally and externally.

I probably missed some discussion: what's wrong with Bit17?


(In reply to comment #13)
> BTW: When looking at ExtraCompilerModifiers, I also saw AccJustFlag. It's
> not used in many places, but the usage in
> SourceElementNotifier#notifySourceElementRequestor(AbstractMethodDeclaration,
> ..)
> looks like it strips off the "default" flag.

Mh, I'm not sure if the documentation of AccJustFlag is still appropriate.
It indicates that this mask is used to filter those bits that are also
represented in the class file. AccDefaultMethod is not one of them.
OTOH I see the mask used as capturing all those flags that are relevant
by the SPEC and should thus be considered during various checks and
conversions. If the latter is what we want the mask to mean then, yes,
AccDefaultMethod should be included.
> That's why I used names like AccDefaultMethod and 
> MethodBinding.isDefaultMethod()

I missed that, and I like the "DefaultMethod" term. I.e. use Flags#AccDefaultMethod and Flags#isDefaultMethod(int). In Modifier, I would keep "default", since this is more about the keyword, and since "default" is not yet used there.

> I assume we *don't* want to rename all existing isDefault() to isPackage()
> right?

I only found these 3, which are all internal, and only the first one has references:
org.eclipse.jdt.internal.compiler.lookup.MethodBinding.isDefault()
org.eclipse.jdt.internal.compiler.lookup.FieldBinding.isDefault()
org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isDefault()

I'm not against renaming these (but they can also stay).

> I probably missed some discussion: what's wrong with Bit17?

See comment 9, paragraph 2. Not a real issue right now, but I'd like to be careful, and I don't think Bit32 is any worse than Bit17. But since my argumentation is also just guesswork, I could also live with Bit17 if anyone sees reasons for using that one.
(In reply to comment #15)

> > I probably missed some discussion: what's wrong with Bit17?
> 
> See comment 9, paragraph 2. Not a real issue right now, but I'd like to be
> careful, and I don't think Bit32 is any worse than Bit17. But since my
> argumentation is also just guesswork, I could also live with Bit17 if anyone
> sees reasons for using that one.

It is difficult to make predictions especially about the future, but I would
venture that if a 2 byte bit vector runs out of bits, the logical approach
would be to define additional storage, not to widen the original storage.
This line of thinking does not change anything in the present discourse.
(In reply to comment #16)
> It is difficult to make predictions especially about the future, but I would
> venture that if a 2 byte bit vector runs out of bits, the logical approach
> would be to define additional storage, not to widen the original storage.
> This line of thinking does not change anything in the present discourse.

If my understanding is correct, we want to continue to use Bit17, don't we?

Srikanth, do you have any additional review comments? Or would you prefer a new patch with the changes we have discussed so far?
Created attachment 228981
Updated patch

Patch with Markus's review comments (javadoc updates). Also went back to the Bit17 for default flag.
Suggest rename Flags.AccDefaultFlag to be AccDefaultMethod. I don't have a 
firm opinion about the bit used. Since Markus's last comment indicates he is
OK with the present choice, let us go with it. This can be revisited later before
the release if needed. Please remember to update all javadoc references also.
Thanks.
Released with the change mentioned above:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=29530aea390a72e4225d01267051bcdef2bb5cd8
Quite a few of the discussed changes were missing in BETA_JAVA8.

Fixed that, cleaned up Javadocs, and also acknowledged that Flags#AccDeprecated doesn't use a JVMS-defined value.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=ac894da9b0ea3c039ce6982330527517abe54897


[1.8][dom ast] AST APIs should support code carrying interfaces (static & default methods)



Bug 399791: [1.8][dom ast] AST APIs should support code carrying interfaces (static & default methods) 

Fix for bug 399791 - [1.8][dom ast] AST APIs should support code carrying interfaces (static & default methods) 