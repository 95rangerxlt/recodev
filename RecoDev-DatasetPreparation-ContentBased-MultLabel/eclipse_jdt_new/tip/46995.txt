20031119

1. create a selfhosting eclipse workspace that has all plugins as binary except 
jdt.core from HEAD.
2. open CompilationUnitSorter, and select the third parameter from 
method 'sort'. (Comparator comparator)
3. Invoke 'Generalize Type'. It takes a very long time.
4. The given interface does not contain a super interface.

20031119

1. create a selfhosting eclipse workspace that has all plugins as binary except 
jdt.core from HEAD.
2. open CompilationUnitSorter, and select the third parameter from 
method 'sort'. (Comparator comparator)
3. Invoke 'Generalize Type'. It takes a very long time.
4. The given interface does not contain a super interface.
All interfaces "extend" Object so Object is a valid replacement. But the 
dialog showing the hierarchy doesn't show Object at all. So either the dialog 
should contain Object or we shouldn't spend a long time finding this out.

The more general question is how useful it is to exchange a type with Object.
I will investigate this performance problem, and why Object is not shown
in the type hierarchy.

I think that replacing interface types with Object can be useful in certain
cases.

  -Frank
Object is now part of the type hierarchy. The performance got improved for M6 
as well. Not showing Object seems indeed inconsistent since it is a valid 
super type.

Fixed for M6.


Generalize Type: Long calculation on an interface with no super [refactoring]



[46933, 46981, 46983, 46995, 47211, 47212, 47405, 47130, 46993] 