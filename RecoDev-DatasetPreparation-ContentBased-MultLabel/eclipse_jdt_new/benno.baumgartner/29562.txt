I'd like to see an intelligent right-click menu item that replaces the 
intuitive and easy typed '+' concatenation by the more politically correct 
StringBuffer.append or the MessageFormat way, 2 examples:

1.

"today="+vDate+" and we've processed "+vNumMsgs+" messages."
becomes
Object[] vObjects = new Object[] {vDate, new Integer(i)};
MessageFormat.format("today {0} and we've processed {1} messages.", vObjects);

Maybe even something more intelligent, that changes it and puts the message in 
a properties file.

2.
"XYZ"+MY_NEW_LINE
becomes
StringBuffer vStringBuffer = new StringBuffer();
vStringBuffer.append("XYZ").append(MY_NEW_LINE);

I'd like to see an intelligent right-click menu item that replaces the 
intuitive and easy typed '+' concatenation by the more politically correct 
StringBuffer.append or the MessageFormat way, 2 examples:

1.

"today="+vDate+" and we've processed "+vNumMsgs+" messages."
becomes
Object[] vObjects = new Object[] {vDate, new Integer(i)};
MessageFormat.format("today {0} and we've processed {1} messages.", vObjects);

Maybe even something more intelligent, that changes it and puts the message in 
a properties file.

2.
"XYZ"+MY_NEW_LINE
becomes
StringBuffer vStringBuffer = new StringBuffer();
vStringBuffer.append("XYZ").append(MY_NEW_LINE);
Martin,

wouldn't this be a good candidate for a
1. compiler warning (inperformant use of +)
2. quick fix

could offer a quick assist
Created attachment 91746
fix

Martin, another unfriendly takeover from me;-)
fixed > I20080304-1113

'java.text.MessageFormat' is used, that's hard coded.

For 1.4 and less converting concatenations with primitive types is not supported, for 1.5 and higher autoboxing is used.

For StringBuffer/StringBuilder see bug 36350
Cool! Thanks! 
For primitive types, a simple fix would be to warp them in String.valueOf(x).
The best fix would be to wrap them in the corresponding type
int x > new Integer(x)
Created attachment 91764
fix

(In reply to comment #6)
> For primitive types, a simple fix would be to warp them in String.valueOf(x).
> The best fix would be to wrap them in the corresponding type
> int x > new Integer(x)

Yes, good thinking! Using String.valueOf. I would rather introduce a new quick assist for boxing.
Note that using 'new Integer(num)' or autoboxing is different from 'String.valueOf(num)'.

E.g. for
    "Hello " + 1000
with a de_CH locale, the former form is formatted into
    Hello 1'000
while the latter results in
    Hello 1000

Since the former form is usually what the user should use (and what he gets with >=1.5), the fallback for earlier Java versions should also use explicit boxing instead of String.valueOf(..).
(In reply to comment #8)
> Note that using 'new Integer(num)' or autoboxing is different from
> 'String.valueOf(num)'.
> 
> E.g. for
>     "Hello " + 1000
> with a de_CH locale, the former form is formatted into
>     Hello 1'000
> while the latter results in
>     Hello 1000
> 
> Since the former form is usually what the user should use (and what he gets
> with >=1.5), the fallback for earlier Java versions should also use explicit
> boxing instead of String.valueOf(..).

Ok, in this case I have to remove the support for 1.4 for primitive types.

Filed bug 222264 for the enhancement request.
Created attachment 92202
fix - remove String#valueOf
(In reply to comment #10)
> Created an attachment (id=92202) [details]
> fix - remove String#valueOf
> 

released > N20080310-0100


[quick fix] replace " "+" "+vDate+" "+5+" " by a MessageFormat



Committed Deepak's patch to fix bug 295629: [spell checking] Dictionary remains in memory after spell checking is turned off 

29562 [quick fix] replace " "+" "+vDate+" "+5+" " by a MessageFormat - remove String#valueOf 

29562 [quick fix] replace " "+" "+vDate+" "+5+" " by a MessageFormat - String#valueOf for primitive types 

29562 [quick fix] replace " "+" "+vDate+" "+5+" " by a MessageFormat 