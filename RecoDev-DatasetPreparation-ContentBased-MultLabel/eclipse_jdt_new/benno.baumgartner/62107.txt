With browser widget enabled JavaDoc view became quite convenient. However it is
annoying when it is jumping when selected context is changed.

Please add an option to pin current JavaDoc view. 

If time permits, it will be great to remember previous pinned JavaDocs and show
them in a dropdown similar to the one used for Console view or even better in a
tabs.

With browser widget enabled JavaDoc view became quite convenient. However it is
annoying when it is jumping when selected context is changed.

Please add an option to pin current JavaDoc view. 

If time permits, it will be great to remember previous pinned JavaDocs and show
them in a dropdown similar to the one used for Console view or even better in a
tabs.
Any chance to get this feature implemented in 3.1 release?
The plan is currently under development. Javadoc view improvement is most likely
part of it.
I not sure what is the scoope for this bug, but would like to add few more
suggestions. First of all it would be nice to have "Link With Editor" settings
for JavaDoc view

Another feature would be to allow to navigate back and forth trough the history.
Since this view is using reach html component (IE or Mozilla) it should be easy
to implement.
*** Bug 108827 has been marked as a duplicate of this bug. ***
I'm not sure if this is clear or not, but on a "duplicate" bug, I wanted to say 
that what I want much of the time is to simply browse the JavaDoc the way I 
would if I were looking at it in a browser, and the fact that you don't even 
have that option makes it unusable for me much of the time.
Ah, ok you'd like to see the Javadoc for the whole CU. You can use Shift+F2.
We will add "Link With Editor" but no pinning.
Daniel, can you please clarify how link with editor will work? If I disable "link with editor", will content of the JavaDoc view stick like it was pinned?
>Daniel, can you please clarify how link with editor will work? If I disable
>"link with editor", will content of the JavaDoc view stick like it was pinned?
Yes, like it behaves like in all other views: they stop tracking the editor input.  The difference to pinning is that it won't open a second view automatically.
(In reply to comment #9)
> Yes, like it behaves like in all other views: they stop tracking the editor
> input.  The difference to pinning is that it won't open a second view
> automatically.

Great! That is exactly what I've been looking for. Maybe we could add pinnig later...
(In reply to comment #10)
> Great! That is exactly what I've been looking for. Maybe we could add pinnig
> later...

Mmm, I though about this, maybe instead of pinning we can add an 'Open in external Browser' action. You could then use your favorite browser to 'pin' the view. And you would get all the goodies a browser can offer (i.e. bookmarks).

How does that sound?


>'Open in external Browser'
Almost ;-) The action should use whatever Web Browser is configured in the workbench.
(In reply to comment #11)
> How does that sound?

Ok, I thought about it some more, and it sound not that good. This of course
could only work if javadoc is attached as an URL, but not if it is retrieved
from source or an archive.
You could ask the UI team to implement IWebBrowser.setText(String). If the Browser widget is used they can simply forward the call otherwise they have to write the contents to a temp file and forward the URL to that file. But this is off topic for this bug.
> You could ask the UI team to implement IWebBrowser.setText(String).

That would not help much: Links inside the Javadoc would still not work, since we don't have a protocol handler for our special Java element links. And if we had such a handler / web server, we could also show the initial document through that protocol.
Created attachment 90983
fix
Patch adds an toolbar toggle button to enabled/disable linking with selection. I hope this helps.
fixed > I20080226-1155
(In reply to comment #15)
> That would not help much: Links inside the Javadoc would still not work, since
> we don't have a protocol handler for our special Java element links. And if we
> had such a handler / web server, we could also show the initial document through
> that protocol.

Custom protocol is not the only way to handle links in the web browser. You can for example listen to events and handle the document loading in the listener.
AFAIK this only work when the browser widget is used and not when e.g. the external IE is used to open the URL. If not, what API do you refer to?
(In reply to comment #20)
> AFAIK this only work when the browser widget is used and not when e.g. the
> external IE is used to open the URL. If not, what API do you refer to?

Daniel, you would know better then me. :-)
Yes, custom listener would only work with browser widget or internal browser, but not with the external browser. After thinking a bit more about that, maybe a better solution is to hook a custom content produced to the Eclipse Help system, then you can just point browser to that handler. Though I am not sure if org.eclipse.help.contentProducer can be used such way.
See bug 220908.


[misc] Add option to disable link with selection in Javadoc view



62107 [misc] Add option to disable link with selection in Javadoc view 