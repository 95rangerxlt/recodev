I20060221-1300

Given:
int i= 1, j= i + 1, h= j + 1;
Serializable ser= new Serializable() {
    void foo() {
        System.out.println(j);
    }
};

Then make j final with quick fix 'Change modifier of 'j' to final'

Result:
int i= 1, h= j + 1;
final int j= i + 1;
Serializable ser= new Serializable() {
    void foo() {
        System.out.println(j);
    }
};

Expected:
int i= 1;
final int j= i + 1;
int h= j + 1;
Serializable ser= new Serializable() {
    void foo() {
        System.out.println(j);
    }
};

The order of the declarations must be preserved.

I20060221-1300

Given:
int i= 1, j= i + 1, h= j + 1;
Serializable ser= new Serializable() {
    void foo() {
        System.out.println(j);
    }
};

Then make j final with quick fix 'Change modifier of 'j' to final'

Result:
int i= 1, h= j + 1;
final int j= i + 1;
Serializable ser= new Serializable() {
    void foo() {
        System.out.println(j);
    }
};

Expected:
int i= 1;
final int j= i + 1;
int h= j + 1;
Serializable ser= new Serializable() {
    void foo() {
        System.out.println(j);
    }
};

The order of the declarations must be preserved.
we should always split up the variable fragments if they are initialized with a non-constant expression (-> IVariableBinding.getConstantValue != null)

everything else can have side effects
fixed > I20060221-1300

Also fixed:
    final List<String> a= null, x= a, y= a;
    public void foo() {
        x= new ArrayList<String>();
    }

Remove final for 'x'
Is:
    final List<String> a= null, y= a;
    List<String> x= a;
    public void foo() {
        x= new ArrayList<String>();
    }

Should:
    final List<String> a= null;
    List<String> x= a;
    final List<String> y= a;
    public void foo() {
        x= new ArrayList<String>();
    }


[quick fix] 'Change modifier to final' changes order of variable decl fragments



129165 [quick fix] 'Change modifier to final' changes order of variable decl fragments 