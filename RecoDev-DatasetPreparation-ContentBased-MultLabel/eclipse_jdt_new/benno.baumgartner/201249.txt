N20070827-0010.

I tested some of the SWT templates and it seems that often no all method argument locations are link targets. Look at the Button template for example:

    Button button = new Button(parent, SWT.PUSH);
    button.setLayoutData(new GridData(SWT.LEAD, SWT.TOP, false, false));
    button.setText(<!!! no link target !!!>);
    <end position>/caret

==> after all arguments are entered by the user he has to go manually up to setText and set/type the argument to get rid of the compiler error.

N20070827-0010.

I tested some of the SWT templates and it seems that often no all method argument locations are link targets. Look at the Button template for example:

    Button button = new Button(parent, SWT.PUSH);
    button.setLayoutData(new GridData(SWT.LEAD, SWT.TOP, false, false));
    button.setText(<!!! no link target !!!>);
    <end position>/caret

==> after all arguments are entered by the user he has to go manually up to setText and set/type the argument to get rid of the compiler error.
The template is:

button.setText(${word_selection});
${cursor}

So the idea is to select a string/string variable and then invoke to template, the string will then end up in setText. But I too almost always forget to select the string first... 

We can:
1. change to
button.setText(${word_selection}${cursor});

2. change to
button.setText(${text:link});
${cursor}

3. change to (requires none trivial enhancement)
button.setText(${text:link(word_selection)});
${cursor}

4. keep as is

I opt for 2 because this is what you've expected to happen.
Mmm, or maybe that's all wrong. The sysout template is

System.out.println(${word_selection}${});${cursor}

IMHO we should always put the word_selection into linked mode. Then we can change the sysout template to

System.out.println(${word_selection});${cursor}

and keep the SWT templates as is.
Created attachment 77124
proposed fix
Sounds good but you need to check whether this affects the default templates in an already existing workspace.
(In reply to comment #4)
> Sounds good but you need to check whether this affects the default templates in
> an already existing workspace.
> 

If a user did not change a default template then the default template is loaded from the xml. This means that existing workspaces will pick up the new templates, unless the user changed them. Which is a reasonable behavior.
Comment on attachment 77124
proposed fix

Found a problem while playing with this: it gets confusing if the selected word corresponds to an identifier where people expect that linked mode updates all occurrences.

We need to find another fix for this bug.
(In reply to comment #6)
> (From update of attachment 77124 [details])
> Found a problem while playing with this: it gets confusing if the selected word
> corresponds to an identifier where people expect that linked mode updates all
> occurrences.
> 
> We need to find another fix for this bug.
> 

Damn, good point. Well, the solution would be to update all occurrences. But this would only work for java, and only if we had a context which allows to find all occurrences of the identifier... Not good.

So we should at least be consistent and change the SWT templates to to existing style:

button.setText(${word_selection}${});
${cursor}

?
Yes.
Created attachment 77441
fix

change SWT templates
fixed > I20070828-0800


[templates] SWT templates don't go/link to setter



Bug 201249 [templates] SWT templates don't go/link to setter 