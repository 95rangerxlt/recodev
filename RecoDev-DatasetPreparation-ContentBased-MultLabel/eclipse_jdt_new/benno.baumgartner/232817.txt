I20080516-1333

Given:
package test;
public class E01 {
	public int i;
}
1. select int
2. Change to Runnable
3. Save
Is:
 Most of the time (more then 50%) the breadcrumb does not reflect correctly the model change, it either still shows 'int' or something like 'Ru' as field type.

I can only reproduce this on the Vista machine, but I don't believe that this is a platform problem. Maybe it's just that the vista machine is very slow.

I20080516-1333

Given:
package test;
public class E01 {
	public int i;
}
1. select int
2. Change to Runnable
3. Save
Is:
 Most of the time (more then 50%) the breadcrumb does not reflect correctly the model change, it either still shows 'int' or something like 'Ru' as field type.

I can only reproduce this on the Vista machine, but I don't believe that this is a platform problem. Maybe it's just that the vista machine is very slow.
Please investigate for RC2.
Created attachment 101476
fix

This is a timing issue: Depending on when the async runnable is executed in JavaEditorBreadcrumb.ElementChangeListener.elementChanged(ElementChangedEvent) the new input is equals the old input in BreadcrumbViewer.inputChanged(Object, Object). If the new input is equals to the old one then BreadcrumbItem#setData does not refresh the items labels. Fix is that setData does always refresh the item.
Dani, can you please review?
Sorry, not good, results in flickering image decorations.
Created attachment 101491
fix

Ok, only refresh the label when the elements label has changed or it is not equals the old one. We can add this check because we do not decorate labels of breadcrumb items. We also really should listen to reconcile changes.

I know that the correct fix would certainly include something like: "Do not set the viewers input on element change!" But I just don't want to change that in RC2.
Dani, can you please review?
Patch is good, put please also test on Linux.
Martin, please review.

Looking good on gtk.
+ 1, but we should review that code in RC3
fixed > I20080521-2000

(In reply to comment #9)
> + 1, but we should review that code in RC3

bug 233510 


Sorry Benno, I had to revert this: on Linux this causes extreme flashing/updating.
(In reply to comment #11)
> Sorry Benno, I had to revert this: on Linux this causes extreme
> flashing/updating.
> 

:-( I've tested that on linux and it was ok. But anyway, let us try to find the correct solution to the problem next week. I think we are not that far away from it anyway.


*** This bug has been marked as a duplicate of bug 233510 ***
Let's try to find a small fix which actual works.
Created attachment 102355
fix

Tested on XP, Vista, GTK, OSX

This is a minimal fix, let me explain! There are 3 parts in this patch:

1. Remove refresh in BreadcrumbItem#setData
 To refresh an item I did call refresh in setData until now. To prevent flickering I've made some "smart" equal checks there and an early return, assuming that if the element is still equals it does not require an update. That's wrong and can easily be reproduced on XP: Close all views and only keep one editor open with the breadcrumb enabled, change the type of a field, see that the label is not updated. So I just remove this hack and call refresh in BreadcrumbViewer#buildItem chain (when the input is set) directly. This results in heavy flickering (image decorators are removed and then added). That's why I have the equals check now there, but instead of doing nothing if the item is already part of the breadcrumb I call update on the element, requesting to update the element if required. Now the only thing missing is the refresh arrow stuff, I add it to doUpdateItem.
2. Relayout the right most label
 An update will at some point result in a call to Item#setText. The updated text can become larger or smaller and the label needs to be relayouted. I could not find any case where this happens to any item other then the right most item. Known issue: The breadcrumb is not resized in this scenario, meaning that left items are not collapsed if required. I don't see an easy fix for this (without resizing and relayouting the whole breadcrumb on every setText). 
3. Do not disable redrawing on GTK
 Because it results in flickering. Which is not a new bug, but I think this is the least controversial change.
Dani? Can you sleep tonight if we release this?
>Dani? Can you sleep tonight if we release this?
Yes, definitely - even better than last night ;-)

Two things:
- remove "fIsLast= false;" from the constructor
- file a bug against SWT for the redraw problem on Linux-GTK
patch is good
fixed > I20080527-2000
(In reply to comment #17)
> >Dani? Can you sleep tonight if we release this?
> Yes, definitely - even better than last night ;-)

I think I will sleep much better tonight:-)

> - file a bug against SWT for the redraw problem on Linux-GTK

bug 234427 




[breadcrumb] Does sometimes not update on reconcile on Vista



232817 [breadcrumb] Does sometimes not update on reconcile on Vista 

232817 [breadcrumb] Does sometimes not update on reconcile on Vista 

232817 [breadcrumb] Does sometimes not update on reconcile on Vista 