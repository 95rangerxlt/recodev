Build ID: I20070625-1500

Steps To Reproduce:

1. Build Test.java described below:

public class Test {
    public void test() {
        int i = new Integer(10);
        int j = new Integer(20);
    }
}

Then, two warnings are displayed in Problems view.
  The local variable i is never read	Test.java	line 3
  The local variable j is never read	Test.java	line 4

2. Select the first problem in Problems view, and select 'Quick Fix' 
   from the popup menu.
3. In the Quick Fix dialog, select "Remove 'i', keep side-effect 
   assignments".
4. Press 'Find Similar Problems' and press 'Select All' to select all
   the two problems.
5. Press 'Finish'. However, the two lines are not deleted.

More information:

If you do not press 'Select All' in Step 4, that is, if you try to 
fix only one problem, the problem is fixed correctly. 

If you do not use unboxing, like:
        int i = 10;
        int j = 20;

then, the above steps work correctly.

Build ID: I20070625-1500

Steps To Reproduce:

1. Build Test.java described below:

public class Test {
    public void test() {
        int i = new Integer(10);
        int j = new Integer(20);
    }
}

Then, two warnings are displayed in Problems view.
  The local variable i is never read	Test.java	line 3
  The local variable j is never read	Test.java	line 4

2. Select the first problem in Problems view, and select 'Quick Fix' 
   from the popup menu.
3. In the Quick Fix dialog, select "Remove 'i', keep side-effect 
   assignments".
4. Press 'Find Similar Problems' and press 'Select All' to select all
   the two problems.
5. Press 'Finish'. However, the two lines are not deleted.

More information:

If you do not press 'Select All' in Step 4, that is, if you try to 
fix only one problem, the problem is fixed correctly. 

If you do not use unboxing, like:
        int i = 10;
        int j = 20;

then, the above steps work correctly.
we don't actually know that new Integer(10) is side effect free.
We could hardcode a list of invocation where we know this. Not sure how much work this would be.
If new Integer(10) has a side effect, the behavior described below is not
correct:

1. Build the same Test.java as described in comment #0.
2. Select the same problem in Problems view as described in comment #0,
   and select 'Quick Fix' from the popup menu.
3. In the Quick Fix dialog, select "Remove 'i', keep side-effect assignments".
4. Press 'Finish' without pressing 'Find Similar Problems'. Then, the line
   'int i = new Integer(10);' is deleted.

The point seems that the result differs according to whether you use 'Find 
Similar Problems' or not. If you use it, the problem is not fixed. If you 
do not use it, the problem is fixed.
Could reproduce. The code starts clean up with only can do a remove without removing side-effects.
Created attachment 97191
fix

With this fix the multi quick fix is only available for 'Remove x, keep side effect assignements'
fixed > I20080422-0800


[quick fix] does not remove mutiple assignments with side effects



224557 [quick fix] does not remove mutiple assignments with side effects 