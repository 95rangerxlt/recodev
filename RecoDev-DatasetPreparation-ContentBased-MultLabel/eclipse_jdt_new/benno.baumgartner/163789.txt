I20061107-0800

The Clean Up "Use modifier 'final' where possible > Private field" erroneously adds 'final' when the field is assigned again in a constructor calling this():

public class Try {
    private int fField;
    public Try() {
        fField= 12;
    }
    public Try(int val) {
        this();
        fField= val;
    }
}

I20061107-0800

The Clean Up "Use modifier 'final' where possible > Private field" erroneously adds 'final' when the field is assigned again in a constructor calling this():

public class Try {
    private int fField;
    public Try() {
        fField= 12;
    }
    public Try(int val) {
        this();
        fField= val;
    }
}
not the most common case. probably not trivial to implement, so don't spend too much time on it.
Ok, you can of course also write
public Try() {
 this(12);
}
instead, which would allow you to make the field final. IMHO better style.
Sure, but the example where I found it in RenameAction was not that easy, and it made me switch off this clean up on save.
*** Bug 166195 has been marked as a duplicate of this bug. ***
M20060921-0945 (3.2.1)

There is a similar case whereas final is added when it shouldn't:

public class TestClassWithUnusedParameterInConstructor {
    private Object object;	
    public TestClassWithUnusedParameterInConstructor(final Object object) {
        super();
    }	
}

final is added to field object when there is no assignment in constructor...

So both cases when field is assigned multiple times and not assigned at all in constructor are broken.
(In reply to comment #5)
> M20060921-0945 (3.2.1)
> 
> There is a similar case whereas final is added when it shouldn't:
> 
> public class TestClassWithUnusedParameterInConstructor {
>     private Object object;      
>     public TestClassWithUnusedParameterInConstructor(final Object object) {
>         super();
>     }   
> }
> 
> final is added to field object when there is no assignment in constructor...

Which is a dup of Bug 156842

Created attachment 56638
fix

Not trivial indeed. The fact that either the first statement is a constructor invocation or there is no constructor invocation helps a lot though.
fixed > I20061219-1300


[clean up] Use modifier 'final' where possible: error for private field



163789 [clean up] Use modifier 'final' where possible: error for private field 