Build 20020321

Create the following three classes:

bar.FOO
baz.Foo
quux.FOO

Now open the 'Open Type' dialog, and type in 'foo'.

The list will have three entries in it:

+-----+
| FOO |
| Foo |
| FOO |
+-----+

This is incorrect.  The two 'FOO' entries should be combined, and the list 
should look like:

+-----+
| FOO |
| Foo |
+-----+

I suspect that this is due to a compare function which doesn't distinguish 
between strings which only differ by case, causing them to appear in an 
arbitrary order in a sorted list.

Build 20020321

Create the following three classes:

bar.FOO
baz.Foo
quux.FOO

Now open the 'Open Type' dialog, and type in 'foo'.

The list will have three entries in it:

+-----+
| FOO |
| Foo |
| FOO |
+-----+

This is incorrect.  The two 'FOO' entries should be combined, and the list 
should look like:

+-----+
| FOO |
| Foo |
+-----+

I suspect that this is due to a compare function which doesn't distinguish 
between strings which only differ by case, causing them to appear in an 
arbitrary order in a sorted list.
Suggested fix:

In TypeSelectionDialog.java, there is an inner class called StringComparator.  
It should be changed to:

	/*
	 * A string comparator which is aware of obfuscated code
	 * (type names starting with lower case characters).
	 */
	private static class StringComparator implements Comparator {
	    public int compare(Object left, Object right) {
	     	String leftString= (String) left;
	     	String rightString= (String) right;

	     	if (Character.isLowerCase(leftString.charAt(0)) &&
	     		!Character.isLowerCase(rightString.charAt(0)))
	     		return +1;

	     	if (Character.isLowerCase(rightString.charAt(0)) &&
	     		!Character.isLowerCase(leftString.charAt(0)))
	     		return -1;
	     	
			int result = leftString.compareToIgnoreCase
(rightString);
			if (result == 0) {
				result = leftString.compareTo(rightString);
			}
			return result;
	    }
	}

However, this code is still suboptimial.  A version which both fixes the 
sorting bug and improves the performance is:

	/*
	 * A string comparator which is aware of obfuscated code
	 * (type names starting with lower case characters).
	 */
	private static class StringComparator implements Comparator {
	    public int compare(Object left, Object right) {
	     	String leftString= (String) left;
	     	String rightString= (String) right;

	     	if (Character.isLowerCase(leftString.charAt(0)) !=
	     		Character.isLowerCase(rightString.charAt(0)))
	     	{
	     		return Character.isLowerCase(leftString.charAt(0)) ? 
+1 : -1;
	     	}

			int result = leftString.compareToIgnoreCase
(rightString);
			if (result == 0) {
				result = leftString.compareTo(rightString);
			}
			return result;
	    }
	}

(Note that this version has half as many isLowerCase sends in the expected case 
as the old version)
Oops - I miscounted.  I'm not sure that the "optimized" version really wins 
much at all.
fixed >= 20020409 implementing first proposal.

For the performance, it really doesn't matter much. If we assume that most 
Types start with capital letters (which is almost always the case except for
obfuscated code), in your case as well as in mine, we will get two lower case
tests in average. I don't think there's much point in optimising for the worst
case, where I have four tests instead of three.



Open Type dialog doesn't always combine types with same name



129115 [clean up] Qualify static fields qualifies enum constants 

fixed 12911 