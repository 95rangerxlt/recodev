20041215

class A {

}

class C extends A{
	void foo(List<String>... args) {
	}

}

-> pull up 'C.foo' result in :
static class A {

	transient void foo(List<String>... args) {
	}

}
'transient' is not a valid modifier here

20041215

class A {

}

class C extends A{
	void foo(List<String>... args) {
	}

}

-> pull up 'C.foo' result in :
static class A {

	transient void foo(List<String>... args) {
	}

}
'transient' is not a valid modifier here
IMethod#getFlags for method foo(List<String>...) incorrectly returns 128, 
which stands for modifier "transient".

Moving to JDT Core for comments.
I will investigate.
The problem seems to come from the varargs argument.
128 (0x80) is the VARARGS bit set for the method.
transient is also 0x80, but this is for a field. So 128 is the right value to
return for the method, but it doesn't mean transient.
Move back to JDT/UI for a fix.

Why don't we use distinct flags here. That would make life much more easier. Can
someone from JDT/Core please comment why we reuse the flags for 

	int AccVolatile     = 0x0040;
	int AccBridge       = 0x0040;
and 

	int AccTransient    = 0x0080;
	int AccVarargs      = 0x0080;

We don't decide the values of those flags. They are defined by the JVM specs.
Move back to JDT/UI.
But the JDK 1.5 has a comment that these flags aren't public yet since they have
the same value which asks for trouble (see class Modifier in java.lang.reflect).

Can't we find a different solution here. Reusing the value basically means that
we can't interpret the flags without the element from which we got the flags.
Since the Java Model is a source model (not a compiled like in the JVM or in
java.lnag.reflect) you can type in code like

public class C {
	transient void foo(String arg) {
	}
}

which the UI now renders as a method foo with var args.

This is a clear indication that reusing the constanst isn't a good thing to do.
The definition of flags is strictly following the JVM specs. We could introduce
a better solution to resolve such conflicts (I believe there are other similar
issues already). Changing the constant to solve this one problem could break
clients assuming we follow the specs.
Your best take is probably to bridge to DOM AST and use the fine frain modifier
nodes which surface the keywords.
We don't use the DOM AST for rendering. Rendering is strictly based on Java
Model. One solution is:

- deprecated the constant AccBridge and AccVarargs and make them not public
  for 3.1 as java.lang.reflect.Modifiers does

- provide different API than flags for the var args case which doesn't rely
  on flags (for example add a method IMethod.isVararg)

For the rewriting case we can fix this since we have the AST node in hand.
Martin, can you confirm this.
The AST doesn't use the flags ('modifiers' in the AST) for var args, but has a
new property on the SingleVariableDeclaration
Re: comment#11.

The model is also representing binary elements for which the offending constants
are positionned. We opted for transparency and due to the conflict in JVM specs,
it is causing grief. Other conflicts are not so problematic since occur only
with system flags (e.g. AccVolatile vs. AccBridge, AccSynchronized vs. AccSuper).

I like the idea of providing predicates to check the modifiers, in case the bits
are confusing.
Entered bug 81382 against JDT Core.
Philippe, can you please comment on what JDT/Core is planning here.

Tobias, can you please check what Pull-Up can do to fix this (e.g. use pure AST
rewrite methods.
I fixed this temporarily after opening the bug. The flag value 0x0080 is 
interpreted in the context of its associated member
Tobias, I assign the PR to you to keep track of it when 81382 got changed.
Workaround is available

Closing


[refactoring] pull up creates illegal modifier

