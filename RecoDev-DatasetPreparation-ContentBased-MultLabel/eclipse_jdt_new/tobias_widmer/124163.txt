Build: I20060110

I am investigating bug 121571.  Part of the problem is that the EFS method to get local timestamp and read-only state is more expensive than before.  This is largely because an IFileInfo object is created, where previously no objects were created.

However, from looking at the profiler output of TextFileChange#isValid, I see that it causes four separate file system accesses.  It checks if the file is read-only twice, and it checks if the file is in sync twice.  This can theoretically be done now with one file system call (IFileStore#fetchInfo), but I would be happy if it could be optimized to one IResource.isSynchronized and one IResource.isReadOnly.  That would cut file system access in half.  I don't know the code well enough to suggest a fix, but I will attach the profiler stack trace.

Build: I20060110

I am investigating bug 121571.  Part of the problem is that the EFS method to get local timestamp and read-only state is more expensive than before.  This is largely because an IFileInfo object is created, where previously no objects were created.

However, from looking at the profiler output of TextFileChange#isValid, I see that it causes four separate file system accesses.  It checks if the file is read-only twice, and it checks if the file is in sync twice.  This can theoretically be done now with one file system call (IFileStore#fetchInfo), but I would be happy if it could be optimized to one IResource.isSynchronized and one IResource.isReadOnly.  That would cut file system access in half.  I don't know the code well enough to suggest a fix, but I will attach the profiler stack trace.
Created attachment 33148
profiler stack output
Tobias, it would be good to have a look at this in the performance week.
Fixing the performance of TextFileChange is not easy. The callgraph shows several invocations of resource utility methods, which check for synchronization, read-only or other information. With the old filesystem implementation, multiple calls to these utility methods did not hurt much, since only the necessary info has been fetched. Now, every time a IFileStore#fetchInfo call is necessary, thus yielding the worse performance.

John, I think performance-wise the change to the new EFS is a breaking change and should be advertised somehow. Is there any documentation around which mentions this fact?
To be clear, it's not slower because extra information is being fetched.  The native OS methods on all platforms return a struct with all the metadata for that file (stat on *nix, and FindFile on win32).  The data from this struct is copied into the FileInfo object.  The performance hit is because an object is created, where before methods like isReadOnly and getLastModified() did not need to create an object.  However, in some cases it can be faster with the new IFileInfo approach in the cases where you actually need to access multiple pieces of metadata.  For example, this code with java.io.File requires two native calls and two file system hits:

java.io.File file = ...;
if (file.exists() && !file.isReadOnly())
   ...

Wherease with IFileInfo only one file system access is needed:
IFileInfo info = ...;
if (info.exists() && !info.getAttribute(EFS.ATTRIBUTE_READ_ONLY))
   ...

So there is a trade-off between creating an object, and potentially reducing file system accesses.  Code that takes advantage of IFileInfo to reduce file system access will be faster than in 3.1.
Will have a look post M6 to see whether performance can be further improved (see bug 121571).
Fixed to local history mentioned in bug 121571 seem to have helped in the refactorings as well. See performance tests for N20060426-1621

Closing as fixed.


Efficiency of TextFileChange#isValid

performance