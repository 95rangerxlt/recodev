I20041221-0800

class Pair<A, B> {
    public A getA() {
        return null;
    }
}

class InvertedPair<A, B> extends Pair<B, A> {
    // getA() B - Override method in Pair 
}

- in InvertedPair, use content assist or Source > Override/Implement Method...
to override getA(). Both produce:
    public A getA() { ...
, but should produce:
    public B getA() { ...

Interestingly the return type is correctly rendered in the content assist label :-)

I20041221-0800

class Pair<A, B> {
    public A getA() {
        return null;
    }
}

class InvertedPair<A, B> extends Pair<B, A> {
    // getA() B - Override method in Pair 
}

- in InvertedPair, use content assist or Source > Override/Implement Method...
to override getA(). Both produce:
    public A getA() { ...
, but should produce:
    public B getA() { ...

Interestingly the return type is correctly rendered in the content assist label :-)
Tobias, as discuss we should either not allow this or produce correct code.
Fixed > 20050126


Override method content assist / dialog does not replace type variable [5.0]



182100 [package explorer] [working sets] Offer 'Add to Working Set' action on projects - enable for filter mode 

182100 [package explorer] [working sets] Offer 'Add to Working Set' action on projects - polish 2 

182100 [package explorer] [working sets] Offer 'Add to Working Set' action on projects - polish 1 

182100 [package explorer] [working sets] Offer 'Add to Working Set' action on projects 