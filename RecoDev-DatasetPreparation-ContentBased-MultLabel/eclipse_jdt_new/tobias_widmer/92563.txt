I20050420-1200 + JDT UI Head

Steps to reproduce:
- Execute scenario as in bug 91494

-> ContentAssistant#computeCompletionProposals takes 890 ms
-> 740 ms of this are spent in StringBuffer#<init>

Reason: String#valueOf is called 3 times per type proposal
Additionally, package name, type name, completion and image descriptor are 
eagerly created.

In conjunction with virtual tables, this information should also be lazily 
computed.

I20050420-1200 + JDT UI Head

Steps to reproduce:
- Execute scenario as in bug 91494

-> ContentAssistant#computeCompletionProposals takes 890 ms
-> 740 ms of this are spent in StringBuffer#<init>

Reason: String#valueOf is called 3 times per type proposal
Additionally, package name, type name, completion and image descriptor are 
eagerly created.

In conjunction with virtual tables, this information should also be lazily 
computed.
added JavaCompletionProposal2 and subclasses which all just wrap jdt.core's
CompletionProposal and compute all information lazily.

Note that the display string is still created early due to sorting - added a
getSortString which is overridden by JavaTypeCompletionProposal2 with the hope
that the sort string computation may be less expensive than the display string.

Awaiting comments before closing.
The performance is significantly improved in the warm case:

I20050420-1200 + JDT UI Head

ContentAssistant#computeCompletionProposals takes 190 ms
using virtual tables and lazy compuation
comment 2 is good news - closing as fixed.


[content assist] Warm code assist performance for many types

performance

92563 [content assist] Warm code assist performance for many types - lazy computation of content assist proposals / use VIRTUAL 