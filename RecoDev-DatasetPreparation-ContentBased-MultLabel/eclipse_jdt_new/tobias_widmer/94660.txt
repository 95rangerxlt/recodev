By overriding the getName() method on TestCase, it is possible to create a
TestCase that does not report the name of the method run as a response to
getName().  When this happens, the JUnit view cannot find the source that
corresponds to the test.  The user should be simply notified in this case, but
instead it silently fails with an error in the log:

org.eclipse.jdt.internal.core.Assert$AssertionFailedException: Assertion failed; 
	at org.eclipse.jdt.internal.core.Assert.isTrue(Assert.java:89)
	at org.eclipse.jdt.internal.core.Assert.isTrue(Assert.java:76)
	at org.eclipse.jdt.internal.core.SourceMethod.<init>(SourceMethod.java:38)
	at org.eclipse.jdt.internal.core.SourceType.getMethod(SourceType.java:349)
	at
org.eclipse.jdt.internal.junit.ui.OpenTestAction.findMethod(OpenTestAction.java:82)
	at
org.eclipse.jdt.internal.junit.ui.OpenTestAction.findElement(OpenTestAction.java:61)
	at org.eclipse.jdt.internal.junit.ui.OpenEditorAction.run(OpenEditorAction.java:56)
	at
org.eclipse.jdt.internal.junit.ui.TestHierarchyTab.handleDoubleClick(TestHierarchyTab.java:451)
	at
org.eclipse.jdt.internal.junit.ui.TestHierarchyTab$4.mouseDoubleClick(TestHierarchyTab.java:431)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:140)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:842)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2901)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2534)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1601)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1565)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:315)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)
	at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:103)
	at
org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:230)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:345)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:158)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.eclipse.core.launcher.Main.invokeFramework(Main.java:328)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:272)
	at org.eclipse.core.launcher.Main.run(Main.java:974)
	at org.eclipse.core.launcher.Main.main(Main.java:950)

By overriding the getName() method on TestCase, it is possible to create a
TestCase that does not report the name of the method run as a response to
getName().  When this happens, the JUnit view cannot find the source that
corresponds to the test.  The user should be simply notified in this case, but
instead it silently fails with an error in the log:

org.eclipse.jdt.internal.core.Assert$AssertionFailedException: Assertion failed; 
	at org.eclipse.jdt.internal.core.Assert.isTrue(Assert.java:89)
	at org.eclipse.jdt.internal.core.Assert.isTrue(Assert.java:76)
	at org.eclipse.jdt.internal.core.SourceMethod.<init>(SourceMethod.java:38)
	at org.eclipse.jdt.internal.core.SourceType.getMethod(SourceType.java:349)
	at
org.eclipse.jdt.internal.junit.ui.OpenTestAction.findMethod(OpenTestAction.java:82)
	at
org.eclipse.jdt.internal.junit.ui.OpenTestAction.findElement(OpenTestAction.java:61)
	at org.eclipse.jdt.internal.junit.ui.OpenEditorAction.run(OpenEditorAction.java:56)
	at
org.eclipse.jdt.internal.junit.ui.TestHierarchyTab.handleDoubleClick(TestHierarchyTab.java:451)
	at
org.eclipse.jdt.internal.junit.ui.TestHierarchyTab$4.mouseDoubleClick(TestHierarchyTab.java:431)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:140)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:842)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2901)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2534)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1601)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1565)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:315)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)
	at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:103)
	at
org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:230)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:345)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:158)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.eclipse.core.launcher.Main.invokeFramework(Main.java:328)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:272)
	at org.eclipse.core.launcher.Main.run(Main.java:974)
	at org.eclipse.core.launcher.Main.main(Main.java:950)
that makes sense
Created attachment 21837
Patch

I couldn't reproduce the silent fail in N20050526-0010.  Instead, I saw not one
message dialog, but two.  This patch gets us back down to one, at which point
I'll call this closed.
IMO not critical for 3.1 either. I think it is not very likely that clients
override getName(). Comments ?
Dirk,

I mentioned to you that I had once written a test that overloaded getName. 
Turns out I had done so to bring it inline with what Eclipse expects, not to
serve some other nefarious purpose.  So I cannot provide an example of a useful
reason to override getName.  Easy fix for 3.2.
Actually we have a bug in the code that is causing this behaviour. Fixing the
cause is an easy fix.

OKed by Dirk to include in 3.1
Erich,

There were actually two bugs related to overriding getName().  The first was the
UI/model discrepancy fixed in my patch last night, which never had a PR# that
I'm aware of (we were lucky).  This is a different issue: if getName is
overridden to return something meaningless to Eclipse, the user should get a
simple, single error message and nothing more.  At one point, this situation
generated an error log entry, and now it generates two identical dialogs. 
Reopening for 3.2
Reviewed and released patch by David

Fixed > 20050630


[JUnit] Error log when getName() is overridden



94660 [JUnit] Error log when getName() is overridden 

94660 [JUnit] Error log when getName() is overridden. Improve the handling of JUnit4 tests 