Johannes Lehnert has written a plugin which generates equals and hashCode 
methods on a "set of non-static fields" selection of a type. I have recently 
improved the usability quite a bit and made it ready for generic types (see 
http://www.bodden.de/projects/eclipse).

I think this is actually some piece of functionality which would be very useful 
for any Java developer. Thus I would like to propose integration into the JDT if 
you are interested.

Johannes Lehnert has written a plugin which generates equals and hashCode 
methods on a "set of non-static fields" selection of a type. I have recently 
improved the usability quite a bit and made it ready for generic types (see 
http://www.bodden.de/projects/eclipse).

I think this is actually some piece of functionality which would be very useful 
for any Java developer. Thus I would like to propose integration into the JDT if 
you are interested.
Eric, we are indeed interested in integrating this. However, we already reached
milestone M7, which means no new feature work for 3.1 anymore.

So this has to wait until 3.2.

Tobias, can you please have a look at the patch and provide some feedback so
that we can integrate this early 3.2.
*** Bug 95487 has been marked as a duplicate of this bug. ***
me too, me too! I keep implementing dumb equals and hash code methods for some
classes (equals: compare if the other guy is the same type and compare all
fields,  hashCode: xor all hashCodes for fields multiplied by so random primes).
Eric, are you still interested in providing a patch?
We would like to offer such a code generation facility for 3.2.
Sure, I would be up to that. However I am not very familiar with the latest 
versions of the Eclipse API so it might be good if somebody of the more 
experienced developer could review the code and look for the use deprecated / 
coding conventions etc.
The code is reviewed anyway.

But: What is the legal status of the code? The original code is provided under 
the LGPL, and you do not state any specific licence. For integration into JDT, 
both you and Johannes have to agree to provide the code under the EPL.

A few comments about the code:

- The action to generate these methods should be provided by the source menu, 
using UI similar to e.g. Override/Implement Method or Generate Constructor 
using Fields. Currently, the UI is a wizard page. This should be converted to 
the internal class SourceActionDialog.

- code generation of the method stubs nowadays happens using class AstRewrite. 
Converting the code generation of the stubs means some additional work, but 
has the advantage of respecting code style and formatter settings more 
thoroughly.

As a general rule, the implementation is probably going to be similar to the 
one for Override/Implement Method (classes OverrideMethodDialog and 
AddUnimplementedMethodsOperation)

If you are willing to work on these two items (in particular code generation), 
we will be happy to accept your patch.
Created attachment 26831
proposed user interface

This patch is a quick adaption of the Override/Implement Method UI which may
serve as a guideline.
I have contacted Johannes by email to comment on if he is willing to release the 
code under EPL. Also w.r.t. to comment #6 I see no problem with this.
I'm willing to release my code under the EPL. I'd really like to see this being
integrated into Eclipse. 

Do you need any formal "Relicensing statement" from me, like a repackaged
version of the plugin with an EPL license notice? Because I would like to keep
the current version under the LGPL as well just to keep the status quo. 



Hi. One question: Should it be possible to include fields declared in supertypes 
in the equals/hashCode generation?
In my opinion usually equality for fields in supertypes should be handled by a 
call to super.equals(other), but I would like to see if you agree with this.
Further question: Why is it not ok to use IType.createMethod(...), because in 
the end it *does* use ASTRewrite to implement all rewriting functionality.
Yes, that's right. But the content of the method has to be assembled as well 
(it is passed as a string). So in order to generate correctly formatted code, 
you would have to pass this string to the formatter first, which is 
inefficient.
The prefererred way is to acquire an AST, "record" all modifications via 
ASTRewrite and then generate an edit tree which can be applied to the source 
document the AST was created from.
I see, thanks. Any suggestions on comment #10 ?
Well, I guess it would be enough to check that the super type reimplements 
equals() and hashCode() and just call super. If we handle it like this, we 
should probably show missing implementations in super types as an error in the 
status line of the SourceActionDialog.
Created attachment 32389
jdt.ui / jdt.ui.tests

I've reimplemented a hashCode()/equals() generation action based on the JDK "templates" in the primitive wrapper types in java.lang as well as java.util.Arrays. The implementation uses ASTRewrite to create the code.

I also had a look at the code posted above and all functionality should be covered. 

The attached patch is a workspace patch containing the action code itself and some tests. Comments are welcome! :)
Thanks, phil! And a happy new year from Montreal!
Reviewed and adapted patch by Philip

Fixed in HEAD > 20060113
*** Bug 26071 has been marked as a duplicate of this bug. ***


[code manipulation] Generation of equals and hashCode methods



90659 [code manipulation] Generation of equals and hashCode methods 

90659 [code manipulation] Generation of equals and hashCode methods 