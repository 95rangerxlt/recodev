I have refactored the ICompareAdapter so that it no longer provides the strucutre and content compare views. Instead, clients should register their viewers by either extension (ITypedElement#getType()) or content type. The class AbstractRefactoringCompareAdapter has a findContentViewer that should be removed. The way to get the viewer now is to register an IViewerCreator with the org.eclipse.compare.contentMergeViewer extension point.

I have refactored the ICompareAdapter so that it no longer provides the strucutre and content compare views. Instead, clients should register their viewers by either extension (ITypedElement#getType()) or content type. The class AbstractRefactoringCompareAdapter has a findContentViewer that should be removed. The way to get the viewer now is to register an IViewerCreator with the org.eclipse.compare.contentMergeViewer extension point.
This makes it a little more difficult for me to install a special compare viewer to preview a summary of an incoming refactoring.
With the refactored version of the code, it seems as if I had to register a compare viewer with a content type or for refactoring history files or a specific extension. Now I have the problem that I want textual compare for the refactoring history files if the user e.g. compares the refactoring history with an edition from the local history, but I would like a more specialized compare viewer during synchronization which displays a summary of the incoming refactoring.
With the old approach, it was easily possible to decide which kind of viewer to create for which model element. Additionally, the incoming refactoring model elements have to adapt to IResource, which is actually not necessary.
If possible, I prefer not to show the same compare viewer from the workbench and from the synchronize dialog/view.
Actually, it shouldn't be too much more work. For your refactoring history, you can always create a custom compare input from the ICompareAdapter and make sure that the ITypedElements have a different type (i.e. the type does not have to be a file extension). You can then register a viewer for that type that has different behavior for the case where the refactoring is included in a team operation.

I agree that the approach that was removed was easier for clients but it would have required a lot of work under the covers to make it work well with the compare framework API and unfortunately we do not have enough time remaining before the API freeze to do it.
That works perfect, thanks.
Fixed in HEAD > 20060123


React to change in Team Compare UI



124669 React to change in Team Compare UI 