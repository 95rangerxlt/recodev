The JavaStreamMerger doesn't actually perform a merge. The purpose of the merger is to attemtp a merge and either succeed or return a failure. Have a look at TextStreamMerger to see how a basic text merge works. Of course, the Java merger could potentially use the Java language semantics to reduce the chance of conflicts.

The JavaStreamMerger doesn't actually perform a merge. The purpose of the merger is to attemtp a merge and either succeed or return a failure. Have a look at TextStreamMerger to see how a basic text merge works. Of course, the Java merger could potentially use the Java language semantics to reduce the chance of conflicts.
I am aware of that. The stream merger was just used to eliminate the conflicts originating from incoming refactorings (incoming changes in resources) and changes caused by locally executing the refactoring.

It is currently not planned to go further and attempt auto merge of compilation units.
This is causing problems though since it will be used for any Java file. Is the merge for Java files or for the refactoring history? Anyway, I'd appreciate it if you could remove this merger at least from from M4 if you are not going to fix it. In essence, this will be viewed as a regression in the CVS tooling since we used to perform auto-merging on Java files but now we don't.
I removed this for the M4 warm-up build, since it is not essential.
We have to somehow find a better solution to eliminate the pseudo-conflicts caused by locally applying the refactorings during catchup. Are files with identical content but different revision automatically merged? If this is the case, we do not need any mechanism to resolve these conflicts.
It is not generally the case that these files will be made in sync but there is API on the IMergeContext for a model to call if they suspect this is the case (markAsMerged). Once M4 is out the door, we'll need to work out exactly how refactorings are going to work and we can come up with a way to address this issue at that time as well. I've taken the liberty to rename the bug to reflect the problem you described.
Refactoring wizard now tracks all resource deltas during a refactoring and calls markAsMerged(...)

Fixed in HEAD > 20060206


Make incoming Java files in-sync after catching up to a rafactoring



119949 Make incoming Java files in-sync after catching up to a rafactoring 

119949 JavaStreamMerger doesn't actually merge 