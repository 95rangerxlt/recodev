Consider the following example and perform Refactor > Inline as per the comments:

@FunctionalInterface
interface I1 {
	int foo(int x);	
}

public class X {
	public static final I1 a= (int x) -> x;
	
	void fun1() {
		int n = a.foo(0); // [1] Inline "a" => AFE	
		
		I1 i= (int x) -> { return x; }; // [2] Inline "i"
		I1 i1= x -> i.foo(x); // => Invalid inlining of "i"
		fun2(i); // => Valid inlining of "i"
	}
	
	void fun2(I1 i) {}
}

[1] => 
java.lang.reflect.InvocationTargetException
...
Caused by: org.eclipse.core.runtime.AssertionFailedException: assertion failed: 
	at org.eclipse.core.runtime.Assert.isTrue(Assert.java:110)
	at org.eclipse.core.runtime.Assert.isTrue(Assert.java:96)
	at org.eclipse.jdt.internal.corext.dom.fragments.ASTFragmentFactory$FragmentFactory.setFragment(ASTFragmentFactory.java:194)
	at org.eclipse.jdt.internal.corext.dom.fragments.ASTFragmentFactory$FragmentForFullSubtreeFactory.visit(ASTFragmentFactory.java:133)
	at org.eclipse.jdt.internal.corext.dom.HierarchicalASTVisitor.visit(HierarchicalASTVisitor.java:547)
	at org.eclipse.jdt.internal.corext.dom.HierarchicalASTVisitor.visit(HierarchicalASTVisitor.java:566)
	at org.eclipse.jdt.core.dom.SimpleName.accept0(SimpleName.java:149)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2670)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChild(ASTNode.java:2718)
	at org.eclipse.jdt.core.dom.LambdaExpression.accept0(LambdaExpression.java:215)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2670)
	at org.eclipse.jdt.internal.corext.dom.fragments.ASTFragmentFactory$FragmentFactory.createFragment(ASTFragmentFactory.java:186)
	at org.eclipse.jdt.internal.corext.dom.fragments.ASTFragmentFactory$FragmentForFullSubtreeFactory.createFragmentFor(ASTFragmentFactory.java:115)
	at org.eclipse.jdt.internal.corext.dom.fragments.ASTFragmentFactory.createFragmentForFullSubtree(ASTFragmentFactory.java:56)
	at org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring.checkInitializer(InlineConstantRefactoring.java:789)
	at org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring.checkInitialConditions(InlineConstantRefactoring.java:736)
	at org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run(CheckConditionsOperation.java:83)
...


[2] => Results in:
I1 i1= x -> (int x) -> { return x; }.foo(x); // => Invalid inlining of "i"
fun2((int x) -> { return x; }); // => Valid inlining of "i"

Consider the following example and perform Refactor > Inline as per the comments:

@FunctionalInterface
interface I1 {
	int foo(int x);	
}

public class X {
	public static final I1 a= (int x) -> x;
	
	void fun1() {
		int n = a.foo(0); // [1] Inline "a" => AFE	
		
		I1 i= (int x) -> { return x; }; // [2] Inline "i"
		I1 i1= x -> i.foo(x); // => Invalid inlining of "i"
		fun2(i); // => Valid inlining of "i"
	}
	
	void fun2(I1 i) {}
}

[1] => 
java.lang.reflect.InvocationTargetException
...
Caused by: org.eclipse.core.runtime.AssertionFailedException: assertion failed: 
	at org.eclipse.core.runtime.Assert.isTrue(Assert.java:110)
	at org.eclipse.core.runtime.Assert.isTrue(Assert.java:96)
	at org.eclipse.jdt.internal.corext.dom.fragments.ASTFragmentFactory$FragmentFactory.setFragment(ASTFragmentFactory.java:194)
	at org.eclipse.jdt.internal.corext.dom.fragments.ASTFragmentFactory$FragmentForFullSubtreeFactory.visit(ASTFragmentFactory.java:133)
	at org.eclipse.jdt.internal.corext.dom.HierarchicalASTVisitor.visit(HierarchicalASTVisitor.java:547)
	at org.eclipse.jdt.internal.corext.dom.HierarchicalASTVisitor.visit(HierarchicalASTVisitor.java:566)
	at org.eclipse.jdt.core.dom.SimpleName.accept0(SimpleName.java:149)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2670)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChild(ASTNode.java:2718)
	at org.eclipse.jdt.core.dom.LambdaExpression.accept0(LambdaExpression.java:215)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2670)
	at org.eclipse.jdt.internal.corext.dom.fragments.ASTFragmentFactory$FragmentFactory.createFragment(ASTFragmentFactory.java:186)
	at org.eclipse.jdt.internal.corext.dom.fragments.ASTFragmentFactory$FragmentForFullSubtreeFactory.createFragmentFor(ASTFragmentFactory.java:115)
	at org.eclipse.jdt.internal.corext.dom.fragments.ASTFragmentFactory.createFragmentForFullSubtree(ASTFragmentFactory.java:56)
	at org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring.checkInitializer(InlineConstantRefactoring.java:789)
	at org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring.checkInitialConditions(InlineConstantRefactoring.java:736)
	at org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run(CheckConditionsOperation.java:83)
...


[2] => Results in:
I1 i1= x -> (int x) -> { return x; }.foo(x); // => Invalid inlining of "i"
fun2((int x) -> { return x; }); // => Valid inlining of "i"
When we have a lambda reference being used as the expression in a method invocation, we cannot inline the lambda as shown in cases [1] and [2]'s invalid inlining in comment #0.

In cases like [1], the inline refactoring can be disabled.
In cases like [2], where some occurrences are valid and some are not, we cannot remove the lambda declaration as invalid occurrences cannot be inlined. Should we inline only the valid locations and keep the lambda declaration also for other occurrences or should the inline refactoring be disabled here?
> Should we inline only the valid locations and keep the lambda
> declaration also for other occurrences [..]?

Let's do the same as Inline Method (bug 83041):
- show a (non-fatal) error message for each invalid location and then don't inline
- keep the declaration if these was an invalid location
The categorization of places where a lambda or a method reference can be inlined and where not looks like a generally useful property of an ASTNode location.

The general question is: Can the StructuralPropertyDescriptor for the target location hold a poly expression? This will probably also be useful for other refactorings, so please make this functionality reusable (e.g. in ASTNodes).

For cases where inlining is possible (i.e., the target accepts a poly expression), we also need to think about inadvertent semantic shifts because the type inference could resolve to different types at the new location. Maybe we need something similar to MethodInvocation#isResolvedTypeInferredFromExpectedType() from JDT Core?

See also the call hierarchy of Invocations#isResolvedTypeInferredFromExpectedType(Expression). I expect the fix for this bug to be applicable in similar situations, so this is probably an opportunity to share even more code.
-------------------------------------------------------------
package test.inline.lambda.constant;

@FunctionalInterface
interface FI {
	int foo(int x);
}

@FunctionalInterface
interface F {
	FI foo();
}

class C1 {
	public static final FI fi = x -> x++;	// inline all references of 'fi' and delete it.
	
	static {
		FI fi1 = fi;	// [1]
		
		FI fi2;
		fi2 = fi;		// [2]		
	}
	
	private FI fun1() {
		return fi;		// [3]
	}
	
	FI[] fis = new FI[] {fi, fi}; // [4]
	
	
	int x1 = fun2(fi);	// [5a]
	
	C1 c1 = new C1(fi);	// [5b]
	
	private int fun2(FI fi) {return 0;}
	public C1(FI fi) {}

	FI fi3 = fun3();

	private FI fun3() {
		F f = () -> fi;	// [6]
		return f.foo();
	}

	private void fun4() {
		boolean flag = true;
		FI fi4 = flag ? fi : fi; // [7]
	}
	
	
	private Object fun5() {
		Object o = fi; // [8a]
		
		Object fi2;
		fi2 = fi; // [8b]
		
		Object[] fis = new Object[] {fi, fi}; // [8c]
		
		System.out.println(fi);  // [8d]

		Object fi4 = true ? fi : fi; // [8e]
		
		int x2 = fi.foo(10); // [8f]
				
		return fi;	// [8g]
	}
        
        // etc.
}
-------------------------------------------------------------

The above example shows some cases where a lambda constant can be inlined.

In cases [1] to [7], it can be inlined directly.
In cases [8*], lambda will need a type cast to the functional interface type while inlining.

Examples are based on http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html, section 5: Contexts for target typing.
(In reply to Markus Keller from comment #3)
> The categorization of places where a lambda or a method reference can be
> inlined and where not looks like a generally useful property of an ASTNode
> location.
> 
> The general question is: Can the StructuralPropertyDescriptor for the target
> location hold a poly expression? This will probably also be useful for other
> refactorings, so please make this functionality reusable (e.g. in ASTNodes).

Does it mean that we need to know if the StructuralPropertyDescriptor of the target location defines a target type, as poly expressions cannot be typed in the absence of a target type?
http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html, section 5: Contexts for target typing : lists the contexts that have target types. Would that be helpful?

If the target location's StructuralPropertyDescriptor accepts a poly expression ( i.e. defines a target type) then we need to know what is the defined target type.

And, if the defined target type matches the type of the lambda expr being inlined, it can be inlined directly.
Otherwise, we could cast the lambda expr to its functional interface type, as the target was already having the functional interface reference at that location before inling.

> For cases where inlining is possible (i.e., the target accepts a poly
> expression), we also need to think about inadvertent semantic shifts because
> the type inference could resolve to different types at the new location.
> Maybe we need something similar to
> MethodInvocation#isResolvedTypeInferredFromExpectedType() from JDT Core?

Can you give an example?

> See also the call hierarchy of
> Invocations#isResolvedTypeInferredFromExpectedType(Expression). I expect the
> fix for this bug to be applicable in similar situations, so this is probably
> an opportunity to share even more code.
> http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html,
> section 5: Contexts for target typing : lists the contexts that have target
> types. Would that be helpful?

Yes, that section is helpful to understand the problem, but the implementation should be based on the spec: http://cr.openjdk.java.net/~dlsmith/jsr335-0.7.0.html#E

> > For cases where inlining is possible (i.e., the target accepts a poly
> > expression), we also need to think about inadvertent semantic shifts because
> > the type inference could resolve to different types at the new location.
> > Maybe we need something similar to
> > MethodInvocation#isResolvedTypeInferredFromExpectedType() from JDT Core?
> 
> Can you give an example?

@FunctionalInterface
interface FI {
    int foo(int x);
}
@FunctionalInterface
interface FL {
    long foo(long x);
}

class C2 {
    public static final FI fi = x -> x++; // inline 'fi'
    public static final FL fl = x -> x++;

    {
        bar(fi); // can't inline fi without explicit cast to FI
        bar(fl); // can't inline fl without explicit cast to FL
    }
    void bar(FI fi) { }
    void bar(FL fl) { }
}
Created attachment 238615
Fix

Attaching a patch for the fix based on the common code given in bug 423439 comment #6.
Created attachment 238616
Tests

Attaching the patch for the following commit from mmathew/BETA_JAVA8 branch:

http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?h=mmathew/BETA_JAVA8&id=262e59c07ad895ff0657dd9c9a42c9b541c1a5ac
There are a few more cases, where we need to insert a cast:

@FunctionalInterface
interface I1 {
    int foo(int x); 
    int CONST= 12;
}

public class FI {
    void fun1() {
        I1 i= (int x) -> { return x; }; // [3] Inline "i"
        int c = i.CONST;
        IntFunction<Integer> f= i::foo;
        synchronized (i) { }
    }
}

I think we can avoid adding more cases to ASTNodes#getExplicitCast(..) if we just add a cast when getTargetType(reference) returns null. These are exactly the those cases where the target type is not defined and hence needs to be supplied by a cast.

Fixed InlineConstantTests18#test1003()/test3()/test4() to make them interesting again after bug 423439 comment 14: FX#foo() now also returns int.

Committed fix & tests with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=7a1839ac4f876d3ebafe5fef49d315db2ab6f6f9
*** Bug 437442 has been marked as a duplicate of this bug. ***


[1.8][inline] Invalid inline constant and inline temp refactorings using lambda expressions



Bug 408966: [1.8][inline] Invalid inline constant and inline temp refactorings using lambda expressions 

Fixed bug 408966: [1.8][inline] Invalid inline constant and inline temp refactorings using lambda expressions - Tests 

Fixed bug 408966: [1.8][inline] Invalid inline constant and inline temp refactorings using lambda expressions 