This program crashes when run:

public class X {
	<T> int square(int i) {
		return i * i;
	}
	boolean isOdd(boolean what) {
		return square(what ? new Integer(1) : new Integer(2)) % 2 == 1; // trouble here
	}
	public static void main(String argv[]) {
		System.out.println(new X().isOdd(true));
	}
}

Note that the program runs fine if you:
1. remove the type parameter <T> (or)
2. substitute the 'what' with a boolean literal (or)
3. get rid of the boxing for int primitive

So, looks like all these are playing a part here.

This program crashes when run:

public class X {
	<T> int square(int i) {
		return i * i;
	}
	boolean isOdd(boolean what) {
		return square(what ? new Integer(1) : new Integer(2)) % 2 == 1; // trouble here
	}
	public static void main(String argv[]) {
		System.out.println(new X().isOdd(true));
	}
}

Note that the program runs fine if you:
1. remove the type parameter <T> (or)
2. substitute the 'what' with a boolean literal (or)
3. get rid of the boxing for int primitive

So, looks like all these are playing a part here.
I'll take a look at this one.

Passes upto 1.7 compliance/source levels.

Stack map table looks incorrect for 1.8.
Somewhere along the type inference path, the conditional's resolved type
get changed from Integer to int. Stephan, thanks for looking into it.

From the spec: 

Conditional operator expressions may be poly expressions if they appear in assignment or invocation contexts, unless both operands
produce primitives (or boxed primitives)

In this scenario, it is not a poly expression and I would not expect any
change from 1.7 behavior.
Disabled test released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=ed45f69d40b17b59915e726fa4a306f40a296886

(Please remember to adjust to < 1.5 return.
With this precise analysis there wasn't much left for me to do :)

Inference already correctly notices that this ternary is not a poly expression, but still calls checkAgainstFinalTargetType() after all is said and done.

This method even had a comment "in 1.8 if treated as a poly expression", but here the check isPolyExpression() was simply missing.

Fixed and released for BETA_JAVA8 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3168f520c145ac4dd47d54a812acd1c888ed8ea9


[1.8] VerifyError when conditional expression passed as an argument



Bug 426078 - [1.8] VerifyError when conditional expression passed as an argument 

[1.8] (Disabled) test for Bug 426078 - [1.8] VerifyError when conditional expression passed as an argument 