Section 18.5 distinguishes Invocation Applicability Inference (18.5.1) from Invocation Type Inference (18.5.2).

Here the second phase is to reuse the bound set of the first phase, but any results of resolution, notably any instantiations have to be dropped and re-computed with more constraints in the lot.

Section 18.5 distinguishes Invocation Applicability Inference (18.5.1) from Invocation Type Inference (18.5.2).

Here the second phase is to reuse the bound set of the first phase, but any results of resolution, notably any instantiations have to be dropped and re-computed with more constraints in the lot.
Two parts to the solution:
- let resolve() only operate on copies of the currentBounds, never make those effects permanent
- provide a method to expunge instantiations before entering the second phase.
If pushed my solution to the branch sherrmann/NewTypeInference (commits 737436e6c946c401647caf085008cbddb099be7f and 05d011869628d7aa52cf0372b4f67a85725306ca)

A visible result being: GenericTypeTests.test1024() now passes with the new type inference, which it did not before.

While more investigation is needed when mixing new type inference with new overload resolution, I'll mark this immediate issues as closed: the infrastructure is capable of doing the required two-phase inference.
(In reply to Stephan Herrmann from comment #1)
> - provide a method to expunge instantiations before entering the second
> phase.

For posterity: this was based on misunderstanding the spec.
The results from reduction must be kept, just no effects of the resolve phase.


[1.8][compiler] support two phase type inference



Bug 403847 - [1.8][compiler] support two phase type inference - one more location to use the tmpBoundSet. 

Bug 403847 - [1.8][compiler] support two phase type inference 