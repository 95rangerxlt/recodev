package a;

import java.util.Collections;
import java.util.List;

/**
 * @author tomschindl
 *
 */
public class Test {
	public static class A {
		public A(B newSelectedObject, String editorController) {
	    }

	    public A(List<B> newSelectedObjects, String editorController) {
	    }
	}
	
	public static class B {
		
	}
	
	public static class C extends A {
		public C() {
			super(Collections.emptyList(), "");
		}
	}
}

It looks like the type-inference is broken the above code should just compile but fails with an exception. The compilation succeeds if the type is speced explicitly:

super(Collections.<B>emptyList(), "");

package a;

import java.util.Collections;
import java.util.List;

/**
 * @author tomschindl
 *
 */
public class Test {
	public static class A {
		public A(B newSelectedObject, String editorController) {
	    }

	    public A(List<B> newSelectedObjects, String editorController) {
	    }
	}
	
	public static class B {
		
	}
	
	public static class C extends A {
		public C() {
			super(Collections.emptyList(), "");
		}
	}
}

It looks like the type-inference is broken the above code should just compile but fails with an exception. The compilation succeeds if the type is speced explicitly:

super(Collections.<B>emptyList(), "");
Hi Tom,

What exception do you see? Which exact JDT version?

In HEAD I see this - incorrect - error:

        super(Collections.emptyList(), "");
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The constructor Test.A(List<Object>, String) is undefined


This could be related to bug 426290, which is currently on my plate.
Yes interesting observation is that if i remove the first constructor things work! The build is from yesterday night
Some observations:
- Type inference (as the art of instantiating a set of interdependent inference variables with proper types) works fine.
- Type inference is performed several times for each overload candidate; working fine.
- Type inference in the context of an outer overload resolution has to be performed n x m times; this part has deficiences.

Applied to the example: the type of Collections.emptyList() can be correctly inferred as soon as we have the correct target type. This call, however, is embedded as an argument into an outer call super(..) needing overload resolution. As a result the entire inference and overload resolution for emptyList() has to be performed several times for each overload of super(..), i.e., with target types B and List<B> in turns.

Implementationwise this is difficult, because inference regarding emptyList() cannot now, whether the target type is final or just an attempt to resolve outer overloading.

I'll see to it.
For this test case it actually suffices to separately record inference solutions per target type to determine if invocation type inference must be rerun.

More to follow in bug 426290.

Fix has been released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=ae0b30b76dcbe89d5bd08d53d907ae7218823168


[1.8][compiler] Type inference doesn't handle multiple candidate target types in outer overload context



Bug 426366 - [1.8][compiler] Type inference doesn't handle multiple candidate target types in outer overload context 