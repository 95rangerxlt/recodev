This is the code causing the NPE:

interface Functional { int foo(); }

class X {
    static int bar() {
        return -1;
    }
    static <T> T consume(T t) { return null; }

    public static void main(String[] args) {
    	Functional f = consume(X::bar);
    }  
}

Not sure if the NPE is causing it, but we also report a compilation error.

And here's the stack trace:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.recordQualifiedReference(CompilationUnitScope.java:636)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.getSingleAbstractMethod(ReferenceBinding.java:1861)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isPertinentToApplicability(ReferenceExpression.java:554)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.createInitialConstraintsForParameters(InferenceContext18.java:139)
	at org.eclipse.jdt.internal.compiler.lookup.ConstraintExpressionFormula.inferInvocationApplicability(ConstraintExpressionFormula.java:271)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationApplicability(InferenceContext18.java:217)
	at ...

This is the code causing the NPE:

interface Functional { int foo(); }

class X {
    static int bar() {
        return -1;
    }
    static <T> T consume(T t) { return null; }

    public static void main(String[] args) {
    	Functional f = consume(X::bar);
    }  
}

Not sure if the NPE is causing it, but we also report a compilation error.

And here's the stack trace:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.recordQualifiedReference(CompilationUnitScope.java:636)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.getSingleAbstractMethod(ReferenceBinding.java:1861)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isPertinentToApplicability(ReferenceExpression.java:554)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.createInitialConstraintsForParameters(InferenceContext18.java:139)
	at org.eclipse.jdt.internal.compiler.lookup.ConstraintExpressionFormula.inferInvocationApplicability(ConstraintExpressionFormula.java:271)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationApplicability(InferenceContext18.java:217)
	at ...
I fixed the NPE here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=8da497be802fa99e80a3f90a1137af05842698d7

Program still does not compile though.
Thanks for the example. We report

"The method consume(T) in the type X is not applicable for the arguments (X::bar)"

I checked with the spec (0.8.0 even) and this seems to be the correct answer. Seeing javac deviate I requested clarification: http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2013-December/000477.html
This somewhat similar code throws up an NPE in a different location:

interface Functional { int foo(); }

class X {
    static int bar() {
        return -1;
    }
    static <T> T consume(T t) { return null; }

    public static void main(String[] args) {
    	Functional f = consume(X::bar);
    }  
}

Stacktrace:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.lookup.IntersectionCastTypeBinding.isCompatibleWith(IntersectionCastTypeBinding.java:120)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.resolveType(ReferenceExpression.java:376)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:634)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4490)
*** Bug 424521 has been marked as a duplicate of this bug. ***
Looking at the answer on the EG list (http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2013-December/000478.html) we apparently never made that adjustment in ReferenceExpression.isPertinentToApplicability() - I checked: the addition is indeed present in 0.9.2.

Fixed and tests enabled via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=5f8bc31fdd9227264ffdb0d653c171e78b54416c


[1.8][compiler] Generic method call with method reference argument fails to resolve properly.



Bug 424403 - [1.8][compiler] Generic method call with method reference argument fails to resolve properly. 