With type annotations for null analysis, more patterns of incompatibility arise
which deserve specific analysis and reporting.

Consider:
  List<@NonNull String> nonNullStrings;
  List<@NonNull String> nullableStrings;
  List<String> strings;

(A) Incompatible:
  nonNullStrings = nullableStrings;
  nullableStrings = nonNullStrings;

(B) Lossy (but safe) conversions:
  strings = nonNullStrings;
  strings = nullableStrings;

(C) Unchecked, unsafe conversions:
  nonNullStrings = strings;
  nullableStrings = strings;


Current status:

(A) is mostly implemented, exception:
 - array content, nullable to nonnull incompatibility is not reported
Currently, this kind of incompatibility influences overload resolution, which
is wrong.

(B) works for array details, but not for type parameters.

(C) works for type parameters but not all situations involving array details


Note, that all checking for the above happens during resolve, no flow 
analysis involved.

With type annotations for null analysis, more patterns of incompatibility arise
which deserve specific analysis and reporting.

Consider:
  List<@NonNull String> nonNullStrings;
  List<@NonNull String> nullableStrings;
  List<String> strings;

(A) Incompatible:
  nonNullStrings = nullableStrings;
  nullableStrings = nonNullStrings;

(B) Lossy (but safe) conversions:
  strings = nonNullStrings;
  strings = nullableStrings;

(C) Unchecked, unsafe conversions:
  nonNullStrings = strings;
  nullableStrings = strings;


Current status:

(A) is mostly implemented, exception:
 - array content, nullable to nonnull incompatibility is not reported
Currently, this kind of incompatibility influences overload resolution, which
is wrong.

(B) works for array details, but not for type parameters.

(C) works for type parameters but not all situations involving array details


Note, that all checking for the above happens during resolve, no flow 
analysis involved.
Resolved by:

- Let TypeBinding.isCompatibleWith(..) use the unannotated() types
  (new TagBits.HasNullTypeAnnotation for efficient checks)
  => resolve does not report errors based on annotation mismatch

- Consistently use Statement.findNullTypeAnnotationMismatch(..) from analyse:
  - Statement.analyseOneArgument18(..)
  - Statement.checkAssignmentAgainstNullAnnotation(..)
    (for Assingment, LocalDeclaration, ForeachStatement)
  - ReturnStatement.checkAgainstNullAnnotation(..)

- Parameterized types:
  - deep analysis (Statement.findNullTypeAnnotationMismatch())
  - deep unwrapping in PTB.unannotated()

- some further bugfixes

Released for BETA_JAVA8 via commit 323d52f789e646d704223fd3ac5d22c4e4efec25
Is there an explanation somewhere of why "nullableStrings = nonNullStrings" is incompatible?  This is not intuitive to me.  Thanks.
(In reply to Chris Hubick from comment #2)
> Is there an explanation somewhere of why "nullableStrings = nonNullStrings"
> is incompatible?

Hmm, I guess it's because then it would be possible to write legal code manipulating nullableStrings, which would lead to nonNullStrings containing nulls.

In a situation where I have an interface providing a method accepting an immutable typed object like this:

@NonNull String getResult(@NonNull Callable<@Nullable String> callable, @NonNull String defaultResult) throws Exception {
  @Nullable String r = callable.call();
  return (r != null) ? r : defaultResult;
}

If I need to accommodate that method being called with either 'Callable<@Nullable String>' or 'Callable<@NonNull String>', is the correct behaviour here to actually leave the null annotation in my interface as *unspecified* (i.e. 'Callable<String>' instead of 'Callable<@Nullable String>')?

Thanks.
Right, in your example a type argument with unspecified nullness is all you need: The method parameter accepts both kinds of lists, and assigning the result from call() to @Nullable String is OK in both cases.

Should you need more, there are a more places to put annotations with JSR 308, opening many interesting design choices. I'm collecting examples for my talk at EclipseCon next month :)
Yeah, I still run across problems in the real world...

<V> void example(List<? super V> list, V v) {}

<V> void test(List<? super V> list, @Nullable V v) {
  example(list, null); // No warnings.
  example(list, v); // Warning: Null type safety (type annotations): The expression of type 'List<capture#>' needs unchecked conversion to conform to 'List<? super @Nullable V>'
  example(list, (V)v); // Warning: Unnecessary cast from V to V (but no null warnings)
}

Even leaving the null constraint unspecified for the List content type, I still get warnings about the list argument on the call, due to null constraints inferred from *other* variables :(


[1.8][null] differentiate type incompatibilities due to null annotations



Bug 415291 - [1.8][null] differentiate type incompatibilities due to null annotations 