// --
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

public class X<T> {
	T foo(@NonNull T t) {
		return t;
	}
	public static void main(String[] args) {
		X<String> xs = new X<String>();
		xs.foo("");
	}
	
} 

// without null analysis enabled, compiles ok.

// --
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

public class X<T> {
	T foo(@NonNull T t) {
		return t;
	}
	public static void main(String[] args) {
		X<String> xs = new X<String>();
		xs.foo("");
	}
	
} 

// without null analysis enabled, compiles ok.
Thanks for taking a look.
Issue here:
Scope.substitute(Substitution,TypeBinding) couldn't look into the PTB wrapping a 
TypeVariableBinding.

Solution:

substitute() must
 - unwrap the given type by calling unannotated()
 - perform the substitution
 - merge info from substitution with original annotations

Released via commit 6e652c66c504914c1daaa584a7eee66b8e87dca4


[1.8][compiler][null] Overload resolution fails with null annotations



Bug 416183 - [1.8][compiler][null] Overload resolution fails with null annotations 