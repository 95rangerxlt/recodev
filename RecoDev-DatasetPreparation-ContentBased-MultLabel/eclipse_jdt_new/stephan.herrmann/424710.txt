Using Eclipse Java Development Tools Patch for Java 8 Support (BETA) 1.0.0.v20131228-0104_BETA_JAVA8

Steps to reproduce:

1 Create empty default 1.8 Java project with wizard
2 Copy/paste this code (accepted by 1.8 javac) to the src folder:

==============
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Stream;

public class MapperTest {

    public static void main( String... argv ){
        List<String> data = Arrays.asList("abc", "123", "1a", "?!?");
        List<Pattern> patterns = Arrays.asList(Pattern.compile("[a-z]+"), Pattern.compile("[0-9]+"));
		patterns.stream()
				.flatMap(
						p -> {
							Stream<Matcher> map = data.stream().map(p::matcher);
							Stream<Matcher> filter = map.filter(Matcher::find);
							Function<? super Matcher, ? extends Object> mapper = Matcher::group;
							mapper = matcher -> matcher.group();
							return filter.map(mapper);
						})
				.forEach(System.out::println);
    }
}
==============

Exception below will be reported during build:

Error
Sat Dec 28 10:31:29 CET 2013
Errors running builder 'Java Builder' on project 'Java8Examples'.

java.lang.ClassCastException: org.eclipse.jdt.internal.compiler.lookup.ProblemFieldBinding cannot be cast to org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding
	at org.eclipse.jdt.internal.compiler.ast.SingleNameReference.localVariableBinding(SingleNameReference.java:849)
	at org.eclipse.jdt.internal.compiler.ast.Assignment.resolveType(Assignment.java:199)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1016)
	at org.eclipse.jdt.internal.compiler.ast.Block.resolve(Block.java:123)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.resolveType(LambdaExpression.java:367)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolveTypeExpecting(Expression.java:1046)
	at org.eclipse.jdt.internal.compiler.ast.FunctionalExpression.checkAgainstFinalTargetType(FunctionalExpression.java:140)
	at org.eclipse.jdt.internal.compiler.ast.ASTNode.resolvePolyExpressionArguments(ASTNode.java:693)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:854)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:683)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:591)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1016)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:620)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:303)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:531)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1209)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1319)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:570)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:770)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Thread.java:744)

Removing line 20 (mapper = matcher -> matcher.group();) fixes the problem, also changing the lines 19-20 to 
Function<? super Matcher, ? extends Object> mapper = matcher -> matcher.group();
fixes the problem too.

The assignment to the local variable doesn't work here...

Using Eclipse Java Development Tools Patch for Java 8 Support (BETA) 1.0.0.v20131228-0104_BETA_JAVA8

Steps to reproduce:

1 Create empty default 1.8 Java project with wizard
2 Copy/paste this code (accepted by 1.8 javac) to the src folder:

==============
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Stream;

public class MapperTest {

    public static void main( String... argv ){
        List<String> data = Arrays.asList("abc", "123", "1a", "?!?");
        List<Pattern> patterns = Arrays.asList(Pattern.compile("[a-z]+"), Pattern.compile("[0-9]+"));
		patterns.stream()
				.flatMap(
						p -> {
							Stream<Matcher> map = data.stream().map(p::matcher);
							Stream<Matcher> filter = map.filter(Matcher::find);
							Function<? super Matcher, ? extends Object> mapper = Matcher::group;
							mapper = matcher -> matcher.group();
							return filter.map(mapper);
						})
				.forEach(System.out::println);
    }
}
==============

Exception below will be reported during build:

Error
Sat Dec 28 10:31:29 CET 2013
Errors running builder 'Java Builder' on project 'Java8Examples'.

java.lang.ClassCastException: org.eclipse.jdt.internal.compiler.lookup.ProblemFieldBinding cannot be cast to org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding
	at org.eclipse.jdt.internal.compiler.ast.SingleNameReference.localVariableBinding(SingleNameReference.java:849)
	at org.eclipse.jdt.internal.compiler.ast.Assignment.resolveType(Assignment.java:199)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1016)
	at org.eclipse.jdt.internal.compiler.ast.Block.resolve(Block.java:123)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.resolveType(LambdaExpression.java:367)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolveTypeExpecting(Expression.java:1046)
	at org.eclipse.jdt.internal.compiler.ast.FunctionalExpression.checkAgainstFinalTargetType(FunctionalExpression.java:140)
	at org.eclipse.jdt.internal.compiler.ast.ASTNode.resolvePolyExpressionArguments(ASTNode.java:693)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:854)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:683)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:591)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1016)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:620)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:303)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:531)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1209)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1319)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:570)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:770)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Thread.java:744)

Removing line 20 (mapper = matcher -> matcher.group();) fixes the problem, also changing the lines 19-20 to 
Function<? super Matcher, ? extends Object> mapper = matcher -> matcher.group();
fixes the problem too.

The assignment to the local variable doesn't work here...
Stephan, please take a look. Problem comes from multiple evaluation of the
lambda expression once in this call stack:

LambdaExpression.resolveType(BlockScope) line: 187	
LambdaExpression(Expression).resolveTypeExpecting(BlockScope, TypeBinding) line: 1046	
LambdaExpression(FunctionalExpression).checkAgainstFinalTargetType(TypeBinding) line: 140	
InferenceContext18.acceptPendingPolyArguments(BoundSet, TypeBinding[], boolean) line: 905	
InferenceContext18.rebindInnerPolies(BoundSet, TypeBinding[]) line: 847	
InferenceContext18.rebindInnerPolies(MethodBinding, InvocationSite) line: 833	
InferenceContext18.inferInvocationType(Invocation, TypeBinding[], ParameterizedGenericMethodBinding) line: 475	
MethodScope(Scope).inferInvocationType(InvocationSite, MethodBinding, TypeBinding[]) line: 4873	
MethodScope(Scope).findMethod(ReferenceBinding, char[], TypeBinding[], InvocationSite, boolean) line: 1637	
MethodScope(Scope).getMethod(TypeBinding, char[], TypeBinding[], InvocationSite) line: 2751	
MessageSend.findMethodBinding(BlockScope, TypeBinding[], boolean) line: 851	
MessageSend.resolveType(BlockScope) line: 683	
MessageSend.resolveType(BlockScope) line: 591	
MessageSend(Expression).resolve(BlockScope) line: 1016	
MethodDeclaration(AbstractMethodDeclaration).resolveStatements() line: 620	
MethodDeclaration.resolveStatements() line: 303	
MethodDeclaration(AbstractMethodDeclaration).resolve(ClassScope) line: 531	
TypeDeclaration.resolve() line: 1211	


and once more in this:

LambdaExpression.resolveType(BlockScope) line: 187	
LambdaExpression(Expression).resolveTypeExpecting(BlockScope, TypeBinding) line: 1046	
LambdaExpression(FunctionalExpression).checkAgainstFinalTargetType(TypeBinding) line: 140	
ASTNode.resolvePolyExpressionArguments(Invocation, MethodBinding, TypeBinding[]) line: 696	
MessageSend.findMethodBinding(BlockScope, TypeBinding[], boolean) line: 854	
MessageSend.resolveType(BlockScope) line: 683	
MessageSend.resolveType(BlockScope) line: 591	
MessageSend(Expression).resolve(BlockScope) line: 1016	
MethodDeclaration(AbstractMethodDeclaration).resolveStatements() line: 620	
MethodDeclaration.resolveStatements() line: 303	
MethodDeclaration(AbstractMethodDeclaration).resolve(ClassScope) line: 531	
TypeDeclaration.resolve() line: 1211
Thanks, Srikanth, those stacks were very helpful, pointing me directly to the root cause (need to better distinguish various situations leading to the final resolution of poly expressions - here: as an argument to an inferred outer poly vs as an argument to a standalone expression).

Fix has been released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=16bbff04917b9cd9bd7cceaf4adfc1563daef0bc
resolved
*** Bug 424906 has been marked as a duplicate of this bug. ***


[1.8][compiler] CCE in SingleNameReference.localVariableBinding



Follow up changes for Bug 426984 - [1.8][inference] Capture problem in GenericsRegressionTest_1_8.testBug424710 

Bug 424710 - [1.8][compiler] CCE in SingleNameReference.localVariableBinding 