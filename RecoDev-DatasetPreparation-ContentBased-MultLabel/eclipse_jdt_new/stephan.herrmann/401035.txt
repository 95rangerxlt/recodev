BETA_JAVA8: 

org.eclipse.jdt.core.tests.compiler.parser.GenericDietRecoveryTest.test0025()
and
org.eclipse.jdt.core.tests.model.ReconcilerTests.testMethodWithError01()
have started failing since yesterday.

At least on the first, I could see that if I roll back the clock to
before c4baf766be166b04f595eec5cebbd2a64f399daa the problem goes away.

BETA_JAVA8: 

org.eclipse.jdt.core.tests.compiler.parser.GenericDietRecoveryTest.test0025()
and
org.eclipse.jdt.core.tests.model.ReconcilerTests.testMethodWithError01()
have started failing since yesterday.

At least on the first, I could see that if I roll back the clock to
before c4baf766be166b04f595eec5cebbd2a64f399daa the problem goes away.
Stephan, thanks in advance.
Created attachment 227184
Proposed test adjustments
Both changes witness the fact that since Bug 383973 we now recover more information, viz. we no longer forget method modifiers during certain scenarii of recovery.

For GenericDietRecoveryTest I'm sure the change is an improvement.
The changes in ReconcilerTests could use a glance by a second pair of eye balls, since we seem to see a residue of accidental differences.
I split the failing test into one with changed expected output, and another one where I tweaked the input to meet the original expectation.

Tests are running.
The completion parser still gives the old result for GenericDietRecoveryTest.
I'll take a look whether this is a hint at some undesirable inconsistency.

Other than that tests are happy.
Here's the difference between regular and completion parsers:
The former initializes annotationRecoveryActivated to true, that latter to false.
This has an effect inside checkAndSetModifiers():

	if (this.currentElement != null && this.annotationRecoveryActivated) {
		this.currentElement.addModifier(flag, this.modifiersSourceStart);
	}

During completion this is where we lose the modifier.
I'm ambivalent how to handle this:
- We might just remove the check for annotationRecoveryActivated (here and in consumePushCombineModifiers()).
  I see now relevant gain in skipping this trivial step -> both parsers would behave the same.
- We might just adjust the test expectation.
  I see no relevant loss for completion parser in not having this modifier (though it might be difficult to show that the modifier is completely irrelevant)
  -> tests would be happy again and one fewer change in the Parser.

Does anyone have a preference one way or other?
(In reply to comment #5)
> Here's the difference between regular and completion parsers:
> The former initializes annotationRecoveryActivated to true, that latter to
> false.
> This has an effect inside checkAndSetModifiers():
> 
> 	if (this.currentElement != null && this.annotationRecoveryActivated) {
> 		this.currentElement.addModifier(flag, this.modifiersSourceStart);
> 	}
> 
> During completion this is where we lose the modifier.
> I'm ambivalent how to handle this:
> - We might just remove the check for annotationRecoveryActivated (here and
> in consumePushCombineModifiers()).

Why don't we just override this method in CompletionParser ? This method
was recently added and it is in effect doing what checkAndSetModifiers is
doing but it is not convenient to call it at that point due to various 
side effects.

We should logically override it to mimic all modifiers being funnelled
through checkAndSetModifiers.

That said, I am puzzled why this failure didn't show up earlier in my
testing - Why now only after your change ?
(In reply to comment #6)
> > I'm ambivalent how to handle this:
> > - We might just remove the check for annotationRecoveryActivated (here and
> > in consumePushCombineModifiers()).
> 
> Why don't we just override this method in CompletionParser ? This method
> was recently added and it is in effect doing what checkAndSetModifiers is
> doing but it is not convenient to call it at that point due to various 
> side effects.

To make sure we're on the same page: in the test in question it's the old
checkAndSetModifiers() that behaves differently for both parsers.

For the matter at hand I'd consider overriding as too much attention for
a marginal issue :), my question is only if annotationRecoveryActivated
should control whether or not modifier flags are skipped, too.
The check is already there, and I'm just considering to remove it.
(So that annotationRecoveryActivated only affects consumeAnnotationName()).

OTOH, overriding the new method consumePushCombineModifiers() as to
set CompletionParser.hasUnusedModifiers = true is probably a good idea,
but that's a different story and I don't have a test for this topic.
(Cf. CompletionParser.checkAndSetModifiers()).


> That said, I am puzzled why this failure didn't show up earlier in my
> testing - Why now only after your change ?

Before my change some modifiers were simply dropped, unless also annotations
had been recovered. This wasn't all that bad, but with default methods we
were getting undesirable secondary errors if AccDefaultMethod was missing.
That's why I took care to make recovery of modifiers more complete.
(In reply to comment #7)

> To make sure we're on the same page: in the test in question it's the old
> checkAndSetModifiers() that behaves differently for both parsers.

OK, I think I understand it now.

> The check is already there, and I'm just considering to remove it.

OK, seems reasonable.

> OTOH, overriding the new method consumePushCombineModifiers() as to
> set CompletionParser.hasUnusedModifiers = true is probably a good idea,

Could you please ? Now that you are touching somewhat related code. I am
fine with the proof of correctness being just your review with no additional 
test to establish it, if it cannot be ascertained readily how to test it
- Essentially, we want the same behavior if the special
provision for consuming default was not put in place and each modifier
marched its way through checkAndSet*. Thanks
Fix released via commit 5abbc9ddba0809fbf49d16dc724883e6fc17121c

Here's what I ended up doing:
* split ReconcilerTests.testMethodWithError01() into two:
  - one with adjusted expectation
  - one with tweaked input to meet the old expectation
* adjust expectation in GenericDietRecoveryTest.test0025()
  - do expect recovery of the modifier "public"
* change Parser as to handle modifier flags during recovery even if annotationRecoveryActivated is false
  -> this makes CompletionParser consistent with the regular parser after the change in bug 383973.
* added overriding CompletionParser.consumePushCombineModifiers() to mimic a corresponding override of checkAndSetModifiers()
  -> establish consistency regarding CompletionParser#hasUnusedModifiers, proof by intuition :)
* run all JDT/Core tests


[1.8] A few tests have started failing recently



Bug 401035 - [1.8] A few tests have started failing recently 