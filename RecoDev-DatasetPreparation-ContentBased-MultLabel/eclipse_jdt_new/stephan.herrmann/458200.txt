Sibling of bug 458186, but now we want to support adding annotations without any compile errors/warnings. 
Rationale: by pointing to the library method in an editor when adding annotations, we can completely hide the attached external annotations.

Sibling of bug 458186, but now we want to support adding annotations without any compile errors/warnings. 
Rationale: by pointing to the library method in an editor when adding annotations, we can completely hide the attached external annotations.
Created attachment 250286
incomplete draft

Based on latest in bug 458201 (plus JDT/Core bug 458577), this patch succeeds to implement two quick assists on a class file editor, to add an external @Nullable or @NonNull annotation to the return type of a library method (select the return type and hit Ctrl-1 to invoke).

This basically works alright, however, after applying the quickfix, Java model cache seems to contain some stale element (the problematic ClassFileWorkingCopy from bug 458201 ?). I'll look into what needs to be done to clean this up on all paths.

Goal in this bug is to get have it consolidated within the M6 cycle, so we can provide all necessary API in JDT/Core before API freeze.
(In reply to Stephan Herrmann from comment #1)
> This basically works alright, however, after applying the quickfix, Java

s/quickfix/quick assist/
Created attachment 250356
minor update (v2)

- Adjust to a signature change in JDT/Core (sherrmann/ExternalAnnotations) made on behalf of bug 440474 comment 27 (simplification)

- Don't even start computing these assists if annotation based null analysis is disabled.


Based on latest in bug 458201 this actually works pretty nicely. I also have preparations in my workspace for adding annotations to any detail of a type (type argument, type bound, you name it).

I'll suspend this work until I know more about the background behind bug 458201 comment 3
Created attachment 250414
update (v3)

This version demonstrates how a quick assists can insert external null annotations for any TYPE_USE position - currently only within the return type of a method, support for method parameters can be easily added when we agree on the general approach. Also removing an existing annotation is supported.
Just we don't yet read the external annotations in advance, so quick assists are offered even if they're no-op.
Changing title to reflect the strategy change in the enabling bug 458201.

Note, that attachment 251130 from bug 458201 contains an updated version of the patch in this bug, too.
Created attachment 251267
update v(5)

This patch enhances the recent work from bug 458201.

At this point the payload, i.e., the actual Annotate proposals are much more complete:

- offered on return types and parameters (including their details)
- fixes issues with array types (mechanics plus display label)
- performs a dry-run of the annotation update and only offers real changes
  -> at any location exactly 2 of the three proposals are offered
     (add @NonNull, add @Nullable, remove existing)
- renders the change using HTML, highlighting the exact difference:
  - addition in bold, removal with strike-through
- refuse to update files outside the workspace

Pending: automated tests.
Created attachment 251330
update (v6)

Next version of a combined patch for this bug and bug 458201.

New: a first cut at automated tests for the new command.

Two things to call out:

(1) This fix includes a partial copy from org.eclipse.jdt.core.tests.util.Util from JDT/Core.

Rationale: I want to be able to create jars with source attachment on the fly during each test. This functionality is available in JDT/Core tests, but I assume that copying 700 LOC is less disruptive than pulling in a new dependency which would require all JDT/UI developers to always have the JDT/Core tests in their workspaces, too.

(2) API tools told me to update o.e.jdt.ui to 3.11.0.qualifier, due to a new constant in IJavaEditorActionDefinitionIds (version update is included in my patch).



Final remaining task: populate the new test class as to reach a decent test coverage.
New Gerrit change created: https://git.eclipse.org/r/43485

WARNING: this patchset contains 2491 new lines of code and may require a Contribution Questionnaire (CQ) if the author is not a committer on the project. Please see:https://wiki.eclipse.org/Project_Management_Infrastructure/Creating_A_Contribution_Questionnaire
WARNING: this patchset contains 2492 new lines of code and may require a Contribution Questionnaire (CQ) if the author is not a committer on the project. Please see:https://wiki.eclipse.org/Project_Management_Infrastructure/Creating_A_Contribution_Questionnaire
Most of the functionality for this bug has been released (for 4.5 M6) via http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=a84e33bf4d28ab3cbe043bca574f66a36d35ca24 (together with the ground work from bug 458201)

With this commit it is possible to annotate any type (detail) in a method signature. At this point I'm holding back:

* Annotating field types - I have it implemented, but it needs API from JDT/Core that is not yet contained in any I-build.

* Annotating type parameters, super types - Not a priority currently.


I'll release the part for field types after the next I-Build (Sunday) and then close this bug.
(In reply to Stephan Herrmann from comment #10)
> I'll release the part for field types after the next I-Build (Sunday) and
> then close this bug.

If the changes in JDT Core are ready, then you don't have to wait with releasing the UI changes. All JDT UI committers have JDT Core in source anyway. It would just be nice to wait for a nightly build, so that Gerrit builds don't break.
Other than that, I prefer early commits over last-minute changes.
New Gerrit change created: https://git.eclipse.org/r/43741
Gerrit change https://git.eclipse.org/r/43741 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=96d9894e53c72bba340545972dd1856206e43aad
(In reply to Markus Keller from comment #11)
> (In reply to Stephan Herrmann from comment #10)
> > I'll release the part for field types after the next I-Build (Sunday) and
> > then close this bug.
> 
> If the changes in JDT Core are ready, then you don't have to wait with
> releasing the UI changes. All JDT UI committers have JDT Core in source
> anyway. It would just be nice to wait for a nightly build, so that Gerrit
> builds don't break.

Thanks, that's good to know. 

Anyway, the relevant changes in Core are available even in the extra I-build I20150311-1300 :)

I'll keep testing and improving the underlying mechanics in JDT/Core, but from UI p.o.v. this feature is now complete, and even approved by Hudson :)


[null] "Annotate" proposals for adding external null annotations to library classes



Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - support parameter rewriting for Bug 458200 - bug fix for keeping existing annotation 

Bug 458200 - [null] "Annotate" proposals for adding external null annotations to library classes - added support for annotating field types 

Bug 458200, bug 458201: fixed typo in ExternalNullAnnoatationChangeProposals 

Bug 458201 - Offer new command "Annotate" on ClassFileEditor Bug 458200 - [null] "Annotate" proposals for adding external null annotations to library classes 