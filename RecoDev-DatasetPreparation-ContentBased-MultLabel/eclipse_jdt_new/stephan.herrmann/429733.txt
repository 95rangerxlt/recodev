Running this snipped in Eclipse JAVA_BETA8 produces an error (see below). Running it on the command-line with jdk8 works fine.

public class Main {
	
	public static void main(String[] args) {
		test(new Some<>(1.1d));
	}

	static <S> void test(Option<S> value) {
	}
	
	static interface Option<T> {
	}
	
	static class Some<T> implements Option<T> {
		Some(T value) {
		}
	}

}

Exception in thread "main" java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    Main.main([Ljava/lang/String;)V @7: invokespecial
  Reason:
    Type double_2nd (current frame, stack[3]) is not assignable to 'java/lang/Object'
  Current Frame:
    bci: @7
    flags: { }
    locals: { '[Ljava/lang/String;' }
    stack: { uninitialized 0, uninitialized 0, double, double_2nd }
  Bytecode:
    0000000: bb00 1059 1400 12b7 0014 b800 17b1     

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2688)
	at java.lang.Class.getMethod0(Class.java:2937)
	at java.lang.Class.getMethod(Class.java:1771)
	at sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)

Running this snipped in Eclipse JAVA_BETA8 produces an error (see below). Running it on the command-line with jdk8 works fine.

public class Main {
	
	public static void main(String[] args) {
		test(new Some<>(1.1d));
	}

	static <S> void test(Option<S> value) {
	}
	
	static interface Option<T> {
	}
	
	static class Some<T> implements Option<T> {
		Some(T value) {
		}
	}

}

Exception in thread "main" java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    Main.main([Ljava/lang/String;)V @7: invokespecial
  Reason:
    Type double_2nd (current frame, stack[3]) is not assignable to 'java/lang/Object'
  Current Frame:
    bci: @7
    flags: { }
    locals: { '[Ljava/lang/String;' }
    stack: { uninitialized 0, uninitialized 0, double, double_2nd }
  Bytecode:
    0000000: bb00 1059 1400 12b7 0014 b800 17b1     

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2688)
	at java.lang.Class.getMethod0(Class.java:2937)
	at java.lang.Class.getMethod(Class.java:1771)
	at sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)
Thanks Daniel, I'll take a look. Do you happen to know (readily) if this
is a recent regression ? Thanks.
Should be - I updated the beta8 plugin right before bug submission.

Beside this item the jdt plugins feel pretty stable to me. Thx for your great work!
(In reply to Daniel Dietrich from comment #2)
> Should be - I updated the beta8 plugin right before bug submission.
> 
> Beside this item the jdt plugins feel pretty stable to me. Thx for your
> great work!

Thanks, you are very welcome. 

ATM, a fix for the present defect is in plan for GA. Analysis underway.
Great :)
Stephan, I don't see a call to resolvePart3. 

ASTNode.resolvePolyExpressionArguments(Invocation, MethodBinding, TypeBinding[], Scope) returns immediately right at the top at innersNeedUpdate() call.

I think we should also proactively check the case of other poly expressions
(MS, ECC) to see if they suffer from the same problem.

I have released (short-circuited-for-1.8 test at) org.eclipse.jdt.core.tests.compiler.regression.GenericsRegressionTest.test429733()

This covers only AE though.

Thanks for taking a look.
Basically computeConversions call is short circuited.
(In reply to Srikanth Sankaran from comment #5)

> I think we should also proactively check the case of other poly expressions
> (MS, ECC) to see if they suffer from the same problem.

Stephan, could you review the additional tests I released for MS and ECC (these
pass as is) to see if they adequately test the equivalent scenario (and if not
mend suitably) ? Thanks.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=35063ce5d9a09463d0cd8cba0e3ead1e4b545071
Should resolvePart2 be calling resolvePart3 automatically under the right
circumstances ? Just wondering.
Created attachment 240612
Plausible patch

Stephan, please take a look, passes all Java 8 tests.
I wasn't totally sure whether this is the best place the final bits of
resolution that are missing or if it should happen inside the block
after the comment: 

// apply inference results onto the allocation type of inner diamonds:

Proceed to release if all is well. Thanks
While retesting a slightly updated patch, time to answer some questions:

(In reply to Srikanth Sankaran from comment #5)
> Stephan, I don't see a call to resolvePart3.

I see. That's a bug, yes.

> I think we should also proactively check the case of other poly expressions
> (MS, ECC) to see if they suffer from the same problem.
> 
> I have released (short-circuited-for-1.8 test at)
> org.eclipse.jdt.core.tests.compiler.regression.GenericsRegressionTest.
> test429733()
> 
> This covers only AE though.

The problem cannot be reproduced for MS or ECC, because those directly call checkInvocationArguments from within resolveType(..). No way to escape this :)

The problem is rooted in the splitting of AE.resolveType(..) into three parts.

(In reply to Srikanth Sankaran from comment #6)
> Basically computeConversions call is short circuited.

Right, and that is called from checkInvocationArgument(s).

(In reply to Srikanth Sankaran from comment #8)
> Should resolvePart2 be calling resolvePart3 automatically under the right
> circumstances ? Just wondering.

The purpose of resolvePart2 is to be able to do tentative resolves, while we still haven't determined the final target type. The method cannot determine by itself, in which context it is invoked, viz. if it is OK to proceed to resolvePart3. Instead I inspected all callers of resolvePart2 (via binding()):
 - 3 calls are from within inference: must not call resolvePart3
 - 2 appear during finalization of inference and have a subsequent call
   to checkAgainstFinalTargetType() (incl. this patch :) )
 - 1 also appears during finalization of inference but is on a branch
   where we know the the invocation is not poly -> not a diamond, hence
   not performing chopped resolve.

(In reply to Srikanth Sankaran from comment #10)
> I wasn't totally sure whether this is the best place the final bits of
> resolution that are missing or if it should happen inside the block
> after the comment: 
> 
> // apply inference results onto the allocation type of inner diamonds:

Your patch is already pretty hot, but the alternative you mention is on-the-nail, so that's what I'm currently re-testing.
Explanation:
 - rebindInnerPolies treats all poly expressions that participated as inner inferences in the current inference (at any connected level of nesting)
 - acceptPendingPolyArguments additionally treats those direct invocation arguments, that may require some updates, too.

My intention is to give rebindInnerPolies the main responsibility, because this one is aware of the results of the composite inference. Calling setExpectedType() is the only help that acceptPendingPolyArguments needs to provide (only here we know the position inside the argument list). Ill add a comment to the code.

I'll release once tests are done.
released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=2820b43f038a3bcfacbc2797064d7e5f6a2cb56e


[1.8][bytecode] Bad type on operand stack



Bug 431577 - [1.8][bytecode] Bad type on operand stack (different than Bug 429733) 

Bug 429733 - [1.8][bytecode] Bad type on operand stack 

More junits for Bug 429733 - [1.8][bytecode] Bad type on operand stack 

junits for Bug 429733 - [1.8][bytecode] Bad type on operand stack 