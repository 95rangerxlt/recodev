When nullness type annotations are evaluated some of this information is seen both via the type and via the declaration (argument, local, method).

I should ensure that analysis is not performed redundantly (which would entail redundant errors/warnings).

As one manifestation of this endeavor the field MethodBinding.parameterNonNullness may be avoided entirely when in 1.8 mode.

When nullness type annotations are evaluated some of this information is seen both via the type and via the declaration (argument, local, method).

I should ensure that analysis is not performed redundantly (which would entail redundant errors/warnings).

As one manifestation of this endeavor the field MethodBinding.parameterNonNullness may be avoided entirely when in 1.8 mode.
I think we may be forced to actually *change* the Target meta annotations of @NonNull et al, because admitting these annotations both as declaration annotation *and* type annotation would result in ambiguities:
Consider a parameter in 1.8 code which is specified as "@NonNull String[] arg".
- as a declaration annotation it means 'arg' in non-null
- as a type declaration it means that the elements of the array are non-null.
- with replication as both kinds of annotation it will have both meanings simultaneously - confusing!
Thus, a variant of @NonNull suitable for 1.8 compilation should only have the TYPE_USE target.

This switch will have significant impact on the issue of this bug.

As a consequence we need to find a way to distribute two variants of these annotations.
I agree that the long-term solution for 1.8 and greater is to have only the TYPE_USE target.

The transition will be painful for clients anyway, since they will have to make a pass over all usages of @NonNull etc. and move the annotation to the correct position for jsr308. I still consider the nullness support as experimental, so I think that the main goal should be to have a good solution for the future. Breaking early adopters is acceptable in this situation.

In BETA_JAVA8, we should move org.eclipse.jdt.annotation to 2.0.0 with BREE 1.8 and entirely drop support for the old version.
Updates for the annotation bundle are tracked in bug 414444.

Implementation of null analysis based on type annotations is essentially
complete via bug 392099 (not yet committed).


Here I'm documenting a few implementation decisions that enable both modes
to co-exist with least-possible overlap in the compiler:

In SE5 mode, information about null annotations is stored in these locations:
- VariableBinding.tagBits
- MethodBinding.tagBits (for the return type)
- MethodBinding.parameterNonNullness (for parameters)


With JSR 308 none of these are used by the analysis, but all null annotations
are encoded into the type bindings (via tagBits). This is a lean version of
the "deep encoding", type bindings are replicated when null annotations are
attached. Annotated type bindings are technically either 
ParameterizedTypeBinding or ArrayBinding, with the special case that a PTB
can now have null arguments.

Unfortunately, the parser does not produce type annotations for the locations
mentioned above, so even if null annotations only have target=TYPE_USE they
will first be processed as declaration annotations. As a result we still get
the corresponding tagBits in VariableBinding and MethodBinding, which will
then be translated into annotated TypeBindings in 
- Argument.createBinding()
- SourceTypeBinding.resolveTypeFor()
- SourceTypeBinding.resolveTypesFor()
LookupEnvironment.pushAnnotationIntoType() accounts for the fact, that an
annotation mistaken for a declaration annotation must be applied to the
outermost mentioned type ("@NonNull Outer.Inner" not "Outer.@NonNull Inner").

Note, that a lambda expression or method reference will never use field
parameterNonNullness on its resolved MethodBinding.


A few methods exist in two variants (with and without suffix "18"):
- AbstractMethodDeclaration.analyseArguments()
- ImplicitNullAnnotationVerifier.recordArgNonNullness()
- MethodBinding.fillInDefaultNonNullness()
Resolved for BETA_JAVA8 via 
commit 8a1621e802c664e59aba36b8a87f59ae57902e37 on behalf of bug 392099.


[1.8][compiler][null] avoid overlap between old and new null analysis

