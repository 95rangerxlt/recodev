Eclipse 3.1.1

If you convert the anonymous class to nested in the following example the generated code doesn't compile:
----------------------------------------------------
import java.awt.Point;

public class Sup
{
  interface ISup
  {
    void m();
  }

  public Sup(ISup isup)
  {
  }
}

class Sub extends Sup
{

  public Sub(final Point p)
  {
    super(new ISup()
    {//convert here
      final int x = p.x;
      final int y = p.y;
      public void m()
      {
        System.out.println(x + y);
      }
    });
  }

}
----------------------------------------------------------------

There are 2 things that go wrong:

1. The generate inner class should be static.
2. the generated fields should be assigned properly.

Eclipse 3.1.1

If you convert the anonymous class to nested in the following example the generated code doesn't compile:
----------------------------------------------------
import java.awt.Point;

public class Sup
{
  interface ISup
  {
    void m();
  }

  public Sup(ISup isup)
  {
  }
}

class Sub extends Sup
{

  public Sub(final Point p)
  {
    super(new ISup()
    {//convert here
      final int x = p.x;
      final int y = p.y;
      public void m()
      {
        System.out.println(x + y);
      }
    });
  }

}
----------------------------------------------------------------

There are 2 things that go wrong:

1. The generate inner class should be static.
2. the generated fields should be assigned properly.
Created attachment 234020
My patch

3rd patch submit of the day!
Comment on attachment 234020
My patch

- (In reply to comment #0)
> 2. the generated fields should be assigned properly.
There is no issue with the assignment of generated fields.

- In ConvertAnonymousToNestedRefactoring#mustInnerClassBeStatic(), we are already looping over getParent().
If the parent chain has a case for ASTNode.SUPER_CONSTRUCTOR_INVOCATION or ASTNode.CONSTRUCTOR_INVOCATION, just returning 'true' in that should be sufficient.

- A_test_35 has missing semicolon in the constructor body of Sub(ISup p).

- In the tests, the output files contains 'p.Point'. 
This is because the rtstub jar used for the tests does not contain 'java.awt' and hence Point is not resolved to 'java.awt.Point'.
You can use 'java.util.Date' in the tests instead of 'java.awt.Point', which is present in rtstub jar, as shown in the following example:
---------------------------------
package p;

import java.util.Date;

public class Sup {
	interface ISup {
		void m();
	}

	public Sup(ISup isup) {
	}
}

class Sub extends Sup {
	public Sub(final Date d) {
		super(new ISup() {
			private final long x= d.getTime();

			public void m() {
				System.out.println(x);
			}
		});
	}
}
---------------------------------

- Please add your credentials to the copyright headers and remove unnecessary changes.
Created attachment 234424
Code review changes, bug fix + unit test

This contribution complies with http://www.eclipse.org/legal/CoO.php
Thanks Nikolay. Released with:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=c8bde6abd9e953bb360e0e6bed3d101b6b664401


[convert anonymous] Convert Anonymous to nested generates wrong code



Fixed bug 159917: [convert anonymous] Convert Anonymous to nested generates wrong code 