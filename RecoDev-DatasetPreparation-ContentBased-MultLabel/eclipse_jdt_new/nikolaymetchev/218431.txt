Build ID: M20071023-1652

Steps To Reproduce:
1. Select identifier 'driver' on LINE 26.
2. Try to inline that occurence of that constant.
The resulting source code is illegal.

--------------------- Bug.java -----------------------
import static java.util.Arrays.asList;

class Bug {
private static abstract class Newby<Type extends Number>{}

private static abstract class Way<Type extends Number>{
		static final String STATE="State";

		abstract Newby<Type>scrape();
	}
	
	private static class Finger extends Way<Integer>{
		@Override
		Newby<Integer>scrape(){
			return new Newby<Integer>(){};
		}
	}

	private static final Finger driver=new Finger(){
		void make(){asList(STATE,"License");}
	};
			
	{
	abstract class ArtifactPage<Type extends Integer>{
			{
		asList(Way.STATE,driver); //// LINE 26 ////
			}	
		}
	}
}

More information:

Build ID: M20071023-1652

Steps To Reproduce:
1. Select identifier 'driver' on LINE 26.
2. Try to inline that occurence of that constant.
The resulting source code is illegal.

--------------------- Bug.java -----------------------
import static java.util.Arrays.asList;

class Bug {
private static abstract class Newby<Type extends Number>{}

private static abstract class Way<Type extends Number>{
		static final String STATE="State";

		abstract Newby<Type>scrape();
	}
	
	private static class Finger extends Way<Integer>{
		@Override
		Newby<Integer>scrape(){
			return new Newby<Integer>(){};
		}
	}

	private static final Finger driver=new Finger(){
		void make(){asList(STATE,"License");}
	};
			
	{
	abstract class ArtifactPage<Type extends Integer>{
			{
		asList(Way.STATE,driver); //// LINE 26 ////
			}	
		}
	}
}

More information:
The example seems to be incomplete. How does 'asList' look like?
Thanks for looking into this, Martin.

The example is a complete compilation unit without error.  Method asList() is declared by static import.
Oops, I lost the import.

I was able to reproduce:

 asList(Way<Integer>.STATE,"License")
is generated, should be
 asList(Way.STATE,"License")
 
Shorter example (the result looks similar):

public class InlineConstantBug2<T> {
    static int m = 0;

    // Invoke "Inline..." on "n"
    static final int n = m;

    static class C {
        void f() {
            int k = n;
        }
    }
}


Eclipse Java EE IDE for Web Developers.
Version: Juno Service Release 1
Build id: 20120920-0800
Created attachment 235604
fix + tests

This contribution complies with http://www.eclipse.org/legal/CoO.php
Created attachment 235749
fix + tests

This contribution complies with http://www.eclipse.org/legal/CoO.php

Improved the formatting and header comments.
Noopur, please review when you have some spare time during your Java 8 work. Thanks.
Thanks Nikolay, the patch points to the correct location for the fix.
However, I fixed it differently. Have a look in the commit.
Also, updated the contributors list in both the files to add bug description.
Released as:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=232462fe15c0da7b967daefd8a99ecabbc63729e
Thank you Noopur,
Your fix is of course a much better approach. I guess I have to keep learning more of the API.


[inline] problem with fields from generic types



Fixed bug 218431: [inline] problem with fields from generic types 