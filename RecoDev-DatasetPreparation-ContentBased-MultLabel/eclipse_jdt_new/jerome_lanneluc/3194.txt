EG (8/22/00 7:22:49 PM)
	when editing a JavaCompilation unit its contents is duplicated in 
memory. Once it is stored
	inside the buffer maintained by the JavaModel and once it is stored in 
the Text infrastructure's 
	document. This could be avoided by having a custom Document implement 
the IBuffer interface and 
	providing a factory mechanism to create Buffers in the BufferManager.

NOTES:

JBL (6/19/2001 2:42:52 PM)
	API change needed.

PM (9/13/2001 11:56:19 AM)
	Buffer is discussed to be moved down into the platform.

EG (8/22/00 7:22:49 PM)
	when editing a JavaCompilation unit its contents is duplicated in 
memory. Once it is stored
	inside the buffer maintained by the JavaModel and once it is stored in 
the Text infrastructure's 
	document. This could be avoided by having a custom Document implement 
the IBuffer interface and 
	providing a factory mechanism to create Buffers in the BufferManager.

NOTES:

JBL (6/19/2001 2:42:52 PM)
	API change needed.

PM (9/13/2001 11:56:19 AM)
	Buffer is discussed to be moved down into the platform.
JUI suggested we would define a factory method allowing them to supply their 
own document.
pls discuss API addition with Kai before moving ahead.
From Kai:

As you know there has been a long lasting recurring discussion about the buffer 
duplication we see when editing a compilation unit in the editor. Here is a 
proposal that would solve our problem and wouldn't hurt you. Only api additions 
would be necessary. Having this issue 
solved would enable us to be less vulnerable when performing code manipulations 
while having open editors.

Here it comes:

ICompilationUnit addition:
	IWorkingCopy getWorkingCopy(IBufferFactory factory);

IBufferFactory:	
	IBuffer createBuffer(IOpenable owner);

IBufferManager addition:
	IBuffer getBuffer(IOpenable owner, IBufferFactory factory);

Optionally default:
	BufferManager implements IBufferFactory
	
What do you think are the substantial disadvantages of this proposal? It would 
be good for us if we could find a solution as design decisions are queueing up 
relying on a decision. If you like we could talk about this on the phone 
tomorrow morning.

IBufferManager is internal. Do you plan to use it?
Added IWorkingCopy getWorkingCopy(IProgressMonitor, IBuffer) that returns an 
IWorkingCopy opened with the given buffer on ICompilationUnit.
Actually, the buffer must know its owner upon creation as this owner is used as 
the key in the buffer manager table. So we need a factory as Kai suggested.

Added 
IBufferFactory:	
	IBuffer createBuffer(IOpenable owner);

and changed getWorkingCopy to take a factory
ICompilationUnit:
	IWorkingCopy getWorkingCopy(IBufferFactory factory);


Added WorkingCopyTests.testWorkingCopyCustomizedBuffer()


DCR - JM - Buffer contents is duplicated (1G03HCP)



HEAD - Fix for 319425 

HEAD - Fix for 319425 

HEAD - Additional changes for 163194 

HEAD - Additional changes for 163194 

HEAD - Fix for 163194 

HEAD - Fix for 163194 

HEAD - Fix for 163194 

HEAD - Fix for 163194 

31947 

Bug 83194 - No selection in JRE combo when changing from "default" 

Bug 290135: Add new option for bug 163194 into the compiler preference page 