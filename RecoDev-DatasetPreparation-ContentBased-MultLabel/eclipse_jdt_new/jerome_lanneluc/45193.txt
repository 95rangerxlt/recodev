2.1.1 & 20031020

from bug 12955:
However, the hierarchy scope search only shows types that exist in jars. No 
types in the source path are shown in the results.

IJavaSearchScope scope = SearchEngine.createHierarchyScope(myIType);

SelectionDialog dialog =
JavaUI.createTypeDialog(
    getShell(),
    new ProgressMonitorDialog(getShell()),
    scope(),
    IJavaElementSearchConstants.CONSIDER_CLASSES,
    false);

I tried this 3.0 HEAD: The type dialog does only contain types from binaries.
I debugged into it. My guess is that there is a bug in 
HierarchyScope.buildResourceVector: The only add to this.resourcePaths is 
inside the 'root instanceof JarPackageFragmentRoot' then-block.

2.1.1 & 20031020

from bug 12955:
However, the hierarchy scope search only shows types that exist in jars. No 
types in the source path are shown in the results.

IJavaSearchScope scope = SearchEngine.createHierarchyScope(myIType);

SelectionDialog dialog =
JavaUI.createTypeDialog(
    getShell(),
    new ProgressMonitorDialog(getShell()),
    scope(),
    IJavaElementSearchConstants.CONSIDER_CLASSES,
    false);

I tried this 3.0 HEAD: The type dialog does only contain types from binaries.
I debugged into it. My guess is that there is a bug in 
HierarchyScope.buildResourceVector: The only add to this.resourcePaths is 
inside the 'root instanceof JarPackageFragmentRoot' then-block.
Sorry I didn't verify this last year. Things got thick around here. Having our 
first kid'll do that!

Geoff
Martin, what JDT/Core API does createTypeDialog call? What are the paramters 
passed to this API?
The user passes in a (hierarchy) scope (IJavaSearchScope).
We go over all types in our all types cache:
If 'scope.encloses(typeInfo.getPath())' then the element is added to the dialog.
typeInfo.getPath()) is one of the paths returned from the all types search.

This was my test code:
- The dialog shows only java.lang.Object

public void test_bug44772a() throws Exception {
		
  File junitSrcArchive= JavaTestPlugin.getDefault().getFileInPlugin
(JavaProjectHelper.JUNIT_SRC);
  assertTrue("Junit source", junitSrcArchive != null && junitSrcArchive.exists
());
  JavaProjectHelper.addSourceContainerWithImport(fJProject1, "src", 
junitSrcArchive);
		
		
  IType type= fJProject1.findType("junit.framework.TestCase");
  IJavaSearchScope scope = SearchEngine.createHierarchyScope(type);
  SelectionDialog dialog= JavaUI.createTypeDialog(
	JavaPlugin.getActiveWorkbenchShell(),
	new ProgressMonitorDialog(JavaPlugin.getActiveWorkbenchShell()),
	scope,
	IJavaElementSearchConstants.CONSIDER_CLASSES,
	false);
  dialog.open();
}
Just wondering if a fix for this is realistic for 3.0 final. If not, I will 
adjust my plans accordingly.

Geoff
Martin, are you certain that IJavaSearchScope.encloses(String) fails in 3.0M4? 
I cannot reproduce, and no test_bug44772a exists.
If this fails in 3.0, can you provide a test case?
This still seems to be the case in 20030929 . The test is the code contained in 
comment #3 (it's not in our test suites as this is an interactive test). copy 
the test method and paste it in e.g. TypeInfoTest, run the test. When the dialog
opens, inesrt '*' as name (=all types). You get only 'Object', but not 'Assert' 
(TestCase extends Assert)

Why do you always assume that I know your tests? :-)
Ok I'll try this out.
No, in fact this time I tried to avoid the confusion and wanted to have only 
code in the bug report, so you wouldn't be required to have the latest jdt.test 
HEAD code...

Martin, the path given to the TypeInfoRequestor is an absolute path 
(e.g. "/TestProject1/src/junit/extensions/ActiveTestSuite.java") but the path 
given to HierarchyScope.encloses(String) is a relative path 
(e.g. "TestProject1/src/junit/extensions/ActiveTestSuite.java"). Why is that? 
The second path should also be an absolute path. This would fix the problem.
you're right, bug in our code! sorry for that, didn't see this small difference.
fixed > 20031111


hierarchy scope search only shows types that exist in jars



45193 hierarchy scope search only shows types that exist in jars 