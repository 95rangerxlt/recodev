Here is an example.
There are two packages, a and b. Class A is in package a, with an inner class 
named AA (showed in the code following).
----- A.java ---------------------------------------
package a;

public class A {
	public class AA {
		
	};
}

And there is a class named B in package b that use class A and A.AA:

----- B.java -----------------------------
package b;

public class B {
	public void useA() {
		A a = new A();
		A.AA aa = a.new AA();
	}
}
If I use the "Organize Imports" command, it will add two import statements:
import a.A;
import a.A.AA;

But after that, the compiler shows a warning, saying that "the import a.A.AA 
is never used".

Here is an example.
There are two packages, a and b. Class A is in package a, with an inner class 
named AA (showed in the code following).
----- A.java ---------------------------------------
package a;

public class A {
	public class AA {
		
	};
}

And there is a class named B in package b that use class A and A.AA:

----- B.java -----------------------------
package b;

public class B {
	public void useA() {
		A a = new A();
		A.AA aa = a.new AA();
	}
}
If I use the "Organize Imports" command, it will add two import statements:
import a.A;
import a.A.AA;

But after that, the compiler shows a warning, saying that "the import a.A.AA 
is never used".
Indeed second import is unused. You can observe removing it, and still compile 
ok as member is seen through type A.
*** Bug 75387 has been marked as a duplicate of this bug. ***
fixed > 20041007

Note that your example will still add two imports.
We need at last the import for A to evaluate that AA does not really need an import.
-> To organize import needed for scenarioa with absolutly no imports.
(similar to other cases in organize import)



"Organize Imports" imports inner classes but the compiler think it unnecessary [code manipulation]



167644 Build path page: no feedback when removing source attachement 

67644 "Organize Imports" imports inner classes but the compiler think it unnecessary [code manipulation] 