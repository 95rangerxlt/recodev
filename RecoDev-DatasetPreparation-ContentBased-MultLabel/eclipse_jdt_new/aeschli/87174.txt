However over the call foo(as, 123). The Hover should show foo(List<String>,
Integer) not foo(List<E>, Integer)

public class MethodArguments {
	public <T> void foo(List<T> lt, Integer i) {
	}
	void use() {
		ArrayList<String> as= null;
		foo(as, 123);
	}
}

The java element has now resolved information for parameterized types via the
getKey and the BindingsKey class.

However over the call foo(as, 123). The Hover should show foo(List<String>,
Integer) not foo(List<E>, Integer)

public class MethodArguments {
	public <T> void foo(List<T> lt, Integer i) {
	}
	void use() {
		ArrayList<String> as= null;
		foo(as, 123);
	}
}

The java element has now resolved information for parameterized types via the
getKey and the BindingsKey class.
JavaElementLabels.USE_RESOLVED is used to get the element label. This uses the
resolved information. I checked that isResolved() returns true for use(as, 123).

Related to bug 85811?

yes, we're waiting for the fix in bug 85811, then this should work.

*** This bug has been marked as a duplicate of 85811 ***
better mark as 'dependend on bug 85811' than duplicate
also depends on bug 87362 to get the field types correct
Keys for methods are now there but still buggy (bug 90186).
Also waiting for bug 87362.
marking as fixed. Still missing the resolved field types, but this has been
deferred (bug 87362)
verifying...
I get <String> void Test.MethodArguments.foo(List<T> lt, Integer i)

Bug 87362 seems to be fixed and verified?
yes, Bug 87362 was fixed after all.

It seems that there are still bugs in jdt.core. I'm not sure but I think
<String> void Test.MethodArguments.foo(List<String> lt, Integer i) should be shown
I filed bug 97275 against jdt.core.


Hover doesn't show fully resolved information [render]



87174 Hover doesn't show fully resolved information [render] 

87174 Hover doesn't show fully resolved information [render] 