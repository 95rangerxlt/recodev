Build 20030122

I find this template useful, but its tag is highly counter intuitive, except 
for C users. Why not simply using the tag "print" instead ?

Build 20030122

I find this template useful, but its tag is highly counter intuitive, except 
for C users. Why not simply using the tag "print" instead ?
That's correct. We should come up with a better name.
we should change this for RC1.

We should have templates for printing to standard out and standard error.

I suggest:
serr   or   perr
sout   or   pout
What about 'print' and 'err' ? 
changed to print_out and print_err > 20030219

please reopen if you think your suggestions were better
Feels to long to type in, what about my previous suggestion ?
i like print, but i thought that the other one should be somewhat similar so you
can see the two flavors when you do a code assist.

Erich suggestions seem a bit cryptic to me.

print and printerr ?
I propose to reopen this bug.  Most new users are going to type "Sys" and hit
ctrl-space.  I propose "Sysout" and "Syserr" these are most likely to be
discovered by new users and are intuitive.  No one is going to find print* by
accident, except maybe C programmers. :)
I agree "Sysout" and "Syserr" would be better. Ok Erich and Philippe?
"Sysout" and "Syserr" is OK by me.

The rational for my cryptic ones was typing reduction, since you'll be unique 
sooner. However, Sysout and Syserr pass this test as well.
*** Bug 33307 has been marked as a duplicate of this bug. ***
Copied from duplicated bug ...
Since there isn't
a stdout per se in Java, but there is a System.out.println (or sop for short)
I think the stdout/stderr templates should be changed to sop/sep (or added to
the current set for backwards compatibility).

Also, both sop and sep (or stdout/stderr) should by default insert quotes
in the arguments; i.e.

System.out.println("${cursor}")
 instead of the current
System.out.println(${cursor})

IMHO it is far more common to print a string (optionally with debugging 
values concatenated to it) than to print out a single object, so prefilling
with " is a more useful mechanism. In any case, it can be trivially removed
by hitting backspace if " completion is on, since this will also remove
the close quote.

IMHO the Sysout and syserr are just as arbitrary as stdout and stderr. Why not sout? Why not Systemout?

At east sop is an acronym of the class/field/method combination, which should
be immediately understandable by anyone who knows system.out.println.

Also the template should be changed to accommodate selected words (so that an
expression can be highlighted for printing) and/or automatic insertion of ""
where selected text doesn't exist.

My experience is that I get a few characters into a class/keyword/method before
I use code-assist.  This is because experience has conditioned me to type three
characters to prefilter the list for speed, and three characters seems to be the
magic number.

I have tried to use the stdout, stderr shortcuts before, but I have given up on
them because they are too slow, and here's why:
1. I type "Sys", and Ctrl-Space
2. The shortcut isn't there, so I hit ESC.
3. I hit Backspace, Backspace, 't', 'd', and ctrl-space again.

I did this ~10 times and gave up on it.  I can type System.out.println faster
than the above sequence.

However, if the shortcut was sysout, I would get the shortcut at step 2, which
would be much faster than typing System.out.println.

If we switch to sop/sep, I will continue to have the same problem as before,
because I will type three characters and still have to back up.
I agree with Jed's comments. I think its best if the template name has starts
with the same letters as the resulting text, otherwise it won't be found by
users. It must be short, but not too short, otherwise it will be autofilled in.
And don't forget that users can indiviually change the name.

changed to 'sysout' and 'syserr' > 20030227

The suggestion to add quotes is good but it interferes with the
${word_selection} variable. ${word_selection} marks a template to support the
surround with mode where the selected code is inserted at the place marked with
${word_selection}.
So it's probably wrong to have quotes in this case. Again I think this is
something users better should change individually.
I concur with the change to sysout.

However, I have used System.out.println() way more to print out debugging
statements for text than selected code. You could structure the template something like:

System.out.println(${word_selection}"${cursor}");

That way, if there is inserted text, the cursor is in a position to remove the "
just by pressing delete. At least there won't be a situation where the 
selected text is captured by the "" and not evaluated, although it will of
course cause an error and thus force the user to fix the " problem.

Also, since System.out.println() must always be a statement, it should really
end with a ';' though I don't recall seeing that in the previous template.
(But since I always change the default, I may have broken it myself :-)



Templates - stdout tag not intuitive



30277 sysout & syserr 

30277 Templates - stdout tag not intuitive 