The Eclipse Java Editor gets confused when the package name is too long (most
likely when it's longer than the value specified as line width).

To see the bug in action, create the following package: package
com.a.very.very.very.very.very.very.very.very.very.very.very.very.very.very.very.lengthy.value;

and then create a test class (e.g. TestClass), it should look something like this:

package com
    .a
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .lengthy
    .value;

/**
 * TestClass.java
 * 
 * @author jmccrindle
 */
public class TestClass {

    /**
     * Constructor for TestClass.
     */
    public TestClass() {
        super();
    }

}

Now, try adding the line: LinkedList linkedList; using code completion to get
the LinkedList imported, you should then get:

package com

import java.util.LinkedList;
    .a
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .lengthy
    .value;

/**
 * TestClass.java
 * 
 * @author jmccrindle
 */
public class TestClass {

    /**
     * Constructor for TestClass.
     */
    public TestClass() {
        super();
        LinkedList linkedList;
    }

}


which doesn't compile. (also, it would be nice if it doesn't autoformat the
package names).

the package names in our current project suffer from this problem.

The Eclipse Java Editor gets confused when the package name is too long (most
likely when it's longer than the value specified as line width).

To see the bug in action, create the following package: package
com.a.very.very.very.very.very.very.very.very.very.very.very.very.very.very.very.lengthy.value;

and then create a test class (e.g. TestClass), it should look something like this:

package com
    .a
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .lengthy
    .value;

/**
 * TestClass.java
 * 
 * @author jmccrindle
 */
public class TestClass {

    /**
     * Constructor for TestClass.
     */
    public TestClass() {
        super();
    }

}

Now, try adding the line: LinkedList linkedList; using code completion to get
the LinkedList imported, you should then get:

package com

import java.util.LinkedList;
    .a
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .very
    .lengthy
    .value;

/**
 * TestClass.java
 * 
 * @author jmccrindle
 */
public class TestClass {

    /**
     * Constructor for TestClass.
     */
    public TestClass() {
        super();
        LinkedList linkedList;
    }

}


which doesn't compile. (also, it would be nice if it doesn't autoformat the
package names).

the package names in our current project suffer from this problem.
Following the described steps under 2.0 doesn't produce the problem. Please 
reopen if you can reproduce the problem under 2.0 and provide steps to do so.

BTW: you can control the line splitting during format using the preference 
setting Preferences->Java->Code Formatter->Line Splitting
Strange. I'm using GM6 and I've just followed the instructions again and I still
get the same problem. My current installation is a completely new one so it
shouldn't be a configuration problem.

Using the current linesplitting preferences is a little too coarse-grained
because if I set it so that it doesn't split the long package name, all the rest
of my code is allowed to be that long. But the linesplitting is not really that
much of an issue.

The steps again:

Use New --> Package to create a package called:
com.a.very.very.very.very.very.very.very.very.very.very.very.very.very.very.very.lengthy.value

Create a new class called TestClass

It should look like this:

package com
	.a
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.lengthy
	.value;

/**
 * @author jmccrindle
 *
 * To change this generated comment edit the template variable "typecomment":
 * Window>Preferences>Java>Templates.
 * To enable and disable the creation of type comments go to
 * Window>Preferences>Java>Code Generation.
 */
public class TestClass {

	/**
	 * Constructor for TestClass.
	 */
	public TestClass() {
		super();
	}

}

if it doesn't, then check that you have your line splitting preferences set at
the default 80 columns. 

Type "LinkedLis" under the super(); call and then use Code completion (Ctrl +
SPACE) to complete the class name "LinkedList". This should result in the import
automatically being included:

package com

import java.util.LinkedList;
	.a
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.very
	.lengthy
	.value;

/**
 * @author jmccrindle
 *
 * To change this generated comment edit the template variable "typecomment":
 * Window>Preferences>Java>Templates.
 * To enable and disable the creation of type comments go to
 * Window>Preferences>Java>Code Generation.
 */
public class TestClass {

	/**
	 * Constructor for TestClass.
	 */
	public TestClass() {
		super();
		LinkedList linkedList = new LinkedList();
	}

}

This will then not compile. If it works for you, could you possibly include an
example of what happens when you follow these instructions?
Ok, was my fault. I tried it with an already existing import to a type form the 
very long package, not with a class having a long package declaration statement.

Martin, please investigate. The outliner highlights the correct range and 
delete deletes the whole package declaration statement so there must be 
something with add import.
fixed > 20020924


Long Package Names bug [code manipulation]



20627 "Organize Imports" and "Format" format long import lines inconsistently. [code manipulation] 20437 Long Package Names bug [code manipulation] 