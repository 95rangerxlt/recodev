With 3.2M2 the org.eclipse.jdt.internal.junit.launcher.JUnitBaseLaunchConfiguration.findTestTypes(..) method has been turned final.  Mylar was overriding that method in order to provide JUnit launch configurations that automatically determine the test types to run based on the context of the active task (described in http://www-128.ibm.com/developerworks/java/library/j-mylar2 ).  This method being made final resulted in a lot of implementation that had had to be copied down from JUnitLaunchConfiguraiton.  Unless there is some extensibility safety that I'm overlooking, it seems appropriate for subclasses to be able to create a custom resolution of the test types.  Could you please make this protected method non-final?

With 3.2M2 the org.eclipse.jdt.internal.junit.launcher.JUnitBaseLaunchConfiguration.findTestTypes(..) method has been turned final.  Mylar was overriding that method in order to provide JUnit launch configurations that automatically determine the test types to run based on the context of the active task (described in http://www-128.ibm.com/developerworks/java/library/j-mylar2 ).  This method being made final resulted in a lot of implementation that had had to be copied down from JUnitLaunchConfiguraiton.  Unless there is some extensibility safety that I'm overlooking, it seems appropriate for subclasses to be able to create a custom resolution of the test types.  Could you please make this protected method non-final?
I'm trying to make the JUnitLaunchConfiguration API, so yes, I'll keep an eye on this.
Great to see this becoming API.  Fyi, so far this is the only additional extensibility we need.  The way that we extend is by creating two new JUnitTabGroups (one for PDE, one for plain) that extend JUnitTabGroup.  Providing separate tab groups makes it clear to users that they're not running a standard unit test suite.  We then include all of the default tabs other than JUnitLaunchConfigurationTab, since we determine the tests to run automatically.  So other than needing this method back, the extensibility is very clean.
Any chance to get this for M4?  The only thing needed here is for findTestTypes to be made non-final.
I try...
fixed > 20070108

New API class JUnitLaunchConfigurationDelegate. Please let me know if this meets your requirements.
Yes, this meets the requirements beautifully, and gets rid of all the duplicated code, thanks!  The two Mylar extensions are now as simple as the following (the Mylar changes are currently in a patch, since we try to avoid migrating HEAD until the week of the Platform milestone release).

public class MylarJUnitLaunchConfiguration extends JUnitLaunchConfigurationDelegate {
	@Override
	protected IMember[] evaluateTests(ILaunchConfiguration configuration, IProgressMonitor monitor) throws CoreException {
		Set<IType> contextTestCases = MylarContextTestUtil.getTestCasesInContext();
		MylarContextTestUtil.setupTestConfiguration(contextTestCases, configuration, monitor);

		if (contextTestCases.isEmpty()) {
			MessageDialog.openInformation(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(), 
					"Context Test Suite", 
					"No test types found in the active task context.");
		} 
		return (IMember[])contextTestCases.toArray(new IMember[contextTestCases.size()]);
	}
}



[JUnit] make resolution of test JUnit launch config test types extensible

