Version: 3.3.1
Build id: M20070905-1045

Steps:
- create a new workspace;
- add a 1.5 JRE as its default JRE;
- go to the Java perspective;
- create a new Java project and select it;
- click the new class button;
- in the resulting dialog, type 'Test' into the 'Name' edit box;
- click the 'Browse' button of the 'Superclass' line;
- type 'ArrL' in; ArrayList of java.util should come up in the choices; select it and click OK;
- click Finish;
- an editor opens upon a newly created class Test that extends (raw) ArrayList; a warning is displayed that complains about a raw use of ArrayList.

I could not find any options commanding a different behavior.

Content assist behind ArrayList inserts a <E> construct, with the opportunity to redefine E on the fly, but this is only doing half of the job. Inserting ArrayList<E> would result into a compiler error, and ArrayList<Object> may lead to foresight. Test<E> extends ArrayList<E> might then be the most appropriate choice, leaving it up to the user to decide whether:
- it is what he wants (carry the same type parameters), which would be the default behavior,
- he prefers specializing parts of them (aka Test extends ArrayList<String>), which would need some deletion and some code assist,
- or even he wants to keep bad habits and use raw types indeed (aka Test extends ArrayList), which would need deletion only.

Version: 3.3.1
Build id: M20070905-1045

Steps:
- create a new workspace;
- add a 1.5 JRE as its default JRE;
- go to the Java perspective;
- create a new Java project and select it;
- click the new class button;
- in the resulting dialog, type 'Test' into the 'Name' edit box;
- click the 'Browse' button of the 'Superclass' line;
- type 'ArrL' in; ArrayList of java.util should come up in the choices; select it and click OK;
- click Finish;
- an editor opens upon a newly created class Test that extends (raw) ArrayList; a warning is displayed that complains about a raw use of ArrayList.

I could not find any options commanding a different behavior.

Content assist behind ArrayList inserts a <E> construct, with the opportunity to redefine E on the fly, but this is only doing half of the job. Inserting ArrayList<E> would result into a compiler error, and ArrayList<Object> may lead to foresight. Test<E> extends ArrayList<E> might then be the most appropriate choice, leaving it up to the user to decide whether:
- it is what he wants (carry the same type parameters), which would be the default behavior,
- he prefers specializing parts of them (aka Test extends ArrayList<String>), which would need some deletion and some code assist,
- or even he wants to keep bad habits and use raw types indeed (aka Test extends ArrayList), which would need deletion only.
Both the super class field and the type name field are freely editable and allow to specify type parameters/arguments. 

If the user wants a raw class he should be allowed to do so. The wizard creates what the user specifies. 
Did I miss something?

My point is: the wizard generates code that is discouraged starting with version 1.5 of the language, while we may want to generate 'exemplary' code whenever this is reasonably easy for us to do so.

Piggy-backing on your comment, I would consider that the result of the Browse action could be the insertion of ArrayList<E> instead of ArrayList into the edit box. But this leads to a couple of extra issues:
- the name of Test is unaffected by the class being generic or not; it would make little sense to fill the Name edit box with Test<E>;
- we do not have the same flexibility into the edit boxes than we have into the text (e.g. no way to code assist E away to replace it with String).

This only shows that I have no silver bullet to propose, but I'd still promote the view that Eclipse should help developers to write 'good' 1.5 code in 1.5+ projects, in every possible interaction. If we contrast what the new class wizard does with what code assist does, completing after 'class Y extends ArrayL' results into 'class Y extends ArrayList<E>', which is better IMHO than 'class Y extends ArrayList', and we main consider searching creative ways to do something like this in the wizard.

I'll let you decide if you want to reopen or not.
reopen
*** Bug 204448 has been marked as a duplicate of this bug. ***
I changed the superclass and super interface field to be filled with type parameters if applicable. I used the type parameter names from the super class
-> Map<K,V>

fixed > 20070926


[type wizards] New class wizard generates raw class and superclass even if superclass is a generic type

