It would be nice to have a tool to forward method calls to delegates in my 
class.

use case

class BookList implements List{
 AbstractList fDelegate=null;
}

the tool should generate all needed calls to fDelegate.

It would be nice to have a tool to forward method calls to delegates in my 
class.

use case

class BookList implements List{
 AbstractList fDelegate=null;
}

the tool should generate all needed calls to fDelegate.
Created attachment 2860
first try of my delegation wizard named tool

I finally finished a first version of my plugin started on CodeCamp.
Please let me know if you need the source only. I jsut zipped the whole project
from the workspace.
It should present all fields of a class and show all its public non final
methods. I choosed to display the static too, also when the field is non
static. In case of emergency one could use quickfix to fix this resulting
error.
I had some performance problems, as the whole operation is done in the ui
thread. Generating all methods fo ResultSet stops the ui. I would like to
present a progress monitor. ANy pointers to existing action using such a
construction is appreciated.
Created attachment 2861
other ui presentation

I am also trying to change the presentation of the methods. I do not know if it
would be better to present super types or interfaces as the next level of
detail of a field. Perhaps the best to use both, user configurable.
Very likely we will have an item "create forward methods" on the M5 plan. 
Martin, what do you think about the idea that contributing your stuff as a 
patch to the JDT plugin ?
[contributing?]

Yes, of course. So was my 'deal' with Martin A, ;). Its meant to be on the 
Source sub menu of the context menu.
As I 'mimic 99% of the structure' from Martin Aeschliman StubUtil he should 
say what he needs.

I would like to hear if its ok to let the work be done within the ui thread. I 
do not think its a good idea. Forwarding all methods of eg ResultSet lasts 
about 40 seconds on my 2,5 Ghz machine. Not nice. Should a progress monitor 
presented? What are your general rules?
At the moment I also work with the current edited working copy. So with every 
added method, all the jdt magic things are working hard (error markers, 
quickfixes). Would it be possible/better to create a new working copy, make 
all my changes to this class and exchange the current copy with my copy?
Pointers to existing Actions are sufficent.

I also fixed a few bugs in my code and refactored it to your Util class style. 
More after Xmas. I wish all jdt-ui guys a 'Frohes Fest'.
Martin, Martin A. is on vaction until beginning of next year. So don't epect to 
hear anything from him until then. Happy holidays !
Created attachment 2874
added a progress monitor
It would be great to have this as patch. The screenshots look great!

I had a quick look at the code. My questions/suggestions so far:
- About your StubUtil. You still have the code in there for the 'constructor' 
case and maybe other code that does not apply in your case: Could you strip 
that out. My guess is that then the code would be quite small so that we can 
get rid of the Util class and take the code to the runnable.
- My guess for the slow performance is that this will be fixed when you have 
your runnable (IRunnableWithProgress) runned as WorkbenchRunnable.
  ProgressMonitorDialog dialog= new ProgressMonitorDialog(getShell());
  dialog.run(false, true, new WorkbenchRunnableAdapter(op));
When something is runeed as a WorkbenchRunnable, all modifications it does are 
folded and only one 'change delta' is performed: If this is not done like that, 
all views update/refresh after each method added.
- I saw that in your content provider has an own model it creates first. I 
would try to evaluate children on demand (not prebuild). Note that in SWT 
already has a 'model' of tree-nodes, so each 'getChildren' is only called once. 
So the cache is probably just overhead. If you were worrying about 'getParent', 
never mind, it can return null.
My opinioun in general: the less CU's the better. Hoping to have like a CU's 
per feature...
My suggestion is to have one action CU that dies all the action enablement and 
action UI stuff, and a 'operation' class which is a IRunnableWithProgress, 
containing all the method creation code.


I tried WorkbenchRunnable, but it seems that this Adapter break some API. At 
least my comments I set via ProgressMonitor does not appear. I will look 
further on weekend.
Your notes on my cache are taken, but I believe I need it some time later when 
processing the results, but I must have a look at it again. Good to know that 
getParent can return null. Any docs for that 'feature'?
The problem with StubUtil is that it need a lot of functionality to create 
comments, I think its abigger part, but again more later.
What would you prefer to see for UI? All methods of a field, divided into it 
interfaces/classes or both. gueesing I would say both ;).
CUs stands for classes?
My last question for today I promise, how is the undo thing done correctly? At 
the moment it seems to add an entry for each change for the class, at least it 
does not work as expected.

Enjoy the new year!
- WorkbenchRunnableAdapter is an internal class from us. Besides that, I'm not 
aware of problems with it. Should I have a look at it?
- Look at the Javadoc of getParent, there it's explained that the return value 
can be null. If you do so, viewers won't be able to select a child element 
because it can't be located. To have this again, you can tell the tree viewer 
to enable a hash lookup (setUseHashlookup).
- We could have a checkbox (like in 'Override Methods': 'Group methods by 
type'). That would be cool.
- CU is Compilation Unit... Not too many files per feature...
- Hmm, 'undo'. I don't remember that I had to do anything special for the 
override methods action. Maybe this is solved when the workbench runnable is 
used. If not I'll have to investigate. To bundle the undos is a little bit 
tricky.

BTW, OverrideMethodsAction is a good class to copy. It allows you to have the 
same action in an editor but also in the context menu. There are some other 
nasty issues like 'validateEdit' (do it right for pessimistic version control 
system (clear case))

Happy new year too! And thanks a lot for the help!
Created attachment 3262
Latest sources (copy of my project)
Created attachment 3263
My testclass, bug with wrong background color of error message
I wrote a mail already to martin.a, so I do not want to go into detail.

+ check for duplicate methods when selecting
+ removed bug when using fields with same type
+ removed bug when field is primitve

Known Problem
already existing methods in type are silently never overwritten when selected 
in tree
Still slow when creating more than 150 methods
extra undo step when new imports are added in creation of methods
dialog is opened even when there are no fields in type
no exception handling (at least forward to log)
Created AddDelegatMethodsAction in org.eclipse.jdt.ui.actions containing the 
contributed code from Martin Moebius.
Need still some testing. Duplicate warning doesn't seem to work.
Also should present a dialog to decide if method should be replaced. Maybe also 
a information dialog if a method is overriding a method form a superclass.

fixed bug with duplicate detection
added code that reveals created method in editor
I have the latest ibuild and it works, great!
Some points I noticed
- the right message in dialog is never shown (generating xx methods)
- cancel does no cancel
- the wizard needs to much time to show when used on a type with a bigger 
hierachy

I will investigate on weekend. Could you verify the first 2 points? TestClass  
for 1 & 2 is
public class Test {

	JTable table;
	JTable table2;

}
Testcase for 3 is the AddDelegatMethodsAction.
I fixed
http://bugs.eclipse.org/bugs/show_bug.cgi?id=31112
-check if type of field is resolveable

http://bugs.eclipse.org/bugs/show_bug.cgi?id=31256
-array types now a treated as java.lang.Objects

Problem with static methods
-calls to static methods are now forwared to the class of type.

Some Observations
I am quite sure that WorkbenchRunnableAdapter is the problem with not showing 
the right dialog message and the wrong cancel behaviour.
I did some performance test. The time to add a new method in a type is 
proportional to the already availabe methods.Eg creating the first few methods 
need 20 ms on my machine, the last about 100 ms.

A real problem is that _after_ the adding of methods the package view is 
scrolling to every method added during the action. This also triggers the 
outline view to repaint.
Eg. new class add a field JTable, generate all the delegat methods. Select a 
method in package view of the class. Something is notifing the package view to 
update.
Created attachment 3379
New Version
Added the info status like in OverrideWizard
Added check for already existing methods in enclosing type, those methods are 
not shown in the dialog
Bug in createSignatureKey fixed

Code got a bit messy and I have not enough time to test it more. Hope to 
cleanup it during the week.
Created attachment 3380
New Version + updated messages file

not enough tested!
I applied the new version (attachment 3379). I'm assuming that attachment 3380 
is just an update of the plugin. or does it contain more than 2379?
The best for me if you could send patches. (team->Create Patch)

I see the performance problem. I have some ideas what we could do, but I'm not 
sure if this is urgent.
- The cancel button in the progress monitor does not work because we are not 
forking. If we want to for, we would have to do the all document modifications 
in a sync exec.
- the adding is slow as the changes come piece by piece into the editor. This 
looks stange and slow. There are several possibilities to apprauch that.
 a. We could disable/enable the redraw of the editor. To do this do you need 
the editor pare (line 339) and do 
IRewriteTarget target= (IRewriteTarget)editorPart.getAdapter
(IRewriteTarget.class);

 b. We append all created methods first in a StringBuffer and the apply the 
fulkl block to the editor. This is a little tricky as o find the correct insert 
position is tricky business. So maybe we could add a dummy method so we get the 
range, and then replace it with the string containing all created methods.
This way we can do all of the stub constructing in a forked thread and then do 
a sync exec to create stubs and imports.


I think we should try b.


 
Grmpf, did upload the wrong zip archive.

The performance problem is not urgent. I tried the same with the Override-
Wizard, and it behaves the same way. If we did not bad comments about that, I 
do not believe we get some here.

Did you see the repaint of the package&outlineview? This is far more 
troublesome.

As I do not use cvs, I can not use the patch feature. In general I just add 
all changed files. Will see if I can change to cvs.
Created attachment 3387
changes mentioned in #18, ActionMessages from jtd.ui.internal.action
It would be very good if you could change to CVS. The last patch had hundereds 
of differences  (because you used the code formatter).
It is impossible for me to see what your changes were. Released it anyways.
Created attachment 3510
patch for 31258, 31326
Never had to work with patch files. Please contact me if anything seems wrong.

What are your formatting preferences? Perhaps simpler if the I use your 
defaults.
applied the patch (attachment 3510) > 20030217
Thanks a lot!

Let's close this bug report as fixed. In case of a new patch, we can use the 
corresponding bug report.
Oh, forgot about the formatting style. We don't too many rules, its up o tbe 
programmem. For JDT, the field prefixes should be 'f'. We use 'compact 
assignement', but that's up to you if you like that.
Just be careful not to apply the code formatter on a full, existing source. 
This results in many changes and its very hard to do a quick code review before 
releasing.


code generation tool for forwarding methods to fields [code manipulation]



jsr308 branch - Fix for 287939 

Head - Ayush's fix  for 287939 

Attachment 3510 (bug 28793, martin moebius) 

28793 attachment 3387 

28793 attachment 3379 