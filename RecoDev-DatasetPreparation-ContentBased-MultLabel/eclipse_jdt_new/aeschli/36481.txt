given two types with same name, 
package a;
public class A {
}

package b;
public class A {
	public void doSomething(a.A obj) {
		newMethod(obj); // this should be quickfixed
	}
}

the generated method has the signature
private void newMethod(A obj), but should have 
private void newMethod(a.A obj).

I admit this to be not the classic style, we experience this behaviour, because
we are generating lots of code and all the generated code goes to one directory,
making calls to handwritten code with the same type name (by convention) in
other packages.

given two types with same name, 
package a;
public class A {
}

package b;
public class A {
	public void doSomething(a.A obj) {
		newMethod(obj); // this should be quickfixed
	}
}

the generated method has the signature
private void newMethod(A obj), but should have 
private void newMethod(a.A obj).

I admit this to be not the classic style, we experience this behaviour, because
we are generating lots of code and all the generated code goes to one directory,
making calls to handwritten code with the same type name (by convention) in
other packages.
Can you validate if there was an import a.A; created?

If not this is a bug, if it does, that would be a feature request.
There's no import added, only the method.
As the generated method does not fit the needed signature, the quickfix can be
applied once more, generating the same method (over and over again).
fixed > 20030430

Fixes also all other quick fixes that did not check for import conflicts


Quickfix (create method) generates wrong parameter type if same name exists in other package [quick fix]



Bug 364815: [preferences] UI for new preferences regarding annotation based null analysis 

Bug 364815: [preferences] UI for new preferences regarding annotation based null analysis 

36481 Quickfix (create method) generates wrong parameter type if same name exists in other package [quick fix] 