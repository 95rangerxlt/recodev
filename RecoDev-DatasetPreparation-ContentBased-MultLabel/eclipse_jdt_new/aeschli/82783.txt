Build I20050111-0800

The immediately visible problem is, that the javadoc wizard ignores an access
modifier which may be specified on the first page. 

This is because the temporary parameter file for javadoc contains "...
-classpath  -private  ..." - the classpath is missing. 

The problem could be, that in
org.eclipse.jdt.internal.ui.javadocexport.JavadocOptionsManager#getArgumentArray(List
vmArgs, List toolArgs) the "-classpath" argument should simply be skipped, when
classpath is empty, but maybe the real problem is that in
org.eclipse.jdt.internal.ui.javadocexport.JavadocTreeWizardPage#getClassPath(IJavaProject[]
javaProjects), line 450 "curr.getOutputLocation()" returns "/z" and findMember
than later on tries to find "getFullPath().append(childPath)" (which then is
"/z/z") as a resource. (which seems to be wrong for a project named "z" and no
other special setup).

Build I20050111-0800

The immediately visible problem is, that the javadoc wizard ignores an access
modifier which may be specified on the first page. 

This is because the temporary parameter file for javadoc contains "...
-classpath  -private  ..." - the classpath is missing. 

The problem could be, that in
org.eclipse.jdt.internal.ui.javadocexport.JavadocOptionsManager#getArgumentArray(List
vmArgs, List toolArgs) the "-classpath" argument should simply be skipped, when
classpath is empty, but maybe the real problem is that in
org.eclipse.jdt.internal.ui.javadocexport.JavadocTreeWizardPage#getClassPath(IJavaProject[]
javaProjects), line 450 "curr.getOutputLocation()" returns "/z" and findMember
than later on tries to find "getFullPath().append(childPath)" (which then is
"/z/z") as a resource. (which seems to be wrong for a project named "z" and no
other special setup).
wow, you are right, what a bug!
fixed > 20050114


Javadoc wizard "broken" [javadoc]



82783 Javadoc wizard "broken" [javadoc] 