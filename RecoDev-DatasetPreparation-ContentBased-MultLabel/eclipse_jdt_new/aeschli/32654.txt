2.1 I20030214

I observed some problems when using the "Change method signature" refactoring. 
This seems to happen when the original method signature includes an array 
parameter.

Problem:
I introduced a new method parameter of type boolean with default value set to 
true. Previewing the changes, I had to realize that the resulting code was 
incorrect in _some_ cases.

Example:

x.method(anObject, new Object[]{ anotherObject }, Integer.MAX_VALUE, false);

became

x.method(anObject, new Object[]{ anotherObject }, Integer.MAX_VALUEtrue, 
false);

2.1 I20030214

I observed some problems when using the "Change method signature" refactoring. 
This seems to happen when the original method signature includes an array 
parameter.

Problem:
I introduced a new method parameter of type boolean with default value set to 
true. Previewing the changes, I had to realize that the resulting code was 
incorrect in _some_ cases.

Example:

x.method(anObject, new Object[]{ anotherObject }, Integer.MAX_VALUE, false);

became

x.method(anObject, new Object[]{ anotherObject }, Integer.MAX_VALUEtrue, 
false);
Test case to reproduce

public class A {
	public void foo(Object a, Object[] b, int c, boolean d) {
		foo(a, new Object[] { a }, Integer.MAX_VALUE, false);
	}

}

add new argument e of type boolean before d and set default to true.
looks like a rewriter problem
pull up does manipulations using ast rewriter
(i created ChangeSignatureTests.testAll55 (disabled until this is fixed))
*** Bug 33668 has been marked as a duplicate of this bug. ***
fixed > 20030303


[Refactoring] Change method signature with problems



32654 defaultlistrewriter can't be shared as it is used recursive 