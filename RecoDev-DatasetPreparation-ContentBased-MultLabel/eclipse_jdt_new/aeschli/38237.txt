Code Assist proposals are reflected as an Image and Text.  The images that are
used in the JDT proposals are generated by
org.eclipse.jdt.internal.ui.text.java.ResultCollector.  Though it makes use of
the JavaElementImageProvider.getFieldImageDescriptor() to get the proper image
for a particular IJavaElement, it does perform additional consideration for
elements like static, deprecated, Local variable etc.

We are interested to contribute to code assist by way of reusing the images (and
semantics) that are in use by the (internal) ResultCollector.

Code Assist proposals are reflected as an Image and Text.  The images that are
used in the JDT proposals are generated by
org.eclipse.jdt.internal.ui.text.java.ResultCollector.  Though it makes use of
the JavaElementImageProvider.getFieldImageDescriptor() to get the proper image
for a particular IJavaElement, it does perform additional consideration for
elements like static, deprecated, Local variable etc.

We are interested to contribute to code assist by way of reusing the images (and
semantics) that are in use by the (internal) ResultCollector.
Do you expect that the collector gets public API or flags/API to get the images
for the content assist?
We are generating/reuse codeAssist proposals, and would like to provide the same
semantics as does the ResultCollector when it comes to assigning images to
proposals elements (see attached image).   The JavaElementImageProvider gives us
image mapping for regular IJavaElement kind of things, but it lacks the
additional semantics the ResultCollector provides for locals, deprecation etc.

We ask for a complete public support in JavaElementImageProvider.

 


Created attachment 6719
Screen Scrape
Martin, you are the master of JavaPluginImages and also wrote most of that
ResultCollector.

I agree that it makes sense to offer clients a way to get the same images for
content assist proposals as we have. I see two choices: either we add yet
another flag or we provide a new class for accessing the content assist proposal
images.

Feel free to move back after commenting if you think this is now in Jdt Text area.
ResultCollector is not likely to become public API. It is just too closely
connected to the Java editor. 
The idea is to offer all images in 'ISharedImages' and let you (other plugins)
write something like the JavaElementImageProvider yourself for your kind of
elements. This gives you the most flexibility and us less API to maintain.

I see that we are not providing the field and local variable images and also
missing most of the inner type images. I will add that to ISharedImages.

I'll have a look if it would be good to have methods like
'getMethodImageDescriptor(boolean isInInterface, int flags)' in 'ISharedImages'
as well.

In fact we could rewrite JavaElementImageProvider to use the constants in
'ISharedImages' to see if we're offering enough in the API.

Let me know if that makes sense to you.

Yes.  It makes a lot of sense.  
ISharedImages updated to caint the full set of images for Java elements
> 20040418
> 20040418


[api] Code Assist images



38237 