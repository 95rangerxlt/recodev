I20050420 + ZRH plug-ins of 0426

- have this code (caret @ |)

import java.util.List;

class WildcardQuickFix {
	void m(List<? extends Number> ext) {
		ext.get(0);|
	}
}

- quick assist 'assign to new local variable'

> expected: 

Number number= ext.get(0);

< actual:

? extends Number number=ext.get(0);

The quick fix should propose the upper bound of the return type.

Note: same for 'assign to new field' quick assist and 'change type' quick fix.
In general, we should never propose wildcard types, but always the upper bound
of declared return types and the lower bound for passed parameters / assignments.

I20050420 + ZRH plug-ins of 0426

- have this code (caret @ |)

import java.util.List;

class WildcardQuickFix {
	void m(List<? extends Number> ext) {
		ext.get(0);|
	}
}

- quick assist 'assign to new local variable'

> expected: 

Number number= ext.get(0);

< actual:

? extends Number number=ext.get(0);

The quick fix should propose the upper bound of the return type.

Note: same for 'assign to new field' quick assist and 'change type' quick fix.
In general, we should never propose wildcard types, but always the upper bound
of declared return types and the lower bound for passed parameters / assignments.
fixed for 20050509-2010


[quick assist] quick assist should take upper bound of return types

