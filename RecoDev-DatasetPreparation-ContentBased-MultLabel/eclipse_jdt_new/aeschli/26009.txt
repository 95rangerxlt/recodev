When the JDT UI plugin is started, all of the JDT preference page classes are 
loaded. Apparently this is done to initialize the preferences but the result is 
100's of KB of code that it loaded and likely not needed (the implementaiton of 
the preference page UI) unless the user hits the preference page.

When the JDT UI plugin is started, all of the JDT preference page classes are 
loaded. Apparently this is done to initialize the preferences but the result is 
100's of KB of code that it loaded and likely not needed (the implementaiton of 
the preference page UI) unless the user hits the preference page.
we should move the static preference initialization methods from the preference 
pages into the Java plugin.

		JavaBasePreferencePage.initDefaults(store);
		AppearancePreferencePage.initDefaults(store);
		ImportOrganizePreferencePage.initDefaults(store);
		ClasspathVariablesPreferencePage.initDefaults(store);
		RefactoringPreferencePage.initDefaults(store);		
		CodeFormatterPreferencePage.initDefaults(store);
		CompilerPreferencePage.initDefaults(store);
		
		PackageExplorerPart.initDefaults(store);
		JavaEditorPreferencePage.initDefaults(store);
	
		TemplatePreferencePage.initDefaults(store);		
		CodeGenerationPreferencePage.initDefaults(store);
		JavadocPreferencePage.initDefaults(store);
		NewJavaProjectPreferencePage.initDefaults(store);
		MembersOrderPreferencePage.initDefaults(store);

moved all preference constants + initialization code to PreferenceConstants


Perference page classes loaded too soon

performance