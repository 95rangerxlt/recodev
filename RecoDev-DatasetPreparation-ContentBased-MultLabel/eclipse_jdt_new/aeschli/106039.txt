M20050727-1200

LinkedNodeFinder#isConnectedMethod(..) is not 5.0 aware. 2 Problems:

1.) Bindings.isSuperType(..) does not work when invoked with two generic type
bindings (same problem as for ITypeBinding#isSubTypeCompatible(..), bug 106026).

2.) The algorithm assumes that subsignature is a symmetric concept, which is not
true.

The effect is that methods are not linked in Local Rename when they are declared
in generic types.

Iff bug 106026 is fixed, then the code below should restore the existing
functionality for generic types, too. However, that implementation still just
traverses up and down the hierarchy, starting at the selected method, and
ignoring other ripple methods.

private boolean isConnectedMethod(IMethodBinding meth1, IMethodBinding meth2) {
	ITypeBinding type1= meth1.getDeclaringClass();
	ITypeBinding type2= meth2.getDeclaringClass();
	if (type1.isSubTypeCompatible(type2)) {
		return Bindings.isSubsignature(meth1, meth2);
	} else if (type2.isSubTypeCompatible(type1)) {
		return Bindings.isSubsignature(meth2, meth1);
	} else {
		return false;
	}
}

M20050727-1200

LinkedNodeFinder#isConnectedMethod(..) is not 5.0 aware. 2 Problems:

1.) Bindings.isSuperType(..) does not work when invoked with two generic type
bindings (same problem as for ITypeBinding#isSubTypeCompatible(..), bug 106026).

2.) The algorithm assumes that subsignature is a symmetric concept, which is not
true.

The effect is that methods are not linked in Local Rename when they are declared
in generic types.

Iff bug 106026 is fixed, then the code below should restore the existing
functionality for generic types, too. However, that implementation still just
traverses up and down the hierarchy, starting at the selected method, and
ignoring other ripple methods.

private boolean isConnectedMethod(IMethodBinding meth1, IMethodBinding meth2) {
	ITypeBinding type1= meth1.getDeclaringClass();
	ITypeBinding type2= meth2.getDeclaringClass();
	if (type1.isSubTypeCompatible(type2)) {
		return Bindings.isSubsignature(meth1, meth2);
	} else if (type2.isSubTypeCompatible(type1)) {
		return Bindings.isSubsignature(meth2, meth1);
	} else {
		return false;
	}
}
IMO not critical for 3.1.1 since the two classes which are in a super/sub
relation must be in the same file.

Martin, we do we link them at all ? This might result in strange behaviour as
well if the two classes in the same file don't directly inherit form each
others. Then methods in between the hierarchy are simply not changed.
Fixed > 20070425 by using IMethodBinding.overrides()


[quick fix] LinkedNodeFinder#isConnectedMethod(..) is not 5.0 aware

