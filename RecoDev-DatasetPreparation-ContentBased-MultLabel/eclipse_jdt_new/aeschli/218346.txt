I do some performance tests during investigation of bug 216794. The steps are the same, my sample project contains two folders with 10k files each.

Steps from the bug 216794
"I create an essentially empty project, then copy a bunch of
files underneath and hit Refresh."

Full refresh took more than 3 minutes. And Resource#refreshLocal was only 6ms. 

Most of the time Eclipse spent in org.eclipse.jdt.internal.ui.viewsupport.ProblemTreeViewer#isExpandable which underneath calls org.eclipse.core.internal.resources.Container#members, what takes relatively a long time.

I will attach the call tree illustrating the issue.

I do some performance tests during investigation of bug 216794. The steps are the same, my sample project contains two folders with 10k files each.

Steps from the bug 216794
"I create an essentially empty project, then copy a bunch of
files underneath and hit Refresh."

Full refresh took more than 3 minutes. And Resource#refreshLocal was only 6ms. 

Most of the time Eclipse spent in org.eclipse.jdt.internal.ui.viewsupport.ProblemTreeViewer#isExpandable which underneath calls org.eclipse.core.internal.resources.Container#members, what takes relatively a long time.

I will attach the call tree illustrating the issue.
Created attachment 89280
The call tree
As mentioned, almost 40% of the time is spend in Container.members.

My guess is that JFace needs to call this to update the plus (expand) sign for the item. I don't think this can be avoided, and if it could, the time would be spend when the user expands the item.

So I think this needs to be investigated in platform/resource.

Please don't attach RAR files, not everybody has an extractor for this...
Created attachment 89381
The call tree in zip
I did further investigation. 

I created a project "test", expanded it in the package navigator and then created a structure underneath (i.e. folder "f1" with +10k files). Then I performed refresh.

I focused on PackageExplorerContentProvider#postAdd method. It creates list of runnables for each resource from the tree (so we have +10k runnables). Then for each runnable PackageExplorerProblemTreeViewer(AbstractTreeViewer)#add is called.

Because add method calls 
PackageExplorerProblemTreeViewer(AbstractTreeViewer)#isExpandable underneath, the effect is that we have PackageExplorerProblemTreeViewer(AbstractTreeViewer)#isExpandable +10k times.

I think that it is not a JFace issue. I see that there is AbstractTreeViewer#add(Object, Object[]) method that could help to improve the performance, however I'm not the expert there.

Adding Boris as he owns the viewers
The bug is in our code.

Normally, as soon as we get multiple additions to the same parent, we issue a refresh instead of individual adds.
For the given case, resources (non-Java elements) in a non Java folder, this was not done. 


Created attachment 89410
patch
fixed > 20080211

Same code is used in the package and the project explorer


[package explorer] Performance problem during refresh

performance

218346 [package explorer] Performance problem during refresh 