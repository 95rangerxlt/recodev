There seems to be an inconsistency in how the Java Source Attachment is done for
the JRE versus everything else. In the J2SDK directory (specified as the JRE to
use), it is necessary to unjar the src.jar file (JRE 1.3) or unzip the src.zip
file (JRE 1.4 to a src subdirectory in order for Eclipse to be able to find and
jump into the source files. However, when specifying the Java Source Attachment
for anything else, only a jar or zip file can be specified - a directory is not
allowed. So if a distribution of a 3rd party product is installed (even if
merely unzipped) analgous to how the J2SDK/JRE is installed, and doesn't have a
separately zipped source inside that, but rather a src directory, then one is
forced to jar the source files (or alternatively use a copy of the original zip
file).

Since in the latter case, Eclipse can jump into source in a jar/zip file, why is
it necessary to unpack the src.jar or src.zip in the J2SDK installation?

And since in the former case, Eclipse can use an unpacked source directory, why
is it not allowed to use one for other stuff?

How about making both work with both?

There seems to be an inconsistency in how the Java Source Attachment is done for
the JRE versus everything else. In the J2SDK directory (specified as the JRE to
use), it is necessary to unjar the src.jar file (JRE 1.3) or unzip the src.zip
file (JRE 1.4 to a src subdirectory in order for Eclipse to be able to find and
jump into the source files. However, when specifying the Java Source Attachment
for anything else, only a jar or zip file can be specified - a directory is not
allowed. So if a distribution of a 3rd party product is installed (even if
merely unzipped) analgous to how the J2SDK/JRE is installed, and doesn't have a
separately zipped source inside that, but rather a src directory, then one is
forced to jar the source files (or alternatively use a copy of the original zip
file).

Since in the latter case, Eclipse can jump into source in a jar/zip file, why is
it necessary to unpack the src.jar or src.zip in the J2SDK installation?

And since in the former case, Eclipse can use an unpacked source directory, why
is it not allowed to use one for other stuff?

How about making both work with both?
This is interesting since Eclipse doesn't have any support to attched source to 
a zip file where the source is located in a folder. Is the corrsponding source 
part of your workspace (inside a folder that is not a source folder)? This 
would explain that you see the source. But the source is not "really" conected 
to the jar file. As a result setting a breakpoint in the "source" would not set 
a breakpoint in the class file.

Currently only Jars and Zips are supported as source attachements. If this 
doesn't work for the rt.jar I assume that the value of the root variable path 
is not correct. For the JDK 1.3.1 its value must be "src" and for JDK 1.4.x it 
must be the empty. 
Regarding the JRE_LIB, I did some experimenting by renaming the src directory 
(unpacked src.jar) and the src.jar file, and discovered that the jar file IS 
what is actually used, but that a change seems to be seen by Eclipse only 
after a restart. I.e. I made the src.jar file inaccessible by renaming it, but 
I was still able to mark a core Java class and select 'Open declaration' from 
the context menu and get the source code to open; conversely, after 
subsequently stopping and restarting Eclipse, when I tried this again I got an 
error message that there was no source attachment. Renaming the file back to 
src.jar didn't help until I again stopped and restarted Eclipse, at which 
point the source attachment was simply there again.

The original 'bug' report resulted from some misleading sequence of events 
while installing Eclipse on another PC, whereby the source attachment was 
missing after adding a new JRE in the Preferences | Java | Installed JRE 
section, and then was present after unpacking the src.jar file. This lead me 
to mistakenly believe that the src directory was used. (I used to use another 
IDE where the jar file had to be unpacked to a src directory.) It is possible 
that Eclipse was stopped and restarted inbetween, but no way to tell for sure 
anymore.

Whether the apparent necessity of stopping/restarting of Eclipse in order to 
get it to attach jar files is a problem or not, I leave for your 
consideration. I say apparent because I didn't exhaustively test this.

In any case, I have to retract the assertion of Eclipse being inconsistent. It 
just uses jar/zip files, as stated.

However, the other point is still valid: that some 3rd party products are 
distributed in jar/zip files which MUST be unpacked, or in self-installers 
(exe programs), which create directory structures where the source code is 
provided in a directory hierarchy and not in a separate jar/zip file. So it 
would be a 'nice to have' if
(1) a directory could be specified for the source attachment, and
(2) to avoid conflicts in the classpath for people working on a project who
    install the 3rd party product on a different drive or directory, it
    could be specified via a classpath variable similar as for the JRE_LIB.

Is anything being done for this request for 2.1?
I too think it would be useful to be able to use a variable to specify a
directory tree as a source attachment for a jar - usually when a project is
using some third party installation.


Currently source attachments are only possible for JARs. The source attachment 
must be in a JAR or ZIP itself. For example for the rt.jar you can use the 
source.zip included in the JDK. If the source zip uses a directory structure 
like src/java/util/Vector you can configure that 'src' is the source 
attachments _root_'. Open the property on a JAR to configure this.

There are several improvements planed for 2.1: The source attachment root is 
automatically detected. This is in builds greater than M3, you will see that 
there is no UI anymore to configure the source attachment root.
Supported by the infrastructure, but not yet by the UI is the posibility to not 
only attach a folder of sources.
Also new is to attach source to a class folder. 

Variables can be used already, but this only works for variable class path 
entries. No mixing of normal library and variable entries is possible.

We will see if I can do the changes for M4

feature added (in M4)


Allow unzipped source for Java Source Attachment [build path]

