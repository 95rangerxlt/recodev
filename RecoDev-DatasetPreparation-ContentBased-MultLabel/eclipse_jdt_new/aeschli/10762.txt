Eclipse 2.0 Build 20020214

If I generate the getter and setter methods of a field whose name starts with 
the 'F' letter, this letter is ignored in the accessors method names.

Examples :
	private int fidji;
	public String ff;
	protected Boolean fanfan;
	/**
	 * Gets the anfan.
	 * @return Returns a Boolean
	 */
	public Boolean getAnfan() {
		return fanfan;
	}

	/**
	 * Sets the anfan.
	 * @param anfan The anfan to set
	 */
	public void setAnfan(Boolean anfan) {
		fanfan = anfan;
	}

	/**
	 * Gets the f.
	 * @return Returns a String
	 */
	public String getF() {
		return ff;
	}

	/**
	 * Sets the f.
	 * @param f The f to set
	 */
	public void setF(String f) {
		ff = f;
	}

	/**
	 * Gets the idji.
	 * @return Returns a int
	 */
	public int getIdji() {
		return fidji;
	}

	/**
	 * Sets the idji.
	 * @param idji The idji to set
	 */
	public void setIdji(int idji) {
		fidji = idji;
	}
____________________________________________________
Nicolas HERVE - nherve@sysdeo.com
SYSDEO
98 route de la Reine 92100 Boulogne 
Tél : +33 (0)1 41 22 03 00 - http://www.sysdeo.com
____________________________________________________

Eclipse 2.0 Build 20020214

If I generate the getter and setter methods of a field whose name starts with 
the 'F' letter, this letter is ignored in the accessors method names.

Examples :
	private int fidji;
	public String ff;
	protected Boolean fanfan;
	/**
	 * Gets the anfan.
	 * @return Returns a Boolean
	 */
	public Boolean getAnfan() {
		return fanfan;
	}

	/**
	 * Sets the anfan.
	 * @param anfan The anfan to set
	 */
	public void setAnfan(Boolean anfan) {
		fanfan = anfan;
	}

	/**
	 * Gets the f.
	 * @return Returns a String
	 */
	public String getF() {
		return ff;
	}

	/**
	 * Sets the f.
	 * @param f The f to set
	 */
	public void setF(String f) {
		ff = f;
	}

	/**
	 * Gets the idji.
	 * @return Returns a int
	 */
	public int getIdji() {
		return fidji;
	}

	/**
	 * Sets the idji.
	 * @param idji The idji to set
	 */
	public void setIdji(int idji) {
		fidji = idji;
	}
____________________________________________________
Nicolas HERVE - nherve@sysdeo.com
SYSDEO
98 route de la Reine 92100 Boulogne 
Tél : +33 (0)1 41 22 03 00 - http://www.sysdeo.com
____________________________________________________
Moving to JDT UI.
Check out the Java preferences. Workbench->Preferences->Java->Code Generation. 
There you can find an options to turn this behaviour off.
As a side note, it seems to me that it should be off by default.
the f prefix convention is not a widespread convention, so I agree that the 
current behaviour should not be on by default. We could leave it as the default
when the rule defines an "f" prefix followed by a captial letter, e.g., fField.
This would complicate the rules significantly therefore we should not enable 
the prefix removal by default.


The 'Use getter/setter prefixes' is now disabled in the default settings.
> 20020305


Generate getter and setter of a field starting with the 'F' letter



Fixed bug 107621: [implementation] JavaSpellingReconcileStrategy  calls getContentType() and it is not used 

10762 Generate getter and setter of a field starting with the 'F' letter 