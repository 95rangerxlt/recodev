the field name guessing  heuristic in generate getter/setter can be easily 
fooled by names like fInt, aBoolean (common name used by ex-smalltalkers)
what you get is shown below (generate getter/setter lead to *syntax* errors):

class G {
 int aBoolean;
	
 /**
  * Gets the boolean.
  * @return Returns a int
  */
 public int getBoolean() {
 	return aBoolean;
 }

 /**
  * Sets the boolean.
  * @param boolean The boolean to set
  */
 public void setBoolean(int boolean) { //<< syntax error
 	aBoolean = boolean;
 }
}

the field name guessing  heuristic in generate getter/setter can be easily 
fooled by names like fInt, aBoolean (common name used by ex-smalltalkers)
what you get is shown below (generate getter/setter lead to *syntax* errors):

class G {
 int aBoolean;
	
 /**
  * Gets the boolean.
  * @return Returns a int
  */
 public int getBoolean() {
 	return aBoolean;
 }

 /**
  * Sets the boolean.
  * @param boolean The boolean to set
  */
 public void setBoolean(int boolean) { //<< syntax error
 	aBoolean = boolean;
 }
}
We need a preference option for setting the prefix to be used for variables. 
Some people use _ at the end for example.

The prefix information can be used for instance variable name suggestions in 
code assist
Along a similar vein, code conventions where instance variables are prefixed 
with a non alphanumeric character cause the getter/setter generation to produce 
odd code.

e.g:
mTest  ==> getTest()   // correct.
_test  ==> get_test()  // wrong.
_Test  ==> get_Test()  // wrong.
m_test ==> getM_test() // wrong.

The preferences should allow for a prefix (and possibly a suffix), and the 
first letter after the prefix should become capitalised. Having the explicit 
prefix is probably a better choice than the "let's guess what it is" mode. 
A "Hungarian" option could be added to allow the "let's guess" mode to be 
retained.

Added preference page > 11122
improved name guessing heuristic to not take keywords


generate getter/setter: easily fooled by field names (leads to syntax errors)



HEAD - Fixed bug 354554: [null] conditional with redundant condition yields weak error message 

bug 75455 

bug 75455 

Bug 54557 - Launch configuration: 'move type' refactoring support 

Bug 54557 - Launch configuration: 'move type' refactoring support 

Bug 54557 - Launch configuration: 'move type' refactoring support 

125455 [clean up] Compile error, opening bracket after //NON-NLS 