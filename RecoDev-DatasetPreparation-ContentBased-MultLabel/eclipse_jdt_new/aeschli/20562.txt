I have a method declared in a super-type which returns "SuperType.InnerClass" 
as its result.  In the subclass, when I type in the method name in the class 
body and press control+space, it generates a stub and adds imports for me.  
When it does this, it adds:

import pack.SuperType.InnerClass;

This is a compile error, the import should just be the Outerclass.

I have a method declared in a super-type which returns "SuperType.InnerClass" 
as its result.  In the subclass, when I type in the method name in the class 
body and press control+space, it generates a stub and adds imports for me.  
When it does this, it adds:

import pack.SuperType.InnerClass;

This is a compile error, the import should just be the Outerclass.
Actually, there should be *no* import statement added because the Innerclass is 
defined in the Types super-class, and therefore visible without any import.

But you would probably want to test publicly nested classes that aren't picked 
up through inheritance.
The import isn't need in this case. But inserting it doesn't produce a compile 
error in my scenario. It does if the type isn't visible in the subclass. Randy 
do you have steps to reproduce the PR.
Oooh!  This one is tricky.

The inner class defined in the baseclass has to be *protected*, and the 
superclass has to be in another package.  Therefore, the type *is* visible to 
the subclass, because it inherits from the baseclass, but the type is not 
visible to the CU, because the type is protected in another package.
Thanks for the steps.

This seems to be a seldom case. Martin, please investigate if we can fix this 
easily. If not, I opt to postpone.
I said that it was tricky, but not rare.  Inner classes have protected 
visibility quite often.  It is one of the reasons for nesting a class inside 
another.  I don't think you can make a statement about the frequency of 
something that is allowed by the language.

Anyway, I hope you can fix it.
What I wanted to say is that we somehow have to decide which bugs we are going 
to fix and how expensive the fix is. In this case I know that the AST doesn't 
give use scopes so fixing it will very likely require implementing our own 
visibility rules, which will introduce another set of problems. So if this is 
the fix then it is expensive and I am in favour of fixing more critical bugs 
then.

Martin, may be we should think about requesting scopes or visibility queries 
from core.
Organize imports can handle this case (and does not insert an import), but add 
import on code assist doesn't. The difference is that organize import has the 
AST build up and queries the visibility. We would have to build as AST or a 
type hierarchy on code assist which might become a performance problem.

What I think is strange is that code assist returns a fully qualified string to 
insert. It could know that the inner interface can be accessed without 
qualification.
Philippe, what do you think. Should I move this bug report to JCore-code assist?

philippe, need your opinion here:
Code assist for a inner type seems to returns a fully qualified type name, even 
a simple type would be possible. is this a bug in code assist? 
The same kind of problem occurs when you generate a new class that extends an 
inner class.  The import is incorrectly generated.  I guess that the origin is 
the same. 
Gilles, can you open a new bug for this? I don't think this bug describes the
same. Please add steps to reproduce so I can have a look at it.
This seems to be fixed in 20050425 HEAD.

package pack;

public class Other {
	protected static class Inner {
	}
}
---------
package pack3;

import pack.Other;
public class X extends Other {
	Inner // code assist here
}



override method generated invalid import statement [code manipulation]

