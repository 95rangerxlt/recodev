3.0M4

package p;
public class A {
	void m() {
		new Runnable() {
			public void run() {
				new Thread() {
					public void run() {
					}
				};
			}
		};
	}
}

Select 'new Thread() {...}' in the outline
-> The label in the workbench StatusLine says:
"p.A.1..newThread() {...} - prj/src"
   but should probably be:
"p.A.new Runnable() {...}.new Thread() {...} - prj/src"

Example in "real" life: PerformRefactoringUtil#handleChangeAbortException(.).

Probably the same cause as for bug 44285:
IType#getTypeQualifiedName('.') returns a strange name for anonymous source types.

3.0M4

package p;
public class A {
	void m() {
		new Runnable() {
			public void run() {
				new Thread() {
					public void run() {
					}
				};
			}
		};
	}
}

Select 'new Thread() {...}' in the outline
-> The label in the workbench StatusLine says:
"p.A.1..newThread() {...} - prj/src"
   but should probably be:
"p.A.new Runnable() {...}.new Thread() {...} - prj/src"

Example in "real" life: PerformRefactoringUtil#handleChangeAbortException(.).

Probably the same cause as for bug 44285:
IType#getTypeQualifiedName('.') returns a strange name for anonymous source types.
moving to jdt.core:

getDeclaringType of 'new Thread()' should be 'new Runnable()'), no?
getDeclaringType of 'new Thread()' IS 'new Runnable()'). Problem comes from 
getTypeQualifiedName('.') that returns "p.A.1." for 'new Runnable()'. 

I agree that '1' should not appear. However since the anonymous has an empty 
name, the best we can do is to return "p.A.". Can you check that the type 
qualified name ends with a '.' and add your special label 'new Runnable() 
{...}'?
Also note that the specification of IType.getTypeQualifiedName(char) says that 
the type name is append to the qualified name of the declaring type. So for an 
anonymous, it is expected that the qualified name ends with '.'
Removed '1' in the name of an anoymous type.

Moving back to JDT/UI to add the special label 'new Runnable() {...}' in the 
case of an anonymous type.
fixed > 20031205

added new test case for labels
JavaElementLabelsTest


JavaElementLabels broken for nested anonymous types



44737 JavaElementLabels broken for nested anonymous types 