In addition to the "add else block" it ccould be nice to have a "add then block"...

and my proposal for a solution from the newsgroup:
---
David Corbin wrote:

> Eyðun Nielsen wrote:
>
>
>> It's actually already there.
>>
>> Example:
>>
>> You have this:
>>
>> ...
>> b();
>
>
>
> No, I don't.  I already HAVE the if statement.  I simply wish to turn a
> single statement into a blockstatement.
>
>
Oh, sorry - I think I misunderstood you...

Well, I took the challange... It's actually quite easy to implement. (I have
never worked with the internals of jdt before - and I came up with this after a
couple of hours today)


1. In org.eclipse.jdt.internal.ui.text.correction.QuickAssistProcessor make a
new method:

<code>
  private boolean getAddThenProposals(
    IInvocationContext context,
    ASTNode node,
    Collection resultingCollections)
    throws CoreException {
    Statement statement= ASTResolving.findParentStatement(node);
    if (!(statement instanceof IfStatement)) {
      return false;
    }
    IfStatement ifStatement= (IfStatement) statement;
    if (ifStatement.getThenStatement() instanceof Block) {
      return false;
    }

    if (resultingCollections == null) {
      return true;
    }
    AST ast= statement.getAST();
    ASTRewrite rewrite= new ASTRewrite(statement);

    ASTNode thenStatement=
      ASTNode.copySubtree(ast, ifStatement.getThenStatement());
    Block replacingBody= ast.newBlock();
    replacingBody.statements().add(thenStatement);
    rewrite.markAsInsert(
      ifStatement,
      ASTNodeConstants.THEN_STATEMENT,
      replacingBody,
      null);

    String label=
CorrectionMessages.getString("QuickAssistProcessor.addthenblock.description");
//$NON-NLS-1$
    Image image= JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_ADD);
    ASTRewriteCorrectionProposal proposal=
      new ASTRewriteCorrectionProposal(
        label,
        context.getCompilationUnit(),
        rewrite,
        1,
        image);
    proposal.ensureNoModifications();
    resultingCollections.add(proposal);
    return true;
  }
</code>

and make appropriate calls to this new method in

hasAssists(IInvocationContext)

and in

getAssists(IInvocationContext context, IProblemLocation[] locations)

also in org.eclipse.jdt.internal.ui.text.correction.QuickAssistProcessor

2. add one line in
org.eclipse.jdt.internal.ui.text.correction.CorrectionMessages.properties:
<code>
QuickAssistProcessor.addthenblock.description=Add then block
</code>

And thats it... Compile and be happy...

Regards,
-eyðun

---

In addition to the "add else block" it ccould be nice to have a "add then block"...

and my proposal for a solution from the newsgroup:
---
David Corbin wrote:

> Eyðun Nielsen wrote:
>
>
>> It's actually already there.
>>
>> Example:
>>
>> You have this:
>>
>> ...
>> b();
>
>
>
> No, I don't.  I already HAVE the if statement.  I simply wish to turn a
> single statement into a blockstatement.
>
>
Oh, sorry - I think I misunderstood you...

Well, I took the challange... It's actually quite easy to implement. (I have
never worked with the internals of jdt before - and I came up with this after a
couple of hours today)


1. In org.eclipse.jdt.internal.ui.text.correction.QuickAssistProcessor make a
new method:

<code>
  private boolean getAddThenProposals(
    IInvocationContext context,
    ASTNode node,
    Collection resultingCollections)
    throws CoreException {
    Statement statement= ASTResolving.findParentStatement(node);
    if (!(statement instanceof IfStatement)) {
      return false;
    }
    IfStatement ifStatement= (IfStatement) statement;
    if (ifStatement.getThenStatement() instanceof Block) {
      return false;
    }

    if (resultingCollections == null) {
      return true;
    }
    AST ast= statement.getAST();
    ASTRewrite rewrite= new ASTRewrite(statement);

    ASTNode thenStatement=
      ASTNode.copySubtree(ast, ifStatement.getThenStatement());
    Block replacingBody= ast.newBlock();
    replacingBody.statements().add(thenStatement);
    rewrite.markAsInsert(
      ifStatement,
      ASTNodeConstants.THEN_STATEMENT,
      replacingBody,
      null);

    String label=
CorrectionMessages.getString("QuickAssistProcessor.addthenblock.description");
//$NON-NLS-1$
    Image image= JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_ADD);
    ASTRewriteCorrectionProposal proposal=
      new ASTRewriteCorrectionProposal(
        label,
        context.getCompilationUnit(),
        rewrite,
        1,
        image);
    proposal.ensureNoModifications();
    resultingCollections.add(proposal);
    return true;
  }
</code>

and make appropriate calls to this new method in

hasAssists(IInvocationContext)

and in

getAssists(IInvocationContext context, IProblemLocation[] locations)

also in org.eclipse.jdt.internal.ui.text.correction.QuickAssistProcessor

2. add one line in
org.eclipse.jdt.internal.ui.text.correction.CorrectionMessages.properties:
<code>
QuickAssistProcessor.addthenblock.description=Add then block
</code>

And thats it... Compile and be happy...

Regards,
-eyðun

---
Oh btw - I used the source for eclipse 3.0 M5 

-eyðun
nice! I added the code and made some changes to complete it:

- added support for else block; while, do and for statements
- use 'createMove()' instead of ASTNode.copySubtree (otherwise you loose all 
formatting and comments of the body statement.

you can submit changes as a patch (in the TEAM menu), that's the most easiest 
way for me to take fixes.

Thanks a lot!


Quick Assist Suggestion: add block to single-line then-statement [quick assist]



47657 Quick Assist Suggestion: add block to single-line then-statement [quick assist] 