I'm attempting to use the new SoyLatte JDK6 for MacOS, which doesn't understand the -XstartOnFirstThread JVM option. It appears that if I have a projects that includes a jar named 'swt.jar', it will automatically add the -XstartOnFirstThread JVM argument whenever I run a main() from inside eclipse. SoyLatte doesn't understand -XstartOnFirstThread, so it will not launch my application.

There does not appear to be any way to tell Eclipse not to do this, either in the launch configuration screen, or the project options.

More information:

I'm attempting to use the new SoyLatte JDK6 for MacOS, which doesn't understand the -XstartOnFirstThread JVM option. It appears that if I have a projects that includes a jar named 'swt.jar', it will automatically add the -XstartOnFirstThread JVM argument whenever I run a main() from inside eclipse. SoyLatte doesn't understand -XstartOnFirstThread, so it will not launch my application.

There does not appear to be any way to tell Eclipse not to do this, either in the launch configuration screen, or the project options.

More information:
CC'ing Andre who owns the mac launching plug-in. Let me know what your thoughts are Andre - perhaps this is an opportunity for me to make a mac launching contribution?
Dup of bug 211648?
The SoyLatte/standard VM support is covered in bug 156343, but you need to be
able to omit this argument in an Apple-supplied VM, too.  I'm trying to work on
the SWT-in-AWT bridge for the Cocoa port, and I can't debug it because I need
to run an AWT application with the SWT on the classpath. So, I need to start
the VM without the -XstartOnFirstThread.

I hacked around this in the Mac OS X launching extension. I'll attach my patch
shortly when my dev machine is back up.

Created attachment 111983
Workaround for problem

This is a potential patch, though I don't like it as much as providing a proper UI in the launch configuration panel.  If you add the VM argument "-DusingAWT=true" the launcher will skip the addition of -XstartOnFirstThread, even if the other heuristics indicate it should.
To clarify my understanding of this issue (my understanding is from Scott Kovatch's email).  

This flag is only necessary for OS X JVMs.  Currently Apple's implementation and Soylatte both implement this http://mail.openjdk.java.net/pipermail/bsd-port-dev/2008-September/000031.html .

My interest in this is from the OpenJDK port to BSD (OS X).  

Since the UI thread is thread 0 on OS X and both AWT and SWT require to run their UI event dispatchers on this thread we have an issue when both AWT and SWT are used within the same application.

Is the best (only) solution to this to have OpenJDK implement this same flag?  Is their away to have better AWT/SWT integration in these open source projects?

After doing more research on -XstartOnFirstThread and Cocoa, I wonder if this is necessary for Cocoa?  I might be wrong, but all SWT needs is a runloop to process events, if so, any thread can create a runloop.  I found this site useful.  http://www.cocoadev.com/index.pl?RunLoop

It's needed because Cocoa has a requirement that all user event dispatch must happen on thread 0.  Without -XstartOnFirstThread, Display will create an NSApplication on a non-main thread, and the SWT won't be able to pull and dispatch events from the non-main thread.

So, you are correct that any thread can create a runloop, but that's only helpful if you need to use timers or Foundation/CoreFoundation networking code. If that thread is doing anything that requires user interaction, or you want to display some kind of progress to the user, those actions must be done on the main thread using performSelectorOnMainThread (see NSThread.h)
Is it useful to integrate with the runloop that is created and managed by AWT?  Apple creates a runloop on thread 0 for AWT to work.  SWT would just need to get access to that.  

I do not really know how Apple's code works.  I am interested in this from an OpenJDK point of view, where there currently is no Cocoa (or Carbon) based AWT.  One thing that I don't understand is how the X11 implementation works if it is not starting the runloop on thread 0.

The fact that Eclipse silently adds this option, which can cause a project to fail for mysterious reasons when you launch it on Mac (and run fine everywhere else) should really be explained somewhere.  FAQ maybe?  

As I describe on my blog (http://blog.renanse.com/2008/07/swt-support-and-mac-pains.html), just adding swt.jar to my class path causes my application to fail with unhelpful "[NSConditionLock unlock]: lock ( '(null)') unlocked when not locked" messages.

I have been told my conclusions about this being a swt-cocoa issue were wrong (it seemed logical due to the preceeding "[Java CocoaComponent compatibility mode]: Enabled" message) and that this flag is the true issue.  Can someone tell me if that's the right track?
I've committed <http://hg.openjdk.java.net/macosx-port/macosx-port/jdk/rev/81735198bd53> to let developers workaround this using an environment variable in OpenJDK.

If someone could add a checkbox in the run/debug UI to simply evade adding the -XstartOnFirstThread argument, we would *greatly* appreciate it.
Doesn't it work if you just add the non-Apple VM as "Standard VM" instead of
"Mac OS X VM"? This should be possible after bug 156343.
I can confirm that this works (creating a 'Standard VM').  It's a bit of a hassle and unexpected.  Much better would be an option in the UI to turn this behavior on and off so people can see what they are running.
This will become even more of an issue with JavaFX on Mac, because SWT and JavaFX are supposed to interoperate cleanly. See this article:
http://docs.oracle.com/javafx/2.0/swt_interoperability/jfxpub-swt_interoperability.htm
The suggestion in comment 10 to add a checkbox to the run/debug configurations dialog (maybe on the Arguments or JRE tab) seems like a good one.
Running OSX 10.6.8, Eclipse Version: Juno Release, Build id: 20120620-1657

I tried configuring Standard VM with OpenJDK, but ran into same deadlock issues. Also tried running Dev mode from command line, but also with errors:

ERROR: transport error 202: connect failed: Connection refused
ERROR: JDWP Transport dt_socket failed to initialize, TRANSPORT_INIT(510)
JDWP exit error AGENT_ERROR_TRANSPORT_INIT(197): No transports initialized [../../../src/share/back/debugInit.c:741]

I've used Mac for the last 2 years, but only started running into these recently after upgrade tot he latest GWT.

This seems like such an easy fix to add a flag to the configurations to exclude -XstartOnFirstThread flag for Mac. Anyone can tell if there are plans to do this anytime soon? I see threads from 2009 about these issues on Mac... really?

A fix would make all the difference in the world, otherwise it is a major show stopper for developing on the Mac.
Created attachment 220699
possible fix

Here is a quick patch I through together, it adds an option to the Arguments tab to include the -XStartOnFirstThread VM arg (or not). 

It will only show up if the platform is Mac OSX.
Comment on attachment 220699
possible fix

Thank you for this! BTW, upgrading to Mountain Lion 1.8.1 and java version "1.6.0_33", Java(TM) SE Runtime Environment (build 1.6.0_33-b03-424-11M3720), Java HotSpot(TM) 64-Bit Server VM (build 20.8-b03-424, mixed mode)

fixed the issue for me... Not sure if it has changes/fixes in the JVM, but the problem stopped occurring.
Pushed the patch to: http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=b8522a5e63398273f0b09e15ac63db48f8373a95

and a launch dialog fix to: http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=8f7e944d6a3b0c4fab4d139ad72727270f450078
ATTR_USE_START_ON_FIRST_THREAD was added with @since 3.7; shouldn't it be 3.9?
> ATTR_USE_START_ON_FIRST_THREAD was added with @since 3.7; shouldn't it be 3.9?

No, see the bundle version in the manifest. Bundle versions don't increase with every release, see http://wiki.eclipse.org/index.php/Version_Numbering .


Need option to omit -XstartOnFirstThread for SWT projects on MacOS



Bug 211625 - Need option to omit -XstartOnFirstThread for SWT projects on MacOS 

Bug 211625 - Need option to omit -XstartOnFirstThread for SWT projects on MacOS 