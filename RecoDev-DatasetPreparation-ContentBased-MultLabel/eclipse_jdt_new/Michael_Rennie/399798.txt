The current StandardVMType creates LibraryLocation instances for libs in the extension directory with empty and null values for:
* sourcepath
* packageRoot
* javadocLocation

Generally speaking this is correct because nobody should make use of those libraries on the extension classpath. The problem is with JDK8b75 javafx is put on the extension classpath and so people developing JavaFX applications with eclipse won't get javadoc informations with manually updating their library path which is not really user friendly.

My proposal would be to provide an extension point which also plugins to contribute source and javadoc lookups for extension library locations.

The current StandardVMType creates LibraryLocation instances for libs in the extension directory with empty and null values for:
* sourcepath
* packageRoot
* javadocLocation

Generally speaking this is correct because nobody should make use of those libraries on the extension classpath. The problem is with JDK8b75 javafx is put on the extension classpath and so people developing JavaFX applications with eclipse won't get javadoc informations with manually updating their library path which is not really user friendly.

My proposal would be to provide an extension point which also plugins to contribute source and javadoc lookups for extension library locations.
I'd be willing to work on a patch to get this feature. Do you guys think it is worth it?
o.e.jdt.launching belongs to JDT/Debug.

I'm fine with setting default locations as long as users can still override these paths via UI (Java Build Path properties page or Installed JREs preference page), and the user's modifications are not overridden automatically again.

Note that there is already API to set attributes on a classpath container library, see e.g. how the properties page implements this in org.eclipse.jdt.internal.ui.wizards.buildpaths.BuildPathSupport#updateContainerClasspath(..).

The only thing the extension point would add is a callback to configure the default values for libraries in the ext folder.
(In reply to comment #1)
> I'd be willing to work on a patch to get this feature. Do you guys think it
> is worth it?

I fine with the idea, we would also need to consider what happens when the location the ext point refers to no longer exists - i.e. after a JDK update on Mac for example, then you are right back to having the user add the doc, etc to the libs via the UI (until whomever provides the extension point updates the locations).
Created attachment 226576
patch

I first try for a patch - I'm uncertain for the nameing of the extension point
(In reply to comment #3)
> (In reply to comment #1)
> > I'd be willing to work on a patch to get this feature. Do you guys think it
> > is worth it?
> 
> I fine with the idea, we would also need to consider what happens when the
> location the ext point refers to no longer exists - i.e. after a JDK update
> on Mac for example, then you are right back to having the user add the doc,
> etc to the libs via the UI (until whomever provides the extension point
> updates the locations).

I'm not sure I get that, I think those LibraryLocations from the  StandardVMType are recreated everytime the IDE launches - I don't see them getting persisted.

The extension point does not contribute the location but a callback to calculate it if it returns a wrong location for the JavaDoc, Source, PackageRoot - I think that should not make the system fail.

I think the patch provided does exactly what Markus requests, it sets default values the user can overrule in his property pages.
(In reply to comment #5)

> I'm not sure I get that, I think those LibraryLocations from the 
> StandardVMType are recreated everytime the IDE launches - I don't see them
> getting persisted.
> 

For some reason I thought you were talking about providing an extension point that provided paths, not a callback, which makes my concern moot.

> I think the patch provided does exactly what Markus requests, it sets
> default values the user can overrule in his property pages.

I'll have a look at the patch as soon as I can, thanks Thomas.
Sorry for ping this but do you have a timeframe you can take a look? This is really an important extension to get appropriate JavaFX support into Kepler.
Created attachment 227568
Updated patch

Here is an updated patch, it contains:

1. removed the static inner class in favour of making the interface more explicit
2. updated the doc for the new API
3. updated the since tag
4. updated the copyrights
5. updated the resolver to be able to provide index locations as well - use the new API from bug 399098

I would like to make a few regression tests for this as well. Thomas, please have a look at the updated patch. If you are happy with it, I can commit it and work on the regression tests later.
Looks good.
Pushed updated patch + a regression test to:

http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=315106c5f35ae016a385a9cda964fd7a45388b21

Thanks Thomas
I added a few more tests for EE files here:

http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=95810c8ef0b738195c4ff1cb2b9dcd1ca16a39a0


StandardVMType should allow to contribute default source and Javadoc locations for ext libraries

api, contributed, noteworthy

Bug 399798 - StandardVMType should allow...add java.home prop to win32 ee files 

Bug 399798 - StandardVMType should allow... - add more tests for EE files 

Bug 399798 - StandardVMType should ... - improve the test to not add test paths outside of the test 

Bug 399798 - StandardVMType should allow to contribute default source and Javadoc locations for ext libraries 