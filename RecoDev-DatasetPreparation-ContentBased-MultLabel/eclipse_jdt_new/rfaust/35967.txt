1)


When a TestSuite is created using the wizard or through a recreate TestSuite,


then the template for adding a testCase to the suite is something like


**** suite.addTest(new TestSuite(<TESTCASE>.class));


wouldn't it be cleaner to use 


**** suite.addTestSuite(<TESTCASE>.class);




2) 


It would be nice if one could choose to recursively add TestSuites (Classes that 
have a public static Test suite()  method) from subPackages.


**** suite.addTest(<SOME_SUBPACKAGE_TESTSUITE>.suite());


That would make a tree-structure of TestSuites..

1)


When a TestSuite is created using the wizard or through a recreate TestSuite,


then the template for adding a testCase to the suite is something like


**** suite.addTest(new TestSuite(<TESTCASE>.class));


wouldn't it be cleaner to use 


**** suite.addTestSuite(<TESTCASE>.class);




2) 


It would be nice if one could choose to recursively add TestSuites (Classes that 
have a public static Test suite()  method) from subPackages.


**** suite.addTest(<SOME_SUBPACKAGE_TESTSUITE>.suite());


That would make a tree-structure of TestSuites..
we should simplify the generated code as described in item 1)
Does this mean Item 2) won't get in?

Isn't 2) covered by the support to run all tests inside a package, source 
folder, project?
Within Eclipse it is indeed, but this support could be brought outside eclipse 
by creating suites that recusively add suites in subPackages.




So Creating a new TestSuite could have that option,


And to go even further, when you Run As\Junit Test on a Package, there could 
also be an option to transform this run into a testSuite. (Similar to generating 
Javadoc and creating a javadoc.xml to do the same)



Created attachment 4589
fixes prob 1
released randy's patch for 1).


fixed in M1 3.0


Create TestSuite Template can be simplified [JUnit]

