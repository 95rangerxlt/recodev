20020604
it should be available on compilation units that have 1 type or more than 1 
type if 1 of the types is the primary type

some 99% of all cus known to man belong to that category

20020604
it should be available on compilation units that have 1 type or more than 1 
type if 1 of the types is the primary type

some 99% of all cus known to man belong to that category
btw it used to be - this looks like a regression
Seems to be an enablement problem. For a CU in a default package with a 
field "Object field;" there is no getter setter action. After selecting the 
type and reselecting the CU the action is in the source menu.
Martin,

can you please have a look. As discussed we should enable the action without 
checking if the type has fields.
fixed for add delegate > 20030606
Action enablement (on selectionChanged)
- enabled when selection is on fields from came CU and not in an interface
- enable on a type if in a CU and not an interface
- enabled on all CU's

Run:
Bring dialog (Not applicable) when invoked
- on a interface
- on a class with no fields
- on a CU with no types
Never show an empty dialog.

Needs to be done as well for
- 'Override' (interface rule does not apply)
- 'Constructors'
- 'Setter/Getter'
Randy, can you do the 3?

I'll take these.
Created attachment 5134
dubious fix.

This doesn't really make sense to me for the "Add Constructors from superclass"
action (see attachment). Why should this action be available when a field is
selected? Also, if the CU is selected, I just throw up a generic, "operation
not applicable: message. Is this really what we want?
You're right, doesn't make sense for constructors.
Although, the action should be available on CUs and work on the primary type
when invoked. (A dialog would show up on run when there is no primary type)

(ICompilationUnit.findPrimaryType)
Ok. I will reimplement this for the "Add superclasss..." action so that the 
action is not available when selecting a field. I think this is also going to 
be true for the "Override/Implement Methods" action as well, since this is not 
really applicable to fields either.

A different problem is with the override/implement methods action. Currently, 
we will open the dialog even when there are no methods to override. We'll have 
to figure out before the dialog is opened whether or not there are methods to 
override. Rather than again calculate in the dialog what the methods are, it 
may make sense to pass the methods to the dialog so we only do this (possibly 
expensive) calculation once.
I added a method 'hasMethodsToOverride' to the OverrideMethodDialog
Created attachment 5135
proposed fix for "Add constructors..." action.

+ No "add constructor..." action available on field selection.
+ Uses primary type when action selected on a cu.
Created attachment 5138
proposed fixes.

+ No "add constructor..." action available on field selection.
+ Uses primary type when actions selected on a cu.
+ No "override methods..." action available on field selection.
+ No choices available on interface selection.
+ Checks first if methods to override availabe, and provides message that there
are none available instead of opening up dialog with blank tree.
(note that there is also a change in AddGetterSetterAction.java provided in
attachment 5081).
released patch > 20030610
*** Bug 38492 has been marked as a duplicate of this bug. ***


source generation actions: should be available on most cus



38491 source generation actions: should be available on most cus 