In our automated tests, we create a java project by expanding a template,
including a few library jars, classpath file, etc; and then create a source file
from another template, which has a Jpf.Controller class-level annotation (an
apache beehive annotation). The feature code we are testing that creates a UI
model from the pageflow controller uses an AST to get information from the
controller class.

The problem is that sometimes (out of around 20 tests, this fails just about
once each run) calling resolveAnnotation on the AST node of the Jpf.Controller
annotation returns null. The project and initial generated class is always the
same, and no errors are thrown from the JDT. I put in some logging, and it is
definitely finding the Jpf.Controller annotation node, it just can’t get the
resolved annotation from it (calling annotation.resolveAnnotation() returns
null). It fails on different tests too, so I don’t think it’s a problem with a
particular test.

I thought maybe the actual type of the annotation (i.e.
org.apache.beehive.netui.pageflow.annotations.Jpf) might not be available in the
typesystem yet, causing the resolution to fail, so I added some code to the
tests to wait for that IType to be available before doing anything else. That
seems to help, it’s failing less often, but it’s still failing occasionally.

The projects created from the tests include configuration files for the
classpath, and jdt options, including setting the compiler compliance level to
jdk5.0. The annotation type lives in a jar on the project's classpath.

Because this is an intermittent problem I don't have a solid repro case to
attach. It seems to only happen on tests that create the class file and then
immediately try to retrieve the information; other tests that create the class
file and then do other things before retrieving the UI model don't seem to have
this problem, so it might be a timing issue, where something is not resolved yet...?

In our automated tests, we create a java project by expanding a template,
including a few library jars, classpath file, etc; and then create a source file
from another template, which has a Jpf.Controller class-level annotation (an
apache beehive annotation). The feature code we are testing that creates a UI
model from the pageflow controller uses an AST to get information from the
controller class.

The problem is that sometimes (out of around 20 tests, this fails just about
once each run) calling resolveAnnotation on the AST node of the Jpf.Controller
annotation returns null. The project and initial generated class is always the
same, and no errors are thrown from the JDT. I put in some logging, and it is
definitely finding the Jpf.Controller annotation node, it just can’t get the
resolved annotation from it (calling annotation.resolveAnnotation() returns
null). It fails on different tests too, so I don’t think it’s a problem with a
particular test.

I thought maybe the actual type of the annotation (i.e.
org.apache.beehive.netui.pageflow.annotations.Jpf) might not be available in the
typesystem yet, causing the resolution to fail, so I added some code to the
tests to wait for that IType to be available before doing anything else. That
seems to help, it’s failing less often, but it’s still failing occasionally.

The projects created from the tests include configuration files for the
classpath, and jdt options, including setting the compiler compliance level to
jdk5.0. The annotation type lives in a jar on the project's classpath.

Because this is an intermittent problem I don't have a solid repro case to
attach. It seems to only happen on tests that create the class file and then
immediately try to retrieve the information; other tests that create the class
file and then do other things before retrieving the UI model don't seem to have
this problem, so it might be a timing issue, where something is not resolved yet...?
Fixed in CVS.


Intermittent failure retrieving IResolvedAnnotations

