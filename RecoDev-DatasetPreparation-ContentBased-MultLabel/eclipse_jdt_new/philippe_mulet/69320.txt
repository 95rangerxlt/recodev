This is a spinoff of bug 69251. The following code compiles by eclipse (cheetah
from CVS as of few minutes ago) but not by javac (SUN 1.5.0 beta3 b57). I do not
know who's right and who's wrong here, but I think it is important to at least
keep track of all discrepancies between eclipse compiler and javac.

======================================
package test.cheetah;
public class X {
    class MX<E> {
    }
    void foo() {
      MX<Class<? extends Object>> mx2 = new MX<Class>();
    }
}
======================================

This is a spinoff of bug 69251. The following code compiles by eclipse (cheetah
from CVS as of few minutes ago) but not by javac (SUN 1.5.0 beta3 b57). I do not
know who's right and who's wrong here, but I think it is important to at least
keep track of all discrepancies between eclipse compiler and javac.

======================================
package test.cheetah;
public class X {
    class MX<E> {
    }
    void foo() {
      MX<Class<? extends Object>> mx2 = new MX<Class>();
    }
}
======================================
Ffeels like it should be allowed, as a raw type is always 
compatible with a parameterized type. 

So Map<String,Class> should be assignable to Map<String,Class<? extends 
Object>>.

The following testcase demonstrates this behavior:
public class X {
  class MX<E> {
    E get() { return null; }
      void foo(E e) {}
  }
  void foo() {
    MX<Class<? extends Object>> mx1 = new MX<Class<? extends Object>>();
    MX<Class> mx2 = new MX<Class>();
    mx1.foo(mx2.get()); // unsafe but legite
  }

Actually, compatibility rules for parameterized types are stricter. Arguments 
must be identical, only wildcard tolerance is allowed.
Added regression tests: GenericTypeTest#test246-247
Fixed


[1.5] generic parameter type compiles by eclipse, not by javac



Fix for Bug 469320 Cannot find references in workspace to javax.xml.validation.Validator.validate 

Fix for Bug 469320 Cannot find references in workspace to javax.xml.validation.Validator.validate 

69320 