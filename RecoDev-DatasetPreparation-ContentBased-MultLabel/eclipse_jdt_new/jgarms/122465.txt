followed directions found here:
http://www.eclipse.org/jdt/apt/introToAPT.html

As a lark I added a TypeGeneratingAnnotation to my Foo class and expected a new type to be generated on a full build. Didn't happen.

Debugged about and came upon this... 

AbstractImageBuilder will only call processAnnotations if it's field, 'filesDeclaringAnnotation', is non null and non empty.

that set is added to in 

public void acceptResult(CompilationResult result)

if and only if the result's 'declaresAnnotations' field is true.

that value is set in CompilationUnitDeclaration.cleanUp(TypeDeclaration type)

The code in that method reads:

if (type.binding != null && type.binding.isAnnotationType())
   compilationResult.declaresAnnotations = true;

which is wrong I think. We are interested if the type.binding HAS annotations, not if it IS AN annotation.

I changed the code to read thus:

if (type.binding != null && type.binding.getAnnotations() != null 
       && type.binding.getAnnotations().length>0)
   compilationResult.declaresAnnotations = true;

and a full build did result in the java file: GeneratedFileTest appearing as expected.

Now I'm not exactly sure if this is the right fix for this problem. The name "declaresAnnotations" doesn't really read to me as "hasAnnotations" but the change did fix the problem.

Will attach a patch.

Geoff

followed directions found here:
http://www.eclipse.org/jdt/apt/introToAPT.html

As a lark I added a TypeGeneratingAnnotation to my Foo class and expected a new type to be generated on a full build. Didn't happen.

Debugged about and came upon this... 

AbstractImageBuilder will only call processAnnotations if it's field, 'filesDeclaringAnnotation', is non null and non empty.

that set is added to in 

public void acceptResult(CompilationResult result)

if and only if the result's 'declaresAnnotations' field is true.

that value is set in CompilationUnitDeclaration.cleanUp(TypeDeclaration type)

The code in that method reads:

if (type.binding != null && type.binding.isAnnotationType())
   compilationResult.declaresAnnotations = true;

which is wrong I think. We are interested if the type.binding HAS annotations, not if it IS AN annotation.

I changed the code to read thus:

if (type.binding != null && type.binding.getAnnotations() != null 
       && type.binding.getAnnotations().length>0)
   compilationResult.declaresAnnotations = true;

and a full build did result in the java file: GeneratedFileTest appearing as expected.

Now I'm not exactly sure if this is the right fix for this problem. The name "declaresAnnotations" doesn't really read to me as "hasAnnotations" but the change did fix the problem.

Will attach a patch.

Geoff
Created attachment 32392
tiny patch as described.
Geoff,
The instructions will only work for eclipse 3.1.1 with apt from HEAD and jdt.core from APT branch. (see http://www.eclipse.org/jdt/apt/howtobuildme.txt)

Thanks for trying out apt in 3.2. We are in the process of migrating apt into 3.2 and are aware that apt is broken in various way in the APT_32 branch. (We are currently actively resolving the CompilationParticipant.processAnnotation() API problem you mentioned. )

Will keep you posted on any updates


(In reply to comment #2)
> Geoff,
> The instructions will only work for eclipse 3.1.1 with apt from HEAD and
> jdt.core from APT branch. (see http://www.eclipse.org/jdt/apt/howtobuildme.txt)
> Thanks for trying out apt in 3.2. We are in the process of migrating apt into
> 3.2 and are aware that apt is broken in various way in the APT_32 branch. (We
> are currently actively resolving the CompilationParticipant.processAnnotation()
> API problem you mentioned. )
> Will keep you posted on any updates

Hmm, I don't know how to react to a polite "go away - we're busy" note :-)

apt is under the radar now but expect a lot more reports than my little patch when apt gets really popular!

I will continue watching the development and unless a more stringent "go away" message is coming I may contribute now and then.

Cheers,

Geoff
Ah, sorry about taking so long to resolve this one. I missed it in my last pass over the bug list.

As of 3.2M5, annotation processors should definitely be invoked by apt.


Demo TypeGeneratingAnnotationProcessor never invoked in APT_32 branch

