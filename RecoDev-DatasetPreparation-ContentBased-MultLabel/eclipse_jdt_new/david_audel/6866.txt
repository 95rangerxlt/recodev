If the source of the jre is assigned, the code-assist is very slow .
Especially at larger classes like JTable. So slow, i delete the src entry in 
jre-settings to get rid off the very nice javadoc tooltips.
If it's not possible to make it faster, it would be usefull to have the option 
to turn off the javadoc tooltip, and leave the source in jre-setting for 
debugging.
I'm using a p2-233 with 256MB.
Version 20011206.

If the source of the jre is assigned, the code-assist is very slow .
Especially at larger classes like JTable. So slow, i delete the src entry in 
jre-settings to get rid off the very nice javadoc tooltips.
If it's not possible to make it faster, it would be usefull to have the option 
to turn off the javadoc tooltip, and leave the source in jre-setting for 
debugging.
I'm using a p2-233 with 256MB.
Version 20011206.
problem confirmed. In the JTable scenario below it takes 1s without source 
attachment and 6s+ with source attachment. The JavaDoc extraction kicks in 
after the proposals are computed and after the pop-up shows up. I don't think 
it is the culprit.

Before perf tracing in the UI Philippe can you pls confirm that the proposal 
computation for a binary class with source attachment is as fast as proposal 
computation without source attachment.
If we have source attached, then it might take longer to extract parameter 
names (need to parse attached sources to find them).
The attached trace shows that 80% of the time are spent in the code completion 
engine. Moving to core

The scenario is 
main() {
   JTable table;
   table.<code assist>
Created attachment 175
optimize it trace
The claim is that no matter how many times we try, it remains slow. If the file 
is big (as it is), it should cost to populate the JavaModel once exactly, from 
there on it should be fast.

Seems the parameter name computation is causing grief.

Please investigate.
Might also want to look at 7034 which has the same symptoms.
receiver type file is read in jar file for each method of this type.

fixed.
*** Bug 11272 has been marked as a duplicate of this bug. ***


Code-Assist (ctrl+space) to slow with jre-src



HEAD - Add regression test for 168665 

3.2 maintenance - Fix for 168665 

HEAD  - Fix for 168665 

3.2 maintenance - Regression test for 166866 

HEAD - Regression test for 166866 

Bug 176866 Strange border in Java > Debug preference page 