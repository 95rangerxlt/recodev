20020228
W2k
When I try to rename variable "collection" (second line), I 
see "TAggregateCollection" in refactor wizard. No matter, if I select 
word "collection" or simple place cursor on it.

	TReceiverDef GetAggregateOrJSPReceiver(String name, String 
telegramName) throws Exception {
		TAggregateCollection collection = 
m_Config.getAggregateCollection();
		for (int i = 0; i < collection.GetAggregateCount(); i++) {
			TAggregateDef aggregate = collection.GetAggregate( i );
			if ( aggregate.GetName().equals( name ) ) {
				String receiverName = 
m_Config.getMainTelegramGroup().GetTelegramOrFail( telegramName ).getReceiver();
				return aggregate.getReceiverCollection
().GetReceiverOrFail( receiverName );
			}
		}
		throw new Exception( "Error: " + name );
	}

20020228
W2k
When I try to rename variable "collection" (second line), I 
see "TAggregateCollection" in refactor wizard. No matter, if I select 
word "collection" or simple place cursor on it.

	TReceiverDef GetAggregateOrJSPReceiver(String name, String 
telegramName) throws Exception {
		TAggregateCollection collection = 
m_Config.getAggregateCollection();
		for (int i = 0; i < collection.GetAggregateCount(); i++) {
			TAggregateDef aggregate = collection.GetAggregate( i );
			if ( aggregate.GetName().equals( name ) ) {
				String receiverName = 
m_Config.getMainTelegramGroup().GetTelegramOrFail( telegramName ).getReceiver();
				return aggregate.getReceiverCollection
().GetReceiverOrFail( receiverName );
			}
		}
		throw new Exception( "Error: " + name );
	}
sorry, i wasn't successful in reproducing it (i tried 20020228 and 20020328)
(i even created all classe-stubs required to compile this test case)

do you see this bug in smaller (things that use only standard jdk classes) test 
cases as well?
do you see it on the latest stable build 20020321? 
closing for now - please reopen if needed
20020328
Try to rename variable "batch". I use main menu, "Refactor", "Rename...". But 
in dialog edit I see "TArchiverBatch2" instead of "batch".
This code uses only jdk classes (I hope ;-)).

package ru.nlmk.util.archiver;

import java.util.HashMap;
import java.util.Map;

public class BugTest {
	Map m_QueryToBatchMap = new HashMap();
	private void test() {
		Object vvv = "1234";
		Long qqq = (Long)vvv;
	}
	private TArchiverBatch2 getBatch(String query) {
		TArchiverBatch2 batch = (TArchiverBatch2) m_QueryToBatchMap.get
(query);
		if (batch == null) {
			batch = new TArchiverBatch2(query);
			m_QueryToBatchMap.put(query, batch);
		}
		return batch;
	} // run
	public static void main(String[] args) {
	}
}

class TArchiverBatch2 {
	public TArchiverBatch2(String query) {
	}
}

ok we new know what it is - please see 12590
thanks
fixed


Refactor rename indentifier detection

