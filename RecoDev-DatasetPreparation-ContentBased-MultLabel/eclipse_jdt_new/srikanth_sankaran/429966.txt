From bug 429948 comment 5:

Digging deeper the following root cause looks suspicious to me, see this block in LE.resolveType():

if (this.expectedType != null && this.original == this) {  // final resolution.
	this.ordinal = blockScope.referenceCompilationUnit().record(this);
}

This check misses the fact, that we might be within a copy-resolve process of an enclosing lambda, i.e., our entire universe is only fake, still the current lambda is final resolved, sure, but still this final resolve in a fake universe shouldn't count and shouldn't be recorded in the CUD.

In fact in test429948() the CUD contains 4 elements in CUD#functionalExpressions, although the source has only two lambdas.

From bug 429948 comment 5:

Digging deeper the following root cause looks suspicious to me, see this block in LE.resolveType():

if (this.expectedType != null && this.original == this) {  // final resolution.
	this.ordinal = blockScope.referenceCompilationUnit().record(this);
}

This check misses the fact, that we might be within a copy-resolve process of an enclosing lambda, i.e., our entire universe is only fake, still the current lambda is final resolved, sure, but still this final resolve in a fake universe shouldn't count and shouldn't be recorded in the CUD.

In fact in test429948() the CUD contains 4 elements in CUD#functionalExpressions, although the source has only two lambdas.
Thanks for catching this Stephan.

I don't know what the side effects could be of adding copies - I wrote
some hierarchy tests to see if we will see duplicates - we don't - good.
There will be duplicate index entries created for such lambdas.

Since the fix should be very safe with no performance implications, I'll
pull this up to GA. Patch will follow shortly.
Fix and test here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=399be45f49aecd84827a437a645f51d2664e149c

Stephan, please review.
+1 Patch looks great.


[1.8] CUD#functionalExpressions may record lambda copies in nested lambda situations



Fixed Bug 429966 - [1.8] CUD#functionalExpressions may record lambda copies in nested lambda situations 