BETA_JAVA8:

For the ER described by the bug 406319, we need to reliably identify those 
lambda methods that cannot be static. Presently the "method can be static"
diagnostics and analysis still has some issues and can stand for further
clean up: See that in the following program we don't suggest that foo could
be static when in fact it could be:

// ---- 
public class X  {
	int f;
	void foo() {
		class Y {
			int p;
			{
				class Z {
					int f = p;
				}
			}
		};
	}
}

BETA_JAVA8:

For the ER described by the bug 406319, we need to reliably identify those 
lambda methods that cannot be static. Presently the "method can be static"
diagnostics and analysis still has some issues and can stand for further
clean up: See that in the following program we don't suggest that foo could
be static when in fact it could be:

// ---- 
public class X  {
	int f;
	void foo() {
		class Y {
			int p;
			{
				class Z {
					int f = p;
				}
			}
		};
	}
}
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=ea2c66d41813ffe0a73e9227d41cf335eedf7fb6

This also fixes a bunch of problems with the existing "method can be declared
static" analysis.


[1.8][compiler][codegen] Improve identification of lambdas that must capture enclosing instance



Fixed Bug 406392 - [1.8][compiler][codegen] Improve identification of lambdas that must capture enclosing instance 