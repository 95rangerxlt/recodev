BETA_JAVA8

The following invalid reference expressions are currently accepted
interface I {
	
}
public class Action<T> {
	class Inner {
		
	}
	
	
	public void f1(Object[] o[][]) {}
    public void foo() {
    	I len = Action()::bar;
    	I len2 = foo()::bar;
    	I len3 = Action.class::bar; 
    	I len5 = foo(Action<i)::bar;
    	I len6 = foo()[]::bar;
}
}

Basically, any kind of expression is accepted on LHS. The first two expressions can be eliminated during semantic analysis depending on what they return, but the third one should be rejected by the parser I think. Or is it actually valid?

BETA_JAVA8

The following invalid reference expressions are currently accepted
interface I {
	
}
public class Action<T> {
	class Inner {
		
	}
	
	
	public void f1(Object[] o[][]) {}
    public void foo() {
    	I len = Action()::bar;
    	I len2 = foo()::bar;
    	I len3 = Action.class::bar; 
    	I len5 = foo(Action<i)::bar;
    	I len6 = foo()[]::bar;
}
}

Basically, any kind of expression is accepted on LHS. The first two expressions can be eliminated during semantic analysis depending on what they return, but the third one should be rejected by the parser I think. Or is it actually valid?
These problems show up because there is no semantic analysis and symbol/type 
resolution code in place today. The new AST nodes LambdaExpression and ReferenceExpression are for the time being (deliberately) subclassed from NullLiteral and so inherit the resolve* behavior from NullLiteral.

All code examples in comment#0 are *syntactically* legal: akin to how both
"Elephants  love to eat sugarcane" and "Elephants love to eat chairs" are
*grammatically* correct, with "sugarcane" and "chairs" both belonging to 
the sane syntactic category viz the non terminal "noun". Likewise, everything
to the left of :: is a  Primary expression and hence can be derived from 
the rule:

ReferenceExpression ::= Primary '::' NonWildTypeArgumentsopt Identifier

so there is no issue with the grammar/parser per se.

I'll add this as a blocker for bug 382701 so we can verify that these
are appropriately rejected when semantic analysis and resolution are
fully in place. Changed title accordingly.
Ah ok, i didn't see that 'type' '.' 'class' derives from 'Primary'
I am working on this now.
First batch of changes released here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=1eeba055c4a858ddea83f6c85864678280808173
Second installment constituting near complete implementation released here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=6574ecf5c4b5647220e5c6028073411e3f107ad7

I'll add tests and close a few loose ends before resolving.
Complete implementation released here:http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=4316c760d5aabce67e5ab83fef96d7ef0cdbee57.

I'll add tests and polish a few things and then resolve.
Tests and bug fixes released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=dff8c6a289a7b5116b7d5b64b00c639d5d108195


[1.8] Compiler should reject invalid method reference expressions



Tests and fixes for Bug 384750 - [1.8] Compiler should reject invalid method reference expressions 

Fixed Bug 384750 - [1.8] Compiler should reject invalid method reference expressions 

Fixed 384750: [1.8] Compiler should reject invalid method reference expressions 

First installment of changes for Bug 384750 - [1.8] Compiler should reject invalid method reference expressions 