BETA_JAVA8.

The following program uses lambda expressions, method references and
constructor references in syntactically allowed, but semantically
illegal locations. All these uses should be rejected and at the 
moment they are not.

From proposed amends to JLS 15.27:

"It is a compile-time error if a lambda expression occurs in a program in 
someplace other than an assignment context (5.2), an invocation context 
(5.3), or a casting context (5.5)."

// ------------------- 8< -------------------
public class X {
  public static void main(String[] args) {
    System.out.println("Lambda in illegal context: " + () -> "Illegal Lambda");
    System.out.println("Method Reference in illegal context: " + System::exit);
    System.out.println("Constructor Reference in illegal context: " + X::new);
  }
}

BETA_JAVA8.

The following program uses lambda expressions, method references and
constructor references in syntactically allowed, but semantically
illegal locations. All these uses should be rejected and at the 
moment they are not.

From proposed amends to JLS 15.27:

"It is a compile-time error if a lambda expression occurs in a program in 
someplace other than an assignment context (5.2), an invocation context 
(5.3), or a casting context (5.5)."

// ------------------- 8< -------------------
public class X {
  public static void main(String[] args) {
    System.out.println("Lambda in illegal context: " + () -> "Illegal Lambda");
    System.out.println("Method Reference in illegal context: " + System::exit);
    System.out.println("Constructor Reference in illegal context: " + X::new);
  }
}
In bug 380194 comment 77 ff. we were discussing how to report this error
  I i = X::foo::bar;
        ^^^^^^

From the context rule we should perhaps say s.t. like
  "Method reference is not allowed here, legal contexts are assignment, ..."
I hold that this is not very clear for users.

Not sure if I'm suggesting a special message for illegally nested method references, maybe?
Created attachment 225889
A few test cases for this, both negative and positive

These tests will also require the patch, and my earlier patches for bug 382701 and others.
Created attachment 225890
Patch which adds the context check

... and also unifies the LambdaExpression and ReferenceExpression under a common base class FunctionalLiteral.
In Gerrit:

https://git.eclipse.org/r/#/c/9915/
In Gerrit - also:

https://git.eclipse.org/r/#/c/9916/
https://git.eclipse.org/r/#/c/9917/

Next time, I'll make sure to amend the commits for easier review. Sorry (Git n00b)
(In reply to comment #2)
> Created attachment 225889 [details]
> A few test cases for this, both negative and positive

Commented out a couple that are still failing due to lack of context
propagation support in casts and conditionals (see bug 399778) - Thanks
Jesper.

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=852fc464e158b12302acdd8c591e32fe926a3a37


[1.8][compiler] Lambda expressions should be rejected in disallowed contexts.



Tests for Bug 382702 - [1.8][compiler] Lambda expressions should be rejected in disallowed contexts. 