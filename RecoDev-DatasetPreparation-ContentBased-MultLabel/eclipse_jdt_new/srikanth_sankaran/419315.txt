In my current understanding of JSR 335 spec 0.6.3, type inference needs the following bits of information, which should probably be computed and stored during overload resolution:

- strict / loose / variable-arity invocation

- "pertinent to applicability"

Both are
  produced by: 15.12.2.2-4
  consumed by: 18.5.1 (and .2)

In my current understanding of JSR 335 spec 0.6.3, type inference needs the following bits of information, which should probably be computed and stored during overload resolution:

- strict / loose / variable-arity invocation

- "pertinent to applicability"

Both are
  produced by: 15.12.2.2-4
  consumed by: 18.5.1 (and .2)
I expect work on this nearly full time from now and during the next 2-3 weeks.
I'll share my observations/implementation so we can make sure the needs of
Part G implementation can be met satisfactorily.
I'm right now looking at 18.5.2 which needs
- "pertinent to applicability"

Additionally, the following are of interest:

- is T a *functional interface*?
  Basically answered by ReferenceBinding.isFunctionalInterface(Scope)
  I'll try if it serves my purpose.

- does T have a *function type*?

- what is the
  "potentially-applicable method for the method reference when targeting T"

- is a reference expression "exact"?
I have resumed the work on overload resolution support (https://bugs.eclipse.org/bugs/show_bug.cgi?id=400871) from where I left off
a while ago. Initially I was undecided on whether I will need/create brand new
abstractions (e.g InvocationResolver) - After some scrutiny of the existing
infrastructure, it now appears there will not be any overarching changings
as far as abstractions go.

I expect to be able to point you in the right directions for these questions
with in a week. The present answers are:

(In reply to Stephan Herrmann from comment #2)
> I'm right now looking at 18.5.2 which needs
> - "pertinent to applicability"

I expect that I can make this available via one or more of
Expression.isPertinent*(TypeBinding parameterType) and perhaps more 
usefully via TypeBinding.isPertinent*(TypeBinding parameterType)
(with suitable overrides in each of poly expression/polytypebinding subtypes)

> Additionally, the following are of interest:
> 
> - is T a *functional interface*?
>   Basically answered by ReferenceBinding.isFunctionalInterface(Scope)
>   I'll try if it serves my purpose.

I expect that you will have scope around anyways, so there is no reason
this should not work.

> - does T have a *function type*?

All the elements to answer this question are there, perhaps scattered
across FunctionalExpression.resolveType(BlockScope) and its overrides,
but it may be just a question of suitable packaging.

> - what is the
>   "potentially-applicable method for the method reference when targeting T"

Need to look into this one.

> - is a reference expression "exact"?

This is not available as of today, but should be very easy to roll.
(In reply to Srikanth Sankaran from comment #3)

> (In reply to Stephan Herrmann from comment #2)
> > I'm right now looking at 18.5.2 which needs
> > - "pertinent to applicability"
> 
> I expect that I can make this available via one or more of
> Expression.isPertinent*(TypeBinding parameterType) and perhaps more 
> usefully via TypeBinding.isPertinent*(TypeBinding parameterType)
> (with suitable overrides in each of poly expression/polytypebinding subtypes)

It is also possible we may be able to accomplish this without a new API.
The existing PolyTypeBinding.isComptibleWith may simply answer true if
it is not pertinent to applicability. This requires some thinking through though.

I realize that Expression.isCompatibleWith is not really an API - it is
internally used by PolyTypeBinding.isCompatibleWith to get the question
actually answered.
I'll provide a summary of the APIs later this week, but I can answer some
questions already:

(In reply to Stephan Herrmann from comment #0)
> In my current understanding of JSR 335 spec 0.6.3, type inference needs the
> following bits of information, which should probably be computed and stored
> during overload resolution:
> 
> - strict / loose / variable-arity invocation

In JDT/Core implementation, we don't follow the 3 phase model in the text
book style. All three phases proceed parallelly and a we attach a phase/level
value to each applicable method and then pick the one(s) with the least level
value as the candidate(s) to either declare done with or input to most specific
method analysis.

> 
> - "pertinent to applicability"

There exists: org.eclipse.jdt.internal.compiler.ast.Expression.isPertinentToApplicability()
but this should very likely be changed to include a type binding.

See: If m is a generic method and the method invocation does not provide 
explicit type arguments, an explicitly-typed lambda expression for which 
the corresponding target type (as derived from the signature of m) is a type 
parameter of m.

(is not pertinent)

(In reply to Stephan Herrmann from comment #2)

> - does T have a *function type*?

T.isFunctionalInterface(Scope)

To get the function type: T.getSingleAbstractMethod(Scope)

> 
> - what is the
>   "potentially-applicable method for the method reference when targeting T"

Need to read up surrounding context.

> - is a reference expression "exact"?

See org.eclipse.jdt.internal.compiler.ast.Expression.isExactMethodReference()
It is likely you will need it on TypeBinding more than the Expression. You
may not even have a handle to the argument expression ? If so, please feel
free to cook up one (TypeBinding, with override in PolyTypeBinding that
delegates to Expression.isExact*)
(In reply to Srikanth Sankaran from comment #5)

> > - strict / loose / variable-arity invocation
> 
> In JDT/Core implementation, we don't follow the 3 phase model in the text
> book style. All three phases proceed parallelly and a we attach a phase/level
> value to each applicable method and then pick the one(s) with the least level
> value as the candidate(s) to either declare done with or input to most
> specific
> method analysis.

See the block:
		int[] compatibilityLevels = new int[visibleSize];
		for (int i = 0; i < visibleSize; i++)
			compatibilityLevels[i] =                 parameterCompatibilityLevel(visible[i], argumentTypes);

in Scope.mostSpecific*

if you need this information inside inference, we will have to figure out
how to tunnel it in: perhaps by inventing a CandidateMethodBinding or
ApplicableMethodBinding abstraction. (Again missing prototypes in Java!)

But my feeling is that PolyTypeBinding.isCompatibleWith and PolyTypeBinding.sIsMoreSpecific should obviate the need for
some/most of these APIs.
Thanks, I've adopted these API:

Expression
- isPertinentToApplicability()
- isExactMethodReference()

TypeBinding:
- isFunctionalInterface(Scope)
- getSingleAbstractMethod(Scope)

As for integrating inference into Scope methods: I'm not quite there yet.
During my experiments I only ever trigger inference from 
  ParameterizedGenericMethodBinding.computeCompatibleMethod()
to replace the old inferFromArgumentTypes() etc.

Regarding the distinction strict/loose I can imagine that we can *perhaps* do both checks in one step, but to distinguish these from variable arity matches, I'm pretty sure we have to invoke inference twice, because we'll be solving different sets of constraints. I.e., we first have to make up our minds which question we are asking, only then can inference give an answer.
(In reply to Stephan Herrmann from comment #7)
> Thanks, I've adopted these API:
> 
> Expression
> - isPertinentToApplicability()

Per earlier comment, this one probably needs a type binding argument.

> Regarding the distinction strict/loose I can imagine that we can *perhaps*
> do both checks in one step, but to distinguish these from variable arity
> matches, I'm pretty sure we have to invoke inference twice, because we'll be
> solving different sets of constraints. I.e., we first have to make up our
> minds which question we are asking, only then can inference give an answer.

OK, the Java 7 - JDT way of doing it appears to be to compute the substitute
method and then ask in what phase it would have been found to be applicable.
There could be changes that would invalidate this scheme of things. 

My trials after https://bugs.eclipse.org/bugs/show_bug.cgi?id=401783#c4
and https://bugs.eclipse.org/bugs/show_bug.cgi?id=401783#c5 came to a nought,
- happily quickly. So I'll let you battle this one out, unless I come up with
some more non-so pie in the sky ideas.
In private conversation I heard from Stephan of the need for:

(1) 

ReferenceExpression#resolveTypeExpecting

I extrapolate that we also need

LambdaExpression#resolveTypeExpecting

(2) While working on the latter I should also reinstate the code that
tracks whether a lambda has ignored mandatory errors. I deleted it in
haste since latest draft part F does not require it.
Working on NegativeLambdaExpressionsTest.test401610d() and how the new inference would handle this I made some experiments with LE.isPertinentToApplicability (see also bug 422489 comment 4).

This is what I came up with:
  public boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method) {
	if (targetType == null) // should signal another primary error
		return true;
		
	if (argumentsTypeElided())
		return false;
		
	if (targetType instanceof TypeVariableBinding
	   && ((TypeVariableBinding)targetType).declaringElement == method)
		return false;
		
	Expression [] returnExpressions = this.resultExpressions;
	for (int i = 0, length = returnExpressions.length; i < length; i++) {
		if (!returnExpressions[i].isPertinentToApplicability(targetType, method))
			return false;
	}
	
	return true;
  }

QUESTION: Since I need a new argument (MethodBinding), how should the internal calls from LE.isCompatibleWith(TB,Scope) be augmented?

For addition of this parameter please see 15.12.2.2 (intro and 3rd bullet).
(In reply to Stephan Herrmann from comment #10)

Mid air non-collisions since we are adding comments on different bugs:
See https://bugs.eclipse.org/bugs/show_bug.cgi?id=422489#c6

> 	if (targetType == null) // should signal another primary error
> 		return true;

This change is worth adding since we are talking of making this into a general
purpose API with no assumptions about incoming arguments.

> 	if (targetType instanceof TypeVariableBinding
> 	   && ((TypeVariableBinding)targetType).declaringElement == method)
> 		return false;


> QUESTION: Since I need a new argument (MethodBinding), how should the
> internal calls from LE.isCompatibleWith(TB,Scope) be augmented?

I think the code chunk from the other bug side steps this question.
(In reply to Srikanth Sankaran from comment #11)
> (In reply to Stephan Herrmann from comment #10)
> 
> Mid air non-collisions since we are adding comments on different bugs:

My bad, sorry.

> > 	if (targetType instanceof TypeVariableBinding
> > 	   && ((TypeVariableBinding)targetType).declaringElement == method)
> > 		return false;
> 
> 
> > QUESTION: Since I need a new argument (MethodBinding), how should the
> > internal calls from LE.isCompatibleWith(TB,Scope) be augmented?
> 
> I think the code chunk from the other bug side steps this question.

Thanks, I'll try that in a minute.

In my branch I've also added the following API to LE:
- resultExpressions()
- isVoidCompatible()
- isValueCompatible()

For the latter 2 I'm not sure how to ensure that shape analysis has happened when needed. Currently, I try to force this by calling
 lambda.isCompatibleWith(t, scope)
(ignoring the result). I also throw IAE if void/value compatibility is asked before shape analysis.
Srikanth, does this look OK, or can you recommend s.t. better?

FYI, these changes (incl. comment 10) can be inspected in http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=sherrmann/NewTypeInference&id=a6234b6d34f70b04dc8086b5971307bab5f2f8ed
(In reply to Stephan Herrmann from comment #12)

> > I think the code chunk from the other bug side steps this question.
> 
> Thanks, I'll try that in a minute.

There is a problem with that snippet, the method binding check is incorrect and
silly. 

A fix would be to enhance InvocationSite with a new method

  tagAsCandidateMethod(MethodBinding) 

and call this to set the context before invoking isPertinentTo*

Otherwise you can change the method directly to receive two parameters.

I prefer the InvocationSite approach.


> In my branch I've also added the following API to LE:
> - resultExpressions()
> - isVoidCompatible()
> - isValueCompatible()
> 
> For the latter 2 I'm not sure how to ensure that shape analysis has happened
> when needed. Currently, I try to force this by calling
>  lambda.isCompatibleWith(t, scope)
> (ignoring the result). I also throw IAE if void/value compatibility is asked
> before shape analysis.
> Srikanth, does this look OK, or can you recommend s.t. better?

For the time being, please proceed with this approach, I can pull up the
shape analysis to happen much earlier (just before returning PolyTypeBinding
in the first resolve.) After I finish with code assist issues, I'll work on
this.
To close this inter-bug loop, sorry again for jumping back and forth:

(In reply to Srikanth Sankaran from comment #13)
> (In reply to Stephan Herrmann from comment #12)
> 
> > > I think the code chunk from the other bug side steps this question.
> > 
> > Thanks, I'll try that in a minute.
> 
> There is a problem with that snippet, the method binding check is incorrect
> and
> silly. 
> 
> A fix would be to enhance InvocationSite with a new method
> 
>   tagAsCandidateMethod(MethodBinding) 
> 
> and call this to set the context before invoking isPertinentTo*
> 
> Otherwise you can change the method directly to receive two parameters.
> 
> I prefer the InvocationSite approach.

As per bug 422489 comment 8 I have a solution which looks good to me.
Sect. 18.2.5 request that I feed "the checked exceptions that the lambda body can throw" into the inference.

Do you have a suggestion how I could get this information in the middle of inference? I wouldn't consider this top priority ATM, but ...

(Well, this is not really a request to overload-resolution, but maybe you have a hint nevertheless...)
(In reply to Stephan Herrmann from comment #15)
> Sect. 18.2.5 request that I feed "the checked exceptions that the lambda
> body can throw" into the inference.
> 
> Do you have a suggestion how I could get this information in the middle of
> inference? I wouldn't consider this top priority ATM, but ...

Commit 10a59ab8fb6256e59e155c071a356402964eb736 pruned some (incomplete) 
support that existed for this - you can restore it and pound it into shape - 
In terms of form a new API would look like the existing one you have for
gathering result expressions.

This would also work only when isCompatibleWith has been called with a
target type that passes basic checks on the top of this method.  

I intend to pull up shape analysis outside of isCompatibleWith and hoist it to
the initial resolveType call - In INVOCATION_CONTEXT's we don't have a target
type yet and for implicit lambda we don't have parameter types yet, but these
can be worked around.
Thanks, so exception analysis is on the todo stack but not my top priority.

Here's another question: in some situations inference wants to see the resolved types of explicit lambda arguments, but at that point in time the lambda has only its PolyTypeBinding set and nothing more.

I'm currently doing an explicit
   arguments[i].type.resolveType(lambda.enclosingScope)
but wouldn't it be safe and easy to resolve explicit arguments before the early exit with PolyTypeBinding?

OTOH, resolving those type references more than once shouldn't hurt, right? So it's probably not a big deal either way.

When directly accessing arguments[i].type after checking argumentsTypeElided() do I still run risks to get null instead of a type reference?
(In reply to Stephan Herrmann from comment #17)
> Thanks, so exception analysis is on the todo stack but not my top priority.
> 
> Here's another question: in some situations inference wants to see the
> resolved types of explicit lambda arguments, but at that point in time the
> lambda has only its PolyTypeBinding set and nothing more.
> 
> I'm currently doing an explicit
>    arguments[i].type.resolveType(lambda.enclosingScope)
> but wouldn't it be safe and easy to resolve explicit arguments before the
> early exit with PolyTypeBinding?
> 
> OTOH, resolving those type references more than once shouldn't hurt, right?
> So it's probably not a big deal either way.

I plan to pull this up along with shape analysis before returning PolyTypeBinding.
Question: Why would you need the parameter types ? A lambda is supposed to match
its functional interfaces function type's parameters exactly i.e no erasures
or subtyping or boxing conversions are allowed. So for the time being, you can
call isCompatibleWith and if that answers in the positive, take it for granted
that either the parameter types are not there (elided case) or that they match.
(In reply to Srikanth Sankaran from comment #18)
> Question: Why would you need the parameter types ? 

That's simple to answer :)

18.2.1.1 contains this:
"If the lambda parameters have explicitly-declared types F1, ..., Fn and the targeted function type has parameter types G1, ..., Gn, then for all i, 1 ≤ i ≤ n, ⟨Fi = Gi⟩."

So, I need those F1..Fn. Note, that all these types may contain inference variables at this point ...

Background: we may just be in the middle of inferring type variables in the function type. So instead of asking *whether* it matches, we are asking: "what can we do to make it matching?".

For the time being, I'm fine with the call arguments[i].type.resolveType(lambda.enclosingScope)
so no hurry to change anything, but mid-term pulling up some stuff sounds very good to me.
(In reply to Stephan Herrmann from comment #19)

> 18.2.1.1 contains this:
> "If the lambda parameters have explicitly-declared types F1, ..., Fn and the
> targeted function type has parameter types G1, ..., Gn, then for all i, 1 ≤
> i ≤ n, ⟨Fi = Gi⟩."
> 
> So, I need those F1..Fn. Note, that all these types may contain inference
> variables at this point ...
> 
> Background: we may just be in the middle of inferring type variables in the
> function type. So instead of asking *whether* it matches, we are asking:
> "what can we do to make it matching?".

Should we be doing something to match ? Lambdas are not allowed to implement
generic methods:

See 
org.eclipse.jdt.core.compiler.IProblem.NoGenericLambda
org.eclipse.jdt.core.tests.compiler.regression.NegativeLambdaExpressionsTest.test040()

Let me know if I am still overlooking something.
(In reply to Srikanth Sankaran from comment #20)

> Should we be doing something to match ? Lambdas are not allowed to implement
> generic methods:

Or is this case of the function type not being generic, but using type variables
from the interface ?
Srikanth, feel free to close this one. The latest in bug 424167 has all the information it needs, I believe.
Resolving.


[1.8] Type inference needs some information from overload resolution

