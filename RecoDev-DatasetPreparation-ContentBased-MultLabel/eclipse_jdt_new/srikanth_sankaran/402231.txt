BETA_JAVA8: 

Now that bug 399793 is closed, we should start work on ASTRewrite support
for lambda expressions as a top priority.

BETA_JAVA8: 

Now that bug 399793 is closed, we should start work on ASTRewrite support
for lambda expressions as a top priority.
Manoj, please follow up as top priority, TIA.
Created attachment 228121
WIP - a few test cases
Created attachment 228622
Proposed Patch - WIP
Created attachment 228804
Proposed Patch

Note: Tested on b81
Here are the review comments:

1. Removing the PARENTHESES_PROPERTY (set it to null) causes an NPE at the following line:

boolean hasParentheses = getNewValue(node, LambdaExpression.PARENTHESES_PROPERTY).equals(Boolean.TRUE);

Need to investigate if it's a valid scenario. If so, the remove event needs to be handled too.

To add some more details, the following two lines should result in the same output but that's not happening.

			// rewrite.set(lambdaExpression, LambdaExpression.PARENTHESES_PROPERTY, Boolean.FALSE, null);
			rewrite.set(lambdaExpression, LambdaExpression.PARENTHESES_PROPERTY, null, null);

2. We invoke getNewValue() twice to get the new value for PARENTHESES_PROPERTY. The second call event.getNewValue() can be avoided by storing the value in a local variable.

3. List parameters = (List)getNewValue(node, LambdaExpression.PARAMETERS_PROPERTY);

As per our formatting conventions, add a space after the cast.

4. Please remove the trailing white space. With the command line diff, it's easier to see the whitespace that is introduced by the patch.
(In reply to comment #5)
> Here are the review comments:
> 
> 1. Removing the PARENTHESES_PROPERTY (set it to null) causes an NPE at the
> following line:
> 
> boolean hasParentheses = getNewValue(node,
> LambdaExpression.PARENTHESES_PROPERTY).equals(Boolean.TRUE);
> 
> Need to investigate if it's a valid scenario. If so, the remove event needs
> to be handled too.
> 
> To add some more details, the following two lines should result in the same
> output but that's not happening.
> 
> 			// rewrite.set(lambdaExpression, LambdaExpression.PARENTHESES_PROPERTY,
> Boolean.FALSE, null);
> 			rewrite.set(lambdaExpression, LambdaExpression.PARENTHESES_PROPERTY,
> null, null);

Markus: Any comments from the client's point of view for this case? Is the case of null to be handled for Boolean.class in this context?
Created attachment 229030
Proposed Patch

Reworked. passing null will not cause not cause NPE.
(In reply to comment #7)
> Created attachment 229030 [details]
> Proposed Patch
> 
> Reworked. passing null will not cause NPE.

Markus: Since similar Boolean.class properties, CONSRUCTOR_PROPERTY (MethodDeclaration) and INTERFACE_PROPERTY (TypeDeclaration) did not throw NPE, though there was no explicit code handling the null case, the patch was reworked not to throw a NPE. Please comment.
(In reply to comment #8)
Looking for prior art is a good way to make such decisions. Unfortunately, the cited examples just work "by accident" in the ASTRewriteAnalyzer, since we only access the old property and check whether the property has been changed.

But they already fail in ASTRewriteFlattener, e.g. with this code:

	TypeDeclaration td = ast.newTypeDeclaration();
	rewrite.set(td, TypeDeclaration.INTERFACE_PROPERTY, null, null);
	rewrite.getListRewrite(astRoot, CompilationUnit.TYPES_PROPERTY)
		.insertFirst(td, null);


The Javadoc of ASTRewrite#set(..) says:
	 * If the given property is a simple property, the value must be the new
	 * value (primitive types must be boxed) or <code>null</code>.

That excludes null as allowed value for boolean properties (since null is not a boxed value). The setter API ASTNode#setStructuralProperty(StructuralPropertyDescriptor, Object) also doesn't support null. If you set the "org.eclipse.jdt.core/debug/dom/rewrite" debug option (bug 404451), you also get an exception.

=> ".equals(Boolean.TRUE)" is a better solution. This also has prior art in SingleVariableDeclaration.VARARGS_PROPERTY.

Note that "newValue != Boolean.FALSE" is wrong, since a client could also set the new value to "new Boolean(false)" (not very smart, but legal).
In ASTRewriteAnalyzer#visit(LambdaExpression), the second assignment to hasParentheses could be written without the conditional:

	hasParentheses = !(parameters.size() == 1 && parameters.get(0) instanceof VariableDeclarationFragment);


Likewise in ASTRewriteFlattener#visit(LambdaExpression), where this would also be easier to read:

	if (!hasParentheses) {
		List parameters = getChildList(node, LambdaExpression.PARAMETERS_PROPERTY);
		hasParentheses = !(parameters.size() == 1 && parameters.get(0) instanceof VariableDeclarationFragment);
	}

The rest looks good.
(In reply to comment #10)

> The rest looks good.

Markus, Thanks for the quick turnaround Markus. 

Manoj, please study the review comments and if the open issues are
peripheral in nature, let us release the patch and address the concerns
in a follow up defects asap.

This fix would unblock the UI team on the lambda expressions side and let us
not hold it up on account of non-core issues such as whether we deal with
a broken client appropriately. It is good to always make sure that the UI
team has something to chew on.
Created attachment 229477
Proposed Patch

Thanks Markus for the review. 
Srikanth: Markus' suggestion has been incorporated in this patch itself.
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=8a2a28b44267beff0fdfbe7d6582425d224ea02d.

With this, DOM/AST, ASTRewrite and formatter support for lambda expressions
is complete and released and the UI team can start to schedule work in this
area, bug reports are welcome.

[Manoj, is there a reason why we build the program text via dozens of
buf.append calls instead a single one ? Notwithstanding the fact that
this is test code, should we perpetuate this coding practice ?]

Thanks Manoj.
(In reply to comment #13)
> Fix and tests released here:
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
> ?h=BETA_JAVA8&id=8a2a28b44267beff0fdfbe7d6582425d224ea02d.
> 
Thanks Srikanth.


> [Manoj, is there a reason why we build the program text via dozens of
> buf.append calls instead a single one ? Notwithstanding the fact that
> this is test code, should we perpetuate this coding practice ?]
> 
wondered the same; couldn't get any "reasonable" reason. Will cleanup periodically the tests and thus, hopefully making the tests a little faster.
(In reply to comment #14)

> > [Manoj, is there a reason why we build the program text via dozens of
> > buf.append calls instead a single one ? Notwithstanding the fact that
> > this is test code, should we perpetuate this coding practice ?]
> > 
> wondered the same; couldn't get any "reasonable" reason. Will cleanup
> periodically the tests and thus, hopefully making the tests a little faster.

I wouldn't worry about cleaning up the existing tests. As long as we don't
continue to perpetuate this practice, it should be good.
> reason why we build the program text via dozens of buf.append calls?

The historical reason is that Martin once wrote this infrastructure, and he added a quick assist to the jdt.ui.tests plug-in, which lets you select some source in the runtime workbench, do Ctrl+1 and choose "Wrap in buf.append() (to clipboard)".

That way, you never have to manually fiddle with formatting and line delimiters when you create multi-line source code in tests (always indents with spaces and always uses \n).


[1.8][ast rewrite] Rewrite support for lambda expressions.



Fixed Bug 402231 - [1.8][ast rewrite] Rewrite support for lambda expressions. 