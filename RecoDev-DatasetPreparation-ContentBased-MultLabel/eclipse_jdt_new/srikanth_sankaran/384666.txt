While reviewing bug 380194 I have some small suggestions that might help
during future debugging of this code:


(1) Scanner.toString()
How about including this.nextToken in the output, e.g.,:
  
	if (this.nextToken != TerminalTokens.TokenNameNotAToken) {
		buffer.append("<-- Ends here [regettable="+toStringAction(this.nextToken)+"]\n===============================\n"); //$NON-NLS-1$ //$NON-NLS-2$
	} else {
		buffer.append("<-- Ends here\n===============================\n"); //$NON-NLS-1$
	}


(2) LambdaExpression.printExpression():

In "this.body.print(tab, output);" 'tab' should perhaps be passed only
conditionally, like if body is a Block?


(3) LambdaExpressionSyntaxTest:

I'd personally prefer more explicit method names. Or, ensure that actually
all contained methods test lambda expressions (and move other tests like for
reference expressions to a separate file).
I was trying to debug parsing of lambda expressions and was surprised that
some tests didn't contain any, yet I found no pattern for selecting only
the relevant tests.

While reviewing bug 380194 I have some small suggestions that might help
during future debugging of this code:


(1) Scanner.toString()
How about including this.nextToken in the output, e.g.,:
  
	if (this.nextToken != TerminalTokens.TokenNameNotAToken) {
		buffer.append("<-- Ends here [regettable="+toStringAction(this.nextToken)+"]\n===============================\n"); //$NON-NLS-1$ //$NON-NLS-2$
	} else {
		buffer.append("<-- Ends here\n===============================\n"); //$NON-NLS-1$
	}


(2) LambdaExpression.printExpression():

In "this.body.print(tab, output);" 'tab' should perhaps be passed only
conditionally, like if body is a Block?


(3) LambdaExpressionSyntaxTest:

I'd personally prefer more explicit method names. Or, ensure that actually
all contained methods test lambda expressions (and move other tests like for
reference expressions to a separate file).
I was trying to debug parsing of lambda expressions and was surprised that
some tests didn't contain any, yet I found no pattern for selecting only
the relevant tests.
(In reply to comment #0)

> (1) Scanner.toString()
> How about including this.nextToken in the output, e.g.,:

Good one.

> (2) LambdaExpression.printExpression():
> 
> In "this.body.print(tab, output);" 'tab' should perhaps be passed only
> conditionally, like if body is a Block?

Good one. I did notice some funny formatting, but let it lie for the
moment, I'll fix it.

> (3) LambdaExpressionSyntaxTest:
> 
> I'd personally prefer more explicit method names. Or, ensure that actually
> all contained methods test lambda expressions (and move other tests like for
> reference expressions to a separate file).

Every test has a descriptive comment above it that spells out what scenario
is being tested. Reference expressions equate to an implicit lambda, so I
chose to put it all in the same pile - I can break it down into two.
Fix and tests released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3f60c9b8b6041548c5cf76290845b4be1c2aa43b

Reference expressions have now been moved to 
ReferenceExpressionSyntaxTest.java


[1.8][compiler] improve debuggability of the Parser wrt lambda expressions



Fixed bug 384666: [1.8][compiler] improve debugability of the Parser wrt lambda expressions 