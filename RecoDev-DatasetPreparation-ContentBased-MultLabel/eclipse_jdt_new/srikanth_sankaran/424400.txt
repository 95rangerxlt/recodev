At the moment, I am not sure if this is a bug in ECJ, but here's the test case:

public class X<T> implements MyComparable<T>{

    public static void main(String argv[]) {
    	int result = ((Comparable<Integer> & MyComparable) new X()).compareTo(1);
    }
    public int compareTo(T o) {
		return 0;
	}
}
interface MyComparable<T> extends Comparable<T> {}

We allow this code while Javac doesn't. I can't find anywhere in the spec about intersection of types in same hierarchy one with type argument and other without.

We reject code like this:

int result = ((Comparable<String> & MyComparable<Integer>) new X()).compareTo("");

At the moment, I am not sure if this is a bug in ECJ, but here's the test case:

public class X<T> implements MyComparable<T>{

    public static void main(String argv[]) {
    	int result = ((Comparable<Integer> & MyComparable) new X()).compareTo(1);
    }
    public int compareTo(T o) {
		return 0;
	}
}
interface MyComparable<T> extends Comparable<T> {}

We allow this code while Javac doesn't. I can't find anywhere in the spec about intersection of types in same hierarchy one with type argument and other without.

We reject code like this:

int result = ((Comparable<String> & MyComparable<Integer>) new X()).compareTo("");
Also, we seem to accept the following code while Javac doesn't:

public class X<T> implements MyComparable<T> {
    public static void main(String argv[]) {
    	int result = ((Comparable<Integer> & MyComparable) new X()).compareTo(1);
    }
	public int compareTo(T o) {
		return 0;
	}
}

interface MyComparable<T> {
     public int compareTo(T value);
}

And this is the error from Javac:

error: name clash: compareTo(T#1) in MyComparable and compareTo(T#2) in Comparable have the same erasure, yet neither overrides the other
(In reply to Jayaprakash Arthanareeswaran from comment #0)
> At the moment, I am not sure if this is a bug in ECJ, but here's the test
> case:

It is.

> We allow this code while Javac doesn't. I can't find anywhere in the spec
> about intersection of types in same hierarchy one with type argument and
> other without.

This is perhaps not specified in the part about intersection cast, but in general
it is illegal for any type to implement a generic super interface with different
parameterizations:

compare: 

// -- 
public class X<T> implements MyComparable, Comparable<Integer> { 

    public int compareTo(T o) {
		return 0;
	}
}
interface MyComparable<T> extends Comparable<T> {}
(In reply to Jayaprakash Arthanareeswaran from comment #1)
> Also, we seem to accept the following code while Javac doesn't:

I split this into another bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=424410
Thanks Jay, Fix and test released here; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=c62b2332be65f641e5e7827b79f4caf8cb16c6bb


[1.8] Interfaces in the same hierarchy are allowed in an intersection cast with different type argument

