BETA_JAVA8: 

The following program triggers an IncompatibleClassChangeError very likely
due to the fact that ECJ at this point does not generate a synthetic bridge
method to paper over signature differences.

// ---------------
interface I {
  void foo(int x, int y);
}
public class X {
  public static void main(String[] args) {
    BinaryOperator<String> binOp = (x,y) -> { return x+y; }; 
    System.out.println(binOp.apply("SUCC", "ESS")); // when lambdas run\n" +
  }
}
@FunctionalInterface
interface BiFunction<T, U, R> { 
    R apply(T t, U u);
}
@FunctionalInterface 
interface BinaryOperator<T> extends BiFunction<T,T,T> { 
}

BETA_JAVA8: 

The following program triggers an IncompatibleClassChangeError very likely
due to the fact that ECJ at this point does not generate a synthetic bridge
method to paper over signature differences.

// ---------------
interface I {
  void foo(int x, int y);
}
public class X {
  public static void main(String[] args) {
    BinaryOperator<String> binOp = (x,y) -> { return x+y; }; 
    System.out.println(binOp.apply("SUCC", "ESS")); // when lambdas run\n" +
  }
}
@FunctionalInterface
interface BiFunction<T, U, R> { 
    R apply(T t, U u);
}
@FunctionalInterface 
interface BinaryOperator<T> extends BiFunction<T,T,T> { 
}
Fix and test released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=2344c6f119f16ef1a15c1ba0cc48698ff4c5a21a

Turns out the bridging is another piece of magic automatically handled
by the meta factory. The problem was that the indy call was referencing
the defining class BiFunction, but the metafactory expects the instantiation
type BinaryOperator.


[1.8][compiler][codegen] IncompatibleClassChangeError when running code with lambda method.



Fixed Bug 406181 - [1.8][compiler][codegen] IncompatibleClassChangeError when running code with lambda method. 