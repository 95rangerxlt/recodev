package jsr335.funint6;
interface MyFunction<T, R> {
    R apply(T t);

    default <V> MyFunction<V, R> compose(MyFunction<? super V, ? extends T> before) {
        return (V v) -> apply(before.apply(v));
//        return (v) -> apply(before.apply(v)); // OK
    }

}


The lambda parameter v has MyFunction#compose(..) as parent element. If you use the "// OK" variant where v's type V is not explicitly declared, then the parent becomes a LambdaExpression as expected.

package jsr335.funint6;
interface MyFunction<T, R> {
    R apply(T t);

    default <V> MyFunction<V, R> compose(MyFunction<? super V, ? extends T> before) {
        return (V v) -> apply(before.apply(v));
//        return (v) -> apply(before.apply(v)); // OK
    }

}


The lambda parameter v has MyFunction#compose(..) as parent element. If you use the "// OK" variant where v's type V is not explicitly declared, then the parent becomes a LambdaExpression as expected.
Thanks Markus, Will follow up.
Actually, the use of v as argument to apply gets chained properly.

The declaration site name is not if it has explicit type.
For binary types, see also bug 430027 comment 2 (explicit type and declaration-vs-reference doesn't matter --> always enclosing method as parent).
Parse tree from SelectionParser looks incorrect:

interface MyFunction<T, R> {
  R apply(T t);
  default <V>MyFunction<V, R> compose(MyFunction<? super V, ? extends T> before) {
    <SelectionOnArgumentName:V v>;
  }
}
In AssistParser, we were recognizing that we are inside a lambda expression
a little later than we should - as a result explicit parameters were not
recovered as nodes belonging to lambda.

Fix and tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=4c94b3d7ef7a5503607858476a6477496a59c95b


[1.8] Lambda parameter has wrong parent if it declares its type



Fixed Bug 430026 - [1.8] Lambda parameter has wrong parent if it declares its type 