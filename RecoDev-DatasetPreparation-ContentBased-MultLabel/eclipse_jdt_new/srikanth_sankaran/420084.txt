This is already allowed for static method imports from classes and the same should be allowed from interfaces too. Consider these two units:

--------------------
package a.b;

public interface J {
	static int foo(){return 0;}
}

--------------------

package a;

import static a.b.J.foo;
public interface I {
	static int call() {
		return foo();
	}
} 
--------------------

Invocation of foo() is rejected with the following error but should not be:

     This static method of interface J can only be accessed as J.foo

This is already allowed for static method imports from classes and the same should be allowed from interfaces too. Consider these two units:

--------------------
package a.b;

public interface J {
	static int foo(){return 0;}
}

--------------------

package a;

import static a.b.J.foo;
public interface I {
	static int call() {
		return foo();
	}
} 
--------------------

Invocation of foo() is rejected with the following error but should not be:

     This static method of interface J can only be accessed as J.foo
I can take a look at this, unless Srikanth or others already have a fix.
I changed the title from "default interface method" to "static interface method", as I couldn't see a default method in comment 0 :)
Fix and tests available here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=a5ef8162429fa8120bc2dd5c589852474e7d47df


[1.8] static interface method cannot be resolved without receiver when imported statically



Fixed Bug 420084 - [1.8] static interface method cannot be resolved without receiver when imported statically 