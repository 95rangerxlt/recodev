Follow up of https://bugs.eclipse.org/bugs/show_bug.cgi?id=426534:

I see another problem with vararg accessibility: I'll shortly release a regression
test showing the problem.

Follow up of https://bugs.eclipse.org/bugs/show_bug.cgi?id=426534:

I see another problem with vararg accessibility: I'll shortly release a regression
test showing the problem.
GenericsRegressionTest.test426678() : Our behavior and javac behavior match
across 1.5 - 1.8: Good.

GenericsRegressionTest.test426678() : Our behavior is self-consistent across 
1.5 - 1.8 and javac behavior is self-consistent (sort of - 1.5, 1.6 produce
class files which fail at runtime while 1.7, 1.8 reject upfront)

Net difference is that inaccessibility of a substitution candidate affects
overload resolution in our code - Is this allowed ? I am inclined to think not.
(In reply to Srikanth Sankaran from comment #1)
> GenericsRegressionTest.test426678() : Our behavior and javac behavior match
> across 1.5 - 1.8: Good.

This should be GenericsRegressionTest.test426678a.
(In reply to Srikanth Sankaran from comment #1)

> Net difference is that inaccessibility of a substitution candidate affects
> overload resolution in our code - Is this allowed ? I am inclined to think
> not.

Thinking a bit more, I don't think "inaccessibility of a substitution candidate affects overload resolution in our code" and this is simply due to 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=421922, I'll investigate and
confirm if a duplicate.
Mea culpla. 

(In reply to Srikanth Sankaran from comment #1)

> Net difference is that inaccessibility of a substitution candidate affects
> overload resolution in our code - Is this allowed ? I am inclined to think
> not.

The check for vararg element type was in the wrong place. It had no business
to be inside computeCompatibleMethod.

Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=e2f59df4da4b0717730e8b0f95dd08cfbb696924
Could be a regression of this - when one of the overloaded varargs methods has an inaccessible type as a varargs parameter (and the other one is accessible), the compiler rejects the invocation, even though we could have picked a valid method.

Here'a a test case:

package p.q;
public class C implements I {
    public C() { }
    static public void foo(I ... args) { }
    static public void foo(Object ... args) { }
}
interface I {} // Note the package access here

package p;
import p.q.*;

public class X  {
    public void bar() {
        C.foo(new C()); // Compile error here.
    }
}
(In reply to Jayaprakash Arthanareeswaran from comment #5)
> Could be a regression of this - when one of the overloaded varargs methods
> has an inaccessible type as a varargs parameter (and the other one is
> accessible), the compiler rejects the invocation, even though we could have
> picked a valid method.

This is not a regression caused by this, this is the same bug as in 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=421922 - earlier it was
masked by our accidentally picking the right method by disqualifying the
inaccessible method.

I'll take a look. Thanks.


[1.8][compiler] Another issue with vararg type element accessibility



Fixed Bug 426678 - [1.8][compiler] Another issue with vararg type element accessibility 

Tests for Bug 426678 