Brought from bug 426515, comment #15

The following files should be in their own files:

I1.java
public interface I1 {
	public String bar2( String s, @Marker List l1, List<String> l2);
}

-------------
A.java

public class A implements I1 {

	@Override
	public String bar2(String s, @Marker List l1, List<String> l2) {
		return null;
	}
}

Doing a clean build, you can notice there's no error. But when you touch A.java in the editor, the reconciler reports an error.

Brought from bug 426515, comment #15

The following files should be in their own files:

I1.java
public interface I1 {
	public String bar2( String s, @Marker List l1, List<String> l2);
}

-------------
A.java

public class A implements I1 {

	@Override
	public String bar2(String s, @Marker List l1, List<String> l2) {
		return null;
	}
}

Doing a clean build, you can notice there's no error. But when you touch A.java in the editor, the reconciler reports an error.
I don't see the error, but s.t. like the opposite:

After a clean build the warning decoration in the package explorer and the entry in the Problems view are gone (concerning raw type List). But when I touch the file the warning appears (works for both A and I).

What was the error you observed?
I am not sure there is a reconciler problem here. What I am observing is more
like anamolous behavior in incremental builds.  Jay, please confirm if this
is a reconciler issue (do you see the problem before a save but after an edit)

Shorter example:

// -- X.java
import java.util.List;
public class X implements I {
	public void f(List x, List<I> ls) {                                      
	}
}
// -- I.java
import java.util.List;
public interface I {
	void f(@T List x, List<I> ls);
}
// -- T.java
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
@Target(ElementType.TYPE_USE)
public @interface T {
}

With these, full build is clean, while any change + save in X.java
triggers a name clash.

To reproduce, it appears:

    - @T usage in I.f is necessary
    - @T must be a type annotation
    - Mix of raw and parameterized types seem to be needed of an interface type.
In the incremental builder case while verifying contracts we see:

inherited method: public abstract void f(@T List, List<I>) 
current method: public void f(List#RAW, List<I>) 

It should have been List#RAW. Don't know why.
(In reply to Srikanth Sankaran from comment #3)
> In the incremental builder case while verifying contracts we see:
> 
> inherited method: public abstract void f(@T List, List<I>) 
> current method: public void f(List#RAW, List<I>) 
> 
> It should have been List#RAW. Don't know why.

Hmm, That should indicate a problem in restoring annotations from class files
I suspect.
URB was ignoring the passed flag convertGenericToRaw - Fixed.

Patch released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=905dec82e916c38704735fea38fad8cba693cc45
I am not able to reproduce the bug with older builds. Can confirm that I do not see any errors as described in Comment 1 with [1]. The unit test case added as part of the commit succeeds.

[1] Eclipse + Java 8 RC1 Eclipse Kepler 4.3.2(RC4) Build id: M20140212-0800 +  
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054.
Verified as working for Eclipse + Java 8 RC1 Eclipse Kepler 4.3.2(RC4) Build id: M20140212-0800 +  
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054.


[1.8][builder] Differences between incremental and full builds in method contract verification in the presence of type annotations



Fixed Bug 427105 - [1.8][builder] Differences between incremental and full builds in method contract verification in the presence of type annotations 