Build Identifier: 20120322-1740

Performing an assignment in the resources section of a try-with-resources block triggers a stack map exception.

Example code:

public class EclispeTest1 {
	@Test
	public void testWithResourcesAssignment() throws Exception{
		HasAutoCloseable a;
		
		try(AutoCloseable b=(a=new HasAutoCloseable()).a){
			
		}
		
	}
	
	public class AutoCloseableA implements AutoCloseable{
		@Override
		public void close() {
			// TODO Auto-generated method stub
			
		}
	}
	
	public class HasAutoCloseable{
		AutoCloseable a=new AutoCloseableA();
	}
}

Triggers the following exception

java.lang.VerifyError: Stack map does not match the one at exception handler 49 in method EclispeTest1.testWithResourcesAssignment()V at offset 4
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2442)
	at java.lang.Class.getMethod0(Class.java:2685)
	at java.lang.Class.getMethod(Class.java:1620)
	at .........

Reproducible: Always

Build Identifier: 20120322-1740

Performing an assignment in the resources section of a try-with-resources block triggers a stack map exception.

Example code:

public class EclispeTest1 {
	@Test
	public void testWithResourcesAssignment() throws Exception{
		HasAutoCloseable a;
		
		try(AutoCloseable b=(a=new HasAutoCloseable()).a){
			
		}
		
	}
	
	public class AutoCloseableA implements AutoCloseable{
		@Override
		public void close() {
			// TODO Auto-generated method stub
			
		}
	}
	
	public class HasAutoCloseable{
		AutoCloseable a=new AutoCloseableA();
	}
}

Triggers the following exception

java.lang.VerifyError: Stack map does not match the one at exception handler 49 in method EclispeTest1.testWithResourcesAssignment()V at offset 4
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2442)
	at java.lang.Class.getMethod0(Class.java:2685)
	at java.lang.Class.getMethod(Class.java:1620)
	at .........

Reproducible: Always
Created attachment 213183
Proposed fix
Created attachment 213184
Regression test
The problem comes from a wrong initialization range for the local 'a'. All tests must be run with these two patches.
Marking the target
Thanks for the patch Olivier, I'll take this forward for M7.
This is also a good candidate for a backport to 3.6.2+Java 7 and 3.7.2+.
With the patch applied, I still get a verify error for this case:
// -----
public class X {
    public static void main(String [] args) throws Exception {
        HasAutoCloseable aLocal;
        try(AutoCloseable b=(aLocal=new HasAutoCloseable()).a){
        }
        catch (Throwable e) {
        	
        }
       System.out.println(aLocal.toString());
    }

    public static class AutoCloseableA implements AutoCloseable{
        @Override
        public void close() {
        }
    }

    public static class HasAutoCloseable{
        AutoCloseable a=new AutoCloseableA();
    }
}
//--------------

[i.e add a catch block for Throwable/Exception].

JDK7 rejects the program at the sysout call saying aLocal may
not have been initialized - Under investigation,
Created attachment 213483
Proposed patch

Improved patch with several more tests.
Olivier, please look through this patch - I have removed a few copy() calls,
this needs close scrutiny. Let me know if you see something amiss.
Fix and tests released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=30bcd436389796ede9b25cfba962b4a18b7675bd.
Satyam, please verify this fix, thanks. After your verification
and Olivier's review, we will backport this.
Looks good to me.
This should also be backported to 3.6.2 + Java 7 and 3.7.2+.
(In reply to comment #12)
> Looks good to me.
> This should also be backported to 3.6.2 + Java 7 and 3.7.2+.

I agree. This fixes two related but distinct problems in local variable
ranges that result in verify errors.
I did some verification and it is good. While trying to understand the code, the name preTryBodyFlowInfo mislead me for some time. tryInfo should have been a better name.
(In reply to comment #14)
> I did some verification and it is good. While trying to understand the code,
> the name preTryBodyFlowInfo mislead me for some time. tryInfo should have been
> a better name.

I avoided using tryInfo because that name is already in use further down 
below - but it now appears this same variable's definition can be "pulled up"
thereby eliminating the need for a need for a new variable.

I am running the tests now, if all is well, I can get rid of the new variable
resulting in the readability improvement Satyam alludes to. Thanks Satyam.
Review comments incorporated and released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c4beaedd10d4a8f9b9c00524348c70568b6af6c6.
Comment on attachment 213483
Proposed patch

+1 for backporting this.
Reopened to back port
Released the patch on 3.7 Maintenance via commit 4b72a5119d4991cdcb9bab25a12364378bf514cd
Released the patch on 3.6.2+J7 via commit 30e1e08b39a385e23b3e9bbd84695d496e330188
Verified for 3.8M7 using build I20120429-1800.


try-with-resources assignment in statement produces stack map exception



Fix for 375326: try-with-resources assignment in statement produces stack map exception 

Fix for 375326: try-with-resources assignment in statement produces stack map exception 

Fixed bug 375326: try-with-resources assignment in statement produces stack map exception 