Version: 2.1
Build id: 200211151436

Steps to reproduce:

1 - create a class with the following definition:

public class Foo {
  public final static String BASE = "base."; //$NON-NLS-1$
  public void m1() {
    String name = BASE + "suffix";
  }
}

2 - In the Java sditor, select the expression that is used to initialize 
variable "name" in method "m1" (BASE + "suffix")

3 - Open the context menu, and select Refactor -> Extract Constant

4 - In the Refactoring wizard dialog, provide SUFFIX as the name for the new 
constant. Press Finish.

The result will be:

public class Foo {
  public final static String BASE = "base.";
  private static final String SUFFIX = BASE + ".suffix"; //$NON-NLS-1$
  public void m1() {
    String name = SUFFIX;
  }
}

Problem: the NON-NLS tag in the BASE constant is moved to the new constant, and 
it shouldn't.

Version: 2.1
Build id: 200211151436

Steps to reproduce:

1 - create a class with the following definition:

public class Foo {
  public final static String BASE = "base."; //$NON-NLS-1$
  public void m1() {
    String name = BASE + "suffix";
  }
}

2 - In the Java sditor, select the expression that is used to initialize 
variable "name" in method "m1" (BASE + "suffix")

3 - Open the context menu, and select Refactor -> Extract Constant

4 - In the Refactoring wizard dialog, provide SUFFIX as the name for the new 
constant. Press Finish.

The result will be:

public class Foo {
  public final static String BASE = "base.";
  private static final String SUFFIX = BASE + ".suffix"; //$NON-NLS-1$
  public void m1() {
    String name = SUFFIX;
  }
}

Problem: the NON-NLS tag in the BASE constant is moved to the new constant, and 
it shouldn't.
Refactoring belongs to UI
Fix and tests released.


Extract constant steals NON-NLS tag from base constant



HEAD - Fix for 272533 

Bug 272532: [clean up] "Use modifier 'final' where possible" can introduce compile errors 

27253 

fix for 27253 