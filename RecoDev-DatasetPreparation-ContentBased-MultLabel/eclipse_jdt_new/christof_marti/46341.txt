(1105 nightly build) 

when formatting the declaration below, with all default code formatter options 
(i.e. comment line length = 80), the last word '<code>String</code>' is not 
correctly moved to anotherline, leaving the last line longer than 80 
characters (about 87 characters i think..)


	/**
	 * Sets the set of identifiers to active activities.
	 * 
	 * @param activeActivityIds
	 *            the set of identifiers to active activities. This set 
may be
	 *            empty, but it must not be <code>null</code>. If this set
	 *            is not empty, it must only contain instances of 
<code>String</code>.
	 */
	void setActiveActivityIds(Set activeActivityIds);

(1105 nightly build) 

when formatting the declaration below, with all default code formatter options 
(i.e. comment line length = 80), the last word '<code>String</code>' is not 
correctly moved to anotherline, leaving the last line longer than 80 
characters (about 87 characters i think..)


	/**
	 * Sets the set of identifiers to active activities.
	 * 
	 * @param activeActivityIds
	 *            the set of identifiers to active activities. This set 
may be
	 *            empty, but it must not be <code>null</code>. If this set
	 *            is not empty, it must only contain instances of 
<code>String</code>.
	 */
	void setActiveActivityIds(Set activeActivityIds);
whoops.. bugzilla itself added some formatting confusion.. consider 'may be' 
and '<code>String</code' to be up at the end of the previous line before 
invoking format.
Can reproduce using I20031105. The preference is respected but not accurate: if
you set it to e.g. to 70 you see that the preferences is used. Maybe spaces are
not counted as corresponding characters?

this is not a minor bug for us. (on platform-ui) we are attempting to adopt code formatting (with 
the default preferences) as part of our coding standards for consistency with cvs.

this is not off by a few characters, in some cases it is dramatic. (40 characters).
Reproducible if start and end tag are on the same line and the margin column
(e.g., 80) contains a character from the html elements content or end tag.
The comment region is tokenized into ranges separated by whitespace. Ranges
between (and including) <code>...</code> are marked as 'immutable' (there are a
few other tags like this). When deciding about linebreaks the formatter looks at
'<code>' and - in this case - decides that it fits within the current line. The
algorithm then appends all 'immutable' ranges that follow just because they are
'immutable'.

A possible solution is to look ahead each time the first 'immutable' range is
encounter and decide based on the whole length of the 'immutable' serie of
ranges if it should be appended to the current line or not.

Created attachment 7487
Proposed patch against org.eclipse.jdt.ui

Implementation of proposed solution in comment 5. Changes are:
- CommentRegion: fRanges' static type is List, its dynamic type is ArrayList
(was both LinkedList before), other changes adapt to this; this allows for
efficient random access (used later).
- ICommentAttributes: Additional constants: COMMENT_NONE for convenience and
COMMENT_IMMUTABLE_START, which is set on the first range of a sequence of
COMMENT_IMMUTABLE ranges (i.e., in "<code>...</code><code>...</code>" both
ranges representing the start tags have COMMENT_IMMUTABLE_START set).
- JavaDocRegion: markTagRanges(...) takes an additional argument 'startKey'
that is set on the first range of a sequence of ranges (used with
COMMENT_IMMUTABLE_START); small change in canApply(...) to reflect the new
flag's semantics
- MultiCommentRegion: canAppend(...) checks if the considered range has
COMMENT_IMMUTABLE_START set and if this is the case, it measures the length of
the whole sequence of immutable ranges (aborting at line ends) to decide if the
range can be appended to the current line.
It's fixing the bug but it's too agressive in moving opening tags around. As an
example format TestCase.java and you will see that you now move the <pre> tags
to the line above instead of leaving them on a separate line.

See e-mail for further patch feedback.

*** Bug 52061 has been marked as a duplicate of this bug. ***
*** Bug 52920 has been marked as a duplicate of this bug. ***
Released patch from Christof.
Available in N-builds > 20040310 and I-builds >= 20040316


[formatting][implementation] comment line length not correctly applied



Released patch from Christof to fix bug  46341:[formatting][implementation] comment line length not correctly applied 