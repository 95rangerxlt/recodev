Using I200312182000

see "Blank lines" tab on the new code formatter preference page.

Using I200312182000

see "Blank lines" tab on the new code formatter preference page.
I don't understand. It is working if I call the formatter directly.

See the code formatter tests 397 -> 400. The result is ok.

	/**
	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=49187
	 */
	public void test397() {
		Map options = DefaultCodeFormatterConstants.getDefaultSettings();
		DefaultCodeFormatterOptions preferences = new
DefaultCodeFormatterOptions(options);
		preferences.blank_lines_before_package = 2;
		preferences.blank_lines_after_package = 0;
		DefaultCodeFormatter codeFormatter = new DefaultCodeFormatter(preferences);
		runTest(codeFormatter, "test397", "A.java",
CodeFormatter.K_COMPILATION_UNIT);//$NON-NLS-1$ //$NON-NLS-2$
	}
	
	/**
	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=49187
	 */
	public void test398() {
		Map options = DefaultCodeFormatterConstants.getDefaultSettings();
		DefaultCodeFormatterOptions preferences = new
DefaultCodeFormatterOptions(options);
		preferences.blank_lines_before_package = 0;
		preferences.blank_lines_after_package = 0;
		DefaultCodeFormatter codeFormatter = new DefaultCodeFormatter(preferences);
		runTest(codeFormatter, "test398", "A.java",
CodeFormatter.K_COMPILATION_UNIT);//$NON-NLS-1$ //$NON-NLS-2$
	}	

	/**
	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=49187
	 */
	public void test399() {
		Map options = DefaultCodeFormatterConstants.getDefaultSettings();
		DefaultCodeFormatterOptions preferences = new
DefaultCodeFormatterOptions(options);
		preferences.blank_lines_before_package = 1;
		preferences.blank_lines_after_package = 1;
		DefaultCodeFormatter codeFormatter = new DefaultCodeFormatter(preferences);
		runTest(codeFormatter, "test399", "A.java",
CodeFormatter.K_COMPILATION_UNIT);//$NON-NLS-1$ //$NON-NLS-2$
	}	
	
	/**
	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=49187
	 */
	public void test400() {
		Map options = DefaultCodeFormatterConstants.getDefaultSettings();
	
options.put(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_PACKAGE,
"2");
		options.put(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_AFTER_PACKAGE,
"2");
		DefaultCodeFormatterOptions preferences = new
DefaultCodeFormatterOptions(options);
		DefaultCodeFormatter codeFormatter = new DefaultCodeFormatter(preferences);
		runTest(codeFormatter, "test400", "A.java",
CodeFormatter.K_COMPILATION_UNIT);//$NON-NLS-1$ //$NON-NLS-2$
	}
Here are steps to reproduce (M6):

1) Create this java file:

package test; public class Hello {

2) Create a new code formatter profile 'foo' based on java convention settings.

3) Edit 'foo' and add for example 10 to 'Blank lines -> Before package declaration'

4) Format the file.

-> Observation: No blank lines are inserted before the package declaration.


Please comment.
When I set the option directly using the constants or the code formatter 
option, the blank lines are properly added.

Did you forget on purpose the closing brace of the type declaration?
If I format this:
package test; public class Hello {}

with 10 as the number of blank line prior to package declaration.

It works perfectly fine and I get:
"









package test;

public class Hello {
}"


No there should be a closing brace }...must have gone away on copy paste.

Anyway, I'll try to sort this out.
I found the problem, it is in JavaFormattingStrategy:99-102. All leading
whitespace is removed from the formatted string. 

Tom, can you comment why this is done?




Moving to text.
hmm, the code was added to fix bug 47125 (formatting adds extra tabs and line
breaks).
Olivier, I am trying to figure out how the formatter should be called, and
believe there is an inconsistency (or misunderstanding on my part...). Consider
the following source, with indent = '  ' (two spaces), < > delimiting the
selection fed to the formatter.

<pre>
public class Format {

  <public void temp() {
    return;>
  }
}
</pre>

The returned edit inserts a new line before the correctly formatted text,
resulting in this code: 


<pre>
public class Format {

                        <- additional empty line
  public void temp() {
    return;
  }
}
</pre>

This does not happen if the original code did not contain an empty line before
the selection. Note that the range fed to the formatter did not contain
whitespace on either start or end.

Can you shed some light on why this happens?
I will investigate the code formatter behavior in this case.
What is the call you are using?
Please, insert your code in this PR.
I believe we are not supposed to return anything prior to the 'public' if what 
we insert correspond to the source prior to the offset position.
My concern is that I don't have the extra line, but I do have a extra 
identation.
I need to know how you are calling the formatter.
Could you please attach your test case in a zip file? Sometimes Bugzilla 
changes text attachments.
Specify:
- indentation level provided to the formatter
- offset
- length
- kind
- line separator

Thanks.
I'll try:

0. Formatter settings: indent is two spaces, preserve > 0 emtpy lines
1. Have a (correctly formatted) source file Format.java:

<code>public class Format 
{
  public void temp()  {
    return;
  }
}</code>

2. Select lines 2&3 (zero-based)
3. Choose Source format.

Inside, CodeFormatterUtil.format2 calls 

ToolFactory.createCodeFormatter(options).format(kind, string, offset, length,
indentationLevel, lineSeparator);

with:

kind= CodeFormatter.K_COMPILATION_UNIT
string= <entire file content>
offset= 29
length= 33
indentationLevel= 0
lineSeparator= '\n'

string.substring(offset, offset + length) == "public void temp()  {\n    return;"

The returned edit, when applied to the document, results in this file:

<code>public class Format 
{
  public void temp()  {
    return;
  }
}</code>

-> all good.

----------------
Repeat the entire story with this source:

<code>public class Format 
{

  public void temp()  {
    return;
  }
}</code>

(select lines 3&4)

ToolFactory.createCodeFormatter(options).format() is called with the same
values, except:

offset= 30

The returned edit, applied to the document, results in this file:

<code>public class Format 
{


  public void temp()  {
    return;
  }
}</code>

Created attachment 7432
java source and formatter settings

contains:
- Format.java: java source file
- settings.xml: java formatter settings
I am investigating.
This seems to be a bug in the formatter.
Moving to JDT/Core for further investigation.
Hopefully this is fixed now.
Could you please that it is fixing your problem?

Move to JDT/UI for checking.
Tom, you're involved here. (Works for me)
verify next bug fixing day.
christof, please have a look whether this is fixed with the recent builds.
This is not fixed in 200402121200.
It works fine when I use the code formatter internally. If you have a comment
before the package declaration, the blank lines are added between the comment
and the package declaration.
But it doesn't work if there is no package declaration.
Fixed in builds >20040213


[formatting] "Blank lines before package" not working anymore



patch released for christof_marti; prs: - 51451 - 49187 