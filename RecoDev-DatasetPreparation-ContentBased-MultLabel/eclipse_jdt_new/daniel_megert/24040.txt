We have an editor in WebSphere Studio that is able to be opened on a .java 
source file.  In this editor the user can select objects.  When this occurs in 
the Java Browsing Perspective the packages/types and members views are cleared 
out of their contents.  It would be nicer if the views weren't clear out.

The reason the views are cleared is codein 
org.eclipse.jdt.internal.ui.browsing.JavaBrowsingPart.  This listens to 
selection and if the selection is an IStructuredSelection ( which our editorpart 
signals ) it first de-selects the selected items in the editor and then clears 
the editor contents.  If the selection is an IStructuredSelection and the items 
implement IAdapter but don't return an IJavaElement then the behavior should be 
the same as for a TextSelectionEvent which the Java Editor fires right now as 
the user selects text and doesn't reset the viewers' contents to null.

We have an editor in WebSphere Studio that is able to be opened on a .java 
source file.  In this editor the user can select objects.  When this occurs in 
the Java Browsing Perspective the packages/types and members views are cleared 
out of their contents.  It would be nicer if the views weren't clear out.

The reason the views are cleared is codein 
org.eclipse.jdt.internal.ui.browsing.JavaBrowsingPart.  This listens to 
selection and if the selection is an IStructuredSelection ( which our editorpart 
signals ) it first de-selects the selected items in the editor and then clears 
the editor contents.  If the selection is an IStructuredSelection and the items 
implement IAdapter but don't return an IJavaElement then the behavior should be 
the same as for a TextSelectionEvent which the Java Editor fires right now as 
the user selects text and doesn't reset the viewers' contents to null.
What exactly is the selection that you return? What kind of objects? Maybe you
could adapt them?

Ok - I see the problem now. Was too late last evening ;-)

Your editor returns a structured selection with a Java element - right?

I now enhanced the code to respect this. If you could share your editor with me
then I use it as test case.


Actually our objects are not Java Elements.  To see the bug with eclipse if you 
install the GEF logic designer example you can open this inside the Java 
Browsing perspective, and then click around its figures on the canvas.  Because 
a StructuredSelection is returned whose elements implement IAdaptable and DON'T 
return an IJavaElement, then the browsers get cleared out.
If you want I could give you the plugins to re-create our editor as well as 
another test case - let me know and I'll e-mail them to you or give you an ftp 
address to get them from.
The code you describe is inside:
  if (ei instanceof IFileEditorInput) {
    IFile file= ((IFileEditorInput)ei).getFile();
    IJavaElement je= (IJavaElement)file.getAdapter(IJavaElement.class);
    ...
>We have an editor in WebSphere Studio that is able to be opened on a .java 
>source file.
==> the adapter will return the CU and everything is OK - right?
In case your editor doesn't implement IFileEditorInput then nothing should happen.



JavaBrowsingPerspective - the packages/types and members view clear selection and then contents when an IStructuredSelection event is fired that isn't an IJavaElement



Bug 124040 - debug/inspect popups require ITextViewer 

Fixed bug 24040:Do refesh when JavaElementSorter changes 