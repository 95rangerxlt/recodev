The new Help view offers dynamic and context help as the user works in the 
workbench. Participants who assign help statically using the context Id are 
automatically supported. However, participants that register help listener on 
their own and/or change context help based on the selection should support 
IContextProvider so that Help view can be updated.

Attached is the first cut of the support that covers JavaEditor and the 
packages view. The implementation registers IContextProvider via an adapter 
factory. You are free to register the factory programmatically if you want or 
override 'getAdapter' directly. The attachement will give you an idea of how 
the support works.

The new Help view offers dynamic and context help as the user works in the 
workbench. Participants who assign help statically using the context Id are 
automatically supported. However, participants that register help listener on 
their own and/or change context help based on the selection should support 
IContextProvider so that Help view can be updated.

Attached is the first cut of the support that covers JavaEditor and the 
packages view. The implementation registers IContextProvider via an adapter 
factory. You are free to register the factory programmatically if you want or 
override 'getAdapter' directly. The attachement will give you an idea of how 
the support works.
Created attachment 17589
IContextProvider support for JavaEditor and PackageExplorerPart
CC Dani since the editor is affect as well.

Dejan, is the are document descibing all this. I would like to understand this
since IMO we could do this in a more elegant way by extending JavaUIHelp which
is the funnel for all dynamic help ing JDT/UI anyways. 

Have you looked at adding the support into JavaUIHelp ?
Dirk, I did look at JavaUIHelp and it does look as the right place to put the 
new support. However, it works by attaching help listeners on editors and 
views associated with it using the two methods, and it is not straightforward 
to add adapter support to an object from outside. 

I provided the patch more as an illustration then as a final solution. You are 
free to rework it to fit your overall component style. 

We will eventually write the document but right now all the information you 
will initially need is in IContextProvider Javadoc. When the workbench part is 
activated, we will ask it for IContextProvider using 'getAdapter
(IContextProvider.class)'. You are supposed to return an instance of IContext 
object (the same one you create in JavaUIHelp). 

We also provide the mechanism to control the frequency of control update. 
Update mask set to NONE will cause the help view to ask for IContext only on 
part activation. SELECTION mask will cause us to add a selection listener and 
ask for IContext on each selection change (note that we check for 
IPostSelectionProvider and use that instead if available).
Dejan,

are there any objections that we create a new instance of IContextProvider very
time you ask for it through getAdapter. I am reluctent to hang onto any state
from the viewer in the context since this asks for trouble when the viewer gets
disposed.

I have an implementation running and it seems to work. Just wanted to doubel check.
Daniel,

I have no dependencies on any particular instance of IContextProvider - we use 
the instance to prime the dynamic help view and discard it, so giving us a new 
one every time is perfectly acceptable.
Daniel,

I have added support for context providers to all JDT views (including browsing)
which register its own help listeners. Can you take care of the Java editor. It
seems to need some special treatment.
Dejan, can you explain why your patch provides a custom search expression for
the Java editor but not for the Java views?

If search expression is not returned by the provider, the default expression 
that will be used will be formed as "<part name>" OR "<perspective name>". Java 
editor is selection-sensitive, so I thought it would be better that the name of 
the selected type is added to the search expression. If you think that there is 
no value in that or that it is not desireable, just return null and the default 
will be used.
The Java views are also selection dependent (e.g. Package Explorer) and hence I
do not understant why your patch treats them different from the editor
hmmm... Perhaps you are right. I think I left the expression computation in as 
an example of how to do it. It is up to you to include the selection in 
expression computation or return null to get the default.

I suggest to try with and without compare the kinds of hits you get from the 
search. Pick one that returns links that are more helpful overall to the user.
Dejan, the Javadoc of getSearchExpression() says that the format is defined in
the Help system. I could not find it in HelpSystem. Your patch uses " OR " to
combine search strings. What happens when a class has the name 'OR'? To I need
to escape it somehow?
The results are quite random if the Java element name is included.

We will return null as search expression.

You can put the type name in quotes (""). Regarding the search results, that 
was my conclusion too. I concur with returning null for now until a better 
search phrase is found.


[misc] Provide support for dynamic help



Fixed bug 84093: [misc] Provide support for dynamic help 

[84093] Provide support for dynamic help 