Beginning with the 04/23 Integration build, I am unable to utilize the 
JarPackager in a headless environment. Specifically, I have defined my own Ant 
tasks which perform operations including jar packaging.
The problem is in JarFileExportOperation.getDirtyEditors(Shell parent). Is it 
possible to accept null for parent and have the method just return an empty 
array?

Beginning with the 04/23 Integration build, I am unable to utilize the 
JarPackager in a headless environment. Specifically, I have defined my own Ant 
tasks which perform operations including jar packaging.
The problem is in JarFileExportOperation.getDirtyEditors(Shell parent). Is it 
possible to accept null for parent and have the method just return an empty 
array?
the JarPackager is in a UI plugin and not intended to be used headless. The 
problem you are seeing might just be the tip of an iceberg. Why don't use the 
standard Ant task?

(BTW, post 2.0 we are considering storing the Jar description in the Ant format 
directly).
Yeah, I understand about it being in a UI plugin, but it worked up until this 
last integration build. Plus, I don't see why creating a jar (via 
JarFileExportOperation) is inherently a UI task except for the wizard itself.
In any case, the standard Ant task, unless I'm missing something, can't help us 
as we have our own JarWriter. We use this to primarily modify certain key files 
on the way out. I guess we could certainly go to vanilla Ant tasks rather than 
leveraging the existing JDT Jar Packaging support, but the scripts would have a 
bunch of setup work to do. We'd have to copy the files out of the appropriate 
locations (bin for .class files, source folders for non-java resources, etc.) 
and into some staging area, and then change the contents of certain files prior 
to performing the actual standard Ant task. And I think that's probably just 
the tip of our own iceberg.
Maybe I'm just being lazy here, but I think that's a lot for a plugin to have 
to know about how JDT gathers files when creating a jar. I looked around and I 
didn't see a JDT Ant task for creating jars that understands how to do this 
(anmely gather the files from different locations and dereference source 
folders).
The isDirty(...) checks if there are open files being exported. It had to be
leveraged because isDirty(...) accesses the widget tree (at least in case of
multi page editors).
And yes - I could probably accept null but you would then not get any warning of
dirty files.

Yes, I knew there was a change to multipage editors that led to this. We 
actually had something to do with that. ;-)
I think it's safe to assume there are no open editors in a headless 
environment, but it would be unfortunate if someone mistakenly just passed null 
in for the shell when not running headless. Is there anyway to detect running 
headless? I imagine not, but if so, you could skip the logic when headless and 
otherwise assume a non-null shell.
- there's no API to check if headless (other than looking for org.eclipse.ui)
- jdt.core is the headless part of JDT - if headless is a required feature then
we'll have to push down (parts of) the JAR Packager to jdt.core. This will now
be done for 2.0


I could add a boolean to the JarPackageData (e.g. shouldCheckForUnsavedFiles)
which is true per default.

Yes, this would work very well given the way our code is organized. Thank you.
Actually, the API already specifies that an empty shell will prevent dialogs
from being poped up. Adjusted the code to not check for dirty files if shell is
null and added a corresponding comment to the API.

Fix available in builds > 20020502



Unable to use JarPackager headless



Fixed 14531: Unable to use JarPackager headless 