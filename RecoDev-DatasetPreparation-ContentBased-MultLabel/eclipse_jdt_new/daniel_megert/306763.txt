Build Identifier: 3.6.0 - I20100313-1044

Upper case letters-HEBREW
1. Open Eclipse, create Java project 
2. Create folder named FIRST
3. Under FIRST create folder named SECOND
4. Create Hebrew-named java class inside the SECOND folder
5. Declare some Hebrew-named method which recieves two Hebrew-named parameters
of Hebrew-named types
6. Go to Outline view, select Hebrew-named method and perform Copy
7. Open Notepad, turn on 'Show Unicode Controlcharacters' option and perform paste
Result: pasted data contains Unicode characters. The same behaviour is with 'CopyQualifiedName' option (see attached screenshot)


Reproducible: Always

Build Identifier: 3.6.0 - I20100313-1044

Upper case letters-HEBREW
1. Open Eclipse, create Java project 
2. Create folder named FIRST
3. Under FIRST create folder named SECOND
4. Create Hebrew-named java class inside the SECOND folder
5. Declare some Hebrew-named method which recieves two Hebrew-named parameters
of Hebrew-named types
6. Go to Outline view, select Hebrew-named method and perform Copy
7. Open Notepad, turn on 'Show Unicode Controlcharacters' option and perform paste
Result: pasted data contains Unicode characters. The same behaviour is with 'CopyQualifiedName' option (see attached screenshot)


Reproducible: Always
Created attachment 162718
Copy from Outline view to Notepad
>7. Open Notepad, turn on 'Show Unicode Controlcharacters' option and perform
>paste
Where do you do that? It seems that my version does not support this.

Tomer, as far as I can remember this is the expected behavior since some applications might be able to correctly interpret them. This is also what our former BiDi contact Tod Creasey wrote in his FAQ (see: Do these extra characters get picked up if I copy the String?):
http://todcreaseyeclipse.blogspot.com/

Is that information incorrect? If we fix that by stripping the escapes, then the label would be rendered wrong (e.g. parentheses at wrong positions) in some apps. If that's the new direction then we have to fix this in all Eclipse views that currently use the TextProcessor to insert such marks for rendering.
Several observations:
 1. TextProcessor is far from being an ideal solution.

 2. You are correct that other applications (i.e. Notepad) won't properly display Java code including Bidi text. However, Notepad is not designed to work with Java code. Thus I believe that between different applications we should pass the typed text as-is without any control characters. This is simply because other applications may have different approach for fixing the display problem. In Eclipse it is fixed with Unicode control characters. In different application it can be addressed differently. Thus passing Unicode control character to application with the text may potentially have a negative effect on it's display.

 3. TextProcessor does offer a way to strip Unicode control characters from the text. However, it is up to TextProcessor consumer to leverage this capability.

 4. Last but not least. In my humble opinion removal of control characters should take place. However, it is much more important in dynamic contexts (i.e. input field) than it is in the static context (reported in this bug). JDT StyledText based widget (which is an example of dynamic context) take care of it (if you copy text from JDT editor it won't include Unicode control characters). Input text widget with Bidi support (developed in bug 230854) will also take care of it.
Regarding Notepad option. RightClick on mouse displays content menu. There are Copy/Paste/Undo entries and also 'Show Unicode control characters'....
>This is simply
>because other applications may have different approach for fixing the display
>problem.
AFAIK it is not just a display problem: for some strings only the original application (Eclipse in this case) may know the semantic of the string that's copied. Correct?

I adapted the summary.


>Regarding Notepad option. RightClick on mouse displays content menu. There are
>Copy/Paste/Undo entries and also 'Show Unicode control characters'....
Thanks, found it.
Yes. Indeed.
When comparing the old (unprocessed) copy and the one in 3.5 and 3.6 it seems to give better results in general with the new version since most apps can handle the unicode escapes:
3.4:
&#1508;&#1493;&#1504;&#1511;&#1510;&#1497;&#1492;(&#1511;&#1500;&#1505;_&#1512;&#1488;&#1513;&#1493;&#1503;, &#1511;&#1500;&#1505;_&#1513;&#1504;&#1497;)

3.5:
&#8234;&#1508;&#1493;&#1504;&#1511;&#1510;&#1497;&#1492;&#8206;(&#1511;&#1500;&#1505;_&#1512;&#1488;&#1513;&#1493;&#1503;,&#8206; &#1511;&#1500;&#1505;_&#1513;&#1504;&#1497;)&#8236;

Hence, I would guess that keeping the current behavior is even better, don't you think?
I want to suggest the following scenarios:
User copies the function name and pastes it into Search dialog. He'll never receive any results since the buffer contains unicode characters.
Or user copies the entry and pastes it into Java editor. I even wasn't able to save the file after this paste, since I am working with Cp1255 and now my file contains Unicode characters.
Ira, that's a very good point.
Fixed in HEAD for Search view and all JDT views.
Available in builds >= N20100323-2000.

Ira, would it be possible for you to test the other views (besides Search and JDT) in the SDK and file bugs against the corresponding components?


[BiDi] Copy element labels from a view should not contain BiDi markers



Fixed bug 306763: [BiDi] Copy element labels from a view should not contain BiDi markers 