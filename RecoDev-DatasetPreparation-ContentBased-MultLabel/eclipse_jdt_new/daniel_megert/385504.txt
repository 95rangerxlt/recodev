Broken in 3.8, was OK in 3.7.2

- create a new Plug-in project, all defaults
- paste this class:

package p;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;

class Test {
	boolean foo() {
		IStatus jobResult = null;
		return jobResult == Status.;
	}
}


- put caret after "Status." and press Ctrl+Space

=> First two proposals are type proposals for Status and MultiStatus. These are both wrong and should not show up.

Broken in 3.8, was OK in 3.7.2

- create a new Plug-in project, all defaults
- paste this class:

package p;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;

class Test {
	boolean foo() {
		IStatus jobResult = null;
		return jobResult == Status.;
	}
}


- put caret after "Status." and press Ctrl+Space

=> First two proposals are type proposals for Status and MultiStatus. These are both wrong and should not show up.
Potential 3.8.1 candidate
Strange, I couldn't reproduce this using build I20120710-0800 (JDT v3.8.0.v201207100800). I get all the static fields in Status, such as CANCEL_STATUS, OK_STATUS, etc.

I tried using both source and compliance 1.6 and 1.7. 
Markus, can you attach your project? TIA!
Created attachment 219043
bug385504.zip

I see the problem in all 3.8 and later builds I tried, independent of the JRE used, and in workspaces with the Status class from source or as binary.
Created attachment 219095
content assist screenshot

(In reply to comment #3)
> Created attachment 219043 [details]
> bug385504.zip
> 
> I see the problem in all 3.8 and later builds I tried, independent of the JRE
> used, and in workspaces with the Status class from source or as binary.

Still, no success :(
I tried to toggle the advanced options in content assist preference page but still the same proposals.
I'm using a 4.2 build, not sure if that's somehow causing the difference. I'll download a 3.8 and try with it as well.
Hold on, today I also can't reproduce it any more with 3.8 builds. Investigating...
Sorry, I apparently didn't reproduce this in a fresh workspace -- only in an empty one where I first reduced the bug into a small example.

The problem is the type history in JDT Text. To reproduce, you have to at least once use content assist to complete Status and MultiStatus. After that, these types get added as "history types" in JavaTypeCompletionProposalComputer#computeCompletionProposals(..).

Was already broken in 3.6.2.
Dani, I don't understand the value of the whole implementation in JavaTypeCompletionProposalComputer#computeCompletionProposals(..).

The completions that are added there are always wrong. The code gets javaContext.getExpectedType(), and then adds proposals for recently used types that are assignable to the lhs. But these type names are never assignable to a variable of that type. This only makes sense if you assume that the type will have self-typed members that could be interesting. That's too speculative IMO.

Can we remove that method?
(In reply to comment #7)
> Dani, I don't understand the value of the whole implementation in
> JavaTypeCompletionProposalComputer#computeCompletionProposals(..).
> The completions that are added there are always wrong.
Almost. The only case where we still want it, is type completion after "new ".
Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=d4ba4848edaaf51714c5b31cb013564517ed0463

We can replace the workaround once bug 385858 has been fixed.


[content assist] Content assist offers wrong type completion after TypeName



Fixed bug 385504: [content assist] Content assist offers wrong type completion after TypeName 