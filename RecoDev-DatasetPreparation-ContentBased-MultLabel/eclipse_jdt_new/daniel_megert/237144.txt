Build ID: 34RC4

ProblemsLabelDecorator.decorateImage will throw an NPE if null is passed, but the javadoc for the interface explicitly says it should handle null

org.eclipse.jdt.ui.ProblemsLabelDecorator.decorateImage(Image, Object)

	/* (non-Javadoc)
	 * @see ILabelDecorator#decorateImage(Image, Object)
	 */
	public Image decorateImage(Image image, Object obj) {
		int adornmentFlags= computeAdornmentFlags(obj);
		if (adornmentFlags != 0) {
			ImageDescriptor baseImage= new ImageImageDescriptor(image);
npe here =>		Rectangle bounds= image.getBounds();
			return getRegistry().get(new JavaElementImageDescriptor(baseImage, adornmentFlags, new Point(bounds.width, bounds.height)));
		}
		return image;
	}

Note the param comment below:
     * @param image the input image to decorate, or <code>null</code> if the element has no image



    /**
     * Returns an image that is based on the given image,
     * but decorated with additional information relating to the state
     * of the provided element.
     * 
     * Text and image decoration updates can occur as a result of other updates
     * within the workbench including deferred decoration by background processes.
     * Clients should handle labelProviderChangedEvents for the given element to get
     * the complete decoration.
     * @see LabelProviderChangedEvent
     * @see IBaseLabelProvider#addListener
     *
     * @param image the input image to decorate, or <code>null</code> if the element has no image
     * @param element the element whose image is being decorated
     * @return the decorated image, or <code>null</code> if no decoration is to be applied
     *
     * @see org.eclipse.jface.resource.CompositeImageDescriptor
     */

Build ID: 34RC4

ProblemsLabelDecorator.decorateImage will throw an NPE if null is passed, but the javadoc for the interface explicitly says it should handle null

org.eclipse.jdt.ui.ProblemsLabelDecorator.decorateImage(Image, Object)

	/* (non-Javadoc)
	 * @see ILabelDecorator#decorateImage(Image, Object)
	 */
	public Image decorateImage(Image image, Object obj) {
		int adornmentFlags= computeAdornmentFlags(obj);
		if (adornmentFlags != 0) {
			ImageDescriptor baseImage= new ImageImageDescriptor(image);
npe here =>		Rectangle bounds= image.getBounds();
			return getRegistry().get(new JavaElementImageDescriptor(baseImage, adornmentFlags, new Point(bounds.width, bounds.height)));
		}
		return image;
	}

Note the param comment below:
     * @param image the input image to decorate, or <code>null</code> if the element has no image



    /**
     * Returns an image that is based on the given image,
     * but decorated with additional information relating to the state
     * of the provided element.
     * 
     * Text and image decoration updates can occur as a result of other updates
     * within the workbench including deferred decoration by background processes.
     * Clients should handle labelProviderChangedEvents for the given element to get
     * the complete decoration.
     * @see LabelProviderChangedEvent
     * @see IBaseLabelProvider#addListener
     *
     * @param image the input image to decorate, or <code>null</code> if the element has no image
     * @param element the element whose image is being decorated
     * @return the decorated image, or <code>null</code> if no decoration is to be applied
     *
     * @see org.eclipse.jface.resource.CompositeImageDescriptor
     */
Fixed in HEAD.
Available in builds > N20080814-2000.


[decorators] ProblemsLabelDecorator.decorateImage does not tolerate a null image



Fixed bug 237144: [decorators] ProblemsLabelDecorator.decorateImage does not tolerate a null image 

Fixed bug 237144: [decorators] ProblemsLabelDecorator.decorateImage does not tolerate a null image 