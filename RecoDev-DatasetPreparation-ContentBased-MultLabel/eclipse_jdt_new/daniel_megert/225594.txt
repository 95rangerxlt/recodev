20080401-0851

To find the source for junit4, I'm searching for a bundle 'org.junit4.source' with version '4.3.1'

Platform.getBundles(bundleName, version);
and 
ServiceReference serviceRef= fBundleContext.getServiceReference(PackageAdmin.class.getName());
PackageAdmin admin= (PackageAdmin)fBundleContext.getService(serviceRef);
bundles= admin.getBundles(bundleName, version);

can both not locate this bundle.

Looking in the plugons dir I see org.junit4.source_4.3.1.jar with a manifest matching the name and id.

What's the secret?

20080401-0851

To find the source for junit4, I'm searching for a bundle 'org.junit4.source' with version '4.3.1'

Platform.getBundles(bundleName, version);
and 
ServiceReference serviceRef= fBundleContext.getServiceReference(PackageAdmin.class.getName());
PackageAdmin admin= (PackageAdmin)fBundleContext.getService(serviceRef);
bundles= admin.getBundles(bundleName, version);

can both not locate this bundle.

Looking in the plugons dir I see org.junit4.source_4.3.1.jar with a manifest matching the name and id.

What's the secret?
By design the source bundles are not installed by p2 because they are not used by the framework running the tooling at all.  Instead they are used by PDE when it is reading your target platform.  Since the target platform may be different than the running instance used for your tooling there is no reason to load the source bundles into the running tooling instance.  What are you searching for the source bundles for?  Perhaps Chris has some advise for finding the source bundles?
Martin, you can use PDE APIs, PluginRegistry.find.... to search source amongst workspace + target.

If I recall, I believe Martin is using this part of the JUnit launching story?
This is about the JUnit classpath container. It adds JUnit to the classpath by using the JUnit bundles in the Eclipse install.
We also need the source bundle for source attachment.

This used to work in previous releases and still works for the source bundles of 3.8.1 which are not yet in the source bundle format.

JUnit can not reference PDE (we're not in the PDE feature). So far we hardcoded the way how we were able to find the JUnit plugins.

As discussed with Darin, in the future we might be able to extract all the DPE model information in a bundle in the platform. I was originally hoping that equinox of p2 can give me such API (see bug 165192).

As I need a solution for 3.4, what is a reliable way to find a bundle of a given name, even if not installed?
(In reply to comment #3)
> As I need a solution for 3.4, what is a reliable way to find a bundle of a
> given name, even if not installed?
> 

With OSGi Framework APIs there is no way to find a bundle that is not installed.  It is as if the bundle does not exist from the POV of the Framework.  Perhaps p2 has some provisional api for finding bundles in bundle pools (your target).
Does p2 know where all the bundle pool locations are? Only a subset of bundles in the pools may be installed, but I think Martin just needs to know which pools to look in.
Curtis, you added the support in PDE. Can you give me some instructions.
Bug 225950 which is a regression, so I need a workaround for 3.4.
Source location management is done in the PDE layer, and lower layers such as p2, don't currently have the support.

PDE finds source bundle locations by checking a set of plugins (IPluginModelBase) for the source bundle manifest entry.  The set of plugins to search comes from the target platform.

p2 does store a list of source bundles for the platform in:
<eclipseInstall>\eclipse\configuration\org.eclipse.equinox.source\source.info  One possibility would be to check the bundles specified in that file for one that provides the correct source, but this would require the reading of manifests from each bundle. 
As discussed with Darin, to get the JUnit 4 container running for 3.4 I changed my code to search for a hardcoded bundle name in the 'plugins' directory.

For 3.5 it would be great to get API from p2 to locate a non installed bundle. 

And, if I can't find it it in the bundle pool, even ask to download it there? :-)


Martin - note that Curtis created this WIKI page to start tracking p2 API requests:

http://wiki.eclipse.org/Equinox_p2_API_Requests
This may actually be a duplicate of bug 236719, unless PDE runtime (or some other bundle) provides a higher level function/API to match a source bunlde with its binary bundle or visa versa.
What needs to happen to fix this?
(In reply to comment #11)
> What needs to happen to fix this?

We need to validate the provisional API described in bug 236719 to ensure it provides installed binary and source bundles as promised. Since JDT does not depend on PDE, it would make sense for JDT/JUnit to use this same API to query installed source bundles. However, this means that JDT needs to add a dependency on p2.
>However, this means that JDT needs to add a dependency on p2.
In contrast to PDE, p2 is below us, so that should probably work.

Darin and Dani: So should this go in plan for 3.5?



>Darin and Dani: So should this go in plan for 3.5?
Yes.
Moving to JUI. To fix this in 3.5, JDT can use code similar to what PDE is using to discover bundles/source installed in the running SDK. PDE uses the SimpleConfiguratorManipulator service from equinox to read the contents of the bundles.info and source.info files (which describe the bundles/source installed in the SDK).

See org.eclipse.pde.internal.core.P2Utils for examples on how to do this. PDE can't provide the API, since JDT lives below PDE>
Fixed in HEAD.
Available in builds > N20090319-2000.


[JUnit] Cannot find bundle 'org.junit4.source'



Fixed bug 225594: [JUnit] Cannot find bundle 'org.junit4.source' 

fix JUnit 4 source (nor working yest, bug 225594) 