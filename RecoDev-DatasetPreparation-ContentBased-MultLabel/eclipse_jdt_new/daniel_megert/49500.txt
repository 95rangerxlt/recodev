I find the performance of Eclipse in general has detoriated noticiably since M3.
 The work that is now handled by background threads was done to *improve* UI
responsiveness but in some cases it has had the opposite effect as Eclipse slows
and momentarily stops responding to UI interaction while it recompiles or
whatever else it is doing each time you change something.

It's terrible when you're cutting and pasting lots of text.

I also tried -vmargs -Xmx256m and -vmargs -Xmx512m to no effect on a AMD 2200XP
1 Gb system.

I find the performance of Eclipse in general has detoriated noticiably since M3.
 The work that is now handled by background threads was done to *improve* UI
responsiveness but in some cases it has had the opposite effect as Eclipse slows
and momentarily stops responding to UI interaction while it recompiles or
whatever else it is doing each time you change something.

It's terrible when you're cutting and pasting lots of text.

I also tried -vmargs -Xmx256m and -vmargs -Xmx512m to no effect on a AMD 2200XP
1 Gb system.
Yes, cutting and pasting text is one area where performance is really bad.
I'm seeing slowdowns between M5 and M6 specifically related to syntax
highlighting and error checking. There are often 2-3 second pauses when I'm
typing text that is not yet a complete statement, and it appears that the
background parser is blocking the input process. This was not a problem in M5.

I'm running a 1Gb AMD 1800MP SMP linux box, so background threads should have
ample resources.
There's a separate bug regarding pasting of text: bug 49437.

Am reassigning this to JDT/UI for the performance issues related to syntax 
highlighting and error checking.  Cut and paste performance is addressed in 
bug 49437.

Daniel, I think there are several enhancements in the Java editor that cause 
this behaviour. Creating an AST in post selection change for Quick fix might 
contribute to this as well. We should check together with Martin what we can 
do here.
We need to measure where it actually spends the time.
I adapted priority and severity.

see also bug 49524
Several fixes have been done to fix this
1) we only use 1 AST at a time for both: Quick Assist and Occurrences Finder
2) the AST can be cancelled (possible now thanks to support from J Core)
3) using jobs instead of threads

Please reopen if you still see this bug using I20040122 or newer.



Performance problems due to background activity

