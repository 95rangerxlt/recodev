template.js currently slows down quite a lot when faced with many (>1000) nodes to deal with.

While Paul may indeed kill it off in the UI rewrite, I've found quite a few easy performance wins we can use right now.  This is more important in support of bug 943251, as listing out all the prefs adds many more nodes than template.js dealt with before.

template.js currently slows down quite a lot when faced with many (>1000) nodes to deal with.

While Paul may indeed kill it off in the UI rewrite, I've found quite a few easy performance wins we can use right now.  This is more important in support of bug 943251, as listing out all the prefs adds many more nodes than template.js dealt with before.
Created attachment 8391408
Part 1: Use a resolver object to only descend once
Created attachment 8391409
Part 2: Use the resolver to compute root path
Created attachment 8391410
Part 3: Resolver iterates faster without for ... of
Created attachment 8391411
Part 4: Process tree without for ... of
Created attachment 8391413
Part 5: Save paths on each node
Created attachment 8391414
Part 6: Delay node registrations
Created attachment 8392347
Part 1: Use a resolver object to only descend once

This creates a Resolver object that navigates the object store once for movement down the tree, instead of navigating the store from root for every lookup.

The test change only removes the trailing "." from the stored "rootPath" attribute, which is unnecessary.

For the case of loading prefs from a device, this change takes us from 825ms to 639ms (23% improvement).
Created attachment 8392353
Part 2: Resolver iterates faster without for ... of

Switching back to a "regular" for loop takes prefs load time from 639ms to 505ms (38% improvement overall).
Created attachment 8392356
Part 3: Process tree without for ... of

Similar to the last patch, using regular loops over the tree improves loading prefs from 505ms to 450ms (45% improvement overall).
Created attachment 8392362
Part 4: Save paths on each node

This is the largest improvement here.  It changes an O(N^2) algorithm to O(N), by storing a node's paths on the element, instead of just looping over all possible paths for all changed nodes.

This takes removing all prefs from 2963ms to 20ms (99.3% improvement / 150x faster).
Created attachment 8392366
Part 5: Delay node registrations

This delay tracking nodes until the last step during changes, which avoid double work (as I commented in the patch).  For loading prefs, this takes us from 440ms to 200ms (76% improvement overall / 4x faster).
Try: https://tbpl.mozilla.org/?tree=Try&rev=ca34af7a645f
Comment on attachment 8392347
Part 1: Use a resolver object to only descend once

Review of attachment 8392347:
-----------------------------------------------------------------

Sorry for the review delay, I got some review overflow sickness!

Nice abstraction!

::: browser/devtools/app-manager/content/template.js
@@ +362,5 @@
> +      return obj;
> +    }
> +    let chunks = path.toString().split(".");
> +    for (let word of chunks) {
> +      if ((typeof obj) == "object" &&

nit: Not your code, but may be `typof(obj) == "object"` would be just easier to read.
Comment on attachment 8392353
Part 2: Resolver iterates faster without for ... of

Review of attachment 8392353:
-----------------------------------------------------------------

What?! really... that's scary!
Comment on attachment 8392356
Part 3: Process tree without for ... of

Review of attachment 8392356:
-----------------------------------------------------------------

Ok.. ok...
Then I'm wondering... don't you save some cycles by also caching the array length?
Comment on attachment 8392362
Part 4: Save paths on each node

Review of attachment 8392362:
-----------------------------------------------------------------

I don't really get these two patches, nor do I get template,
but that looks good and I gave a try to these patches and that's fast!
(In reply to Alexandre Poirot (:ochameau) from comment #15)
> Comment on attachment 8392356
> Part 3: Process tree without for ... of
> 
> Review of attachment 8392356:
> -----------------------------------------------------------------
> 
> Ok.. ok...
> Then I'm wondering... don't you save some cycles by also caching the array
> length?

This (thankfully...) makes no perceivable difference.  But it's a good thought, it occurred to me as well. :) We must already optimize for this, or the length is not long enough for it to matter here.
pushed to m-i as

https://hg.mozilla.org/integration/mozilla-inbound/rev/9d661be98d68
https://hg.mozilla.org/integration/mozilla-inbound/rev/67c3aebfa9ed
https://hg.mozilla.org/integration/mozilla-inbound/rev/8e6267048082
https://hg.mozilla.org/integration/mozilla-inbound/rev/c2b0efd466d4
https://hg.mozilla.org/integration/mozilla-inbound/rev/b45284fa40fe
ups was to fast with closing as fixed since this landed only on m-i so far, sorry
https://hg.mozilla.org/mozilla-central/rev/b45284fa40fe
https://hg.mozilla.org/mozilla-central/rev/c2b0efd466d4
https://hg.mozilla.org/mozilla-central/rev/8e6267048082
https://hg.mozilla.org/mozilla-central/rev/67c3aebfa9ed
https://hg.mozilla.org/mozilla-central/rev/9d661be98d68
> This takes removing all prefs from 2963ms to 20ms (99.3% improvement / 150x faster).

Well, fuck me.


Improve template.js performance



Bug 982322 - Part 1: Use a resolver object to only descend once. r=ochameau 

Bug 982322 - Part 2: Resolver iterates faster without for ... of. r=ochameau 

Bug 982322 - Part 3: Process tree without for ... of. r=ochameau 

Bug 982322 - Part 4: Save paths on each node. r=ochameau 

Bug 982322 - Part 5: Delay node registrations. r=ochameau 