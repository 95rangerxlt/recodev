Create waterfall view. Ability to switch between Call Tree and Waterfall view within Details view.

Create waterfall view. Ability to switch between Call Tree and Waterfall view within Details view.
Should not be selectable when timeline actor does not exist (Gecko < 35).
Created attachment 8528578
1077458-waterfall-view-perf.patch

Waterfall and details toggling view implementation. Tests pass, except waiting for `onceSpread` utility from bug 1077455 to land to clean them up.
Comment on attachment 8528578
1077458-waterfall-view-perf.patch

Review of attachment 8528578:
-----------------------------------------------------------------

::: browser/devtools/performance/controller.js
@@ +52,3 @@
>    // Emitted by the CallTreeView when a call tree has been rendered
> +  CALL_TREE_RENDERED: "Performance:UI:CallTreeRendered",
> +  

Nit: whitespace.

::: browser/devtools/performance/test/browser_perf-details.js
@@ +16,5 @@
> +  click(panel.panelWin, $("toolbarbutton[data-view='calltree']"));
> +  let viewName = yield viewChanged;
> +  is(viewName, "calltree", "DETAILS_VIEW_SELECTED fired with view name");
> +  checkViews(DetailsView, "calltree");
> + 

Nit: more whitespace.

::: browser/devtools/performance/test/browser_perf-front.js
@@ +9,5 @@
> +
> +function spawnTest () {
> +  let { target, front } = yield initBackend(SIMPLE_URL);
> +
> +  let startTime = yield front.startRecording();

Maybe yield { startTime } instead of just a number, to match what `stopRecording` does.

@@ +11,5 @@
> +  let { target, front } = yield initBackend(SIMPLE_URL);
> +
> +  let startTime = yield front.startRecording();
> +
> +  ok(startTime, "front.startRecording() emits start time");

Nit: check that this is a number.

@@ +17,5 @@
> +  yield busyWait(WAIT);
> +
> +  let { endTime } = yield front.stopRecording();
> +
> +  ok(endTime, "front.stopRecording() emits end time");

Ditto.

::: browser/devtools/performance/test/head.js
@@ +202,5 @@
>    let stack;
>    while (Date.now() - start < time) { stack = Components.stack; }
>  }
>  
> +function click (win, button) {

Where did `idleWait` go?

::: browser/devtools/performance/views/details.js
@@ +28,5 @@
>      // Initialize subviews
>      return promise.all([
> +      CallTreeView.initialize(),
> +      WaterfallView.initialize()
> +    ]).then(() => this.selectView(DEFAULT_DETAILS_SUBVIEW));

Looks like this view should become a generator now :)

Is there any reason we need to make the CallTreeView and WaterfallView initialize in parallel? If not, yield, yield, then this.selectView(...)

@@ +31,5 @@
> +      WaterfallView.initialize()
> +    ]).then(() => this.selectView(DEFAULT_DETAILS_SUBVIEW));
> +  },
> +
> +  selectView: function (selectedView) {

Nit: document this function. What is a `selectedView` without reading this implementation?

::: browser/devtools/performance/views/waterfall.js
@@ +3,5 @@
> + * You can obtain one at http://mozilla.org/MPL/2.0/. */
> +"use strict";
> +
> +/**
> + * Waterfall view containing waterfall view, controlled by DetailsView.

Redundant sentence is redundant.

::: browser/devtools/timeline/widgets/marker-details.js
@@ +26,5 @@
>  function MarkerDetails(parent) {
>    EventEmitter.decorate(this);
>    this._document = parent.ownerDocument;
>    this._parent = parent;
> +  this._splitter = this._parent.parentNode.querySelector("splitter");

This is horrible. Do the container trick like in waterfall.js, and add a bug number.

::: browser/devtools/timeline/widgets/waterfall.js
@@ +43,2 @@
>  
>  const WATERFALL_ROWCOUNT_ONPAGEUPDOWN = 10;

Maybe move this file somewhere at some point? XXX Bug no?

@@ +56,4 @@
>    EventEmitter.decorate(this);
>    this._parent = parent;
>    this._document = parent.ownerDocument;
> +  this._container = container || this._document.querySelector("#timeline-pane");

I assume `this._document.querySelector("#timeline-pane");` will have to be removed at some point? XXX: Bug No.

::: toolkit/devtools/server/actors/timeline.js
@@ +245,5 @@
> +  }, {
> +    response: {
> +      value: RetVal("number")
> +    }
> +  }),

Backwards compatibility concerns? Does this need to be backported to 35?
Nits fixed; changed the MarkerDetails view to also take an extra splitter node, and removed the defaults from that, as well as the waterfall widget, updating timeline to pass in the appropriate nodes.

Moved WATERFALL_ROWCOUNT_ONPAGEUPDOWN as a property on the widget `rowCount`, defaulting to WATERFALL_ROWCOUNT_ONPAGEUPDOWN so we can set it in a view using it.

Added fake endTime returned from the PerformanceFront if the timeline actor does not return it for backwards compat.

Will reup patch once bug 1077455 is merged in for tests to actually work
Created attachment 8529227
1077458-waterfall-view-perf.patch
https://treeherder.mozilla.org/ui/#/jobs?repo=try&revision=7d23da906dbf
Sure doesn't look like a checkin-needed try push to me.
Created attachment 8530555
Screenshot of waterfall

Don't know if it's expected, but I see this on my side : "NaN ms".
Created attachment 8530556
icon patch
Created attachment 8531367
1077458-waterfall-view-perf.patch

Some changes to Timeline/timeline widgets
https://treeherder.mozilla.org/ui/#/jobs?repo=try&revision=57be36a28f31
Created attachment 8531440
1077458-waterfall-view-perf.patch

Adding :ntim's icons to the patch
Comment on attachment 8531440
1077458-waterfall-view-perf.patch

Review of attachment 8531440:
-----------------------------------------------------------------

I was still reviewing this. Not sure why you cancelled.

::: browser/devtools/performance/controller.js
@@ +155,5 @@
>    stopRecording: Task.async(function *() {
>      let results = yield gFront.stopRecording();
> +    // If `endTime` is not yielded from timeline actor (< Fx36),
> +    // fake an endTime
> +    if (!results.endTime) {

It'd probably be better if the lack of an `endTime` was handled in front.js.

::: browser/devtools/performance/modules/front.js
@@ +259,5 @@
>      filterSamples(profilerData, this._profilingStartTime);
>      offsetSampleTimes(profilerData, this._profilingStartTime);
>  
> +    let endTime = this._endTime = yield this._request("timeline", "stop");
> +    

Nit: whitespace.

::: browser/devtools/performance/test/browser_perf-details-waterfall-render-01.js
@@ +8,5 @@
> +  let { panel } = yield initPerformance(SIMPLE_URL);
> +  let { EVENTS, WaterfallView } = panel.panelWin;
> +
> +  yield startRecording(panel);
> +  yield idleWait(500);

Is this idleWait really necessary in this test?

::: browser/devtools/performance/views/details.js
@@ +37,5 @@
> +   * @params {String} selectedView
> +   *         Name of the view to be shown.
> +   */
> +  selectView: function (selectedView) {
> +    for (let button of $$("toolbarbutton[data-view]", $("#details-toolbar"))) {

Nit: could use a <deck> instead of manually showing and hiding nodes.
Comment on attachment 8531440
1077458-waterfall-view-perf.patch

Review of attachment 8531440:
-----------------------------------------------------------------

::: browser/devtools/performance/controller.js
@@ +155,5 @@
>    stopRecording: Task.async(function *() {
>      let results = yield gFront.stopRecording();
> +    // If `endTime` is not yielded from timeline actor (< Fx36),
> +    // fake an endTime
> +    if (!results.endTime) {

As its loaded via the loader and not in the window context, `performance` does not exist in the front.js module

::: browser/devtools/performance/views/details.js
@@ +37,5 @@
> +   * @params {String} selectedView
> +   *         Name of the view to be shown.
> +   */
> +  selectView: function (selectedView) {
> +    for (let button of $$("toolbarbutton[data-view]", $("#details-toolbar"))) {

Is this an event we can hook in so we don't waste any cycles for views not shown?
(In reply to Jordan Santell [:jsantell] [@jsantell] from comment #14)
> Comment on attachment 8531440
> 1077458-waterfall-view-perf.patch
> 
> Review of attachment 8531440:
> -----------------------------------------------------------------
> 
> ::: browser/devtools/performance/controller.js
> @@ +155,5 @@
> >    stopRecording: Task.async(function *() {
> >      let results = yield gFront.stopRecording();
> > +    // If `endTime` is not yielded from timeline actor (< Fx36),
> > +    // fake an endTime
> > +    if (!results.endTime) {
> 
> As its loaded via the loader and not in the window context, `performance`
> does not exist in the front.js module
> 

Sad. I'm sure there's a way to access it somehow, but let's not worry about it too much for now. How about filing a followup though, for good luck.

> ::: browser/devtools/performance/views/details.js
> @@ +37,5 @@
> > +   * @params {String} selectedView
> > +   *         Name of the view to be shown.
> > +   */
> > +  selectView: function (selectedView) {
> > +    for (let button of $$("toolbarbutton[data-view]", $("#details-toolbar"))) {
> 
> Is this an event we can hook in so we don't waste any cycles for views not
> shown?

A deck is a xul element.
Created attachment 8531779
1077458-waterfall-view-perf.patch

 https://treeherder.mozilla.org/ui/#/jobs?repo=try&revision=0f18d6cba4e6
https://hg.mozilla.org/integration/fx-team/rev/32853a227d72
https://hg.mozilla.org/mozilla-central/rev/32853a227d72
Seems like this might be worth noting once it ships.
I'd move the relnote request on a more global bug : bug 1075567.


Add waterfall view to Details view in new performance tool



Bug 1077458 - Implement marker's waterfall view in new performance tool, with details view toggling between  waterfall and call tree views. r=vp 