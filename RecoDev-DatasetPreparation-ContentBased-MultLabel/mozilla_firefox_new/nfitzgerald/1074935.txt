I got a huge speed up today for replacing a simple regexp with a charAt. A potential theory for why it was such a boon is that the regexp was flattening the js string. It could also be that charAt was inlined while the regexp wasn't, but that's besides the point.

The point is that flattening can be expensive for large ropes, and we have no insight from devtools into when it does or doesn't happen. It seems like the timeline is the right place to add this.

I got a huge speed up today for replacing a simple regexp with a charAt. A potential theory for why it was such a boon is that the regexp was flattening the js string. It could also be that charAt was inlined while the regexp wasn't, but that's besides the point.

The point is that flattening can be expensive for large ropes, and we have no insight from devtools into when it does or doesn't happen. It seems like the timeline is the right place to add this.
I think it would make sense to gate based on string length, and only add markers for large strings.
Another idea is: when you click on any marker in the timeline, it'd be nice to have more information about it, like the time spent, the associated callstack, etc. If we know some specific actions (like string flattening) happened during a script execution marker in the timeline, we could mention it next to it, in the sidebar or something.
Moving into the Profiler component. Filter on GUTHRIE'S WAVY CAKES.
After talking with Shu and/or Kannan a little while back, I believe that we decide that pushing a psuedostack frame made more sense.
*** Bug 1134249 has been marked as a duplicate of this bug. ***
Anyone know where in platform code this occurs?
(In reply to Jordan Santell [:jsantell] [@jsantell] from comment #6)
> Anyone know where in platform code this occurs?

https://dxr.mozilla.org/mozilla-central/source/js/src/vm/String.h#1252
(In reply to Nick Fitzgerald [:fitzgen][:nf] from comment #7)
> (In reply to Jordan Santell [:jsantell] [@jsantell] from comment #6)
> > Anyone know where in platform code this occurs?
> 
> https://dxr.mozilla.org/mozilla-central/source/js/src/vm/String.h#1252

(I'd use JSRope::flatten; ensureLinear also calls JSRope::flatten and is a lot more common than ensureFlat.)
(In reply to Jan de Mooij [:jandem] from comment #8)
> (In reply to Nick Fitzgerald [:fitzgen][:nf] from comment #7)
> > (In reply to Jordan Santell [:jsantell] [@jsantell] from comment #6)
> > > Anyone know where in platform code this occurs?
> > 
> > https://dxr.mozilla.org/mozilla-central/source/js/src/vm/String.h#1252
> 
> (I'd use JSRope::flatten; ensureLinear also calls JSRope::flatten and is a
> lot more common than ensureFlat.)

Ah, thanks!
Created attachment 8660287
Add SPS psuedo frames for JSRope flattening
https://hg.mozilla.org/integration/mozilla-inbound/rev/b4621131ea01
Backed out for Werror bustage along with bug 1204169:

https://hg.mozilla.org/integration/mozilla-inbound/rev/60adc85f21cb
https://treeherder.mozilla.org/logviewer.html#?job_id=14289237&repo=mozilla-inbound
Try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=9edfc8bd9561
https://hg.mozilla.org/integration/mozilla-inbound/rev/cce8e013f935
https://hg.mozilla.org/mozilla-central/rev/cce8e013f935


Push psuedo-stack frames for js rope string flattening



Bug 1074935 - Add SPS pseudo frames for JSRope flattening; r=jandem 

Backed out 2 changesets (bug 1204169, bug 1074935) for Werror bustage CLOSED TREE

Backed out changeset b4621131ea01 (bug 1074935)

Bug 1074935 - Add SPS pseudo frames for JSRope flattening; r=jandem 