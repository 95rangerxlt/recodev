Follow up of bug 962541 discussions.
So far, we are caching app actors in a map in the app actor.
But on client disconnection, we loose this map and let these actor instances alive in the child process. On next connection, we instanciate new set of actors.

We should clean these actors on client disconnection.

Follow up of bug 962541 discussions.
So far, we are caching app actors in a map in the app actor.
But on client disconnection, we loose this map and let these actor instances alive in the child process. On next connection, we instanciate new set of actors.

We should clean these actors on client disconnection.
Created attachment 8388647
patch
Created attachment 8389073
disconnect
Created attachment 8396605
patch, with test

I even have a test! That doesn't really cover the important part,
but it allows to at least test multiple connection to the same iframe.
I imagine that would cover bug 962541.
If you have any idea on how to somehow ensure that Console actor's disconnect method
is called, I'm all up for it!
Comment on attachment 8396605
patch, with test

Review of attachment 8396605:
-----------------------------------------------------------------

Looks good overall!  Not sure I helped with the test, but maybe there is a way to check for disconnect...

::: toolkit/devtools/server/child.js
@@ +45,5 @@
> +  let onDisconnect = DevToolsUtils.makeInfallible(function (msg) {
> +    removeMessageListener("debug:disconnect", onDisconnect);
> +
> +    // Call DebuggerServerConnection.onClosed to destroy all child actors
> +    conn.onClosed();

Use |conn.close()|, which eventually calls onClosed via the transport.

Probably good to null |conn| after this?

::: toolkit/devtools/server/main.js
@@ +56,5 @@
>      throw e;
>    }
>  }
>  
> +let events = require("sdk/event/core");

Do you need |this.events = events;| on b2g?

@@ +602,5 @@
> +        mm.sendAsyncMessage("debug:disconnect");
> +      }
> +      Services.obs.removeObserver(onMessageManagerDisconnect, "message-manager-disconnect");
> +    };
> +    events.once(aConnection, "closed", onConnectionClosed);

Seems like you could just inline the callback, instead of saving to a variable first, but either way really.

::: toolkit/devtools/server/tests/mochitest/test_connectToChild.html
@@ +1,4 @@
> +<SDOCTYPv HTM.>
> +<html>
> +<!--
> +Bug 895360 - [app manager] Device meta data actor

Update this.

@@ +51,5 @@
> +    ok(actor.consoleActor, "Got a webconsole actor for the first connection");
> +    let firstConsoleActor = actor.consoleActor;
> +    client.close(function () {
> +      //TODO: ensure that tab actors are destroyed.
> +      // i.e. their disconnect method is called

Hmm, for the test can you wrap the DebuggerServer's cleanup / disconnect path before it runs?

> let _cleanup = DebuggerServer.cleanup;
> DebuggerServer.cleanup = function() {
>   this.reallyCleanNow = true;
>   _cleanup();
> };

Not sure if it will affect the server used by the iframe though...

I guess even if you do that you'd need to get a message up to the parent to say it actually happened.
Created attachment 8397136
patch, with more concrete test

Ok, here is a more decent test for tab actor cleanup.
What do you think, is it hacky enough without being too much?!
Comment on attachment 8397136
patch, with more concrete test

Review of attachment 8397136:
-----------------------------------------------------------------

Seems like a good way to approach the test, given the tools we have!

::: toolkit/devtools/server/main.js
@@ +56,5 @@
>      throw e;
>    }
>  }
>  
> +let events = require("sdk/event/core");

Again, be sure to test this on b2g...  (Maybe you did already!)

::: toolkit/devtools/server/tests/mochitest/test_connectToChild.html
@@ +64,5 @@
> +    };
> +    DebuggerServer.addTabActor(TestActor, "testActor");
> +  }, false);
> +
> +  // Instanciate a miniman server

Nit: miniman -> minimal
> > +  // Instanciate a miniman server
> 
> Nit: miniman -> minimal

Also: Instanciate -> Instantiate!
Created attachment 8397800
patch, with less typos

https://tbpl.mozilla.org/?tree=Try&rev=032b1eb9d65d
(In reply to J. Ryan Stinnett [:jryans] from comment #6)
> Comment on attachment 8397136
> patch, with more concrete test
> 
> Review of attachment 8397136:
> -----------------------------------------------------------------
> 
> Seems like a good way to approach the test, given the tools we have!
> 
> ::: toolkit/devtools/server/main.js
> @@ +56,5 @@
> >      throw e;
> >    }
> >  }
> >  
> > +let events = require("sdk/event/core");
> 
> Again, be sure to test this on b2g...  (Maybe you did already!)
> 

I forgot to comment about that... We have to bind symbols to `this` on b2g only if the symbols are used by an actor. Here events is only meant to be used in main.js. (Some actors are using events, but define it explicitely in their header)
https://hg.mozilla.org/integration/fx-team/rev/0b5eeb29646b
https://hg.mozilla.org/mozilla-central/rev/0b5eeb29646b


App actor should be cleaned up on disconnection



Bug 966991 - Ensure cleaning up child processes tab actors when disconnecting. r=jryans 