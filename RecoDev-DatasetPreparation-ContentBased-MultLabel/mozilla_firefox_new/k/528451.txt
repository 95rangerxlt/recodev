sessionstore-browser-state-set fires after setBrowserState finishes, but at that point windows are still closing, so the browser state is only partially set.
PrivateBrowsing will wait for this notification before starting, and some test do the same, so i think it should not lie, and fire only when the state has been really set (all windows that should be open are open, all windows that should be closed are closed).

sessionstore-browser-state-set fires after setBrowserState finishes, but at that point windows are still closing, so the browser state is only partially set.
PrivateBrowsing will wait for this notification before starting, and some test do the same, so i think it should not lie, and fire only when the state has been really set (all windows that should be open are open, all windows that should be closed are closed).
Created attachment 412178
patch v1.0
Comment on attachment 412178
patch v1.0

paul is busy with blockers, removing request to him.
(In reply to comment #0)
> (all windows that should be open are open, all windows that
> should be closed are closed).

Isn't that already the case (with the exception of the window mediator still keeping track of closed windows for a few further cycles)?

And in what cases is the difference between "some windows still closing" and "all closing windows gone" relevant? Could this affect Private Browsing or tests not using the window mediator?
(In reply to comment #3)
> And in what cases is the difference between "some windows still closing" and
> "all closing windows gone" relevant? Could this affect Private Browsing or
> tests not using the window mediator?

If there are some windows that are still closing, and the sessionstore component keeps track of those windows, when we switch the private browsing mode, the state of those windows will be saved, and they will be restored later when exiting that mode.  The effect of this from a user's perspective is that they see a window that they had closed come back after exiting the private browsing mode, which is definitely not the behavior that we want.

Please note the correlation between when sessionstore-browser-state-set is fired and whether sessionstore keeps track of windows for which the closed property is true (bug 528440).
This bug can affect the fix of bug 526194, which is a 3.6 blocker, so I think this should also block the release of Firefox 3.6.
(In reply to comment #4)
> If there are some windows that are still closing, and the sessionstore
> component keeps track of those windows, when we switch the private browsing
> mode, the state of those windows will be saved, and they will be restored later
> when exiting that mode.  The effect of this from a user's perspective is that
> they see a window that they had closed come back after exiting the private
> browsing mode, which is definitely not the behavior that we want.

I don't think we're talking about seconds here, so I don't think a user can close a window and enter private browsing while that window is still in the intermediate non-destroyed state.
(In reply to comment #6)
> (In reply to comment #4)
> > If there are some windows that are still closing, and the sessionstore
> > component keeps track of those windows, when we switch the private browsing
> > mode, the state of those windows will be saved, and they will be restored later
> > when exiting that mode.  The effect of this from a user's perspective is that
> > they see a window that they had closed come back after exiting the private
> > browsing mode, which is definitely not the behavior that we want.
> 
> I don't think we're talking about seconds here, so I don't think a user can
> close a window and enter private browsing while that window is still in the
> intermediate non-destroyed state.

Oh, they can.  This is almost what bug 526194 is about...
Can you please CC me there?
(In reply to comment #8)
> Can you please CC me there?

Of course.  Sorry I forgot that you can't see that bug...
(In reply to comment #4)
> Please note the correlation between when sessionstore-browser-state-set is
> fired and whether sessionstore keeps track of windows for which the closed
> property is true (bug 528440).

So with bug 528440 fixed, this issue becomes moot, then? Else, please also CC me on bug 526194.
(In reply to comment #10)
> (In reply to comment #4)
> > Please note the correlation between when sessionstore-browser-state-set is
> > fired and whether sessionstore keeps track of windows for which the closed
> > property is true (bug 528440).
> 
> So with bug 528440 fixed, this issue becomes moot, then? Else, please also CC
> me on bug 526194.

I guess not, but I'll CC you on that bug anyway.
Sigh, the ever growing blocker tree from bug 526194 ...
blockers without owners are insane, taking for now.
Comment on attachment 412178
patch v1.0

r+=me with one nit fixed: Please compare array lengths against numbers instead of evaluating them as boolean expressions (i.e. "!a.length" should be "a.length == 0" and "a.length" should be "a.length > 0").
Can we get this in and closed off?
http://hg.mozilla.org/mozilla-central/rev/ec6c58083214
Comment on attachment 412178
patch v1.0

>+    var self = this;
>+    // close all other browser windows
>+    this._forEachBrowserWindow(function(aWindow) {
>+      if (aWindow != window) {
>+        self._closingWindows.push(aWindow);
>+        aWindow.close();
>+      }
>+    });

You can use 'this' inside of the callback.
http://hg.mozilla.org/releases/mozilla-1.9.2/rev/982a57b405a9


sessionstore-browser-state-restored is not reliable regarding closed windows



Bug 528451 - sessionstore-browser-state-set is not reliable regarding closed windows, r=zeniko 