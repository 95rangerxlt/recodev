STR:

1. createWidget(...)
2. destroyWidget(...) // This will keep the placement in case the widget returns, a la currentset's current behaviour
3. removeWidgetFromArea(...)

AR:
exception and/or widget stays in the area.

ER:
Widget is removed from the area.


Note further that after step 2, getPlacementOfWidget still returns a placement, even though the widget itself doesn't exist. I'm not convinced we should expose that... if the widget exists but is in the palette, we return null, which is a strange opposition (I'd expect it to be the other way around, essentially). Blair, any idea what we should be doing here?

STR:

1. createWidget(...)
2. destroyWidget(...) // This will keep the placement in case the widget returns, a la currentset's current behaviour
3. removeWidgetFromArea(...)

AR:
exception and/or widget stays in the area.

ER:
Widget is removed from the area.


Note further that after step 2, getPlacementOfWidget still returns a placement, even though the widget itself doesn't exist. I'm not convinced we should expose that... if the widget exists but is in the palette, we return null, which is a strange opposition (I'd expect it to be the other way around, essentially). Blair, any idea what we should be doing here?
Created attachment 774646
Patch
Comment on attachment 774646
Patch

Review of attachment 774646:
-----------------------------------------------------------------

Makes sense to me. Thanks Gijs!
Pushed: https://hg.mozilla.org/projects/ux/rev/3cbfe0d6e5ee

Blair, this bug went a bit quickly, but when it's Monday again where you are, I'd still like to hear regarding comment 0, and I/you can file a separate bug for that issue if necessary. :-)
(In reply to :Gijs Kruitbosch from comment #0)
> Note further that after step 2, getPlacementOfWidget still returns a
> placement, even though the widget itself doesn't exist. I'm not convinced we
> should expose that

Agreed - seems like it should just return null. The saved positions of non-existent widgets should be invisible from the API (at least by default - dunno if we'll want a separate API for that in the future).
Comment on attachment 774646
Patch

Review of attachment 774646:
-----------------------------------------------------------------

::: browser/components/customizableui/src/CustomizableUI.jsm
@@ +1714,5 @@
>        let [window,] = [...gBuildWindows][0];
>        let [, node] = this.getWidgetNode(aWidgetId, window);
> +      // If we don't have a node, we assume it's removable. This can happen because
> +      // getWidgetProvider returns PROVIDER_XUL by default, but this will also happen
> +      // for API-provided widgets which have been destroyed.

Hmm, getWidgetProvider() could be made more accurate by having it look at gSeenWidgets, which will only contain PROVIDER_API widgets. But I'm not sure if that would actually affect the final return value of isWidgetRemovable(), so that may be better as an unrelated bug.
(In reply to Blair McBride [:Unfocused] from comment #4)
> Agreed - seems like it should just return null. The saved positions of
> non-existent widgets should be invisible from the API (at least by default -
> dunno if we'll want a separate API for that in the future).

Bug 893609.

(In reply to Blair McBride [:Unfocused] from comment #5)
> Hmm, getWidgetProvider() could be made more accurate by having it look at
> gSeenWidgets, which will only contain PROVIDER_API widgets. But I'm not sure
> if that would actually affect the final return value of isWidgetRemovable(),
> so that may be better as an unrelated bug.

Bug 893610.
https://hg.mozilla.org/mozilla-central/rev/3cbfe0d6e5ee


isWidgetRemovable and removeWidgetFromArea should work for widgets that have been destroyed



Bug 892955 - isWidgetRemovable and removeWidgetFromArea should work for widgets that have been destroyed, r=mconley 