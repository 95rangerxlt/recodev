Fixes for 337153, 337830, 339484, 340247, 340312, and bring us closer to the solution described in beltzner's post to d-a-f.

Fixes for 337153, 337830, 339484, 340247, 340312, and bring us closer to the solution described in beltzner's post to d-a-f.
Created attachment 224939
patch
Comment on attachment 224939
patch

>Index: browser/app/profile/firefox.js
>-pref("browser.contentHandlers.types.0.title", "Netvibes");
>-pref("browser.contentHandlers.types.0.uri", "http://www.netvibes.com/subscribe.php?url=%s");
>+pref("browser.contentHandlers.types.0.title", "Bloglines");
>+pref("browser.contentHandlers.types.0.uri", "http://www.bloglines.com/login?r=/sub/%s");

Trunk only changes to match the branch defaults. 

>Index: browser/components/feeds/content/addFeedReader.js

Script for the new "Add feed reader?" prompt that is attached to the registerContentHandler method implementation. 

>Index: browser/components/feeds/content/addFeedReader.xul

XUL for the above

>Index: browser/components/feeds/content/options.js

I changed the UI in the options dialog to have a radio group and a listbox, with the radio group controlling live bookmarks vs. reader, and the readers (client apps and web services) being in the listbox. This meant restructuring the XUL a bit, and the code changes in this file mostly reflect the transition from radio group with filefield/menulist to radio group with listbox. 

>Index: browser/components/feeds/content/options.xul

And the XUL for the above. 

>Index: browser/components/feeds/content/subscribe.js

>+      var entryContainer = document.createElementNS(HTML_NS, "div");
>+      entryContainer.className = "entry";
..
>-      feedContent.appendChild(title);
>+      entryContainer.appendChild(title);

Someone requested every post in the preview be contained by a div with class "entry" so that they could style individual posts. This achieves that. 

>         var wccr = 
>             Cc["@mozilla.org/web-content-handler-registrar;1"].
>-            getService(Ci.nsIWebContentConverterRegistrar);
>+            getService(Ci.nsIWebContentConverterService);

I changed the name of the registrar to service, since the service does many things aside from registration. The registration-only interface will live in mozilla/dom instead and is part of another patch not required by this one.

>+      var button = document.getElementById("feedSubscribeLink");
>+      button.focus();

>+      var button = document.getElementById("feedChooseInitialReader");
>+      button.focus();

Two different button ids, two different calls to focus depending on the circumstance. 

>   changeOptions: function SH_changeOptions() {
>-    openDialog("chrome://browser/content/feeds/options.xul", "", "modal,centerscreen");
>+    var paramBlock = 
>+        Cc["@mozilla.org/embedcomp/dialogparam;1"].
>+        createInstance(Ci.nsIDialogParamBlock);
>+    paramBlock.SetInt(0, 0);
>+    openDialog("chrome://browser/content/feeds/options.xul", "", 
>+               "modal,centerscreen", "subscribe", paramBlock);
>+    if (paramBlock.GetInt(0) == 1)
>+      this.subscribe();

Auto-subscribe the user after they choose a reader using the options dialog, based on findings from usability tests. 

>+    try {
>+      var handler = prefs.getCharPref(PREF_SELECTED_HANDLER);
>+    }
>+    catch (e) {
>+      // Something is bogus in our state. Prompt the user to fix it.
>+      this.changeOptions();
>+      return; 
>+    }

Bullet proofing

>Index: browser/components/feeds/content/subscribe.xhtml
>-          <a id="feedSubscribeLink" href="javascript:SubscribeHandler.subscribe();">
>-            &feedSubscribeNow;</a>
>+          <button id="feedSubscribeLink" class="feedSubscribeLink" 
>+                  onclick="SubscribeHandler.subscribe();">
>+            <span class="feedSubscribeLinkBox">&feedSubscribeNow;</span>
>+          </button>

Change important links to buttons based on findings from usability studies.

>Index: browser/components/feeds/public/nsIWebContentConverterRegistrar.idl

> [scriptable, uuid(632b16a8-5c6b-4dc5-a8db-01771af7a79d)]
>-interface nsIWebContentConverterRegistrar : nsISupports
>+interface nsIWebContentConverterService : nsISupports

Name change, see above.

>   /**
>-   * Gets the URI Spec for the "handler" of a particular type, with the 
>-   * specified uri embedded.
>-   * @param   uri
>-   *          The uri to be embedded in the handler URI
>-   * @param   contentType
>-   *          The content type of the document at |uri|
>-   * @returns A uri of the handler for the |contentType|, with the |
>-   */
>-  AString getHandlerURI(in AString uri, in AString contentType);
>-
>-  /**

Unused, is a member of ServiceInfo interface.

>+  /**
>+   * Resets the list of available content handlers to the default set from
>+   * the distribution.
>+   * @param   contentType
>+   *          The content type to reset handlers for
>+   */
>+  void resetHandlersForType(in AString contentType);

Resets all of the handlers to default for a particular content type. Will eventually be used to power a reset button.

>Index: browser/components/feeds/src/FeedConverter.js
>-              getService(Ci.nsIWebContentConverterRegistrar);
>+              getService(Ci.nsIWebContentConverterService);

Interface name changing

>Index: browser/components/feeds/src/WebContentConverter.js

>-  _confirmAdd: function WCCR__confirmAdd(title, uri) {
>-    var ps =
>-        Cc["@mozilla.org/embedcomp/prompt-service;1"].
>-        getService(Ci.nsIPromptService);
>-    return ps.confirm(null, "Add Handler", 
>-                      "Add web handler for " + title + " to " + uri + "?",
>-                      "Yes", "No", null, null);

We are now far more sophisticated...

>+  _wrapString: function WCCR__wrapString(string) {
>+    var supportsString = 
>+        Cc["@mozilla.org/supports-string;1"].
<snip>

Show a dialog box to confirm the user's adding a web based feed reader.

>+  _checkForDuplicateContentType: 
>+  function WCCR__checkForDuplicateContentType(contentType, uri, title) {
>+    contentType = this._resolveContentType(contentType);
>+    if (this._typeIsRegistered(contentType, uri)) {
>+      // Show a special dialog for the feed case (XXXben - generalize at some 
>+      // point to allow other types to register specialized prompts).
>+      this._confirmAddHandler(contentType, title, uri);
>+      return false;
>+    }
>+    return true;

A variant that shows a message saying the specified service URI is already registered, giving the option to make it the default handler for that type. 

>   registerContentHandler: 
>   function WCCR_registerContentHandler(contentType, uri, title) {
>     LOG("registerContentHandler(" + contentType + "," + uri + "," + title + ")");
>+    
>+    // XXXben - for Firefox 2 we only support feed types
>+    contentType = this._resolveContentType(contentType);
>+    if (contentType != TYPE_MAYBE_FEED)
>+      return;    

Only handle feeds for Firefox 2.

>+    // Reset the auto handler so that the user is asked again the next time
>+    // they load content of this type.
>+    if (this.getAutoHandler(contentType)) 
>+      this.setAutoHandler(contentType, null);

We want to give the user a chance to see the new handler that they've installed.

>   getInterfaces: function WCCR_getInterfaces(countRef) {
>-    countRef.value = 2;
>-    return [Ci.nsIWebContentConverterRegistrar, Ci.nsIClassInfo];
>+    var interfaces = 
>+        [Ci.nsIWebContentConverterService, Ci.nsIWebContentHandlerRegistrar,
>+         Ci.nsIObserver, Ci.nsIClassInfo, Ci.nsIFactory, Ci.nsISupports];
>+    countRef.value = interfaces.length;
>+    return interfaces;

Bullet proofing

+ lots of strings and style rules for the above.
>Index: browser/components/feeds/content/addFeedReader.js

>+      imageBox.style.backgroundImage = "url('moz-icon://goat." + ext + "?size=32');";

You know we're going to wind up shipping something with goats in it.
Comment on attachment 224939
patch

I just sat with ben and got a massive brain dump about this patch, the rss feeder / mime type handling code, and a demo.

while doing all that, he found some things he wants to fix in this patch so clearing the r=request.
Seth and I looked at the code together in my office. Here's what we found:

in addFeedReader.js/WCCR.js:
- even if the reader is already added, since there is a checkbox, we shouldn't hide the cancel button to allow the user to back out.
- explicitly initialize the param block for the second parameter (whether or not the handler should be made default) rather than leaving it undefined. 
- in _confirmAddHandler, before blindly reading the value of the "make default" checkbox and setting a handler as default, check that the user actually clicked "Add Handler"!
- remove the useless _confirmAdd wrapper
- combine the two while loops in resetHandlersForType (O(N+M) -> O(N))
- comment out the nsIWebContentHandlerRegistrar QI until 340179 lands
- remove unused dtd entities from options.dtd
- get rid of unnecessary logging
- use constants for param block indices instead of numbers, makes code self-documenting

We also noticed an updating glitch after selecting a app reader but I was not able to reproduce. 
Created attachment 224954
patch, fixing issues
Created attachment 224955
windows/linux 16x16 feed icon
Created attachment 224957
mac 16x16 feed icon
Just a question; why don't we use the icons present on feedicons.com?
A lot of websites are using it nowadays, Opera does too.
fixed-on-trunk, fixed-1.8-branch


lots of rss bug fixes



340897 - lots of rss bug fixes r=sspitzer 