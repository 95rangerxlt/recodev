Once you've saved an original source to disk, we infer the location of its generated CSS file on disk. Right now we get this wrong if the path to the file and the url to the file have the same directory name.

The steps to reproduce are a little involved here, but going through the use case:

css uri:  http://harthur.github.io/wwcode/css/index.css
orig uri: http://harthur.github.io/wwcode/sass/index.scss
orig file: /Users/test/wwcode/sass/index.scss

Expected:
css file: /Users/test/wwcode/css/index.css

Actual:
css file: /Users/test/css/index.css

Once you've saved an original source to disk, we infer the location of its generated CSS file on disk. Right now we get this wrong if the path to the file and the url to the file have the same directory name.

The steps to reproduce are a little involved here, but going through the use case:

css uri:  http://harthur.github.io/wwcode/css/index.css
orig uri: http://harthur.github.io/wwcode/sass/index.scss
orig file: /Users/test/wwcode/sass/index.scss

Expected:
css file: /Users/test/wwcode/css/index.css

Actual:
css file: /Users/test/css/index.css
Created attachment 8377331
linked-path-bug.patch

Here's the fix.
Comment on attachment 8377331
linked-path-bug.patch

Review of attachment 8377331:
-----------------------------------------------------------------

r=me with those minor changes done.

::: browser/devtools/styleeditor/StyleSheetEditor.jsm
@@ +648,1 @@
>   * would yeild ["Users", "moz", "proj"]

nit: s/yeild/yield

@@ +660,5 @@
> +  for (let i = 2; i <= branch.length; i++) {
> +    // work backwards until we find a differing directory name
> +    if (path[path.length - i] != branch[branch.length - i]) {
> +      return path.slice(0, path.length - i + 1);
> +    };

nit: there shouldn't be a ; after the closing if brace.

@@ +666,3 @@
>  
> +  // if we don't find a differing directory, just chop off the branch
> +  return path.slice(0, path.length - branch.length);

Wouldn't something simpler like this work?

return file.substring(0, file.lastIndexOf(branch)).split("/");

assuming that file and branch are strings with "/" being the separator.
I don't know much about OS.Path and stuff, but the backward loop just confused me a little bit and I thought that there may be ways to simplify (and shorten) that function.

@@ +673,2 @@
>   * "http://localhost/built/a.scss" and "http://localhost/src/a.css"
> + * would yeild ["built", "a.scss"] and ["src", "a.css"]

nit: s/yeild/yield

@@ +679,3 @@
>   *        uri to compare against to get a shared root
> + * @return {object}
> + *         object with properties 'gen' and 'orig' array of path parts for branch

The object returns actual contains the properties branch and origBranch apparently, not gen and orig.

@@ +688,5 @@
>      if (uri[i] != origUri[i]) {
> +      return {
> +        branch: uri.slice(i),
> +        origBranch: origUri.slice(i)
> +      };

I think you could get rid of this second return statement (and hence make the function simpler) if you just defined `let i = 0;` before the for loop and replaced the return by a `break;`.

::: browser/devtools/styleeditor/test/browser_styleeditor_sourcemap_watching.js
@@ +33,2 @@
>  
>    Task.spawn(function() {

nit: we should now use the function*(){...} generator function
Thanks Patrick

(In reply to Patrick Brosset [:pbrosset] [:patrick] from comment #2)
> Wouldn't something simpler like this work?
> 
> return file.substring(0, file.lastIndexOf(branch)).split("/");
> 
> assuming that file and branch are strings with "/" being the separator.
> I don't know much about OS.Path and stuff, but the backward loop just
> confused me a little bit and I thought that there may be ways to simplify
> (and shorten) that function.

Yeah, not all OSes use "/" as a separator like Windows, so we need to use OS.path.split and join.

> 
> @@ +688,5 @@
> >      if (uri[i] != origUri[i]) {
> > +      return {
> > +        branch: uri.slice(i),
> > +        origBranch: origUri.slice(i)
> > +      };
> 
> I think you could get rid of this second return statement (and hence make
> the function simpler) if you just defined `let i = 0;` before the for loop
> and replaced the return by a `break;`.

I don't think this will work. At the end I want to return the full uri and origUri, and if I used i it would return uri.slice(uri.length - 1).
https://hg.mozilla.org/integration/fx-team/rev/74e8b816d0da
https://hg.mozilla.org/mozilla-central/rev/74e8b816d0da


Linked CSS file path is wrong when server directory is same as file directory



Bug 973741 - Linked CSS file path is wrong when server directory is same as file directory; r=pbrosset 