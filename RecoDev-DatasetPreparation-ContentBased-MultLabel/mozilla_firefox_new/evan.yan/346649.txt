it can be reproduced when call print preview with orca running.
not every time but very offen. websites with rich content, like www.yahoo.com, help reproducing.

the core stack trace:
-----------------  lwp# 1 / thread# 1  --------------------
 fef45797 _lwp_kill (1, b) + 7
 feeff20f raise    (b) + 22
 fedf3386 __1cNnsProfileLockSFatalSignalHandler6Fi_v_ (b, 0, 80450d4) + 166
 fef44b4f __sighndlr (b, 0, 80450d4, fedf3220) + f
 fef3a695 call_user_handler (b, 0, 80450d4) + 28d
 fef3a81d sigacthandler (b, 0, 80450d4) + bc
 --- called from signal handler with signal 11 (SIGSEGV) ---
 f8337d73 __1cVnsHyperTextAccessibleNGetPosAndText6Mri1pnSnsAString_internal_ppnInsIFrame__5_ (8fb7de0, 8045480, 8045484, 8045538, 0) + 393
 f8337f6b __1cVnsHyperTextAccessibleHGetText6MiirnSnsAString_internal__I_ (8fb7de0, 0, ffffffff, 8045538) + 5b
 f835e625 getTextCB (92422c8, 0, ffffffff) + 1a5
 fc13e45a atk_text_get_text (92422c8, 0, ffffffff) + 56
 f609ed19 impl_getText (967b564, 0, ffffffff, 804587c) + 31
 f6097d79 _ORBIT_skel_small_Accessibility_Text_getText (967b564, 8045710, 8045700, 8045730, 804587c, f609ece8) + 2d
 f767eb79 ORBit_POAObject_invoke (9114db8, 8045710, 8045700, 8045730, 80457b8, 804587c) + 3d
 f76830a8 ORBit_OAObject_invoke (9114db8, 8045710, 8045700, 8045730, 80457b8, 804587c) + 34
 f767078d ORBit_small_invoke_adaptor (9114db8, 93e0070, f60b80d0, 80457b8, 804587c) + 2b5
 f767efc0 ORBit_POAObject_handle_request (9114db8, 914d4d4, 0, 0, 0, 93e0070) + 334
 f767f3d0 ORBit_POAObject_invoke_incoming_request (9114db8, 93e0070, 804587c) + 54
 f767f865 ORBit_POA_handle_request (845a2f0, 93e0070, 93e0088) + 2f5
 f7682e70 ORBit_handle_request (808b6b8, 93e0070) + 4c
 f766d97d giop_connection_handle_input (8bd4588) + 2e5
 f768922e link_connection_io_handler (0, 1, 8bd4588) + 56
 f768ae2e link_source_dispatch (8bdd7e8, f76891d8, 8bd4588) + 42
 fe589690 g_main_dispatch (808bb00) + 1c8
 fe58a779 g_main_context_dispatch (808bb00) + 85
 fe58ab99 g_main_context_iterate (808bb00, 1, 1, 8413cb8) + 3d1
 fe58adf4 g_main_context_iteration (808bb00, 1) + 88
 f76875fa link_main_iteration (1) + 22
 f766ce5b giop_recv_buffer_get (8045b38) + 5f
 f76703fa ORBit_small_invoke_stub (8b2ddd8, f60ba928, 0, 8045c3c, 0, f60d4908) + 13a
 f767029f ORBit_small_invoke_stub_n (8b2ddd8, f60ba908, 0, 0, 8045c3c, 0) + 43
 f7681d0e ORBit_c_stub_invoke (8b2ddd8, f60ba908, 0, 0, 8045c3c, 0) + 132
 f6086473 Accessibility_EventListener_notifyEvent (8b2ddd8, 8045c64, f60d4908) + 4f
 f60c2fb9 spi_atk_emit_eventv (8f3aa00, 0, 0, 8045cd4, f60c3e58, 8c89da8) + 1ad
 f60c3b60 spi_atk_bridge_signal_listener (8045d5c, 3, 8045dfc, 8cd3740) + 3d0
 fe52e226 signal_emit_unlocked_R (8bde3f8, 16e, 8f3aa00, 0, 8045dfc) + 5ae
 fe52d6d1 g_signal_emit_valist (8f3aa00, 9a, 16e, 80460e0) + 8cd
 fe52dbc9 g_signal_emit_by_name (8f3aa00, f83c2850, ffffffff, 0, 0) + 355
 f834cfed __1cTnsDocAccessibleWrapQFireToolkitEvent6MIpnNnsIAccessible_pv_I_ (8bae1b8, 8004, 8b388d4, 0) + 136d
 f82a49df __1cPnsDocAccessibleSFlushPendingEvents6M_I_ (8bae1b8) + 23f
 f82a4b08 __1cPnsDocAccessibleTFlushEventsCallback6FpnInsITimer_pv_v_ (8b6c740, 8bae214) + 68
 feb84dc3 __1cLnsTimerImplEFire6M_v_ (8b6c740) + 2a3
 feb84ff0 __1cMnsTimerEventDRun6M_I_ (94498d8) + 100
 feb7ad3e __1cInsThreadQProcessNextEvent6Mipi_I_ (8087ee8, 1, 804653c) + 26e
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (8087ee8, 1) + 7f
 faa61726 __1cOnsBaseAppShellDRun6M_I_ (83f9ac0) + 86
 f7ebd88a __1cMnsAppStartupDRun6M_I_ (8438df8) + 9a
 feddb15a XRE_main (2, 8046b4c, 8060da0) + 293a
 080509eb main     (2, 8046b4c, 8046b58) + 3b
 0805091a _start   (2, 8046d0c, 0, 0, 8046d55, fee1c02e) + 7a
-----------------  lwp# 2 / thread# 2  --------------------
 fef45497 __pollsys (f72ab9d4, 1, 0, 0) + 7
 feefc4d7 poll     (f72ab9d4, 1, ffffffff) + 52
 fed3b36b _pr_poll_with_poll (8107114, 1, ffffffff) + 6fb
 fed3b688 PR_Poll  (8107114, 1, ffffffff) + 38
 fb34a8c0 __1cYnsSocketTransportServiceEPoll6MipI_i_ (8106c30, 1, f72abcb0) + d0
 fb34b889 __1cYnsSocketTransportServicePDoPollIteration6Mi_I_ (8106c30, 1) + 339
 fb34b271 __1cYnsSocketTransportServiceSOnProcessNextEvent6MpnRnsIThreadInternal_iI_I_ (8106c30, 81072c8, 1, 1) + 81
 feb7ac07 __1cInsThreadQProcessNextEvent6Mipi_I_ (81072c8, 1, f72abdd4) + 137
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (81072c8, 1) + 7f
 fb34b40f __1cYnsSocketTransportServiceDRun6M_I_ (8106c30) + 13f
 feb7ad3e __1cInsThreadQProcessNextEvent6Mipi_I_ (81072c8, 1, f72abf24) + 26e
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (81072c8, 1) + 7f
 feb79c7f __1cInsThreadKThreadFunc6Fpv_v_ (81072c8) + 14f
 fed3d507 _pt_root (8107458) + 157
 fef4481f _thr_setup (fefb2400) + 51
 fef44a70 _lwp_start (fefb2400, 0, 0, 0, 0, 0)
-----------------  lwp# 3 / thread# 3  --------------------
 fef44aab __lwp_park (8084fec, 8088298, f71a5ce8) + b
 fef3ed93 cond_wait_queue (8084fec, 8088298, f71a5ce8, 0) + 3e
 fef3f13a cond_wait_common (8084fec, 8088298, f71a5ce8) + 1e9
 fef3f369 _cond_timedwait (8084fec, 8088298, f71a5d78) + 4a
 fef3f3fa cond_timedwait (8084fec, 8088298, f71a5d78) + 27
 fef3f439 pthread_cond_timedwait (8084fec, 8088298, f71a5d78) + 21
 fed335da pt_TimedWait (8084fec, 8088298, 1686b8) + da
 fed33bb3 PR_WaitCondVar (8084fe8, 1686b8) + 183
 feb86f4a __1cLTimerThreadDRun6M_I_ (80881d8) + 2ba
 feb7ad3e __1cInsThreadQProcessNextEvent6Mipi_I_ (8128a18, 1, f71a5f24) + 26e
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (8128a18, 1) + 7f
 feb79c7f __1cInsThreadKThreadFunc6Fpv_v_ (8128a18) + 14f
 fed3d507 _pt_root (8128ba8) + 157
 fef4481f _thr_setup (f7090000) + 51
 fef44a70 _lwp_start (f7090000, 0, 0, 0, 0, 0)
-----------------  lwp# 5 / thread# 5  --------------------
 fef44aab __lwp_park (84e4574, 84f1404, f690bc48) + b
 fef3ed93 cond_wait_queue (84e4574, 84f1404, f690bc48, 0) + 3e
 fef3f13a cond_wait_common (84e4574, 84f1404, f690bc48) + 1e9
 fef3f369 _cond_timedwait (84e4574, 84f1404, f690bcd8) + 4a
 fef3f3fa cond_timedwait (84e4574, 84f1404, f690bcd8) + 27
 fef3f439 pthread_cond_timedwait (84e4574, 84f1404, f690bcd8) + 21
 fed335da pt_TimedWait (84e4574, 84f1404, 23c34600) + da
 fed33bb3 PR_WaitCondVar (84e4570, 23c34600) + 183
 fed3447a PR_Wait  (84f1400, 23c34600) + 11a
 feb29197 __1cNnsAutoMonitorEWait6MI_I_ (f690bdec, 23c34600) + 37
 feb81d34 __1cMnsThreadPoolDRun6M_I_ (84f1300) + 2b4
 feb7ad3e __1cInsThreadQProcessNextEvent6Mipi_I_ (85e4050, 1, f690bf24) + 26e
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (85e4050, 1) + 7f
 feb79c7f __1cInsThreadKThreadFunc6Fpv_v_ (85e4050) + 14f
 fed3d507 _pt_root (85e6d30) + 157
 fef4481f _thr_setup (f7090800) + 51
 fef44a70 _lwp_start (f7090800, 0, 0, 0, 0, 0)
-----------------  lwp# 8 / thread# 8  --------------------
 fef44aab __lwp_park (87b15c4, 87a4a10, 0) + b
 fef3ed93 cond_wait_queue (87b15c4, 87a4a10, 0, 0) + 3e
 fef3f294 _cond_wait (87b15c4, 87a4a10) + 69
 fef3f2d4 cond_wait (87b15c4, 87a4a10) + 24
 fef3f310 pthread_cond_wait (87b15c4, 87a4a10) + 1e
 fed33b94 PR_WaitCondVar (87b15c0, ffffffff) + 164
 fb16144b __1cUProcessAsyncMessages6F_v_ (0, f7090400, fec22374, f6acde10, fb163512, 87b0858) + db
 fb163561 __1cQAsyncWriteThreadDRun6M_I_ (87b0858) + 61
 feb7ad3e __1cInsThreadQProcessNextEvent6Mipi_I_ (87a4a70, 1, f6acdf24) + 26e
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (87a4a70, 1) + 7f
 feb79c7f __1cInsThreadKThreadFunc6Fpv_v_ (87a4a70) + 14f
 fed3d507 _pt_root (87a4368) + 157
 fef4481f _thr_setup (f7090400) + 51
 fef44a70 _lwp_start (f7090400, 0, 0, 0, 0, 0)
-----------------  lwp# 13 / thread# 13  --------------------
 fef44aab __lwp_park (8cc094c, 8a3f0e8, f670bdf8) + b
 fef3ed93 cond_wait_queue (8cc094c, 8a3f0e8, f670bdf8, 0) + 3e
 fef3f13a cond_wait_common (8cc094c, 8a3f0e8, f670bdf8) + 1e9
 fef3f369 _cond_timedwait (8cc094c, 8a3f0e8, f670be80) + 4a
 fef3f3fa cond_timedwait (8cc094c, 8a3f0e8, f670be80) + 27
 fef3f439 pthread_cond_timedwait (8cc094c, 8a3f0e8, f670be80) + 21
 fed335da pt_TimedWait (8cc094c, 8a3f0e8, 61a8) + da
 fed33bb3 PR_WaitCondVar (8cc0948, 61a8) + 183
 f7c26e20 __1cLnsSSLThreadDRun6M_v_ (8bdb5c0) + 160
 f7c2515c __1cVnsPSMBackgroundThreadOnsThreadRunner6Fpv_v_ (8bdb5c0) + 3c
 fed3d507 _pt_root (8a3f148) + 157
 fef4481f _thr_setup (f7091000) + 51
 fef44a70 _lwp_start (f7091000, 0, 0, 0, 0, 0)
-----------------  lwp# 14 / thread# 14  --------------------
 fef44aab __lwp_park (8cc096c, 8a3f440, f642de28) + b
 fef3ed93 cond_wait_queue (8cc096c, 8a3f440, f642de28, 0) + 3e
 fef3f13a cond_wait_common (8cc096c, 8a3f440, f642de28) + 1e9
 fef3f369 _cond_timedwait (8cc096c, 8a3f440, f642deb4) + 4a
 fef3f3fa cond_timedwait (8cc096c, 8a3f440, f642deb4) + 27
 fef3f439 pthread_cond_timedwait (8cc096c, 8a3f440, f642deb4) + 21
 fed335da pt_TimedWait (8cc096c, 8a3f440, 61a8) + da
 fed33bb3 PR_WaitCondVar (8cc0968, 61a8) + 183
 f7c28010 __1cYnsCertVerificationThreadDRun6M_v_ (8a3f1e8) + 90
 f7c2515c __1cVnsPSMBackgroundThreadOnsThreadRunner6Fpv_v_ (8a3f1e8) + 3c
 fed3d507 _pt_root (8a3f4a0) + 157
 fef4481f _thr_setup (f7091400) + 51
 fef44a70 _lwp_start (f7091400, 0, 0, 0, 0, 0)
-----------------  lwp# 15 / thread# 15  --------------------
 fef44aab __lwp_park (8ce6be4, 812c36c, 0) + b
 fef3ed93 cond_wait_queue (8ce6be4, 812c36c, 0, 0) + 3e
 fef3f294 _cond_wait (8ce6be4, 812c36c) + 69
 fef3f2d4 cond_wait (8ce6be4, 812c36c) + 24
 fef3f310 pthread_cond_wait (8ce6be4, 812c36c) + 1e
 fed33b94 PR_WaitCondVar (8ce6be0, ffffffff) + 164
 fed3447a PR_Wait  (812c368, ffffffff) + 11a
 feb29197 __1cNnsAutoMonitorEWait6MI_I_ (f61dde00, ffffffff) + 37
 feb7768b __1cMnsEventQdDueueIGetEvent6MippnLnsIRunnable__i_ (8b3b6bc, 1, f61ddee4) + bb
 feb7c2fb __1cInsThreadTnsChainedEventQdDueueIGetEvent6MippnLnsIRunnable__i_ (8b3b6b4, 1, f61ddee4) + 3b
 feb7ac7c __1cInsThreadQProcessNextEvent6Mipi_I_ (8b3b698, 1, f61ddf24) + 1ac
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (8b3b698, 1) + 7f
 feb79c7f __1cInsThreadKThreadFunc6Fpv_v_ (8b3b698) + 14f
 fed3d507 _pt_root (8b045e8) + 157
 fef4481f _thr_setup (f7091800) + 51
 fef44a70 _lwp_start (f7091800, 0, 0, 0, 0, 0)
-----------------  lwp# 16 / thread# 16  --------------------
 fef44aab __lwp_park (80ffe44, 8107d68, f680be28) + b
 fef3ed93 cond_wait_queue (80ffe44, 8107d68, f680be28, 0) + 3e
 fef3f13a cond_wait_common (80ffe44, 8107d68, f680be28) + 1e9
 fef3f369 _cond_timedwait (80ffe44, 8107d68, f680beb4) + 4a
 fef3f3fa cond_timedwait (80ffe44, 8107d68, f680beb4) + 27
 fef3f439 pthread_cond_timedwait (80ffe44, 8107d68, f680beb4) + 21
 fed335da pt_TimedWait (80ffe44, 8107d68, 5b8d80) + da
 fed33bb3 PR_WaitCondVar (80ffe40, 5b8d80) + 183
 fb36963e __1cOnsHostResolverPGetHostToLookup6MppnMnsHostRecord__i_ (8107d00, f680bf90) + 9e
 fb3699fa __1cOnsHostResolverKThreadFunc6Fpv_v_ (8107d00) + 5a
 fed3d507 _pt_root (91437e8) + 157
 fef4481f _thr_setup (f7090c00) + 51
 fef44a70 _lwp_start (f7090c00, 0, 0, 0, 0, 0)

it can be reproduced when call print preview with orca running.
not every time but very offen. websites with rich content, like www.yahoo.com, help reproducing.

the core stack trace:
-----------------  lwp# 1 / thread# 1  --------------------
 fef45797 _lwp_kill (1, b) + 7
 feeff20f raise    (b) + 22
 fedf3386 __1cNnsProfileLockSFatalSignalHandler6Fi_v_ (b, 0, 80450d4) + 166
 fef44b4f __sighndlr (b, 0, 80450d4, fedf3220) + f
 fef3a695 call_user_handler (b, 0, 80450d4) + 28d
 fef3a81d sigacthandler (b, 0, 80450d4) + bc
 --- called from signal handler with signal 11 (SIGSEGV) ---
 f8337d73 __1cVnsHyperTextAccessibleNGetPosAndText6Mri1pnSnsAString_internal_ppnInsIFrame__5_ (8fb7de0, 8045480, 8045484, 8045538, 0) + 393
 f8337f6b __1cVnsHyperTextAccessibleHGetText6MiirnSnsAString_internal__I_ (8fb7de0, 0, ffffffff, 8045538) + 5b
 f835e625 getTextCB (92422c8, 0, ffffffff) + 1a5
 fc13e45a atk_text_get_text (92422c8, 0, ffffffff) + 56
 f609ed19 impl_getText (967b564, 0, ffffffff, 804587c) + 31
 f6097d79 _ORBIT_skel_small_Accessibility_Text_getText (967b564, 8045710, 8045700, 8045730, 804587c, f609ece8) + 2d
 f767eb79 ORBit_POAObject_invoke (9114db8, 8045710, 8045700, 8045730, 80457b8, 804587c) + 3d
 f76830a8 ORBit_OAObject_invoke (9114db8, 8045710, 8045700, 8045730, 80457b8, 804587c) + 34
 f767078d ORBit_small_invoke_adaptor (9114db8, 93e0070, f60b80d0, 80457b8, 804587c) + 2b5
 f767efc0 ORBit_POAObject_handle_request (9114db8, 914d4d4, 0, 0, 0, 93e0070) + 334
 f767f3d0 ORBit_POAObject_invoke_incoming_request (9114db8, 93e0070, 804587c) + 54
 f767f865 ORBit_POA_handle_request (845a2f0, 93e0070, 93e0088) + 2f5
 f7682e70 ORBit_handle_request (808b6b8, 93e0070) + 4c
 f766d97d giop_connection_handle_input (8bd4588) + 2e5
 f768922e link_connection_io_handler (0, 1, 8bd4588) + 56
 f768ae2e link_source_dispatch (8bdd7e8, f76891d8, 8bd4588) + 42
 fe589690 g_main_dispatch (808bb00) + 1c8
 fe58a779 g_main_context_dispatch (808bb00) + 85
 fe58ab99 g_main_context_iterate (808bb00, 1, 1, 8413cb8) + 3d1
 fe58adf4 g_main_context_iteration (808bb00, 1) + 88
 f76875fa link_main_iteration (1) + 22
 f766ce5b giop_recv_buffer_get (8045b38) + 5f
 f76703fa ORBit_small_invoke_stub (8b2ddd8, f60ba928, 0, 8045c3c, 0, f60d4908) + 13a
 f767029f ORBit_small_invoke_stub_n (8b2ddd8, f60ba908, 0, 0, 8045c3c, 0) + 43
 f7681d0e ORBit_c_stub_invoke (8b2ddd8, f60ba908, 0, 0, 8045c3c, 0) + 132
 f6086473 Accessibility_EventListener_notifyEvent (8b2ddd8, 8045c64, f60d4908) + 4f
 f60c2fb9 spi_atk_emit_eventv (8f3aa00, 0, 0, 8045cd4, f60c3e58, 8c89da8) + 1ad
 f60c3b60 spi_atk_bridge_signal_listener (8045d5c, 3, 8045dfc, 8cd3740) + 3d0
 fe52e226 signal_emit_unlocked_R (8bde3f8, 16e, 8f3aa00, 0, 8045dfc) + 5ae
 fe52d6d1 g_signal_emit_valist (8f3aa00, 9a, 16e, 80460e0) + 8cd
 fe52dbc9 g_signal_emit_by_name (8f3aa00, f83c2850, ffffffff, 0, 0) + 355
 f834cfed __1cTnsDocAccessibleWrapQFireToolkitEvent6MIpnNnsIAccessible_pv_I_ (8bae1b8, 8004, 8b388d4, 0) + 136d
 f82a49df __1cPnsDocAccessibleSFlushPendingEvents6M_I_ (8bae1b8) + 23f
 f82a4b08 __1cPnsDocAccessibleTFlushEventsCallback6FpnInsITimer_pv_v_ (8b6c740, 8bae214) + 68
 feb84dc3 __1cLnsTimerImplEFire6M_v_ (8b6c740) + 2a3
 feb84ff0 __1cMnsTimerEventDRun6M_I_ (94498d8) + 100
 feb7ad3e __1cInsThreadQProcessNextEvent6Mipi_I_ (8087ee8, 1, 804653c) + 26e
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (8087ee8, 1) + 7f
 faa61726 __1cOnsBaseAppShellDRun6M_I_ (83f9ac0) + 86
 f7ebd88a __1cMnsAppStartupDRun6M_I_ (8438df8) + 9a
 feddb15a XRE_main (2, 8046b4c, 8060da0) + 293a
 080509eb main     (2, 8046b4c, 8046b58) + 3b
 0805091a _start   (2, 8046d0c, 0, 0, 8046d55, fee1c02e) + 7a
-----------------  lwp# 2 / thread# 2  --------------------
 fef45497 __pollsys (f72ab9d4, 1, 0, 0) + 7
 feefc4d7 poll     (f72ab9d4, 1, ffffffff) + 52
 fed3b36b _pr_poll_with_poll (8107114, 1, ffffffff) + 6fb
 fed3b688 PR_Poll  (8107114, 1, ffffffff) + 38
 fb34a8c0 __1cYnsSocketTransportServiceEPoll6MipI_i_ (8106c30, 1, f72abcb0) + d0
 fb34b889 __1cYnsSocketTransportServicePDoPollIteration6Mi_I_ (8106c30, 1) + 339
 fb34b271 __1cYnsSocketTransportServiceSOnProcessNextEvent6MpnRnsIThreadInternal_iI_I_ (8106c30, 81072c8, 1, 1) + 81
 feb7ac07 __1cInsThreadQProcessNextEvent6Mipi_I_ (81072c8, 1, f72abdd4) + 137
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (81072c8, 1) + 7f
 fb34b40f __1cYnsSocketTransportServiceDRun6M_I_ (8106c30) + 13f
 feb7ad3e __1cInsThreadQProcessNextEvent6Mipi_I_ (81072c8, 1, f72abf24) + 26e
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (81072c8, 1) + 7f
 feb79c7f __1cInsThreadKThreadFunc6Fpv_v_ (81072c8) + 14f
 fed3d507 _pt_root (8107458) + 157
 fef4481f _thr_setup (fefb2400) + 51
 fef44a70 _lwp_start (fefb2400, 0, 0, 0, 0, 0)
-----------------  lwp# 3 / thread# 3  --------------------
 fef44aab __lwp_park (8084fec, 8088298, f71a5ce8) + b
 fef3ed93 cond_wait_queue (8084fec, 8088298, f71a5ce8, 0) + 3e
 fef3f13a cond_wait_common (8084fec, 8088298, f71a5ce8) + 1e9
 fef3f369 _cond_timedwait (8084fec, 8088298, f71a5d78) + 4a
 fef3f3fa cond_timedwait (8084fec, 8088298, f71a5d78) + 27
 fef3f439 pthread_cond_timedwait (8084fec, 8088298, f71a5d78) + 21
 fed335da pt_TimedWait (8084fec, 8088298, 1686b8) + da
 fed33bb3 PR_WaitCondVar (8084fe8, 1686b8) + 183
 feb86f4a __1cLTimerThreadDRun6M_I_ (80881d8) + 2ba
 feb7ad3e __1cInsThreadQProcessNextEvent6Mipi_I_ (8128a18, 1, f71a5f24) + 26e
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (8128a18, 1) + 7f
 feb79c7f __1cInsThreadKThreadFunc6Fpv_v_ (8128a18) + 14f
 fed3d507 _pt_root (8128ba8) + 157
 fef4481f _thr_setup (f7090000) + 51
 fef44a70 _lwp_start (f7090000, 0, 0, 0, 0, 0)
-----------------  lwp# 5 / thread# 5  --------------------
 fef44aab __lwp_park (84e4574, 84f1404, f690bc48) + b
 fef3ed93 cond_wait_queue (84e4574, 84f1404, f690bc48, 0) + 3e
 fef3f13a cond_wait_common (84e4574, 84f1404, f690bc48) + 1e9
 fef3f369 _cond_timedwait (84e4574, 84f1404, f690bcd8) + 4a
 fef3f3fa cond_timedwait (84e4574, 84f1404, f690bcd8) + 27
 fef3f439 pthread_cond_timedwait (84e4574, 84f1404, f690bcd8) + 21
 fed335da pt_TimedWait (84e4574, 84f1404, 23c34600) + da
 fed33bb3 PR_WaitCondVar (84e4570, 23c34600) + 183
 fed3447a PR_Wait  (84f1400, 23c34600) + 11a
 feb29197 __1cNnsAutoMonitorEWait6MI_I_ (f690bdec, 23c34600) + 37
 feb81d34 __1cMnsThreadPoolDRun6M_I_ (84f1300) + 2b4
 feb7ad3e __1cInsThreadQProcessNextEvent6Mipi_I_ (85e4050, 1, f690bf24) + 26e
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (85e4050, 1) + 7f
 feb79c7f __1cInsThreadKThreadFunc6Fpv_v_ (85e4050) + 14f
 fed3d507 _pt_root (85e6d30) + 157
 fef4481f _thr_setup (f7090800) + 51
 fef44a70 _lwp_start (f7090800, 0, 0, 0, 0, 0)
-----------------  lwp# 8 / thread# 8  --------------------
 fef44aab __lwp_park (87b15c4, 87a4a10, 0) + b
 fef3ed93 cond_wait_queue (87b15c4, 87a4a10, 0, 0) + 3e
 fef3f294 _cond_wait (87b15c4, 87a4a10) + 69
 fef3f2d4 cond_wait (87b15c4, 87a4a10) + 24
 fef3f310 pthread_cond_wait (87b15c4, 87a4a10) + 1e
 fed33b94 PR_WaitCondVar (87b15c0, ffffffff) + 164
 fb16144b __1cUProcessAsyncMessages6F_v_ (0, f7090400, fec22374, f6acde10, fb163512, 87b0858) + db
 fb163561 __1cQAsyncWriteThreadDRun6M_I_ (87b0858) + 61
 feb7ad3e __1cInsThreadQProcessNextEvent6Mipi_I_ (87a4a70, 1, f6acdf24) + 26e
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (87a4a70, 1) + 7f
 feb79c7f __1cInsThreadKThreadFunc6Fpv_v_ (87a4a70) + 14f
 fed3d507 _pt_root (87a4368) + 157
 fef4481f _thr_setup (f7090400) + 51
 fef44a70 _lwp_start (f7090400, 0, 0, 0, 0, 0)
-----------------  lwp# 13 / thread# 13  --------------------
 fef44aab __lwp_park (8cc094c, 8a3f0e8, f670bdf8) + b
 fef3ed93 cond_wait_queue (8cc094c, 8a3f0e8, f670bdf8, 0) + 3e
 fef3f13a cond_wait_common (8cc094c, 8a3f0e8, f670bdf8) + 1e9
 fef3f369 _cond_timedwait (8cc094c, 8a3f0e8, f670be80) + 4a
 fef3f3fa cond_timedwait (8cc094c, 8a3f0e8, f670be80) + 27
 fef3f439 pthread_cond_timedwait (8cc094c, 8a3f0e8, f670be80) + 21
 fed335da pt_TimedWait (8cc094c, 8a3f0e8, 61a8) + da
 fed33bb3 PR_WaitCondVar (8cc0948, 61a8) + 183
 f7c26e20 __1cLnsSSLThreadDRun6M_v_ (8bdb5c0) + 160
 f7c2515c __1cVnsPSMBackgroundThreadOnsThreadRunner6Fpv_v_ (8bdb5c0) + 3c
 fed3d507 _pt_root (8a3f148) + 157
 fef4481f _thr_setup (f7091000) + 51
 fef44a70 _lwp_start (f7091000, 0, 0, 0, 0, 0)
-----------------  lwp# 14 / thread# 14  --------------------
 fef44aab __lwp_park (8cc096c, 8a3f440, f642de28) + b
 fef3ed93 cond_wait_queue (8cc096c, 8a3f440, f642de28, 0) + 3e
 fef3f13a cond_wait_common (8cc096c, 8a3f440, f642de28) + 1e9
 fef3f369 _cond_timedwait (8cc096c, 8a3f440, f642deb4) + 4a
 fef3f3fa cond_timedwait (8cc096c, 8a3f440, f642deb4) + 27
 fef3f439 pthread_cond_timedwait (8cc096c, 8a3f440, f642deb4) + 21
 fed335da pt_TimedWait (8cc096c, 8a3f440, 61a8) + da
 fed33bb3 PR_WaitCondVar (8cc0968, 61a8) + 183
 f7c28010 __1cYnsCertVerificationThreadDRun6M_v_ (8a3f1e8) + 90
 f7c2515c __1cVnsPSMBackgroundThreadOnsThreadRunner6Fpv_v_ (8a3f1e8) + 3c
 fed3d507 _pt_root (8a3f4a0) + 157
 fef4481f _thr_setup (f7091400) + 51
 fef44a70 _lwp_start (f7091400, 0, 0, 0, 0, 0)
-----------------  lwp# 15 / thread# 15  --------------------
 fef44aab __lwp_park (8ce6be4, 812c36c, 0) + b
 fef3ed93 cond_wait_queue (8ce6be4, 812c36c, 0, 0) + 3e
 fef3f294 _cond_wait (8ce6be4, 812c36c) + 69
 fef3f2d4 cond_wait (8ce6be4, 812c36c) + 24
 fef3f310 pthread_cond_wait (8ce6be4, 812c36c) + 1e
 fed33b94 PR_WaitCondVar (8ce6be0, ffffffff) + 164
 fed3447a PR_Wait  (812c368, ffffffff) + 11a
 feb29197 __1cNnsAutoMonitorEWait6MI_I_ (f61dde00, ffffffff) + 37
 feb7768b __1cMnsEventQdDueueIGetEvent6MippnLnsIRunnable__i_ (8b3b6bc, 1, f61ddee4) + bb
 feb7c2fb __1cInsThreadTnsChainedEventQdDueueIGetEvent6MippnLnsIRunnable__i_ (8b3b6b4, 1, f61ddee4) + 3b
 feb7ac7c __1cInsThreadQProcessNextEvent6Mipi_I_ (8b3b698, 1, f61ddf24) + 1ac
 feac3d5f __1cVNS_ProcessNextEvent_P6FpnJnsIThread_i_i_ (8b3b698, 1) + 7f
 feb79c7f __1cInsThreadKThreadFunc6Fpv_v_ (8b3b698) + 14f
 fed3d507 _pt_root (8b045e8) + 157
 fef4481f _thr_setup (f7091800) + 51
 fef44a70 _lwp_start (f7091800, 0, 0, 0, 0, 0)
-----------------  lwp# 16 / thread# 16  --------------------
 fef44aab __lwp_park (80ffe44, 8107d68, f680be28) + b
 fef3ed93 cond_wait_queue (80ffe44, 8107d68, f680be28, 0) + 3e
 fef3f13a cond_wait_common (80ffe44, 8107d68, f680be28) + 1e9
 fef3f369 _cond_timedwait (80ffe44, 8107d68, f680beb4) + 4a
 fef3f3fa cond_timedwait (80ffe44, 8107d68, f680beb4) + 27
 fef3f439 pthread_cond_timedwait (80ffe44, 8107d68, f680beb4) + 21
 fed335da pt_TimedWait (80ffe44, 8107d68, 5b8d80) + da
 fed33bb3 PR_WaitCondVar (80ffe40, 5b8d80) + 183
 fb36963e __1cOnsHostResolverPGetHostToLookup6MppnMnsHostRecord__i_ (8107d00, f680bf90) + 9e
 fb3699fa __1cOnsHostResolverKThreadFunc6Fpv_v_ (8107d00) + 5a
 fed3d507 _pt_root (91437e8) + 157
 fef4481f _thr_setup (f7090c00) + 51
 fef44a70 _lwp_start (f7090c00, 0, 0, 0, 0, 0)
Created attachment 231384
patch

add null check:
  if (frame) {
  ...
  }
What if you had just changed:
    else {
to
    else if (frame) {

It would have been less of a whitespace change, which is always useful for preserving CVS history.

Other than that, I'm trying to understand when/why this happens. It seems very odd that it can happen at all. I'd like to know more about the conditions.

One nit on the bug filing: it's good to put crash stacks in a separate attachment.
(In reply to comment #2)
> What if you had just changed:
>     else {
> to
>     else if (frame) {
> 
I think the 'else' means other roles of accessible, since it belongs to 'if (Role(accessible) == ROLE_TEXT_LEAF) {'. and there is also null check of 'frame' inside the 'if' block.
So I suggest put the null check inside might make the logic more clear.

what should we do when 'frame' is null? just continue the while loop to the next child? put the null check out of the 'if' statement should be better. like
if (!frame)
   continue;
if (Role(accessible) == ROLE_TEXT_LEAF) {
   ...
}
else {
   ...
}

> It would have been less of a whitespace change, which is always useful for
> preserving CVS history.
> 
> Other than that, I'm trying to understand when/why this happens. It seems very
> odd that it can happen at all. I'd like to know more about the conditions.
> 
I think the condition is:
the action of print preview destoryed the frame, if orca is fetching text at the same time, it will cause crash.

> One nit on the bug filing: it's good to put crash stacks in a separate
> attachment.
> 


Comment on attachment 231384
patch

please address Aaron's comment
Created attachment 231718
repost the patch

put the null check outside the if-else block.
Comment on attachment 231718
repost the patch

we don't need to check frame again here,

 if (frame && !frame->GetStyleText()->WhiteSpaceIsSignificant()) {
Is the only change adding the frame null check?
It's useful to post an additional diff sometimes, using cvs diff -uw which strips out the whitespace changes. This makes it much easier to see what's actually different.
Sorry Evan, I'm sure this is fine, but please post a new patch against trunk with -uw
Created attachment 231766
patch with -uw flag, and addressing ginn's comment
Evan, I will check this in if that's okay with you.


Firefox crashes [@ nsHyperTextAccessible::GetPosAndText]

access, crash