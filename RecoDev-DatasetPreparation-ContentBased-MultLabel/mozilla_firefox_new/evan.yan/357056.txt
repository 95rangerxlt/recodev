User-Agent:       Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9a1) Gecko/20061016 Minefield/3.0a1
Build Identifier: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9a1) Gecko/20061016 Minefield/3.0a1

When I tab around through links in Firefox, it issues at-spi focus: events for the link that was just selected.  When I get such an event, I'd like to find out more information about the link, such as the caret position of the associated embedded object character in the link's hypertext parent.  It seems as though the startIndex == endIndex == -1 for the link, though. 

Reproducible: Always

Actual Results:  
The startIndex == endIndex == -1 for links when examined via a focus: event.  

Expected Results:  
I'd expect the startIndex to be the offset of the embedded character in the accessible text for the hypertext parent of the link, and endIndex == startIndex + 1.

User-Agent:       Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9a1) Gecko/20061016 Minefield/3.0a1
Build Identifier: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9a1) Gecko/20061016 Minefield/3.0a1

When I tab around through links in Firefox, it issues at-spi focus: events for the link that was just selected.  When I get such an event, I'd like to find out more information about the link, such as the caret position of the associated embedded object character in the link's hypertext parent.  It seems as though the startIndex == endIndex == -1 for the link, though. 

Reproducible: Always

Actual Results:  
The startIndex == endIndex == -1 for links when examined via a focus: event.  

Expected Results:  
I'd expect the startIndex to be the offset of the embedded character in the accessible text for the hypertext parent of the link, and endIndex == startIndex + 1.
Evan, can you find out what's wrong with HyperlinkImpl?
it gets error here:
http://lxr.mozilla.org/seamonkey/source/accessible/src/base/nsAccessible.cpp#2758
because the text accessible's child was wrongly set to DEAD_END_ACCESSIBLE.
Created attachment 243325
patch

It's wrongly to get children for "this", but not to get children for "parent". That's why the accessible's nextSibling was DEAD_END_ACCESSIBLE.
Comment on attachment 243325
patch

Good fix but one problem.

With nsCOMPtr<> you need to pass in a temp variable when the same variable is being used for something else.

For example, you must:
nsCOMPtr<nsIAccessible> nextSibling;
accessible->GetNextSibling(getter_AddRefs(nextSibling));
access.swap(nextSibling);

This will prevent problems with some compilers apparently. Gecko must do this all over the place for DOM traversal etc.
Committed with Aaron's comment addressed.
 


Accessible hyperlink startIndex == endIndex == -1 instead of actual caret offset in parent

access