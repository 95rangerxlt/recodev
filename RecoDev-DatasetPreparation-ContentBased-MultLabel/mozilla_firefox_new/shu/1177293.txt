We overcount frames when flattening recursion.

We overcount frames when flattening recursion.
Created attachment 8625980
Don't overcount samples when flattening recursion.
To deal with recursion, this would work, but wouldn't affect the use-case of any kind of repetitive calls in the stack, like A()->B()->C()->B()->D() -- B would be counted twice. I think I have a way to fix both adjacent repeated calls, and otherwise.
Oops, I forgot to land this.

(In reply to Jordan Santell [:jsantell] [@jsantell] from comment #2)
> To deal with recursion, this would work, but wouldn't affect the use-case of
> any kind of repetitive calls in the stack, like A()->B()->C()->B()->D() -- B
> would be counted twice. I think I have a way to fix both adjacent repeated
> calls, and otherwise.

Those two B frames in your example should be counted twice. Remember that the sample count is tied to each row in the call tree, not to some function. In your example, B would have two different rows, and should be counted twice. 

The bug here was that recursion flattening flattens multiple rows into a single row, and we were overcounting for the single flattened row.
https://hg.mozilla.org/integration/fx-team/rev/c8066db6f2e9
tests added to bug 1167021
https://hg.mozilla.org/mozilla-central/rev/c8066db6f2e9


Costs still wrong with flattened recursion toggled on



Bug 1177293 - Don't overcount samples when flattening recursion. r=jsantell 