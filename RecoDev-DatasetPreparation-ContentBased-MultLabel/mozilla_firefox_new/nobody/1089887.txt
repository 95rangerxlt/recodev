As a product owner, I am able to add, remove, or modify supported Content Decryption Modules and associated meta data (e.g. download location, identifier, certificate information, etc.) in Firefox that conform to the Encrypted Media Extensions API as well as their down so that I am able to expand the authentication and encryption systems supported by Firefox's EME implementation as they become available.

As a product owner, I am able to add, remove, or modify supported Content Decryption Modules and associated meta data (e.g. download location, identifier, certificate information, etc.) in Firefox that conform to the Encrypted Media Extensions API as well as their down so that I am able to expand the authentication and encryption systems supported by Firefox's EME implementation as they become available.
How dynamic does this list need to be?

I assume "modification" means updates to a new version of the CDM, which is likely going to be frequent and common (e.g. for a bugfixes or security fixes) -- user story in bug 1089868 . With the OpenH264 machinery we're talking about using (from bug 1009816), this should be basically free as it's controlled by XML served by AUS. (What is the process for updating data served by AUS? File a bug?)

Is it sufficient to deal with new CDMs by releasing a new Firefox version? This seems like a rare event, and not something that we'd need to push to already-shipped Firefox versions... To get a new CDM, you'd just need to update to the latest Firefox.

Similarly, what about removing CDMs from already-shipped Firefox versions? Presumably we'd want to be able to remove (disable?) CDMs that, say, become unsupported and have unfixed security bugs. [An explicit signal would be best, but we could wing it by "updating" the CDM to a Mozilla-supplied dummy CDM.]
catlee: does the existing OpenH264 update mechanism, in Firefox and AUS, cover these use cases for updating or blocklisting a CDM in the field?
No. Blocklisting is not implemented yet, but is covered by bug 1086668.
(In reply to Justin Dolske [:Dolske] from comment #1)
> How dynamic does this list need to be?

I would suspect it is not terribly dynamic. Something akin to what PFS was like originally, but it'll be largely dependent on how often the CDM gets updated and how many systems come online that we choose to support (suspect the number will be low given costs, but can also see some network operators and/or OEMs rolling their own for non-desktop cases)

> I assume "modification" means updates to a new version of the CDM, which is
> likely going to be frequent and common (e.g. for a bugfixes or security
> fixes) -- user story in bug 1089868 . With the OpenH264 machinery we're
> talking about using (from bug 1009816), this should be basically free as
> it's controlled by XML served by AUS. (What is the process for updating data
> served by AUS? File a bug?)

Ideally.

> Is it sufficient to deal with new CDMs by releasing a new Firefox version?
> This seems like a rare event, and not something that we'd need to push to
> already-shipped Firefox versions... To get a new CDM, you'd just need to
> update to the latest Firefox.

Since it's a binary blob, I don't think that'd be sufficient. I don't know how the sandboxing works currently, but I'd be worried about the possibility of zero-days. I'd rather the update mechanism for third party components not rely on our releases, but that is just my opinion.

> Similarly, what about removing CDMs from already-shipped Firefox versions?
> Presumably we'd want to be able to remove (disable?) CDMs that, say, become
> unsupported and have unfixed security bugs. [An explicit signal would be
> best, but we could wing it by "updating" the CDM to a Mozilla-supplied dummy
> CDM.]

Agreed. Disabled for sure, not so sure about being able to remove data remotely.
> > Is it sufficient to deal with new CDMs by releasing a new Firefox version?
> > This seems like a rare event, and not something that we'd need to push to
> > already-shipped Firefox versions... To get a new CDM, you'd just need to
> > update to the latest Firefox.
> 
> Since it's a binary blob, I don't think that'd be sufficient. I don't know
> how the sandboxing works currently, but I'd be worried about the possibility
> of zero-days. I'd rather the update mechanism for third party components not
> rely on our releases, but that is just my opinion.

That wasn't the question. It's clear that we need to dynamically deal with new CDM versions (and we already do for OpenH264). The question is whether we need to be able to release entirely new CDMs dynamically. I will strongly assert that we don't want to do this: it's significant complexity for almost no benefit.
Right, I read new as "new versions".

Agree with Benjamin's assertion. Newly supported CDMs should only appear in new releases, and we should also make sure we lay out criteria around what adding a CDM would look-like, policy and process-wise.
(In reply to Kev Needham [:kev] from comment #6)
> Right, I read new as "new versions".
> 
> Agree with Benjamin's assertion. Newly supported CDMs should only appear in
> new releases, and we should also make sure we lay out criteria around what
> adding a CDM would look-like, policy and process-wise.

We already whitelist CDMs from inside of Gecko in C++ code, so we effectively have this already.

We do this by testing the "keySystem" string passed in from the EME JS APIs against a known list, and by checking a per-approved-by-us-keysystem pref, and only loading the CDM that reports that it can handle that keySystem string.
I meant more on the "how do we determine which platforms we support?" e.g. if I'm a framework provider, what do I need to do to get added, similar to policies we have on Root CAs we allow. Definitely not part of the code side of things, so I'll move that to a separate bug.

(In reply to Chris Pearce (:cpearce) from comment #7)
> (In reply to Kev Needham [:kev] from comment #6)
> We already whitelist CDMs from inside of Gecko in C++ code, so we
> effectively have this already.
> 
> We do this by testing the "keySystem" string passed in from the EME JS APIs
> against a known list, and by checking a per-approved-by-us-keysystem pref,
> and only loading the CDM that reports that it can handle that keySystem
> string.
Stephen, can you confirm that your patch in bug 1089867 won't try to install a new CDM that it doesn't know about when it gets added to the file on AUS.

My understanding is that disabling of CDMs in old Firefox versions can be handled by blocklisting (bug 1086668). It seems like we don't need full removal from old versions.

Is there anything else you can see in this bug that isn't covered by bug 1089867?
(In reply to Matthew N. [:MattN] from comment #9)
> Stephen, can you confirm that your patch in bug 1089867 won't try to install
> a new CDM that it doesn't know about when it gets added to the file on AUS.

Yes. Firefox will query the AUS XML for available GMPs. It will then compare each one against a known list of GMPs embedded in that particular release of Firefox and only install/update the ones it knows about.

> My understanding is that disabling of CDMs in old Firefox versions can be
> handled by blocklisting (bug 1086668). It seems like we don't need full
> removal from old versions.

Removal of old versions is also covered by bug 1053729.

> Is there anything else you can see in this bug that isn't covered by bug
> 1089867?

No, I don't see anything that isn't covered by bug 1089867.


[EME] Mozilla administration of supported Content Decryption Modules

