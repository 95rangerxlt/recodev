After reading the following posts, I found an instance of nsITimer that may be susceptible to being GC'd before firing:

http://www.joshmatthews.net/blog/2011/03/nsitimer-anti-pattern/
https://groups.google.com/d/topic/mozilla.dev.platform/IDjMJNczoKg/discussion

Here is the code in question:

http://dxr.mozilla.org/mozilla-central/browser/devtools/webconsole/webconsole.js#l507

It may be that 250ms is short enough to never trigger this bug in practice, but I think it would be prudent to just store a reference to the timer and clear it afterwards.

After reading the following posts, I found an instance of nsITimer that may be susceptible to being GC'd before firing:

http://www.joshmatthews.net/blog/2011/03/nsitimer-anti-pattern/
https://groups.google.com/d/topic/mozilla.dev.platform/IDjMJNczoKg/discussion

Here is the code in question:

http://dxr.mozilla.org/mozilla-central/browser/devtools/webconsole/webconsole.js#l507

It may be that 250ms is short enough to never trigger this bug in practice, but I think it would be prudent to just store a reference to the timer and clear it afterwards.
Good catch. This will be fixed no later than the web console output rewrite, which will rework how filtering works.
Pasting a relevant link so we don't forget about it:

https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Timer.jsm


WCF__setFilterTextBoxEvents timer could be GC'd before firing

