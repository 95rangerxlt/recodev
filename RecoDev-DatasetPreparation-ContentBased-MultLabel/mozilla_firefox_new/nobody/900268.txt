When serializing an object, the entire graph of reachable objects (via both ownProperties and the prototype) is serialized. This can result in huge amounts of data being sent over the remote debugging protocol on every function entry and exit. For example, `return {};` serializes Object.prototype and produces a 24,000 character packet: http://pastebin.mozilla.org/2696180

Some proposed solutions:

- Don't serialize prototypes. This shrinks packet sizes significantly for simple objects, but doesn't help with large data structure objects.

- Only serialize objects to a certain depth. This prevents large trees from being serialized, but doesn't solve the problem for objects that reference the global object, DOM nodes, or long arrays.

- Only serialize basic information about object parameters (like the class, possibly the list of names of ownProperties). This is similar to the previous suggestion, but with a max depth of 0. This solves the problem of individual large objects causing problematic packets, but makes the collected data not as useful.

The amount of information the user wants collected in the trace could potentially be an option--you'd trade performance for greater detail. Collecting everything (like we do now) is more detail than necessary for the majority of use cases, though.

When serializing an object, the entire graph of reachable objects (via both ownProperties and the prototype) is serialized. This can result in huge amounts of data being sent over the remote debugging protocol on every function entry and exit. For example, `return {};` serializes Object.prototype and produces a 24,000 character packet: http://pastebin.mozilla.org/2696180

Some proposed solutions:

- Don't serialize prototypes. This shrinks packet sizes significantly for simple objects, but doesn't help with large data structure objects.

- Only serialize objects to a certain depth. This prevents large trees from being serialized, but doesn't solve the problem for objects that reference the global object, DOM nodes, or long arrays.

- Only serialize basic information about object parameters (like the class, possibly the list of names of ownProperties). This is similar to the previous suggestion, but with a max depth of 0. This solves the problem of individual large objects causing problematic packets, but makes the collected data not as useful.

The amount of information the user wants collected in the trace could potentially be an option--you'd trade performance for greater detail. Collecting everything (like we do now) is more detail than necessary for the majority of use cases, though.
Created attachment 785095
Patch

This patch serializes the ownProperties of argument and return value objects, but only creates an object grip for references in those objects (including the prototype reference). We could still get huge packets and slowdown when the arguments array is very long or when an object with a large ownProperties list is serialized...should we do something about that?

Example serialization output: http://pastebin.mozilla.org/2766675
Created attachment 785105
serialization.diff

Forgot to remove a deleted test from xpcshell.ini.
Comment on attachment 785095
Patch

Review of attachment 785095:
-----------------------------------------------------------------

Looks good to me, I think this is a practical trade off.
Comment on attachment 785095
Patch

Woops, old version of the patch
Comment on attachment 785105
serialization.diff

Review of attachment 785105:
-----------------------------------------------------------------

tight
Try push: https://tbpl.mozilla.org/?tree=Try&rev=1dbf0a1bc93c
Comment on attachment 785105
serialization.diff

Review of attachment 785105:
-----------------------------------------------------------------

r+ with nit fix below

::: toolkit/devtools/server/actors/tracer.js
@@ +581,3 @@
>   */
> +function objectGrip(aObject) {
> +  let g = {

Nit: Can we use `grip` instead of `g`. I like to avoid one letter variable names unless they are in a single map/filter or whatever and only used once.
This function is one of the ones copied from script.js. These duplicated functions are eventually going to be in only one place, so I made as few changes as possible to make the refactoring easier.
https://hg.mozilla.org/integration/fx-team/rev/f98860de7350
https://hg.mozilla.org/mozilla-central/rev/f98860de7350


Trace actor collects too much information when serializing objects



Bug 900268 - Trace actor collects too much information when serializing objects; r=fitzgen 