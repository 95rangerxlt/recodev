The Web Console seems to have some logic to resolve Unicode characters in strings. For example, if you evaluate "\u1234" you will see "ሴ" as result. However, if you evaluate "\\u1234" you will see "\ሴ" which is plainly wrong, it should be "\\u1234". Note that evaluating ["\\u1234"] correctly displays ["\\u1234"] as result.

Steps to reproduce:
1. Press Ctrl-Shift-K to open Web Cosole.
2. Type "\\u1234" (with the quotation marks) and press Enter.

Expected results:
The Web Console shows:
◄ "\\u1234"
► "\\u1234"

Actual results:
The Web Console shows:
◄ "\\u1234"
► "\ሴ"

Tested in Firefox 6.0.2, 7.0.1 and 10.0a1 (nightly build 20110929) on Windows 7 x64.

The Web Console seems to have some logic to resolve Unicode characters in strings. For example, if you evaluate "\u1234" you will see "ሴ" as result. However, if you evaluate "\\u1234" you will see "\ሴ" which is plainly wrong, it should be "\\u1234". Note that evaluating ["\\u1234"] correctly displays ["\\u1234"] as result.

Steps to reproduce:
1. Press Ctrl-Shift-K to open Web Cosole.
2. Type "\\u1234" (with the quotation marks) and press Enter.

Expected results:
The Web Console shows:
◄ "\\u1234"
► "\\u1234"

Actual results:
The Web Console shows:
◄ "\\u1234"
► "\ሴ"

Tested in Firefox 6.0.2, 7.0.1 and 10.0a1 (nightly build 20110929) on Windows 7 x64.
Actually, the issue is with the method JSTerm.formatString() in HUDService.jsm, it fails to recognize what is a escape sequence and what isn't. To do it properly one needs to scan all characters to make sure regular characters and other escape sequences are handled differently, e.g.:

> let output = uneval(aString).replace(/[^\\]|\\[^xu]|\\x([0-9a-fA-F]{2})|\\u([0-9a-fA-F]{4})/g, replaceFn);

With replaceFn being something along the lines of:

function replaceFn(aMatch, aHex, aUnicode) {
  if (aHex == "" && aUnicode == "")
    return aMatch;
  let c = parseInt(aHex == "" ? aUnicode : aHex, 16);
  return isControlCode(c) ? aMatch : String.fromCharCode(c);
}
triage. Filter on PINKISBEAUTIFUL
Just verified that the issue is still not fixed in Firefox 20.0a1 (2012-12-04).
Thanks for the bug report. This is now fixed by bug 808370.


u1234 character sequence is mistakenly resolved when displaying strings in Web Console

