An app template that is a good working example of using a privileged permission, with lots of built in good practices so that newcomers can use it as good starting point.

An app template that is a good working example of using a privileged permission, with lots of built in good practices so that newcomers can use it as good starting point.
Repository at https://github.com/mozilla/mortar-privileged-app-stub
Created attachment 8424771
patch.txt
This template app is using the old L10N library. Stas: Do we have a standalone version of the new l10n lib to include in this template that we're gonna expose in the future app manager?
Yura: See https://github.com/mozilla/mortar-privileged-app-stub/blob/c83b4a1bb0e38be298e384b98ad80167112f2ef6/index.html#L53. This is using a placeholder without a label which is not recommended in general. But in this case (search field + submit button), I feel it's ok. What do you think? Keep in mind that this is meant as an educational app.
Comment on attachment 8424771
patch.txt

Review of attachment 8424771:
-----------------------------------------------------------------

Overall it's a very small and contained template, I like that!

My review may seem very nitpicky but since it's an example app, it should be best in class.

manifest.webapp:
Are we sure it works well with the marketplace requirements? icon sizes, etc?
We should use a really fake developer name and URL, just so that lazy people don't submit apps as Mozilla.
Mix of tabs and spaces

app.js:
To avoid DRY, replace:
var term = searchInput.value;
if (term.length === 0) {
  term = defaultSearchTerm;
}

with

var term = searchInput.value;
if (term.length === 0) {
  term = searchInput.placeholder;
}

::: js/app.js
@@ +5,3 @@
>    var errorMsg = document.getElementById('error');
>    var searchInput = document.getElementById('term');
>    var searchButton = document.getElementById('search');

searchButton is unused.

We should promote 'use strict';

Maybe lint this file too? (that's how I found out searchButton was unused)

@@ +11,3 @@
>    var form = document.querySelector('form');
> +
> +  // Forms will take the values in the input fields their contain

the input fields *they* contain

@@ +40,5 @@
>        request.abort();
>      }
>  
>  
> +    results.textContent = translate('searching');

You need to do results.hidden = false too.
I think we actually need a new element for this. <p id="searching" data-l10n-id="searching">.

@@ +65,2 @@
>  
>      request.onerror = function(e) {

This should be a separate function to improve readability of the code.

@@ +70,5 @@
>        }
>        showError(errorMessage);
>      };
>  
>      request.onload = function() {

Same for this onload function.

@@ +73,5 @@
>  
>      request.onload = function() {
>  
> +      results.textContent = '';
> +      results.hidden = false;

This should be done at the end. This will improve rendering time. I would also add a comment like: "Now that the content is in place, we can display it."

@@ +81,3 @@
>        
> +      if(response !== null) {
> +        documents = response.documents;

Do an early return that displays the error element.

@@ +82,5 @@
> +      if(response !== null) {
> +        documents = response.documents;
> +      }
> +      
> +      if(response !== null && documents.length) {

I'd prefer to treat the no documents case first, with an early return.

@@ +86,5 @@
> +      if(response !== null && documents.length) {
> +
> +        documents.forEach(function(doc) {
> +
> +          var h2 = document.createElement('h2');

Move this just before h2.appendChild(docLink).

@@ +106,5 @@
> +          // and then open the link but in a new window.
> +          docLink.addEventListener('click', function(e) {
> +            e.preventDefault();
> +            window.open(this.href, 'overlay');
> +          }, false);

You can drop the false, it's not required anymore.
(In reply to Anthony Ricaud (:rik) from comment #3)
> This template app is using the old L10N library. Stas: Do we have a
> standalone version of the new l10n lib to include in this template that
> we're gonna expose in the future app manager?

Just to make sure: do you mean that template will be exposed, or the l10n lib will?

It should be possible to simply use the new lib without making many changes to the code of the template app.  One thing that needs to be changed is the format of data/locales.ini:  the new lib doesn't support defining the string in the ini file, you'll need to create separate .properties file for each locale.  Also, the default locale (en-US) shouldn't be defined under its own section ("[en-US]").  Instead, it should be put at the top of the file.  (This was also the recommended way for the old l10n lib, b/c then en-US was the fallback language for missing translations).

I'll submit a patch in a moment so that you can take a look at the exact changes.

Note:  we're planning on landing the support for Mutation Observers and make use of the <template> element really soon.  This will require the use of polyfills in apps targeting older browsers.  Who is the target of the template app and would this be a problem?
(In reply to Staś Małolepszy :stas from comment #6)
> I'll submit a patch in a moment so that you can take a look at the exact
> changes.

I filed bug 1014036 instead.  Let's discuss there.
So in this case it is actually OK, because place holder is provided and the screen reader will read it out (like a label) so presently you will hear: "search entry javascript". However, if the placeholder is not provided or it's not descriptive enough (on its own) for the screen reader user, then I would suggest using aria-label:

* having an actual stub aria-label attribute and the data-l10n-id attribute in the HTML file
* having {data-l10n-id}.ariaLabel={Label for data-l10n-id} entry in the message bundle itself
Created attachment 8427056
Revised template code
(In reply to Anthony Ricaud (:rik) from comment #5)
> Comment on attachment 8424771
> patch.txt
> 
> Review of attachment 8424771:
> -----------------------------------------------------------------
> 
> manifest.webapp:
> Are we sure it works well with the marketplace requirements? icon sizes, etc?

Apparently 128 is the mandatory version, other versions will be rescaled by the platform (is that Gaia?). Maybe in the future 1024 will be required too. An update is coming since 2 months ago:
https://bugzilla.mozilla.org/show_bug.cgi?id=924629

So in short: I *think* it follows their requirements but maybe it won't in a few months. We'll need to update it then.

> We should use a really fake developer name and URL, just so that lazy people
> don't submit apps as Mozilla.
> Mix of tabs and spaces

Fixed.
 
> app.js:
> To avoid DRY, replace:

Nitpicky me: you don't want to avoid DRY, you WANT it: you want "don't repeat yourself" :-)

> var term = searchInput.value;
> if (term.length === 0) {
>   term = defaultSearchTerm;
> }
> 
> with
> 
> var term = searchInput.value;
> if (term.length === 0) {
>   term = searchInput.placeholder;
> }

good catch, fixed!

> ::: js/app.js
> @@ +5,3 @@
> >    var errorMsg = document.getElementById('error');
> >    var searchInput = document.getElementById('term');
> >    var searchButton = document.getElementById('search');
> 
> searchButton is unused.
> 
> We should promote 'use strict';
> 
> Maybe lint this file too? (that's how I found out searchButton was unused)
> 
> @@ +11,3 @@
> >    var form = document.querySelector('form');
> > +
> > +  // Forms will take the values in the input fields their contain
> 
> the input fields *they* contain

Fixed

> @@ +40,5 @@
> >        request.abort();
> >      }
> >  
> >  
> > +    results.textContent = translate('searching');
> 
> You need to do results.hidden = false too.

fixed!

> @@ +65,2 @@
> >  
> >      request.onerror = function(e) {
> 
> This should be a separate function to improve readability of the code.
> 
> @@ +70,5 @@
> >        }
> >        showError(errorMessage);
> >      };
> >  
> >      request.onload = function() {
> 
> Same for this onload function.
> 

Done!

> @@ +73,5 @@
> >  
> >      request.onload = function() {
> >  
> > +      results.textContent = '';
> > +      results.hidden = false;
> 
> This should be done at the end. This will improve rendering time. I would
> also add a comment like: "Now that the content is in place, we can display
> it."
> 

I moved it down and added a comment, but I am curious about the 'improved rendering time' mention. As far as I understand, we are processing all the results from the request in this function and only when we return from it and hand execution back to the browser, it will do its rendering thingies.

Therefore, it shouldn't matter whether we show the element first and then fill it in with data or whether we fill the element and then show it--there would only be ONE layout invalidation whenever the browser is 'free' to render again. Is that correct?

> @@ +81,3 @@
> >        
> > +      if(response !== null) {
> > +        documents = response.documents;
> 
> Do an early return that displays the error element.
> 
> @@ +82,5 @@
> > +      if(response !== null) {
> > +        documents = response.documents;
> > +      }
> > +      
> > +      if(response !== null && documents.length) {
> 
> I'd prefer to treat the no documents case first, with an early return.
> 

Yeah, I restructured the flow so it's simpler, less nesting!

> @@ +86,5 @@
> > +      if(response !== null && documents.length) {
> > +
> > +        documents.forEach(function(doc) {
> > +
> > +          var h2 = document.createElement('h2');
> 
> Move this just before h2.appendChild(docLink).

Done! it's more cohesive now.

> 
> @@ +106,5 @@
> > +          // and then open the link but in a new window.
> > +          docLink.addEventListener('click', function(e) {
> > +            e.preventDefault();
> > +            window.open(this.href, 'overlay');
> > +          }, false);
> 
> You can drop the false, it's not required anymore.

Deleted it, but... not required at all, ever, in the future history of browsers?
Comment on attachment 8427056
Revised template code

Review of attachment 8427056:
-----------------------------------------------------------------

The comments I left this time are pretty opinionated so you can choose to follow them or not.

::: js/app.js
@@ +1,1 @@
>  window.onload = function() {

I forgot to point out that this is probably a good occasion to use DOMContentLoaded rather than onload.

@@ +69,5 @@
> +    // We're setting some handlers here for dealing with both error and
> +    // data received. We could just declare the functions here, but they are in
> +    // separate functions so that search() is shorter, and more readable.
> +    request.onerror = onRequestError;
> +    request.onload = onRequestLoad;

I'd prefer using the addEventListener version here. In general, we should avoid teaching those stupid onfoo thingies.

@@ +105,4 @@
>  
> +      var p = document.createElement('p');
> +      p.textContent = translate('search_no_results');
> +      results.appendChild(p);

I'd create a very short and sweet showNoResults function and do an early return here. That will save you an indentation level and make the flow clearer.

@@ +127,5 @@
> +        // doing their usual thing using preventDefault(),
> +        // and then open the link but in a new window.
> +        docLink.addEventListener('click', function(e) {
> +          e.preventDefault();
> +          window.open(this.href, 'overlay');

Can you use evt instead of e (clearer) and evt.target.href instead of this.href? (It will avoid confusing errors if someone does a for loop instead of using foreach).
(In reply to Soledad Penades [:sole] [:spenades] from comment #10)
> Nitpicky me: you don't want to avoid DRY, you WANT it: you want "don't
> repeat yourself" :-)
English is not my native language, unlike you! :P

> I moved it down and added a comment, but I am curious about the 'improved
> rendering time' mention. As far as I understand, we are processing all the
> results from the request in this function and only when we return from it
> and hand execution back to the browser, it will do its rendering thingies.
> 
> Therefore, it shouldn't matter whether we show the element first and then
> fill it in with data or whether we fill the element and then show it--there
> would only be ONE layout invalidation whenever the browser is 'free' to
> render again. Is that correct?
Yes in this case, there is no difference, my comment was misguided. But if there was some kind of async method, it would cost more. So I feel it is a better flow in terms of what the app will do.

> Deleted it, but... not required at all, ever, in the future history of
> browsers?
http://www.w3.org/TR/DOM-Level-3-Events/#widl-EventTarget-addEventListener -> useCapture: optional
Since this app is meant for educational purpose, it may be good to briefly explain that .textContent and .appendChild() are used instead of .innerHTML() for security reasons and provide a link to this page: https://developer.mozilla.org/en-US/docs/Web/API/Element.innerHTML#Security_considerations

The l10n.js file has got some hacks using eval() in the code targeting old browsers but it's specified that this part of the code is not used in Firefox OS, I guess this warning is explicit enough.
(In reply to Anthony Ricaud (:rik) from comment #11)
> Comment on attachment 8427056
> Revised template code
> 
> Review of attachment 8427056:
> -----------------------------------------------------------------
> 
> 
> ::: js/app.js
> @@ +1,1 @@
> >  window.onload = function() {
> 
> I forgot to point out that this is probably a good occasion to use
> DOMContentLoaded rather than onload. 

Good point! Fixed!

> @@ +69,5 @@
> > +    // We're setting some handlers here for dealing with both error and
> > +    // data received. We could just declare the functions here, but they are in
> > +    // separate functions so that search() is shorter, and more readable.
> > +    request.onerror = onRequestError;
> > +    request.onload = onRequestLoad;
> 
> I'd prefer using the addEventListener version here. In general, we should
> avoid teaching those stupid onfoo thingies.

I fixed it and will try to update it in MDN too because... that's how it's documented there too!
 
> @@ +105,4 @@
> >  
> > +      var p = document.createElement('p');
> > +      p.textContent = translate('search_no_results');
> > +      results.appendChild(p);
> 
> I'd create a very short and sweet showNoResults function and do an early
> return here. That will save you an indentation level and make the flow
> clearer.

I'm going to not heed your advice here because it would be a too "short and sweet" function and it's another level of indirection when following the flow of this template. It's hard to keep track of the "stack" when you're starting, and it's not like we're at 10 nested levels! :-)

> @@ +127,5 @@
> > +        // doing their usual thing using preventDefault(),
> > +        // and then open the link but in a new window.
> > +        docLink.addEventListener('click', function(e) {
> > +          e.preventDefault();
> > +          window.open(this.href, 'overlay');
> 
> Can you use evt instead of e (clearer) and evt.target.href instead of
> this.href? (It will avoid confusing errors if someone does a for loop
> instead of using foreach).

Good point too, fixed!

Let me address Stephanie's comments and the l10n updates and I'll add another patch for r?
Created attachment 8435809
review-2.patch

This incorporates all the fixes for all the revisions. I think we're pretty much done here :fingerscrossed:
Comment on attachment 8435809
review-2.patch

Review of attachment 8435809:
-----------------------------------------------------------------

::: js/app.js
@@ +1,1 @@
> +window.addEventListener('DOMContentLoaded', function() {

Maybe a short explanation of DOMContentLoaded and a link to MDN?
It's all done in review-3:
https://github.com/mozilla/mortar-privileged-app-stub/commit/56c1b4ad24795b1180b156f0a1783347d3b1ae2a

Thanks for all the help Rik, Stephanie and Stas :-)


Provide "privileged app stub" that demonstrates using privileged permissions in an app for App Manager

