Created attachment 8453460
Patch

This is going to test the webapprt update service.

The test I've built installs an app, modifies the update interval to be 1 second and checks if the webapp runtime does a request to get the manifest and the new package (if it does, then this means it has called checkForUpdate, download, etc.).

I wanted to test that the update was actually prepared, but I couldn't find a safe way to do it.

Created attachment 8453460
Patch

This is going to test the webapprt update service.

The test I've built installs an app, modifies the update interval to be 1 second and checks if the webapp runtime does a request to get the manifest and the new package (if it does, then this means it has called checkForUpdate, download, etc.).

I wanted to test that the update was actually prepared, but I couldn't find a safe way to do it.
Created attachment 8453491
Patch

I forgot to add the manifest.webapp file to the patch.
Comment on attachment 8453491
Patch

Review of attachment 8453491:
-----------------------------------------------------------------

::: toolkit/webapps/tests/app.sjs
@@ +113,5 @@
> +  }
> +
> +  if ("getPackageQueries" in query) {
> +    response.setHeader("Content-Type", "text/plain", false);
> +    response.write(String(Number(getState("getPackageQueries"))));

Why convert it to a number only to convert it back to a string?  It should already be the appropriate string, given the code that sets it above.

(Also, response.write will probably stringify a number correctly anyway, so even if we needed to convert it to a number, we probably wouldn't need to convert it back to a string.)

::: toolkit/webapps/tests/test_packaged_update_service.xul
@@ +94,5 @@
> +  let profileDir = OS.Path.join(testAppInfo.installPath, profileRelPath);
> +
> +  // Force the update timer to fire in 1 second
> +  let prefsFile = OS.Path.join(profileDir, "prefs.js");
> +  yield writeToFile(prefsFile, "user_pref(\"webapprt.app_update_interval\", 1);");

Given this interval, which is the same amount of time we wait while PackageQueries or ManifestQueries don't have their expected values (or the app hasn't been closed yet), could another update request race the first one while we're running the test?

Perhaps a better approach would be to move the updateTimer callback to a public method of the WebappRT object:

this.WebappRT = {
  …
  startUpdateService: function() {
    …
    timerManager.registerTimer("updateTimer", this.checkForUpdate.bind(this), 24 * 60 * 60);
  },
  
  checkForUpdate: function() {
    …
  },
};

Then call it directly from the test:

  WebappRT.checkForUpdate();

That wouldn't ensure that the timer manager correctly calls the callback; but that seems like it should be the responsibility of a timer manager test anyway.  Whereas our concern here is making sure our callback behaves as expected.

::: webapprt/WebappRT.jsm
@@ +94,5 @@
> +      try {
> +        this._updateInterval = Services.prefs.getIntPref("webapprt.app_update_interval");
> +      } catch (e) {
> +        this._updateInterval = 24 * 60 * 60;
> +      }

Instead of catching an exception if the pref doesn't exist, add it to the default prefs file in webapprt/prefs.js.
(In reply to Myk Melez [:myk] [@mykmelez] from comment #2)
> Comment on attachment 8453491
> Patch
> 
> Review of attachment 8453491:
> -----------------------------------------------------------------
> 
> ::: toolkit/webapps/tests/app.sjs
> @@ +113,5 @@
> > +  }
> > +
> > +  if ("getPackageQueries" in query) {
> > +    response.setHeader("Content-Type", "text/plain", false);
> > +    response.write(String(Number(getState("getPackageQueries"))));
> 
> Why convert it to a number only to convert it back to a string?  It should
> already be the appropriate string, given the code that sets it above.
> 
> (Also, response.write will probably stringify a number correctly anyway, so
> even if we needed to convert it to a number, we probably wouldn't need to
> convert it back to a string.)

I did this because I wanted it to return 0 the first time (otherwise it returns "").
Passing a number to response.write didn't work.

> 
> ::: toolkit/webapps/tests/test_packaged_update_service.xul
> @@ +94,5 @@
> > +  let profileDir = OS.Path.join(testAppInfo.installPath, profileRelPath);
> > +
> > +  // Force the update timer to fire in 1 second
> > +  let prefsFile = OS.Path.join(profileDir, "prefs.js");
> > +  yield writeToFile(prefsFile, "user_pref(\"webapprt.app_update_interval\", 1);");
> 
> Given this interval, which is the same amount of time we wait while
> PackageQueries or ManifestQueries don't have their expected values (or the
> app hasn't been closed yet), could another update request race the first one
> while we're running the test?

Yes, I think it may happen. We could modify the test to check >= 2 instead of == 2.

> Perhaps a better approach would be to move the updateTimer callback to a
> public method of the WebappRT object:
> 
> this.WebappRT = {
>   …
>   startUpdateService: function() {
>     …
>     timerManager.registerTimer("updateTimer",
> this.checkForUpdate.bind(this), 24 * 60 * 60);
>   },
>   
>   checkForUpdate: function() {
>     …
>   },
> };
> 
> Then call it directly from the test:
> 
>   WebappRT.checkForUpdate();
> 
> That wouldn't ensure that the timer manager correctly calls the callback;
> but that seems like it should be the responsibility of a timer manager test
> anyway.  Whereas our concern here is making sure our callback behaves as
> expected.

The problem is that we're in a different process, so we can't call WebappRT methods.

> 
> ::: webapprt/WebappRT.jsm
> @@ +94,5 @@
> > +      try {
> > +        this._updateInterval = Services.prefs.getIntPref("webapprt.app_update_interval");
> > +      } catch (e) {
> > +        this._updateInterval = 24 * 60 * 60;
> > +      }
> 
> Instead of catching an exception if the pref doesn't exist, add it to the
> default prefs file in webapprt/prefs.js.

Right ;)
Created attachment 8454210
Patch

Added the equivalent hosted test and made sure this works on all platforms.
Comment on attachment 8454210
Patch

Review of attachment 8454210:
-----------------------------------------------------------------

Please push this to tryserver before landing it!  I want to make sure it also succeeds on the slower machines in the build farm.
I already did: https://tbpl.mozilla.org/?tree=Try&rev=490c7ea3bedd (I've never seen a try run so blue!)

https://hg.mozilla.org/integration/mozilla-inbound/rev/89076de4e3c3
https://hg.mozilla.org/mozilla-central/rev/89076de4e3c3


Test webapp runtime update service



Bug 1036717 - Test webapp runtime update service. r=myk 