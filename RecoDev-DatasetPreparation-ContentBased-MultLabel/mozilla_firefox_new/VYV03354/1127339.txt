User Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:35.0) Gecko/20100101 Firefox/35.0
Build ID: 20150125222139

Steps to reproduce:

Using Firefox for Ubuntu version 35.0.1, on Ubuntu 12.04.
Cipherfox add-on installed
Following security related config values set:
security.tls.version.min;2
security.ssl3.ecdhe_ecdsa_rc4_128_sha;false
security.ssl3.ecdhe_rsa_rc4_128_sha;false
security.ssl3.rsa_rc4_128_md5;false
security.ssl3.rsa_rc4_128_sha;false
extensions.cipherfox.disable_rc4;true



Actual results:

Every time I visit a page that uses TLS 1.1 or TLS 1.0 I get an error message (which is ok, because as above minimum TLS version is set to value 2) but error message says:
"Firefox cannot guarantee the safety of your data on [sitename] because it uses SSLv3, a broken security protocol.
Advanced info: ssl_error_no_cypher_overlap"

This error message is wrong because it appears also for sites using TLS 1.0 and not just for sites using ssl v3.


Expected results:

An error message that says e.g. ssl_error_no_cypher_overlap, (as in previous versions of FF) and nothing about ssl v3.

On debian 7.0 with Iceweasel 31.3.0 (no cipherfox) and above security configs the error message is correct saying:
An error occurred during a connection to [sitename]. Cannot communicate securely with peer: no common encryption algorithm(s). (Error code: ssl_error_no_cypher_overlap)

User Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:35.0) Gecko/20100101 Firefox/35.0
Build ID: 20150125222139

Steps to reproduce:

Using Firefox for Ubuntu version 35.0.1, on Ubuntu 12.04.
Cipherfox add-on installed
Following security related config values set:
security.tls.version.min;2
security.ssl3.ecdhe_ecdsa_rc4_128_sha;false
security.ssl3.ecdhe_rsa_rc4_128_sha;false
security.ssl3.rsa_rc4_128_md5;false
security.ssl3.rsa_rc4_128_sha;false
extensions.cipherfox.disable_rc4;true



Actual results:

Every time I visit a page that uses TLS 1.1 or TLS 1.0 I get an error message (which is ok, because as above minimum TLS version is set to value 2) but error message says:
"Firefox cannot guarantee the safety of your data on [sitename] because it uses SSLv3, a broken security protocol.
Advanced info: ssl_error_no_cypher_overlap"

This error message is wrong because it appears also for sites using TLS 1.0 and not just for sites using ssl v3.


Expected results:

An error message that says e.g. ssl_error_no_cypher_overlap, (as in previous versions of FF) and nothing about ssl v3.

On debian 7.0 with Iceweasel 31.3.0 (no cipherfox) and above security configs the error message is correct saying:
An error occurred during a connection to [sitename]. Cannot communicate securely with peer: no common encryption algorithm(s). (Error code: ssl_error_no_cypher_overlap)
EDIT: Of course it appears only for TLS 1.0 sites (as security.tls.version.min;2 means TLS 1.1 is the minimum required version)
Either bug 1054349 or bug 1084669 is needed to get the SSL version that the server tried to negotiate.
But we can display a generic SSL error page if "security.tls.version.min/max" is not default.
To be clear, I would expect this to no longer be the case in 36 already. Are my expectations not correct?

(you can test using https://www.mozilla.org/en-US/firefox/channel/#beta )
(In reply to :Gijs Kruitbosch from comment #4)
> To be clear, I would expect this to no longer be the case in 36 already. Are
> my expectations not correct?

Not correct, because the fix for bug 1113780 works only if "security.tls.version.min/max" is set to default.
SSL_ERROR_UNSUPPORTED_VERSION is not limited to SSLv3.
:-(
Created attachment 8562606
Detect SSLv3-only server in PSM

Set STATE_USES_SSL_3 only if "security.tls.version.min" is 1 because otherwise we don't know the precise ServerHelloVersion.
Created attachment 8562608
Move SSLv3 detection out of aboutNetError.xhtml
Comment on attachment 8562608
Move SSLv3 detection out of aboutNetError.xhtml

Review of attachment 8562608:
-----------------------------------------------------------------

AIUI, if we're using a separate error code (rather than the generic nssFailure2) we shouldn't need the separate if statement (almost?) at all anymore - we should be able to just name the short & long description containers with the appropriate ID, and things should Just Work... (the only reason we might continue to need it is to fill in the appropriate error code in the <span>, AIUI)
(In reply to :Gijs Kruitbosch from comment #9)
> (the only
> reason we might continue to need it is to fill in the appropriate error code
> in the <span>, AIUI)

And adding "sslv3" attribute to select "aboutNetError_alert.svg". Is it possible without using an if statement here?
Moreover, getDescription() will not return an expected text because SSL_ERROR_UNSUPPORTED_VERSION is not dedicated for SSLv3 as I already said.
(In reply to Masatoshi Kimura [:emk] from comment #10)
> (In reply to :Gijs Kruitbosch from comment #9)
> > (the only
> > reason we might continue to need it is to fill in the appropriate error code
> > in the <span>, AIUI)
> 
> And adding "sslv3" attribute to select "aboutNetError_alert.svg". Is it
> possible without using an if statement here?

We could set an attribute like "errorID" on the container for all errors, and then style it with CSS, without resorting to an if statement. However, I think we might still need logic here for the "learn more" button...

> Moreover, getDescription() will not return an expected text because
> SSL_ERROR_UNSUPPORTED_VERSION is not dedicated for SSLv3 as I already said.

But your patch isn't changing which text is being used (ie there are no l10n changes), so I'm afraid I don't follow what you're saying.

The ideal end-state is that we should be getting rid of as much of the if statement's contents as possible (I guess the icon and the button will still need some extra logic for this case), and the specific error for SSLv3 should be treated like any of the other errors, with all the relevant localized elements (et_, esd_, ed_) having the ID corresponding to the error message so they get picked up by getDescription() and friends.

Right now, the only time when we get the "oldSecurityProtocol" error (if I understand your PSM+docshell patch correctly - please let me know if I'm missing something!) is if the site is using SSLv3 and we don't support it, so continuing to use those strings seems appropriate.

If we want a separate error for other cases of SSL_ERROR_UNSUPPORTED_VERSION then we should add more strings and more error codes. We should try to persist in having a user-friendly SSLv3 message considering that's the most common case (rather than people manually changing their tls requirements in about:config).
Comment on attachment 8562606
Detect SSLv3-only server in PSM

Review of attachment 8562606:
-----------------------------------------------------------------

Looks good to me, but you should get a quick review from a docshell peer.

::: security/manager/ssl/src/nsNSSIOLayer.cpp
@@ +1166,5 @@
>    // Note this only happens during the initial SSL handshake.
>  
>    SSLVersionRange range = socketInfo->GetTLSVersionRange();
> +  if (err == SSL_ERROR_UNSUPPORTED_VERSION &&
> +      range.min == SSL_LIBRARY_VERSION_TLS_1_0) {

Will this display a misleading error message if the user has changed their preferences to (e.g.) disable TLS 1.2 and they encounter a server that only supports TLS 1.2? If so, I think it's probably ok to not support this non-standard configuration, but it's something we should be aware of, in any case.
(In reply to David Keeler [:keeler] (use needinfo?) from comment #12)
> Looks good to me, but you should get a quick review from a docshell peer.

Probably more changes to docshell would be needed to resolve comments from :Gijs. I'll attach a new separate patch to docshell.

> ::: security/manager/ssl/src/nsNSSIOLayer.cpp
> @@ +1166,5 @@
> >    // Note this only happens during the initial SSL handshake.
> >  
> >    SSLVersionRange range = socketInfo->GetTLSVersionRange();
> > +  if (err == SSL_ERROR_UNSUPPORTED_VERSION &&
> > +      range.min == SSL_LIBRARY_VERSION_TLS_1_0) {
> 
> Will this display a misleading error message if the user has changed their
> preferences to (e.g.) disable TLS 1.2 and they encounter a server that only
> supports TLS 1.2? If so, I think it's probably ok to not support this
> non-standard configuration, but it's something we should be aware of, in any
> case.

In that case, the server should refuse handshake with protocol_version alert that will be mapped to SSL_ERROR_PROTOCOL_VERSION_ALERT in NSS. But, of course, some broken servers may not handle the version mismatch correctly, as everyone knows :)

On the other hand, when TLS 1.0 or lower is disabled, the server can not determine if the peer supports TLS 1.0 because ClientHello does not include the lowest supported version. So it's our responsibility to check the version in ServerHello and fail the handshake if it is inappropriate.
*** Bug 1133101 has been marked as a duplicate of this bug. ***
Created attachment 8564473
docshell change
Created attachment 8564474
UI changes (WIP)

oldSecurityProtocol.longDesc2 contained some markups, but error strings from appstrings.properties can not contain markups. So the hostname is no longer bolded. Also I hardcoded "Firefox" again because appstrings.properties is under browser/ and other strings in this file also hardcode "Firefox". Is this OK?
Comment on attachment 8564474
UI changes (WIP)

Review of attachment 8564474:
-----------------------------------------------------------------

Nice!
Created attachment 8564667
UI changes, v2
Comment on attachment 8564667
UI changes, v2

Review of attachment 8564667:
-----------------------------------------------------------------

r+ on the browser bits either way, but I do have a question/suggestion below...

Also, I think if this changes in appstrings.properties, for toolkit etc. compat you probably need to adjust the other appstrings.properties files, too, so as not to break other consumers? ( cf. http://mxr.mozilla.org/mozilla-central/search?string=remoteXUL&find=properties&findi=&filter=^[^\0]*%24&hitlimit=&tree=mozilla-central )

::: browser/locales/en-US/chrome/overrides/appstrings.properties
@@ +34,5 @@
>  cspBlocked=This page has a content security policy that prevents it from being loaded in this way.
>  corruptedContentError=The page you are trying to view cannot be shown because an error in the data transmission was detected.
>  remoteXUL=This page uses an unsupported technology that is no longer available by default in Firefox.
> +## LOCALIZATION NOTE (oldSecurityProtocol) - Do not translate "%S".
> +oldSecurityProtocol=Firefox cannot guarantee the safety of your data on %S because it uses SSLv3, a broken security protocol.

So, I'm a little confused that this is called "oldSecurityProtocol", which seems more generic (than just sslv3), and the bug is about issues regarding the text saying "ssl v3" even though there's an issue with something else, but the docshell change fixes this to really be specific to ssl v3, right? Should we pick a more specific error code to correspond to the ssl3 detection in docshell?
Comment on attachment 8564473
docshell change

r=me.  Sorry for the lag.  :(
https://treeherder.mozilla.org/#/jobs?repo=try&revision=fc5830ec1fab
Created attachment 8567459
Detect SSLv3-only server in PSM

Rebased
Created attachment 8567460
Assign a dedicated error code for SSLv3 in docshell

- Rebased.
- Changed the error code and added a message to dom/locales/en-US/chrome/appstrings.properties to align it with the next patxh.
Created attachment 8567461
Move SSLv3 detection out of aboutNetError.xhtml

(In reply to :Gijs Kruitbosch from comment #19)
> Also, I think if this changes in appstrings.properties, for toolkit etc.
> compat you probably need to adjust the other appstrings.properties files,
> too, so as not to break other consumers? ( cf.
> http://mxr.mozilla.org/mozilla-central/
> search?string=remoteXUL&find=properties&findi=&filter=^[^\0]*%24&hitlimit=&tr
> ee=mozilla-central )

Good catch, fixed.

> So, I'm a little confused that this is called "oldSecurityProtocol", which
> seems more generic (than just sslv3), and the bug is about issues regarding
> the text saying "ssl v3" even though there's an issue with something else,
> but the docshell change fixes this to really be specific to ssl v3, right?
> Should we pick a more specific error code to correspond to the ssl3
> detection in docshell?

I renamed it to "sslv3Used".
https://hg.mozilla.org/integration/mozilla-inbound/rev/4e11a8c6230e
https://hg.mozilla.org/integration/mozilla-inbound/rev/da3ca2b04b86
https://hg.mozilla.org/integration/mozilla-inbound/rev/01fb39cc4980
Comment on attachment 8567461
Move SSLv3 detection out of aboutNetError.xhtml

Review of attachment 8567461:
-----------------------------------------------------------------

Minor drive-by nits...

::: browser/locales/en-US/chrome/overrides/appstrings.properties
@@ +33,5 @@
>  phishingBlocked=The website at %S has been reported as a web forgery designed to trick users into sharing personal or financial information.
>  cspBlocked=This page has a content security policy that prevents it from being loaded in this way.
>  corruptedContentError=The page you are trying to view cannot be shown because an error in the data transmission was detected.
>  remoteXUL=This page uses an unsupported technology that is no longer available by default in Firefox.
> +## LOCALIZATION NOTE (oldSecurityProtocol) - Do not translate "%S".

s/oldSecurityProtocol/sslv3Used/

::: browser/locales/en-US/chrome/overrides/netError.dtd
@@ +205,5 @@
>  <!ENTITY remoteXUL.title "Remote XUL">
>  <!ENTITY remoteXUL.longDesc "<p><ul><li>Please contact the website owners to inform them of this problem.</li></ul></p>">
>  
> +<!ENTITY sslv3Used.title "Unable to Connect Securely">
> +<!-- LOCALIZATION NOTE (sslv3Used.advancedInfo) - Do not translate

s/sslv3Used.advancedInfo/sslv3Used.longDesc/
Oops, fixed the comments. Thanks for pointing out.
https://hg.mozilla.org/integration/mozilla-inbound/rev/65af65cf5021
https://hg.mozilla.org/mozilla-central/rev/4e11a8c6230e
https://hg.mozilla.org/mozilla-central/rev/da3ca2b04b86
https://hg.mozilla.org/mozilla-central/rev/01fb39cc4980
https://hg.mozilla.org/mozilla-central/rev/65af65cf5021
This patch removes the span with the errorcode, which was at least used in our Mozmill test to determine the error, which is shown. With that removal it's no longer possible to do that easily. Was that on purpose or by accident?
(In reply to Henrik Skupin (:whimboo) from comment #29)
> This patch removes the span with the errorcode, which was at least used in
> our Mozmill test to determine the error, which is shown. With that removal
> it's no longer possible to do that easily.

what's wrong with whateverNode.textContent.contains('ssl_error_unsupported_version'); ?

> Was that on purpose or by
> accident?

On purpose.
(In reply to Henrik Skupin (:whimboo) from comment #29)
> This patch removes the span with the errorcode, which was at least used in
> our Mozmill test to determine the error, which is shown. With that removal
> it's no longer possible to do that easily. Was that on purpose or by
> accident?

See comment #16. The new strings can no longer contain markups. Before bug 1098371, the span was not present, so I don't think it's too difficult to find the error code.
Thank you both for the answer. That clarifies it and we will check if the code is contained.


SSLv3 error page is shown even for cases where the issue is a mismatch between supported TLS ranges



Bug 1127339 - Detect SSLv3-only server in PSM. r=keeler 

Bug 1127339 - Assign a dedicated error code for SSLv3 in docshell. r=bz 

Bug 1127339 - Move SSLv3 detection out of aboutNetError.xhtml. r=gijs 

Bug 1127339 - Followup to fix comments. DONTBUILD 