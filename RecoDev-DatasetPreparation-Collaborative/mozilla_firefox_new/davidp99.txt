gmail.com

Bug 1009628 - Part 1: Need mozAfterRemotePaint event for remote iframes. r=smaug. 
Bug 1009628 - Part 1: Need mozAfterRemotePaint event for remote iframes. r=smaug. 
Bug 1041695 - Run ShadowLayersForwarder::ReleaseTexture on worker thread r=nical 
Bug 1041695 - Make ShadowLayersForwarder::RemoveTexture run on worker thread, as required by TextureClient::Finalize. r=nical 
Bug 1008759 - Blocklist D2D on NVidia 310M, even when it is believed to be the secondary GPU. r=bjacob 

have to wait until bug 918634 is fixed. change array indices. 
Had caused a crash in the test_streams_element_capture mochitest on Windows.  The issue was that the audio decoder thread was destroying stale media frames by releasing a reference to them.  This was causing the release of an Image on that thread, but that thread does not process a MessageLoop so the current MessageLoop is null.  This is not a problem.  Obviously, any thread that has no MessageLoop can't be the worker thread. 
Had caused a crash in the test_streams_element_capture mochitest on Windows.  The issue was that the audio decoder thread was destroying stale media frames by releasing a reference to them.  This was causing the release of an Image on that thread, but that thread does not process a MessageLoop so the current MessageLoop is null.  This is not a problem.  Obviously, any thread that has no MessageLoop can't be the worker thread. 

Bug 918634 - swapFrameLoader not implemented for e10s r=nicalAllow layers to change layermanager if using LayerManagerComposite. 

Bug 918634 - swapFrameLoader not implemented for e10s.  Frameloader impl. r=smaug Modern OSs adjust process scheduling based on CPU-boundedness and Interface-boundedness.  A process performing a lot of UI tasks requires lower-latency than a CPU-bound process.  For this reason, at least on Windows (but probably also Linux and Mac), in e10s, resize events are sent at a much higher rate than non-e10s, where the main process has to do the work to respond to them.  This was supposed to be handled by the 'compress' option in IPDL but its duplicate-event test was very imprecise - it only tested the *oldest* message in the queue.  This patch searches the messagequeue/deque to remove *any* duplicate.  deque::erase is linear but this is a very uncommon case - currently only two compressed IPDL messages exist in the entire code base.  Also, these queues are small. 
OSX main-window status. 
In e10s, each nsFocusManger (main/chrome and content/tab) operates on its own content tree with its own InputContext.  They also communicate their InputContexts with the OS widget (nsChildView on mac, nsWindow on Windows).  Prior to this patch, the OS widgets didn't distinguish between main and content InputContexts.  When GetInputContext was called on the OS widget, it would return whatever InputContext it had set last.  This patch distinguishes between InputContexts in the widget. 
DisableSecureEventInput should probably be removed. 
Make the PBrowser::SetInputContext message synchronous when remote browsing. 
OSX main-window status. 
In e10s, each nsFocusManger (main/chrome and content/tab) operates on its own content tree with its own InputContext.  They also communicate their InputContexts with the OS widget (nsChildView on mac, nsWindow on Windows).  Prior to this patch, the OS widgets didn't distinguish between main and content InputContexts.  When GetInputContext was called on the OS widget, it would return whatever InputContext it had set last.  This patch distinguishes between InputContexts in the widget. 
DisableSecureEventInput should probably be removed. 
PuppetWidget::WidgetToScreenOffset now reports proper widget screen location.  Previously, in the content process, all widgets were defined to be located at the screen origin.  This also repairs mac e10s OOP plugin coordinate calculations that would be broken by this change. 
event. 
PuppetWidget::WidgetToScreenOffset now reports proper widget screen location.  Previously, in the content process, all widgets were defined to be located at the screen origin.  This also repairs mac e10s OOP plugin coordinate calculations that would be broken by this change. 
event. 
Tooltip math was not HiDPI-ready.  Bug is exposed by this patch. 
mapScreenCoordinatesFromContent is now wrong, unnecessary, and gone. 
and incorrect, math in favor of other better functions. 
whose calculation compensates for the OS window decoration. 
Bug 1075670 - Make PuppetWidget::WidgetToScreenOffset use proper screen position r=josh 
Bug 1075670 - Use MozUpdateWindowPos event to notify content process of window move r=smaug 
Bug 1075670 - Make tooltips respect HiDPI displays r=smaug 
Bug 1075670 - Remove mapScreenCoordinatesFromContent as it is legacy behavior r=billm 
Bug 1075670 - Cleanup content process widget-chrome behavior r=smaug 
Bug 1075670 - Fix PuppetWidget calculations wrt client offset r=smaug 
were only removed if they were adjacent in the message queue. 
process. 
PuppetWidget::WidgetToScreenOffset now reports proper widget screen location. Previously, in the content process, all widgets were defined to be located at the screen origin. This also repairs mac e10s OOP plugin coordinate calculations that would be broken by this change. 
TabParents now register for the MozUpdateWindowPos event on the chrome TopWindowRoot. When the window is moved, the OS widget calls WindowMoved on its listener (the nsWebShellWindow), which sends a MozUpdateWindowPos event. 
Tooltip math was not HiDPI-ready. Bug is exposed by this patch. 
mapScreenCoordinatesFromContent is now wrong, unnecessary, and gone. 
Math for window chrome calculation was off on Linux. Removed redundant, and incorrect, math in favor of other better functions. 
Change the PuppetWidget from defining screen coordinates from tab-content-relative to being based on actual screen geometry. PuppetWidgets can have position. In the parent process, the widget has a position and a separate client position (that includes OS window chrome... on Linux and Windows as others have no chrome). In the child process, the widget (non-origin) position, whose calculation compensates for the OS window decoration. 
On B2G, the primary frame for tab content was not giving the correct process offset so we revert back to the mechanism we used to have in nsSubdocumentFrame. 
to report NO when the focus would instead go to a sheet 'child window'. 
PuppetWidget::WidgetToScreenOffset now reports proper widget screen location. Previously, in the content process, all widgets were defined to be located at the screen origin. This also repairs mac e10s OOP plugin coordinate calculations that would be broken by this change. 
TabParents now register for the MozUpdateWindowPos event on the chrome TopWindowRoot.  When the window is moved, the OS widget calls WindowMoved on its listener (the nsWebShellWindow), which sends a MozUpdateWindowPos event. 
Tooltip math was not HiDPI-ready. Bug is exposed by this patch. 
mapScreenCoordinatesFromContent is now wrong, unnecessary, and gone. 
Math for window chrome calculation was off on Linux. Removed redundant, and incorrect, math in favor of other better functions. 
Change the PuppetWidget from defining screen coordinates from tab-content-relative to being based on actual screen geometry. PuppetWidgets can have position. In the parent process, the widget has a position and a separate client position (that includes OS window chrome... on Linux and Windows as others have no chrome). In the child process, the widget (non-origin) position, whose calculation compensates for the OS window decoration. 
On B2G, the primary frame for tab content was not giving the correct process offset so we revert back to the mechanism we used to have in nsSubdocumentFrame. 
Removed theEvent from the message. 
code could result in improper IME configuration. 
Bug 1075670 - Make event.screen[XY] work in content processes (r=smaug,kats,tn,joshmoz) 
when dragging tabs between windows. 
The widget now sets its cursor whenever it gets a WM_SETCURSOR call when over content.  This message is sent by the OS e.g. when the cursor enters or leaves window chrome or the area outside of the window. 
immediately forwarded to the widget. 
not be wired to the PuppetWidget. 

Bug 1083365 - Tag NS_MOUSE_EXIT messages as eTopLevel when sending to child process. (r=smaug)WidgetMouseEvent::eTopLevel to avoid the filtering. 
Bug 1152585 - Implement GetClientOffset in nsChildView to fix child offset calculation when drawInTitlebar=false r=mstange 
(the result is what OS X calls point coordinates) so that this doesn't happen. 
using nsContentUtils.  This provides a solution to the problem of finding remote PBrowsers generally. 
(the result is what OS X calls point coordinates) so that this doesn't happen. 
using nsContentUtils.  This provides a solution to the problem of finding remote PBrowsers generally. 
content scales (ie. HiDPI vs LowDPI). 

Bug 1220752 - Fix and enable browser_bug1058164.js for e10s now that bug 918634 has landed. r=mrbkap