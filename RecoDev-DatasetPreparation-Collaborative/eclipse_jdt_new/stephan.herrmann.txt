berlin.de

Bug 478848: [compiler] Capture of array cannot be used as the collection in an enhanced for loop 
Bug 466291: IAE on renaming the location for external annotation attachment - validation 
Bug 482440: Lambda overload resolution with generic lambda method 
Bug 483744: [null] NPE in ClassFileReader.hasStructuralTypeAnnotationChanges 
Bug 369079: [null] Allow multiple null annotations - command line option for the batch compiler 
Bug 466291: IAE on renaming the location for external annotation attachment - immediate fix for the IllegalArgumentException 
Bug 369079: [null] Allow multiple null annotations 
Bug 483527: [null] NullPointerException in expireNullCheckedFieldInfo 
Bug 483467: Stackoverflow on autocomplete with lamdas 
Bug 217223: Enable APIDocumentationTests#test001 - cleanup 
Bug 217223: Enable APIDocumentationTests#test001 - experiment to make this test work during SDK builds 
Bug 217223: Enable APIDocumentationTests#test001 
Bug 480462: [null] Cannot add external annotations to Guava libraries 
Bug 482228 - [1.8][null] detect incompatible null constraints on type parameter of overriding method 
Bug 481276: [null] Error markers not removed after fixing some null annotations 
Bug 483146: [null] Odd behavior passing @NonNull to unconstrained parameter 
Bug 482791: [null] NullPointerException when saving empty external annotation file (.eea) 
Bug 482075: [compiler][null] Loosing @NonNull information when passing implicit @NonNull fields to methods 
Bug 482247 - [compiler][null] Empty arrays should satisfy @NonNull Type[] 

Bug 482247 - [compiler][null] Empty arrays should satisfy @NonNull Type[] Bug 477719 - [null] compiler should know that Object.getClass() always returns nonnull 
Bug 482416: [1.8][inference] Compiler Regression in Mars.1 
Bug 481332 - [null] Inconsistent error reporting for annotated leaf type in generic method 
[Bug 472177] Massive increase in required memory for Java compilation - experimental fix 
Bug 477751 - [1.8][inference] Cannot infer nested generic invocation with lambda args for Function<T,U> 
Bug 479167 - [1.8][inference] Wrong type and call inferred in varargs method invocation 
Bug 478848: [compiler] Capture of array cannot be used as the collection in an enhanced for loop 
Bug 404648: [1.8][compiler] investigate differences between ECJ & Javac - remove obsolete mention of jre jars on classpath - add recommended "-Xlint" to see javac warnings 
Bug 404648: [1.8][compiler] investigate differences between ECJ & Javac - add more minor versions of javac 1.8.0 
Bug 478089: [1.8][inference] make names for InferenceVariables unique 
Bug 473657 - [1.8][compile] Bad type inference applied to raw type arguments when javac compiles code just fine 
Bug 472663 - [null][1.8] Wrong warning for method reference 
bug 474239 - [compiler][null] Null analysis does not handle switch statements correctly 
Bug 471280 - [1.8][compiler][inference] Potential bug in type inference 
bug 469753 - [1.8][inference] Lambda type inference problem 
Bug 469584 - ClassCastException in Annotation.detectStandardAnnotation (320) 
Bug 474081: ArrayIndexOutOfBoundsException in MethodInfoWithParameterAnnotations.getParameterAnnotations (25) 
Bug 470958 - [1.8] Unable to convert lambda 
Bug 467610 - bogus "mismatching null constraints" error when extending parameterized class 
Bug 470942: [1.8] Compilation error when using lambda 
Bug 463728: [1.8][compiler][inference] Ternary operator in lambda derives wrong type 
Bug 467567 - NPE in BindingKeyResolver.consumeLocalType 
Bug 470542: NullPointerException in ReferenceExpression.isPotentiallyCompatibleWith (962) 
Bug 470958 - [1.8] Unable to convert lambda 
bug 469753 - [1.8][inference] Lambda type inference problem 
Bug 436091 - [compiler][null] Null analysis can't seem to decide if a null warning should be emitted 
Bug 447661 - [1.8][null] Incorrect 'expression needs unchecked conversion' warning 
Bug 472618 - [compiler][null] assertNotNull vs. Assert.assertNotNull 
Bug 472426 - [1.8][inference] Type inference problem on overloaded methods - regression test 
Bug 471611 - Error on hover on call to generic method with null annotation 
Bug 471034 - Error creating external annotation on array parameter in "Type name[]" format 

Bug 471034 - Error creating external annotation on array parameter in "Type name[]" format Bug 471352 - Error creating external annotations after parameter with generic type <?> 
Bug 466487: [1.8] strage difference ecj<->javac regarding ternary in lambda body 
Bug 469653: [1.8][generics] Unexpected "Type mismatch: cannot convert" message that javac doesn't produce 
Bug 470826 - ECJ fails to infer generic type for Stream.collect without assignment 
Bug 468999: False compiler error: "The method is ambiguous" using lambda expression - corrected interpretation of "superinterface of" - align impl with editorial changes in JLS 
Bug 470942: [1.8] Compilation error when using lambda 
Bug 456584 - [1.8][null] Bogus warning for return type variable's @NonNull annotation being 'redundant' 
Bug 446217 - [null] @NonNullByDefault in package-info.java causes bogus "null type safety" warning 
Bug 464081 - [null] Error when specifying external annotation on argument 
Bug 467610 - bogus "mismatching null constraints" error when extending parameterized class 
Bug 470467 - [null] Nullness of special Enum methods not detected from .class file 
Bug 463728: [1.8][compiler][inference] Ternary operator in lambda derives wrong type 
Bug 235550 - [compiler][loop] definite unassignment analysis involving do and try statements 
Bug 467032 - TYPE_USE Null Annotations: IllegalStateException with annotated arrays of Enum when accessed via BinaryTypeBinding 
Bug 466713 - Null Annotations: NullPointerException using <int @Nullable []> as Type Param 
Bug 455180 - IllegalStateException in AnnotatableTypeSystem.getRawType 
Bug 466308 - [hovering] Javadoc header for parameter is wrong with annotation-based null analysis 
Bug 466279 - [hovering] IAE on hover when annotation-based null analysis is enabled 
Bug 465513 - [1.8][compiler] NPE in NullAnnotationMatching.mergeTypeAnnotations in ReferenceBinding.isFunctionalInterface 
Bug 429813 - [1.8][dom ast] IMethodBinding#getJavaElement() should return IMethod for lambda 
Bug 448709 - [1.8][null] ensure we don't infer types that violate null constraints on a type parameter's bound 
Bug 461878 - [1.7][1.8][compiler][null] ECJ compiler does not allow to use null annotations on annotations 
Bug 407414 - [compiler][null] Incorrect warning on a primitive type being null 
Bug 465296 - precedence of extra attributes on a classpath container 
Bug 464615 - [dom] ASTParser.createBindings() ignores parameterization of a method invocation 
Bug 464463 - [dom] DOMFinder doesn't find an ITypeParameter 
Bug 456532 - [1.8][null] ReferenceBinding.appendNullAnnotation() includes phantom annotations in error messages 
Bug 463330 - [dom] DOMFinder doesn't find the VariableBinding corresponding to a method argument 
Bug 459967 - [null] compiler should know about nullness of special methods like MyEnum.valueOf() 
Bug 462790 - [null] NPE in Expression.computeConversion() 
Bug 462768 - [null] NPE when using linked folder for external annotations - detect and log illegal use of a virtual folder for annotationpath - handle project root as annotationpath - improve tracking of unloaded/outdated classfiles - test 
Bug 396575 - [compiler][resources] Incorrect Errors/Warnings check for potential resource leak when surrounding with try-catch 
Bug 390064 - [compiler][resource] Resource leak warning missing when extending parameterized class 
Bug 440282 - [resource] Resource leak detection false negative with empty finally block 
Bug 444964 - [1.7+][resource] False resource leak warning (try-with-resources for ByteArrayOutputStream - return inside for loop) 
Bug 421035 - [resource] False alarm of resource leak warning when casting a closeable in its assignment 
Bug 463533 - Signature.getSignatureSimpleName() returns different results for resolved and unresolved extends 
Bug 371614 - [compiler][resource] Wrong "resource leak" problem on return/throw inside while loop - avoid double reporting by not resetting reporting bits - improve withdrawing of FTVs representing a twr-resource - use TagBits.IsResource to avoid re-creating an unwanted FTV 
Bug 463153 - [test][builder] test failures in BasicBuildTests and BuildPathTests - disable tests broken by bug 461838 
Bug 446691 - [1.8][null][compiler] NullPointerException in SingleNameReference.analyseCode 
Revert "Bug 410218 - Optional warning for arguments of "unexpected" types to Map#get(Object), Collection#remove(Object) et al. 
avoid warnings on incomplete enum switch (recently enabled) 
Bug 448709 - [1.8][null] ensure we don't infer types that violate null constraints on a type parameter's bound 
Bug 455945 [1.8][generics] Wrong compiler error reported when trying to infer generic type within a lambda 
Bug 408815 - [batch][null] Add CLI option for COMPILER_PB_SYNTACTIC_NULL_ANALYSIS_FOR_FIELDS 
Bug 410218 - Optional warning for arguments of "unexpected" types to Map#get(Object), Collection#remove(Object) et al. - change one option from [E/W/I] to [Enable/Disable] 
Bug 462083 - [1.8][inference] Java 8 generic return type mismatch with interface involving type parameter. 
Bug 462025 - [null][test] create tests for manipulating external null annotations - initial tests - fixed qualified name of nested type 
Bug 410218 - Optional warning for arguments of "unexpected" types to Map#get(Object), Collection#remove(Object) et al. 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - support manipulation of field types - fix annotation removal in one particular case 
Bug 437072 - [compiler][null] Null analysis emits possibly incorrect warning for new int[][] despite @NonNullByDefault 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - fix handling of two-line entry (lacking an annotated signature) (r/w) - fix scanning of types like "[I" - systematically throw IAE on structural mismatch & document this - handle case of lonely selector at EOF 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - fix reading of signatures already containing external annotations - avoid dependency from ecj to model (EAUtil) - provide more API for reading and applying external annotations 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - support parameter rewriting for Bug 458200 - bug fix for keeping existing annotation 

Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - support parameter rewriting for Bug 458200 - bug fix for keeping existing annotation Bug 461250 - ArrayIndexOutOfBoundsException in SourceTypeBinding.fields 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - fix assembly of annotatedSignature 
Bug 440687 - [compiler][batch][null] improve command line option for external annotations 
Fixed bug 458613 - [1.8] lambda not shown in quick type hierarchy 
Bug 459976 - [test][model]ExternalAnnotations18Test.test3 failed 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation Bug 440474 - [null] textual encoding of external null annotations 
Bug 458577 - IClassFile.getWorkingCopy() may lead to NPE in BecomeWorkingCopyOperation 
Bug 440474 - [null] textual encoding of external null annotations - full manipulation of annotations on any type details 
Bug 458577 - IClassFile.getWorkingCopy() may lead to NPE in BecomeWorkingCopyOperation - Fix for: ASTParser would create CU with wrong file path 
Bug 440474 - [null] textual encoding of external null annotations - more robust reading 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - better implementation of change tracking (scalable & with cleanup) 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - further improvements in change propagation   - hook into classpath change analysis   - fine tune resource change listener - make eea reading more robust against white space 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - avoid accessing an annotation file dir/annot.zip/pack/C.eea   if dir/annot.zip exists and is a file. 
Bug 458396 - NPE in CodeStream.invoke() 
Bug 440474 - [null] textual encoding of external null annotations - support annotations directly on a wildcard 
Bug 440474 - [null] textual encoding of external null annotations - withdraw keyword interface from header 
Bug 458577 - IClassFile.getWorkingCopy() may lead to NPE in BecomeWorkingCopyOperation 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - resolved a FIXME (internal key for fields) - trim optional trailing data 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - fixed a typo 
Merge branch 'master' into sherrmann/ExternalAnnotations 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - use annotation walker for external annotations also at 1.7- 
Bug 458361 - [1.8][null] reconciler throws NPE in ProblemReporter.illegalReturnRedefinition() 
Merge branch 'master' into sherrmann/ExternalAnnotations 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - copyright updates 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - participate in JavaModel change propagation - support workspace and external locations 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - utilities to support manipulation of .eea via quick fix 
Merge branch 'master' into sherrmann/ExternalAnnotations 
Bug 456508 - Unexpected RHS PolyTypeBinding for: <code-snippet> 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - support zipped annotations 
Bug 453475 - [1.8][null] Contradictory null annotations (4.5 M3 edition) 
Bug 439516 - [1.8][null] NonNullByDefault wrongly applied to implicit type bound of binary type 
Bug 445147 - [compiler] [null] java.lang.StackOverflowError with annotation-based null analysis enabled and recursive types 
Bug 456924 - StackOverflowError during compilation 
Bug 443870 - [null] ArrayIndexOutOfBoundsException in NullAnnotationMatching 
Bug 457210 - [1.8][compiler][null] Wrong Nullness errors given on full build build but not on incremental build? 
Bug 443870 - [null] ArrayIndexOutOfBoundsException in NullAnnotationMatching 
Bug 457079 - Regression: type inference 
Bug 440474 - [null] textual encoding of external null annotations - adjust 1 test to recent format change 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - configure a container for real host JRE in absence of jdt.launching 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - resolving of variables in external annotation path 
Merge remote-tracking branch 'origin/master' into sherrmann/ExternalAnnotations 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - avoid introducing some new API by using extraAttributes 
Bug 454182 - Internal compiler error when using 1.8 compliance for simple project 
Bug 456487 - [1.8][null] @Nullable type variant of @NonNull-constrained type parameter causes grief 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - optimization: create fewer walkers 
Bug 456459 - Discrepancy between Eclipse compiler and javac - Enums, interfaces, and generics 
Bug 440474 - [null] textual encoding of external null annotations - added support for type parameters (at class & method) 
Merge branch 'master' into sherrmann/ExternalAnnotations 
Bug 456497 - [1.8][null] during inference nullness from target type is lost against weaker hint from applicability analysis 
Merge remote-tracking branch 'origin/master' into sherrmann/ExternalAnnotations 
Bug 451660 - [compiler][null] Wrong "Null pointer access: The variable can only be null at this location" warning 
Bug 456236 - [1.8][null] Cannot infer type when constructor argument is annotated with @Nullable 
Bug 415790 - [compiler][resource]Incorrect potential resource leak warning in for loop with close in try/catch 
Bug 455723 - Nonnull argument not correctly inferred in loop 
Bug 436486 - AnnotationDiscoveryVisitor.resolveAnnotations causes unhappy processing order - extra safety to protect against changes from Bug 437414 
Bug 453475 - [1.8][null] Contradictory null annotations (4.5 M3 edition) 
Bug 455557 - [jdt] NPE LoopingFlowContext.recordNullReference 
Bug 454644 - Compiler fails to infer proper return type for noneOf() and copyOf() in EnumSet 
Bug 446442 - [1.8] merge null annotations from super methods 
Bug 454031 - [compiler][null][loop] bug in null analysis; wrong "dead code" detection 
Bug 450037 - [1.8][[compiler] Bogus error message: Unhandled exception type Object[] 
Bug 195638 - [compiler][null][refactoring] Wrong error : "Null pointer access: The variable xxx can only be null at this location " with try..catch in loop - additional tests challenging the solution from bug 453483 
Bug 453483 - [compiler][null][loop] Improve null analysis for loops  - update implementation tests to constantly use iN,iNN=1,1 
Bug 453483 - [compiler][null][loop] Improve null analysis for loops  - impl approach (B): new bits UFI.{iNBit/iNNBit} for flow concatenation  - adjusted tests in accordance to FIXMEs from previous commit  - enabled old tests  - disabled NRT.test0525_try_finally_unchecked_exception, see bug 370424 
Bug 453483 - [compiler][null][loop] Improve null analysis for loops  - implement approach (A.2) (record flow info for deferred checking)  - added tests from linked bugs, 3 are still disabled 
Bug 453635 - [compiler][null] Update NullReferenceImplTests and friends - refresh transformations using generator (descriptions & tables) - commented some suspicious addtions 
Bug 453635 - [compiler][null] Update NullReferenceImplTests and friends - reorder transformations lines & columns (for symmetric mergedWith) 
Bug 453635 - [compiler][null] Update NullReferenceImplTests and friends - generator changes to   - minimize differences by different sorting strategies   - include one more state (0x1C)   - corrected comparison to avoid bogus "CHECK" marks 
Bug 448954 - [1.8][compiler] Incorrect error: "The method foo(String, String, X::goo) is undefined for the type X" - refactor condition, remove now unused methods 
Bug 448954 - [1.8][compiler] Incorrect error: "The method foo(String, String, X::goo) is undefined for the type X" - inline method 
Bug 448954 - [1.8][compiler] Incorrect error: "The method foo(String, String, X::goo) is undefined for the type X" - remove unused methods 
Bug 444024 - [1.8][compiler][null] Type mismatch error in annotation generics assignment which happens "sometimes" 
Bug 452788 - [1.8][compiler] Type not correctly inferred in lambda expression 
Bug 452194 - Code no longer compiles in 4.4.1, but with confusing error 
Bug 448777 - [1.8][null] The expression of type '@NonNull @Nullable String' needs unchecked conversion to conform to '@NonNull @Nullable String' 
Bug 445708 - Switching on nullable values has regressed since bug #403674 - regression test 
Bug 445147 - [compiler] [null] java.lang.StackOverflowError with annotation-based null analysis enabled and recursive types 
Remove stale comment 
Bug 435805 - [1.8][compiler][null] Java 8 compiler does not recognize declaration style null annotations 
Bug 447088 - [null] @Nullable on fully qualified field type is ignored 
Bug 438945 - [1.8] NullPointerException InferenceContext18.checkExpression in java 8 with generics, primitives, and overloading 
Bug 442954 - Update references to JLS 15.28 after renumbering 
Bug 441734 - [1.8][inference] Generic method with nested parameterized type argument fails on method reference 
Bug 434483 - [1.8][compiler][inference] Type inference not picked up with method reference 
Merge branch 'master' into sherrmann/ExternalAnnotations 
Bug 445099 - [1.8][compiler][null] NTAT.testNullTypeInference3c failure needs investigation. 
Bug 446434 - [1.8][null] Enable interned captures also when analysing null type annotations 
Bug 445227 - [1.8][compiler][null] With Null Analysis enabled: Internal compiler error: java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.lookup.TypeBinding.isProvableDistinctSubType 
Merge remote-tracking branch 'origin/master' into sherrmann/ExternalAnnotations 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - Fix tests, reverting to jclmin from master - test accepting simple name in annotation file 
Bug 438945 - [1.8] NullPointerException InferenceContext18.checkExpression in java 8 with generics, primitives, and overloading 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - accept simple class name in annotation file (without package) 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - handle annotations on fields 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - handle annotations on array dimensions 
Merge remote-tracking branch 'origin/master' into sherrmann/ExternalAnnotations 
Bug 443347 - [1.8][null] @NonNullByDefault should not affect constructor arguments of an anonymous instantiation 
Junit for Bug 430336 - [1.8][compiler] Bad syntax error recovery: Lonely identifier should be variable name, not type 
Bug 442954 - Update references to JLS 15.28 after renumbering 
Bug 441734 - [1.8][inference] Generic method with nested parameterized type argument fails on method reference 
Bug 434483 - [1.8][compiler][inference] Type inference not picked up with method reference 
Fixed html validation problem reported in bug 366298 comment 51 

Fixed html validation problem reported in bug 366298 comment 51 Bug 441208 - [1.8][null]SuppressWarnings("null") does not suppress / marked Unnecessary 
Tests from Bug 441338 - [1.8][null] better combine null type annotations on substitution of parameterized type 
Bug 441797 - [1.8] synchronize type annotations on capture and its wildcard 
Bug 441693 - [1.8][null] Bogus warning for type argument annotated with @NonNull 
Bug 440462 - [null][compiler]NPE in EJC for erroneous null annotations 
Bug 440764 - [1.8][null]IllegalArgumentExc in EJC  - w/ test expectation adjusted due to lacking fix for bug 434602 
Bug 439298 - [null] "Missing code implementation in the compiler" when using @NonNullByDefault in package-info.java 
Bug 435689 - [1.8][inference] Type inference not occurring with lambda expression and method reference 
Bug 437007 - [1.8][inference] Inferencing failing to work out type in vararg method invocation 
Bug 438179 - [1.8][null] 'Contradictory null annotations' error on type variable with explicit null-annotation. 
Bug 438458 - [1.8][null] clean up handling of null type annotations wrt type variables - facility to remove only null type annotations (using unannotated(Z)) 
Bug 438458 - [1.8][null] clean up handling of null type annotations wrt type variables - fix NPE reported in comment 5, plus more issues in this method - added missing implementation for RawTypeBinding 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - infra structure for inline tests with custom jars - accept "interface" in header of annotation file 
Merge remote-tracking branch 'origin/master' into sherrmann/ExternalAnnotations 
Merge commit 'efd3b1f31e7f6af67fb63e84ece49ae3c1341055' into sherrmann/ExternalAnnotations 
Bug 435767 - [1.8][inference] Problem in inferrence of type : The method in the type is not applicable for the arguments (Object) - negative regression test - some optimizations found during debugging 
Bug 437270 - [1.8][null] after null check array value is not seen as compatible to "String @NonNull[]" 
Bug 438383 - [1.8][null] Bogus warning: Null type safety at method return type 
Bug 440759 - [1.8][null] @NonNullByDefault should never affect wildcards and uses of a type variable 
Bug 440764 - [1.8][null]IllegalArgumentExc in EJC 
Bug 439298 - [null] "Missing code implementation in the compiler" when using @NonNullByDefault in package-info.java 
Bug 435187 - [1.8] ECJ reports error in the code without type information - negative test 
Bug 440773 - [1.8][null]DefaultLocation.RETURN_TYPE erroneously affects method parameters in @NonNullByDefault 
Bug 438337 - StackOverflow after update from Kepler to Luna 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - feed annotations into the batch compiler 
Bug 433845 - [1.8]Lambda Type inference fails on complex generics - negative test 
Revert changes for Bug 440477 that were meant for branch sherrmann/ExternalAnnotations 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - slightly changed the layout of annotation files 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - handle more annotation locations (type argument, wildcard bound) 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - remove one interface that's not really used, and more minor cleanup 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - support real JRE *container*, combining entries with referrer - persist & restore annotation path in State (& incremented VERSION). 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - support reconciler by feeding annot-path through IPackageFragmentRoot 
Bug 440477 - [null] Infrastructure for feeding external annotations into compilation - initial draft, works for selected scenarii of full build 
Bug 440462 - [null][compiler]NPE in EJC for erroneous null annotations 
Bug 435689 - [1.8][inference] Type inference not occurring with lambda expression and method reference 
Bug 438337 - StackOverflow after update from Kepler to Luna 
Bug 437007 - [1.8][inference] Inferencing failing to work out type in vararg method invocation 
Bug 435544 - [compiler][null] Enum constants not recognised as being NonNull (take2) - fix 
Bug 440143 - [1.8][null] one more case of contradictory null annotations regarding type variables 
Bug 434602 - Possible error with inferred null annotations leading to contradictory null annotations - incl. fix of TVB.declaringElement if cloned during initialization 
Bug 438469 - [null] How-to use null type annotations with generic methods from interfaces in some library you only have as binary JAR? Bug 438467 - [compiler][null] Better error position for "The method _ cannot implement the corresponding method _ due to incompatible nullness constraints" 
Bug 438971 - [1.8][null] @NonNullByDefault/@Nullable on parameter of generic interface - test for Problem 1 
Bug 438179 - [1.8][null] 'Contradictory null annotations' error on type variable with explicit null-annotation. 
Bug 438250 - [1.8][null] NPE trying to report bogus null annotation conflict 
Bug 438012 - [1.8][null] Bogus Warning: The nullness annotation is redundant with a default that applies to this location 
Bug 435570 - [1.8][null] @NonNullByDefault illegally tries to affect "throws E" 
Bug 438458 - [1.8][null] clean up handling of null type annotations wrt type variables - activate null-bound-checks also for unannotated type arguments 
Bug 439516 - [1.8][null] NonNullByDefault wrongly applied to implicit type bound of binary type - warning for explicit "<T extends Object>" 
Bug 439516 - [1.8][null] NonNullByDefault wrongly applied to implicit type bound of binary type 
Bug 438458 - [1.8][null] clean up handling of null type annotations wrt type variables - let InferenceVariable participate in deep encoding of type annotations 
Bug 438458 - [1.8][null] clean up handling of null type annotations wrt type variables - Tests: new & adjustments 
Bug 438458 - [1.8][null] clean up handling of null type annotations wrt type variables - facility to remove only null type annotations (using unannotated(Z)) 
Bug 435544 - [compiler][null] Enum constants not recognised as being NonNull (take2) - fix 
Bug 364326 - [compiler][null] NullPointerException is not found by compiler. FindBugs finds that one - test 
Fix for Bug 434044 - Java 8 generics thinks single method is ambiguous (comment #20) 
Bug 435962: [RC2] StackOverFlowError when building 
Bug 435462: [1.8] NPE in codegen with nested conditional and allocation expressions 
Bug 435462: [1.8] NPE in codegen with nested conditional and allocation expressions 
Bug 435463: StackOverflowError when compiling generic code 
Bug 435399: IllegalStateException in Java Compiler related to Null Analysis and Generics 
Bug 434600 - Incorrect null analysis error reporting on type parameters - the payload 
Bug 434600 - Incorrect null analysis error reporting on type parameters - refactoring to prepare for more check modes 
Bug 434600 - Incorrect null analysis error reporting on type parameters - adjust errorm message 
Bug 434600 - Incorrect null analysis error reporting on type parameters - integrate into phase of bound checking 
Bug 433906 - [compiler][null] unchecked warning with 'capture extends T' vs. 'T' 
Bug 434899 - [1.8][null] Java 1.8 null annotations still cause Contradictory null annotations' error 
Bug 434793 - [1.8][null][compiler] AIOOBE in ParameterizedGenericMethodBinding.substitute when inlining a method 
Bug 434044 - Java 8 generics thinks single method is ambiguous 
Bug 434630 - [1.5][generics] Unexpected type mismatch error with nested types and generics 
Bug 434570 - Generic type mismatch for parametrized class annotation attribute with inner class 
Bug 434297 - [1.8] NPE in LamdaExpression.analyseCode with lamda expression nested in a conditional expression 
Bug 399527 - Type inference problem 
Bug 432603 - [compile][1.7] ecj reports an Error while javac doesn't 
Bug 433478 - [compiler][null] NPE in ReferenceBinding.isCompatibleWith 
Bug 434374 - Nullpointer analysis completely broken in M7 
Bug 422796 - [compiler][null] boxed boolean reported as potentially null after null test in lazy disjunction 
Bug 433586 - [1.8][null] Converting <? super T> to <T> with method reference causes unchecked conversion warning 
Bug 432626 - [1.8] Type mismatch error after removing redundant type arguments - disabled test 
Bug 433158 - [1.8][compiler] Another type inference difference with javac, type lost midway - negative test 
Bug 432110 - [1.8][compiler] nested lambda type incorrectly inferred vs javac - point fix 
Bug 432977 - [1.8][null] Incorrect 'type is not visible' compiler error 
Bug 425420 - NPE exception on standard Java build - additional cleanup 
Bug 430441 - [compiler] NPE in ImplicitNullAnnotationVerifier.collectOverriddenMethods from Content Assist in a .jpage file - fix 

Bug 431577 - [1.8][bytecode] Bad type on operand stack (different than Bug 429733) Bug 430150 - [1.8][null] stricter checking against type variables 
Bug 432223 - [1.8][null] Java 1.8 null annotations cause 'Contradictory null annotations' error 
Bug 432348 - [1.8] Internal compiler error (NPE) after upgrade to 1.8 
Bug 431581 - Eclipse compiles what it should not 
Bug 431408 - Java 8 (1.8) generics bug 
Bug 430759 - [1.8][compiler] SourceTypeBinding cannot be cast to ParameterizedTypeBinding 
Bug 390889 - [1.8][compiler] Evaluate options to support 1.7- projects against 1.8 JRE. 
Bug 431269 - [1.8][compiler][null] StackOverflow in nullAnnotatedReadableName 
Bug 430686 - [1.8][compiler] Generics: erroneously reports 'method not applicable for the arguments' - avoid erasures to be intersection types of identical elements - consistently perform substitution on recursive capture bindings 
Bug 430987 - [1.8][compiler] Java 8 Compile Error with generic typed arguments 
Bug 429958 - [1.8][null] evaluate new DefaultLocation attribute of @NonNullByDefault 
Bug 430759 - [1.8][compiler] SourceTypeBinding cannot be cast to ParameterizedTypeBinding - test & fix for comment 5 
Fix for Bug 430296 - [1.8] broken code triggers stack overflow in CaptureBinding18.isCompatibleWith 
Fix for Bug 430296 - [1.8] broken code triggers stack overflow in CaptureBinding18.isCompatibleWith 
Bug 430015 - [1.8] NPE trying to disassemble classfile with lambda method and MethodParameters - fixed the test fix 
Bug 430015 - [1.8] NPE trying to disassemble classfile with lambda method and MethodParameters - fixed the test fix 
Bug 430069 - [1.8] Test failures when run with JRE7- use PackageAdmin to access (unresolved) org.eclipse.jdt.annotation_2.0.0 
Bug 424624 - [1.8][null] if a static-object with annotation @NonNull is used, a warning is shown 

Bug 424624 - [1.8][null] if a static-object with annotation @NonNull is used, a warning is shown Bug 429430 - [1.8] Lambdas and method reference infer wrong exception type with generics (RuntimeException instead of IOException) - NPE guard 
Bug 392245 - [1.8][compiler][null] Define whether / how @NonNullByDefault applies to TYPE_USE locations 

Bug 392245 - [1.8][compiler][null] Define whether / how @NonNullByDefault applies to TYPE_USE locations Bug 429430 - [1.8] Lambdas and method reference infer wrong exception type with generics (RuntimeException instead of IOException) 
Bug 429733 - [1.8][bytecode] Bad type on operand stack 

Bug 429733 - [1.8][bytecode] Bad type on operand stack Bug 429403 - [1.8][null] null mismatch from type arguments is not reported at field initializer 

Bug 429403 - [1.8][null] null mismatch from type arguments is not reported at field initializer 
More junits for Bug 429733 - [1.8][bytecode] Bad type on operand stack 
junits for Bug 429733 - [1.8][bytecode] Bad type on operand stack Bug 429490 - [1.8] The method addListener(Junk11.ExpressionHelper<Object>, Junk11.ObservableValue<Object>, Junk11.InvalidationListener) is ambiguous for the type Junk11 
Bug 429490 - [1.8] The method addListener(Junk11.ExpressionHelper<Object>, Junk11.ObservableValue<Object>, Junk11.InvalidationListener) is ambiguous for the type Junk11 - back to square one - disabled warning re internal inconsistency 
Bug 426537 - [1.8][inference] Eclipse compiler thinks I<? super J> is compatible with I<J<?>> - raw type J involved 
Bug 425031 - [1.8] nondeterministic inference for GenericsRegressionTest.test283353 
Bug 429490 - [1.8] The method addListener(Junk11.ExpressionHelper<Object>, Junk11.ObservableValue<Object>, Junk11.InvalidationListener) is ambiguous for the type Junk11 - flip the switch to make the test pass for now 
Bug 429490 - [1.8] The method addListener(Junk11.ExpressionHelper<Object>, Junk11.ObservableValue<Object>, Junk11.InvalidationListener) is ambiguous for the type Junk11 
Bug 429424 - [1.8][inference] Problem inferring type of method's parameter 
Bug 429490 - [1.8] The method addListener(Junk11.ExpressionHelper<Object>, Junk11.ObservableValue<Object>, Junk11.InvalidationListener) is ambiguous for the type Junk11 
Bug 429430 - Lambdas and method reference infer wrong exception type with generics (RuntimeException instead of IOException) 
Bug 425183 - [1.8][inference] make CaptureBinding18 safe 
Bug 428811 - [1.8][compiler] Type witness unnecessarily required 
Bug 416182 - [1.8][compiler][null] Contradictory null annotations not rejected 
Bug 429384 - [1.8][null] implement conformance rules for null-annotated lower / upper type bounds 
[1.8] - Bug 424195 - fixed a "performance bug" in the test 

[1.8] - Bug 424195 - fixed a "performance bug" in the test Bug 426546 - [BETA_JAVA8] Build Eclipse Luna SDK with our Java 8 compiler - test to assure that an inherited bridge method need not be repeated 
Bug 429203 - [1.8][compiler] NPE in AllocationExpression.binding - test & improved fix 
Bug 429203 - [1.8][compiler] NPE in AllocationExpression.binding - NPE guard 
Bug 429090 - [1.8][compiler] Type Lambda expression's parameter c is expected to be of type Junk10.Observable - passing variant of the original test case 
Bug 429090 - [1.8][compiler] Type Lambda expression's parameter c is expected to be of type Junk10.Observable - test & fix for NPE from comment 1 
Bug 416190 - [1.8][null] detect incompatible overrides due to null type annotations - test & fix for comment 3 
Bug 416190 - [1.8][null] detect incompatible overrides due to null type annotations - refactoring in preparation for comment 3 
Bug 416190 - [1.8][null] detect incompatible overrides due to null type annotations - prevent duplicate null annotations 
Bug 416190 - [1.8][null] detect incompatible overrides due to null type annotations - fix for NullTypeAnnotationTest#testBug416174() 

Bug 416190 - [1.8][null] detect incompatible overrides due to null type annotations - fix for NullTypeAnnotationTest#testBug416174() Bug 418743 - [1.8][null] contradictory annotations on invocation of generic method not reported 
Bug 428985 - [1.8][null] help the type inference to find a nullness-annotated type if possible - more tests and fix 
Bug 428985 - [1.8][null] help the type inference to find a nullness-annotated type if possible - test & fix 
Bug 428985 - [1.8][null] help the type inference to find a nullness-annotated type if possible - preparatory refactoring 
Bug 428980 - [1.8][null] simple expression as lambda body doesn't leverage null annotation on argument 
Bug 392238 - [1.8][compiler][null] Detect semantically invalid null type annotations 
Bug 427163 - [1.8][null] bogus error "Contradictory null specification" on varags 
1.8: mark GenericInferenceError as InternalError 
Bug 428786 - [1.8][compiler] Inference needs to compute the "ground target type" when reducing a lambda compatibility constraint 
Bug 428786 - [1.8][compiler] Inference needs to compute the "ground target type" when reducing a lambda compatibility constraint - preparatory refactoring 
Bug 428786 - [1.8][compiler] Inference needs to compute the "ground target type" when reducing a lambda compatibility constraint - preparation: move up resolving of explicitly typed lambda arguments 
Bug 420313 - [null] "Missing non-null annotation" does not show up when base method is generic - passing test 
Bug 424728 - [1.8][null] Unexpected error: The nullness annotation 'XXXX' is not applicable at this location 
Bug 427199 - [1.8][resource] avoid resource leak warnings on Streams that have no resource 
Bug 428366 - [1.8] [compiler] The method valueAt(ObservableList<Object>, int) is ambiguous for the type Bindings 
Bug 428307 - [1.8][compiler] Compiler fails to compile AnnotatedElement 
Bug 428352 - [1.8][compiler] Resolution errors don't always surface 
Bug 428275 - [1.8][compiler] CCE in InferenceContext18.varArgTypes - more safety 
Fixed Bug 428275 - [1.8][compiler] CCE in InferenceContext18.varArgTypes 
Bug 428003 - [1.8][compiler] Incorrect error on lambda expression when preceded by another explicit lambda expression 
Bug 428274 - [1.8] [compiler] Cannot cast from Number to double 
Bug 428291 - [1.8][compiler] The method addListener(ListExpressionHelper<E>, ObservableListValue<E>, InvalidationListener) in the type ListExpressionHelper is not applicable for the arguments (ListExpressionHelper<E>, ListBinding<E>, ChangeListener<capture#2-of ? supe 
Bug 428291 - [1.8][compiler] The method addListener(ListExpressionHelper<E>, ObservableListValue<E>, InvalidationListener) in the type ListExpressionHelper is not applicable for the arguments (ListExpressionHelper<E>, ListBinding<E>, ChangeListener<capture#2-of ? supe 
Bug 428294 - [1.8][compiler] Type mismatch: cannot convert from List<Object> to Collection<Object[]> 
Bug 396139 - [1.8] define which JRE8 build we are targeting in BETA_JAVA8 - adjust for 1.8 b129 (needed by GTT.test1035) 
Bug 428264 - [1.8] method reference of generic class causes problems (wrong inference result or NPE) 
Bug 428198 - [1.8][compiler] Type mismatch: cannot convert error from unchecked conversion with @SuppressWarnings 
Bug 426996 - [1.8][inference] try to avoid method Expression.unresolve()? 
Bug 428019 - [1.8][compiler] Type inference failure with nested generic invocation. 
Bug 427628 - [1.8] regression : The method * is ambiguous for the type * - fixing the root cause 
Bug 426836 - [1.8] special handling for return type in references to method getClass()? 
Bug 427736 - [1.8][generics] Method not applicable error with identical parameter types 
Bug 426542 - [1.8] Most specific method not picked when one method has intersection type as type parameter 

Follow up changes for Bug 426984 - [1.8][inference] Capture problem in GenericsRegressionTest_1_8.testBug424710 Bug 427218 - [1.8][compiler] Verify error varargs + inference 
Bug 427411 - [1.8][generics] JDT reports type mismatch when using method that returns generic type 
Bug 427748 - [1.8][compiler] Cannot convert from Boolean to boolean on generic return type 
Bug 427265 - [1.8][compiler] Type inference with anonymous classes 
Bug 427626 - StackOverflow while typing new ArrayList<String>().toArray( and asking for code completion 
Bug 418537 - [1.8][null] Fix null type annotation analysis for poly conditional expressions 
Bug 427728 - [1.8] Type Inference rejects calls requiring boxing/unboxing 
Bug 427479 - Internal compiler error: java.lang.UnsupportedOperationException: Breaking a dependency cycle NYI 
Bug 427165 - [1.8][inference] reduce [alpha <: null] in analogy to [null <: alpha] 
Bug 427438 - [1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:280) - part two (comment 3 ff.) 

Bug 427438 - [1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:280) - part two (comment 3 ff.) 
Junit for https://bugs.eclipse.org/bugs/show_bug.cgi?id=427438#c3 Bug 427504 - [1.8][compiler] TypeVariableBinding cannot be cast to ArrayBinding 

Bug 427504 - [1.8][compiler] TypeVariableBinding cannot be cast to ArrayBinding Bug 427483 - [Java 8] Variables in lambdas sometimes can't be resolved 

Bug 427483 - [Java 8] Variables in lambdas sometimes can't be resolved Bug 427433 - [1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4755) 

Bug 427433 - [1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4755) 
Work around and test for Bug 427483 - [Java 8] Variables in lambdas sometimes can't be resolved 
Fixed Bug 427438 - [1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode 
Junit for Bug 427433 - NPE at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel Bug 425183 - [1.8][inference] make CaptureBinding18 safe - genericTypeSignature() 
Bug 427223 - [1.8][compiler] NPE during resolution of generic method arg type 
Bug 427216 - [Java8] array to varargs regression 
Bug 427282 - [1.8][compiler] AIOOB (-1) at org.eclipse.jdt.internal.compiler.ClassFile.traverse(ClassFile.java:6209) 
Bug 427218 - [1.8][compiler] Verify error varargs + inference - avoid compile error going unreported 
Bug 426671 - [1.8][inference] inference cannot leverage information from reference expression 
Bug 424637 - [1.8][compiler][null] AIOOB in ReferenceExpression.resolveType with a method reference to Files::walk - fix for comment 12 
Bug 427224 - [1.8][inference] Reducing inner diamond against specific parameterization fails 
Bug 425721 - [1.8][compiler] Nondeterministic results in GenericsRegressionTest_1_8.testBug424195a 

Bug 425721 - [1.8][compiler] Nondeterministic results in GenericsRegressionTest_1_8.testBug424195a Bug 427196 - [1.8][compiler] Compiler error for method reference to overloaded method 
Bug 427168 - [1.8][inference] NPE in ConstraintTypeFormula.reduceSubType:198 
Bug 427164 - [1.8][inference] NPE in ConstraintExpressionFormula.reduce:71 

Fixed Bug 427072 - [1.8][compiler] Regression since fix of bug 423505: Method is ambiguous for type X Bug 423505 - [1.8] Implement "18.5.4 More Specific Method Inference" 

Bug 423505 - [1.8] Implement "18.5.4 More Specific Method Inference" Bug 426998 - [1.8][compiler] method(java.lang.Class, java.lang.String) not applicable for the arguments (java.lang.Class, java.lang.String) 

Bug 426998 - [1.8][compiler] method(java.lang.Class, java.lang.String) not applicable for the arguments (java.lang.Class, java.lang.String) Bug 426965 - [1.8] Eclipse rejects valid type conversion in lambda 

Bug 426965 - [1.8] Eclipse rejects valid type conversion in lambda Bug 424930 - [1.8][compiler] Regression: "Cannot infer type arguments" error from compiler. 

Bug 424930 - [1.8][compiler] Regression: "Cannot infer type arguments" error from compiler. Bug 420525 - [1.8] [compiler] Incorrect error "The type Integer does not define sum(Object, Object) that is applicable here" 

Bug 420525 - [1.8] [compiler] Incorrect error "The type Integer does not define sum(Object, Object) that is applicable here" 
Disabled junit for bug 426965 Bug 426764 - [1.8] Presence of conditional expression as method argument confuses compiler 

Bug 426937 - [BETA_JAVA8] include o.e.j.annotation_v1 in root pom Bug 425063 - [1.8][compiler] Type mismatch: cannot convert from int to Comparable<? super Comparable<? super U>> - test (passing) 
Bug 424591 - [1.8][inference] capture-of-array causes resolution error 

Bug 424591 - [1.8][inference] capture-of-array causes resolution error Bug 426676 - [1.8][compiler] Wrong generic method type inferred from lambda expression 

Bug 426676 - [1.8][compiler] Wrong generic method type inferred from lambda expression Bug 426778 - [1.8][inference] Internal compiler error: java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:450) 

Bug 426778 - [1.8][inference] Internal compiler error: java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:450) Bug 426792 - [1.8][inference][impl] generify new type inference engine 

Bug 426792 - [1.8][inference][impl] generify new type inference engine Bug 426671 - [1.8][inference] inference cannot leverage information from reference expression - more tests, 1 passing, 1 disabled 
Bug 377883 - NPE on open Call Hierarchy 
Bug 411098 - [compiler][resource] Invalid Resource Leak Warning using ternary operator inside try-with-resource Test & fix for comment 19 
Bug 411098 - [compiler][resource] Invalid Resource Leak Warning using ternary operator inside try-with-resource - handle nested resource allocation inside conditional expression - code simplification 
Bug 426671 - [1.8][inference] inference cannot leverage information from reference expression - part 1 
Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - optimization/simplifications from spec updates 0.9.1 / 0.9.2 

Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - optimization/simplifications from spec updates 0.9.1 / 0.9.2 Bug 426540 - [1.8][compiler] Inference/overload resolution failure 

Bug 426540 - [1.8][compiler] Inference/overload resolution failure Bug 426652 - [1.8][inference] inference loops infinitely on unconstrained inference variable 

Bug 426652 - [1.8][inference] inference loops infinitely on unconstrained inference variable Bug 426563 - [1.8] AIOOBE when method with error invoked with lambda expression as argument 

Bug 426563 - [1.8] AIOOBE when method with error invoked with lambda expression as argument Bug 426590 - [1.8][compiler] Compiler error with tenary operator - test from comment 1 

Bug 426590 - [1.8][compiler] Compiler error with tenary operator - test from comment 1 Bug 426590 - [1.8][compiler] Compiler error with tenary operator 

Bug 426590 - [1.8][compiler] Compiler error with tenary operator Bug 426534 - [1.8][compiler] Accessibility of vararg element type not checked for generic methods. 

Bug 426534 - [1.8][compiler] Accessibility of vararg element type not checked for generic methods. Bug 426589 - [1.8][compiler] Compiler error with generic method/constructor invocation as vargs argument 

Test for Bug 426534 - [1.8][compiler] Accessibility of vararg element type not checked for generic methods. Bug 426048 - [1.8] NPE in TypeVariableBinding.internalBoundCheck when parentheses are not balanced - prevent NPE 

Bug 426048 - [1.8] NPE in TypeVariableBinding.internalBoundCheck when parentheses are not balanced - prevent NPE Bug 425152 - [1.8] [compiler] Lambda Expression not resolved but flow analyzed leading to NPE. 

Bug 425152 - [1.8] [compiler] Lambda Expression not resolved but flow analyzed leading to NPE. Bug 424403 - [1.8][compiler] Generic method call with method reference argument fails to resolve properly. 

Bug 424403 - [1.8][compiler] Generic method call with method reference argument fails to resolve properly. Bug 426290 - [1.8][compiler] Inference + overloading => wrong method resolution ? 

Bug 426290 - [1.8][compiler] Inference + overloading => wrong method resolution ? Bug 426366 - [1.8][compiler] Type inference doesn't handle multiple candidate target types in outer overload context 

Bug 426366 - [1.8][compiler] Type inference doesn't handle multiple candidate target types in outer overload context [1.8] removed duplicate (disabled) test 
Bug 423496 - [1.8] Implement new incorporation rule once it becomes available - Test: restore previous state for 1.7- 

Bug 423496 - [1.8] Implement new incorporation rule once it becomes available - Test: restore previous state for 1.7- Bug 424415 - [1.8][compiler] Eventual resolution of ReferenceExpression is not seen to be happening. 

Bug 424415 - [1.8][compiler] Eventual resolution of ReferenceExpression is not seen to be happening. Bug 425493 - [1.8] Compiler regression - negative tests for invalid report 
Bug 426078 - [1.8] VerifyError when conditional expression passed as an argument 

Bug 426078 - [1.8] VerifyError when conditional expression passed as an argument 
[1.8] (Disabled) test for Bug 426078 - [1.8] VerifyError when conditional expression passed as an argument Bug 425156 - [1.8] Lambda as an argument is flagged with incompatible error 

Bug 425156 - [1.8] Lambda as an argument is flagged with incompatible error Bug 424906 - [1.8][compiler] 'parameter cannot be resolved or is not a field' when using String concatenation 
Bug 377883 - NPE on open Call Hierarchy 
Bug 425951 - java.lang.NullPointerException in InferenceContext18.leavePolyInvocation(InferenceContext18.java:853) 

Bug 425951 - java.lang.NullPointerException in InferenceContext18.leavePolyInvocation(InferenceContext18.java:853) Bug 425460 - [1.8] [inference] Type not inferred on stream.toArray 

Bug 425460 - [1.8] [inference] Type not inferred on stream.toArray Bug 425798 - [1.8][compiler] Another NPE in ConstraintTypeFormula.reduceSubType 

Bug 425798 - [1.8][compiler] Another NPE in ConstraintTypeFormula.reduceSubType Bug 425798 - [1.8][compiler] Another NPE in ConstraintTypeFormula.reduceSubType 

Bug 425798 - [1.8][compiler] Another NPE in ConstraintTypeFormula.reduceSubType Bug 425783 - An internal error occurred during: "Requesting Java AST from selection". java.lang.StackOverflowError 

Bug 425783 - An internal error occurred during: "Requesting Java AST from selection". java.lang.StackOverflowError Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - update invocation type inference for poly expressions 

Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - update invocation type inference for poly expressions Bug 423496 - [1.8] Implement new incorporation rule once it becomes available 

Bug 423496 - [1.8] Implement new incorporation rule once it becomes available Bug 411098 - [compiler][resource] Invalid Resource Leak Warning using ternary operator inside try-with-resource Test & fix for comment 19 
Bug 425278 - [1.8][compiler] Suspect error: The target type of this expression is not a well formed parameterized type due to bound(s) mismatch 
Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on method invocation 

Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on method invocation Bug 424712 - [1.8][compiler] NPE in TypeBinding.isProvablyDistinctTypeArgument 

Bug 424712 - [1.8][compiler] NPE in TypeBinding.isProvablyDistinctTypeArgument Bug 424845 - [1.8] Wrong resolution of generic type with 1.8 compliance settings 

Bug 424845 - [1.8] Wrong resolution of generic type with 1.8 compliance settings Bug 425153 - [1.8] Having wildcard allows incompatible types in a lambda expression 

Bug 425153 - [1.8] Having wildcard allows incompatible types in a lambda expression Bug 424195 - [1.8][compiler] NPE in CaptureBinding.initializeBounds 

Bug 424195 - [1.8][compiler] NPE in CaptureBinding.initializeBounds Bug 425142 - [1.8][compiler] NPE in ConstraintTypeFormula.reduceSubType 

Bug 425142 - [1.8][compiler] NPE in ConstraintTypeFormula.reduceSubType Bug 425152 - [1.8] [compiler] Lambda Expression not resolved but flow analyzed leading to NPE. 

Bug 425152 - [1.8] [compiler] Lambda Expression not resolved but flow analyzed leading to NPE. Bug 424712 - [1.8][compiler] NPE in TypeBinding.isProvablyDistinctTypeArgument - Tests: 1 passing, 2 disabled (NPE) 

Bug 424712 - [1.8][compiler] NPE in TypeBinding.isProvablyDistinctTypeArgument - Tests: 1 passing, 2 disabled (NPE) Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on method invocation WIP - avoiding unnecessary complex work 

Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on method invocation WIP - avoiding unnecessary complex work 
[1.8] Test for Bug 425152 - [1.8] [compiler] Lambda Expression not resolved but flow analyzed leading to NPE. Bug 424075 - [1.8] Compiler regression 
Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - improved super type detection:   - must be transitive,   - don't illegally accept erasure equality - one more constraint for explicitly typed lambda - spec now says "erasure" of cls/ifc where we used "original()" - adopt clarifications on reducing lambda/reference expression - removed stale note in comments 

Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - improved super type detection:   - must be transitive,   - don't illegally accept erasure equality - one more constraint for explicitly typed lambda - spec now says "erasure" of cls/ifc where we used "original()" - adopt clarifications on reducing lambda/reference expression - removed stale note in comments Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - implement more wellformedness checking for fresh type variable 

Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - implement more wellformedness checking for fresh type variable Bug 424053 - [1.8][compiler] Consolidate type inference - correction in inference variable dependency handling - doc change 

Bug 424053 - [1.8][compiler] Consolidate type inference - correction in inference variable dependency handling - doc change Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - 0.8.0 updates rules for wildcard constraints 

Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - 0.8.0 updates rules for wildcard constraints Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - 0.8.0 changes one COMPATIBLE to SAME 

Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - 0.8.0 changes one COMPATIBLE to SAME Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - record when unchecked conversion is used, prepare warning reporting 

Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - record when unchecked conversion is used, prepare warning reporting Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - 0.8.0 admits constant narrowing of lambda return 

Bug 424286 - [1.8] Update type inference to spec version 0.9.1 - 0.8.0 admits constant narrowing of lambda return Bug 424637 - [1.8][compiler][null] AIOOB in ReferenceExpression.resolveType with a method reference to Files::walk 
Bug 424710 - [1.8][compiler] CCE in SingleNameReference.localVariableBinding 

Bug 424710 - [1.8][compiler] CCE in SingleNameReference.localVariableBinding Bug 424727 - [compiler][null] NullPointerException in nullAnnotationUnsupportedLocation(ProblemReporter.java:5708) 

Bug 424727 - [compiler][null] NullPointerException in nullAnnotationUnsupportedLocation(ProblemReporter.java:5708) Bug 424742 - [1.8] NPE in LambdaExpression.isCompatibleWith 

Bug 424742 - [1.8] NPE in LambdaExpression.isCompatibleWith Bug 424725 - [1.8] Java Builder infinite loop, ArrayIndexOutOfBoundsException in analyseArguments 

Bug 424725 - [1.8] Java Builder infinite loop, ArrayIndexOutOfBoundsException in analyseArguments Bug 424637 - [1.8][compiler] AIOOB in ReferenceExpression.resolveType with a method reference to Files::walk - test 
Bug 424631 - [1.8][inference] Another NPE in ReferenceExpression.generateCode 

Bug 424631 - [1.8][inference] Another NPE in ReferenceExpression.generateCode Bug 424589 - [1.8][compiler] NPE in TypeSystem.getUnannotatedType - fix NPE, but no regression test yet 
Bug 420525 - [1.8] [compiler] Incorrect error "The type Integer does not define sum(Object, Object) that is applicable here" - fixed NPE reported in comment 7 

Bug 420525 - [1.8] [compiler] Incorrect error "The type Integer does not define sum(Object, Object) that is applicable here" - fixed NPE reported in comment 7 Bug 424167 - [1.8] Fully integrate type inference with overload resolution 

Bug 424167 - [1.8] Fully integrate type inference with overload resolution Bug 424053 - [1.8][compiler] Consolidate type inference - adjustment of GTT.test1146() should not apply to 1.7 

Bug 424053 - [1.8][compiler] Consolidate type inference - adjustment of GTT.test1146() should not apply to 1.7 Bug 401272 - [1.8][search] NPEs when searching for references to ArrayList#add(E) / get(int) from JRE8 - fix CCE reported in comment 11 
Bug 423504 - [1.8] Implement "18.5.3 Functional Interface Parameterization Inference" 

Bug 423504 - [1.8] Implement "18.5.3 Functional Interface Parameterization Inference" Bug 424053 - [1.8][compiler] Consolidate type inference - adjust GTT.test1146 

Bug 424053 - [1.8][compiler] Consolidate type inference - adjust GTT.test1146 Bug 424053 - [1.8][compiler] Consolidate type inference - removed a left-over sysout 

Bug 424053 - [1.8][compiler] Consolidate type inference - removed a left-over sysout Bug 424053 - [1.8][compiler] Consolidate type inference - restrict the bug mode to more closely follow javac behavior 

Bug 424053 - [1.8][compiler] Consolidate type inference - restrict the bug mode to more closely follow javac behavior Bug 424053 - [1.8][compiler] Consolidate type inference - fixed non-determinism affecting GTT.test0470 & test627 

Bug 424053 - [1.8][compiler] Consolidate type inference - fixed non-determinism affecting GTT.test0470 & test627 Bug 424053 - [1.8][compiler] Consolidate type inference - document and disable failing tests 

Bug 424053 - [1.8][compiler] Consolidate type inference - document and disable failing tests Bug 424053 - [1.8][compiler] Consolidate type inference - better & deterministic readableName of CaptureBinding18   to fix regression in GenericRegressionTest.test366131b() 

Bug 424053 - [1.8][compiler] Consolidate type inference - better & deterministic readableName of CaptureBinding18   to fix regression in GenericRegressionTest.test366131b() Cleanup: - Align detection of invocation args as poly type cf. commit c03bb7b6b1cd8a6d883d640a383ab0d92ad4b43b and https://bugs.eclipse.org/400874#c67 - More consistent use of Statement.findConstructorBinding(..) - fix of intermittent NPE in ReferenceExpression.isCompatibleWith(..) - revert an experimental solution that's no longer needed - comments & whitespace & copyright(tests) - removed unused JavaHasABug excuse Ready for promotion. 

Cleanup: - Align detection of invocation args as poly type cf. commit c03bb7b6b1cd8a6d883d640a383ab0d92ad4b43b and https://bugs.eclipse.org/400874#c67 - More consistent use of Statement.findConstructorBinding(..) - fix of intermittent NPE in ReferenceExpression.isCompatibleWith(..) - revert an experimental solution that's no longer needed - comments & whitespace & copyright(tests) - removed unused JavaHasABug excuse Ready for promotion. Bug 400874 - [1.8][compiler] Inference infrastructure should evolve to meet JLS8 18.x (Part G of JSR335 spec) 

Bug 400874 - [1.8][compiler] Inference infrastructure should evolve to meet JLS8 18.x (Part G of JSR335 spec) Another NPE fix (detected by way of debug sysouts) 
Fix regression after merge: cope with unresolved FunctionalExpression in compatibility constraint against proper type. 
Adjusted tests 
Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
added a TODO 
Bug 424038 - [1.8] Compilation failed - NPE fix in AllocationExpression - Correction: AllocationExpression are never pertinentToApplicability - LE.isPertinentToApplicability must check single expression body, too - New helper LE.getResolvedCopyForInferenceTargeting() - Always pretend an assignment context when inference has a target type 
Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Bug 414631 - [1.8][compiler] Eclipse compiler giving error while javac is running clean 
Bug 418807 - [1.8] Collector type parameter must be explicitly set to compile 
Bug 423839 - [1.8] Simple expression fails with Unexpected control flow handle diamond in ternary in generic invocation 
Resolved Bug 419048 - revamped much of the control for piecemeal / repeated resolving 

Resolved Bug 419048 - revamped much of the control for piecemeal / repeated resolving WIP for Bug 419048 - tentative spec bug fix: 18.3 2nd list bullet 5 misses to apply theta! - improve our substitution to handle types that are not type variables 

WIP for Bug 419048 - tentative spec bug fix: 18.3 2nd list bullet 5 misses to apply theta! - improve our substitution to handle types that are not type variables Bug 411098 - [compiler][resource] Invalid Resource Leak Warning using ternary operator inside try-with-resource - handle nested resource allocation inside conditional expression - code simplification 
Tentative fix for bogus reduction rule for exception constraints NPE fix: lambda argument may still be unresolved during inference. 
Fix intermittent duplicate error in testReferenceExpressionInference3b 
Adjusted reduceSubType() for PTB after clarification on the EG list Challenged better results by invoking a method on the inferred type. Fixed regression in diamond inference & adjusted tests 
Full self-review w/ focus on existing classes, incl. doc & copyright 
Incorporate clarification re multiple upper bounds: - handle it as a violation of wellformedness and proceed. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=423496 

Incorporate clarification re multiple upper bounds: - handle it as a violation of wellformedness and proceed. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=423496 escape unicode chars for debug print while sources are ascii 
NPE fix and added a change required by the previous commit 
More an ReferenceExpression inference in more complex scenarios - cope with improper types during RE.resolveType(..) 
Integrate ReferenceExpression into inference: - differentiate expectedType() vs. invocationTargetType() - FunctionalExpressions are always poly 
Initial support for poly conditional expressions 
Fix GenericsRegressionTest.testBug413958_2(): avoid CaptureBinding18 as intersection with inconsistent parameterization (was causing non-determinism). Also handle multiple upper bounds in more situations 
Trivial test adjustment 
Slightly refactored the previous commit 
Fix for bug 423070 and GTT.test1031() 
Fix overriding of isPertinentToApplicability after signature change 
Test adjustment: consequence of declaring inf vars as compatible to all 
Resolving of ReferenceExpression if target type has inference variables 
Since inference is better now, expect more warnings 'redundant type arg' 
Bugfix in compatibility check. 
Check for redundant type parameters must fake a diamond during inference 
Better inclusion of ctor calls: - new abstraction Invocation with essential API for inference - when analysing superctor in javadoc revert the result of inference 
New failing test from a bug, starting a new chapter 
First round for GenericsRegressionTest1_7: - treat ctor result as method return in 18.5.2 - stop-gap impl for ParameterizedMethodExpectedTypeProblem (ctor) - adjust tests:   - better diamond inference   - report "cannot infer" instead of "type mismatch"   - remove secondary expected error (1 in NLET) 
Fix a test where a @NonNull parameter is inferred to NullTypeBinding - null checking needs special tweaks here 
Adjust test, inference finds one more solution 
Fix intermittent regression in GenericRegressionTest.test347145(): - special isCompatibleWith() for CaptureBinding18 - includes better debug toString() 
Trivial test fix 
Improved isPertinentToApplicability() for internal calls (method==null) 
Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Draft impl of reduction for lambda constraints. - based on some new API in LE Improve LE.isPertinentToApplicability() to fix NLET.test401610d() 
Reduce exception constraint for reference expressions. 
Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Test-update: - document pending questions on EG list - adjust one expected result - cleanup 
+ Consider typeVariables of enclosing for isProperType(..) + Change MessageSend.isVarArgs to int to signal all 3 checkKinds   Use this to short-circuit unnecessary parameterCompatibilityLevel() + NPE fix in reduceSubType(..) (PTB with params only in enclosing) 
Test adjustment: expect better type display 
Test adjustment: also javac reports only 1 error 
Experimental fix for GTT.test1060() - extend isTypeArgumentContainedBy for intersection types in one case 
More test adjustments 
Contextualize the context for nested inferences: - ability to enter/leave an inner poly expression   - previous state stored as an InvocationRecord - inference variables know the invocation site the originate from   - needed for finding different solutions for inners - ability to grow the initialConstraints and inferenceVariables arrays - store/reuse isVarArgs flag for re-inferring inner poly invocations 
Fix compile error caused by merge 
Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Towards aligning errors with javac: + recognize new complaint against missing main + recognize new javac bug + acknowledge improved inference, expect some fewer errors + adjust compliance levels of existing Excuses See also https://bugs.eclipse.org/422896 
Fill in one missingImplementation(). 
Better internal naming of inference variables 
towards nested checking: + accept new constraints from inner + support re-binding of inner poly expressions after inference + corrected calls to isPertinentToApplicability (use correct targetType) + check for poly must use the original to see typevariable dependencies 
Documenting all deviations SPEC, ECJ, JAVAC in GenericTypeTest Adjusting a few to new results in 1.8 
Implement addition in 18.2.2 as of 0.7.0 
Adjust to signature change of Expression.isPertinentToApplicability() Make its implementations robust against targetType==null Protected against an NPE: InferenceVariable.erasure() needs superclass 
Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Remove stale comments 
Slightly improve one expected error message, still need a better message 
Install javac bug also for return type problems. 
Improve readable name of recursive CaptureBinding18. 
+ Re-enable _UNCHECKED_ tests + run bound checks after inference also in 1.8 mode + simplify simulation of javac bug 
Basic implementation of javac bug https://bugs.openjdk.java.net/browse/JDK-8026527 
+ 2 phase checking (LOOSE & VARARG) + ensure that lub() can handle (ignore) the null type 
Change CaptureBinding18 to extend CaptureBinding as to participate in its type checking. Will override methods as needed (not yet) since we don't have a wildcard, e.g.. readableName() is a draft only, pending more complete error reporting 
Make the code look even more like the spec, explicitly using boundset b1 rather then left-over currentBounds. Disable fallback to old inference on one path. Let unsatisfiable glb simply cause inference failure (was: NPE). 
Incorporate correction (typo) in 18.5.2 (T vs. theta Fi). 
As per clarification on EG list we don't need to purge instantiations, just don't consider the results from resolve (only from reduce). - re-enable tests marked _EG_ 
Test for Bug 401783 (passing). 
tiny correction 
Shy start to reduce constraints on reference expressions 
Fix inference for <> by providing isPolyExpression(MethodBinding) in AllocationExpression, too. 
Disable more tests using _EG_ and _UNCHECKED_ prefixes + one test correctly reports fewer errors now 
Disable tests that fail for these known reasons: _UNCHECKED_: inference does not handle unchecked conversions _EG_: need clarification from EG regarding purging of instantiations 
Exclude CaptureBinding18 from one check in greaterLowerBound() to prevent NPE downstream (in GTT.test0671()). 
A note on where to fix the NPE observed, e.g., in GTT.test0931() 
Adopt API Expression.isExactMethodReference() 
Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
18.5.2 essentially complete + a correction re inferPolyInvocationType() 
Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Adjust tests where new inference finds a solution previously undetected 
Use new query Expression.isPertinentToApplicability() 
Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Bug 421543 [1.8][compiler] Compiler fails to recognize default method being turned into abstract by subtytpe Enable test which is fixed by cherry-picking the fix for bug 410325 

Bug 421543 [1.8][compiler] Compiler fails to recognize default method being turned into abstract by subtytpe Enable test which is fixed by cherry-picking the fix for bug 410325 Bug 410325 - [1.7][compiler] Generified method override different between javac and eclipse compiler 
Bug 421796 - [1.8][compiler] java.lang.AbstractMethodError executing default method code. - nothing to fix, test added / adjusted 
Bug 404690 - [1.8][compiler] revisit bridge generation after VM bug is fixed 

Bug 404690 - [1.8][compiler] revisit bridge generation after VM bug is fixed Bug 422051 - [1.8][compiler][tests] cleanup excuses (JavacHasABug) in InterfaceMethodTests 

Bug 422051 - [1.8][compiler][tests] cleanup excuses (JavacHasABug) in InterfaceMethodTests Avoid NPE during draft problem reporting 
Avoid null glb, if inference variables are involved 
implement "input variables" and "output variables" implement reduce for type eq of non-wildcard types partly implement inferInvocationType() (needs pertinent to applicab.) tentatively improve isPolyExpression() 
Bug 415734 - Eclipse gives compilation error calling method with an inferred generic return type - regression test 
Fix merge bugs Clarify $IDENTITY-COMPARISON$ Add a TODO 
Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Bug 421543 - [1.8][compiler] Compiler fails to recognize default method being turned into abstract by subtytpe 

Bug 421543 - [1.8][compiler] Compiler fails to recognize default method being turned into abstract by subtytpe WIP 

Additional test for Bug 421543 - [1.8][compiler] Compiler fails to recognize default method being turned into abstract by subtytpe Bug 420894 - ClassCastException in DefaultBindingResolver.resolveType(Type) 
Bug 418843 - NPE related to enum with missing contructor test only, already fixed via bug 416267 
Bug 418233 - [compiler][null] Bogus error Illegal redefinition of parameter when using default nullness on an inner interface 
18.5.5 has been withdrawn in 0.7.0 
Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Bug 420894 - ClassCastException in DefaultBindingResolver.resolveType(Type) 
Bug 419209 - [1.8] Repeating container annotations should be rejected in the presence of annotation it contains 
Bug 420080 - [1.8] Overridden Default method is reported as duplicated 

Bug 420080 - [1.8] Overridden Default method is reported as duplicated FIXME re incorp of wildcard constraints 
Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Update entire implementation to spec 0.6.3 
WIP: create a problem binding if method is applicable but expected type doesn't match. 
WIP: Switch to CaptureBinding for 2nd attempt in 18.4 
Work around problem re TypeBinding.id as used in hashCode. 
[1.8] cleanup merge conflicts from file headers 
Bug 418235 - [compiler][null] Unreported nullness error when using generic - test & fix 
Bug 418235 - [compiler][null] Unreported nullness error when using generic - modified version of refactoring in e638bcfa6ede2617a8de404af4af8024502bc348 
First changes according to 0.6.3: - remove delayedExpressionConstraints - shy start to support capture constraints - adopt changes in 18.5.2 (array and parameterized types) 
Bug 416267 - NPE in QualifiedAllocationExpression.resolveType 
Bug 415269 - [compiler][null] NonNullByDefault is not always inherited to nested classes 
Bug 415413 - [compiler][null] NullpointerException in Null Analysis caused by interaction of LoopingFlowContext and FinallyFlowContext - fix and more tests 
Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Bug 418843 - NPE related to enum with missing contructor test only, already fixed via bug 416267 
Bug 416267 - NPE in QualifiedAllocationExpression.resolveType - incl. test from bug 418843 
Bug 418233 - [compiler][null] Bogus error Illegal redefinition of parameter when using default nullness on an inner interface 
Bug 418235 - [compiler][null] Unreported nullness error when using generic - test & fix 
Bug 418235 - [compiler][null] Unreported nullness error when using generic - preparatory refactoring 
Bug 417758 - [1.8][null] Null safety compromise during array creation 

Bug 417758 - [1.8][null] Null safety compromise during array creation Bug 417759 - [1.8][null] NPE during null analysis 

Bug 417759 - [1.8][null] NPE during null analysis Bug 396139 - [1.8] define which JRE8 build we are targeting in BETA_JAVA8 - adjust to tests to method renaming in Comparator as of b106 
Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (11) 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (11) Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (10) 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (10) Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - resolve TODOs in NTAT 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - resolve TODOs in NTAT Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - fix failure in NullAnnotationTest.test_nonnull_parameter_006() 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - fix failure in NullAnnotationTest.test_nonnull_parameter_006() Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - some cleanup 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - some cleanup Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - resolve TODOs to fix 10 failures in NullAnnotationTest 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - resolve TODOs to fix 10 failures in NullAnnotationTest Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - fix {Method,Field}Binding#canBeSeenBy(..) 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - fix {Method,Field}Binding#canBeSeenBy(..) Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - refactoring 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - refactoring Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - consolidate checking for contradictions 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - consolidate checking for contradictions Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - test corrections 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - test corrections Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (7) 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (7) Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (5) 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (5) Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (4) test adjustment 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (4) test adjustment Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (4) 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (4) Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (3) 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (3) Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (6) 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (6) Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (1) 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (1) Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (2) 

Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - item (2) Bug 416267 - NPE in QualifiedAllocationExpression.resolveType 
Bug 415269 - [compiler][null] NonNullByDefault is not always inherited to nested classes 

Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) 
Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) Bug 415413 - [compiler][null] NullpointerException in Null Analysis caused by interaction of LoopingFlowContext and FinallyFlowContext - fix and more tests 
Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis - refactoring and cleanup (after bug 416307) 

Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis - refactoring and cleanup (after bug 416307) 
Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis - refactoring and cleanup (after bug 416307) Bug 416307 - [1.8][compiler][null] subclass with type parameter substitution confuses null checking 

Bug 416307 - [1.8][compiler][null] subclass with type parameter substitution confuses null checking Bug 392238 - [1.8][compiler][null] Detect semantically invalid null type annotations 
Bug 396258 - [1.8] adopt new syntax for annotations on qualified type names in NullTypeAnnotationTest 

Bug 396258 - [1.8] adopt new syntax for annotations on qualified type names in NullTypeAnnotationTest Bug 411964 - [1.8][null] leverage null type annotation in foreach statement 

Bug 411964 - [1.8][null] leverage null type annotation in foreach statement Bug 416176 - [1.8][compiler][null] null type annotations cause grief on type variables 

Bug 416176 - [1.8][compiler][null] null type annotations cause grief on type variables Bug 416181 – [1.8][compiler][null] Invalid assignment is not rejected by the compiler 

Bug 416181 – [1.8][compiler][null] Invalid assignment is not rejected by the compiler Bug 416180 - [1.8][compiler][null] Valid assignment is rejected by compiler Test added (+tests sorted). Already fixed via Bug 416174 

Bug 416180 - [1.8][compiler][null] Valid assignment is rejected by compiler Test added (+tests sorted). Already fixed via Bug 416174 Bug 416183 - [1.8][compiler][null] Overload resolution fails with null annotations 

Bug 416183 - [1.8][compiler][null] Overload resolution fails with null annotations Bug 416182 - [1.8][compiler][null] Contradictory null annotations not rejected and also strange message about unchecked conversion 
Bug 416172 - [1.8][compiler][null] null type annotation not evaluated on method return type 

Bug 416172 - [1.8][compiler][null] null type annotation not evaluated on method return type Bug 416174 - [1.8][compiler][null] Bogus name clash error with null annotations 

Bug 416174 - [1.8][compiler][null] Bogus name clash error with null annotations Bug 416175 - [1.8][compiler][null] NPE with a code snippet that used null annotations on wildcards 

Bug 416175 - [1.8][compiler][null] NPE with a code snippet that used null annotations on wildcards Bug 414380 - [compiler][internal] QualifiedNameReference#indexOfFirstFieldBinding does not point to the first field 

Bug 414380 - [compiler][internal] QualifiedNameReference#indexOfFirstFieldBinding does not point to the first field Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 
Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 Bug 410325 - [1.7][compiler] Generified method override different between javac and eclipse compiler 
Bug 415850 - [1.8] Ensure RunJDTCoreTests can cope with null annotations enabled 

Bug 415850 - [1.8] Ensure RunJDTCoreTests can cope with null annotations enabled Bug 415911 - [1.8][compiler] NPE when TYPE_USE annotated method with missing return type - Test. Fix is already in 37207b2312332e7eb9b138e12e2db23f9f9da53e 

Bug 415911 - [1.8][compiler] NPE when TYPE_USE annotated method with missing return type - Test. Fix is already in 37207b2312332e7eb9b138e12e2db23f9f9da53e Bug 415850 - [1.8] Ensure RunJDTCoreTests can cope with null annotations enabled 

Bug 415850 - [1.8] Ensure RunJDTCoreTests can cope with null annotations enabled Bug 415850 - [1.8] Ensure RunJDTCoreTests can cope with null annotations enabled 

Bug 415850 - [1.8] Ensure RunJDTCoreTests can cope with null annotations enabled Bug 403457 - [1.8][compiler] NPE in WildcardBinding.signature - one more test 

Bug 403457 - [1.8][compiler] NPE in WildcardBinding.signature - one more test Bug 403216 - [1.8][null] TypeReference#captureTypeAnnotations treats type annotations as type argument annotations 

Bug 403216 - [1.8][null] TypeReference#captureTypeAnnotations treats type annotations as type argument annotations Bug 392238 - [1.8][compiler][null] Detect semantically invalid null type annotations - annotation on outer type (QTR), incl. reset after detection - code cleanup 
Bug 415734 - Eclipse gives compilation error calling method with an inferred generic return type - regression test 
Bug 410325 - [1.7][compiler] Generified method override different between javac and eclipse compiler 
Bug 412203 - [compiler] Internal compiler error: java.lang.IllegalArgumentException: info cannot be null - cleanup after cherry-pick 
Bug 413460 - NonNullByDefault is not inherited to Constructors when accessed via Class File - Test 
Bug 413958 - Function override returning inherited Generic Type 
Bug 412639 - ResourceLeakTests.testBug381445_1b failed 
Bug 408441 - Type mismatch using Arrays.asList with 3 or more implementations of an interface with the interface type as the last parameter 
Bug 405569 - Resource leak check false positive when using DbUtils.closeQuietly 
Bug 412076 - [compiler] @NonNullByDefault doesn't work for varargs parameter when in generic interface 
Bug 412203 - [compiler] Internal compiler error: java.lang.IllegalArgumentException: info cannot be null 
Bug 411612 - export-ecj.xml uses inconsistent regular expressions 
Bug 413460 - NonNullByDefault is not inherited to Constructors when accessed via Class File - Test 
Fix for bug 409473 - [compiler] JDT cannot compile against JRE 1.8 
Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (9) nullness conflict formal/actual type parameter   - incl. fixes for annotated type variables 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (9) nullness conflict formal/actual type parameter   - incl. fixes for annotated type variables 
Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (9) nullness conflict formal/actual type parameter   - incl. fixes for annotated type variables Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) - clean up tests, workaround is no longer needed 

Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) - clean up tests, workaround is no longer needed Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (8) nullAnnotatedReadableName(): remove from RB, improve for PTB   - incl. a fix for detecting mismatch due to enclosing 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (8) nullAnnotatedReadableName(): remove from RB, improve for PTB   - incl. a fix for detecting mismatch due to enclosing 
Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (8) nullAnnotatedReadableName(): remove from RB, improve for PTB   - incl. a fix for detecting mismatch due to enclosing Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (7) tidy: include ArrayBinding in this treatment 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (7) tidy: include ArrayBinding in this treatment 
Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (7) tidy: include ArrayBinding in this treatment Bug 415291 - [1.8][null] differentiate type incompatibilities due to null annotations 

Bug 415291 - [1.8][null] differentiate type incompatibilities due to null annotations Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (4) only reduced flow analysis here (only NON_NULL) 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (4) only reduced flow analysis here (only NON_NULL) 
Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (4) only reduced flow analysis here (only NON_NULL) Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (3) report detailed typing issues in ReturnExpression 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (3) report detailed typing issues in ReturnExpression 
Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (3) report detailed typing issues in ReturnExpression Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (2) ConditionalExpression: always use unannotated() unless identical 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (2) ConditionalExpression: always use unannotated() unless identical 
Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (2) ConditionalExpression: always use unannotated() unless identical Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (1): remove residue of intermediate work 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (1): remove residue of intermediate work 
Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (1): remove residue of intermediate work Bug 413460 - NonNullByDefault is not inherited to Constructors when accessed via Class File - Test 

Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) Bug 414444 - [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) - adjust one more test suite 

Bug 414444 - [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) - adjust one more test suite Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis - fixed CompilerInvocationTests 

Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis - fixed CompilerInvocationTests Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis 

Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis Bug 392384 - [1.8][compiler][null] Restore nullness info from type annotations in class files - fix for methods with synthetic args (outer this). 

Bug 392384 - [1.8][compiler][null] Restore nullness info from type annotations in class files - fix for methods with synthetic args (outer this). Bug 414444 - [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) - split annotation bundle, but cannot yet use BREE JavaSE-1.8 

Bug 414444 - [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) - split annotation bundle, but cannot yet use BREE JavaSE-1.8 Bug 392384 - [1.8][compiler][null] Restore nullness info from type annotations in class files 

Bug 392384 - [1.8][compiler][null] Restore nullness info from type annotations in class files Bug 407191 - [1.8] Binary access support for type annotations - adjust integration of new tests 
Bug 412076 - [compiler] @NonNullByDefault doesn't work for varargs parameter when in generic interface 
Bug 413958 - Function override returning inherited Generic Type 
Bug 412203 - [compiler] Internal compiler error: java.lang.IllegalArgumentException: info cannot be null 
Bug 412639 - ResourceLeakTests.testBug381445_1b failed 
Bug 408441 - Type mismatch using Arrays.asList with 3 or more implementations of an interface with the interface type as the last parameter 
Bug 405569 - Resource leak check false positive when using DbUtils.closeQuietly 
Bug 412076 - [compiler] @NonNullByDefault doesn't work for varargs parameter when in generic interface 
Bug 412203 - [compiler] Internal compiler error: java.lang.IllegalArgumentException: info cannot be null 
Bug 411612 - export-ecj.xml uses inconsistent regular expressions 
Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis - avoid generating illegal signatures 

Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis - avoid generating illegal signatures Fix for bug 409473 - [compiler] JDT cannot compile against JRE 1.8 
Bug 406384 - Internal error with I20130413 
Bug 384380 - False positive on a « Potential null pointer access » after a continue 
Bug 384380 - False positive on a Â« Potential null pointer access Â» after a continue - prepare by some refactorings, no semantic changes yet 
Removed a stale todo comment, the issue was resolved 10 years ago, the element in question removed altogether 7 years ago. 
Bug 403147 - [compiler][null] FUP of bug 400761: consolidate interaction between unboxing, NPE, and deferred checking - uniform checking for all relevant AST nodes 

Bug 403147 - [compiler][null] FUP of bug 400761: consolidate interaction between unboxing, NPE, and deferred checking - uniform checking for all relevant AST nodes Bug 403147 - [compiler][null] FUP of bug 400761: consolidate interaction between unboxing, NPE, and deferred checking - deferred checking 

Bug 403147 - [compiler][null] FUP of bug 400761: consolidate interaction between unboxing, NPE, and deferred checking - deferred checking Bug 405706 - Eclipse compiler fails to give compiler error when return type is a inferred generic 
Bug 403086 - [compiler][null] include the effect of 'assert' in syntactic null analysis for fields 
Bug 402993 - [null] Follow up of bug 401088: Missing warning about redundant null check 
Bug 385154 - [CBI] JDT core needs a way to produce ecj jar during tycho builds Taking a guess at were jdtCompilerAdapter.jar-classes can be found See comment 51 
Backport of bug 388739 for bug 395681: [compiler] Improve simulation of javac6 behavior from bug 317719 after fixing bug 388795 

Backport of bug 388739 for bug 395681: [compiler] Improve simulation of javac6 behavior from bug 317719 after fixing bug 388795 Bug 406384 - Internal error with I20130413 
Bug 384380 - False positive on a « Potential null pointer access » after a continue 
Bug 384380 - False positive on a « Potential null pointer access » after a continue - prepare by some refactorings, no semantic changes yet 
Removed a stale todo comment, the issue was resolved 10 years ago, the element in question removed altogether 7 years ago. 
Bug 403147 - [compiler][null] FUP of bug 400761: consolidate interaction between unboxing, NPE, and deferred checking - uniform checking for all relevant AST nodes 

Bug 403147 - [compiler][null] FUP of bug 400761: consolidate interaction between unboxing, NPE, and deferred checking - uniform checking for all relevant AST nodes Bug 403147 - [compiler][null] FUP of bug 400761: consolidate interaction between unboxing, NPE, and deferred checking - deferred checking 

Bug 403147 - [compiler][null] FUP of bug 400761: consolidate interaction between unboxing, NPE, and deferred checking - deferred checking Bug 405706 - Eclipse compiler fails to give compiler error when return type is a inferred generic 
Bug 403086 - [compiler][null] include the effect of 'assert' in syntactic null analysis for fields 
Bug 402993 - [null] Follow up of bug 401088: Missing warning about redundant null check 
Bug 385154 - [CBI] JDT core needs a way to produce ecj jar during tycho builds Taking a guess at were jdtCompilerAdapter.jar-classes can be found See comment 51 
Bug 401271 - StackOverflowError when searching for a methods references 
Bug 400761 - [compiler][null] null may be return as boolean without a diagnostic 

Bug 400761 - [compiler][null] null may be return as boolean without a diagnostic Bug 401092 - [compiler][null] Wrong warning "Redundant null check" in outer catch of nested try 
Bug 401088 - [compiler][null] Wrong warning "Redundant null check" inside nested try statement 
Bug 401456 - Code compiles from javac/intellij, but fails from eclipse 
Bug 401159 - [null] Respect org.junit.Assert for control flow 
Bug 401017: [compiler][null] casted reference to @Nullable field lacks a warning 
Bug 382069: [null] Make the null analysis consider JUnit's assertNotNull similarly to assertions 
Bug 376590 - Private fields with @Inject are ignored by unused field validation 
Bug 400421 - [compiler] Null analysis for fields does not take @com.google.inject.Inject into account 
Bug 404728 - [1.8]NPE on QualifiedSuperReference error 

Bug 404728 - [1.8]NPE on QualifiedSuperReference error Bug 404649 - [1.8][compiler] detect illegal reference to indirect or redundant super via I.super.m() syntax - improve how we proceed after detecting an illegal super access - moved checking code to BlockScope to share among MessageSend   and ReferenceExpression - hook these check into ReferenceExpression, too. 

Bug 404649 - [1.8][compiler] detect illegal reference to indirect or redundant super via I.super.m() syntax - improve how we proceed after detecting an illegal super access - moved checking code to BlockScope to share among MessageSend   and ReferenceExpression - hook these check into ReferenceExpression, too. Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Bug 400982 - [1.8][compiler] implement foundation for new type inference - draft of "2nd attempt" in resolve, make InferenceVariable a   TypeVariableBinding to support substitution. - include advance integration of unchecked conversion into 18.2.3 - improve construction of synthetic type variables:   -> split bounds from glbs into superclass / superInterfaces - 2 NPE-fixes 

Bug 400982 - [1.8][compiler] implement foundation for new type inference - draft of "2nd attempt" in resolve, make InferenceVariable a   TypeVariableBinding to support substitution. - include advance integration of unchecked conversion into 18.2.3 - improve construction of synthetic type variables:   -> split bounds from glbs into superclass / superInterfaces - 2 NPE-fixes Bug 404649 - [1.8][compiler] detect illegal reference to indirect or redundant super 

Bug 404649 - [1.8][compiler] detect illegal reference to indirect or redundant super Bug 404649 - [1.8][compiler] detect illegal reference to indirect or redundant super 

Bug 404649 - [1.8][compiler] detect illegal reference to indirect or redundant super Bug 391376 - [1.8] check interaction of default methods with bridge methods and generics - added two more tests (disabled due to bug 404648). 

Bug 391376 - [1.8] check interaction of default methods with bridge methods and generics - added two more tests (disabled due to bug 404648). Bug 391376 - [1.8] check interaction of default methods with bridge methods and generics - improve SuperMethodAccess for default methods 

Bug 391376 - [1.8] check interaction of default methods with bridge methods and generics - improve SuperMethodAccess for default methods Bug 391376 - [1.8] check interaction of default methods with bridge methods and generics 

Bug 391376 - [1.8] check interaction of default methods with bridge methods and generics Bug 403867 - [1.8][compiler] Suspect error about duplicate default methods 

Bug 403867 - [1.8][compiler] Suspect error about duplicate default methods Bug 404042 - [1.8][compiler] when Invocation Type Inference fails fall back to the provisional result for error reporting 

Bug 404042 - [1.8][compiler] when Invocation Type Inference fails fall back to the provisional result for error reporting Bug 403847 - [1.8][compiler] support two phase type inference - one more location to use the tmpBoundSet. 

Bug 403847 - [1.8][compiler] support two phase type inference - one more location to use the tmpBoundSet. Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Bug 403847 - [1.8][compiler] support two phase type inference 

Bug 403847 - [1.8][compiler] support two phase type inference Merge remote-tracking branch 'origin/BETA_JAVA8' into sherrmann/NewTypeInference 
Bug 403216 - [1.8][null] TypeReference#captureTypeAnnotations treats type annotations as type argument annotations Bug 403457 - [1.8][compiler] NPE in WildcardBinding.signature 

Bug 403216 - [1.8][null] TypeReference#captureTypeAnnotations treats type annotations as type argument annotations Bug 403457 - [1.8][compiler] NPE in WildcardBinding.signature 
Bug 403216 - [1.8][null] TypeReference#captureTypeAnnotations treats type annotations as type argument annotations Bug 403457 - [1.8][compiler] NPE in WildcardBinding.signature Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis Bug 403216 - [1.8][null] TypeReference#captureTypeAnnotations treats type annotations as type argument annotations Bug 403457 - [1.8][compiler] NPE in WildcardBinding.signature 

Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis Bug 403216 - [1.8][null] TypeReference#captureTypeAnnotations treats type annotations as type argument annotations Bug 403457 - [1.8][compiler] NPE in WildcardBinding.signature 
Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis Bug 403216 - [1.8][null] TypeReference#captureTypeAnnotations treats type annotations as type argument annotations Bug 403457 - [1.8][compiler] NPE in WildcardBinding.signature 
Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis Bug 403216 - [1.8][null] TypeReference#captureTypeAnnotations treats type annotations as type argument annotations Bug 403457 - [1.8][compiler] NPE in WildcardBinding.signature Bug 401271 - StackOverflowError when searching for a methods references 
Bug 400761 - [compiler][null] null may be return as boolean without a diagnostic 

Bug 400761 - [compiler][null] null may be return as boolean without a diagnostic bug 400982 - [1.8][compiler] implement foundation for new type inference WIP regarding boxing & return type resolution after provisional resolve 

bug 400982 - [1.8][compiler] implement foundation for new type inference WIP regarding boxing & return type resolution after provisional resolve bug 400982 - [1.8][compiler] implement foundation for new type inference - avoid state in inference variable and type bound to enable roll-back   record in the bound set instead: is incorporated, instantiated type 

bug 400982 - [1.8][compiler] implement foundation for new type inference - avoid state in inference variable and type bound to enable roll-back   record in the bound set instead: is incorporated, instantiated type bug 400982 - [1.8][compiler] implement foundation for new type inference - improved handling of unreduceable constraints - added reduction of type equality constraints - added reduction involving primitive types - check boxing conversion where spec says "loose invocation context" - force usage of the inference result, even if negative. 

bug 400982 - [1.8][compiler] implement foundation for new type inference - improved handling of unreduceable constraints - added reduction of type equality constraints - added reduction involving primitive types - check boxing conversion where spec says "loose invocation context" - force usage of the inference result, even if negative. bug 400982 - [1.8][compiler] implement foundation for new type inference - new internal representation of BoundSet to better support the   set-property - include target type in the inference - support multiple rounds in solve() - throw UnsupportedOperationException for any known incompleteness 

bug 400982 - [1.8][compiler] implement foundation for new type inference - new internal representation of BoundSet to better support the   set-property - include target type in the inference - support multiple rounds in solve() - throw UnsupportedOperationException for any known incompleteness Bug 400982 - [1.8][compiler] implement foundation for new type inference 

Bug 400982 - [1.8][compiler] implement foundation for new type inference Bug 401796 - [1.8][compiler] don't treat default methods as overriding an independent inherited abstract method Bug 402237 - [1.8][compiler] investigate differences between compilers re MethodVerifyTest 

Bug 401796 - [1.8][compiler] don't treat default methods as overriding an independent inherited abstract method Bug 402237 - [1.8][compiler] investigate differences between compilers re MethodVerifyTest bug 402028 - [1.8][compiler] null analysis for reference expressions 

bug 402028 - [1.8][compiler] null analysis for reference expressions bug 402028 - [1.8][compiler] null analysis for reference expressions 

bug 402028 - [1.8][compiler] null analysis for reference expressions bug 401030 - [1.8][null] Null analysis support for lambda methods. 

bug 401030 - [1.8][null] Null analysis support for lambda methods. bug 401030 - [1.8][null] Null analysis support for lambda methods. 

bug 401030 - [1.8][null] Null analysis support for lambda methods. Bug 401092 - [compiler][null] Wrong warning "Redundant null check" in outer catch of nested try 
Bug 401088 - [compiler][null] Wrong warning "Redundant null check" inside nested try statement 
Bug 401456 - Code compiles from javac/intellij, but fails from eclipse 
Bug 401246 - [1.8][compiler] abstract class method should now trump conflicting default methods 

Bug 401246 - [1.8][compiler] abstract class method should now trump conflicting default methods Bug 401235 - [1.8][compiler] 'this' reference must be allowed in default methods and local classes 

Bug 401235 - [1.8][compiler] 'this' reference must be allowed in default methods and local classes Bug 382350 - [1.8][compiler] Unable to invoke inherited default method via I.super.m() syntax 

Bug 382350 - [1.8][compiler] Unable to invoke inherited default method via I.super.m() syntax Bug 399567 - [1.8] Different error message from the reference compiler 

Bug 399567 - [1.8] Different error message from the reference compiler Bug 401159 - [null] Respect org.junit.Assert for control flow 
Bug 401035 - [1.8] A few tests have started failing recently 

Bug 401035 - [1.8] A few tests have started failing recently Bug 401017: [compiler][null] casted reference to @Nullable field lacks a warning 
Bug 383973 - [1.8][compiler] syntax recovery in the presence of default methods 

Bug 383973 - [1.8][compiler] syntax recovery in the presence of default methods Bug 382069: [null] Make the null analysis consider JUnit's assertNotNull similarly to assertions 
Bug 400710 - [1.8][compiler] synthetic access to default method generates wrong code 

Bug 400710 - [1.8][compiler] synthetic access to default method generates wrong code Bug 376590 - Private fields with @Inject are ignored by unused field validation 
Bug 400421 - [compiler] Null analysis for fields does not take @com.google.inject.Inject into account 
Combined fix for Bug 331649 - [compiler][null] consider null annotations for fields Bug 382789 - [compiler][null] warn when syntactically-nonnull   expression is compared against null Bug 380896 - [compiler][null] Enum constants not recognised as being   NonNull. Bug 383368 - [compiler][null] syntactic null analysis for field   references Bug 388630 - @NonNull diagnostics at line 0 
Bug 393719 - [compiler] inconsistent warnings on iteration variables 
Bug 378024- Ordering of comments between imports not preserved - results of code review incl fix for issue in comment 19 
Re-enable a test disabled with 49089cbae1addf8c1c39b3104b7cd1cbaddbc1e7 No longer an issue since the release of bug 381345. 
Bug 381345 - [1.8] Take care of the Java 8 major version 
Bug 390883 - [1.8][compiler] Unable to override default method 

Bug 390883 - [1.8][compiler] Unable to override default method Combined fix for Bug 331649 - [compiler][null] consider null annotations for fields Bug 382789 - [compiler][null] warn when syntactically-nonnull   expression is compared against null Bug 380896 - [compiler][null] Enum constants not recognised as being   NonNull. Bug 383368 - [compiler][null] syntactic null analysis for field   references Bug 388630 - @NonNull diagnostics at line 0 
Bug 393719 - [compiler] inconsistent warnings on iteration variables 
Bug 378024- Ordering of comments between imports not preserved - results of code review incl fix for issue in comment 19 
Bug 391517 - java.lang.VerifyError on code that runs correctly in Eclipse 3.7 and eclipse 3.6 

Bug 388739 - [1.8][compiler] consider default methods when detecting whether a class needs to be declared abstract 
Bug 388739 - [1.8][compiler] consider default methods when detecting whether a class needs to be declared abstract - cleanup of loops "first round" & "second round"; - the latter part incidentally fixes bug 395681. 
Bug 388739 - [1.8][compiler] consider default methods when detecting whether a class needs to be declared abstract 
Bug 392862 - [1.8][compiler][null] Evaluate null annotations on array types 
Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis - fixed a regression after merging with bug 388281 
Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis 
Bug 382347 - [1.8][compiler] Compiler accepts incorrect default method inheritance - more (simple) tests 
Bug 388954 - [1.8][compiler] detect default methods in class files - incl. revert of one patch from bug 388800 - replace with new strategy to fix-up tests by adding stub impls. 
Bug 388954 - [1.8][compiler] detect default methods in class files - incl. revert of one patch from bug 388800 - replace with new strategy to fix-up tests by adding stub impls. 
Bug 382347 - [1.8][compiler] Compiler accepts incorrect default method inheritance - copyright updates 
Bug 383968 - [1.8][compiler] update checking of method modifiers re default methods - convert a first test to a positive test 
Bug 388800 - [1.8] adjust tests to 1.8 JRE - first bunch: MethodVerifierTest 
Bug 382347 - [1.8][compiler] Compiler accepts incorrect default method inheritance 
Bug 383968 - [1.8][compiler] update checking of method modifiers re default methods - one more test and clarify connection to the spec in the impl. 
Bug 388634 - [1.8] Test failure in Compliance_1_5 at compliance 1.8 
Bug 382355 - [1.8][compiler] Compiler accepts erroneous default method Complain if a default method attempts to override a method from Object. 
Bug 380501 - [1.8][compiler] Add support for default methods (JSR 335) - Integrate DefaultMethodsTest into the suite. 
Update for Bug 382353 - [1.8][compiler] Implementation property modifiers should be accepted on default methods. - add missing @since tag. 
Test update for Bug 382345 - [1.8][compiler] Compiler should not complain about unimplemented method where default implementation exists - fix comment - add a mixed test (abstract + non-abstract method) 
Update headers: disclaimer and contributors section for bug 382353 and bug 382354 
Update headers: disclaimer and contributors section for bug 382353 and bug 382354 
Test for Bug 382345 - [1.8][compiler] Compiler should not complain about unimplemented method where default implementation exists 
Tests & fix for Bug 382353 - [1.8][compiler] Implementation property modifiers should be accepted on default methods. Bug 483337: "regression" in AnnotateAssistTest15.testBug466232() due to improvement from bug 480462 
Bug 483337: "regression" in AnnotateAssistTest15.testBug466232() due to improvement from bug 480462 
bug 471034 - Error creating external annotation on array parameter in "Type name[]" format 

bug 471034 - Error creating external annotation on array parameter in "Type name[]" format bug 471034 - Error creating external annotation on array parameter in "Type name[]" format 

bug 471034 - Error creating external annotation on array parameter in "Type name[]" format Bug 466232 - [null] Annotate command should be resilient to "broken classfiles" 
Bug 466656 - StackOverflow in new label composer on recursive type 
Bug 466278: Annotate command should be disabled in context menu when not applicable 
Bug 463360 - [override method][null] generating method override should not create redundant null annotations 

Bug 463360 - [override method][null] generating method override should not create redundant null annotations Bug 403917 - [1.8] Render TYPE_USE annotations in Javadoc hover/view 

Bug 403917 - [1.8] Render TYPE_USE annotations in Javadoc hover/view Bug 465293 - External annotation path per container and project 

Bug 465293 - External annotation path per container and project Bug 463936 - ExternalAnnotationsAttachmentDialog should not allow virtual folders 

Bug 463936 - ExternalAnnotationsAttachmentDialog should not allow virtual folders Revert "Bug 461999 - Warning option for bug 410218" 
Bug 461999 - Warning option for bug 410218 
Bug 458200 - [null] "Annotate" proposals for adding external null annotations to library classes - added support for annotating field types 

Bug 458200 - [null] "Annotate" proposals for adding external null annotations to library classes - added support for annotating field types Bug 416915 - Allow to run tests with tycho-surefire-plugin 

Bug 458200, bug 458201: fixed typo in ExternalNullAnnoatationChangeProposals 
Bug 458200, bug 458201: fixed typo in ExternalNullAnnoatationChangeProposals Bug 458201 - Offer new command "Annotate" on ClassFileEditor Bug 458200 - [null] "Annotate" proposals for adding external null annotations to library classes 

Bug 458201 - Offer new command "Annotate" on ClassFileEditor Bug 458200 - [null] "Annotate" proposals for adding external null annotations to library classes 
Bug 458201 - Offer new command "Annotate" on ClassFileEditor Bug 458200 - [null] "Annotate" proposals for adding external null annotations to library classes Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) 

Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) Bug 425183 comment 10: Test case for NPE in jdt.core 
Fixed Bug 427069: [1.8] Investigate test failures in NullAnnotationsQuickFixTest 
Fixed Bug 427069: [1.8] Investigate test failures in NullAnnotationsQuickFixTest 

Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) 
Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) Cumulative fix for the following problems: - bug 400668: [quick fix] The fix change parameter type to @Nonnull generated a null change - bug 405086: [quick fix] don't propose null annotations when those are disabled - bug 395555: [quick fix] Update null annotation quick fixes for bug 388281 - bug 378724: Null annotations are extremely hard to use in an existing project 

Cumulative fix for the following problems: - bug 400668: [quick fix] The fix change parameter type to @Nonnull generated a null change - bug 405086: [quick fix] don't propose null annotations when those are disabled - bug 395555: [quick fix] Update null annotation quick fixes for bug 388281 - bug 378724: Null annotations are extremely hard to use in an existing project 
Cumulative fix for the following problems: - bug 400668: [quick fix] The fix change parameter type to @Nonnull generated a null change - bug 405086: [quick fix] don't propose null annotations when those are disabled - bug 395555: [quick fix] Update null annotation quick fixes for bug 388281 - bug 378724: Null annotations are extremely hard to use in an existing project 
Cumulative fix for the following problems: - bug 400668: [quick fix] The fix change parameter type to @Nonnull generated a null change - bug 405086: [quick fix] don't propose null annotations when those are disabled - bug 395555: [quick fix] Update null annotation quick fixes for bug 388281 - bug 378724: Null annotations are extremely hard to use in an existing project Fixed bug 398995: [quick fix] Extract field access to checked local variable 

Fixed bug 398995: [quick fix] Extract field access to checked local variable Fixed bug 398965: [preferences] UI option for syntactic analysis for fields 

Fixed bug 398965: [preferences] UI option for syntactic analysis for fields Bug 398211: UI changes for bug 381443 (@NonNull parameter not annotated in overriding method) 
Fixed bug 378024: Ordering of comments between imports not preserved 

Bug 337977: [quick fix] Add quick fixes for null annotations - Quick fix to remove redundant default nullness annotations 
Bug 337977: [quick fix] Add quick fixes for null annotations - Quick fix to remove redundant nullness annotations 
Bug 337977: [quick fix] Add quick fixes for null annotations - Refactor/Move code around to fit existing patterns 
Bug 337977: [quick fix] Add quick fixes for null annotations - Add tests 
Bug 337977: [quick fix] Add quick fixes for null annotations - Patch from comment 28 - Merge NullFixMessages to MultiFixMessages 
Bug 337977: [quick fix] Add quick fixes for null annotations 
Bug 337977: [quick fix] Add quick fixes for null annotations - Wording tweaks - Code style - Bug fixes 
Bug 337977: [quick fix] Add quick fixes for null annotations - Format code - Quick fix relevance - method visibility - fix warnings - bug fixes 
Bug 337977: [quick fix] Add quickfixes for null annotations 