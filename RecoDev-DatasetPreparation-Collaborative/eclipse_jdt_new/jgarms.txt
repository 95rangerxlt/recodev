
Bug 396139 - [1.8] define which JRE8 build we are targeting in BETA_JAVA8 - adjust for 1.8 b129 (needed by GTT.test1035) 
Bug 396139 - [1.8] define which JRE8 build we are targeting in BETA_JAVA8 - adjust to tests to method renaming in Comparator as of b106 ;#; jgarms

Bugzilla Bug 184923 Deadlock in AnnotationProcessorFactoryLoader 

Bugzilla Bug 184923 Deadlock in AnnotationProcessorFactoryLoader Fix windows-specific tests that were broken on linux. Patch submitted by sbandow@bea.com. 
Reset the java project caches on an apt build. This fixes a situation where stale fragment caches would be fed to APT during a clean build. 
Add type visitor tests. 
Bugzilla Bug 140521 Implementations of Declaration#accept(DeclarationVisitor) must not call super.accept(visitor). 

Bugzilla Bug 140521 Implementations of Declaration#accept(DeclarationVisitor) must not call super.accept(visitor). New tests for file generation and annotation scanning contributed by sbandow@bea.com. 
Remove use of private jdt.core code and switch to using public APIs, courtesy of Jerome's suggestion. 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=139916 

https://bugs.eclipse.org/bugs/show_bug.cgi?id=139916 Fix NPE in EclipseDeclarationImpl with a check for null. 
Fix NPE in EclipseDeclarationImpl with a check for null. 
Cleanup: remove unused import from test. 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=125156 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=133391 

https://bugs.eclipse.org/bugs/show_bug.cgi?id=133391 Add support for serializing generated file info between Eclipse invocations. 
Add support for serializing our generated file dependencies. 
Removing temporary hack now that jdt.core has fixed a problem with certain compilation errors being reported twice. 
Update incorrect marker type in plugin.xml which was preventing our problems from showing up in the problems view. 
Fix NPE in fetching the classpath for dependent projects. 
Fix NPE when computing classpath in dependent projects. 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=133947 

https://bugs.eclipse.org/bugs/show_bug.cgi?id=133947 https://bugs.eclipse.org/bugs/show_bug.cgi?id=133947 

https://bugs.eclipse.org/bugs/show_bug.cgi?id=133947 Removed unused code in AptCompilationParticipant. 
Removing debug output to STDERR. 
Submission from sbandow@bea.com to test annotation proxies. 
Add classpath to options for dependent projects and their build directories. 
Add negative type cache to processor environment. 
Fix multi-dimensional array case for Fields. Also added a JUnit test case for exactly that. 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=130810 

https://bugs.eclipse.org/bugs/show_bug.cgi?id=130810 Re-enable APT test for unresolved types, thanks to Philippe's jdt.core fix. 
Disable failing APT tests. Will pursue fixes separately. 
Remove unnecessary classes and interfaces from public API. 
Complete support for inner types requested from Env.getTypeDeclaration(). E.g.: java.util.Map.Entry. Previously we supported only the syntax "java.util.Map$Entry". 
Bugzilla bug 130810. 

Bugzilla bug 130810. When APT is disabled, recursively delete generated source directories as long as they are derived and empty. 
Workaround for bug in platform resource notification: record deletions in a post-change event and act on them in pre-build. 
Updating to version 3.1.2.apt04. 
PERF: Cache the package fragment roots if requested during a build. 
Update version to 3.1.2. 
Modify IllegalArgumentExceptions to indicate specifically whether the arg was empty or null. 
Throw IllegalArgumentException if type name is null or empty on createSourceFile and createClassFile. 
Fix CCE and NPE from incorrect proxy implementation. 
Update apt 3.1 plugin for update site. 
Updating APT tests  to compile and run against jdt core tests in HEAD. 
Add manifest-classpath support to JarClassLoader. 
Log stack trace on failure to load factories. 
Fix ArrayIndexOutOfBoundsException when sorting offsets. 
Add requiredSourceLevel to apt compilation participant extension. 
Add support for annotations on method parameters. 
Test fixes: 
Add DRTs for file generation. 
Add mirror javadoc. 
Remove improper html from mirrorapi.jar in order to pass checkpii validation during releng build. 
New version of mirrorapi.jar that does not contain html. 
Code cleanup: remove unused code and enable more warnings in the project. 
Bug fixes: 
Fix nightly test breakage on linux and mac. Switch from using windows-based path to platform-independent path. 
Add mirrorapi.jar to build, remove references to tools.jar. 
Switch to using mirrorapi.jar, removing dependency on tools.jar. 
Bug fixes: 
1. Remove tools.jar, replace with the new open-sourced mirror api jar. 2. Change version numbers to 3.1.1.apt03 for our update site. 
Fix ClassCastException in APTDispatch.mergeMaps(). 
Fix deadlock that could occur when creating generated folders. 
Fix DRT failure during creation of generated non-java files. Needed to keep track of all generated files in order to properly determine which ones should be deleted. 
Fix bug in file encoding when writing text files. Now we set the Eclipse metadata when writing an encoded file. 
Add support for deletion of generated files when a source change indicates that a file should no longer be generated. 
Fix occasional file-locking problems in Test.tearDown() by running GC and finalizers. 
wharley - close InputStreams when done with them.  (Checkin for jgarms.) 
Add getAbridgedASTWithBindings() to EclipseAnnotationProcessorEnvironment. 
jgarms: fix NPE and assertion in GFM when project is deleted. 
jgarms: Change ICompilationParticipant to CompilationParticipant. 
jgarms: integrate from gen_src_work sandbox. 
jgarms: fix non-localized warnings in GFM logging. 
jgarms: fix race condition in setting the classpath during project creation. 
Add more info to GeneratedFileManager failure. 
Fix IllegalArgumentException in getTypeDeclaration when String is "". We now match Sun's behavior. 
jgarms: temporarily revert use of JarClassLoader because of problems with Packages. 
jgarms: Enable .factorypath to be automatically checked out by a revision control system. 
jgarms: Switch to using a custom classloader so that we can close jars just before a project is deleted. 
jgarms: mark generated non-java files as derived. 
jgarms: 
jgarms: fix unused import. 
jgarms: correct timing of batch classloader reset: it should take place before fetching the factories rather than after. ;) 
jgarms: perform file refresh for text file generation as a separate job outside the workspace lock. 
jgarms: add more info during processing failure. 
jgarms: fix NPE when editing factory path in config UI. 
jgarms: reset batch processors just before a full build, rather than on a clean. 
jgarms: Bounce batch classloader on clean. Added DRT that verifies that class is reloaded at the correct time. 
jgarms: update jdt.apt to version 3.1.1. 
jgarms: switch Filer class and text file creation to call IFile.refresh() in order to have Eclipse's file system view refresh when a file is written to disk during the build. 
jgarms: re-add accidentally deleted settings file. 
jgarms: submit releng-related patch submitted by Adrian. This allows automating tests. 
jgarms: Fix incorrect assertion in GFM. 
jgarms: include apt source code in plugin. Change courtesy of ghoren@bea.com. 
jgarms: fixed-point iteration during the build if types are missing and APT generates files. This fixes the beehive case that previously would fail during a clean build. 
jgarms: fix bugzilla bug 108917: Reflection does not work for enums and arrays of annotations 
jgarms: implement batch processor errors as IMarkers instead of IProblems. This allows batch processing errors to be handled separately from incremental processors' errors. 
jgarms: fix follow-up NPE in ExecutableUtil. 
jgarms: fix NPE in ExecutableUtil when synthetic methods are examined. 
jgarms: fix incorrect assertion and improve logging of failures during file generation. 
jgarms: Fix resource exception when attempting to run an APT reconcile inside a workspace operation. 
jgarms: new tests submitted by sbandow@bea.com. Adds tests for file generation and multiple rounds. 
jgarms: support nested paths for the generated source directory (e.g. "build/apt"). 
jgarms: bug fixes 
jgarms: bug fixes: 
jgarms: fix for refactoring when generated code is present. No longer lock generated files, as it causes errors during refactoring. 
jgarms: update plugin versions to 3.1.0.apt02 for update site release. 
jgarms: AptConfig fixes: 
Fix mis-named APIs on ICompilationParticipant. Originally we expected to have post-build and post-reconcile annotation processing, but in the end all processing is pre-build/reconcile. This change corrects the API naming to reflect how things really work. 
jgarms - Force plugins to load when APT is initialized. 
jgarms: clean up unused code in AnnotationProcessorFactoryLoader. Also add tests submitted by Dan Somerfield for proxies. 
Bugzilla Bug 106541: ClassLoader problem when generating code with APT 
Bug 106541 ClassLoader problem when generating code with APT 
jgarms: 
jgarms: update plugin names and providers in preparation for making update site public. 
jgarms: add about.html to our plugins so that the update site will include them. 
jgarms: add plugin.xml and documentation to jdt.apt.ui plugin build. 
jgarms: update plugin name in plugin.xml for jdt.apt.core. 
jgarms: Documentation for two items: source control with APT and creating a quick-fix processor with APT. 
jgarms: fix syntax error in switch/case usage that is not caught by eclipse. This allows compiling by javac. 
jgarms: forgot to add copyright notice in previous checkin. 
jgarms: Add quick fix processor implementation and extension point for quick-fixes added by APT processors. 
jgarms: 
Update plugin versions to 3.1.0.apt01 for upcoming alpha release. 
Switch problem IDs to match recent modifications to IProblem. 
Fix IProblem ID for quick-fixable errors, setting the quick-fix ID only on those problems that are fixable. 
Fix up problem noticed with buddy build. 
Remove files mistakenly checked in. 
Turn on compiler warnings for unnecessary casts and unused locals. Also clean up code that exhibited those problems. 
Add support for quick-fixing errors and warnings created by annotation processors. 
Turn on warnings for use of non-localized strings. 
Change string externalization to use OSGI method. 
Label non-localizable strings. 
Localize strings in jdt.apt.ui. 
Localize strings in jdt.apt.core. 
Update all exception logging to go through a common path: AptPlugin.log(Exception e, String message). 
Add more documentation about configuring and running APT inside Eclipse. 
Move help docs into UI plugin, removing dependency from core -> help. 
Add support and tests for passing -classpath and -sourcepath as APT options. 
100951 Should not do APT dispatch on non 1.5 projects 

100951 Should not do APT dispatch on non 1.5 projects Fix typo in build instructions. 
More updates to build instructions -- remove use of 1.4 VM. 
Updated build instructions based on Albert's feedback. 
Perf fixes: 
New tests by sbandow. Reviewed by jgarms. 
Finish factorypath implementation. Config should now be observed by APT. Lacking tests however. 
Checkpoint for factorypath work. Ready for UI work. Serialization/deserialization functions, and APIs work, but not yet hooked into factory loading/activation. 
Add tests for factory serialization/deserialization. 
Implementation of factory path serialization. Not hooked up to UI yet. 
Add public API for fetching an annotation processor factory given an annotation. 
Add help to plugin. Currently only headless build is documented, but this will provide a framework for documenting developing annotation processors and configuring them. 
Ant task for command-line invocation of apt builder. TODO: documentation via plugin help contribution. 
Change BuildListener to AptCompilationParticipant. 
Commandline build with APT enabled. Currently simply cleans and builds the provided workspace. 
Perf tests for APT work. Fails if greater than 15% perf degradation is found when building a project that does not use annotations. 
Performance improvements to pre-compilation scanning. Use custom scanner and ignore encoding if it does not change the outcome (i.e. 1-byte encodings where all java symbols are identical to ASCII). 
