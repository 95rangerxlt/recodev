import org.eclipse.jdt.annotation.NonNullByDefault;

@NonNullByDefault
public class X {
	void foo(int @NonNull [] x) {}
}

Null Pointer Exception. Stack Trace.

LookupEnvironment.createAnnotatedType(TypeBinding, AnnotationBinding[]) line: 976	
	MethodBinding.fillInDefaultNonNullness18(AbstractMethodDeclaration, LookupEnvironment) line: 524	
	ImplicitNullAnnotationVerifier.checkImplicitNullAnnotations(MethodBinding, AbstractMethodDeclaration, boolean, Scope) line: 155	
	SourceTypeBinding.createArgumentBindings(MethodBinding, CompilerOptions) line: 2004	
	SourceTypeBinding.resolveTypesFor(MethodBinding) line: 1971	
	SourceTypeBinding.methods() line: 1465	
	SourceTypeBinding.faultInTypesForFieldsAndMethods() line: 853	
	CompilationUnitScope.faultInTypes() line: 424	
	AbstractRegressionTest$26(Compiler).process(CompilationUnitDeclaration, int) line: 764	
	AbstractRegressionTest$26.process(CompilationUnitDeclaration, int) line: 2601	
	AbstractRegressionTest$26(Compiler).compile(ICompilationUnit[]) line: 471	
	NullAnnotationTest(AbstractRegressionTest).runTest(boolean, String[], String[], String[], Map, boolean, ICompilerRequestor, boolean, String, String[], boolean, String[], String, String, ASTVisitor, AbstractRegressionTest$JavacTestOptions) line: 2610	
	NullAnnotationTest(AbstractRegressionTest).runTest(boolean, String[], String[], Map, boolean, ICompilerRequestor, boolean, String, boolean, String[], String, String, AbstractRegressionTest$JavacTestOptions) line: 2429	
	NullAnnotationTest(AbstractRegressionTest).runNegativeTest(String[], String, String[], boolean) line: 2126	
	NullAnnotationTest(AbstractNullAnnotationTest).runNegativeTestWithLibs(String[], String) line: 114	
	NullAnnotationTest.testNullNPETest() line: 7013	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 483	
	NullAnnotationTest(TestCase).runTest() line: 176	
	NullAnnotationTest(TestCase).runBare() line: 141	
	TestResult$1.protect() line: 122	
	TestResult.runProtected(Test, Protectable) line: 142	
	TestResult.run(TestCase) line: 125	
	NullAnnotationTest(TestCase).run(TestResult) line: 129	
	RegressionTestSetup(TestSuite).runTest(Test, TestResult) line: 255	
	RegressionTestSetup(TestSuite).run(TestResult) line: 250	
	RegressionTestSetup(CompilerTestSetup).run(TestResult) line: 55	
	TestSuite.runTest(Test, TestResult) line: 255	
	TestSuite.run(TestResult) line: 250	
	JUnit3TestReference.run(TestExecution) line: 131	
	TestExecution.run(ITestReference[]) line: 38	
	RemotePluginTestRunner(RemoteTestRunner).runTests(String[], String, TestExecution) line: 467	
	RemotePluginTestRunner(RemoteTestRunner).runTests(TestExecution) line: 683	
	RemotePluginTestRunner(RemoteTestRunner).run() line: 390	
	RemotePluginTestRunner.main(String[]) line: 62	
	CoreTestApplication.run(Object) line: 23	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 483	
	EclipseAppContainer.callMethodWithException(Object, String, Class[], Object[]) line: 587	
	EclipseAppHandle.run(Object) line: 198	
	EclipseAppLauncher.runApplication(Object) line: 110	
	EclipseAppLauncher.start(Object) line: 79	
	EclipseStarter.run(Object) line: 354	
	EclipseStarter.run(String[], Runnable) line: 181	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 483	
	Main.invokeFramework(String[], URL[]) line: 636	
	Main.basicRun(String[]) line: 591	
	Main.run(String[]) line: 1450	
	Main.main(String[]) line: 1426 

------------------------------------------------------------------
I will put up the fix in a few minutes.

import org.eclipse.jdt.annotation.NonNullByDefault;

@NonNullByDefault
public class X {
	void foo(int @NonNull [] x) {}
}

Null Pointer Exception. Stack Trace.

LookupEnvironment.createAnnotatedType(TypeBinding, AnnotationBinding[]) line: 976	
	MethodBinding.fillInDefaultNonNullness18(AbstractMethodDeclaration, LookupEnvironment) line: 524	
	ImplicitNullAnnotationVerifier.checkImplicitNullAnnotations(MethodBinding, AbstractMethodDeclaration, boolean, Scope) line: 155	
	SourceTypeBinding.createArgumentBindings(MethodBinding, CompilerOptions) line: 2004	
	SourceTypeBinding.resolveTypesFor(MethodBinding) line: 1971	
	SourceTypeBinding.methods() line: 1465	
	SourceTypeBinding.faultInTypesForFieldsAndMethods() line: 853	
	CompilationUnitScope.faultInTypes() line: 424	
	AbstractRegressionTest$26(Compiler).process(CompilationUnitDeclaration, int) line: 764	
	AbstractRegressionTest$26.process(CompilationUnitDeclaration, int) line: 2601	
	AbstractRegressionTest$26(Compiler).compile(ICompilationUnit[]) line: 471	
	NullAnnotationTest(AbstractRegressionTest).runTest(boolean, String[], String[], String[], Map, boolean, ICompilerRequestor, boolean, String, String[], boolean, String[], String, String, ASTVisitor, AbstractRegressionTest$JavacTestOptions) line: 2610	
	NullAnnotationTest(AbstractRegressionTest).runTest(boolean, String[], String[], Map, boolean, ICompilerRequestor, boolean, String, boolean, String[], String, String, AbstractRegressionTest$JavacTestOptions) line: 2429	
	NullAnnotationTest(AbstractRegressionTest).runNegativeTest(String[], String, String[], boolean) line: 2126	
	NullAnnotationTest(AbstractNullAnnotationTest).runNegativeTestWithLibs(String[], String) line: 114	
	NullAnnotationTest.testNullNPETest() line: 7013	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 483	
	NullAnnotationTest(TestCase).runTest() line: 176	
	NullAnnotationTest(TestCase).runBare() line: 141	
	TestResult$1.protect() line: 122	
	TestResult.runProtected(Test, Protectable) line: 142	
	TestResult.run(TestCase) line: 125	
	NullAnnotationTest(TestCase).run(TestResult) line: 129	
	RegressionTestSetup(TestSuite).runTest(Test, TestResult) line: 255	
	RegressionTestSetup(TestSuite).run(TestResult) line: 250	
	RegressionTestSetup(CompilerTestSetup).run(TestResult) line: 55	
	TestSuite.runTest(Test, TestResult) line: 255	
	TestSuite.run(TestResult) line: 250	
	JUnit3TestReference.run(TestExecution) line: 131	
	TestExecution.run(ITestReference[]) line: 38	
	RemotePluginTestRunner(RemoteTestRunner).runTests(String[], String, TestExecution) line: 467	
	RemotePluginTestRunner(RemoteTestRunner).runTests(TestExecution) line: 683	
	RemotePluginTestRunner(RemoteTestRunner).run() line: 390	
	RemotePluginTestRunner.main(String[]) line: 62	
	CoreTestApplication.run(Object) line: 23	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 483	
	EclipseAppContainer.callMethodWithException(Object, String, Class[], Object[]) line: 587	
	EclipseAppHandle.run(Object) line: 198	
	EclipseAppLauncher.runApplication(Object) line: 110	
	EclipseAppLauncher.start(Object) line: 79	
	EclipseStarter.run(Object) line: 354	
	EclipseStarter.run(String[], Runnable) line: 181	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 483	
	Main.invokeFramework(String[], URL[]) line: 636	
	Main.basicRun(String[]) line: 591	
	Main.run(String[]) line: 1450	
	Main.main(String[]) line: 1426 

------------------------------------------------------------------
I will put up the fix in a few minutes.
Fails with SR2.
(In reply to shankha banerjee from comment #1)
> Fails with SR2.

Fails with SR2 + Java8.
Created attachment 240826
Patch

The list array containing all the annotations associated with a array
type is delimited (denoting dimensions) by null entries.

We throw a NPE while trying to de refeence one of the NULL entries.

The patch carries forward the null entries.

All Test Results are green.

I will play around with arrays and null annotations 
a little more and see if there are any other issues.
Stephan, just an alert that I am seeing two AnnotationBindings for NonNull
one with a proper annotation type and another with a MTB - and effectively 
no filtering happening there, the NPE fix is good.
If this comes in soon (a day or two) we can have this for GA - since this
happens under option check.
Seeing the MissingTypeBinding explains the duplication: the explicit annotation in source code was not resolved and hence not recognized as the NonNull annotation. OTOH, the annotation we add from the default is always resolved, since using a FQN.

The same NPE can be triggered like this:

//---
import org.eclipse.jdt.annotation.NonNullByDefault;
import java.lang.annotation.*;
@Target(ElementType.TYPE_USE) @interface Marker{}
@NonNullByDefault
public class X {
       void foo(int @Marker[] x) {}
}
//---

which demonstrates the necessary ingredients:

- any annotation on the outermost dimension
- apply @NonNull as per the default

Searching further basically the same situation can be created by
//---
import java.lang.annotation.*;
@Target(ElementType.TYPE_USE) @interface Marker1 {}
@Target(ElementType.TYPE_USE) @interface Marker2 {}
public class C {
  <@Marker1 T>T m2(T arg) {
    return arg;
  }
  void test2(C c) {
    String[] s = c.<String @Marker1 []>m2(null);
  }
}
//---

from which I see in LE.createAnnotatedType:
oldies[0] = @Marker2
oldies[1] = null

newbies[0] = @Marker1

merged to
newbies[0] = @Marker1
newbies[1] = @Marker2
newbies[2] = null

creates this type: String @Marker1 @Marker2 []

From this I conclude that the null in the array of annotations has system and maybe shouldn't be removed, at least not at this particular code position.

The null array element is created via this line in ATS.getAnnotatedType():

annotatedType = getArrayType(arrayBinding.leafComponentType, arrayBinding.dimensions, flattenedAnnotations(annotations));

Comment of flattenedAnnotations mentions "There is a final null always."
So, yep, the null element is intentional => let's not remove it!
After that analysis, going back to the patch I see that it does exactly the right thing, great, so we agree :)

I just cleaned up newlines in the test, added another one and released 

BETA_JAVA8 : http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=5e60820b64ef6517f212bad731ec82ee0e19c44d

BETA_JAVA8_LUNA: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8_LUNA&id=36b688c7927454020434d559d15c8536a0c1af14

Thanks, Shankha!
I had initially tested with 
if(newbies[i] == null) {
  //filtered[count++] = null;
  continue;
}

We don't let the null entries through to filtered.
None of the tests failed.

I will see if I can come up with a test case which can expose this scenario.
(In reply to shankha banerjee from comment #8)
> I had initially tested with 
> if(newbies[i] == null) {
>   //filtered[count++] = null;
>   continue;
> }
> 
> We don't let the null entries through to filtered.
> None of the tests failed.
> 
> I will see if I can come up with a test case which can expose this scenario.

Or if the delimiters (null entries) can be removed earlier.
(In reply to shankha banerjee from comment #9)
> (In reply to shankha banerjee from comment #8)
> > I had initially tested with 
> > if(newbies[i] == null) {
> >   //filtered[count++] = null;
> >   continue;
> > }
> > 
> > We don't let the null entries through to filtered.
> > None of the tests failed.


But we must. So the fix is correct.
(In reply to shankha banerjee from comment #9)

> > I will see if I can come up with a test case which can expose this scenario.
> 
> Or if the delimiters (null entries) can be removed earlier.

I am not sure I understand the motivation behind this exercise. The fix is
correct, null entries should not be removed.
