In the context of running JDT tests with Tycho, I noticed that the implementation of JUnitHomeInitializer relies on SimpleConfigurator and assumes that the product uses a bundles.info file to work.
However, it's not the case with Tycho Surefire tests, bundles are instead passed in the config.ini file, using the "osgi.bundles" property.

So it seems like current implementation is based on the wrong assumption that all RCP products use a bundles.info.
Instead, it should leverage the OSGi APIs, as we can more safely assume that any application using JDT is started in an OSGi container.

In the context of running JDT tests with Tycho, I noticed that the implementation of JUnitHomeInitializer relies on SimpleConfigurator and assumes that the product uses a bundles.info file to work.
However, it's not the case with Tycho Surefire tests, bundles are instead passed in the config.ini file, using the "osgi.bundles" property.

So it seems like current implementation is based on the wrong assumption that all RCP products use a bundles.info.
Instead, it should leverage the OSGi APIs, as we can more safely assume that any application using JDT is started in an OSGi container.
In a general way, I think JDT should not have a dependency on p2 or the way application is configured at all. It seems safer and more portable to rely on OSGi runtime and Platform.getBundles().
Additionally to the limitation caused by using SimpleConfigurator, there is also a bug on Tycho side that seems to make it a bit difficult to get tycho-surefire-plugin able to run tests related to JDT/junit integration.
Both issues make it hard to set a good value to the JUNIT_HOME variable in test environments with Tycho.
Suggested Gerrit patch: https://git.eclipse.org/r/#/c/16312/
Setting target tentatively to M3. Markus is on vacation and Java 8 work has highest priority when he comes back.
(In reply to Mickael Istria from comment #3)
> Suggested Gerrit patch: https://git.eclipse.org/r/#/c/16312/

Unfortunately, Platform.getBundles(..) doesn't work for all our use cases, see bug 225594, which introduced the P2Utils class.

If you don't have the JUnit bundles in your workspace (including source), then the JUnit library container and the JUNIT_SRC_HOME classpath variable won't find the source bundles, since they are not available in the OSGi instance that is running the platform.

A solution could be to make the dependency on SimpleConfigurator optional, and then skip source bundle lookup via P2Utils if the SimpleConfigurator is not available.
There's also a problem with resolving the org.hamcrest.core entry in the JUnit 4 classpath container. Probably because org.hamcrest.core is Jar'd, but org.junit is installed as a folder.
Ok, so would it make sense to write an implementation that search with Platform.getBundle() and in case it's not found, fail back to p2 to resolve it?
This would work better in both cases (p2-enabled application or not)
> Ok, so would it make sense to write an implementation that search with
> Platform.getBundle() and in case it's not found, fail back to p2 to resolve
> it?

Yes, but I'd prefer the other direction: First try p2, and only fall back to Platform.getBundles(..) if the simpleconfigurator didn't work out. For the normal case (running in IDE), this saves one lookup that is guaranteed to fail. And it takes less time to review, since we normally keep the current code that is well-tested.
Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=47c871e94543c7ab24a3b061491c8494d161d6d6 (rebased Mickael's patch) and http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=baed3657b4b5e42e534be45cb1ca3474cdfd2178 :

- fixed source bundle resolution (was broken unless from workspace)
- fixed implementation of getSourceBundleLocation()
- code cleanup

Filed bug 423622 for broken Gerrit workflow. I'll abandon the Gerrit change set.
