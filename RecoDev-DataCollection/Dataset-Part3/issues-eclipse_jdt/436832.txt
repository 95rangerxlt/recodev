4.4 RC4.

We should add quick fixes for 'Duplicate default methods' error which override the method and calls one of the available default methods.

4.4 RC4.

We should add quick fixes for 'Duplicate default methods' error which override the method and calls one of the available default methods.
Given:

interface FI1 {
	default void def() {
	}
}

interface FI2 {
	default void def() {
	}
}

class C implements FI2, FI1 {
	
}
-------------------------------------------
Class 'C' has error "Duplicate default methods named def with the parameters () and () are inherited from the types FI1 and FI2".

The quick fix should propose to override method 'def' in 'FI2' (similar to the content assist in 'C' after typing def|) and result in:

class C implements FI2, FI1 {
	@Override
	public void def() {
		// TODO Auto-generated method stub
		FI2.super.def();
	}
}

Dani, is this the expected behavior?
*** Bug 454931 has been marked as a duplicate of this bug. ***
(In reply to Noopur Gupta from comment #1)

> The quick fix should propose to override method 'def' in 'FI2' (similar to
> the content assist in 'C' after typing def|) and result in:

I think it should override in C.

> 
> class C implements FI2, FI1 {
> 	@Override
> 	public void def() {
> 		// TODO Auto-generated method stub
> 		FI2.super.def();
> 	}
> }

I would leave out the FI2.super.def(); and just create an empty method.
(In reply to Lars Vogel from comment #3)
> (In reply to Noopur Gupta from comment #1)
> 
> > The quick fix should propose to override method 'def' in 'FI2' (similar to
> > the content assist in 'C' after typing def|) and result in:
> 
> I think it should override in C.

Yes, I meant the same, "method 'def' from(in) 'FI2'".
 
> > class C implements FI2, FI1 {
> > 	@Override
> > 	public void def() {
> > 		// TODO Auto-generated method stub
> > 		FI2.super.def();
> > 	}
> > }
> 
> I would leave out the FI2.super.def(); and just create an empty method.

See bug 430802 comment #4.
Created attachment 249461
Patch

Attached a patch which adds quick fixes to override the default methods for 'Duplicate default methods' error.

- It is not applicable for anonymous classes as an anonymous class can't implement multiple interfaces directly.

- When the interfaces being implemented are incompatible due to incompatible return types in default methods (see bug 455004), the quick fixes will not be shown after bug 455004 is fixed.

- When the duplicate default methods throw incompatible exception types, user will be able to use other existing quick fixes or edit the generated method as per the requirement to resolve the error due to exception types.

For the following example:
interface FI1 {
	default void def(float i, ArrayList<String> s) throws AccessException {}
}
interface FI2 {
	default void def(float j, ArrayList<String> s) throws BindException {}
}
class C implements FI1, FI2 {
}

if we override the method in FI1, the quick fixes from TypeMismatchSubProcessor#addIncompatibleThrowsProposals do not produce any result since Bindings.findOverriddenMethod(IMethodBinding overriding, boolean testVisibility) returns the first result i.e. the same method from FI1.
Added a check to not show those quick fixes in such a case.
Later we should also fix TypeMismatchSubProcessor#addIncompatibleThrowsProposals to get the correct overridden method.

Markus, please have a look and let me know if any changes are required.
(In reply to Noopur Gupta from comment #5)
OK to release as a first cut if you also make it work for parameterless methods. In LocalCorrectionsSubProcessor#addOverrideDefaultMethodProposal(..), use:

	String parametersString= args[1];
	String[] parameters= { };
	if (parametersString != null && parametersString.length() != 0) {
		parameters= parametersString.split(", "); //$NON-NLS-1$	
	}

With that, I see two remaining problems:


1.) If the default method is not defined in the direct super-interface, then the Quick Fix refers to the wrong super type. The OverrideCompletionProposal has the same bug.

interface I1 {
    default void def() { }
}
interface I2<T2> {
    default void def() { }
}
interface I11 extends I1 { }
interface I22 extends I2 { }

interface Both extends I11, I22 {
    // e.g. "I1.super.def();" is generated
}


2.) The Quick Fix doesn't show up if the method parameter types contain type variables:

interface I1<T1> {
    default void def(T1 t1) { }
}
interface I2<T2> {
    default void def(T2 t2) { }
}
interface Both extends I1<List<String>>, I2<List<String>> {
    
}
I checked whether we need API changes in JDT Core to fix the remaining problems. Turned out we don't, but then I was already done with the complete fix:

Released Noopur's patch with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=e116f4accb267600442babc7d0ecbf01015d3e4a and the fixes for comment 6 with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=f2821dd2253d9d3e80b82e2ab61127164c82257a
