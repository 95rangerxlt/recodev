Given the following two classes:
---
package foo;

public abstract class Superclass {
    public int i;
    protected class Inner {
        void go() {
        	i = 1;
        }
    }
    public abstract void go(Inner param);
}
---
package bar;

import foo.Superclass;

public class Subclass extends Superclass {
	public void go(Inner param) {}
}
---

extracting Inner to a new file (with default settings) produces non-building
code, because:
- Subclass receives no 'import foo.Inner' (so, Inner can't be resolved)
- Inner is declared as package-visible, not public-visible (so, the import
wouldn't work anyway)

Eclipse 3.0M9

Given the following two classes:
---
package foo;

public abstract class Superclass {
    public int i;
    protected class Inner {
        void go() {
        	i = 1;
        }
    }
    public abstract void go(Inner param);
}
---
package bar;

import foo.Superclass;

public class Subclass extends Superclass {
	public void go(Inner param) {}
}
---

extracting Inner to a new file (with default settings) produces non-building
code, because:
- Subclass receives no 'import foo.Inner' (so, Inner can't be resolved)
- Inner is declared as package-visible, not public-visible (so, the import
wouldn't work anyway)

Eclipse 3.0M9
Tobias, is this still a problem ?
Fixed > 20050316
