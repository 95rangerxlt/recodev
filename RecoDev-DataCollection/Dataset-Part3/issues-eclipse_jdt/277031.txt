Build ID: I20090515-1143
java.version=1.6.0_13
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_GB
Command-line arguments:  -os win32 -ws win32 -arch x86_64

Steps To Reproduce:
1. Create a class like:
class Badger<Queue>
{
	void bar(Queue Queue)
	{
		Queue.notify();
	}
}

2.  Place the cursor in <Queue> and trigger a rename (alt+shift+r
3. Change it to "Foo".  Note that, in the preview, the method declaration line reads: void bar(Bar Queue)
4.  Press enter to apply it.
5.  All instances of Queue in the file will have been replaced with Bar, so it will now read:


class Badger<Bar>
{
	void bar(Bar Bar)
	{
		Bar.notify();
	}
}

Surely only the ones shown in the preview should be renamed?

Build ID: I20090515-1143
java.version=1.6.0_13
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_GB
Command-line arguments:  -os win32 -ws win32 -arch x86_64

Steps To Reproduce:
1. Create a class like:
class Badger<Queue>
{
	void bar(Queue Queue)
	{
		Queue.notify();
	}
}

2.  Place the cursor in <Queue> and trigger a rename (alt+shift+r
3. Change it to "Foo".  Note that, in the preview, the method declaration line reads: void bar(Bar Queue)
4.  Press enter to apply it.
5.  All instances of Queue in the file will have been replaced with Bar, so it will now read:


class Badger<Bar>
{
	void bar(Bar Bar)
	{
		Bar.notify();
	}
}

Surely only the ones shown in the preview should be renamed?
Can reproduce. Not a regression.

Works if 'Rename in file' is used.
Created attachment 136464
minimal fix

The one who wrote the Rename Type Parameter refactoring unfortunately didn't understand bindings in the AST.
Not for 3.5. There's a workaround (use local rename), and coding conventions usually prevent this problem.
Fixed in HEAD.
