'_' is a reserved keyword in Java 8 and cannot be used as an identifier
per 3.9 Keywords [Modified] of the proposed spec.

8b74 only issues a warning at this point, though the spec requires an
unambiguous error.

X.java:9: warning: '_' used as an identifier
        I  _ = null;
           ^
  (use of '_' as an identifier might not be supported in future releases)
1 warning

'_' is a reserved keyword in Java 8 and cannot be used as an identifier
per 3.9 Keywords [Modified] of the proposed spec.

8b74 only issues a warning at this point, though the spec requires an
unambiguous error.

X.java:9: warning: '_' used as an identifier
        I  _ = null;
           ^
  (use of '_' as an identifier might not be supported in future releases)
1 warning
I believe Shankha is already working on this.
Created attachment 227781
A description of the changes made till now (3 March 2013)

I am attaching the list of changes I have made till now. 
If you could let me know the changes are okay. 
I have three things pending.

1) The correct tag to use in message.properties for the new variable. 
   Anything other than 3.9 throws up a error. 
2) The error should only be thrown for JRE1.8 and above. 
   I have put in the change in Parser.java. That doesn't seem to work. 
3) Haven't been able to understand the parameters passed to private void handle
   function on line 2278 in ProblemReporter.java. 
   (Why we right shift the position variable in    (if(!this.statementRecoveryActivated) problemReporter().useUnderScoreAsIndetifier((int) (positions >>> 32), (int) positions); 

Thanks.
(In reply to comment #2)

> 1) The correct tag to use in message.properties for the new variable. 
>    Anything other than 3.9 throws up a error. 

3.9 is the correct tag to use.

> 2) The error should only be thrown for JRE1.8 and above. 
>    I have put in the change in Parser.java. That doesn't seem to work.

Why ? It seems to work for me. What did you mean by saying it doesn't work ?

> 3) Haven't been able to understand the parameters passed to private void
> handle
>    function on line 2278 in ProblemReporter.java. 
>    (Why we right shift the position variable in   
> (if(!this.statementRecoveryActivated)
> problemReporter().useUnderScoreAsIndetifier((int) (positions >>> 32), (int)
> positions); 

The upper 32 bits of the (64 bit) long stores the start position and
the lower 32 bits store the end position.
Created attachment 228243
New Patch for the bug (Mar 12 2013, 11:00 AM IST)

The error has to be associated with few bits , mentioned in CompilerOptions.java. 
Unless those bits are correctly set the environment does not recognize this as a error and let the appropriate message be thrown. 

Line no: 118 in CompilerOptions.java
.set(
				CompilerOptions.UnderscoreUsedAsAnIdentifier);
Throws up the following two errors. 

Multiple markers at this line
	- Cannot make a static reference to the non-static method set(int) from the type 
	 IrritantSet
	- Syntax error on token ".", delete this token

Thanks,
Shankha
(1) Patch should not include org.eclipse.jdt.core.prefs
(2) Patch is missing changes to messages.properties ?
(In reply to comment #4)
> Created attachment 228243 [details]
> New Patch for the bug (Mar 12 2013, 11:00 AM IST)
> 
> The error has to be associated with few bits , mentioned in
> CompilerOptions.java. 


These steps are required only for those diagnostics that are
configurable to be warning/error/ignore. Eclipse has many diagnostics
over and above what are mandated by the Java Language Specification (JLS)
and we allow a user a user control over these.

The present issue is not a configurable error. It is mandated by JLS8.
So there is no need to get involved in these complexities.


> Line no: 118 in CompilerOptions.java
> .set(
> 				CompilerOptions.UnderscoreUsedAsAnIdentifier);
> Throws up the following two errors. 
> 
> Multiple markers at this line
> 	- Cannot make a static reference to the non-static method set(int) from the
> type 
> 	 IrritantSet
> 	- Syntax error on token ".", delete this token

This is because, the previous statement ends with a ';' and you
are starting the new statement with ".set(" - '.' requires a type/object
before that and cannot start a statement by itself.

Here are the review comments: please incorporate them and post a fresh
patch:

(1) org.eclipse.jdt.core.prefs should not be a part of the patch.
(2) messages.properties is missing in patch:

I think it is better if you are in the habit of committing intermediate
changes to "amend" commit. That way when you generate a patch you can be
sure, all files will be a part of it. Othewise you will end up generating
incremental patches which are not useful for a reviewer - they may be
missing some changes or even full files.

(3) Per discussion above, please get rid of the changes in CompilerOptions: 
a side note: please make sure to never introduce noise changes, i.e blank 
lines, white spaces etc. In any case we don't need to introduce group3
since there is room in group 2.

(4) Per discussion above, please get rid of the changes in IrritantSet.java
These are not required for mandatory JLS errors.

(5) IProblem: make the new problem a syntax error, by declaring it this
way:

int UseUnderscoreAsAnIdentifier = Syntax + Internal + 443;

(6) This change (i.e (5)) may require adjustments to CompilerInvocationTests.
Run this test to see if it fails as is, if it does, look at the console and
grab the expected text and paste it into test and rerun to verify it passes.

(7) ProblemReporter: Get rid of the changes to getIrritant and getProblemCategory.

(8) useUnderscoreAsAnIdentifier is better named "illegalUseOfUnderscoreAsIdentifier"

(9) Parser.java:
(a) The new error should be given only for Java8. So restore the commented
check for parsingJava8Plus.
(b) No need to read the position from the stack when it is readily
available as a parameter to the method ? 
(c) Likewise these checks:

(this.scanner.currentPosition - this.scanner.startPosition == 1) &&
		(this.scanner.source[this.scanner.startPosition] == '_') ) {

are too complicated - we have the identifier as a parameter. we can directly
see if its length is 1 and if its first character is '_' without going
to the scanner.

(10) Add a new tests that checks that we report errors at Java 8 level
for '_' as a local, parameter, field name, exception catch parameter etc.
This test could go into ComplianceDiagnoseTest.
org.eclipse.jdt.core.tests.compiler.parser.ComplianceDiagnoseTest.testBug399778() can be copy/pasted and modified.

(11) Remember to run all the tests and then when green post a patch.

Thanks!
Created attachment 228416
New patch for the bug (Mar 14 2013, 4:45 PM IST)

I am posting the patch. I will post the list of errors in a separate file.
I ran the test suite (RunAllJDTCoreTests) twice  and noticed the same set of errors. 
RunAllJava8Tests results were fine. 
When I rerun the tests individually few of them succeeded. 

Rerun org.eclipse.jdt.tests.core.JavaModelRegressionTestSetup
org.eclipse.jdt.tests.core.JavaModelRegressionTestSetup , org.eclipse.jdt.core.tests.model.ClasspathTests
testReadOnly(org.eclipse.jdt.core.tests.model.ClasspathTests) failed on rerun as well. 

Rest of them succeeded. 
I have not run the tests on BETA_JAVA8 (without my changes). I will run the tests on BETA_JAVA8 and let you know the results as well. 

Thanks,
Shankha
Created attachment 228417
Failed test cases from RunAllJDTCoreTests

Failed test cases from RunAllJDTCoreTests  and the full trace.
The number of tests is 3267 for RunAllJava8Tests.
The number of tests is 70691 for RunAllJDTCoreTests.
Created attachment 228419
Failed test cases from RunAllJDTCoreTests

The XML output generated from the Export Option for JUNT Test is attached. 

Thanks,
Shankha
The same set of failures were reported on my workspace on BETA_JAVA8 branch without my changes, so it could be that a issue with my settings. 

Thanks,
Shankha
Here are some comments: 

(1) Per Java coding conventions, method names should start with a lower
case letter. So illegalUseOfUnderscoreAsAnIdentifier, not IllegalUseOfUnderscoreAsAnIdentifier

(2) In Parser.java, the if statement if (!this.statementRecoveryActivated) 
is wrong. This is used to avoid reporting errors that may be triggered by
attempts to recover from earlier errors and is not applicable to the present
case.

(3) Comment#6 point (10) is not incorporated. 

Fixed these and released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=b9d2c689264004f00c6053e0ba02b08d18938008

(I apologize that something went wrong and the patch shows me as the
author. I did put in Shankha's name - not sure what happened.)

Thanks Shankha.
