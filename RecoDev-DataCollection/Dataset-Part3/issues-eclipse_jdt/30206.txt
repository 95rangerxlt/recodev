Build: I20030122

In the java browsing perspective, types view, the compare/replace with menus
have duplicate entries:

Previous from Local History
Local History
Previous Element from Local History
Element from Local History

The first two are contributed by the org.eclipse.compare plugin, and the second
two are contributed by the org.eclipse.jdt.ui plugin.

Build: I20030122

In the java browsing perspective, types view, the compare/replace with menus
have duplicate entries:

Previous from Local History
Local History
Previous Element from Local History
Element from Local History

The first two are contributed by the org.eclipse.compare plugin, and the second
two are contributed by the org.eclipse.jdt.ui plugin.
Yes, that's by design.
The first two operate on resources, the second two on Java elements.
You get the same behavior in the package viewer when
opening the context menu on Java elements (below CU).
Lowered priority to P3. 
Actually, the real problem is that I cannot 'remove' or 'override' contributions:
The Compare plugin contributes an action on IResource.
Java Compare contributes a more specific action on IJavaElements.
And because JavaElements are adaptable to IResources I get both.
So what I would like to do is override the resource-based action by the Java-specific one.
However this would need support from platform/UI.

If the compare and jdt plug-in did not know about each other, how would the jdt 
plug-in be able to "override" the compare's contributions?
Is there a difference between the Local History... from compare plugin and the 
Element Local History from the JDT plugin?

From the package view, if I open the package org.eclipse.ui.internal then 
select ActionExpression.java (something I know I have modified recently and has 
entries in the local history on my machine), I only get the compare plugin 
contributions. If I expand ActionExpression.java select ActionExpression, I get 
both contribution but they seem to provide the same UI & information. If I 
expand ActionExpression and select the inner class NotExpression, I only get 
the JDT contributions.

Since it seems on ActionExpression, both contributions do the same thing, could 
JDT not provide its contribution (and only provide it on inner classes)?
Yes, there is a difference.
I gave the answer in #1 from above:
One action operates on resources, one on Java elements.
So if you select a type, the compare contribution operates on the enclosing resource, 
while the JDT contribution operates on the type only (ignoring other types contained in 
the same CU). This applies to all levels.
So both actions have indeed different semantics.

However, as stated in #3 I don't really want to have both contributions active at the same 
time. But I'm using the "adaptable" attribute of the object contribution to make the 
resource action from the Compare plugin available on the compilation unit (a 
JavaElement). However, this results in getting the action on *all* JavaElements, even on 
those that already have the JDT contribution.
What I really would love to have is an "override": The JDT overrides the Compare 
contribution.
This is on the "hot list" of PRs to address for 2.1.

Below is the proposed solution, please let me know your thoughts on it (and 
anyone in JDT who would be affected by this). Let me know as soon as possible 
if this is acceptable.

The proposed solution will be restricted to overriding an object action 
contribution from a prerequisite. Since JDT plugin required Compare plugin, 
this limitation should not be a problem. So when defining an action in an 
object contribution extension point, we will add a new attribute (probably 
something call "overrideActionId") which you can specify the ID of the action 
that this action wants to override. The action matching the overrideActionID 
will not be shown in the menu.
Sounds perfect!
Actions defined in the objectContribution element now have an extra attribute 
called "overrideActionId". The action represented by the identifier will not be 
contributed to the context menu.
Moving back to JDT UI.
fix released for I20030218
