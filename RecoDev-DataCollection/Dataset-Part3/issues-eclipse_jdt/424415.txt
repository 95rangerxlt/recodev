// -- Triggers NPE:

import java.util.ArrayList;
import java.util.Collection;

interface Functional<T> {
   T apply();
}

class X {
    void foo(Object o) { }

	<Q extends Collection<?>> Q goo(Functional<Q> s) {
		return null;
	} 

    void test() {
        foo(goo(ArrayList<String>::new));
    }
}

// -- Triggers NPE:

import java.util.ArrayList;
import java.util.Collection;

interface Functional<T> {
   T apply();
}

class X {
    void foo(Object o) { }

	<Q extends Collection<?>> Q goo(Functional<Q> s) {
		return null;
	} 

    void test() {
        foo(goo(ArrayList<String>::new));
    }
}
The NPE in CodeStream.getConstantPoolDeclaringClass is fixed via:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=4a2b4555c72745b195a5db2cb0624ba6878ccc93

But this exposes downstream problems. It appears this.binding is null at
the time of code generation. I see only initial and tentative resolves happening
and not the final resolve. 

Stephan, I think the big patch you have that we are waiting for EA2 to go
out addresses these issues already. Assigning it to you anyways so you can
confirm and close. TIA.
Stack trace:



java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.generateCode(ReferenceExpression.java:168)
	at org.eclipse.jdt.internal.compiler.ast.Statement.generateArguments(Statement.java:262)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.generateCode(MessageSend.java:412)
	at org.eclipse.jdt.internal.compiler.ast.Statement.generateArguments(Statement.java:262)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.generateCode(MessageSend.java:412)
	at org.eclipse.jdt.internal.compiler.ast.Expression.generateCode(Expression.java:696)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:327)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:272)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:569)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:638)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode(CompilationUnitDeclaration.java:369)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:781)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Thread.java:744)
Actually even with the fix for bug 424167 we hit the NPE. But I need that fix to address this issue.

The special ingredients to this issue are:
- outer is a standalone invocation
- middle is a generic invocation in invocation context
- inner is method reference

Information is still not passed from outer to inner, because it "gets stuck" in middle.
Latest patch in bug 424167 does fix this issue, too.

*** This bug has been marked as a duplicate of bug 424167 ***
I've added corresponding tests to GenericsRegressionTest_1_8 to witness that the fix for bug 424167 indeed resolves this issue, too.
(In reply to Srikanth Sankaran from comment #0)
> // -- Triggers NPE:

When I add another over loaded method foo, it still triggers an NPE. Is it the same bug?

import java.util.ArrayList;
import java.util.Collection;

interface Functional<T> {
   T apply();
}

class X {
    void foo(Object o) { }
    void foo(String str) {} 

	<Q extends Collection<?>> Q goo(Functional<Q> s) {
		return null;
	} 

    void test() {
        foo(goo(ArrayList<String>::new));
    }
}
(In reply to Jayaprakash Arthanareeswaran from comment #6)
> (In reply to Srikanth Sankaran from comment #0)
> > // -- Triggers NPE:
> 
> When I add another over loaded method foo, it still triggers an NPE. Is it
> the same bug?
> 
> import java.util.ArrayList;
> import java.util.Collection;
> 
> interface Functional<T> {
>    T apply();
> }
> 
> class X {
>     void foo(Object o) { }
>     void foo(String str) {} 
> 
> 	<Q extends Collection<?>> Q goo(Functional<Q> s) {
> 		return null;
> 	} 
> 
>     void test() {
>         foo(goo(ArrayList<String>::new));
>     }
> }

I can see the NPE, too. Re-opening.
I am getting the NPE as well for the following test program:

package com.example;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentMap;
import java.util.stream.Collectors;

import com.example.MyEmployee.Gender;

public class StreamExampleParallel {

	public static void main(String[] args) {
		
		MyEmployee emp1 = new MyEmployee(38, "John", "Smith", 32, Gender.MALE);
		MyEmployee emp2 = new MyEmployee(59, "Ganga", "Ram", 30, Gender.MALE);
		MyEmployee emp3 = new MyEmployee(24, "Mohammed", "Ali", 71, Gender.MALE);
		MyEmployee emp4 = new MyEmployee(12, "Sherlock", "Holmes", 147, Gender.MALE);
		MyEmployee emp5 = new MyEmployee(27, "Indira", "Bedi", 64, Gender.FEMALE);
		MyEmployee emp6 = new MyEmployee(34, "Karan", "Dhokar", 41, Gender.OTHERS);
		
		List<MyEmployee> el = new ArrayList<>();
		el.add(emp1);
		el.add(emp2);
		el.add(emp3);
		el.add(emp4);
		el.add(emp5);
		el.add(emp6);
		
		// Get parallel stream (default is sequential)
		int avgAge = (int)el.parallelStream()
			.filter(p -> p.getAge() > 30)
			.mapToInt(MyEmployee::getAge)
			.average()
			.getAsDouble();
		
		System.out.println("Average age is: " + avgAge);
		
		System.out.println(el);

                // NPE here
		// Another example
		ConcurrentMap<MyEmployee.Gender, List<MyEmployee>> m =
				el.parallelStream()
					.unordered()
					.collect(
						Collectors.groupingByConcurrent(MyEmployee::getGender)
						);
		
	}
	
}

class MyEmployee {
	
	public enum Gender {
		MALE,
		FEMALE,
		OTHERS
	}
	
	private int id = 0;
	private String firstName = null;
	private String lastName = null;
	private int age = 0;
	private Gender gender = Gender.MALE;
	
	public MyEmployee(int id, String firstName, String lastName, int age, Gender gender) {
		this.id = id;
		this.firstName = firstName;
		this.lastName = lastName;
		this.age = age;
		this.gender = gender;
	}
	
	public int getId() {
		return id;
	}
	
	public String getFirstName() {
		return firstName;
	}
	
	public String getLastName() {
		return lastName;
	}
	
	public int getAge() {
		return age;
	}
	
	public Gender getGender() {
		return gender;
	}
	
	public String toString() {
		return firstName + " " + lastName;
	}
}
The fix basically consists of

- converting polyExpressionSeen from a local to a field "innersNeedUpdate"
  (of all Invocations) and taking care that this flag is only ever reset,
  when final resolving has actually happened

- invoking ASTNode.resolvePolyExpressionArguments on one more path

- better distinguish work to be done in states TYPE_INFERRED vs.
  BINDINGS_UPDATED

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3f1cbb254c604c7416bb668e3ca0c2f6d90b8afc
