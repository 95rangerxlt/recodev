If you add the following template to a source file when the cursor is at an 
indented position, all text after the first fails to get indented:

Template:

    /**
     * @since 1.0
     */
    ${public} ${return_type} ${name}(${arguments}) {
        ${cursor};
    }

gets inserted in the file as:

class XXX {
    /**
 * @since 1.0
 */
public return_type name(arguments) {
    ;
}
}

If you add the following template to a source file when the cursor is at an 
indented position, all text after the first fails to get indented:

Template:

    /**
     * @since 1.0
     */
    ${public} ${return_type} ${name}(${arguments}) {
        ${cursor};
    }

gets inserted in the file as:

class XXX {
    /**
 * @since 1.0
 */
public return_type name(arguments) {
    ;
}
}
I see this if inserting the template modifies the imports (e.g. when the 'for'
template adds java.util.Iterator). Are you the relevant property is the mix of
javadoc and code?
Your question has some typos, so I'm not sure if I'm answering the intended 
question, but here goes:  The template I'm using is exactly what I first put 
in the defect:

    /**
     * @since 1.0
     */
    ${public} ${return_type} ${name}(${arguments}) {
        ${cursor};
    }

and it's marked as a "Java" template, which has to be the setting if I'm going 
to be able to use it as intended, in between other methods.  The template does 
not modify the imports.
fixed > 20040302
