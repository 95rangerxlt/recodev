Created attachment 239259
Testcase

As the attached test case demonstrates, EclipseFileManager.inferBinaryName(Location, JavaFileObject) throws an IAE when name for a file of OTHER kind is requested. The Javadoc in JavaFileManager#inferBinaryName() doesn't say anything about this scenario, although it doesn't talk anything about Kind.OTHER being not supported.

Created attachment 239259
Testcase

As the attached test case demonstrates, EclipseFileManager.inferBinaryName(Location, JavaFileObject) throws an IAE when name for a file of OTHER kind is requested. The Javadoc in JavaFileManager#inferBinaryName() doesn't say anything about this scenario, although it doesn't talk anything about Kind.OTHER being not supported.
Again, let us fix this for Java 8 and when the switch happens be picked up
for master. I don't see a hurry for this in 4.4 M6 time frame.
Jay, actually the IAE is coming from org.eclipse.jdt.internal.compiler.tool.EclipseFileManager.getJavaFileForInput(Location, String, Kind) and the javadoc for 

javax.tools.JavaFileManager.getJavaFileForInput(Location, String, Kind)

says


* @param kind the kind of file, must be one of {@link
     * JavaFileObject.Kind#SOURCE SOURCE} or {@link
     * JavaFileObject.Kind#CLASS CLASS}

???
Also 

    * @throws IllegalArgumentException if the location is not known
     * to this file manager and the file manager does not support
     * unknown locations, or if the kind is not valid

So we seem to be good here.
(In reply to Srikanth Sankaran from comment #2)
> Jay, actually the IAE is coming from
> org.eclipse.jdt.internal.compiler.tool.EclipseFileManager.
> getJavaFileForInput(Location, String, Kind) and the javadoc for 
> 
> javax.tools.JavaFileManager.getJavaFileForInput(Location, String, Kind)

They both are APIs and getJavaFileForInput() may be right in throwing an IAE when passed such an argument. But inferBinaryName() itself doesn't say aanything about it. Because inferBinaryName() internally uses getJavaFileForInput(), we end up throwing IAE. Not sure what should be the right behavior. Oracle's implementation provides a valid String for OTHER kind too.
(In reply to Jayaprakash Arthanareeswaran from comment #4)
> (In reply to Srikanth Sankaran from comment #2)
> > Jay, actually the IAE is coming from
> > org.eclipse.jdt.internal.compiler.tool.EclipseFileManager.
> > getJavaFileForInput(Location, String, Kind) and the javadoc for 
> > 
> > javax.tools.JavaFileManager.getJavaFileForInput(Location, String, Kind)
> 
> They both are APIs and getJavaFileForInput() may be right in throwing an IAE
> when passed such an argument. But inferBinaryName() itself doesn't say
> aanything about it. Because inferBinaryName() internally uses
> getJavaFileForInput(), we end up throwing IAE. Not sure what should be the
> right behavior. Oracle's implementation provides a valid String for OTHER
> kind too.

I agree. Don't have a concrete suggestion yet.
Created attachment 239328
Proposed fix with test

At the moment I can only think of two options:

1. Fix EclipseFileManager#inferBinaryName() to catch the IAE and return null. The IAE is thrown by getJavaFileForInput() either when the file kind is not one of SOURCE or CLASS or when the location is unknown.

2. Refactor both the methods such that IAE is not thrown for inferBinaryName().

While I don't see much difference between, I have gone with (1), for it's lot simpler. I have run the tests and they ran fine.

Srikanth, please review.
Patch looks good. Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=252534b1e3dad1831e3abff323be8258609f736d
