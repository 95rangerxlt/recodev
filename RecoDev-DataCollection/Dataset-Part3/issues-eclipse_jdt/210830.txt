Intellij IDEA has a dockable bar that shows breadcrumbs for the project path for whichever file is currently selected. This is the single biggest feature that I miss when I go back and forth between IDEA and Eclipse. (I use IDEA at work and Eclipse at home.)

In Eclipse, I can right click in a java file and click "Show In | Package
Explorer". But, that only works for java files and it's inconvenient when I want to jump to some higher node in the tree.

For example, if I open the file
    $PROJECT/foo/bar/blip/hello.txt
the breadcrumbs "$PROJECT << foo << bar << blip" would appear in a breadcrumb bar. Each of those nodes would be clickable and open the appropriate node in the package explorer when clicked.

I often have files deep in package trees and it's annoying to have to open
up the tree manually for all files that aren't java files. Breadcrumbs
solve that.

Due to the depth of some of my trees, I've gone so far as to create fake java files in certain locations so that I can open them up and then use "Show In" to jump to the correct point in the package explorer tree. Breadcrumbs would allow me to just open up whatever files are actually in there and then use the breadcrumbs to navigate there.

Another use case is when I want to open a particular package. I sometimes use ctrl-shift-r to open up a java file and then use "Show In" to jump to the package explorer and then close nodes until I get up to the location I want to be. Having breadcrumbs would remove the last part of the process because I could just open a file and then click on the appropriate breadcrumb.

Intellij IDEA has a dockable bar that shows breadcrumbs for the project path for whichever file is currently selected. This is the single biggest feature that I miss when I go back and forth between IDEA and Eclipse. (I use IDEA at work and Eclipse at home.)

In Eclipse, I can right click in a java file and click "Show In | Package
Explorer". But, that only works for java files and it's inconvenient when I want to jump to some higher node in the tree.

For example, if I open the file
    $PROJECT/foo/bar/blip/hello.txt
the breadcrumbs "$PROJECT << foo << bar << blip" would appear in a breadcrumb bar. Each of those nodes would be clickable and open the appropriate node in the package explorer when clicked.

I often have files deep in package trees and it's annoying to have to open
up the tree manually for all files that aren't java files. Breadcrumbs
solve that.

Due to the depth of some of my trees, I've gone so far as to create fake java files in certain locations so that I can open them up and then use "Show In" to jump to the correct point in the package explorer tree. Breadcrumbs would allow me to just open up whatever files are actually in there and then use the breadcrumbs to navigate there.

Another use case is when I want to open a particular package. I sometimes use ctrl-shift-r to open up a java file and then use "Show In" to jump to the package explorer and then close nodes until I get up to the location I want to be. Having breadcrumbs would remove the last part of the process because I could just open a file and then click on the appropriate breadcrumb.
Would "Link with Editor" help? You mentioned that you used ctrl+shift+r to open up Java files, you do know that 'Open Resource' can be used to open non-Java files too, right?
Yes, I know that I can open non-Java files with 'Open Resource', but the ultimate goal in my example wasn't to open the file. It was to open the appropriate node in the package explorer and only Java files have a "Show In" menu to jump to the appropriate section of the package explorer.

However, the "Link with Editor" is pretty good! I just tried it and at first I didn't like it because it opened open every node every single time I switched files (soon the package explorer would have a billion nodes open). But, I realized that I could just click the "Link with Editor" button twice to open the current node and then deactivate the feature. It's not a perfect substitute for breadcrumbs (to get to a higher node I still have to open the current node and navigate upward), but it's definitely far better than the methods I've been using in the past.

Thanks! I'd still like breadcrumbs, but this makes life a lot easier for me right away.

This makes me curious though. If it was always possible to link the package explorer to any file, why does the "Show In" menu only show up in the context menu for java files?
Actually, it looks like there is a Show In menu for other file types now (I recently upgraded to the latest MyEclipse, so I don't know if it's an Eclipse thing or a MyEclipse thing). I'm certain that it wasn't always there, but it's there now.
>In Eclipse, I can right click in a java file and click "Show In | Package
>Explorer". But, that only works for java files 
Not true. Also works in normal Text and Java Properties editor.
Sorry, just read comment 3.

We are investigating such a feature for 3.4 but it might be Java-only at this point.
Created attachment 83849
prototype

Sorry, I've never used Intelij IDEA. Do you have something like this in mind?
(In reply to comment #6)
> Created an attachment (id=83849) [details]
> prototype
> 
> Sorry, I've never used Intelij IDEA. Do you have something like this in mind?

I don't know if that's what Geoff had in mind but I think I'd like that. ;) Or at least make it so that users can turn it on or off in the preferences.


Created attachment 84552
work in progress
Created attachment 84850
work in progress
Created attachment 85279
work in progress

- StructuredViewer implementation
- Selection painting
- Basic keyboard navigation
Created attachment 85472
fix
This looks good on XP and ok on GTK, but not on Vista, because Vista uses a gradient to draw the selection (I didn't test on OSX). We have to decide, if we want to have the content viewer look or our own (platform independent) look. We should discuss this with the UI Designers if possible. But that's "only" UI polish.

Dani, can you review the editor stuff please? 
Created attachment 85544
fix

Same fix except: I forgot to dispose the context menu action group which resulted in a editor leak.

Btw. this is only for the Java editor, but I should be easy to push it down.
(In reply to comment #6)
> Created an attachment (id=83849) [details]
> prototype
> 
> Sorry, I've never used Intelij IDEA. Do you have something like this in mind?

That looks pretty good! I'm not sure what you'll be putting in the dropdown for the packages, but if it's a list like "com, com.blah, com.blah.foo" then that's exactly what I want.

Thanks!
>Dani, can you review the editor stuff please? 
Detailed feedback has been discussed with Benno. Major problem to solve is the retargeting of all the actions when the breadcrumb gets focus and disabling all text editor actions (and the other way around when the text gets the focus back).
Created attachment 86807
fix

Contains all proposed improvements except the smarter resize strategy, let us discuss this with the UI designer first.

Also contains the action handling. We decided to provide an invalid text selection (getStartLine() == -1) if the focus is in the breadcrumb. Providing a structured selection instead will lead to CCEs in clients which wrongly assume that an editor part can only provide text selections. This should disable the action listening on the sites selection provider (not ours). Some debug actions have problems with that, I will start filling patches against debug once we have this in (can provide steps).
Created attachment 86810
performance tests

Disables the breadcrumb for all editor performance tests.
Created attachment 86836
fix

- All in one patch
- Applicable to HEAD
- Fixes part init exception on double click
- Fixes test failure in BracketInserterTest
Moving to JDT as the first cut (3.4) will be for Java editor only. Might be pushed down later.
Created attachment 87045
Remaining stuff to review
Neat stuff!  I commented on the blog:

http://dev.eclipse.org/blogs/jdtui/2008/01/16/jdtui-and-platformtext-m5-plan-items/#comment-40

When would be the right time to try this out?  I'm also wondering if Mylyn should consider reusing your widgets instead of its custom ones?  I won't have a good sense for how similar the interaction is until I try it out, but it would be nice to have consistency if it is similar enough.
Created attachment 87139
fix

The key bindings for most actions still do not work, i.e. Rename (alt-shift-r). The problem seams to be that this (and other) actions are registered to the editor with setAction(.,.), and setAction registers this action to the key binding service, and the service seams not to care that I set a different scope nor that I retarget this actions when the focus is in the breadcrumb.

Mik, we need to solve the key binding problem first.
fixed > I20080115-1740

Thanks for the review Dani!

Mik, this will be in the next IBuild.
It s a bit odd that breadcrumb is drawn inside editor tab. It visually imply that there is an editor interaction when user select package from the breadcumb dropdown and it became really confusing when you walk trough changing nodes in the breadcrumb while staying in the editor. Wouldn't it make sense to show the breadcrumb in the editor area outside of the tab body?

There are few more cosmetic things:

- Breadcrumb bar height could be cut for about 4 pixels, it would look more lightweight

- There is an extra border on the breadcrumb, left, right and top borders can be removed to reduce visual noise, bottom border could use more constrast color to separate it from the editor (i.e. color used to separate crumb tiles)

- Offsets between icon and the text label on the breadcumb are noticeable bigger comparing how they rendered in the Package Explorer and Outline view

- Icons in the dropdown are not aligned to the breadcrumb tile and there is redundant structure drown by a tree widget that adds visual noise

- It would also look more lightweight and sleek if quick filter text entry field would be right in the breadcrumb tile

- Would be useful to allow to disable text decorations when rendering breadcumbs. It look ok for CVS, but there are longer decorations out there. For instance SVN decorations are adding considerable longer text taking more space
Created attachment 87340
mockup for the ui improvments

Here is the mockup for UI improvements suggested in previous comment
Thanks for the feedback.

>Wouldn't it make sense to show the
>breadcrumb in the editor area outside of the tab body?
We discussed this. The problem is that this area isn't accessible/available i.e. we could only do this as a view or as a tool bar. The problem with the view is that it goes away when the editor is maximized and waste space for the view tab. Using a tool bar causes a lot of problems regarding usage of existing actions inside the tool bar.
(In reply to comment #26)
> We discussed this. The problem is that this area isn't accessible/available i.e.
> we could only do this as a view or as a tool bar. The problem with the view is
> that it goes away when the editor is maximized and waste space for the view tab.
> Using a tool bar causes a lot of problems regarding usage of existing actions
> inside the tool bar.

What about changing the presentation theme? I thought it allows to anything around the editor area.
Yes, but the Java editor can be opened anywhere and JDT can't control that.
What do you mean editor can be opened anywhere?
Also I thought that intent is to support this feature for all editors, not only JDT ones. Is that not the case?
>What do you mean editor can be opened anywhere?
In any perspective or "RCP" that decides to depend on JDT.

>Also I thought that intent is to support this feature for all editors, not only
>JDT ones. Is that not the case?
Please read comment 19.
(In reply to comment #30)
> Please read comment 19.

Oh. Sorry.
Created attachment 87542
new breadcrumbs icon

Wow, I'm impressed!

But the icon looks a little bit squeezed. Maybe you will prefer this one...
Created attachment 87544
preview of the new breadcrumbs icon (see comment 19)
Hi Holger, thanks for the feedback. Actually this icon is just a placeholder while we wait from the UI design team work. Once we have that we will decided whether to take yours or theirs.
(In reply to comment #24)
> It s a bit odd that breadcrumb is drawn inside editor tab. It visually imply
> that there is an editor interaction when user select package from the breadcumb
> dropdown and it became really confusing when you walk trough changing nodes in
> the breadcrumb while staying in the editor. Wouldn't it make sense to show the
> breadcrumb in the editor area outside of the tab body?
> 
> There are few more cosmetic things:
> 
> - Breadcrumb bar height could be cut for about 4 pixels, it would look more
> lightweight
> 
> - There is an extra border on the breadcrumb, left, right and top borders can
> be removed to reduce visual noise, bottom border could use more constrast color
> to separate it from the editor (i.e. color used to separate crumb tiles)
> 
> - Offsets between icon and the text label on the breadcumb are noticeable
> bigger comparing how they rendered in the Package Explorer and Outline view
> 
> - Icons in the dropdown are not aligned to the breadcrumb tile and there is
> redundant structure drown by a tree widget that adds visual noise
> 
> - It would also look more lightweight and sleek if quick filter text entry
> field would be right in the breadcrumb tile
> 
> - Would be useful to allow to disable text decorations when rendering
> breadcumbs. It look ok for CVS, but there are longer decorations out there. For
> instance SVN decorations are adding considerable longer text taking more space
> 

Hi,

Very nice feature! :).  I like the ideas in a comment #24, though i am not sure on the quick filter text entry.  I think the most noticeable issue with this is (well for me anyway) is that it doesn't look that good on linux (gtk) and "Icons in the dropdown are not aligned to the breadcrumb tile and there is redundant structure drown by a tree widget that adds visual noise".  Looking forward to the improvements.
(In reply to comment #35)
> (well for me anyway) is that it doesn't look that good on linux (gtk)

See bug 230225. 
