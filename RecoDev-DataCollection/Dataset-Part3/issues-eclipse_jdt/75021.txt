Okay, this is a bit typical, but maybe other people like it. I always divide my 
class source into "chapters" using a very recognizable comment, like:

// ==================================================================
// ATTRIBUTES

When scrolling through the code you can easily see chapter changes. This is 
different from the outline view, since it sorts the methods alphabetically 
instead of grouping them thematically. (Sometimes I also use "paragraphs" 
replacing the === with a smaller --- line and using lowercase.)

The trouble is that when you're on a screen that does not have a chapter 
heading, it is hard to tell what chapter you are in (or if you missed a 
heading). A nice help would be to in and editor colorize the ruler on the left 
where the hints and breakpoint markers are placed differently for each chapter. 
Automatically if no color is assign in a comment.

Just a though.

Okay, this is a bit typical, but maybe other people like it. I always divide my 
class source into "chapters" using a very recognizable comment, like:

// ==================================================================
// ATTRIBUTES

When scrolling through the code you can easily see chapter changes. This is 
different from the outline view, since it sorts the methods alphabetically 
instead of grouping them thematically. (Sometimes I also use "paragraphs" 
replacing the === with a smaller --- line and using lowercase.)

The trouble is that when you're on a screen that does not have a chapter 
heading, it is hard to tell what chapter you are in (or if you missed a 
heading). A nice help would be to in and editor colorize the ruler on the left 
where the hints and breakpoint markers are placed differently for each chapter. 
Automatically if no color is assign in a comment.

Just a though.
Move to JDT/Text
I think if we add a concept like categories (or chapters) it should be more
powerful:
- be visible in rulers
- be supported by Outline view (node for each category, sort by category)
- assign members to categories (e.g. via Outline)
- allow to fold categories

See also bug 45308.
Sounds okay to me. The generic solution would then be: thematical grouping 
(categories), visualized in the editor (by colors) and represented in the 
outline (by nodes).

Questions would be:
- How can a method be assign to a category? (In my case, they are grouped 
together in the source, so in that case only theme boundaries aka "chapter 
headers" need to be defined. But I'm not sure where you are heading.)
- How are colors assigned to the categories? 
- How are categories defined? Will there be pre-defined categories, like for 
example "attributes", "constructor", "GUI", "helper"?

All this has to be done in the Java comments.

A suggestion:
- "chapter changes", using something like "#categorySwitch attributes"
- "method assignment", using something like "#category attribute"
- and optionally color setting, like "#category attribute = AABBCC"

A category is defined by using it. If no color is assigned a random one is 
chosen (or from a list).


This will become interesting with the upcoming @category tag (Java 6).
Hm. I can't seem to find any docu about that... Do you have a link?
This is planned to be part of the upcoming Java 6 ("Mustang") release.
For details see: http://jcp.org/en/jsr/detail?id=260.
We will have to see whether we can enable this for older versions too.
Initial support for @category is in for all SDK versions (not just 6.0).
You can:
- use code assist to add @category inside Javadoc
- first category is rendered in the Package Explorer, Outline, Types and Members
  view

More support will come, but might not make it into 3.2. 
I assume "is in" means in the CVS head (eh, or are you guys using Subversion)? 
>I assume "is in" means in the CVS head (eh, or are you guys using Subversion)? 
Yes, CVS HEAD and latest N-builds and upcoming I-builds.
There's now also a filter for categories in the Outline view.
