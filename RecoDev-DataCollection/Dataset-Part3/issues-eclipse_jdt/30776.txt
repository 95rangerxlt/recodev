Tested on WinXp Arabic locale set as default, build eclipse-SDK-I20030128-
win32.zip.
- Make a new Project
- Make a new Java file.
- In the main method write System.out.println(") Then the editor will insert 
the second " and the String will be System.out.println(""). Between the double 
cotes change the keyboard layer to Arabic after insertion of the first 
character the keyboard layer changes back to English automatically.

NB: This behavior is not there when I try to write Arabic anywhere else in the 
editor.

Tested on WinXp Arabic locale set as default, build eclipse-SDK-I20030128-
win32.zip.
- Make a new Project
- Make a new Java file.
- In the main method write System.out.println(") Then the editor will insert 
the second " and the String will be System.out.println(""). Between the double 
cotes change the keyboard layer to Arabic after insertion of the first 
character the keyboard layer changes back to English automatically.

NB: This behavior is not there when I try to write Arabic anywhere else in the 
editor.
Knut to investigate and advise.  Is this StyledText or JDT?
I can't reliably reproduce this using the steps provided. I have seen this 
behavior a few times, with Arabic and Hebrew but I don't always see it. 
If I type opening and closing quotes within a Javadoc and then type Arabic or 
Hebrew within the closing quotes I can reproduce this behavior every time.
e.g. 
/**
 * "arabic"
 */

Only the 'a' will be an Arabic letter. The rest will be English. The "Format 
JavaDoc" option has to be turned on for this to be reproducable.
This seems to be somehow related to bug 30819.
Assigning to JDT Text to investigate/comment.
Do the following exact steps to reproduce the defect:
1- Write System.out.println(, then the editor will close the bracket for you, 
and you will get System.out.println()
2- press end key and insert the semicolon, now you have System.out.println();
3-Press the left arrow twice then put the first double cotes character, now you 
have System.out.println("");
4-Change the keyboard layer and insert Arabic word.
The first character only is Arabic, then the keyboard changes again.

Defect 30819 is concerned about the space bar behavior that changes the 
keyboard layout. but this in this defect, the keyboard changes even without 
writing spaces.
In the M5 build (200302061700), the problem can be seen by turning on 
Java-->Editor-->Typing-->Close strings (none of the other code completion 
options need to be active) and doing the following:

1. Type left parentheses, type right parentheses.
2. Press left arrow one time.
3. Type double quote.  
4. Change keyboard to Hebrew.  Type a character.  What you have should look as 
follows, where X is a bidi character:

  ("X")

At this point the keyboard language changes when it should not.  The problem is 
being caused by TextViewer>>handleVerifyEvent, which is explicitly setting the 
caret offset.  In the above example, the caret offset is set to position 3 
after the bidi character is typed.  Since the character at position 3 is not 
bidi (i.e., it is the end double quote), the keyboard is changed to english.
Actually the above problem will occur if you just type a double quote, change 
the keyboard language and then type a bidi character.  No parens are necessary.
Approved by Erich and Kai.
The analysis shows that this can happen on any programatic modification of 
text. This particular case is just one example. 

Lynne, Knut: Is there any way how the keyboard language can be determined and 
be set by the viewer?
I don't understand your question.  If the caret position is set correctly the 
keyboard language should be set correctly.
What's wrong with the caret position in your example? When talking to the 
StyledText you talk to it in terms of StyledTextContent coordinates. At this 
level, there is no knowledge about how something is rendered. After having 
entered 'X', the caret is after the 'X' before the closing '"' in terms of 
StyledTextContent coordinates.
For setCaretOffset, the caret will be placed in front of the given character 
position.  Since the character is non-bidi, the keyboard will be changed.  
There's not API to say place caret after this character or before this 
character.  That would be bidi-specific.  

Can you not call setCaretOffset if the caret position has not changed?  This 
seems like it would work for the simple typing case (i.e., we update the caret 
position when typing).  I'm not sure about other code completion cases though.  
I will look into it some more from our end.  
I cannot remove that call at this point in time. As soon as the user is in any 
of the "smart" modes, several strategies take over the mapping between the 
keys and what gets inserted into the StyledTextContent. 

How about adding a second method for moving the caret? In addition to 
setCaretOffset which sets the caret at the beginning of the given offset there 
would also be a method for setting the caret at the end of a given offset 
(setCaretAfterOffset). For the non-bidi case  setCaretAfterOffset(i) would be 
the same as setCaretOffset(i+1). In the bidi-case the "gap" between the two 
offsets can geographically be split and thus the two calls can result in 
different caret locations. For my cases I would mostly use setCaretAfterOffset.
We looked at the code path in the failing scenario. You update the document in 
the verify handler and set the caret offset. 

We maintain information about how to set the keyboard language. This is updated 
in several places. One of them is during typing after the verify event is sent 
and before the modify event is sent.
When you set the caret offset in the verify handler the keyboard language info 
has not been updated yet. Can you set the caret offset in the modify handler 
instead of in the verify handler? 
We hacked the TextViewer to move the relevant code to a modify handler and it 
seems to work.

This wouldn't be a simple change. It's at the heart of the text viewer, i.e. 
at the heart of any eclipse text editor. Not appropriate for an RC3.
We should defer this then.  There is nothing safe that we can do for RC3.  We 
looked into what we think might be a fix, but we don't feel comfortable that we 
should do this.  We also don't feel that we should introduce new caret API.  
The timetable is too tight to try to come up with a viable solution on our end.
The workaround is to disabled the "smart typing" features.
Removing target milestone.
*** Bug 30819 has been marked as a duplicate of this bug. ***
Customer of WSAD 5.x also reported similar problem when entering Hebrew text 
for a label within JSP editor. Only the first character remained Hebrew, the 
rest was switched to English.
Tarek, can you retry this on Eclipse 3.0 RC1.  This bug is quite old and the 
development teams thinks it is fixed.

Verified on build 27-05-2004 IES, this defect is solved now.
Thanks
see also Bug 101759
