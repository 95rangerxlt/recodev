Currently the o.e.jdt feature version is "3.9.0.qualifier" in beta branch. 

In R4_3_maintenance, it was recently incremented to 3.9.1.qualifier. 
in master (Luna) version it is 3.10.0.qualifier. 

I suggest that the version in beta branch be 3.9.51.qualifier. 

This allows 50 "point releases" of 3.9.1 "pure Kepler SR2" before any risk of getting "larger than" the beta_java8 version. I think it is semantically clearer if we make the service field "distinct" from what is in "Kepler SR2". 

(Ultimately it may not matter, if/when we produce pure "patch features", but ... if/while we want to "build everything" in beta branch, it make it much clearer, semantically, plus avoid the comparator "swapping in" some matching version from "pure kepler SR2" release. I think that is happening at this moment, so we need to "touch" the feature in some way ... just as well increment service field.

Currently the o.e.jdt feature version is "3.9.0.qualifier" in beta branch. 

In R4_3_maintenance, it was recently incremented to 3.9.1.qualifier. 
in master (Luna) version it is 3.10.0.qualifier. 

I suggest that the version in beta branch be 3.9.51.qualifier. 

This allows 50 "point releases" of 3.9.1 "pure Kepler SR2" before any risk of getting "larger than" the beta_java8 version. I think it is semantically clearer if we make the service field "distinct" from what is in "Kepler SR2". 

(Ultimately it may not matter, if/when we produce pure "patch features", but ... if/while we want to "build everything" in beta branch, it make it much clearer, semantically, plus avoid the comparator "swapping in" some matching version from "pure kepler SR2" release. I think that is happening at this moment, so we need to "touch" the feature in some way ... just as well increment service field.
Dani, 

I know you are an expert in versioning ... perhaps you'd like to comment or make another suggestion?
As long as we don't provide an official 4.3.2+Java8, we can keep the versions as in R4_3_maintenance, since each time we do a Java 8 build, the qualifier will be newer than in the last 4.3.x build. Only when we have an official 4.3.2+Java8 release, we'd set the service segment to 50 (not +50).

I've cherry-picked the version increase with http://git.eclipse.org/c/jdt/eclipse.jdt.git/commit/?id=ff45ffad12810bc1b7c294198b2621c56f3d8801
(In reply to Dani Megert from comment #2)
> As long as we don't provide an official 4.3.2+Java8, we can keep the
> versions as in R4_3_maintenance, since each time we do a Java 8 build, the
> qualifier will be newer than in the last 4.3.x build.

The issue isn't so much making sure "Java 8 build, the
qualifier will be newer than in the last 4.3.x build" ... 

The issue is if someone, say an adopter product, wants a 4.3.2 "patched release" WITHOUT the Java 8 support ... it would be best to leave some "breathing room" for that case.
Reopening on technicality ... it appears that in Kepler RC3, the JDT feature was incremented ?again? to "3.9.2" so believe we should increment BETA_JAVA8 branch, again, to (at least :) 3.9.2, instead of its current 3.9.1. 

Any objections? I'm I seeing things right?
(In reply to David Williams from comment #4)
> Reopening on technicality ... it appears that in Kepler RC3, the JDT feature
> was incremented ?again? to "3.9.2"

Yes, see bug 427078.

> so believe we should increment BETA_JAVA8
> branch, again, to (at least :) 3.9.2, instead of its current 3.9.1. 
> 
> Any objections? I'm I seeing things right?

Thanks David for pointing this out!

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.git/commit/?id=328579c2818b833dfb307075410ce910378d7292
