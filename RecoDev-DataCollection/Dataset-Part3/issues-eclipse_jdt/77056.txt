If a method returns a parameterized collection, and is assigned to a variable
that doesn't exist and the variable created, the type of the created variable is
not a parameterized collection, rather, the variable is of the type of the
parametrized collection.  A demo shows it better than words:

http://benow.ca/misc/collection_introspection.swf

If a method returns a parameterized collection, and is assigned to a variable
that doesn't exist and the variable created, the type of the created variable is
not a parameterized collection, rather, the variable is of the type of the
parametrized collection.  A demo shows it better than words:

http://benow.ca/misc/collection_introspection.swf
You are amazing ! Thanks for the demo.
Here's a simple test case:
X.java:
  public class X {
	void foo() {
		field = new Y().foo();
	}
  }
Y.java:
  import java.util.Collection;
  public class Y {
	Collection<Class> foo() {
		return null;
	}
  }

Of course, there's a compiler error:
----------
1. ERROR in D:\usr\OTI\workspaces\dvpt\v31\HEAD\_Bug\X.java (at line 3)
	field = new Y().foo();
	^^^^^
field cannot be resolved
----------
1 problem (1 error)

Open quick-fix (you get several proposals), select "Create field 'field'"...
You see in preview that added field would be:
  private Class field;
instead of expected:
  private Collection<Class> field;

Seems to be a JDT/UI issue (Java model CreateFieldOperation is never called
while applying quick-fix...).
Move to JDT/UI for comments
fixed > 20041205
