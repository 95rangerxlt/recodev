Build ID: M20071023-1652

Steps To Reproduce:
1. Create an empty package (no classes or interfaces in it) called "some.package".
2. Add a package-info.java and add some processible annotation to java package
3. Wihtin apt-processor call env.getPackage("some.package") and getAnnotation(...).

We should expect that this annotaion is returned but it will return null.

More information:
 BaseProcessorEnv.getPackages tries to open this packages and searches for some compilable type. Of course package-info.java does not contain any type and it will return PackageDeclarationImplNoBinding. That's wrong behaviour since it will hide every package annotation too.
We got this problem with some of our packages too. Sometimes eclipse will return all compilable units but package-info.java will be the first one. BaseProcessorEnv will now return PackageDeclarationImplNoBinding and even our classes won't be accessible in our apt processor.

To fix this problem we add a simple private or default dummy interface in our package-info.java. Now Eclipse finds a compilable type wihtin package-info.java and everything will work as intended.

Build ID: M20071023-1652

Steps To Reproduce:
1. Create an empty package (no classes or interfaces in it) called "some.package".
2. Add a package-info.java and add some processible annotation to java package
3. Wihtin apt-processor call env.getPackage("some.package") and getAnnotation(...).

We should expect that this annotaion is returned but it will return null.

More information:
 BaseProcessorEnv.getPackages tries to open this packages and searches for some compilable type. Of course package-info.java does not contain any type and it will return PackageDeclarationImplNoBinding. That's wrong behaviour since it will hide every package annotation too.
We got this problem with some of our packages too. Sometimes eclipse will return all compilable units but package-info.java will be the first one. BaseProcessorEnv will now return PackageDeclarationImplNoBinding and even our classes won't be accessible in our apt processor.

To fix this problem we add a simple private or default dummy interface in our package-info.java. Now Eclipse finds a compilable type wihtin package-info.java and everything will work as intended.
I can reproduce this, but the test case (a modification to ReadAnnotationTests) doesn't work without the fix for bug 214200 in JDT Core, so I won't post it here.

It seems that in BaseProcessorEnv we need to detect the situation where one of the compilation units in the package fragment happens to be package-info.java, and if it is, then we need to base a PackageDeclarationImpl on that particular unit, rather than arbitrarily choosing the first type in the first compilation unit as we do at present.  
(In reply to comment #1)
> I can reproduce this, but the test case (a modification to ReadAnnotationTests)
> doesn't work without the fix for bug 214200

Sorry, I mean Bug 214002 .
I've fixed the tests to detect the problem, and checked in a partial fix to the code: we now correctly handle the case where a package contains package-info.java as well as some other types.  We still do not handle the case where the package contains only package-info.java; in that case we will detect no annotations.
We now support retrieving annotations on packages that contain only a package-info.java, whether in binary or source.  Also, for packages that contain a package-info.java as well as other types, we will retrieve the annotations rather than a defective PackageDeclaration regardless of which files are being compiled.
