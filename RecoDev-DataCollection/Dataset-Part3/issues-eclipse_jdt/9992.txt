Build 20020214

1. Define the following A.java CU:
public class A {
  public class B {
  }
}
2. Open search dialog, and type in '*.A.B' as the search pattern
3. Press Search
Observe: No match is found

Build 20020214

1. Define the following A.java CU:
public class A {
  public class B {
  }
}
2. Open search dialog, and type in '*.A.B' as the search pattern
3. Press Search
Observe: No match is found
The search pattern that we create in this case is:
TypeDeclarationPattern: pkg<*.a>, enclosing<>, type<b>, pattern match, case 
insensitive

I think it should be a OrPattern with:
TypeDeclarationPattern: pkg<*.a>, enclosing<>, type<b>, pattern match, case 
insensitive
and
TypeDeclarationPattern: pkg<*>, enclosing<*.a>, type<b>, pattern match, case 
insensitive
Why do we even dissociate the package part from the enclosing one ? It should 
probably just be a qualification which is interpreted as a combination of 
either package or enclosing type...
Added QualifiedTypeDeclarationPattern as subclass of TypeDeclarationPattern. 
This pattern takes a qualification instead of package and enclosing type names.
It is used when searching a type declaration from a String.

Note the behavior of TypeDeclarationSearchScope could not be changed to 
interpret a qualification as a combination of package and enclosing types, as 
this would loose some information, e.g. could not distinguish a.b 
(package 'a.b') from a.B (package 'a' and enclosing type 'B'). This information 
is needed when this pattern is used during the search all type names query.
