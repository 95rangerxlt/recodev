BETA_JAVA8:

Bug 382353 introduced a disabled test org.eclipse.jdt.core.tests.compiler.regression.DefaultMethodsTest._testModifiers1a() which demonstrates that a single syntax error can badly spoil error recovery if a default method is present. This could be a cause behind bug 381360.

BETA_JAVA8:

Bug 382353 introduced a disabled test org.eclipse.jdt.core.tests.compiler.regression.DefaultMethodsTest._testModifiers1a() which demonstrates that a single syntax error can badly spoil error recovery if a default method is present. This could be a cause behind bug 381360.
If I write in a class:
  void foo() ;
the compiler answers:
  This method requires a body instead of a semicolon
  
If, OTOH, I write in an interface
  void foo() default ;
this is just a syntax error, suggesting actually to delete 'default' :(

Maybe, we wan't to add a grammar rule to explicitly catch the above case, so the parser can continue with regular parsing?
Here's how an empty default method is interpreted in recovery mode:

Parser starts with goal Header, applying the following rules:

Header -> RecoveryMethodHeader
RecoveryMethodHeader ::= RecoveryMethodHeaderName FormalParameterListopt MethodHeaderRightParen MethodHeaderExtendedDims AnnotationMethodHeaderDefaultValueopt
AnnotationMethodHeaderDefaultValueopt ::= DefaultValue
DefaultValue ::= 'default' MemberValue
MemberValue -> MemberValueArrayInitializer
MemberValueArrayInitializer ::= EnterMemberValueArrayInitializer '{' PushLeftBrace '}'

This creates an empty ArrayInitializer on the expressionStack (instead of a method body), which is then discarded in consumeMethodHeaderDefaultValue() since the current method is not an annotation method.

Interestingly, the regular parser builds a useful recovered structure (currentElement).
TODO: check if we should insert a Diet NT somewhere to make sure the body of a default method is skipped during recovery.

Only later the DiagnoseParser fails to make sense of these sources.
I will upload a patch the improves recovery by these means:

- Make default methods known to the DiagnoseParser via this rule:
    GenericMethodDeclaration -> InterfaceDefaultMethodDeclaration
  Note, that GenericMethodDeclaration is an entry point for the DiagnoseParser (goal TokenNameDIVIDE).
  For this purpose, InterfaceDefaultMethodDeclaration has been extracted from InterfaceMemberDeclaration
  
- In the grammar I explicitly allow this illegal structure:
    MethodHeader 'default' PushDefault ';'
  I'm doing this so I can report
    "This method requires a body instead of a semicolon"
  instead of a mediocre syntax error (using new argument hasSemicolonBody).

- I observed that bodies of default methods could not be skipped during recovery.
  To fix this I unfolded RecoveryAnnotationMethodHeaderDefaultValueopt to insert "Diet" after 'default'.
  I couldn't yet see any harm in interpreting a default method body as the default value of an annotation method (during recovery)
  Only within Parser.consumeMethodHeaderDefaultValue() I had to recover some information for non-annotation methods.
Created attachment 218128
Test & proposed fix

Srikanth, since this tightly interacts with your work in Bug 380194, do you want to do a quick review of these changes, before I release them to the branch?
Created attachment 218130
improved patch

fixed a regression in ComplianceDiagnoseTests.
The inserted "Diet" must only affect one branch -> had to unfold more rules for recovery.
Another test where syntax error in BETA_JAVA8 is not optimal:

	// an annotation type cannot have default methods
	public void testAnnotation1() {
		// FIXME: improve error message, currently reads:
		// Syntax error on tokens, ConstructorDeclaration expected instead
		runNegativeTest(
			new String[] {
				"I.java",
				"public @interface I {\n" +
				"    String id() default { return \"1\"; }\n" +
				"}\n"
			},
			"s.t. like: annotation methods cannot have a body");
	}
	
Changes pending the confirmation that the syntax for default methods is final.
The syntax of default methods is still in a state of flux.
The latest thinking that the keyword default would be a modifier.
With the fix in bug 399695 reporting of syntax errors works fine now, but still spurious (semantic) errors are reported because recovered methods don't have AccDefaultMethod set.
I'm investigating.
I did it again: just adding one more rule to our grammar make jikespg go into a state of mind where only kill -9 would get it back to earth.

Previously, illegal use of strcpy and an over-aggressive C-optimization corrupted memory leading to various forms of core dumping.
This time it was a logical bug:
In function partset()  the argument set_size is checked for various known values, and only if no match, the function *assumes* it was "called from scope processing".
WRONG, if set_size *happens* to equal num_terminals, e.g., we never get to this necessary assumption.
I fixed this locally by one more explicit parameter to partset() and with that I can again generate a working parser, phew!
Released via commit c4baf766be166b04f595eec5cebbd2a64f399daa.
