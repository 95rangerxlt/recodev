Build 20020423

When iteration over an array of IClasspathEntry[], the inserted local variable
is 'iClasspathEntry', where it would make more sense to propose 'entry'.

A simple way to solve this problem would be to default to a name computed by 
extracting the last segment of the name starting with an uppercase, and 
converting the uppercase into a lowercase one.

IClasspathEntry --> entry

Runnable --> runnable

IResource --> resource

Build 20020423

When iteration over an array of IClasspathEntry[], the inserted local variable
is 'iClasspathEntry', where it would make more sense to propose 'entry'.

A simple way to solve this problem would be to default to a name computed by 
extracting the last segment of the name starting with an uppercase, and 
converting the uppercase into a lowercase one.

IClasspathEntry --> entry

Runnable --> runnable

IResource --> resource
we have a util for that
NameProposer.proposeArgName

It doesn't yet do the algorithm suggested by Phiippe, but we should implement 
it there
What about NLS? Other countries with other languages might have different code 
conventions. How can we encode the code convention logic into a simple string? 
Regular expressions?

Could be, but if user has put some uppercase letters in a type name, it must 
mean something anyway. 

I'll try to come up with a reasonable strategy.
Code assist is using the same algorithm for variable name suggestions and it 
works extremly well. We should use the same algorithm  for template variable 
name suggestions. 
Another idea: allow the user to specify the default value at template-
definition time.
Something like ${type1=int} ${type2=int} to generate the initial code to 'int 
int' but to allow independent change of type1 and type2.
fixed >= 20020805

Implemented Philippes proposal algorithm in NameProposer.
Elena, if you still want the initial value feature, please file a separate bug.
