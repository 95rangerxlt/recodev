It is very annoying, when importing List, to have to choose which List I want,
especially since I nearly ALWAYS choose java.util.List.  Specifically, when
doing an Organize Imports, a dialog shows up, and it appears to list all of the
List classes in alphabetical order by package name.  (I think this dialog will
show up in other places, but I'm not sure.  I know I also see the same list ina
different form with QuickFix- Add Import).

I envision a number of different ways this list of classes can be improved, but
(1) the simplest to use and maybe implement would be to make sort-order
pluggable.  I can see two variants on sort order that I might like - 
1a) Let the user define preferences based on leading package fragments - java.*,
before all others
1b) Sort the list based on frequency of use in the current project.  This way,
over time, the ones I'm using naturally bubble to the top.

(2) An additional possibility would be to allow the user to explictly
exclude/hide classes they never use.  A number of libraries I use might have
their own List, which is public, but it's never intended to be used by the
clients of the JAR.  If I could, over time, build up this knoweldgebase of
classes in libraries that I just do not want to see, or very seldom wish to see,
the list could be appropriately resticted.

It is very annoying, when importing List, to have to choose which List I want,
especially since I nearly ALWAYS choose java.util.List.  Specifically, when
doing an Organize Imports, a dialog shows up, and it appears to list all of the
List classes in alphabetical order by package name.  (I think this dialog will
show up in other places, but I'm not sure.  I know I also see the same list ina
different form with QuickFix- Add Import).

I envision a number of different ways this list of classes can be improved, but
(1) the simplest to use and maybe implement would be to make sort-order
pluggable.  I can see two variants on sort order that I might like - 
1a) Let the user define preferences based on leading package fragments - java.*,
before all others
1b) Sort the list based on frequency of use in the current project.  This way,
over time, the ones I'm using naturally bubble to the top.

(2) An additional possibility would be to allow the user to explictly
exclude/hide classes they never use.  A number of libraries I use might have
their own List, which is public, but it's never intended to be used by the
clients of the JAR.  If I could, over time, build up this knoweldgebase of
classes in libraries that I just do not want to see, or very seldom wish to see,
the list could be appropriately resticted.
David,

option two is already present in 3.0. Go Preferences->Java->Type Filters.

Adding support for option 1b is on the JDT/UI plan for 3.1.
Option 2 does NOT appear to function for "Organize Imports", "Add Import",  
"Quick Fix", or "Content Assist", at least not the way I'm using it.  I've  
added "java.awt.List" to the TypeFilters, and it shows up for all of the  
above.  
  
As far as 1b, is the "meta data" already there to support that, or is adding 
that part of 3.1? 
The type filter excludes whole packages not single types. So you can only
execlude java.awt*.
Is there any particular reason for that limitation?  Looking at the code it 
seems pretty arbitrary. 
No the reason is that the all types search engine reports package name and type
name separately. To avoid building a fully qualified name for all types in
memeory for filtering we decided to only filter package names. If we want to
allow filtering single types as well we would have to introduce a notation that
makes clear which is the package name and which is the type name (e.g.
java.awt#List).
Building a fully qualified name doesn't strike me as that espensive, if you do 
it at the point of filtering.  You're doing it at most for a handful 
(sometimes a large handful) of classes. 
 
As for a special annotation, I must be missing something. If I specify 
java.util.List, then I mean anything that IS java.util.List. If by some 
chance, soem really stupid programmer creates a class in a package that is 
called java.awt.List, it won't match anylonger becuase the class name is 
java.awt.List.Foo.  And if I want to filter all of those, I put in 
java.awt.List.* (which won't match java.util.List anyway). 
 
I'll even provide the patch. 
The filtering is done when populating the all types cache, not on filtering to
filter only once for Open Type, Organize Import, ....

We could do some prefix checking to building only fully qualified names for type
in package that might be filtered
What is the reason for not having fully qualified names? Memory or Performance? 
(or something else). 
Created attachment 15707
Allows Type Filters work based on fully qualified name, not just package name.
Martin, can you please have a look and comment on the patch.
released patch > 20041108
Thanks David!
*** Bug 67545 has been marked as a duplicate of this bug. ***
