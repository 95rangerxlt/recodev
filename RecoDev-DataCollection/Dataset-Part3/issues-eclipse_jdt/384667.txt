Is it OK to always just use one pair of sourceStart/sourceEnd? If a lambda has a - possibly large - block as its body, signaling an error against the lambda might be nicer when just highlighting the "header" not the entire construct, don't you think?

What about a scheme that is a bit closer to how we handle method declarations?

Is it OK to always just use one pair of sourceStart/sourceEnd? If a lambda has a - possibly large - block as its body, signaling an error against the lambda might be nicer when just highlighting the "header" not the entire construct, don't you think?

What about a scheme that is a bit closer to how we handle method declarations?
Markus, what would your team like to see here ? At the moment the lambda expression's sourceStart is set to the co-ordinates for the '(' in the
parameter list or in lambdas of the form x -> 10, the co-ordinates of x
and its sourceEnd is set to the end of the body so it spans the entire
construct.
(In reply to comment #0)
> What about a scheme that is a bit closer to how we handle method declarations?

public interface I {
	void blah () {
		System.out.println("");
	}
}

triggers an error about abstract method supplying body incorrectly and only
blah () is underlined - I am OK with this one too.
We generally try to keep problem ranges short, so that they don't overlap or wrap to multiple lines.

I agree that we should avoid selecting the whole lambda expression for a problem like "This lambda expression must return a result of type int".

So my first answer would be to keep it similar to the error range on a method declaration, i.e. for a bad result type, select from the beginning of the LambdaParameters until after the '->'.

However, we may want to revise this in some cases. E.g. for a simple lambda where the LambdaBody is an Expression, it would make more sense to just select the expression:

() -> 42
      ^^ This lambda expression must return a result of type String
There is some unfinished business that came up during code review of
the JSR335 grammar/parser work:

> (5) Parser has some comments indicating an interim solution:
>  (a) consumeLambdaExpression() 
>      // ')' position, discard for now 

I am moving it to here to be tracked.
Manoj, Please take a look.
Address the issue mentioned in comment  7 (subitem 2 - the source position of new in a reference expression) of bug 399794 as well when addressing the source range issue of lambdaexpression as well.
(In reply to comment #6)
To spell out the actual issue from bug 399794 comment 7:

> 1) There is a single space additional in the source range for new
> (CreationReference). The issue appears due to an additional value in
> ReferenceExpression.sourceEnd.
(In reply to comment #7)
> (In reply to comment #6)
> To spell out the actual issue from bug 399794 comment 7:
> 
> > 1) There is a single space additional in the source range for new
> > (CreationReference). The issue appears due to an additional value in
> > ReferenceExpression.sourceEnd.

This issue was addressed as part of bug 407131 comment 2.
Load balancing: Shankha, please take a look. Work with Jay for review & release.
TIA.
Hi,
Could you please let me know if the bug has already been solved. If not what would be a valid case.

I had the following test case:

interface I {
	public int foo(int x);
}
class Y {
	public void foo() {
		I i = (int x)-> { a = 42 + x; return a;};
	}
}
public class X {
	public static void main(String[] args) {
	}
}


----------\n
1. ERROR in X.java (at line 6)\r\n
	I i = (int x)-> { a = 42 + x; return a;};\r\n
	                  ^\n
a cannot be resolved to a variable\n
----------\n
2. ERROR in X.java (at line 6)\r\n
	I i = (int x)-> { a = 42 + x; return a;};\r\n
	                                     ^\n
a cannot be resolved to a variable\n
----------\n

Error messages do not span across the body of the lambda, and point to specific 
variables.

https://bugs.eclipse.org/bugs/show_bug.cgi?id=384667#c8 also I think implies the issue is resolved.
Try this:

interface I {
	int foo();
}
public class X {
	Object o = (int a, int b) -> {
		System.out.println("This entire lambda gets flagged");
		System.out.println("This entire lambda gets flagged");
		System.out.println("This entire lambda gets flagged");
		System.out.println("This entire lambda gets flagged");
		System.out.println("This entire lambda gets flagged");
		System.out.println("This entire lambda gets flagged");
		System.out.println("This entire lambda gets flagged");
		System.out.println("This entire lambda gets flagged");
		System.out.println("This entire lambda gets flagged");
		System.out.println("This entire lambda gets flagged");
	}
}
class Y {
	Object o = () -> {
		return 0;
   }
}
public class X {
	public static void main(String[] args) {}
}


----------\n
1. ERROR in X.java (at line 2)\r\n
	Object o = () -> {\n
		return 0;\n
   }\r\n
	           ^^^^^^^^^^^^^^^^^^^^^^^^\n
The target type of this expression must be a functional interface\n
----------\n
2. ERROR in X.java (at line 4)\r\n
	}\r\n
	^\n
Syntax error, insert ";" to complete ClassBodyDeclarations\n
----------\n


===========================================
The error message should point to:

1. ERROR in X.java (at line 2)\r\n
	Object o = () -> {\n
		return 0;\n
                ^^^^^^^^\n
   }

Am I correct ?
See comment#3
Created attachment 237586
WIP: Patch

Hi,
I had few questions. Please consider the following test case:

class Y {
	Object o = () -> {
		return 0;
   };
}
public class X {
	public static void main(String[] args) {}
}

A error is thrown with the help of the following function:
org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java:

public void targetTypeIsNotAFunctionalInterface(FunctionalExpression target) {
	int sourceStart = target.sourceStart;
	int sourceEnd = target.sourceEnd;

	if (target instanceof LambdaExpression) {
		LambdaExpression exp = (LambdaExpression) target;
		Statement stmt = exp.body;
		if (stmt instanceof Literal) {
			sourceStart = stmt.sourceStart;
		} else {
			//
		}
	}

	this.handle(
		IProblem.TargetTypeNotAFunctionalInterface,
		NoArgument,
		NoArgument,
		sourceStart,
		sourceEnd);
}

The idea is to determine the starting location of the enclosing method of the lambda expression. If we can get the starting position of the enclosing method we can create a new scanner from this position and search for () -> and adjust the sourceStart and sourceEnd so that error markers show up properly.

One way of getting the enclosing method is:

Statement stmt = exp.body;
MethodScope scope = exp.scope;
FieldBinding field = scope.initializedField


and then FieldDeclaration decl = field.sourceField();
         {methodDecl.sourceStart, methodDecl.sourceEnd}

scope.initialization field is null. IS there a way to get the enclosing method start location.

Thanks
Created attachment 237708
Patch

Java8 tests are green.

1) The following lines of code are used to detect 

int sourceStart = target.sourceStart;
int sourceEnd = target.sourceEnd;
if (target instanceof LambdaExpression) {
  LambdaExpression exp = (LambdaExpression) target;
  Statement stmt = exp.body;
  if (stmt instanceof Block) {
	sourceEnd = exp.arrowPos;
  } else {
	sourceStart = stmt.sourceStart;
  }
} 

in org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java

LambdaExpression.body is be declared as statement. I went through the code and
concluded that the LambdaExpression.body can be null or Block or Expression (Literal, BinaryExpression, etc.) It can only be null under CodeAssist.

Therefore I have kept the check as 
if (stmt instanceof Block) {
	sourceEnd = exp.arrowPos;
  } else {
	sourceStart = stmt.sourceStart;
  }

and not as 

if (stmt instanceof Block) {
	sourceEnd = exp.arrowPos;
} else if (stmt instanceof Expression){
	sourceStart = stmt.sourceStart;
}

Tests were run with both pieces of code and tests were green in both results.
Hi Shankha, I can take up the review of this one. 

Two problems: 

(1) Certain diagnostics are still using the full range: 
bytecodeExceeds64KLimit(),
illFormedParameterizationOfFunctionalInterface(),
lambdaExpressionsNotBelow18()

(2) I think you should implement a method in FunctionalExpression
called sourceEndForDiagnostics() and let is do the right thing: i.e
return just sourceEnd for ReferenceExpression's and for lambda's
override and return the truncated range rather than duplicating the code
in many places.
Created attachment 237723
Patch

(In reply to Srikanth Sankaran from comment #16) 

> Two problems: 
> 
> (1) Certain diagnostics are still using the full range: 
> bytecodeExceeds64KLimit(),
> illFormedParameterizationOfFunctionalInterface(),
> lambdaExpressionsNotBelow18()

I have added code to handle the above functions. The errors reported through illFormedParameterizationOfFunctionalInterface and lambdaExpressionsNotBelow18 had test cases associated with them. Was able to verify them.

There were no test cases for the error message associated with bytecodeExceeds64KLimit.

I wrote a test case in org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
test384667b(). 

This test case is based on org.eclipse.jdt.tests.compiler.regression.NegativeTest.java
test005.

I was not able to reproduce the scenario.

> (2) I think you should implement a method in FunctionalExpression
> called sourceEndForDiagnostics() and let is do the right thing: i.e
> return just sourceEnd for ReferenceExpression's and for lambda's
> override and return the truncated range rather than duplicating the code
> in many places. 

Done.
Created attachment 237725
Patch

Had forgot to comment out 
TESTS_NAMES
in
org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java.

All the comments made in https://bugs.eclipse.org/bugs/show_bug.cgi?id=384667#c17
are valid for this patch as well.
Just pulled in latest code for today and had lot of merge issues. Will update the patch so that it is easier for the reviewer to review.

Thanks
Created attachment 237742
Patch

(In reply to shankha banerjee from https://bugs.eclipse.org/bugs/show_bug.cgi?id=384667#c19)

There should not be any merge issues with the patch and new test cases added
to 
org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java

fixed.
Created attachment 237827
Patch

Please ignore the comments made before. I will have it one place so it is easier for the review.

New patch to take care of the merge conflicts.
Tests results are green.

(In reply to Srikanth Sankaran from comment #16) 

> Two problems: 
> 
> (1) Certain diagnostics are still using the full range: 
> bytecodeExceeds64KLimit(),
> illFormedParameterizationOfFunctionalInterface(),
> lambdaExpressionsNotBelow18()

I have added code to handle the above functions. The errors reported through illFormedParameterizationOfFunctionalInterface and lambdaExpressionsNotBelow18 had test cases associated with them. Was able to verify them.

There were no test cases for the error message associated with bytecodeExceeds64KLimit.

I wrote a test case in org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
test384667b(). 

This test case is based on org.eclipse.jdt.tests.compiler.regression.NegativeTest.java
test005.

I was not able to reproduce the scenario.

> (2) I think you should implement a method in FunctionalExpression
> called sourceEndForDiagnostics() and let is do the right thing: i.e
> return just sourceEnd for ReferenceExpression's and for lambda's
> override and return the truncated range rather than duplicating the code
> in many places. 

Done.

3) 
org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
Line No: 7875
lexp.setarrowPos(this.intStack[this.intPtr--]); // '->' position
	lexp.sourceEnd = this.intStack[this.intPtr--];   // ')' position or identifier position.
	lexp.sourceStart = this.intStack[this.intPtr--]; // '(' position or identifier position.

The comment : // '(' position or identifier position.
Why the comment 'identifier position'?

> org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/
> Parser.java
> Line No: 7875
> lexp.setarrowPos(this.intStack[this.intPtr--]); // '->' position
> 	lexp.sourceEnd = this.intStack[this.intPtr--];   // ')' position or
> identifier position.
> 	lexp.sourceStart = this.intStack[this.intPtr--]; // '(' position or
> identifier position.
> 
> The comment : // '(' position or identifier position.
> Why the comment 'identifier position'?

x -> x is a valid lambda - i.e singleton, type elided unparenthesized parameter
is legal.

I made a bunch of changes mostly editorial in nature and released the fix and
tests here:

Changes:

1. For expression body lambda, I retained the old message format/range.
Printing

I i = () -> 10;
            ^^
"The target type of this expression must be a functional interface"

looks very bad :)

2. setarrowPos ==> renamed to setArrowPosition

3. this.scanner.currentPosition - 1 reads better than this.scanner.currentPosition-1

4. I didn't add the new tests, we have plenty that are being modified to
fit the new message range that prove the code is working as intended.

5. return this.body instanceof Block ? this.arrowPosition : this.sourceEnd;
is more concise than the if statement.
Commit id: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=4f6e7772e1eab66068e8d31851a8e395b8beb754
By making and signing (by using the git signed-off-by mechanism or any other signing mechanism which may be specified by the Eclipse Foundation from time to time) a contribution to an Eclipse project, I certify that:

    I have authored 100% of the contribution.
    I have the necessary rights to submit this contribution, including any necessary permissions from my employer.
    I am providing this contribution under the license(s) associated with the Eclipse Foundation project I am contributing to.
    I understand and agree that Eclipse projects and my contributions are public, and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with the license(s) involved.
