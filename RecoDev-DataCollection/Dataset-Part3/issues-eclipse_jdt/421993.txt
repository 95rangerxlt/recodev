(Everybody: You have to install the Eclipse Releng Tools and then enable the POM Version Tool in the preferences).

The JDT Core process of cherry picking changes from master to BETA_JAVA8 is problematic.

I now see POM version problems in BETA_JAVA8 of /org.eclipse.jdt.core.tests.model/pom.xml and /org.eclipse.jdt.core.tests.compiler/pom.xml. The actual reason is not a wrong version in the POM, but a wrong version the MANIFEST.MF.

Even worse, http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=5bf3b69e14807223b9c4f6e1446af8918e21aef4 tells me that this bug was introduced by bug 416740 and authored/signed-off-by by Mickael Istria. But I don't see what Mickael's contribution https://git.eclipse.org/r/#/c/17679/ should have done wrong -- it doesn't even touch the version number!

I really think the JDT Core team should stop using a manual cherry-picking process and should instead use the normal Git workflows. While we're working on BETA_JAVA8, you should periodically select origin/master and merge it into BETA_JAVA8. That way, you only have to deal with version number updates in master once: On the first merge after an update, you have to revert the version number updates in BETA_JAVA8 once. After that, Git won't try to update versions in BETA_JAVA8 any more, since that change has already been merged.

(Everybody: You have to install the Eclipse Releng Tools and then enable the POM Version Tool in the preferences).

The JDT Core process of cherry picking changes from master to BETA_JAVA8 is problematic.

I now see POM version problems in BETA_JAVA8 of /org.eclipse.jdt.core.tests.model/pom.xml and /org.eclipse.jdt.core.tests.compiler/pom.xml. The actual reason is not a wrong version in the POM, but a wrong version the MANIFEST.MF.

Even worse, http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=5bf3b69e14807223b9c4f6e1446af8918e21aef4 tells me that this bug was introduced by bug 416740 and authored/signed-off-by by Mickael Istria. But I don't see what Mickael's contribution https://git.eclipse.org/r/#/c/17679/ should have done wrong -- it doesn't even touch the version number!

I really think the JDT Core team should stop using a manual cherry-picking process and should instead use the normal Git workflows. While we're working on BETA_JAVA8, you should periodically select origin/master and merge it into BETA_JAVA8. That way, you only have to deal with version number updates in master once: On the first merge after an update, you have to revert the version number updates in BETA_JAVA8 once. After that, Git won't try to update versions in BETA_JAVA8 any more, since that change has already been merged.
Markus, do you think that handling of merge conflicts is fundamentally different from handling cherry-pick conflicts? Couldn't the same kind of mistake easily be introduced in both workflows alike?

(In reply to Markus Keller from comment #0)
> But I
> don't see what Mickael's contribution https://git.eclipse.org/r/#/c/17679/
> should have done wrong -- it doesn't even touch the version number!

Surely not, and so cherry-picking that patch cannot directly cause the problem we are seeing, but perhaps some other conflict existed on that file and manually resolving the conflict s.o. made a mistake.


As for changing the process I have the vague feeling that it is too late now, but let me make a quick experiment before further commenting - or have you already tried merging the current HEADS?
No, I wouldn't start merging without a "BETA_JAVA8 is frozen" buy-in from all committers.

I don't know exactly how Manoj and Jay are doing the cherry-picking, so I also can't tell exactly why this mistake happened. I just know that with the merge workflow, it's trivial to see what was already merged. And once a version update is properly processed, you will never be tempted to cherry-pick a change again that has already been processed.

With cherry-picking, it's very hard to ensure that all changes are actually picked. I think Jay used some custom tooling to help with that. I'd rather use standard Git tooling that needs less manual steps and is better traceable.

Another problem with cherry-picking is that Git urls that point to a commit in the master branch will become detached from master once we declare BETA_JAVA8 the new master branch. But the commits you see in blame / Show Annotations will be different from what the links from Bugzilla point to.
(In reply to Markus Keller from comment #2)
> No, I wouldn't start merging without a "BETA_JAVA8 is frozen" buy-in from
> all committers.

The reason why I asked: I'm afraid that git will try to re-apply all changes that have already been cherry picked resulting in conflicts on every line that has been touched during the last more than a year. Do you know of a trick how this can be prevented?
Markus,

When we started working on the BETA_JAVA8 branch, we felt that there would be less number of changing going in to master and that it would be lot easier bringing individual changes from master to BETA_JAVA8. I agree with your point about not having to deal with a version related conflict. Having said that, I also agree with Stephan that you would have to deal with conflict resolutions anyway.

I will fix the version in question for now and we will make sure to be more careful when resolving conflicts. But as for the process, I would say we are so close to the end game and would hardly get about 10 commits or so from master. Yes, it has limitations, but I am sure we can work around them. So I suggest we just continue with the current process.
(In reply to Stephan Herrmann from comment #3)
> The reason why I asked: I'm afraid that git will try to re-apply all changes
> that have already been cherry picked resulting in conflicts on every line
> that has been touched during the last more than a year. Do you know of a
> trick how this can be prevented?

The baseline could be established using command-line Git:
$git merge -s ours ef173207edef63b7e96a8faa70a699ef0bc0ce6a

ef17320 is the last commit from master that was cherry-picked into BETA_JAVA8. The "-s ours" strategy just keeps everything from BETA_JAVA8. The only effect is that after that, normal merges from master into BETA_JAVA8 will be based on that commit, so you only have to deal with real conflicts w.r.t. the last commit where master was merged into BETA_JAVA8.


(In reply to Jayaprakash Arthanareeswaran from comment #4)
> I will fix the version in question for now and we will make sure to be more
> careful when resolving conflicts. But as for the process, I would say we are
> so close to the end game and would hardly get about 10 commits or so from
> master. Yes, it has limitations, but I am sure we can work around them. So I
> suggest we just continue with the current process.

OK, that also works for me.

Re correct versions for test bundles: The merge error probably happened because the versions of test bundles were already wrong before the merge! The common policy for test bundles is that they should always be in sync with their "main" bundle. E.g. org.eclipse.jdt.core.tests.model
- should be 3.10.0 in master (is: 3.9.0)
- should be 3.9.2 in R4_3_maintenance (is: 3.8.2)
- should be 3.9.2 in BETA_JAVA8 (is right now: 3.9.0)

Jay, I suggest you align all test bundle versions with their main bundle in all 3 active branches.
(In reply to Markus Keller from comment #5)
> Jay, I suggest you align all test bundle versions with their main bundle in
> all 3 active branches.

I wasn't so sure initially about this, as we have maintained the test bundle versions independent of their component version all along. But then I have to agree that this will make our lives easier and make working with versions much easier. Only thing I don't like about is, we will be forced to touch all test bundles just for consistency sake, whether they changed or not. But that's a trade-off I am willing to make so I don't have to track each test bundle's version separately.

Srikanth/Stephan, what's your take on this?
Created attachment 237579
Patch for R4_3_maintenance

This is the patch for version updates for all tests bundles to match their component version. Note that apt.pluggable.tests gets special treatment, since it seems to get it's version from apt.core and not apt.pluggable.core as the name suggests. We can't make the version match pluggable.core because it has a lower version than pluggable.tests, so for all apt test projects I have made the version to match apt.core.

Markus, can you take a quick look at the patch? This is meant for R4_3_maintenance and BETA_JAVA8.
(In reply to Jayaprakash Arthanareeswaran from comment #6)
> Only thing I don't like about is, we will be forced to touch
> all test bundles just for consistency sake, whether they changed or not.
> But that's a trade-off I am willing to make [..]

Yeah, but since nobody should depend on test bundle versions anyway, this shouldn't matter in practice. See also https://wiki.eclipse.org/Version_Numbering#Plug-ins_with_no_API


(In reply to Jayaprakash Arthanareeswaran from comment #7)
Looks good for R4_3_maintenance, except for the missing POM update in /org.eclipse.jdt.apt.pluggable.tests/pom.xml (should be 3.3.500). The POM Version Tool really helps and should also be enabled in all maintenance workspaces.

For BETA_JAVA8, I think the safest fix is to first release the R4_3_maintenance patch and then make sure all MANIFEST.MF have the same version number as R4_3_maintenance. Steps in Eclipse/EGit:
- select all eclipse.jdt.core projects
- Search > File...
  - File name pattern: MANIFEST.MF
  - Scope: Selected Resources
- Search view menu > Show as List
- Select All
- context menu > Compare With > Branch, ...
  - choose R4_3_maintenance


Then do the same for POMs. I think it's best to keep manifest and POM as close as possible to R4_3_maintenance. I.e. I don't think tests-pom/pom.xml should be present or referenced in BETA_JAVA8.
(In reply to Markus Keller from comment #8)
> (In reply to Jayaprakash Arthanareeswaran from comment #7)
> Looks good for R4_3_maintenance, except for the missing POM update in
> /org.eclipse.jdt.apt.pluggable.tests/pom.xml (should be 3.3.500). The POM
> Version Tool really helps and should also be enabled in all maintenance
> workspaces.

Thanks, Markus! Interestingly I did have the version tool set to Error and that's how I picked the pom files. But this one was not marked. I went back and set it to Warning and the warning appeared. Wonder what was going on.

Anyway, the version has been fixed for R4_3_maintenance:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_3_maintenance&id=f993e6f03cae8a4c4022c36ffb3938e24a284798
While updating the versions on BETA_JAVA8, couple of bundles (apt.core and compiler.tool) had already a higher version than R4_3_maintenance. Should we just leave them as they are and adjust their test bundles to reflect that version? Or should the version between R4_3 and BETA_JAVA8 match perfectly?
(In reply to Jayaprakash Arthanareeswaran from comment #10)
Yes, they should match perfectly. We can safely assume that BETA_JAVA8 has no relevant version number history.
(In reply to Jayaprakash Arthanareeswaran from comment #6)
> (In reply to Markus Keller from comment #5)
> > Jay, I suggest you align all test bundle versions with their main bundle in
> > all 3 active branches.
> 
> I wasn't so sure initially about this, as we have maintained the test bundle
> versions independent of their component version all along. But then I have
> to agree that this will make our lives easier and make working with versions
> much easier. Only thing I don't like about is, we will be forced to touch
> all test bundles just for consistency sake, whether they changed or not. But
> that's a trade-off I am willing to make so I don't have to track each test
> bundle's version separately.
> 
> Srikanth/Stephan, what's your take on this?

Sorry for late answer. IMHO making our lives easier for the future wins.
The fact that tests aren't shipped as part of the product and are not API 
gives us the necessary freedom to touch and set versions as needed.
(In reply to Markus Keller from comment #11)
> (In reply to Jayaprakash Arthanareeswaran from comment #10)
> Yes, they should match perfectly. We can safely assume that BETA_JAVA8 has
> no relevant version number history.

Done. I have left the tests-pom for the time being for couple of reasons - 1) to avoid hitting conflicts in future cherry-picks (2) it doesn't bother us in any way. I will fix the versions in master too.
(In reply to Jayaprakash Arthanareeswaran from comment #13)
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=f0bd639a4f812be261f2dbe805287cb9c3df1ad1 looks good, thanks.

I've also updated the API Tools filter to the current baseline (4.3.1):
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=55189ed648ac780e2783a409705c9c8b61eeced6
