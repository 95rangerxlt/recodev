By default, the "Externalize Strings" wizard fills in the "Package:" and 
"Property file name:" fields with previous values. This works out nicely 
when NLSing a bunch of files in the same package, but it gives the user the 
wrong default values when the go to a file in a different package.

It would be nice if the wizard populated these fields in relation to the 
source file being externalized. For example, if I am externalizing strings 
in JDIModelPresentation, the default value for package would automatically 
be set to "org.eclipse.jdt.internal.debug.ui"

If the package is automatically filled in, the property bundle field could 
be filled in by looking for a *.properties file in the detected package.

This would significantly reduce the amount of manual labor required to use 
the NLS tool.

By default, the "Externalize Strings" wizard fills in the "Package:" and 
"Property file name:" fields with previous values. This works out nicely 
when NLSing a bunch of files in the same package, but it gives the user the 
wrong default values when the go to a file in a different package.

It would be nice if the wizard populated these fields in relation to the 
source file being externalized. For example, if I am externalizing strings 
in JDIModelPresentation, the default value for package would automatically 
be set to "org.eclipse.jdt.internal.debug.ui"

If the package is automatically filled in, the property bundle field could 
be filled in by looking for a *.properties file in the detected package.

This would significantly reduce the amount of manual labor required to use 
the NLS tool.
May be the package field should even be a combo box to give users easy access 
to the last value.

Adam, waht do you think
not sure - we do not use that UI idiom
in too many places (maybe we should, however)
not 2.1
reop
nothing planned without external contribution
Reopening...
This got addressed in two ways:

- we try to guess the right property / accessor class based on the current
  usage
- we remember the last entered values.
