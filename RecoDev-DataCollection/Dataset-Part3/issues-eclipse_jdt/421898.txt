BETA_JAVA8: 

Earlier drafts of JSR335 required the lambda body to be type checked and analysed
over and over for every potentially applicable method. The latest draft has done
away with this requirement, but we still need some information about the lambda
even in the absence of target type in invocation contexts.

    - Is a lambda value-compatible or void compatible or both ?
    - Is a lambda explicitly typed or not ? If the former, what are its
      parameter types ?
    - What are the return expressions of the lambda ? Is one or more of them
      pertinent to applicability ?

For reference expressions,

    - Is a reference expression an exact one or an inexact one.

This ER is to implement a preprocess step in INVOCATION_CONTEXT's to
gather this information.

As part of this, we should be able to reenable the two tests that were
disabled namely:

NegativeLambdaExpressionsTest._test401610h
NegativeLambdaExpressionsTest._test401610i

BETA_JAVA8: 

Earlier drafts of JSR335 required the lambda body to be type checked and analysed
over and over for every potentially applicable method. The latest draft has done
away with this requirement, but we still need some information about the lambda
even in the absence of target type in invocation contexts.

    - Is a lambda value-compatible or void compatible or both ?
    - Is a lambda explicitly typed or not ? If the former, what are its
      parameter types ?
    - What are the return expressions of the lambda ? Is one or more of them
      pertinent to applicability ?

For reference expressions,

    - Is a reference expression an exact one or an inexact one.

This ER is to implement a preprocess step in INVOCATION_CONTEXT's to
gather this information.

As part of this, we should be able to reenable the two tests that were
disabled namely:

NegativeLambdaExpressionsTest._test401610h
NegativeLambdaExpressionsTest._test401610i
Note that all of this analysis is already implemented. We just need to
move them to a "preprocessing" step as part of overload resolution.
Fix and tests released via the cumulative commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=bacbe6f6e994ffc49a94960691c76bff97cb04d5
