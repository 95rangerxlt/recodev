Provide an "delegate refactor/code gen".

In JDE one can ask for the JDE to generate a simple delagation of methods to an delegate.
e.g. If I have a class that implements TreeModel, but I want that part of my interface to 
be delegated to treeModelDelegate I could do this with this.

ex.

class SomeClass extends SomeOtherClass implements SomeInterface {

  ... // its own code...
  ... // ...

  
}

At this point I would like to press "Generate delegate code...".
f
This action would ask for which interface (or even class?) that I want to have a delegate for.
In this case it would be javax.swing.tree.TreeModel and the field that it should use (or add) should 
be called treeModelDelegate - and then the class should look like the following:

class SomeClass extends SomeOtherClass implements SomeInterface, TreeModel {
   
  ... // its own code...
  ... // ...

   TreeModel treeModelDelegate;

    /**
     * Returns the treeModelDelegate.
     * @return TreeModel
     */
    public TreeModel getTreeModelDelegate() {
        return treeModelDelegate;
    }

    /**
     * Sets the treeModelDelegate.
     * @param treeModelDelegate The treeModelDelegate to set
     */
    public void setTreeModelDelegate(TreeModel treeModelDelegate) {
        this.treeModelDelegate = treeModelDelegate;
    }

   /**
     * @see javax.swing.tree.TreeModel#getRoot()
     */
    public Object getRoot() {
        return getTreeModelDelegate().getRoot();
    }

    /**
     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)
     */
    public Object getChild(Object parent, int index) {
        return getTreeModelDelegate().getChild(parent, index);
    }

    /**
     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)
     */
    public int getChildCount(Object parent) {
        return getTreeModelDelegate().getChildCount(parent);
    }

    etc. ....

}

Provide an "delegate refactor/code gen".

In JDE one can ask for the JDE to generate a simple delagation of methods to an delegate.
e.g. If I have a class that implements TreeModel, but I want that part of my interface to 
be delegated to treeModelDelegate I could do this with this.

ex.

class SomeClass extends SomeOtherClass implements SomeInterface {

  ... // its own code...
  ... // ...

  
}

At this point I would like to press "Generate delegate code...".
f
This action would ask for which interface (or even class?) that I want to have a delegate for.
In this case it would be javax.swing.tree.TreeModel and the field that it should use (or add) should 
be called treeModelDelegate - and then the class should look like the following:

class SomeClass extends SomeOtherClass implements SomeInterface, TreeModel {
   
  ... // its own code...
  ... // ...

   TreeModel treeModelDelegate;

    /**
     * Returns the treeModelDelegate.
     * @return TreeModel
     */
    public TreeModel getTreeModelDelegate() {
        return treeModelDelegate;
    }

    /**
     * Sets the treeModelDelegate.
     * @param treeModelDelegate The treeModelDelegate to set
     */
    public void setTreeModelDelegate(TreeModel treeModelDelegate) {
        this.treeModelDelegate = treeModelDelegate;
    }

   /**
     * @see javax.swing.tree.TreeModel#getRoot()
     */
    public Object getRoot() {
        return getTreeModelDelegate().getRoot();
    }

    /**
     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)
     */
    public Object getChild(Object parent, int index) {
        return getTreeModelDelegate().getChild(parent, index);
    }

    /**
     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)
     */
    public int getChildCount(Object parent) {
        return getTreeModelDelegate().getChildCount(parent);
    }

    etc. ....

}
good idea
but unfortunately not in this iteration
Reopening...
Got addressed for 2.1
