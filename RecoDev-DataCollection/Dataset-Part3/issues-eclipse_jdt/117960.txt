Start with this code:

String scheme1 = "";
String scheme2 = "";
if (!(scheme1 == null ? scheme2 == null : ((scheme2 != null) && scheme1.equals(scheme2))))
   return false;

2) Put the cursor next to the ! at the beginning of the if statement and select the "push negation down" quick fix.  The resulting code has compile errors:

if (!scheme1 == null ? scheme2 == null : ((scheme2 != null) && scheme1.equals(scheme2)))
   return false;

Error: "The operation "!" is undefined for the argument type(s) String."

Start with this code:

String scheme1 = "";
String scheme2 = "";
if (!(scheme1 == null ? scheme2 == null : ((scheme2 != null) && scheme1.equals(scheme2))))
   return false;

2) Put the cursor next to the ! at the beginning of the if statement and select the "push negation down" quick fix.  The resulting code has compile errors:

if (!scheme1 == null ? scheme2 == null : ((scheme2 != null) && scheme1.equals(scheme2)))
   return false;

Error: "The operation "!" is undefined for the argument type(s) String."
I believe the correct fix is to push the negation into both the "if" and "else" branches of the ternary expression:

if (scheme1 == null ? scheme2 != null : !((scheme2 != null) && scheme1.equals(scheme2)))

Which can be further simplified with another push down to:

if (scheme1 == null ? scheme2 != null : (scheme2 == null) || !scheme1.equals(scheme2))

This is a generic problem with conditional expressions and is not limited to 'Push negation down' quick assist.

e.g. Invoke 'Invert if statement' quick assist in the following 2 cases
------------------------------------------------------------------
	public void foo(boolean a, boolean b) {
		if (a || b ? a : b) {
			System.out.println();
		} else {
			return;
		}
	}

	public void foo(int a, int b) {
		if (a > 0 && b > 0 ? a > 1 : b > 1) {
			System.out.println();
		} else {
			return;
		}
	}
------------------------------------------------------------------

We already have a 'Invert conditional expression' quick assist
e.g. for the 1st if statement in the above snippet
        a || b ? a : b => !a && !b ? b : a 
-> 'Invert conditional expression' inverts the condition and also exchanges the if and then parts. Hence the value of the conditional expression remains the same.

However in case of 'Invert if statement', 'Push Negation down', 'Pull Negation up', 'Invert local variable' etc the 'value' of the conditional expression needs to be inverted. How do we do it ?
1. Invert the condition of the conditional expression ?
2. Exchange the if and then parts ?
3. Invert both if and then parts ? 
4. This is confusing and we should not allow it ?

Options 1 and 2 have the same effect. But option 3 looks right to me. Markus, do you agree?
(In reply to comment #2)
> if and then parts
Oops.. I meant 'then and else parts'
Tricky! I first also thought we have a choice about what to do, but in fact, we don't. An easy counter-example:

	public void bar(boolean a) {
		boolean c= !(a ? true : true);
		System.out.println(!c);
	}

The top-most ! applies to the whole conditional expression. The value of the condition ("a") is not directly connected to the result of the conditional expression. The condition only chooses which of the branches is returned. So the right fix is to leave the condition alone, but instead invert both the "then" and the "else" branch.

This example reveals 2 problems in AdvancedQuickAssistProcessor
#getInversedExpression(ASTRewrite, Expression, SimpleNameRenameProvider):

- the default solution at the end should use the NecessaryParenthesesChecker to find out whether the expression needs to be wrapped in parentheses (which would be the poor man's solution for this bug, but it leads to no-op solutions in my example)

- the method needs a special case for ConditionalExpression that inverts both branches
Created attachment 189419
fix+tests
Fixed in HEAD.
