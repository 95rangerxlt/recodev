Steps to reproduce the problem:

1. create a java project or a web project in the workspace
2. enable annotation processing for the java project, a .apt_generated source folder is generated in the project. 
3. delete .apt_generated folder
4. the .apt_generated folder is restored automatically but it doesn't appear in the Java perspective or J2EE perspective.

the .apt_generated folder is supposed to be restored as a source folder so that it can reappear in the Java or J2EE perspective.

Steps to reproduce the problem:

1. create a java project or a web project in the workspace
2. enable annotation processing for the java project, a .apt_generated source folder is generated in the project. 
3. delete .apt_generated folder
4. the .apt_generated folder is restored automatically but it doesn't appear in the Java perspective or J2EE perspective.

the .apt_generated folder is supposed to be restored as a source folder so that it can reappear in the Java or J2EE perspective.
I am unable to reproduce this with Eclipse SDK v3.2.2.  If you are reporting this against 3.2, can you try this against 3.2.2 and see if it has been fixed?  Or, if you are reporting this against 3.2.2, can you please correct the "Version" field and provide some more specifics about what other modules you have installed, what your settings are, and so forth?  Thanks.
*** Bug 185610 has been marked as a duplicate of this bug. ***
The following was reproduced on an adopter product based on Eclipse 3.6.2:

FIRST SCENARIO (SUCCEEDS):                                              
                                                                        
1. Create a Java project version 1.6.                                   
                                                                        
2. R-click on the project and do:                                       
                                                                        
Java Compiler->Annotation processing->Enable project specific settings  
and all other options are then selected by default.                     
                                                                        
This enables Annotation processing                                      
                                                                        
                                                                        
3. By default, the folder .apt_generated is added and it is in the      
.classpath file:                                                        
                                                                        
                                                                        
<?xml version="1.0" encoding="UTF-8"?>                                  
<classpath>                                                             
 <classpathentry kind="src" path="src"/>                                
 <classpathentry kind="con"                                             
path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.d
ebug.ui.launcher.StandardVMType/JavaSE-1.6"/>                           
 <classpathentry kind="src" path=".apt_generated">                      
  <attributes>                                                          
   <attribute name="optional" value="true"/>                            
  </attributes>                                                         
 </classpathentry>                                                      
 <classpathentry kind="output" path="bin"/>                             
</classpath>                                                            
                                                                        
                                                                        
4. Delete the folder .apt_generated from the Navigator view.            
                                                                        
Results:                                                                
                                                                        
The folder .apt_generated is automatically re-generated.                
                                                                        
No change is made to the .classpath file (it still contains             
.apt_generated as a source folder). This is OK.                         
                                                                        
SECOND SCENARIO (FAILS):                                                
                                                                        
Instead of performing the delete from the Navigator view, use the       
Enterprise Explorer or the Project Explorer.                            
                                                                        
In the Enterprise/Project Explorer, the .apt_generated folder is        
normally hidden.                                                        
                                                                        
Make it visible by selecting: Customize View (use the triangular icon pointing  towards the bottom, on the View's toolbar) and    
de-select the check box on the .* resources filter                      
                                                                        
Now the .apt_generated is visible among the Source Folders.             
                                                                        
If you delete it now from the Enterprise/Project Explorer, it gets removed from 
the .classpath file:                                                    
                                                                        
                                                                        
<?xml version="1.0" encoding="UTF-8"?>                                  
<classpath>                                                             
 <classpathentry kind="src" path="src"/>                                
 <classpathentry kind="con"                                             
path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.d
ebug.ui.launcher.StandardVMType/JavaSE-1.6"/>                           
 <classpathentry kind="output" path="bin"/>                             
</classpath>                                                            
                                                                        
The folder itself gets re-added to the project, but it is no longer  
a source folder.
Reopening.  I can see how that would be confusing.  Honestly I'm not sure what the right expectation should be, though.  If you manually edited the classpath to remove the generated folder (which is basically what you're doing if you edit a project with Project Explorer), would you expect it to be re-added?  I would think that, too, would be somewhat confusing.  Perhaps a reasonable action would be to also clear out the generated folder name setting, and then let the next build error out?  I'm not sure.
I'd say that whenever .apt_generated is (re)created, it should also be added to .classpath, if it is not already there. I don't see how it could be useful without being added there.

Besides that, the folder name starts with point and is usually hidden, so a regular user will hardly be aware of its existence. Thus, we should do everything possible to take care of things that can go wrong there.

Dani, what are your thoughts about this?
As I dimly recall from working on this in Eclipse 3.2, there is less flexibility there than you might think.  The main issue is that during a build we cannot change the classpath.  The current behavior with regard to when the classpath entry is added and when the directory is recreated was - again, to my best recollection - something that a lot of time was spent on and this was the best we could manage at the time.  I doubt you can improve on it without breaking something else, unfortunately.

We cannot read minds; if someone deletes a folder from a project, we have to assume they intended that action. The question is how to best honor that intent; and how to best signal to the user what the consequences of their action will be.
Please note that difference between the views: deletion invoked from Navigator simply deletes a folder which results in error while deletion invoked from Package Explorer deletes a folder and updates the classpath to reflect that change without any error.

Is there any reason why one may want to keep the .apt_generated folder as a non-source folder?

If yes, then it may be better to have a warning/error reported if annotation processing is enabled and the APT output folder is not a source folder, instead of forcefully adding this folder to the classpath.
> Dani, what are your thoughts about this?

The current behavior is wrong. There are two possible fixes:
1) The builder does not recreate the deleted source folder.
2) The deleted source folder is completely restored.

For consistency I would opt for 1.
> For consistency I would opt for 1.
Sorry, 2) of course
(In reply to comment #9)
> > For consistency I would opt for 1.
> Sorry, 2) of course

I agree. It seems there is only one-line change needed to achieve that: change #isOnClasspath(srcFolder) into #addToClasspath(srcFolder) in GeneratedSourceFolderManager in line 187.
Created attachment 208431
Patch
The test that fails (AptBuilderTests.testConfigMarker()) is no longer valid because generated source folder is automatically added to the classpath, so we won't get the marker that is mentioned there.
At the very least you need to also fix the javadoc.

But I believe this will not work, at least not in all cases.  I think the reason that code avoided changing the classpath was because it gets called, in some cases, when the workspace is locked.

I want to emphasize very strongly that this is code that was pushed around by bug after bug, and the current version of it is the version that seemed the best tradeoff at the time.  Before you change it you should at least look at the change history of that file to understand the previous bugs.
Also keep in mind that there are three distinct pieces of information that need to be synchronized:
 - the classpath
 - the existence or nonexistence of the folder on disk
 - the APT config settings (e.g., name of the folder)

Each of these can be changed individually by a variety of tools and situations - for example, importing a project from archive or from source control, or deleting (or creating) the folder from the filesystem outside of Eclipse, etc.
Walter, I see you have concerns ;-). And I agree with your advice to check the history and bugs to understand the state of the code. Now, on the other hand, can you give good reasons why the folder is restored when deleted via Navigator?

Szymon, please check the history and bugzilla.
(In reply to comment #13)
> Before you change it you should at least look at the change history of that
> file to understand the previous bugs.

My fault, I haven't checked the history of other classes in that area before the initial commit of this class.
I did a bit of digging through the code. It's worth re-reading the javadoc, if you've not already done so; there is some discussion of the different pieces of information that need to be kept in sync and what the current approach is.

Whether Szymon's patch could work seems to depend in part on whether it is legal for the classpath to be changed during the aboutToBuild() compilation participant call.  I am not sure of the answer.

As for why the source folder is restored - in general we treat the generated source file directory config entry as the primary source of truth, and we try to make the classpath and physical directory structure agree with it.  There's a change listener that watches for changes to the directory and to the config setting and tries to fix problems.  So I agree in principle with the goal of also restoring the classpath when we restore the source folder.  The problem is that I'm not sure we can actually do that, without running into deadlocks.  

As I recall we also ran into the problem that the classpath API is not threadsafe (it is not possible to atomically add to the classpath; you have to read it, change it, and write it), and so if two threads try to change the classpath, one of the changes will be silently lost.  I recall this causing problems with project creation wizards and with project import from version control, but I don't remember the details, unfortunately.

It is possible that some of these problems have been fixed since 3.2; maybe it's worth another attempt.
(In reply to comment #17)
> Whether Szymon's patch could work seems to depend in part on whether it is
> legal for the classpath to be changed during the aboutToBuild() compilation
> participant call.  I am not sure of the answer.

According to the javadoc of the aboutToBuild method, this is exactly what aboutToBuild is expected to do.
Ping.
Satyam/Walter,

We need yo decide on the suitable course of action for this.
Setting target to M7 to this is in the radar.
The code changes look good to me. Just the javadoc for the file will require an update to reflect this change. The javadoc for the method is added but a change in the file will also help.

Here are some observations to the concerns that Walter has raised. 
- I couldn't manage to get relevant history around this by looking at the bugs or the source code :(
- aboutToBuild() does allow modification of the buildpath. As Syzmon, mentioned the javadoc says it all. 
- During the call through the change listener and aboutToBuild, the workspace is locked and hence there should not be a chance of deadlock.

Considering the above points, the patch looks good to me. 

Syzmon, Can you please modify the test and the javadoc for the file?
(In reply to comment #21)
> The code changes look good to me. Just the javadoc for the file will require an
> update to reflect this change. The javadoc for the method is added but a change
> in the file will also help.
> 
> Here are some observations to the concerns that Walter has raised. 
> - I couldn't manage to get relevant history around this by looking at the bugs
> or the source code :(
> - aboutToBuild() does allow modification of the buildpath. As Syzmon, mentioned
> the javadoc says it all. 
> - During the call through the change listener and aboutToBuild, the workspace
> is locked and hence there should not be a chance of deadlock.
> 
> Considering the above points, the patch looks good to me. 
> 
> Syzmon, Can you please modify the test and the javadoc for the file?

Sure.
Walter, I think your concerns in comment 17 are taken care. Please look at comment 21. I intend to release the patch once Szymon fixes the minor comments that I have asked him to fix. Please let me know your comments.
Created attachment 212914
Patch v2

Adjusted to comments from comment 21.
(In reply to comment #23)
> Walter, I think your concerns in comment 17 are taken care. Please look at
> comment 21. I intend to release the patch once Szymon fixes the minor comments
> that I have asked him to fix. Please let me know your comments.

Please test the scenario where autobuild is turned on and a project with annotation processing enabled is imported from an archive file; and the scenario where a project is imported from version control (with no gen-src dir in the version control, as would typically be the case).  Otherwise, sure, let's see what happens.
(In reply to comment #25)
> Please test the scenario where autobuild is turned on and a project with
> annotation processing enabled is imported from an archive file; and the
> scenario where a project is imported from version control (with no gen-src dir
> in the version control, as would typically be the case).  Otherwise, sure,
> let's see what happens.
Good points. Szymon, do you want to take care of testing these?
(In reply to comment #26)
> Good points. Szymon, do you want to take care of testing these?

Yes. I have just tested the scenario with archive file and it seems to work fine. I am setting up some version control system to test the other scenario as well.
I have tested the scenario with Git version control and I did not observe any unwanted or unexpected behaviour.
(In reply to comment #28)
> I have tested the scenario with Git version control and I did not observe any
> unwanted or unexpected behaviour.
Thanks Szymon for testing these. 

The test change in testConfigMarker is not really making sense now :(. Something needs to be done there.
(In reply to comment #29)
> The test change in testConfigMarker is not really making sense now :(.
> Something needs to be done there.

I'm not sure how we could modify it to reflect the code change in a better way. We could add a separate test to check if classpath is correctly updated but testConfigMarker would still look odd.
 (In reply to comment #30)
> I'm not sure how we could modify it to reflect the code change in a better way.
> We could add a separate test to check if classpath is correctly updated but
> testConfigMarker would still look odd.

I agree. This seem to be the only config error that is being reported. We might still run into this error in some weird errors and hence it is better to leave the error in it's place. However, we may not be able to have the testcase. So, I think we could just leave the test with the comment on it. 

Please let me know if you have alternative thoughts. I want to release this tomorrow.
Sounds good to me.
(In reply to comment #31)
> So, I think we could just leave the test with the comment on it. 

Sounds good to me too.
Thank you Walter and Szymon for your comments. 
Thank you Szymon for the patch. 
Released the patch via commit 88aa1b709c25b8b1bf6b428540d305dd5a1a00d3
Dani, we need a pmc +1 for back port to 3.6.2, 3.6.2+Java7 and 3.7.2+
streams.
I verified the code and that the fix works.
+1 to backport.
Released on 3.7 maintenance using commit 38d91f2a0d120c54f3563eb3ae4a819ad53edf06
Released in 3.6.2+J7 using commit 1a5efc64260aebe5aa230fe401b873f78f03bc3e
Released in 3.6.2 using commit 35d0b351847d4e8745a40a3e5edc237f756e10b9
