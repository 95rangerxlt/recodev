Using `new Boolean()` results in the creation of a new object on the
heap, when the flyweight `Boolean.TRUE` and `Boolean.FALSE` are available.
Java 1.4 added a `Boolean.valueOf()` which can be used in place of
`new Boolean()` but which will use the existing flyweight values instead.
    
Globally change `new Boolean(...)` to `Boolean.valueOf(...)` and replace
`new Boolean(...).booleanValue()` with the equivalent `Boolean.parseBoolean(...)`

Using `new Boolean()` results in the creation of a new object on the
heap, when the flyweight `Boolean.TRUE` and `Boolean.FALSE` are available.
Java 1.4 added a `Boolean.valueOf()` which can be used in place of
`new Boolean()` but which will use the existing flyweight values instead.
    
Globally change `new Boolean(...)` to `Boolean.valueOf(...)` and replace
`new Boolean(...).booleanValue()` with the equivalent `Boolean.parseBoolean(...)`
New Gerrit change created: https://git.eclipse.org/r/52997
I'm curious why you chose explicit Boolean.valueOf(x) over auto-boxing?
Mainly because it's easier to bulk change-and-replace "new Boolean(" with "Boolean.valueOf(" and have it be known to have exactly the same effect. It's also easier to review because of the changes that you can verify by inspection. Whilst auto-boxing would work in some cases, in others it may not (especially if a Boolean object is required). For example calls like setEnabled() may have both a Boolean and a boolean method, and being called with setEnabled(Boolean.valueOf(x)) vs setEnabled(x) might end up with incorrect behaviour.

But yes, there may be cases where it could be appropriate to replace with an autoboxed primitive instead; I'd be happy to change those where you think necessary. The real aim for this is to reduce the extra Boolean instances in memory, so either approach would achieve that goal (that and ensuring that the new Boolean() constructor isn't referred to by Eclipse classes).
(In reply to Alex Blewitt from comment #3)
> ... For example calls like
> setEnabled() may have both a Boolean and a boolean method, and being called
> with setEnabled(Boolean.valueOf(x)) vs setEnabled(x) might end up with
> incorrect behaviour.

Did you really observe this situation? IMHO, overload resolution based on Boolean vs. boolean is a very bad smell (for the exact same reason you mention), and finding this would be an extremely useful result from this exercise.
No I didn't observe that ... but you asked why I chose to rename new Boolean -> Boolean.valueOf, and the reason why I did it is because it's provable that it doesn't have any semantic changes with this change (though other optimisations are possible). Having done this with other changes I optimised new Boolean(true) to Boolean.TRUE and new Boolean(foo).booleanValue() with Boolean.parseBoolean(foo).
thanks for clarifying
Any reason that this fix cannot be merged?
Gerrit change https://git.eclipse.org/r/52997 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=507a3a86fd615cf7e070b27f9ffa3cf9399d7822
(In reply to Alex Blewitt from comment #7)
> Any reason that this fix cannot be merged?

Other stuff was higher on the list.
Thanks, was concerned that it was something else I needed to do :)
