Our development team has determined that the classpath containers can be a very 
useful feature for our component.  In it's current form, however, we are 
somewhat limited in what we can do.  The following items will have a big impact 
into whether we can use this framework:

1)  Getting to the containers is somewhat hidden, because you have to go through 
the advanced... option on the build path page.  Might be more intuitive if you 
have an "Add Container..." action, just like "Add Variable...".

2)  The user should be able to see what the Container resolves to.  One 
possibilty would be to present the list labeled "JARs and class folder on the 
build path:" as a table tree instead of a flat list.  The container could be an 
expandable node in the tree.

3)  Along the line of 2), if you have an entry on the build path that collides 
with one of the entries in the container, you get a wizard banner error that 
says "Naming collision."  This message should have info about what name 
collides, so the user will know how to correct it.

4)  Right now, to expose a classpath container that the user can see, a plugin 
must contribute a wizard page.  Suppose, however, that we don't need a page.  
We'd like to have a static classpath container that will appear in the drop down 
list of available containers, but not launch a wizard on selection of that 
container, but rather just add that container to the build path.

5)  Need to be able to specify a list of classpath containers and/or classpath 
variables to add by default on new project creation.

6)  Need to be able to create user modified classpath containers that can be 
imported and exported.

With this enhancements we see a lot of possibilites of how this framework can be 
used.  Thanks for your time and consideration.

Our development team has determined that the classpath containers can be a very 
useful feature for our component.  In it's current form, however, we are 
somewhat limited in what we can do.  The following items will have a big impact 
into whether we can use this framework:

1)  Getting to the containers is somewhat hidden, because you have to go through 
the advanced... option on the build path page.  Might be more intuitive if you 
have an "Add Container..." action, just like "Add Variable...".

2)  The user should be able to see what the Container resolves to.  One 
possibilty would be to present the list labeled "JARs and class folder on the 
build path:" as a table tree instead of a flat list.  The container could be an 
expandable node in the tree.

3)  Along the line of 2), if you have an entry on the build path that collides 
with one of the entries in the container, you get a wizard banner error that 
says "Naming collision."  This message should have info about what name 
collides, so the user will know how to correct it.

4)  Right now, to expose a classpath container that the user can see, a plugin 
must contribute a wizard page.  Suppose, however, that we don't need a page.  
We'd like to have a static classpath container that will appear in the drop down 
list of available containers, but not launch a wizard on selection of that 
container, but rather just add that container to the build path.

5)  Need to be able to specify a list of classpath containers and/or classpath 
variables to add by default on new project creation.

6)  Need to be able to create user modified classpath containers that can be 
imported and exported.

With this enhancements we see a lot of possibilites of how this framework can be 
used.  Thanks for your time and consideration.
Also, if the classpath variable initializer is not used to populate the initial 
list of variables that are seen as available in the JDT tools, then we'd like to 
request a framework for that as well.  Currently we add our variables in our 
plugin startup, which can be non-deterministic if you use the Java tools before 
our plugin has started.
1)  UI issue. Indeed, the plan is for containers to be promoted first-class 
citizen. 

2) JDT/Core already provides API to do so. UI work.

3)  The JDT/Core exception provides this information in its message. UI work.

4)  Due to the very dynamic nature of CP containers, a unified UI may be hard 
to achieve. For instance, the name of the available containers cannot be 
predicted, since container initializers will choose to resolve name references 
to actual containers. We might want to add a new API on 
ClasspathContainerInitializer so as to query the names of the container it can 
handle, so that a UI could render them down the road. Likely it would answer a 
set of container paths.

5)  Sounds UI only.

6)  I have been asking for this since day 1 <g>

====
The second comment about variable initializers not used to retrieve the list of 
CP variables sounds like a duplicate of bug 20197. Ritchie can you confirm you 
are seeing the proper behavior in a 2.1 integration build (2.1-M2 would do it).

Moving to JDT/UI for additional comments.
Philippe is correct class path containers came in late before 2.0 and we did 
not want to fully expose them in the UI. Class path containers are generally 
useful and we are considering to provide more direct support for them in the 
UI. 

Questions:
* can you describe how you intend to use them in your component?

* there is the potential issue that a project cannot be built when the plugin 
contributing the classpathcontainer is not available. Is this an issue in your 
case?

1) we should promote Add Container... to the library tab. 

2) the idea was to change the libraries page from a list into a tree.
   The container's contents is shown as children of the container node, e.g.,
   + JRE_System Library
          d:\...\rt.jar
          d:\...\ext\jaws.jar
   Ideally the output page is also shown as a tree.

3) this is a bug, need to investigate where the information is lost

4) we should support class path containers without a wizard page. When there 
isn't one contributed we should just add the container without showing a dialog.

5) this is already possible: the new Java project creation wizard page provides 
API to set the initial contents of the build class path. 

6) the issue is how to share a user modifable container in the team. 
Import/export is problematic since the container will include absolute path 
names that are inherently non-sharable. The recommended alternative for user 
modifiable containers is to create a project that exports JAR. In this way you 
can use all the existing mechanism to make such a library sharable in a team.

We should do 1-4 for 2.1 (5 is already possible, and 6 has the same issue since 
day 1 <g>).

          
Thanks for the very fast responses!

Re:  can you describe how you intend to use them in your component?

We want to be able to provide a few predefined "profiles" or target runtimes 
against which to build a project.  This could be, for example, a particular 
version of a JRE plus several JARs specific to a particular app server.  We 
want to expose to the user an easy way to swap out profiles at development 
time, eg, I want to target server version 1.x, then I might want to rebuild and 
retest against server version 2.x.

We want for the user to be able to copy and extend these predefined profiles to 
add optional JARs that are not included by default.  Along these lines, and 
addressing your response to 6), this would be fully useful if a CPE container 
can contain entries that are CPE variables (a current limitation is that it 
cannot).  

Re: there is the potential issue that a project cannot be built when the plugin 
contributing the classpathcontainer is not available. Is this an issue in your 
case?
I think this is a fair assumption.  For us, the initializing plugin should 
always be available.

Re: 5) Yes, it is true you can alter the build path on Java project creation.  
But if several projects will be using the same profile, this is extra work on 
creation.  What we are interested in is the possibility of adding to the Java-
>New Project preference page.  There you can specify the JRE library.  It would 
be useful if you could also specify a profile, or list of containers and or 
variables that automatically are included.  

regarding 5.) You can do this already (2.0). Look at 

PreferenceConstants.NEWPROJECT_JRELIBRARY_LIST
&
PreferenceConstants.encodeJRELibrary
You can define a set of classpath entries and name them. By adding them to the 
jdt preference store they will appear in the 'New project' preference page as a 
choise for the JRE.

If you create a special kind of project, like Java web app project that needs a 
special setup, the recommended way is to have a own project creation wizard 
posibly with UI that e.g. lets the user choose a profile.

For the restriction that CPE variables cannot be used in containers best would 
be to write a bug report to javacore.
Tweaking the preference constant for the JRE library would work, but it is 
somewhat anti social when a plugin modifies the user preferences. 

I'd prefer a solution where the new project wizard allows the user to pick a 
particular profile. This is also the way that WSDD solves this problem.
With the rewrite of the build path page (in M4) all issues are solved with the 
exception of the possibility of having a container that doesn't need a UI. 

If you have projects that have a special set of containers by default on the 
classpath the recommended way is that you have your own project wizard (e.g. 
WSDD project), that can reuse our new Java project wizard page and fill it with 
default values. If you need a code example I posted one some time a go in the 
newsgroup. I can also send it to you directly.
closing as fixed.
Won't add the possibility to add a container without UI. We think that it even 
without anything to configure it should be a good idea to show some information.

