In the context of a research project, I want to display additional information
for test results in the JUnit GUI. However, the JUnit GUI classes are all
internal and all fields are private, so subclassing without modifications is
also no option. As a result, the GUI code currently can only be reused (by the
Eclipse rules) by duplicating it.

I chode to modify the original plugin to allow subclassing. For our project at
hand, we added additional tabs in the JUnit view. Therefore, the following
visibility changes were necessary:

JUnit Plugin (org.eclipse.jdt.junit), changes to the plugin:

visibility changes:

(add new tabs, remove old hierarchy view)
* made interface ITestRunView public
* changed TestRunnerViewPart.createTestRunViews from private to protected
* changed TestRunnerViewPart.aboutToLaunch from private to protected
* changed TestRunnerViewPart.createImage from protected to public
* changed TestRunnerViewPart.fTestRunViews from private to protected
* changes TestRunnerViewPart.createProgressCountPanel to protected
refactorings:
* added public method addTestRunView, refactoring addition of new tabs to JUnit view

(display number of requested tests)
* changed TestRunnerViewPart.fCounterPanel to protected
* changed TestRunnerViewPart.fProgressBar to protected
* changed TestRunnerViewPart.start to protected
* changed CounterPanel.fNumberOfRuns to protected

As the JUnit GUI framework is useful for other testing related projects as well,
I suggest making the GUI framework available and providing an extention point to
add new tabs to the GUI.

In the context of a research project, I want to display additional information
for test results in the JUnit GUI. However, the JUnit GUI classes are all
internal and all fields are private, so subclassing without modifications is
also no option. As a result, the GUI code currently can only be reused (by the
Eclipse rules) by duplicating it.

I chode to modify the original plugin to allow subclassing. For our project at
hand, we added additional tabs in the JUnit view. Therefore, the following
visibility changes were necessary:

JUnit Plugin (org.eclipse.jdt.junit), changes to the plugin:

visibility changes:

(add new tabs, remove old hierarchy view)
* made interface ITestRunView public
* changed TestRunnerViewPart.createTestRunViews from private to protected
* changed TestRunnerViewPart.aboutToLaunch from private to protected
* changed TestRunnerViewPart.createImage from protected to public
* changed TestRunnerViewPart.fTestRunViews from private to protected
* changes TestRunnerViewPart.createProgressCountPanel to protected
refactorings:
* added public method addTestRunView, refactoring addition of new tabs to JUnit view

(display number of requested tests)
* changed TestRunnerViewPart.fCounterPanel to protected
* changed TestRunnerViewPart.fProgressBar to protected
* changed TestRunnerViewPart.start to protected
* changed CounterPanel.fNumberOfRuns to protected

As the JUnit GUI framework is useful for other testing related projects as well,
I suggest making the GUI framework available and providing an extention point to
add new tabs to the GUI.
added an "internal" extension point to contribute tabs: 
org.eclipse.jdt.junit.internal-testRunTabs

The extension point is internal since we cannot make the related classed API 
at this point in time.

Visibility changes are done as well, but the hope is that they are not needed 
anymore.
