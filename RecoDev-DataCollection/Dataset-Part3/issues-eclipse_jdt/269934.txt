Build ID: M20090211-1700

Steps To Reproduce:
1. Open the java6processors workspace
2. Run as Eclipse, make a new project with a class:

package foo;
import org.example.java6processors.annotations.GenClass6;
import p2.AGen;
@GenClass6
public class Foo {
	AGen gen = new AGen();
}

3. See the NPE exceptions in the error log
4. Commenting out either the d.getEnclosedElements() or println(SuppressWarnings) makes the NPE go away

This creates a stack trace in the Problems tab:

Internal compiler error
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.visit(AnnotationDiscoveryVisitor.java:114)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:209)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1239)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:691)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundEnvImpl.<init>(RoundEnvImpl.java:56)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:148)
	at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:134)
	at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:794)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:423)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:363)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.compile(IncrementalImageBuilder.java:306)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:300)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.build(IncrementalImageBuilder.java:130)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildDeltas(JavaBuilder.java:265)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:193)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:633)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:170)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:201)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:253)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:256)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:309)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:341)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:140)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:238)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
	AGen.java	temp/bin/apt/p2	line 0	Java Problem

Build ID: M20090211-1700

Steps To Reproduce:
1. Open the java6processors workspace
2. Run as Eclipse, make a new project with a class:

package foo;
import org.example.java6processors.annotations.GenClass6;
import p2.AGen;
@GenClass6
public class Foo {
	AGen gen = new AGen();
}

3. See the NPE exceptions in the error log
4. Commenting out either the d.getEnclosedElements() or println(SuppressWarnings) makes the NPE go away

This creates a stack trace in the Problems tab:

Internal compiler error
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.visit(AnnotationDiscoveryVisitor.java:114)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:209)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1239)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:691)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundEnvImpl.<init>(RoundEnvImpl.java:56)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:148)
	at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:134)
	at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:794)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:423)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:363)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.compile(IncrementalImageBuilder.java:306)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:300)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.build(IncrementalImageBuilder.java:130)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildDeltas(JavaBuilder.java:265)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:193)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:633)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:170)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:201)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:253)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:256)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:309)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:341)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:140)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:238)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
	AGen.java	temp/bin/apt/p2	line 0	Java Problem
Created attachment 129801
GenClass6 processor tweaked to reproduce the bug
This may/may not be related to the "APT errors on a clean build" bug (263985)--this error happens on any save, not just on cleans, however, it only does so if Foo contains the "public AGen gen = new AGen();" line. Taking this line out makes the error go away.

I am able to repro this on 3.4.2 and 3.5M6.
Reassigning to core.  In the AnnotationDiscoveryVisitor#visit(MethodDeclaration methodDeclaration, ClassScope scope) method, we are being passed a MethodDeclaration that has non-null annotations, but null binding.

Its toString() reports:
public @SuppressWarnings("unchecked") java.util.List<String> foo() {
}

And its annotations array is:
[@SuppressWarnings("unchecked")]

But arguments and binding are null.

If this is an expected condition, please reassign to APT and I'll put in null checks.  It seems to me I should never see a declaration with a null binding?

Note that it is the generated file that is being traversed when the NPE happens.  Its CompilationUnit is:

package p2;
public class AGen {
  public AGen() {
  }
  public @SuppressWarnings("unchecked") java.util.List<String> foo() {
  }
}

which certainly seems innocent enough.
(In reply to comment #4)
> If this is an expected condition, please reassign to APT and I'll put in null
> checks.  It seems to me I should never see a declaration with a null binding?
I would say this is right. We don't expect to get null bindings.

I'll try to reproduce.
  public @SuppressWarnings("unchecked") java.util.List<String> foo() {
  }
should return a value.
This might explain the null binding.

I am still trying to reproduce the issue.
(In reply to comment #6)
>   public @SuppressWarnings("unchecked") java.util.List<String> foo() {
>   }
> should return a value.
> This might explain the null binding.

Walter might have just forgot a line (or else perhaps the CompilationUnit display abbreviates out the method contents), but the full source of AGen.java is:

package p2;
public class AGen {
	public AGen() {}
	@SuppressWarnings("unchecked")
	public java.util.List<String> foo() {
		return new java.util.ArrayList();
	}
}

So, it does have a "return new java.util.ArrayList"--in the AGen.java file at least.
(In reply to comment #7)
> So, it does have a "return new java.util.ArrayList"--in the AGen.java file at
> least.

Stephen is correct, that line is present.  Not sure how it got elided in the earlier comment.
I fixed the problem for generating the file without the package structure in batch mode.
Now the remaining issue is related to the fact that once the generated type exists before the code is compiled, it appears twice (once when the call to getEnclosedElements() on the current type forces the resolution of the field's type and once when the type is generated and resolved again).
The second resolution doesn't occur, but the generated unit is still sent to the apt visitor leading to the NPE.
Created attachment 130859
Proposed patch

Walter, let me know what you think of this patch.

The problem we seem to have is the first time the generated type does not exist yet, so we're creating a field whose type is a missing type.

Then the next incremental build, we find the field's type as a Binary type but it collides with the newly generated type - so it doesn't get processed.

I'm not sure whether we should make this case work (by detecting the collision & processing the generated type) or skip it (which is what this patch does).
Two comments on this test case:
1) This test case is producing an error on the first run (using Eclipse compiler or javac).
getEnclosedElements() is forcing the generated type to be resolved before it is defined.
2) The second run (the generated type is now on the classpath) is producing a different result with the Eclipse compiler and javac.
We end up with a NPE because we don't "resolve" again a type that already has a binding. When getEnclosedElements() is called, the generated type is retrieved from the classpath and when we generated it again and try to process its annotations, we don't resolve it again (seen as a duplicated type) and this is why we end up with the NPE.

Stephen, are you expecting that case to work ? I mean to compile successfully ?
(In reply to comment #11)
> Two comments on this test case:
> 1) This test case is producing an error on the first run (using Eclipse
> compiler or javac).
> getEnclosedElements() is forcing the generated type to be resolved before it is
> defined.

An error on the first round makes sense from both Eclipes and javac given that the class is not defined.

> 2) The second run (the generated type is now on the classpath) is producing a
> different result with the Eclipse compiler and javac.
> We end up with a NPE because we don't "resolve" again a type that already has a
> binding. When getEnclosedElements() is called, the generated type is retrieved
> from the classpath and when we generated it again and try to process its
> annotations, we don't resolve it again (seen as a duplicated type) and this is
> why we end up with the NPE.
> 
> Stephen, are you expecting that case to work ? I mean to compile successfully ?

Yeah--I think I follow the resolve/re-resolve problem as you described, but it is fairly unintuitive as an annotation processor user to have a generated class compile just fine without annotations but then cause the Eclipse compiler to NPE when annotations are added.

I could just not add the annotations, but they are pretty handy when the generated code has casts that you know are okay, but will show up as warnings without the SuppressWarnings. Warnings from generated code is something I'm trying hard to avoid.

Thanks for looking in to this; it sounds like you have a pretty good idea of what is going wrong.

Stephen & Walter, the problem I have with this case is 'why should this ever work?'

We know we need to prevent the NPE that happens on the second build (which the proposed patch does), but since we all agree that the first build with eclipse or javac is correctly reporting an error (that the generated type cannot be found).

Then what are we trying to do ?


It doesn't make sense that the first build reports the correct error, but then the next build IF stale & possibly incorrect .class files are 'available' sorta of works... that's wrong.

Even using javac, if you regenerate the type differently (say you change the value of a static constant each time you generate the type), then you'll NEVER correctly compile a reference to that constant since you will always see the 'old' value.

Needing 'old' .class files to exist from previous compiles is not a valid way to build a system.
(In reply to comment #13)

> We know we need to prevent the NPE that happens on the second build (which the
> proposed patch does), but since we all agree that the first build with eclipse
> or javac is correctly reporting an error (that the generated type cannot be
> found).

Oh..."build"? I was talking about "round", as in annotation processing round. It is correct for AGen to not show up in the first round of compiling, but then the processor runs, and in the second processor round (of the same build), AGen has now been generated and so exists.

> Needing 'old' .class files to exist from previous compiles is not a valid way
> to build a system.

I agree; I apologize, I must have communicated something wrong.

Re-wording my previous response, an error on the first "build" is not correct. The "AGen cannot be resolved to a type" is only valid for the first round of annotation processing; after the GenClass6 annotation processor causes AGen to be generated, and another same-build round of annotation processing happens, Foo should definitely compile with no errors. This is what javac does.

This specific "AGen cannot be resolved to a type" bug is reported here:

https://bugs.eclipse.org/bugs/show_bug.cgi?id=263985

That a NPE happens in the subsequent builds only if annotations are involved is what this bug is about. I was not sure if they were related to the same thing or not--given bug 263985 just results in a compile error, and this results in an Eclipse compiler NPE, I thought I should file this one as well. If they are the same bug, then I apologize.

Thanks.


(In reply to comment #13)
> Stephen & Walter, the problem I have with this case is 'why should this ever
> work?'

The case of forward references to generated types is one that javac supports but that has historically been awkward for us in the IDE.  We've advised people (e.g., in the Eclipsecon tutorials linked from the Eclipse APT web page) that the best practice is to avoid it, but I don't think we can just disallow it.  Javac spits out an error message along the way, but does ultimately produce a complete set of .class files, even when starting from a clean build.

The canonical use case for forward references is this:

@GenerateInterface("p.IFoo")
class Foo extends p.IFoo {
  @GenerateMethod
  @Override
  public String foo() {
    return "hello world";
  }
}

The idea here is that IFoo does not exist when Foo is first compiled; processing Foo will produce IFoo, including a declaration for foo().  One real-world place this use case shows up, if I recall, is in web services tooling, where the generated interface is in turn used to create a web service definition file, proxy object, etc.

The only thing different about the particular use case that Stephen is dealing with is that the generated file is itself annotated.  That's not strictly necessary in his case (though it is desirable); but in some cases, the generated file in turn needs to be processed so as to generate yet more generated types (e.g., proxy classes).  This is the reason for the otherwise-ungainly "rounding" mechanism called out in the APT spec.  It's also the reason we put so much work in the 3.4 dev cycle into coping gracefully in the presence of unresolved types.
Ok, I checked the behavior with javac.
javac reports a problem on the first annotation processing round, but it ends up producing a .class file for Foo.
The Eclipse compiler doesn't produce a .class file for Foo at all.

So we have a different behavior on the full build mode. This comes from the fact that we are "resolving" Foo on the first call to getEnclosedElements(). When we report this error, we tag Foo as being ignored for further investigation since it contains a problem.

If there is no call to d.getEnclosedElements(), we do produce the Foo.class file.
Ok - we understand now.

We'll see what we can come up with in the next couple days.
Created attachment 131178
First draft

Walter, please take a look.

The idea is to detect source type collisions, flush the known types and restart the compile loop with the generated source file in the initial set of types.

We ensure that the original set of types is not fed back to the annotation processor - just the newly generated ones.

Generating source types after the compiler has resolved the name can collide with a missing type or a binary type if a stale .class file is still around.
The description makes sense.  However, when I apply this patch to HEAD and try running Stephen's test processor, I'm still getting an NPE in AnnotationDiscoveryVisitor:

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.visit(AnnotationDiscoveryVisitor.java:118)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:207)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1261)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:678)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundEnvImpl.<init>(RoundEnvImpl.java:56)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:148)
	at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:134)
	at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:813)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:447)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:364)

and I'm also getting an error on the declaration of AGen, "the type AGen is already defined".

I haven't had time to dig into it yet, have blown all day and night debugging a non-Eclipse problem :-(
Created attachment 131328
Proposed patch

Ok try this one instead

thx
Last patch seems to work fine.
Note that the error is no longer reported. If the file ends up being compiled successfully, the call the getDeclaredElements() should not report an error as long as the type of the field is of the kind TypeKind.ERROR.

Walter, any thoughts on that?
With the updated patch there is no NPE.  In the IDE I still get a problem reported "AGen cannot be resolved to a type".  

In the case where the processor does not try to resolve the type (that is, where there is a forward reference to AGen but the processor's call to getEnclosedElements() is commented out), there is no problem reported.  I think this would be surprising to a user (or annotation processor dev).  So, I agree with Olivier, the field should be TypeKind.ERROR but there should not be a missing type problem reported.
Walter, I'm not getting a problem reported in the IDE.

What happens when you force a full build? Or do an incremental build?

Is the problem showing up in the editor & the problems view ?
When I do a clean (and thus full build), I have a problem reported in the Problems pane, and a corresponding red squiggle in the editor.  I have the editor open on the source file (Foo.java); the generated file, AGen, is not open.  There are no errors in the Error Log.

Editing Foo and waiting for reconcile, nothing changes.  Saving the edited Foo, the problem is cleared.

Doing another clean, the problem comes back.
I'm not getting that at all.

Have you changed the testcase ?
Processor class is unchanged from the sample attached to this bug.  Target code I'm processing is:

package foo;
import org.example.java6processors.annotations.GenClass6;
import p2.AGen;
@GenClass6
public class Foo {
       AGen gen = new AGen();
}

The problem is reported against the first 'AGen' token in line 6.
ok - now I see it


I was using this:

p2.AGen gen = new p2.AGen();
Created attachment 131451
Proposed patch

Last one ! ;)

This should work when there is an import statement for the generated type.


Walter - I think you still need the first patch for the visitor.

If a type already exists named AGen, then the annotation processor will blow up when we detect a legitimate collision case.
I tried applying the 2009/04/09 16:02 patch, along with the 2009/04/03 13:16 patch to the AnnotationDiscoveryVisitor, but I am still getting the same "AGen cannot be resolved to a type" error after a clean build.

I do not get the error if I use a fully qualified type name.  I do get it if I use an import.

Anything I can do to help debug?
Walter - Can you write some tests that fail for you with the 2 current patches ?

All the tests I try, work as expected.
Working on it.
(In reply to comment #31)
> Working on it.

Sorry for the delay - I've been trying to come up with a JDT core test that will repro the problem, but I haven't found a way to do that without dragging in all of APT anyway.  Next step is to try to write it in an APT test case.

Stephen, are you able to test Kent's patches?  Do they work for you?
Sorry - I guess I wasn't clear.

These patches only affect APT so I was looking for APT tests that prove they work or do not work.
Created attachment 132551
Failing test case

The attached patch to org.eclipse.jdt.apt.pluggable.tests fails for me, even with both of the currently proposed patches applied.

IMPORTANT: after applying this patch, run annotations.jardesc to regenerate the annotations jar.  It wouldn't hurt to do a clean build of the project, too.

There are some commented-out lines in the test that show the reported problem.  Note that a problem is reported after a full build but not after an incremental build.

This new test differs from a previous test in only two regards:
  1) The source type imports the generated type, rather than referencing it with a fully qualified name.
  2) An option is passed to the annotation processor causing it to call getEnclosedElements() on the source type, forcing resolution of the generated type before it exists.
Created attachment 132671
JDT Core patch

This one works for me, but 2 tests in FilerTests are not consistent on my machine.

testCreateSourceFile() & testCreateSourceFileWithGenReference() randomly complain about no compilation units being compiled during the incremental build call.

Even when I remove this patch, these 2 tests work sometimes but then fail the next run.

I assume I'm not set up correctly - Walter please verify this patch when you have a chance.
With that patch (2009-04-21) and the 4/3 patch to compiler.apt, the test case passes (repeatably), and it also works when I run the previously-failing processor manually.  So, I would support checking this in.  Kent, if you check in the JDT Core patch, you can assign the bug back to me and I'll check in the compiler.apt patch and the new test case.

I'm not sure why the other tests would be failing randomly.  That might be something we should take up in a separate bug?  Is there any possibility that it has to do with multithreading, I wonder?  I'm running on a single-processor, dual-core Pentium running Windows XP, and they pass reliably for me.  We have not seen failures in the nightly tests, though of course they only run once there.
*** Bug 263985 has been marked as a duplicate of this bug. ***
(In reply to comment #32)

> Stephen, are you able to test Kent's patches?  Do they work for you?

I tried to apply it to a nightly build I downloaded but could not get the build to successfully compile. I might have applied the patch wrong, but I was seeing 13,000 some compile errors, so I probably just had the environment setup wrong.

I'm excited to see the progress though. Can you let me know if/when it shows up in a nightly build? 


Created attachment 132829
Released JDT Core patch

Tweaked the patch just a bit to speed up the incremental case
Moving the bug back to APT so Walter can release the AnnotationDiscoveryVisitor
change & the new APT test
Checked in compiler.apt patch and test case.
I downloaded the I20090426 build and it is almost great. I'm seeing a few weird things. I'm not able to reproduce them in an example yet.

One is a NegativeArraySizeException on Compiler:798, top=16, bottom=19, so length=-3 and the "new CompilationUnitDeclaration[length]" call fails. The annotationProcessorStartIndex is 19.

What I'm doing to trigger this is: a clean build works great, but one dirty hack I use to force a "real clean" is to delete all of the files in bin/apt. My APT processor generates lots of classes, so it will detect existing classes it has already generated and stop. So, to get a real clean, I manually delete all of the files in bin/apt. The compiler immediately kicks in to re-generate them, but of the ~30 some classes I'm generating, one of them causes the compiler to do this NegativeArraySizeException.

I have not been able to figure out what is unique about this class--it should be like the others. I will keep looking in to it, but wanted to report what I've found so far.

I also have another "in the wild"/complex/not-really-reproducible project that is having APT issues, but I'm not seeing any explicit errors and am still tracking it down.
Created attachment 133383
screenshot of exception

I know a screenshot isn't very useful compared to a test case, but it's the best I can do for now.
Okay, so, if I delete bin/apt, the flow is:

* SourceTypeCollision happens, with 17 sourceUnits, so Compiler.annotationProcessorStartIndex is set to 17, and there are 14 new APT-generated classes, so combinedUnits=31
* Compiler.compile(combinedUnits):445 successfully completes...the SourceTypeCollision block itself is fine
* We return from AbstractImageBuilder.compile had did the original 17 non-APT sourceUnits
* IncrementalImageBuilder.build:136 calls addAffectedSourceFiles() which has 14 new APT-generated classes in the simpleSet argument
* We get back to IncrementalImageBuilder:134 and call compile() with the 15 new APT-generated allSourceFiles
* We go back into Compiler.compile:414, but with 15 sourceUnits, and the annotationProcessorStartIndex has not been reset back to 0, it is still 17 from the last compile call.

So it just looks like annotationProcessorStartIndex needs to be reset somewhere, or else the 2nd entry into compile with the 15 allSourceFiles (which were all APT-generated classes) should not be happening again.

Ah ha, I can reproduce it. The trick is to have more original source units than generated units. E.g. I had 1 real Foo and 1 generated AGen and it works fine. But if I have 2 real classes, Foo and CopyOfFoo, and still just 1 generated AGen, then the NegativeArraySizeException happens. But I still have to manually delete the bin/apt output--doing a clean build works just fine.

So, I'm probably doing something I'm not supposed to by manually deleting the bin/apt output and causing the compiler to do a double-compile something that it does not normally bother with during a clean build.

I'm not sure how APT works, but it looks like when I delete the bin/apt output, it is doing an immediate recompile of any classes I had listed as dependents of the generated output. That is my guess at least. Which is cool and expected, but it seems to trigger this double-compile scenario.

Thanks.


Stephen - you're amazing
Created attachment 133395
Proposed patch

Additional patch to reset annotationProcessorStartIndex to 0
Latest fix released for 3.5M7
(In reply to comment #47)
> Latest fix released for 3.5M7
> 

Sweet, thanks for the quick fix. Getting it into M7 is great--I some Mac friends who due to 32-bit vs. 64-bit JDK/SWT issues are waiting for a good 64-bit 3.5 release to do APT stuff.
(In reply to comment #44)
> So, I'm probably doing something I'm not supposed to by manually deleting the
> bin/apt output 

I'm delighted you were able to find this and Kent was able to turn around a fix so fast!

ISTR that we went through a bunch of headaches a few years ago, dealing with concurrency issues around deleting or renaming the generated source folder.  I put considerable time into cleaning up the code that manages that, but it wouldn't surprise me if other issues were lurking there.  So, be forewarned that doing a "manual clean" this way is not really a supported scenario, although I'm always glad to have bugs reported.  

Cleaning the project, however, should delete all the generated files; if that is not working for you it is definitely a bug and should be reported.
