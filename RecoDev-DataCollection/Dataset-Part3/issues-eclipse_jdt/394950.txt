Steps to reproduce:
1. Invoke "Infer Generic Type Arguments" on the class below
2. There is an exception thrown ("AssertionFailedException") during check of final conditions

class InferGenericTypeArgumentsBug1 {
    public int[] data;
}


Few lines from .log file:
org.eclipse.core.runtime.AssertionFailedException: null argument:
 at org.eclipse.core.runtime.Assert.isNotNull(Assert.java:85)
 at org.eclipse.core.runtime.Assert.isNotNull(Assert.java:73)
 at org.eclipse.jdt.internal.corext.refactoring.typeconstraints.typesets.SubTypesOfSingleton.<init>(SubTypesOfSingleton.java:29)
 ...

Steps to reproduce:
1. Invoke "Infer Generic Type Arguments" on the class below
2. There is an exception thrown ("AssertionFailedException") during check of final conditions

class InferGenericTypeArgumentsBug1 {
    public int[] data;
}


Few lines from .log file:
org.eclipse.core.runtime.AssertionFailedException: null argument:
 at org.eclipse.core.runtime.Assert.isNotNull(Assert.java:85)
 at org.eclipse.core.runtime.Assert.isNotNull(Assert.java:73)
 at org.eclipse.jdt.internal.corext.refactoring.typeconstraints.typesets.SubTypesOfSingleton.<init>(SubTypesOfSingleton.java:29)
 ...
Can reproduce using eclipse-SDK-N20121121-2000-64.

Full trace:

org.eclipse.core.runtime.AssertionFailedException: null argument:
	at org.eclipse.core.runtime.Assert.isNotNull(Assert.java:85)
	at org.eclipse.core.runtime.Assert.isNotNull(Assert.java:73)
	at org.eclipse.jdt.internal.corext.refactoring.typeconstraints.typesets.SubTypesOfSingleton.<init>(SubTypesOfSingleton.java:29)
	at org.eclipse.jdt.internal.corext.refactoring.typeconstraints.typesets.TypeUniverseSet.<init>(TypeUniverseSet.java:18)
	at org.eclipse.jdt.internal.corext.refactoring.typeconstraints.typesets.TypeSetEnvironment.<init>(TypeSetEnvironment.java:38)
	at org.eclipse.jdt.internal.corext.refactoring.generics.InferTypeArgumentsConstraintsSolver.solveConstraints(InferTypeArgumentsConstraintsSolver.java:88)
	at org.eclipse.jdt.internal.corext.refactoring.generics.InferTypeArgumentsRefactoring.checkFinalConditions(InferTypeArgumentsRefactoring.java:240)
	at org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run(CheckConditionsOperation.java:85)
	at org.eclipse.ltk.core.refactoring.CreateChangeOperation.run(CreateChangeOperation.java:121)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2347)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Corner case that doesn't happen in practice.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=5add29df3b510f96135f884edcde770639e21b03
I fully agree that one would not invoke "Infer Generic Type Arguments" on the example from the bug report.  However, I belive it is common in practice to have a class that has a field of array type and a field of collection type, e.g., Set.  Therefore it would not be hard to find an example in practice to reproduce the exception.

Thanks a lot for the fix!
The corner case is that the primitive type array must be the very first class type that is processed by the entire refactoring. E.g. adding "extends Object" to the class declaration is already enough to fix the problem.

But you're right that it can actually happen.
