// --
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.function.Supplier;

public class X<S, T extends Deque<S>> {
    private final Supplier<T> supplier;

    public X(Supplier<T> supplier) {
        this.supplier = supplier;
    }
    
    public static <S> X<S, Deque<S>> newDefaultMap(int dequeCapacity) {
        return new X<>(() -> new ArrayDeque<>(dequeCapacity));
    }
}

triggers an error: "Cannot infer type arguments for X<>"

This code used to work earlier I believe.

// --
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.function.Supplier;

public class X<S, T extends Deque<S>> {
    private final Supplier<T> supplier;

    public X(Supplier<T> supplier) {
        this.supplier = supplier;
    }
    
    public static <S> X<S, Deque<S>> newDefaultMap(int dequeCapacity) {
        return new X<>(() -> new ArrayDeque<>(dequeCapacity));
    }
}

triggers an error: "Cannot infer type arguments for X<>"

This code used to work earlier I believe.
Martin, thanks for the test case, we will take a look.
Perhaps a duplicate of bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=424205
Three parts to the solution:

In IC18.inferInvocationType(BoundSet..) we call resolve() before all constraints have been incorporated. Hence we inferred some types to Object although better information was already waiting in some existing (but not-incorporated) constraints/bounds. Calling incorporate() before resolve() fixes this.

Next we got an error against variable 'dequeCapacity'. Problem was: this SNR was resolved twice, second attempt signalled the bogus error. For now I've inserted one more call to unresolve() and raised bug 426996 as a reminder that we'd actually love to get rid of that method.

During experiments I observed an NPE because the inner AE.binding was null - due to compile error, but inference didn't know about that error (it was ignored because we're working with a lambda copy) and needed to access that binding. I'm now assuming that a null binding doesn't require adding new constraints, the root error will be reported later.

Three new tests plus the above fixes released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=5dbd397b4fc5184876eeebb1e1ea9235db66fa0e
