There is a MS IE-based popup dialog had been introduced since 3.1M5. There is a
huge performance degradation in this new implementation. Old popup based on a
plain text widget was much more responsible.

Also see related bug #85905 about feature regression in a new dialog on Windows.
It does not allow keyboard text selection and copy.

There is a MS IE-based popup dialog had been introduced since 3.1M5. There is a
huge performance degradation in this new implementation. Old popup based on a
plain text widget was much more responsible.

Also see related bug #85905 about feature regression in a new dialog on Windows.
It does not allow keyboard text selection and copy.
Is there anything JDT Text can do to make the Browser widget appear faster?
By the way, what was the reason to replace nicely working feature with IE
widget? I believe that such heavy piece UI more appropriate to something like
JavaDoc view or even help view instroduced in 3.1M5 that could have option to
keep in sync with editor context. 

From user point of view, IDE should be very responsible on keyboard actions in
all editors. This popup is one of the most often used actions and any dlays
significantly reduce productivity.
The text-based stuff can only a very small subset of HTML which can be used
inside Javadoc. Just look at some more complex Javadoc and you'll immediately
see the benefit (example: java.util.regex.Pattern).

What machine/setup do you have. The performance on my machine is OK.
I have P4 2.4Gz with 1Gb memory. However my workspace has over 50 projects.

I'm still not quite convinced that rich html widget is necessary for quick
javadoc popup. In my view "quick" is a most important point here and for
_exceptional_ cases such as Pattern you can always open help or JavaDoc view
(btw, keyboard shortcut to activate JavaDoc view would be handy). 

In majority of cases you can render table content as a simple list (show all
columns from the same row as a list element), so even javadoc for Pattern will
be readable.

I can also see some correlation between this issue and bug 85914.
Assigning to Christophe to see if he can help make this case faster.  However, 
the issue of using Browser versus using some kind of text widget is not an SWT 
decision.  Daniel will have to pursue that discussion with Eugene.
>I can also see some correlation between this issue and bug 85914.
I don't: this PR here is about performance and the other one about what's being
shown when pressing F2.

>over 50 projects.
The number of projects is not relevant for the performance of the Browser vs.
the StyledText solution. On my machine (P4, 2GHz, 1G RAM) it takes less than a
second to open the Browser widget. Only the very first time it takes a bit longer.
I hope that you are not going to use IE-based component to show error details in
combined hower. That is why I mentioned bug 85914 here.

Speaking about performance, if you push F2 multiple times on the same place over
and over again it is quiet fast, but it is not the common use case when you
actually working. :-)

More representable test will be to compare latency of UI between JavaDoc and
error details popups (you can do this in 3.1M5). Even simple repeated test shows
easily noticeable difference. When typing in editor it is very very important to
have responsible UI and even 0.5 sec makes huge sense.

Moreover if you add inability to select text without mouse it makes even less
sense for me to use this component for this feature.

>Speaking about performance, if you push F2 multiple times on the same place over
>and over again it is quiet fast, but it is not the common use case when you
>actually working. :-)
That wasn't my test case: for me the very first time it's slow but afterwards
it's less than a second no matter in which editor or where I do this.

Hmm. As I already mentioned, I'm noticing quite of difference since M5 build and
it perform even worse when I have some background tasks running (e.g. search,
synchronize or build). Few times I even saw "Action Cancelled" text in this
window (I'm not kidding!), which had been replaced by javadoc few moments later.
Eugene:

> even saw "Action Cancelled"
Yes. I'd like to get rid of that one. Noted.

Can you run the following SWT snippet on your Eclipse? Click on the button 
about 3 times and paste back the results displayed to the Console. To run, add 
it to a java project in your workspace. Add the swt.jar to your project 
classpath (java build path > add external jar> 
plugins/org.eclipse.swt_win32_1.0.0/ws/win32/swt.jar . Then select snippet and 
 Run as > SWT application.

On my machine, the first instance takes about half a second. I'd like to know 
if for you it is way slower than that or not.

import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.browser.*;

public class PR {

	static long start, end, start2, end2;
	public static void main(String[] args) {
		Display display = new Display();
		final Shell shell = new Shell(display);
		shell.setLayout(new FillLayout());
		Button button = new Button(shell, SWT.PUSH);
		button.setText("press to bring up popup");
		button.addListener(SWT.Selection, new Listener() {
				public void handleEvent(Event e) {
					start  = System.currentTimeMillis();
					Shell shell2 = new Shell(shell);
					shell2.setBounds(10,10,200,100);
					shell2.setLayout(new FillLayout());
					start2 = System.currentTimeMillis();
					Browser browser = new Browser(shell2, 
SWT.NONE);
					browser.addProgressListener(new 
ProgressListener() {
						public void changed
(ProgressEvent event) {	
						}
						public void completed
(ProgressEvent event) {
							end2 = 
System.currentTimeMillis();
							System.out.println
("Visible time (ms) "+ (end - start));
							System.out.println
("Rendered time (ms) "+(end2 - start));
							System.out.println
("Browser time (ms) "+(end2 - start2));
						}
					});
					browser.setText
("<html><body><li>That's some content.</li><p>and some other</p><li>That's 
some content.</li><p>and some other</p><li>That's some content.</li><p>and 
some other</p></body></html>");
					shell2.open();
					end = System.currentTimeMillis();
				}
		});
		shell.setText("PR");
		shell.open();
		
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}		
	}
}
(In reply to comment #10)
> Eugene:
> 
> > even saw "Action Cancelled"
> Yes. I'd like to get rid of that one. Noted.
> 
> Can you run the following SWT snippet on your Eclipse? Click on the button 
> about 3 times and paste back the results displayed to the Console. To run, add 
> it to a java project in your workspace. Add the swt.jar to your project 
> classpath (java build path > add external jar> 
> plugins/org.eclipse.swt_win32_1.0.0/ws/win32/swt.jar . Then select snippet and 
>  Run as > SWT application.
> 
> On my machine, the first instance takes about half a second. I'd like to know 
> if for you it is way slower than that or not.

This is for my home PC (Pentium M 1.6Gz, 512Mb). I'll check how it perform at
work tomorrow.

Visible time (ms) 451
Rendered time (ms) 481
Browser time (ms) 471
Visible time (ms) 150
Rendered time (ms) 270
Browser time (ms) 270
Visible time (ms) 130
Rendered time (ms) 250
Browser time (ms) 250

By the way, there is another good stress test. Find a spot with some error in
Java editor (or create one) and then push F2 and ESC as quick as possible, then
try to repeat the same with quick javadoc popup. On my machine in second test
popup window appear slower and also its content almost always stay empty.
By the way, have you tried to use Swing html widget? 

If I'm not mistaken Eclipse have decent SWT/AWT bridge and performance of Swing
component could be better then IE.
Daniel: yes, one way to improve your Browser based implementation is to cache 
the Shell and the Browser used in the F2 popup - instead of recreating them 
every time as I assume you do now.

That approach is used with the CTabFolder (hover over a java editor tab item 
and see the tooltip). The tooltip in the CTabfolder is a Shell that's simply 
shown and hidden on demand, not recreated every time.
Here are some measurements I did to backup the 'reuse the Shell and Browser' 
approach.

1. Shows at least half of the popup creation/rendering time is spent inside 
the Browser widget constructor (Total time versus Browser Creation time)

Creation time (ms) 250
Total time (ms) 500

Creation time (ms) 94
Total time (ms) 157

import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.browser.*;

public class PR {

	static long start, end, start2, end2, start3;
	public static void main(String[] args) {
		Display display = new Display();
		final Shell shell = new Shell(display);
		shell.setLayout(new FillLayout());
		Button button = new Button(shell, SWT.PUSH);
		button.setText("press to bring up popup");
		button.addListener(SWT.Selection, new Listener() {
				public void handleEvent(Event e) {
					start  = System.currentTimeMillis();
					Shell shell2 = new Shell(shell);
					shell2.setBounds(10,10,200,100);
					shell2.setLayout(new FillLayout());
					start2 = System.currentTimeMillis();
					Browser browser = new Browser(shell2, 
SWT.NONE);
					start3 = System.currentTimeMillis();
					browser.addProgressListener(new 
ProgressListener() {
						public void changed
(ProgressEvent event) {	
						}
						public void completed
(ProgressEvent event) {
							end2 = 
System.currentTimeMillis();
							System.out.println
("Creation time (ms) "+ (start3 - start2));
							System.out.println
("Visible time (ms) "+ (end - start));
							System.out.println
("Rendered time (ms) "+(end2 - start));
							System.out.println
("Browser time (ms) "+(end2 - start2));
						}
					});
					browser.setText
("<html><body><li>That's some content.</li><p>and some other</p><li>That's 
some content.</li><p>and some other</p><li>That's some content.</li><p>and 
some other</p></body></html>");
					shell2.open();
					end = System.currentTimeMillis();
				}
		});
		shell.setText("PR");
		shell.open();
		
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}		
	}
}


2. Time spent updating content in the Browser already created and visible

Rendered time (ms) 235 (1st time)
Rendered time (ms) 31  (subsequent times)


import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.browser.*;

public class PR {

	static long start, end, start2, end2;
	static int cnt = 0;
	public static void main(String[] args) {
		Display display = new Display();
		final Shell shell = new Shell(display);
		shell.setLayout(new FillLayout());
		
		final Shell popup = new Shell(shell, SWT.NONE);
		popup.setBounds(10,10,200,100);
		popup.setLayout(new FillLayout());
		final Browser browser = new Browser(popup, SWT.NONE);
		browser.addProgressListener(new ProgressListener() {
			public void changed(ProgressEvent event) {	
			}
			public void completed(ProgressEvent event) {
				end2 = System.currentTimeMillis();
				System.out.println("Visible time (ms) "+ (end -
 start));
				System.out.println("Rendered time (ms) "+
(end2 - start));
			}
		});
		
		Button button = new Button(shell, SWT.PUSH);
		button.setText("press to bring up popup");
		button.addListener(SWT.Selection, new Listener() {
				public void handleEvent(Event e) {
					start  = System.currentTimeMillis();
					browser.setText
("<html><body><li>That's some content "+(cnt++)+"</li><p>and some 
other</p><li>That's some content.</li><p>and some other</p><li>That's some 
content.</li><p>and some other</p></body></html>");
					popup.open();
					end = System.currentTimeMillis();
				}
		});
		shell.setText("PR");
		shell.open();
		
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}		
	}
}
3. StyledText versus Browser

a. Creation time of Browser always costs something - whereas the StyledText 
one goes below the resolution of the ms counter. So it confirms if performance 
under 100ms is important in a use case, Browser should be cached.

Creation time for StyledText / Browser (ms)
156 / 265
0 / 78
0 / 93
0 / 62
0 / 62

b. setText is asynchroneous for both StyledText and Browser (both will draw 
it 'later'). Here's the time of the setText itself. No major difference in 
this context. That's not a real life snippet though, we'd need an emulated 
HTML StyledText to compare...

StyledText / Browser
47 / 188
15 / 16
47 / 16
15 / 32
15 / 16


Snippet (comment the lines for Browser or StyledText appropriately)

import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.browser.*;
import org.eclipse.swt.custom.*;

public class PR {

	static long start, end, start2, end2, startCreate, endCreate;
	public static void main(String[] args) {
		Display display = new Display();
		final Shell shell = new Shell(display);
		shell.setLayout(new FillLayout());
		Button button = new Button(shell, SWT.PUSH);
		button.setText("press to bring up popup");
		button.addListener(SWT.Selection, new Listener() {
				public void handleEvent(Event e) {
					start  = System.currentTimeMillis();
					Shell shell2 = new Shell(shell);
					shell2.setBounds(10,10,200,100);
					shell2.setLayout(new FillLayout());
					startCreate = System.currentTimeMillis
();
					Browser browser = new Browser(shell2, 
SWT.NONE);
					//StyledText text = new StyledText
(shell2, SWT.NONE);
					endCreate = System.currentTimeMillis();
					start2 = System.currentTimeMillis();
					//text.setText("<html><body><li>That's 
some content.</li><p>and some other</p><li>That's some content.</li><p>and 
some other</p><li>That's some content.</li><p>and some 
other</p></body></html>");
					browser.setText
("<html><body><li>That's some content.</li><p>and some other</p><li>That's 
some content.</li><p>and some other</p><li>That's some content.</li><p>and 
some other</p></body></html>");
					shell2.open();
					end = System.currentTimeMillis();
					
					System.out.println("Creation time 
(ms) "+ (endCreate - startCreate));
					System.out.println("setText time 
(ms) "+ (end - start2));

				}
		});
		shell.setText("PR");
		shell.open();
		
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}		
	}
}
Daniel: the important part is in comment 13. Should I move back the bug to you 
to implement the caching suggestion?

We'll keep looking for ways to improve creation time and startup but we're 
mostly simply calling the native engine and unless we find magic OS flags to 
get that done 'faster', don't see what can be done at our level at the moment.
Good summary Christophe! My only concern is that there is no objective way to
compare rendering performance for html and text widgets.

I also wonder (even it is not part of this issue) how are you planning to
resolve problems with text selection?
You can move back the bug to me if you want.
Adapting summary to reflect what's been discussed.
Regarding comment 9 'navigation cancelled' page: this is believed to be fixed 
with bug 86741 (v>20050414, next week's integration build)
Any update for this issue? I've tried eclipse-N20050428-0010 build for win32 and
this feature subjectively even slover (especially if the whole workspace rebuild
is running).
Is this going to be fixed for 3.1 release? 

I believe it is a huge regression in functionality since M5 and because it
wasn't fixed for 2 months since report, I suspect that new approach is not that
flexible to be used for replacing existing functionality that was working better. 

This is an opinion of Java developer who have been using Eclipse over 3 years
and very unsatisfied with this regression change.
This won't happen for 3.1.
Fixed in HEAD.
Available in builds > N20060314-0010.

