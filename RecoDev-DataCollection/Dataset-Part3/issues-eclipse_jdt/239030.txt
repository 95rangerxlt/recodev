I20080624-0800

Mark occurrences misses some exit points for break statements with a label argument. It even highlights the wrong closing brace if you select 'break stay;' here:

	public static void main(String[] args) {
		stay: if (true) {
			for (int i= 0; i < 5; i++) {
				System.out.println(i);
				if (i == 3)
					break stay;
			}
			System.out.println("after loop");
			return;
		}
		System.out.println("Stayed!");
	}

The problem is that BreakContinueTargetFinder#getLocationForClosingBrace(ASTNode) tries to be too smart in getOptionalBlock(..).

I think the best solution would be to change getLocationForClosingBrace(..) to just use the targetNode as maybeBlock. This would just select the last character of the target node. In rare cases (e.g. a 'do{}while();' loop), this would not select a '}' but the terminating ';' of the labeled statement (which is even better, IMO).

I20080624-0800

Mark occurrences misses some exit points for break statements with a label argument. It even highlights the wrong closing brace if you select 'break stay;' here:

	public static void main(String[] args) {
		stay: if (true) {
			for (int i= 0; i < 5; i++) {
				System.out.println(i);
				if (i == 3)
					break stay;
			}
			System.out.println("after loop");
			return;
		}
		System.out.println("Stayed!");
	}

The problem is that BreakContinueTargetFinder#getLocationForClosingBrace(ASTNode) tries to be too smart in getOptionalBlock(..).

I think the best solution would be to change getLocationForClosingBrace(..) to just use the targetNode as maybeBlock. This would just select the last character of the target node. In rare cases (e.g. a 'do{}while();' loop), this would not select a '}' but the terminating ';' of the labeled statement (which is even better, IMO).
Fixed in HEAD.
Available in builds > N20080630-2000.
