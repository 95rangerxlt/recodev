3.0 M4

After editing for a while, the text hovers won't appear any longer. Other hovers
still work (annotation, overview), and other editors are not affected. Closing
and reopening fixes the problem.

There is an exception on stdout / stderr, but not logged:

java.lang.InterruptedException
        at
org.eclipse.jdt.internal.codeassist.SelectionEngine.<init>(SelectionEngine.java:125)
        at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:168)
        at
org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:272)
        at
org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:266)
        at
org.eclipse.jdt.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getHoverInfo(Unknown
Source)
        at
org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo(Unknown
Source)
        at
org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo(Unknown
Source)
        at
org.eclipse.jface.text.TextViewerHoverManager$2.run(TextViewerHoverManager.java:119)

3.0 M4

After editing for a while, the text hovers won't appear any longer. Other hovers
still work (annotation, overview), and other editors are not affected. Closing
and reopening fixes the problem.

There is an exception on stdout / stderr, but not logged:

java.lang.InterruptedException
        at
org.eclipse.jdt.internal.codeassist.SelectionEngine.<init>(SelectionEngine.java:125)
        at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:168)
        at
org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:272)
        at
org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:266)
        at
org.eclipse.jdt.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getHoverInfo(Unknown
Source)
        at
org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo(Unknown
Source)
        at
org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo(Unknown
Source)
        at
org.eclipse.jface.text.TextViewerHoverManager$2.run(TextViewerHoverManager.java:119)
InterruptedException happens in J Core land but ICodeAssist.codeSelect does not
specify to throw an InterruptedException.
This isn't sent by JDT Core, but rather by thread support:

 * Thrown when a thread is waiting, sleeping, or otherwise paused for
 * a long time and another thread interrupts it using the
 * <code>interrupt</code>  method in class <code>Thread</code>. 

Back to UI.
Philippe, to me this looks like a bug in the VM, stack trace or maybe compiler:
we don't have any wait, sleep, join or similar in our code and since
InterruptedException is a checked exception we cannot catch it, right.

Can you comment what you think of that bug.
This cannot come from JDT Core but by the thread in which this action is being 
performed. The hovering mechanism is playing in the background, so there may 
reside the issue. Aren't you creating a thread/job ?
We are creating a thread. That's right. However, as Dani points out, there are 
no waits, joins, or sleeps in the code the thread executes. We just start the 
thread and let it run until it has ended. This means we don't have a chance to 
catch the InterruptedException. If we would try, we would get a compilation 
error.
Right, but this exception comes from the threading support, not from JDT Core. 
Someone is basically attempting to interrupt the thread activity. This cannot 
come from JDT Core.
I agree with you I just thought you might give more insight to the problem itself. 
From Javadoc and lang spec it is not clear why I should get a checked
InterruptedExcpetion if it is not declared, is it?

We think this is a VM bug. We now protected the hover code to heal itself in
such a case i.e. hover support will continue to work for that editor.

Isn't the hovering auto-cancelling if the user starts typing again ?
Yes, we send interrupt() to the thread but this does not explain why a checked
exception is thrown by methods which don't declare it. Lower level methods which
declare to throw InterruptedException could/should check the interrupted flag
and then throw the exception, right?
