N20120217-2000

I cannot resume a single thread in a Remote Java Application launch configuration.

I remote-debugged my workspace to investigate bug 361758, and then suspended the VM. Then I wanted to resume a single thread, but when I selected it and performed Resume (F8), the whole VM resumed, instead of only the the selected thread.

I haven't checked, but I'm pretty sure this once used to work.

Workaround is to select all threads (but not the VM) and then click Suspend. Drawback: It's tedious, and all threads end up expanded in the Debug view.

N20120217-2000

I cannot resume a single thread in a Remote Java Application launch configuration.

I remote-debugged my workspace to investigate bug 361758, and then suspended the VM. Then I wanted to resume a single thread, but when I selected it and performed Resume (F8), the whole VM resumed, instead of only the the selected thread.

I haven't checked, but I'm pretty sure this once used to work.

Workaround is to select all threads (but not the VM) and then click Suspend. Drawback: It's tedious, and all threads end up expanded in the Debug view.
(In reply to comment #0)
> N20120217-2000
> 
> I cannot resume a single thread in a Remote Java Application launch
> configuration.
> 
> I remote-debugged my workspace to investigate bug 361758, and then suspended
> the VM. Then I wanted to resume a single thread, but when I selected it and
> performed Resume (F8), the whole VM resumed, instead of only the the selected
> thread.
> 
> I haven't checked, but I'm pretty sure this once used to work.
> 
> Workaround is to select all threads (but not the VM) and then click Suspend.
> Drawback: It's tedious, and all threads end up expanded in the Debug view.

You either have an incredible memory, or you don't remote debug very often - bug 37314 introduced the change to resume the VM if the VM is suspended (back in 3.0).

The relevant code in JDIThread:

public synchronized void resume() throws DebugException {
 if (getDebugTarget().isSuspended()) {
  getDebugTarget().resume();
} else {
  fClientSuspendRequest = false;
  resumeThread(true);
}
}

What would you propose we do here Markus? If you want back the ability to resume a single thread we would, in effect, revert 37314. Perhaps a preference while debugging would suffice, and by default we retain the current behavior?
> You either have an incredible memory, or you don't remote debug very often

Rather the latter ;-)

The JDI protocol actually makes a difference between suspending all threads and suspending the whole VM. The latter operation also suspends the starting of new threads.

I think the user should have full access to the JDI APIs. If you just revert http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=e9bb2ad9918f6876ec8853aeaa40e8fa9697c111 , then I still can't resume a single thread after suspending the whole VM.

A preference would be overkill here. The Suspend/Resume actions should just target the selected element in the Debug view. As an added feature, Suspend/Resume could operate on the whole VM or on all threads if the selected element is not a valid target for the operation any more.

E.g. when the VM is suspended, Resume on a thread could first resume the thread, and then still stay active. When invoked on a running thread, it would resume the whole VM. That way, both workflows are easily possible.
Likewise, Suspend on the VM should fall back to suspending all threads, if the VM is already suspended.
Created attachment 213814
fix

implements comment 2
Here's the test class I used to play around with this:

package xy;

public class Try {
    public static void main(String[] args) {
        for (int i= 0; i < 4; i++) {
            Thread thread= new Thread("Try-" + i) {
                @Override
                public void run() {
                    while (true) {
                        long now= System.currentTimeMillis();
                        System.out.println(now + ": " + getName());
                        try {
                            Thread.sleep((long) (Math.random() * 5000));
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            };
            thread.start();
        }
    }
}
The fix looks good and works nicely. All tests pass.
Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=37bafda5d7d586d8f0104a437c3f7725e81010f5
*** Bug 86687 has been marked as a duplicate of this bug. ***
