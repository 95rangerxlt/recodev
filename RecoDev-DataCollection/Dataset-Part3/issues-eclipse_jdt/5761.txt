the Organize-Imports feature seems to be quite broken. One thing, is that it 
continually tries to Import local Variables (not Classes!). Try Shift-Ctrl-O 
with the following Class:

public class TestMe {
        public void justATest()
        {
                Object o;
                o = null;
        }
}

A Dialog will pop up to ask you which Class o should be imported (to my 
surprise there are 2 classes called "o". One seems to be in the internal 
implementation of JMF, another one in the Crypto-API).

Another time Organize Import simply removed all import (though the program 
definitly didn't compile without them). But I can't reproduce it and I 
assume it had to do with the fact, that the project was not a Java Project, 
but a "simple" Project.

the Organize-Imports feature seems to be quite broken. One thing, is that it 
continually tries to Import local Variables (not Classes!). Try Shift-Ctrl-O 
with the following Class:

public class TestMe {
        public void justATest()
        {
                Object o;
                o = null;
        }
}

A Dialog will pop up to ask you which Class o should be imported (to my 
surprise there are 2 classes called "o". One seems to be in the internal 
implementation of JMF, another one in the Crypto-API).

Another time Organize Import simply removed all import (though the program 
definitly didn't compile without them). But I can't reproduce it and I 
assume it had to do with the fact, that the project was not a Java Project, 
but a "simple" Project.
It seems that o is reported as unknown reference.
Could the SourceElementRequestor be more specific?
Cannot reproduce on this exact test case with 20011107. What else do I need ?
Without reproducing, but looking at the code, the assigned variable is answered 
as an unknown reference since it could either be a local variable or a field.

An unknown reference denotes { type | local variable | field }, or any subset 
of this list. In the particular case of this PR, it can be {local variable | 
field} and thus it is still tagged as unknown.

Would require an internal change to the ISourceElementRequestor.
*** Bug 6048 has been marked as a duplicate of this bug. ***
If performing the suggested change, we will likely break all dependents. Do you 
have any ?
In jdt.ui there only one other implementor, JavaParseTreeBuilder (java compare).
It does not care about the references, but implements the interface, so would 
have to be adapted.

I will suggest AW to change to the Adapter.


*** Bug 6129 has been marked as a duplicate of this bug. ***
*** Bug 7040 has been marked as a duplicate of this bug. ***
another example (reported in EC) is:

    private static final Token[] TOKEN_ARRAY =
        new Token[] {
           // ...
            TRANSIENT,
           // ...
    };
-> TRANSIENT is also reported as an unknown reference.

It is written:
> Another time Organize Import simply removed all import (though the program 
> definitly didn't compile without them). But I can't reproduce it and I 
> assume it had to do with the fact, that the project was not a Java Project, 
> but a "simple" Project.

I just encountered such a problem.  I'm running 20011219.

Repro steps:
1. Create a Java project called TestProject
2. Create a class Foo in TestProject (in the default package)
3. Create a package called bar in TestProject
4. Create a class Baz in package bar
5. Add a member variable "Foo m_foo;" to class Baz
6. At the top of Baz.java, add the line "import Foo;"
7. Save Baz.java (auto-compile happens OK)
8. Select Organize Imports

The line "import Foo;" is removed, even though it is needed in order to compile.

*** Bug 9090 has been marked as a duplicate of this bug. ***
*** Bug 9949 has been marked as a duplicate of this bug. ***
Please consider this one too:
http://bugs.eclipse.org/bugs/show_bug.cgi?id=6977
*** Bug 10228 has been marked as a duplicate of this bug. ***
additional problem: 

a class implements an interface, which defines a constant which happens to be 
the same name as a class in the classpath (all-caps).

organize imports always forces an import of this class even though the member 
variable with the given name exists already by virtue of the interface being 
implemented.


quoting from the news

>From: (Richard L. Kulp)
>Why isn't that check box turned on by default? It seems to be more of
>problem having it off by default than having it on.

In most cases class names length is >1. In case of obfuscated classes, it's 
afaik not very common to create new instances of such classes by hand. So +1.
I just had a case where Organize Imports ripped out all my imports and then
stopped working (as did Add Import), turning a previously valid file into one
with 44 errors. After I readded all the imports by hand, the file compiled
correctly, though Organize Imports continued not to work. I quit Eclipse and
re-launched, whereupon Organize Imports worked again.

I *think* what happened just before the errors appeared was I did an Organize
Imports and it seemed to want to import Position in a file that didn't use it,
and the dialog came up asking to choose between two implementations so I hit
Cancel in the dialog. Sounds like some others went through similiar scenarios.
Organize imports has been rewritten to use the new AST infrastructure.
This solves problems with adding unnessessary imports coming from variable 
names. With the same change, you can now organize imports over a whole 
package / multiple CUs.

There are still cases when imports to classes like 'e' are inserted:
Enumeration e;
e.next();
adds e, when Enumeration is not known. But as soon Enumeration has an import, 
resolving succeeds, and no import for e is generated.

released after 20020425
Comments, which have been placed between imports, will be imidiately deleted.
For example:

before OrganizeImports:
import javacard.framework.*;
import sim.access.*;
//~#if EMULATION
//~import java.io.*;
//~#elif TRACE
import com.orga.javacard.system.*;
import sim.toolkit.MEProfile;
//~#endif

after:
import javacard.framework.JCSystem;
import javacard.framework.Util;
import sim.access.SIMView;
import sim.toolkit.MEProfile;
//~#endif


yes, Organize import always removes all imports and calculates them new. 
Comments are removed too. Place your 'ifdef' imports above or below the 
regular imports.
> Place your 'ifdef' imports above or below the regular imports.

What does that mean? How are "regular" imports distinguished?
the range starting with the first import statement to the last statement is 
going to be completly replaced. So what I suggest is to put your ifdef imports 
either ahead or below, but not in between.
Still not clear. What is the "first import statement"? Starting from where? And
how is the "last" defined? Nothing will help if you reach inside the ifdefs
looking for first and last.
the first real, non commented import, and the last real, not commented import.
But I have to admit that this doesn't work for the ifdef-elif-endif case.

I don't see how organize imports could reorder imports and still keep the 
comments so that your code wouldn't be invalidated.

Then is there an option not to sort imports?
