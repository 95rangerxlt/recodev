The following class demonstrates how the Eclipse call heirarchy can't handle
Java 1.5 collections :-(. Bringing up the call heirarchy for either foo() or
poo() below won't work as expected.

public class Foo {

    public Collection<Integer> foo(Collection<Integer> f) {
        return poo(f);
    }

    public Collection<Integer> poo(Collection<Integer> f) {
        return foo(f);
    }
}

The following class demonstrates how the Eclipse call heirarchy can't handle
Java 1.5 collections :-(. Bringing up the call heirarchy for either foo() or
poo() below won't work as expected.

public class Foo {

    public Collection<Integer> foo(Collection<Integer> f) {
        return poo(f);
    }

    public Collection<Integer> poo(Collection<Integer> f) {
        return foo(f);
    }
}
The most recent version I've tested on is: 3.1M4 (200412162000)
This got fixed for the latest integration build.

Markus, just out of curiosity: do we do any erasure, equality search here.
Currently, we use R_ERASURE_MATCH to get as much as possible. I'll keep this bug
open as a reminder to recheck this when polymorphic search for method references
is fully implemented.

A test case which does not yet work properly:

class X<T> {
    public void generic(T t) {}
}
class Y extends X<Number> {
    public void generic(Number t) {}
}

class Z {
	void test(Number n) {
		new X<String>().generic("");
		new X<Integer>().generic(1);
		new Y().generic(12);
		new Y().generic(n);
	}
}
Marking as fixed, since the original bug from comment 0 is fixed.
The problem in comment 3 is bug 79990.
