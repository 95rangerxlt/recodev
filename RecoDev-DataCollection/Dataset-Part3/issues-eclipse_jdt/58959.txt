Let's take the "for - iterate over a collection" template.
Expanding it results in:
for (Iterator iter = theList.iterator(); iter.hasNext();) {
	type element = (type) iter.next();
	
}

With "iter" in the first line selected. The name "iter" doesn't fir with my
coding style (I prefix local variables with "the").
If I press ctrl+space while "iter" is selected, Eclipse proposes "theIterator",
which perfectly suit my needs. It would be nice not to have to go through this
additional step to get a correct name.

Now, I press tab once and choose my collection (Eclipse could propose avaiable
collections, I'll post another bug for this).
I press tab again and choose the element type - no problem.
Now I press tab again to choose the name of the variable that contains the
element: I can press ctrl+space, eclipse proposes a name that perfectly suit my
needs - but once again it would be nice if the name was automatically proposed.

This might be a solution: whenever the focus enters a "fill in" zone that
corresponds to a local variable name, the completion popup could appear, and teh
fill-in zone be set to the first proposal, so that in most cases I just have to
press enter (or tab) to get a usefull name.

Let's take the "for - iterate over a collection" template.
Expanding it results in:
for (Iterator iter = theList.iterator(); iter.hasNext();) {
	type element = (type) iter.next();
	
}

With "iter" in the first line selected. The name "iter" doesn't fir with my
coding style (I prefix local variables with "the").
If I press ctrl+space while "iter" is selected, Eclipse proposes "theIterator",
which perfectly suit my needs. It would be nice not to have to go through this
additional step to get a correct name.

Now, I press tab once and choose my collection (Eclipse could propose avaiable
collections, I'll post another bug for this).
I press tab again and choose the element type - no problem.
Now I press tab again to choose the name of the variable that contains the
element: I can press ctrl+space, eclipse proposes a name that perfectly suit my
needs - but once again it would be nice if the name was automatically proposed.

This might be a solution: whenever the focus enters a "fill in" zone that
corresponds to a local variable name, the completion popup could appear, and teh
fill-in zone be set to the first proposal, so that in most cases I just have to
press enter (or tab) to get a usefull name.
valid request - JavaCompletion should respect prefix preferences.

> (Eclipse could propose avaiable
> collections, I'll post another bug for this).

already fixed for I20040413
It would be great if whenever a substitution zone is selected, the user could
choose among a list of proposed values, not only for variable names: take the
"for - iterate over an array with temp variable" template: when I enter the
<array> field, Eclipse could popup up a list of all available arrays in the
scope. Then, when I enter the <temp. variable type> field, Eclipse could propose
me to use the type of the array elements. Currently, Eclipse autocompletes the
template with one  of the arrays it finds, and properly fills the <temp.
variable type> field, but if I change the array, it doesn't retry to guess the type.
I mean that the guesswork could be done every time the focues enters a field,
not only when the template is first expanded. And the guessing could propose a
list of guesses instead of a single value.
as said in comment 1, the request in commen 2 has been fixed since I20040413.
I am not seeing improvement in this area in M9, as far as I can see the
behaviour is exactly the same as in M8.
As for comment #1, I cannot get eclipse proposing me a choice of available
collections. What exactly has been fixed since I20040413?
I think my comment #2 is still relevant, or is that that there is some setting
to enable this behaviour?
Please file separate bugs in separate reports. Let's keep this one for the issue
that templates do not respect your naming preferences.

--

Note:

Templates only propose local (and parameter) instances to fill in the variables;
fields are not proposed. You do get proposals in this case:

<pre>
class A {
 void m(String[] strings, Integer[] ints) {
  for<invoke template here>
 }
}
</pre>

> Currently, Eclipse autocompletes the
> template with one  of the arrays it finds, and properly fills the <temp.
> variable type> field, but if I change the array, it doesn't retry to guess 
> the type.

It does if you change the array by choosing one of the proposed choices. It does
not update the dependent fields if you type in the array manually. Please file a
separate PR for this - you can just copy the discussion up to here.

> I mean that the guesswork could be done every time the focues enters a 
> field, not only when the template is first expanded. 

This would be needed to fulfil the request.

> And the guessing could propose a
> list of guesses instead of a single value.

This works, see example above. If not, please file a separate PR.
3.0 if time permitting.
Removing target milestone, no further action for 3.0.
See also bug 10694.

The new 'name' template variable type respects the configured naming convention settings. The same applies to the following legacy variable types:

${iterator} is translated as ${iterator:name(java.util.Iterator)}
${index} is translated as ${index:name(int)}

Avail. > 20060623
