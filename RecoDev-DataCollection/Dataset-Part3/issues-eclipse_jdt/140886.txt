Since Mylar has a policy of ensuring no manual preference configuration on install, we have a wizard that automatically sets our proposal computers as the default.  However, this currently involves the hack of duplicating the current preference functionality (code is below).  

1) Would it be possible to expose this proposal computer inclusion setting preference page behavior to avoid the duplication (internally for now, perhaps candidate for API later)?

2) If not, what is the mechanism to ensure that the new proposal computers are registered with existing editors?  Currently the code below doesn't register them until restart, but changing the settings in the prefs page take effect immediately.

-------------------------
public static void installContentAssist(IPreferenceStore javaPrefs, boolean mylarContentAssist) {
	String oldValue = javaPrefs.getString(PreferenceConstants.CODEASSIST_EXCLUDED_CATEGORIES);
	StringTokenizer tokenizer = new StringTokenizer(oldValue, SEPARATOR_CODEASSIST);
	Set<String> disabledIds = new HashSet<String>();
	while (tokenizer.hasMoreTokens()) {
		disabledIds.add((String) tokenizer.nextElement());
	}
	if (!mylarContentAssist) {
		disabledIds.remove(ASSIST_JDT_TYPE);
		disabledIds.remove(ASSIST_JDT_NOTYPE);
		disabledIds.add(ASSIST_MYLAR_NOTYPE);
		disabledIds.add(ASSIST_MYLAR_TYPE);
	} else {
		disabledIds.add(ASSIST_JDT_TYPE);
		disabledIds.add(ASSIST_JDT_NOTYPE);
		disabledIds.remove(ASSIST_MYLAR_NOTYPE);
		disabledIds.remove(ASSIST_MYLAR_TYPE);
	}
	String newValue = "";
	for (String id : disabledIds) {
		newValue += id + SEPARATOR_CODEASSIST;
	}
	javaPrefs.setValue(PreferenceConstants.CODEASSIST_EXCLUDED_CATEGORIES, newValue);
}
		if (!mylarContentAssist) {
			disabledIds.remove(ASSIST_JDT_TYPE);
			disabledIds.remove(ASSIST_JDT_NOTYPE);
			disabledIds.add(ASSIST_MYLAR_NOTYPE);
			disabledIds.add(ASSIST_MYLAR_TYPE);
		} else {
			disabledIds.add(ASSIST_JDT_TYPE);
			disabledIds.add(ASSIST_JDT_NOTYPE);
			disabledIds.remove(ASSIST_MYLAR_NOTYPE);
			disabledIds.remove(ASSIST_MYLAR_TYPE);
		}
		String newValue = "";
		for (String id : disabledIds) {
			newValue += id + SEPARATOR_CODEASSIST;
		}
		javaPrefs.setValue(PreferenceConstants.CODEASSIST_EXCLUDED_CATEGORIES, newValue);
	}

Since Mylar has a policy of ensuring no manual preference configuration on install, we have a wizard that automatically sets our proposal computers as the default.  However, this currently involves the hack of duplicating the current preference functionality (code is below).  

1) Would it be possible to expose this proposal computer inclusion setting preference page behavior to avoid the duplication (internally for now, perhaps candidate for API later)?

2) If not, what is the mechanism to ensure that the new proposal computers are registered with existing editors?  Currently the code below doesn't register them until restart, but changing the settings in the prefs page take effect immediately.

-------------------------
public static void installContentAssist(IPreferenceStore javaPrefs, boolean mylarContentAssist) {
	String oldValue = javaPrefs.getString(PreferenceConstants.CODEASSIST_EXCLUDED_CATEGORIES);
	StringTokenizer tokenizer = new StringTokenizer(oldValue, SEPARATOR_CODEASSIST);
	Set<String> disabledIds = new HashSet<String>();
	while (tokenizer.hasMoreTokens()) {
		disabledIds.add((String) tokenizer.nextElement());
	}
	if (!mylarContentAssist) {
		disabledIds.remove(ASSIST_JDT_TYPE);
		disabledIds.remove(ASSIST_JDT_NOTYPE);
		disabledIds.add(ASSIST_MYLAR_NOTYPE);
		disabledIds.add(ASSIST_MYLAR_TYPE);
	} else {
		disabledIds.add(ASSIST_JDT_TYPE);
		disabledIds.add(ASSIST_JDT_NOTYPE);
		disabledIds.remove(ASSIST_MYLAR_NOTYPE);
		disabledIds.remove(ASSIST_MYLAR_TYPE);
	}
	String newValue = "";
	for (String id : disabledIds) {
		newValue += id + SEPARATOR_CODEASSIST;
	}
	javaPrefs.setValue(PreferenceConstants.CODEASSIST_EXCLUDED_CATEGORIES, newValue);
}
		if (!mylarContentAssist) {
			disabledIds.remove(ASSIST_JDT_TYPE);
			disabledIds.remove(ASSIST_JDT_NOTYPE);
			disabledIds.add(ASSIST_MYLAR_NOTYPE);
			disabledIds.add(ASSIST_MYLAR_TYPE);
		} else {
			disabledIds.add(ASSIST_JDT_TYPE);
			disabledIds.add(ASSIST_JDT_NOTYPE);
			disabledIds.remove(ASSIST_MYLAR_NOTYPE);
			disabledIds.remove(ASSIST_MYLAR_TYPE);
		}
		String newValue = "";
		for (String id : disabledIds) {
			newValue += id + SEPARATOR_CODEASSIST;
		}
		javaPrefs.setValue(PreferenceConstants.CODEASSIST_EXCLUDED_CATEGORIES, newValue);
	}
Please ignore the duplicate paste after the closing brace of the above installContentAssist method above.
If you do not already do so, you should also look out for other proposal computer contributions which you might want to show to the user in your wizard.
The reason for not loving to fix this bug is that in general Eclipse is
1. additive with its extensions
2. gives full control to the user
Providing APIs that work against those principles is not something I like to do.

Could you live with an API that first asks the user whether the wants that change?
> Could you live with an API that first asks the user whether the wants that change?

Definitely, and I couldn't agree more with those principles.  

I think that what you propose sounds like a very good general guideline.  The additive nature of Eclipse extensions is great, but in this case gets in the way of the user getting desired functionality.  So anytime that API does something that 'breaks' the additive nature of Eclipse we could have a rule that the user first has to confirm the action so that the 'violation' is in line with the user's intention.  This was exactly the spirit of our having the wizard ask users to replace the content assist proposal, and I am quite uncomfortable with the fact that we broke this convention in order to fix bug 194766.

With UIs that ask permission like this we have to be a little careful not to hit the Vista "User Account Management" sore points which do the opposite of empowering and informing the user by making such permissions dialogs a sort of spam.  But for this case it seems perfect.  When doing this I think it would be good to have:
* A simple text description of the change and a Yes/No confirmation.
* A hyperlink to more information about the requested change.  This is needed to answer the user's question of "why on earth would I say yes to this?" when they're not aware of what additional tools they have installed.
* A hyperlinked bread crumb path to the corresponding preference page to teach the user where to adjust the functionality that was set automatically.
Just to be clear: this would be a concrete API for the proposal computers and not a generic API that lets you tweak the world ;-)

>* A simple text description of the change and a Yes/No confirmation.
The client that changes the value(s) should provide that text as argument.

>* A hyperlink to more information about the requested change.  This is needed
>to answer the user's question of "why on earth would I say yes to this?" when
>they're not aware of what additional tools they have installed.
See previous (wee would feed that text into a Link widget, which means the client can provide links at will). The client would also provide the link listener.

>* A hyperlinked bread crumb path to the corresponding preference page to teach
>the user where to adjust the functionality that was set automatically.
Yes. That will be part of it.

In addition the API needs to be able to set a bunch of values as you wouldn't want to ask the user for each individual enablement of proposal computer.
 (In reply to comment #5)
> Just to be clear: this would be a concrete API for the proposal computers and
> not a generic API that lets you tweak the world ;-)

Yes.  Sorry for going off on the general tangent ;)  Was trying to think through the bigger picture to ensure that this mechanism made sense in light of the constraints you outlined in comment#3.  Agreed that the API should hide all the values that need to be set, and all other points sound right to me.  Great to see this on the table for 3.4!
Let me know if you want me to try any API or patch out.
After thinking a bit more on this I decided not to add any user interaction here. Plug-ins can already now modify the pref directly so there's not much sense in doing this here.

I'll add the following APIs:
  String[] PreferenceConstants.decodeExludedCodeAssistCategories(String)
    This allows to query the preference and convert it into an array of excluded     
    categories.

  String PreferenceConstants.encodeExludedCodeAssistCategories(String[])
    This allows to convert an array of excluded categories into the string
    format used by the preference.

OK?



Tweaked the previous version a bit to make it more clear and easier to use.

	/**
	 * Returns the completion proposal categories which
	 * are excluded from the default proposal list.
	 * 
	 * @return an array with the IDs of the excluded categories
	 * @see #CODEASSIST_EXCLUDED_CATEGORIES
	 * @since 3.4
	 */
	public static String[] getExcludedCompletionProposalCategories()

	/**
	 * Sets the completion proposal categories which are excluded from the
	 * default proposal list and reloads the registry.
	 * 
	 * @param categories the array with the IDs of the excluded categories
	 * @see #CODEASSIST_EXCLUDED_CATEGORIES
	 * @since 3.4
	 */
	public static void setExcludedCompletionProposalCategories(String[] categories)

Please provide feedback whether this works for you.

Available in builds > N20080220-0010.
Looks great!  Created bug 219692 to move Mylyn to the new API.
