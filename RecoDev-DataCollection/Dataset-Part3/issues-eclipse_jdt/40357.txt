Build 20030716

If some compiler failure occurs during reconcile (see bug 40288), it seems that 
the UI problem requestor will remain active. It should be protected with a 
try/finally to ensure it doesn't remain active beyond reconciliation.

Build 20030716

If some compiler failure occurs during reconcile (see bug 40288), it seems that 
the UI problem requestor will remain active. It should be protected with a 
try/finally to ensure it doesn't remain active beyond reconciliation.
Do you mean we our IProblemRequestor should return false for isActive?

If so I might not fully understand the API of this method. It says:
* When answering <code>false</false>, problem will
* not be discovered any more until the next iteration.

but it also says it's testing the value only once for each reconcile(...) call:
* This  predicate will be invoked once prior to each problem detection iteration.

Philippe, can you comment on my last comment - thanks.

resolving to remind until there is feedback from bug reporter.

The code should do:

try {
  enable problem detection

  reconcile
} finally {
  disable problem detection
}

So that if anything bad occurs during reconcile, the requestor is properly 
disabling itself (and further reconciliations will not be impacted, see bug 
40288).
I ask my question again: by disabling do you mean our problem requestor returns
false when isActive is called?

If so, what is the benefit? I would disable but just before calling reconcile
again I will enable it again.

According to the Javadoc is IProblemRequestor.isActive:
>once prior to each problem detection iteration.

isActive is only be evaluated once per reconcile iteration so where would
setting it to false have any effect?

Yes isActive should answer false when disabled. Basically, if the element 
cannot be opened during reconciliation (because of a compiler bug), it will 
leave it closed, and if we surface an exception, then you will never disable 
your requestor.

Thus, if we populate this working copy later on, we will still think we need to 
notify you, since your requestor remained active. This is exactly the scenario 
described in bug 40288.

So for fault-tolerance purpose, you should ensure you do not leave your 
requestor active longer than you should.
>we will still think we need to notify you,

Why? Don't you only notify if forceProblemDetection is true? Which is the case
when I'm interested in the problems hence I set isActive to true (as sugested by
your code snippet) just before calling reconcile(true, ) anyway?

Since isActive is only called once before starting to report and reporting is
only done if I request it with forceProblemDetection=true how would changing our
code help? Sorry if this is obvious to you, but I still don't understand it.

We leave the code as is because
- our requestor - when active - is interested in all problems even if reconcile
is called by others
- others calling reconcile(true, ...) might not be able to access the problem
requestor to enable/disable it
- if the desired workflow is as outlined in your example code then the API
should be changed so that the problem requestor is passed in as argument
Some time ago I adapted the code to follow the pattern described in comment 4.
Comment 8 is still valid though.
.
