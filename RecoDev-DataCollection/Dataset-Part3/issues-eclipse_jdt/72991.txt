Assume you have:
-----
import java.util.Map;

public class MapImplementation<X, Y> implements Map<X, Y> {
}
-----

And choose "Override/Implement Methods".  The code generator should be
intelligent enough to use X and Y instead of K and V in the generated code. 
Caveat: Use the type names from Map<X, Y> instead of MapImplementation<X, Y>,
otherwise you'll run into problems with:

-----
import java.util.Map;

public SpecializedMap<E> implements Map<String, E> {
}
------

Assume you have:
-----
import java.util.Map;

public class MapImplementation<X, Y> implements Map<X, Y> {
}
-----

And choose "Override/Implement Methods".  The code generator should be
intelligent enough to use X and Y instead of K and V in the generated code. 
Caveat: Use the type names from Map<X, Y> instead of MapImplementation<X, Y>,
otherwise you'll run into problems with:

-----
import java.util.Map;

public SpecializedMap<E> implements Map<String, E> {
}
------
Fixed > 20050120
