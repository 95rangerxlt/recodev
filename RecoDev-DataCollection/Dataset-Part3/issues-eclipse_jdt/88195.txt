If there is an inner class which has a method name starting with the same 
prefix as a method in the enclosing class, the type-ahead matching in the 
popup outline should give precedence to the enclosing type.  Currently it 
selects the first match based on the trees sorting.

Or, if the caret is currently inside the inner class, then that class' method 
should have higher precedence.

Also, the tree should be completely expanded. I'm looking at a Type with 2 
nested types.  All 3 types have a method called "translate", but only one of 
the two nested types is expanded.

If there is an inner class which has a method name starting with the same 
prefix as a method in the enclosing class, the type-ahead matching in the 
popup outline should give precedence to the enclosing type.  Currently it 
selects the first match based on the trees sorting.

Or, if the caret is currently inside the inner class, then that class' method 
should have higher precedence.

Also, the tree should be completely expanded. I'm looking at a Type with 2 
nested types.  All 3 types have a method called "translate", but only one of 
the two nested types is expanded.
Opened bug 92579 to track treeitem expansion separately.
See e.g. class ReorgPolicyFactory:
- set caret into MoveFilesFoldersAndCusPolicy
- press Ctrl+O
=> selects the enclosing method (good)
- write 'cane'
=> should select MoveFilesFoldersAndCusPolicy#canEnableQualifiedNameUpdating(..)

- type 'l'
=> should select FilesFoldersAndCusReorgPolicy#canElementBeDestination(..)

- press Backspace
=> should select MoveFilesFoldersAndCusPolicy#canEnableQualifiedNameUpdating(..)

The algorithm should start at the initial selection (element at caret location) and select the first child whose name matches the pattern. If there's no matching child, go to the element's parent and check the parent's children (recursively).
Fixed in HEAD.
Let's see how this feels.
