I20040120_1132

public class A {
	public A(int myParam) {
	}
}

- invoke QuickFix "Assign parameter to new field" on "myParam"

=> Bug 1: the proposals popup list has a wrong selection
expected: fMyParam (the selected text in the editor)
was: fParam

- select myParam, press Return

=> Bug2: the second proposals popup list has a wrong selection, too
expected: myParam (the selected text in the editor)
was: fParam

I20040120_1132

public class A {
	public A(int myParam) {
	}
}

- invoke QuickFix "Assign parameter to new field" on "myParam"

=> Bug 1: the proposals popup list has a wrong selection
expected: fMyParam (the selected text in the editor)
was: fParam

- select myParam, press Return

=> Bug2: the second proposals popup list has a wrong selection, too
expected: myParam (the selected text in the editor)
was: fParam
fixed > 20040126

implemented LinkedCorrectionProposal.LinkedModeProposal.validate


Now, if I first select "param", then the second proposal list is pre-selected
with "myParam". Should be "param" too.
I see - since LinkedModeProposal doesn't know anything about the offset it will
get inserted, we have no information about what part of the document to match
with the proposal. The first solution tried any prefix, which led to the
behaviour described in commment 2.

Reverted this, so the selection is correct. However, now once you don't have the
entire field selected, no proposal will match. (Try moving the caret when on a
linked position).

LinkedModeProposal should know its insertion offset, see JavaCompletionProposal.
fixed before M7
I20040505-0200 (and earlier too, I think)

- in a method have this line:

    new HashMap();

- QuickAssist, Return, Return
-> HashMap is inserted, but AbstractMap is selected in the second proposals popup
-> pressing Return again inserts AbstractMap


fixed > M2.
