Build ID: I20070621-1340

Steps To Reproduce:
1. Window > Preferences > Java > Editor > Content Assist > Favorites > New Member ...
2. Enter the member "org.hamcrest.core.IsEqual.equalTo"
3. Create a Java Project with the library - http://repo1.maven.org/maven2/org/hamcrest/hamcrest-all/1.1/hamcrest-all-1.1.jar.
4. Create a Java Class with a main method
5. In the main method type 'equalTo' and then Control-Space to invoke content assist
6. Select the 'equalTo(T operand) Matcher<T> - IsEqual
7. This will add the an import that's invalid, which looks like this - 'import static org.hamcrest.core.IsEqual<T>.equalTo;'. You can't have type variables in import statements.


More information:
The potential offending code seems to be in the class 'org.eclipse.jdt.internal.ui.text.java.ImportCompletionProposal' in the 'computeReplacementString()' method. Here it checks the type of proposal, which in this case is 'CompletionProposal.METHOD_IMPORT' and then gets the qualifiedType from the CompilationProposal.getDeclaredSignature(). It then proceeds to create an ImportRewrite object and adds a static import with the type from the declaredSignature, which contains the type variable.

The interesting this is that the CompletionProposal field already has the correct replacement via 'fProposal.getCompletion()', but it includes the entire static import statement, so that can be used with the ImportRewrite, which just seems to accept package names.

Build ID: I20070621-1340

Steps To Reproduce:
1. Window > Preferences > Java > Editor > Content Assist > Favorites > New Member ...
2. Enter the member "org.hamcrest.core.IsEqual.equalTo"
3. Create a Java Project with the library - http://repo1.maven.org/maven2/org/hamcrest/hamcrest-all/1.1/hamcrest-all-1.1.jar.
4. Create a Java Class with a main method
5. In the main method type 'equalTo' and then Control-Space to invoke content assist
6. Select the 'equalTo(T operand) Matcher<T> - IsEqual
7. This will add the an import that's invalid, which looks like this - 'import static org.hamcrest.core.IsEqual<T>.equalTo;'. You can't have type variables in import statements.


More information:
The potential offending code seems to be in the class 'org.eclipse.jdt.internal.ui.text.java.ImportCompletionProposal' in the 'computeReplacementString()' method. Here it checks the type of proposal, which in this case is 'CompletionProposal.METHOD_IMPORT' and then gets the qualifiedType from the CompilationProposal.getDeclaredSignature(). It then proceeds to create an ImportRewrite object and adds a static import with the type from the declaredSignature, which contains the type variable.

The interesting this is that the CompletionProposal field already has the correct replacement via 'fProposal.getCompletion()', but it includes the entire static import statement, so that can be used with the ImportRewrite, which just seems to accept package names.
If anyone can give me a hint as to the most appropriate place to fix this issue, I'd be willing to do so and provide a patch. I wasn't able to get a clear picture as to the best place to compensate for this. Should the CompletionProposal's getDeclarationSignature be adjusted for METHOD_IMPORT kind or should the value be normalized in the ImportCompletionProposal to massage out the type variables?
Hi Nathan,

first we need to check whether JDT Core gives us the wrong proposal and if not adjust JDT Text side.

Adding David for the JDT Core side.
I think that the jdtcore proposal is correct and ImportCompletionProposal should be improved. The declaration signature must contain the generic type signature to give more information to the client.

Currently the jdtcore behavior isn't coherent for all proposals. I filled a bug report for one of these cases (bug 204100).
>I think that the jdtcore proposal is correct and ImportCompletionProposal
>should be improved. The declaration signature must contain the generic type
>signature to give more information to the client.
Now I'm puzzled. You write "jdtcore proposal is correct" but on the other hand "The declaration signature must contain the generic type signature to give more information to the client".

Please provide more details.
Sorry, my comment 3 is not clear.
I wanted to say that currently the declaration signature is a generic type signature (Lorg.hamcrest.core.IsEqual<TT;>;) and we must not change that.
Any suggestion as to what that should mean for this bug? My take would be that since DeclarationSignature will continue to contain the type variable information, either this code needs to do some massaging or an additional method/property needs to be added to the CompletionProposal to get a "ImportSignature" or some more appropriate name. 
org.eclipse.jdt.internal.ui.text.java.ImportCompletionProposal would be the place to start with the patch.
Created attachment 79007
Quick and dirty fix proposal

Here's a quick and dirty fix for the issue. I'm not sure if it's the most appropriate solution, but it certainly works.

In debugging the problem, I found that the underlying CompletionProposal has all of the information that's needed. The base class InternalCompletionProposal has two fields 'declarationPackageName' and 'declarationTypeName', but they are protected fields with protected accessors. Perhaps it might be helpful for the CompletionProposal class to expose these methods in the future, especially considering that the CompletionProposal's 'completion' is just being ignored altogether.
'declarationTypeName' and some other fields are used to ensure the compatibility with a depreceted code assist API without performance loss. The content of these fields can be computed from 'signature' or 'declarationTypeSignature'. We want to remove these fields in the future, so we won't expose them.
>Here's a quick and dirty fix for the issue. 
What would your correct fix be then?
(In reply to comment #10)
> >Here's a quick and dirty fix for the issue. 
> What would your correct fix be then?
> 

There are two paths that I thought could be more appropriate, but I'm not very familiar with the overall design of the code to be able to judge if they would be better or not.

1. Consider exposing a method in the CompletionProposal for getting the package name and member without type variable information. Based on comment #9, it sounds like CompletionProposal isn't the place for this type of functionality. A variation of this might be additional methods in Signature for computing the package name and member name from the declaration signature (with type var info).

2. Evaluate the use of the ImportRewrite in the ImportCompletionProposal and see if it's appropriate to use. The CompletionProposal's 'completion' property already contains the correct statement 'import static x.y.Z.m;', but it's ignored. There seems to be a impedance mismatch somewhere in this code, as earlier in the stack, the two CompletionProposals are being built with all the necessary info, one for the method invocation and one for the import add, but then later the CompletionProposal API isn't really used to get the completion, it just used to pass around the information. It seems like this could be a little more streamlined.

Like I said though, I'm not intimately familiar with the JDT code as a whole, so I can't really judged what would be the best solution for this.

If you want to have a signature without type argument you can use Signature.getTypeErasure().
(In reply to comment #12)
> If you want to have a signature without type argument you can use
> Signature.getTypeErasure().
> 

Ah, ha! Just what I needed to know. A new patch is soon to follow.
Created attachment 79138
Use Signature.getTypeErasure to remove type variables

This patch should be more appropriate and cleaner.
Sorry to bother, but is the last patch acceptable? Any chance of getting this into a fix build?
Committed patch (added your credentials to the copyright notice).
Available in builds > N20071026-0010.
