The Open Type dialog is so slow that I can type the entire name of the type 
before the dialog is finished processing the first character.

I would like the option to set a threshold on the number of non-wildcard 
characters before the dialog attempts to populate the List.

For example, only match the type of 3 or more non-wildcard characters have been 
entered, such as "*But" when typing "*Button".  Currently, after type "*", I 
must wait 10 seconds, then after typing "*B", I must wait another 10 seconds.  
Then "*Bu" takes about 2 more seconds.  This is on Windows XP on a 1.13 GHz 
machine with 1024 MB RAM.

The Open Type dialog is so slow that I can type the entire name of the type 
before the dialog is finished processing the first character.

I would like the option to set a threshold on the number of non-wildcard 
characters before the dialog attempts to populate the List.

For example, only match the type of 3 or more non-wildcard characters have been 
entered, such as "*But" when typing "*Button".  Currently, after type "*", I 
must wait 10 seconds, then after typing "*B", I must wait another 10 seconds.  
Then "*Bu" takes about 2 more seconds.  This is on Windows XP on a 1.13 GHz 
machine with 1024 MB RAM.
BTW, I determined using JProbe that 90% of the execution is spent in 
instantiating the TableItem, and then setting its text and Icon.  Setting the 
Icon was actually 40% of the 90%, or almost 4 seconds.

I have a workaround that avoids the SWT bottleneck.  Don't perform the query 
until 3 non-wildcard characters have been entered.  I am currently working with 
a patch that does this, and the searched are instantaneous, even with 20,000+ 
classes loaded.
I agree that the case of wildcards at the beginning of a pattern is too slow. 
Your trick to use 3 non wild card characters is clever, but often 2 characters 
are already enough to see the class I'm looking for.

A lest restrictive fix is to not filter the list as long as the entered 
characters are just wild card characters. This is still slow but would be an 
improvement. 

Another implementation is to populate the list in junks with the help of a 
separate thread. The filling is prempted as soon there is new input. The Goto 
Resource in the Navigator is doing something like this.

Threading will be strange, especially if I left animated scrolling turned on in 
Windows (which I don't).  Also, it is an unnecessary programming burden.

As far as 3 characters are concerned, I believe this is the 99% case.  yes, I 
can type 2 characters faster than I can type 3, but matching against 2 
characters takes longer than matching against 3, so 3 will be faster.

To be clear, **even** the non wildcard case is slow for me.  But, I think 2 
characters without wildcards, or 3 with, would be acceptable.

That leaves the 1% case where I really want to do a wildcard search against 
just 2 charaters.  2 Options: 
1)launch a small Runnable on the Display with a half-second delay; search if no 
input change.
2) Put another button on the Dialog that says search.  Actually, the "OK" 
button and the "Search" button would never both be needed, since "*Bu" would 
produce an empty list since it is less than 3 characters.  So, the button could 
say Search, and then switch to Ok once the List has ListItems.  I do NOT like 
modes, but one benefit is that this button is the default button, and I could 
use the Enter key to perform the search.
JDT should consider copying or sharing the code that the Navigator uses to fill 
the table in a background thread.  Another option is to use a List widget 
instead which is much faster but you lose the icons.  Notice that incremental 
search for Index in MS help uses a List widget.

Why do I care?  This dialog is often used as proof that that Eclipse and/or SWT 
is slow.
*** Bug 11245 has been marked as a duplicate of this bug. ***
fixed >= 20020322
Reused some code from GotoResourceDialog.
