Let say we have a piece of code containing an anonymous class:
		Runnable runner = new Runnable() {
			public void run() {
				System.out.println("Hello runner!");
			}
		};

- Clicking anywhere in these lines
- Selecting all the lines
- selecting the first line
+ Quick Fix does not show the "Convert to lambda expression" fix.
This makes this conversion fix difficult to discover.

Ideally, we could have a warning associated to this Lambda conversion.

Let say we have a piece of code containing an anonymous class:
		Runnable runner = new Runnable() {
			public void run() {
				System.out.println("Hello runner!");
			}
		};

- Clicking anywhere in these lines
- Selecting all the lines
- selecting the first line
+ Quick Fix does not show the "Convert to lambda expression" fix.
This makes this conversion fix difficult to discover.

Ideally, we could have a warning associated to this Lambda conversion.
Created attachment 242112
Screenshots

Clicking anywhere in the anonymous class, selecting the first line of anonymous class or selecting the entire anonymous class and pressing Ctrl+1 shows the quick assist "Convert to lambda expression" (See attached screenshot).

See the code in QuickAssistProcessor#getConvertAnonymousClassCreationsToLambdaProposals which handles it.

Is there anything else that you want to convey here?
See my attached screenshots: to me this use cases should add the "Convert to Lambda" Quick Fix.

Also, what about having a warning associated to the Lambda conversion ?
Created attachment 242129
Jerome's screenshots
To avoid showing too many Quick Assists everywhere, Quick Assists are not shown anywhere on a line, but only at caret locations where they apply to a directly enclosing AST node, or when the whole affected AST node is selected. Alt+Shift+Up (Edit > Expand Selection To > Enclosing Element) is a great help.

Showing Quick Assists in more locations could sometimes be convenient, but in other cases, it would make the proposal list too long, and it can be hard to understand on which element a Quick Assist actually operates.

In the given example, we won't show the Quick Assist when the caret is on the field/variable name, since that's clearly outside of the anonymous class construct.

But we can show it if the caret is anywhere inside the method signature or right inside the method's block. Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=df365cc97b4209f95ea0b8947e6e3008fe3766be

In the example, this also enables the QA in "public void" and in the @Override that should be there as well.
Thanks Markus for the explanation, and the fixes. This really make sense.

Apart from that, what about adding something like "Anonymous inner class can be converted into a lambda expression" in the Preferences>Java>Compiler>Errors/Warnings (Code Style section)?
This would give more visibility to lambda, which can be easily missed as it is today.
(In reply to Jerome Cambon from comment #5)
> Apart from that, what about adding something like "Anonymous inner class can
> be converted into a lambda expression" in the
> Preferences>Java>Compiler>Errors/Warnings (Code Style section)?

The problem is that this conversion is not as straightforward as it looks like (see open and closed bugs), so I'm hesitant to add such a bold statement to the compiler when it's not clear whether the conversion can really be correctly implemented in all cases. Maybe we can add this later, but not at this time.

But if you're bold, you can just use the Clean Up -- or even enable it as a Save Action.
