JDT Core: 3.9.1.v20131009-0108-BETA_JAVA8

The following code is flagged as incorrect: 

        // Person: one of its methods is public String getLast() {...}
        List<Person> roster = ...;
        
        Map<String, Person> map = 
            roster
                .stream()
                .collect(
                    Collectors.toMap(
                        p -> p.getLast(), [1]
                        p -> p            [2]
                    ));

The BETA_8 JDT shows these 2 error message: 
[1] The method getLast() is undefined for the type T
[2] Type mismatch: cannot convert from T to U

If expressed as follows: 

        Map<String, Person> map = 
            roster
                .stream()
                .collect(
                    Collectors.toMap(
                        Person::getLast,     [3]
                        Function.identity()
                    ));

The BETA_8 JDT now shows this error: 
[3] The type Person does not define getLast(T) that is applicable here

Even the following has a problem: 

        Map<String, Person> map = 
            roster
                .stream()
                .collect(
                    Collectors.toMap(
                        new Function<Person, String>() {    [4]
                            public String apply(Person p) { 
                                return p.getLast(); 
                            } 
                        },
                        Function.identity()
                    ));

[4] Type mismatch: cannot convert from Map<String,Object> to Map<String,Person>

There actually seems to be a regression with the most recent nightly build compared to some from a few weeks ago: in the earlier one, problem #[4] did not occur.


For contrast, Netbeans nightly build (201310070001) handles all these just fine, and it actually makes suggestions for refactoring from the anonymous class to a lambda, and more. 

Eclipse can be seen to be lagging a good bit behind here, I'm sorry to say.

JDT Core: 3.9.1.v20131009-0108-BETA_JAVA8

The following code is flagged as incorrect: 

        // Person: one of its methods is public String getLast() {...}
        List<Person> roster = ...;
        
        Map<String, Person> map = 
            roster
                .stream()
                .collect(
                    Collectors.toMap(
                        p -> p.getLast(), [1]
                        p -> p            [2]
                    ));

The BETA_8 JDT shows these 2 error message: 
[1] The method getLast() is undefined for the type T
[2] Type mismatch: cannot convert from T to U

If expressed as follows: 

        Map<String, Person> map = 
            roster
                .stream()
                .collect(
                    Collectors.toMap(
                        Person::getLast,     [3]
                        Function.identity()
                    ));

The BETA_8 JDT now shows this error: 
[3] The type Person does not define getLast(T) that is applicable here

Even the following has a problem: 

        Map<String, Person> map = 
            roster
                .stream()
                .collect(
                    Collectors.toMap(
                        new Function<Person, String>() {    [4]
                            public String apply(Person p) { 
                                return p.getLast(); 
                            } 
                        },
                        Function.identity()
                    ));

[4] Type mismatch: cannot convert from Map<String,Object> to Map<String,Person>

There actually seems to be a regression with the most recent nightly build compared to some from a few weeks ago: in the earlier one, problem #[4] did not occur.


For contrast, Netbeans nightly build (201310070001) handles all these just fine, and it actually makes suggestions for refactoring from the anonymous class to a lambda, and more. 

Eclipse can be seen to be lagging a good bit behind here, I'm sorry to say.
Thanks for your report and interest.

Work on overload resolution and type inference is in progress. The lag is
in good measure due to incomplete specification. Part G of JSR335 draft in 
particular had many sections incomplete with place holders till as recently 
as a week ago.

We are nearly done with the compiler implementation for the other parts of
Java 8 where we were not similarly blocked by specification gaps:

 - JSR308: Complete.
 - javax.lang.model support for JSR308: Complete
 - JEP118: complete.
 - JEP120: nearly complete, will be complete next week.

That leaves us with just one major theater in the battle front (apart from 
IDE enablement work) and we expect to make rapid progress.

Stay tuned and thanks again for your interest and concern.
Shrikanth, 

Thanks for the explanation.

I did some more tinkering (stumbling, mostly) and found that things work just fine if generic typing is added as follows:

        Map<String, Person> map = 
            roster
                .stream()
                .collect(
                    Collectors.<Person, String, Person>toMap(
                        p -> p.getLast(),
                        // or   
                        //   Person::getLast,
                        // or 
                        //   new Function<Person, String>() { 
                        //       public String apply(Person p) { 
                        //           return p.getLast(); 
                        //       } 
                        //   },
                        p -> p
                        // or 
                        //   Function.<Person>identity()
                    ));

The way I have presented it may be confusing, but the idea is that any of the alternative ways of expressing the two "toMap()" parameters (keyMapper, and valueMapper) when properly uncommented and commented, work ... as long as the code includes the generic types

    Collectors.<Person, String, Person>toMap

This is also agreeable with NetBeans (build 201310070001). 

For completeness, the method signature in "java.util.stream.Collectors" for this method is 

   Collector<T, ?, Map<K, U>> toMap(
       Function<? super T, ? extends K> keyMapper, 
       Function<? super T, ? extends U> valueMapper)
(In reply to Paul Furbacher from comment #2)
> Shrikanth, 
> 
> Thanks for the explanation.
> 
> I did some more tinkering (stumbling, mostly) and found that things work
> just fine if generic typing is added as follows:

Yes, by this means you are short-circuiting the implementation gap for
part G - type inference. This should/could work, but is an unhappy situation
that we are working to remedy soon, now that we have more/nearly complete
specification as of last week.

However, Part F - overload resolution has implementation gaps too, these
may not be so easy to workaround: Within the next few weeks however, we 
expect the overload resolution project to be complete. Thanks.
(In reply to Srikanth Sankaran from comment #3)

> that we are working to remedy soon, now that we have more/nearly complete
> specification as of last week.

Please see also: https://bugs.eclipse.org/bugs/show_bug.cgi?id=417803#c25
*** Bug 418807 has been marked as a duplicate of this bug. ***
I'll see how the new inference handles the examples in this bug.
Thanks.
(In reply to Paul Furbacher from comment #0)

> For contrast, Netbeans nightly build (201310070001) handles all these just
> fine, and it actually makes suggestions for refactoring from the anonymous
> class to a lambda, and more. 

Eclipse just released support for this feature via: https://bugs.eclipse.org/bugs/show_bug.cgi?id=403749.

We expect to publish Early Access Build II by Dec 15th that plugs many of the
gaps - Some gaps will remain in type inference though as that project even though
is in a much evolved stage may not be ready by Dec 15th.
With bug 400874 nearing completion I gave the example from this bug a try. It's still failing but this is a perfect candidate for improving the implementation. In fact, it's exactly the kind of example I was looking for, cool! Stay tuned ...
Good news: my latest status in bug 400874 has improvements which let all three examples in comment 0 pass, hurray!!

Closing as duplicate of the other bug 400874, since everything still happens in the branch of the bug.
(In reply to Stephan Herrmann from comment #9)
> Good news: my latest status in bug 400874 has improvements which let all
> three examples in comment 0 pass, hurray!!

hurrah indeed. Great news Stephan.
