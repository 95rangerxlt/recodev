Advanced syntax highlighting should support coloring type parameters in 1.5 code.

I just needed a while to understand what's wrong/unintended with these declarations:
    class X<T> { }
    class Y<Number> extends X { }

I guess with colored 'Number', I would easily have spotted my error.

Advanced syntax highlighting should support coloring type parameters in 1.5 code.

I just needed a while to understand what's wrong/unintended with these declarations:
    class X<T> { }
    class Y<Number> extends X { }

I guess with colored 'Number', I would easily have spotted my error.
Markus: References and declartions should be colored
Hm, you want all types used as type parameters colored? I see your point, but
wonder whether it's not going to be too colorful.

What we currently have is to color any non-concrete type refernences (e.g. 'T'
and 'E'), but not concrete bounds.

How do you color this:

<T extends Comparable<T> & Iterable<? extends Number>> void multiList(List<T>
list) {
	T t= null;
}

- color just the lowest level type parameters?
- color all types withing <>
- use a different shading depending on the nesting depth...?
My original request was unclear. I don't want to highlight type parameters. I
only want to highlight type variables (i.e. those SimpleNames that have a type
binding that says isTypeVariable() == true).

The element category should be renamed to "Type variables".
In your example, all "T"s should be highligthed as "Type variables".

fixed > 20050119
.
