BETA_JAVA8:

Given the program below, annotations on lambda parameters do not
show up in the class file, despite the retention being runtime.
Interestingly JDK 8b81 also has the same problem.


// ----
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

interface I {
	void doit (Object o, Object p);
}

public class X {
	I i = (@Annotation Object o, @Annotation Object p) -> {
		
	};
	void foo(@Annotation Object o, @Annotation Object p) {
        }
}

@Target(ElementType.PARAMETER)
@Retention(RetentionPolicy.RUNTIME)
@interface Annotation {
	
}

// ---

Problem is in org.eclipse.jdt.internal.compiler.ClassFile.generateMethodInfoAttributes(MethodBinding) - there is an expectation of AMD, which needs to be reconciled.

BETA_JAVA8:

Given the program below, annotations on lambda parameters do not
show up in the class file, despite the retention being runtime.
Interestingly JDK 8b81 also has the same problem.


// ----
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

interface I {
	void doit (Object o, Object p);
}

public class X {
	I i = (@Annotation Object o, @Annotation Object p) -> {
		
	};
	void foo(@Annotation Object o, @Annotation Object p) {
        }
}

@Target(ElementType.PARAMETER)
@Retention(RetentionPolicy.RUNTIME)
@interface Annotation {
	
}

// ---

Problem is in org.eclipse.jdt.internal.compiler.ClassFile.generateMethodInfoAttributes(MethodBinding) - there is an expectation of AMD, which needs to be reconciled.
Stephan, how useful is it to emit these into the class file ? Given lambdas
cannot be directly called and given they are anonymous from tools pov, does
it make sense to emit these at all ? 

Fix could be trivial though,
(In reply to comment #1)

> Fix could be trivial though,

Did I say that ? :)

Not only does javac not generate the annotations, javap also does not
read them even when present. Eclipse disassembler crashes with certain
input class files. On top of implementation subltleties around synthetic
parameters for captured locals ahead of real parameters ...
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=64ee3f57d71ba4f4e5fa8224c04a06b8409e61e3


Raised https://bugs.eclipse.org/bugs/show_bug.cgi?id=406636 for
the disassembler problem.
