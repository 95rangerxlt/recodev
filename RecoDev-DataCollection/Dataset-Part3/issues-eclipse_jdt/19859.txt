I'll provide more specifics as I come across them.  Sorry for the sparse detail.

Sometimes (but not always) when I Run.. or Debug.. a JUnit launcher, I get the
following exception:

Console [<disconnected> org.eclipse.jdt.internal.junit.runner.RemoteTestRunner
at localHost:9613]

Could not connect to:  : 6293			
java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:295)
	at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:161)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:148)
	at java.net.Socket.connect(Socket.java:425)
	at java.net.Socket.connect(Socket.java:375)
	at java.net.Socket.<init>(Socket.java:290)
	at java.net.Socket.<init>(Socket.java:118)
	at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.connect(RemoteTestRunner.java:440)
	at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:210)
	at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:151)


Could be related to one of the following:
**I'm running a dual head linux systems via xinerama, but other apps have not
had any difficulty.
**I'm suspicious that the problem occurs when I have more than one perspective
open in different windows, OR when using Debug... would cause a new perspective
to be started.

I'll provide more specifics as I come across them.  Sorry for the sparse detail.

Sometimes (but not always) when I Run.. or Debug.. a JUnit launcher, I get the
following exception:

Console [<disconnected> org.eclipse.jdt.internal.junit.runner.RemoteTestRunner
at localHost:9613]

Could not connect to:  : 6293			
java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:295)
	at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:161)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:148)
	at java.net.Socket.connect(Socket.java:425)
	at java.net.Socket.connect(Socket.java:375)
	at java.net.Socket.<init>(Socket.java:290)
	at java.net.Socket.<init>(Socket.java:118)
	at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.connect(RemoteTestRunner.java:440)
	at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:210)
	at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:151)


Could be related to one of the following:
**I'm running a dual head linux systems via xinerama, but other apps have not
had any difficulty.
**I'm suspicious that the problem occurs when I have more than one perspective
open in different windows, OR when using Debug... would cause a new perspective
to be started.
After a little more spelunking...

Cases when I *don't* get the socket error:
[1] Perspectives open in a new window
    I have open a Java perspective and a Debug perspective
    Debug or run from either perspective
[2] Perspectives open in a new window
    I only have a Java perspective open
    Don't have a JUnit view open anywhere
    I Run a JUnit launcher
[3] Perspectives open in a new window
    I only have 2 Java perspectives open
    Don't have a JUnit view open anywhere
    I Run a JUnit launcher

Cases when I *do* get the socket error:
[A] Perspectives open in a new window
    I only have a Java perspective open
    I Debug a JUnit launcher

Note: the fact that I've catogorized the cases above does not mean that I
haven't gotten the other outcome at a different.  I am sure that I've previously
gotten this error with Run before, but none of the cases above covers that.

*sigh*
[F3] While I have had several times where a debug perspective fired up and ran
correctly, I have just seen a socket failure under F3.  Stack trace is...

Could not connect to:  : 8727			
java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:295)
	at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:161)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:148)
	at java.net.Socket.connect(Socket.java:425)
	at java.net.Socket.connect(Socket.java:375)
	at java.net.Socket.<init>(Socket.java:290)
	at java.net.Socket.<init>(Socket.java:118)
	at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.connect(RemoteTestRunner.java:443)
	at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:212)
	at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:151)

Could reproduce under Win2000. The problem shows up when the Eclipse JUnit 
server is slow in starting up. This can happen when switching to debug 
perspective or when launching JUnit tests under the debugger. There is a loop 
that attempts to compensate for this delay by retrying to connect multiple 
times with a delay. However, the timeout for the retries is too small for 
common cases, i.e., the retry is only done for 1 second. 

F4 fix candidate.

Impact if not fixed: running JUnit tests doesn't seem to run reliably and you 
often have to retry twice. The problem seems to be worse on Linux. Fix is 
trivial to increase the retry count and the retry interval. 

Index: RemoteTestRunner.java
===================================================================
RCS 
file: /home/eclipse/org.eclipse.jdt.junit/src/org/eclipse/jdt/internal/junit/run
ner/RemoteTestRunner.java,v
retrieving revision 1.8
diff -u -r1.8 RemoteTestRunner.java
--- RemoteTestRunner.java	11 Jun 2002 23:03:28 -0000	1.8
+++ RemoteTestRunner.java	18 Jun 2002 20:23:56 -0000
@@ -438,7 +438,7 @@
 		if (fDebugMode)
 			System.out.println("RemoteTestRunner: trying to 
connect" + fHost + ":" + fPort); //$NON-NLS-1$ //$NON-NLS-2$
 		Exception exception= null;
-		for (int i= 1; i < 5; i++) {
+		for (int i= 1; i < 10; i++) {
 			try{
 				fClientSocket= new Socket(fHost, fPort);
 				fWriter= new PrintWriter
(fClientSocket.getOutputStream(), false/*true*/);
@@ -449,7 +449,7 @@
 				exception= e;
 			}
 			try {
-				Thread.currentThread().sleep(200);
+				Thread.currentThread().sleep(2000);
 			} catch(InterruptedException e) {
 			}
 		}

Reviewed by Dirk Baeumer and Kai-Uwe Maetzel.
