To recreate this problem you have to have several projects open and then have a 
strict subset of them in a working set and then have that working set active in 
your package explorer. selecting more than one project from the working set in 
the package explorer and then clicking on generate javadoc. From the first 
screen in the wizard you should have some projects already selected for javadoc 
generation. Select a project that is not in your working set and then try  
clicking on finish. (nothing happens) For a brief split second a dialog pops up 
and disappears.

To recreate this problem you have to have several projects open and then have a 
strict subset of them in a working set and then have that working set active in 
your package explorer. selecting more than one project from the working set in 
the package explorer and then clicking on generate javadoc. From the first 
screen in the wizard you should have some projects already selected for javadoc 
generation. Select a project that is not in your working set and then try  
clicking on finish. (nothing happens) For a brief split second a dialog pops up 
and disappears.
I think the problem is something else, The command line may exceed the NT limit 
I found this in my .log:
java.io.IOException: CreateProcess: C:\j2sdk1.4.2\bin\javadoc.exe -d 
C:\temp\Javadoc -sourcepath 
C:\Source\Work\Proj\GCL\Tools\ScheTor\standard\Source\Java\ScheTor;C:\Source\Wor
k\Proj\GCL\Tools\ScheTor\standard\Source\Java\Tests;C:\Source\Work\Proj\GCL\Tool
s\ScheTor\standard\Source\Schema;C:\Source\Work\Proj\GCL\Tools\ScheTor\standard\
Source\Java\Generated\Schema;C:\Source\Work\Proj\GCL\Tools\ScheTor\standard\Sour
ce\Java\Generated\Make;C:\Source\Work\Proj\GCL\Tools\ScheTor\standard\Source\Jav
a\Scratch;C:\Source\Work\Proj\GCL\entprise\CusDAd\standard\Source\Java\CusDAd;C:
\Source\Work\Proj\GCL\entprise\CusDAd\standard\Source\Java\Tests;C:\Source\Work\
Proj\GCL\entprise\CusDAd\standard\Source\Schema;C:\Source\Work\Proj\GCL\entprise
\CusDAd\standard\Source\Java\Generated\Schema;C:\Source\Work\Proj\GCL\entprise\C
usDAd\standard\Source\Java\Generated\Make;C:\Source\Work\Proj\GCL\entprise\CusDA
d\standard\Source\Java\Scratch;C:\Source\Work\Proj\GCL\entprise\TestAdmin\standa
rd\Source\Java\TestAdmin;C:\Source\Work\Proj\GCL\entprise\TestAdmin\
	at java.lang.Win32Process.create(Native Method)
	at java.lang.Win32Process.<init>(Win32Process.java:66)
	at java.lang.Runtime.execInternal(Native Method)
	at java.lang.Runtime.exec(Runtime.java:566)
	at java.lang.Runtime.exec(Runtime.java:491)
	at java.lang.Runtime.exec(Runtime.java:457)
	at 
org.eclipse.jdt.internal.ui.javadocexport.JavadocWizard.executeJavadocGeneration
(JavadocWizard.java:227)
	at org.eclipse.jdt.internal.ui.javadocexport.JavadocWizard.performFinish
(JavadocWizard.java:185)
	at org.eclipse.jface.wizard.WizardDialog.finishPressed
(WizardDialog.java:608)
	at org.eclipse.jface.wizard.WizardDialog.buttonPressed
(WizardDialog.java:321)
	at org.eclipse.jface.dialogs.Dialog$1.widgetSelected(Dialog.java:423)
	at org.eclipse.swt.widgets.TypedListener.handleEvent
(TypedListener.java:89)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:81)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:840)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1933)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1640)
	at org.eclipse.jface.window.Window.runEventLoop(Window.java:583)
	at org.eclipse.jface.window.Window.open(Window.java:563)
	at org.eclipse.jdt.internal.ui.actions.GenerateJavadocAction.run
(GenerateJavadocAction.java:47)
	at org.eclipse.ui.internal.PluginAction.runWithEvent
(PluginAction.java:263)
	at org.eclipse.ui.internal.WWinPluginAction.runWithEvent
(WWinPluginAction.java:207)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:526)
	at org.eclipse.jface.action.ActionContributionItem.access$4
(ActionContributionItem.java:480)
	at org.eclipse.jface.action.ActionContributionItem$6.handleEvent
(ActionContributionItem.java:452)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:81)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:840)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1933)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1640)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1402)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:1385)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:845)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:291)
	at org.eclipse.core.launcher.Main.run(Main.java:747)
	at org.eclipse.core.launcher.Main.main(Main.java:583)

Martin, is there a way to pass an argument file to the javadoc exec to avoid 
long command lines. (e.g. @file).
We wanted to avoid the creation of a temp file.
The process is called using Runtime.exec and I didn't know that there is a limit
on the number arguments you can pass.
The list in the log does not look that long, could it be another problem, e.g. a
special character? We had a bug report where we found out that you can't pass
file names with chinese characters to javadoc.exe

What about creating an ant file (checkox in the wizard) and run this one?
I do not have chinese fonts installed on my machine. I noticed however that the 
command line below does end in \. However when I try and generate the javadoc 
that the last directory in the command line appears everything works fine. When 
the problem does occur the javadoc wizard doesn't do anything so creating the 
ant script never happens.

I looked at the code. The ANT file is create first, then the command is
executed. Can you check the log?

I didn't understand the other comment. When does the generation work? When you
leave away the directory with the strange name?
So is it a problem with characters not accepted by javadoc.exe, or could it
still be that the length of the command line is too long?
When the error occurs the ant script does not get created! I can only recreate 
this problem if I select many projects to have their javadoc generated. The end 
of the command seems to have some weird characters. The last directory 
specified in the command line is of a certain project. However when I generate 
the javadoc for that particular project without selecting all the other 
projects everything works fine!
hmmm. nothing in the .log?
look at comment #1 for the log entry
I strongly belive this occurs if you generate the javadoc for too many 
directories (i.e. the arguements to javadoc become too long). You can recreate 
this problem if you select all the projects in eclipse and try to generate the 
javadoc for all of them at the same time.
Any chance this bug could be looked at for 3.0?
fixed > 20040220

now using an argument file
