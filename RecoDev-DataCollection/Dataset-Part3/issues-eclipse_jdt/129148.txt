If I have:

class A {
  hashCode()
  equals()
}

class B extends A {
}

class C extends B {
}

and I generate hashcode/equals for class C, I get no warning that the (immediate) superclass has no hashCode/equals method, nor does the generated code call super.equals() as is the case if C extended A directly.

The call to super.hashCode and super.equals should always be called if it is present anywhere in the superclass hierarchy, unless it is specifically declared in Object.

By the way, good job in getting the implementation of .equals right. Most prats start citing Bloch about this sort of time. Needless to say, there are non-prats that appreciate a correct implementation when they see one :-)

If I have:

class A {
  hashCode()
  equals()
}

class B extends A {
}

class C extends B {
}

and I generate hashcode/equals for class C, I get no warning that the (immediate) superclass has no hashCode/equals method, nor does the generated code call super.equals() as is the case if C extended A directly.

The call to super.hashCode and super.equals should always be called if it is present anywhere in the superclass hierarchy, unless it is specifically declared in Object.

By the way, good job in getting the implementation of .equals right. Most prats start citing Bloch about this sort of time. Needless to say, there are non-prats that appreciate a correct implementation when they see one :-)
I should have said, this is against 3.2M5.
Agreed
Fixed in I20060314-1200
