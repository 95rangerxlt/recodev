BETA_JAVA8, JDK 1.8.0-ea-b115

Open java.util.stream.Collectors and try to create an AST for it.

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.CompoundAssignment.analyseCode(CompoundAssignment.java:52)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:43)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.doesNotCompleteNormally(LambdaExpression.java:309)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.isCompatibleWith(LambdaExpression.java:506)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4435)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4404)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:678)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:620)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getStaticFactory(Scope.java:4616)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.inferElidedTypes(AllocationExpression.java:501)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType(AllocationExpression.java:437)
	at org.eclipse.jdt.internal.compiler.ast.ReturnStatement.resolve(ReturnStatement.java:321)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:620)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:303)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:531)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1209)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1319)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:570)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1207)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:692)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1186)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:548)

BETA_JAVA8, JDK 1.8.0-ea-b115

Open java.util.stream.Collectors and try to create an AST for it.

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.CompoundAssignment.analyseCode(CompoundAssignment.java:52)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:43)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.doesNotCompleteNormally(LambdaExpression.java:309)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.isCompatibleWith(LambdaExpression.java:506)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4435)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4404)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:678)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:620)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getStaticFactory(Scope.java:4616)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.inferElidedTypes(AllocationExpression.java:501)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType(AllocationExpression.java:437)
	at org.eclipse.jdt.internal.compiler.ast.ReturnStatement.resolve(ReturnStatement.java:321)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:620)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:303)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:531)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1209)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1319)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:570)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1207)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:692)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1186)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:548)
That's a whopper. I'll work on it right away. Thanks for the report.
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=6612336f81825afdf894aa053e2e886c83842e87.

A sketch of the solution:

An earlier draft of JSR 335 required lambda bodies to be analyzed over and
over for every potentially applicable target type during overload resolution
and an error encountered in the lambda body upon the imposition of the target
type would disqualify that type (i.e the method whose suitable positional
parameter the target type was) and it would be declared incompatible and
eliminated from further reckoning.

This had the salutary effect of short circuiting flow analysis against that
target type.

In general JDT's flow analysis module is unprepared for programs broken from
the earlier's phase's perspective. We never run analysis if resolution triggered
errors.

The latest draft has eliminated this stipulation and (non-structural) errors in
lambda bodies do not influence the overload resolution. This is good  because we don't have to run resolve + analyze in the context of every target. However
for applicability testing, lambda bodies must be flow analyzed to discover
value/void compatibility constraints and also to compute the "result 
expressions" which influence overload resolution.

The solution opted for is to run resolve in silent mode (no errors surface)
but keep track of errors in lambda body that are not due to a particular target
type being imposed. If a lambda body is free of resolution errors then we
can go ahead and flow analyse. Thus by deferring flow analysis till we have
a kosher candidate, we are able to avoid the root cause of the problem
that manifested in different forms in this bug and bug 422516 and bug 422134.

I reinstated much of the machinery I rather over-eagerly pruned via bug
421897 and made the necessary changes.
Note to UI team: Compiler will not emit IProblem.TypeMismatch any more
for issues with return statement types. Instead expect IProblem.ReturnTypeMismatch.
Not sure if this will break your test suites and/or quick fix support.
Srikanth, the fix for this bug changes LambdaExpression.isPertinentToApplicability() in a why that seems to break type inference.

Specifically, if the target type is an inference variable, it will not be able to answer a proper sam. In the current version isPertinentToApplicability(TB) will answer true in this case. However, one purpose of this check is to *avoid* checking constraints against inference variables by saying the expression is *not* pertinent to applicability.

Perhaps that change is just an unintended side effect of reverting previous  over-eager pruning?

Looking at 15.12.2.2 I only see three items to check for LE:
- An implicitly-typed lambda expression
- An explicitly-typed lambda expression whose body is an expression that is not pertinent to applicability.
- An explicitly-typed lambda expression whose body is a block, where at least one return expression is not pertinent to applicability. 

If any of these holds, the LE is not pertinent to applicability, otherwise it is.

Is it safe for me to remove everything concerning sam from this method??
(In reply to Stephan Herrmann from comment #4)
> Srikanth, the fix for this bug changes
> LambdaExpression.isPertinentToApplicability() in a why that seems to break
> type inference.
> 
> Specifically, if the target type is an inference variable, it will not be
> able to answer a proper sam. In the current version
> isPertinentToApplicability(TB) will answer true in this case. However, one
> purpose of this check is to *avoid* checking constraints against inference
> variables by saying the expression is *not* pertinent to applicability.

I think you overlooked the comment: 

// Add the rule about type variable of the generic method.

in the first line of the method ? :)

Also https://bugs.eclipse.org/bugs/show_bug.cgi?id=400874#c35.

In the present state of affairs on BETA_JAVA8 branch, isPertinentToApplicability() 
gets called only by methods that have already ascertained functional interface
constraints, but I think we should leave that in there so this could be a 
general purpose API. The single abstract method computed is cached by the RB,
so repeated calls are very cheap.
(In reply to Srikanth Sankaran from comment #5)

> // Add the rule about type variable of the generic method.

This should do the trick if you replace the comment with: (untested)

	if (targetType instanceof TypeVariableBinding) {
			TypeVariableBinding typeVariable = (TypeVariableBinding) targetType;
			MethodBinding method = (MethodBinding) (typeVariable.declaringElement instanceof MethodBinding ? typeVariable.declaringElement : null);
			if (method != null) {
				TypeVariableBinding[] typeVariables = method.typeVariables();
				for (int i = 0, length = typeVariables == null ? 0 : typeVariables.length; i < length; i++) {
					if (TypeBinding.equalsEquals(typeVariables[i], typeVariable))
						return false;
				}
			}
		}
(In reply to Srikanth Sankaran from comment #5)
> I think you overlooked the comment: 
> 
> // Add the rule about type variable of the generic method.
> 
> in the first line of the method ? :)

I saw it but apparently my semantic analysis for English was disabled at that time :-/

 
> Also https://bugs.eclipse.org/bugs/show_bug.cgi?id=400874#c35.
> 
> In the present state of affairs on BETA_JAVA8 branch,
> isPertinentToApplicability() 
> gets called only by methods that have already ascertained functional
> interface
> constraints, but I think we should leave that in there so this could be a 
> general purpose API. The single abstract method computed is cached by the RB,
> so repeated calls are very cheap.

Mh, which of the "false" branches should be overruled by detecting a sam problem, causing "true" to be returned? Inference needs the "false" value for all conditions mentioned in 15.12.2.2. I believe checking the sam should always happen outside isPertinentToApplicability(). Actually, *depending on* isPertinentToApplicability() check for proper sam will happen *at different points in time*.

I'm starting to think that current use of isPertinentToApplicability() in BETA_JAVA8 and use from type inference *might* be two different animals. In the inference case we definitely know which method we are checking and don't need to reverse engineer the method from the type variable.

I tried your suggestions from comment 6 and yes, for the given test case it behaves correctly, but AFAICS it checks a different condition:
 - "Is the target type a type variable declared in any method?"
Everything inside "if (method != null) { .. }" looks redundant to me: "If the type variable is declared by a method does the method declare this type variable?"

According to 15.12.2.2 I need to know whether the target type is a type variable of *the method m being checked*. This might make a semantic difference when resolving nested generic method calls!
I've merged my understanding of the different usage scenarios of isPertinentToApplicability() into http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=sherrmann/NewTypeInference&id=fd4039dcaf122a1bf766dda8a76be511f43fb15e

- still no checks for proper sam (until convinced differently :)

- type variable check at two levels of precision:
  - from type inference: method is known, check specifically
  - internal calls: method is not known, check if type variable is declared
    by any method

From my pov this version is good (no more FIXMEs in LE :)), let me know if you see any problems.
(In reply to Stephan Herrmann from comment #7)

We are freely switching between commenting on 3 different bugs :)

> Mh, which of the "false" branches should be overruled by detecting a sam
> problem, causing "true" to be returned? Inference needs the "false" value
> for all conditions mentioned in 15.12.2.2. I believe checking the sam should
> always happen outside isPertinentToApplicability(). Actually, *depending on*
> isPertinentToApplicability() check for proper sam will happen *at different
> points in time*.

Correct. Which is why the TVB check should happen before the SAM check.

> I'm starting to think that current use of isPertinentToApplicability() in
> BETA_JAVA8 and use from type inference *might* be two different animals. In
> the inference case we definitely know which method we are checking and don't
> need to reverse engineer the method from the type variable.

I don't think so.
See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=419315#c13.


> I tried your suggestions from comment 6 and yes, for the given test case it
> behaves correctly, but AFAICS it checks a different condition:

Yes - acknowledged in https://bugs.eclipse.org/bugs/show_bug.cgi?id=419315#c13.
See the suggestion about InvocationSite.tagAsCandidateMethod

>  - "Is the target type a type variable declared in any method?"
> Everything inside "if (method != null) { .. }" looks redundant to me: "If
> the type variable is declared by a method does the method declare this type
> variable?"

Yes, that is a silly check :) I can't believe I wrote that :)
(In reply to Stephan Herrmann from comment #8)
> I've merged my understanding of the different usage scenarios of
> isPertinentToApplicability() into
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=sherrmann/
> NewTypeInference&id=fd4039dcaf122a1bf766dda8a76be511f43fb15e
> 
> - still no checks for proper sam (until convinced differently :)

It is just a matter of ordering the statements. TVB handling code should
before SAM check.

>   - internal calls: method is not known, check if type variable is declared
>     by any method

I don't think this is correct. We should always answer true to a TVB if we 
don't have a candidate method to associate with - That it is a type variable 
of *some* method does not matter - (i.e LE should be declared PertinentTo* 
that TVB)
We're getting closer :)

(In reply to Srikanth Sankaran from comment #9)
> (In reply to Stephan Herrmann from comment #7)
> 
> We are freely switching between commenting on 3 different bugs :)

you found me again :)

> > Mh, which of the "false" branches should be overruled by detecting a sam
> > problem, causing "true" to be returned? Inference needs the "false" value
> > for all conditions mentioned in 15.12.2.2. I believe checking the sam should
> > always happen outside isPertinentToApplicability(). Actually, *depending on*
> > isPertinentToApplicability() check for proper sam will happen *at different
> > points in time*.
> 
> Correct. Which is why the TVB check should happen before the SAM check.

This still doesn't say which of the "false" branches should be overruled.
If you ask me, I'd push the sam check to the bottom so that we already know we'll answer "true" anyway ;-P
 
> > I'm starting to think that current use of isPertinentToApplicability() in
> > BETA_JAVA8 and use from type inference *might* be two different animals. In
> > the inference case we definitely know which method we are checking and don't
> > need to reverse engineer the method from the type variable.
> 
> I don't think so.

In opposition to what? "different animals", or "we definitely know"?
 


(In reply to Srikanth Sankaran from comment #10)
> (In reply to Stephan Herrmann from comment #8)
> >   - internal calls: method is not known, check if type variable is declared
> >     by any method
> 
> I don't think this is correct. We should always answer true to a TVB if we 
> don't have a candidate method to associate with - That it is a type variable 
> of *some* method does not matter - (i.e LE should be declared PertinentTo* 
> that TVB)

I'm not fully sure I understand.

My latest commit has:
	if (targetType instanceof TypeVariableBinding) {
		if (method != null) { // when called from type inference
			if (((TypeVariableBinding)targetType).declaringElement == method)
				return false;
		} else { // for internal calls
			TypeVariableBinding typeVariable = (TypeVariableBinding) targetType;
			if (typeVariable.declaringElement instanceof MethodBinding)
				return false;
		}
	}

Are you suggesting the else branch should be removed entirely (to answer true if none of the other conditions below hold)?
Let me step back and mention the role of isPertinentToApplicability() for type inference:

Any expressions *not pertinent...* are ignored during applicability check (18.5.1) in order to prevent premature inference failure that could otherwise happen while we still don't have a target type.

Later, during invocation type inference (18.5.2) we *only* add constraints for those expressions ignored during applicability check. At this point we definitely have a target type and can do better justice to the hard parts of inference.

IOW, by answering false, isPertinent helps the inference to avoid trying to answer questions which it cannot answer at that point.


For the overloaded case, between both checks we'll apply 18.5.4 (More Specific Method Inference), which, however, isn't implemented yet - simply because I didn't observe any regressions as witness for this situation. This will be needed when we fully integrate F & G.
(In reply to Stephan Herrmann from comment #11)

> This still doesn't say which of the "false" branches should be overruled.
> If you ask me, I'd push the sam check to the bottom so that we already know
> we'll answer "true" anyway ;-P

All we need to do is to:

    - Add some code which implements the part about a lambda not being
pertinent to applicability relative to the type variable if the type 
variable is declared by the current candidate method. This code should
precede the sam check.

    - Provide an override TVB.getSingleAbstractMethod that returns null.

Rest of the true/false returns are correct as they are.

> In opposition to what? "different animals", or "we definitely know"?

With the above two in place, they are not different animals.

> My latest commit has:
> 	if (targetType instanceof TypeVariableBinding) {
> 		if (method != null) { // when called from type inference
> 			if (((TypeVariableBinding)targetType).declaringElement == method)
> 				return false;
> 		} else { // for internal calls
> 			TypeVariableBinding typeVariable = (TypeVariableBinding) targetType;
> 			if (typeVariable.declaringElement instanceof MethodBinding)
> 				return false;
> 		}
> 	}
> 
> Are you suggesting the else branch should be removed entirely (to answer
> true if none of the other conditions below hold)?

Exactly. With TVB.gSAM returning null, we would automatically answer true.
You seem to see situations where answering true is interesting. For me (part G pov) "false" is the interesting case which should never be suppressed.

Given that I don't understand the motivation for your version I'll let it rest until we integrate, OK?
(In reply to Stephan Herrmann from comment #14)
> You seem to see situations where answering true is interesting. For me (part
> G pov) "false" is the interesting case which should never be suppressed.

They are two sides of the same coin - isn't it ? 

> Given that I don't understand the motivation for your version I'll let it
> rest until we integrate, OK?

Sounds good.
Looks like the decision not to report errors immediately is affecting methods too, instead of just functional expression as originally imagined - see bug 458396. Is this something that should never happen or should method declarations and other kinds should be prepared for this and handle it in a better way?

Stephan, since you were involved in the review, can you throw some light on this.
(In reply to Jay Arthanareeswaran from comment #16)
> Looks like the decision not to report errors immediately is affecting
> methods too, instead of just functional expression as originally imagined -
> see bug 458396. Is this something that should never happen or should method
> declarations and other kinds should be prepared for this and handle it in a
> better way?

Just to close the loop here: Right, this should not happen.

(from bug 458396 comment #6)
> Ergo: problem is that the silent mode can escape to locations where error
> reporting must be back to normal.

BTW, the question is not lambda vs. method, but "inside lambda" vs. "outside lambda". See bug 458396 for details and fix.
