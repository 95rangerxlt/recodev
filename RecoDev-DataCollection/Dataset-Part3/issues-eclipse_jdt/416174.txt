// --
import java.util.List;

import org.eclipse.jdt.annotation.NonNull;

public class X {
	void  foo(List<X> lx) {
	}
}

class Z extends X {
	void  foo(List<@NonNull X> xy) {
	}
}

results in a name clash error: 

"Name clash: The method foo(List<X>) of type Z has the same erasure as foo(List<X>) of type X but does not override it"

// --
import java.util.List;

import org.eclipse.jdt.annotation.NonNull;

public class X {
	void  foo(List<X> lx) {
	}
}

class Z extends X {
	void  foo(List<@NonNull X> xy) {
	}
}

results in a name clash error: 

"Name clash: The method foo(List<X>) of type Z has the same erasure as foo(List<X>) of type X but does not override it"
With null analysis disabled, it works OK. Stephan, please take a look
Likely the same underlying issue as bug 416180
This is an interesting one.

We want to report an error, but a specific one from null analysis, not the Java
name clash error.

Not reporting the name clash is fixed by augmenting isEquivalentTo() by the
same stanza as isCompatibleWith().

Test & fix released via commit e6d5c8658dcb2261d05af5cdc17c2490045274a2

FIXME added for detecting the null spec violation by the override -> bug 416190.
resolved
*** Bug 416180 has been marked as a duplicate of this bug. ***
