2.1

- selected 2 .java files from 2 different projects (InternalPlatform.java and 
InternalBootLoader.java) and 1 whole project (new plugin 
org.eclipse.ui.versioncheck)
- exported it as a jar, with "export source folder structure" checked
- it did not create folders in the jar for the projects

2.1

- selected 2 .java files from 2 different projects (InternalPlatform.java and 
InternalBootLoader.java) and 1 whole project (new plugin 
org.eclipse.ui.versioncheck)
- exported it as a jar, with "export source folder structure" checked
- it did not create folders in the jar for the projects
As the name tells it exports the source folders. This is for distributing the
source to clients which might not wan to know about your project structure.

I can add another option which adds the project as well. A more natural way to
produce source exports is to use File > Export... > Zip file. JAR export's main
task is to generate a JAR with class files.

My feeling is that not including the project level is fine if only exporting 
files from within one project, but if crossing projects it should be included.
What exactly is the reason to choose JAR export? Note that you cannot export
class files if you choose to export the folder structure.
For my purposes, zip export works just fine.  I just happened to choose jar 
since in my view jars are just like zips, with extra support e.g. for manifests.
I ended up going with zip in the end.  However, I felt that the behaviour I got 
from the jar export with the options I specified was unexpected.

This has been fixed a while ago.
