Build ID: I20071213-1700

Steps To Reproduce:
Create class Foo as so (and an empty class Bar):

>>>
package net.saff.glinda;

import static java.util.Arrays.asList;

import java.util.List;

public class Foo {
	public List<String> abc(Bar bar) {
		return asList("a", bar.toString());
	}
}
<<<

Now, move method abc to parameter bar.  The result is:

>>>
package net.saff.glinda;

import static java.util.Arrays.asList;

import java.util.List;

public class Bar {

	public List<String> abc() {
		return Foo.asList("a", toString());
	}

}
<<<

Since the static import is moved over, just removing the "Foo." would produce correct and compiling code.

More information:

Build ID: I20071213-1700

Steps To Reproduce:
Create class Foo as so (and an empty class Bar):

>>>
package net.saff.glinda;

import static java.util.Arrays.asList;

import java.util.List;

public class Foo {
	public List<String> abc(Bar bar) {
		return asList("a", bar.toString());
	}
}
<<<

Now, move method abc to parameter bar.  The result is:

>>>
package net.saff.glinda;

import static java.util.Arrays.asList;

import java.util.List;

public class Bar {

	public List<String> abc() {
		return Foo.asList("a", toString());
	}

}
<<<

Since the static import is moved over, just removing the "Foo." would produce correct and compiling code.

More information:
I have figured out where the problem is but I am not familiar enough with the JDT AST to be able to fix it properly.
Can somebody tell me how I can given an org.eclipse.jdt.core.IType and org.eclipse.jdt.core.dom.ITypeBinding determine if one is assignable to the other?
Created attachment 234055
Fix for the bug
Created attachment 234722
better patch

This contribution complies with http://www.eclipse.org/legal/CoO.php

now uses isSubtypeCompatible instead of isAssignmentCompatible. Also follows the patch guidelines better. The reason I introduce test57 is to avoid clashing with my patch for bug 356687
Comment on attachment 234722
better patch

(In reply to comment #3)
> Created attachment 234722 [details] [diff]
> better patch

- I am unable to apply this patch. It gives invalid patch error on trying to apply.

- Looking at the existing impl, in MoveInstanceMethodProcessor.MethodBodyRewriter.visit(MethodInvocation node), we use fMethod's declaring type to create the EXPRESSION_PROPERTY when 'method' is static:
rewrite.set(node, MethodInvocation.EXPRESSION_PROPERTY, ast.newSimpleType(ast.newSimpleName(fMethod.getDeclaringType().getElementName())), null);

It would not work in this case (result will be X.bar() instead of SnippetX.bar()):
---------------------------------
package p;
import static java.util.Arrays.asList;
public class SnippetX {	
	class X {
		void foo(Y y) { // Move foo
			asList(y.toString());
			bar();
		}
	}
	
	public static void bar() {
	}
}

package p;
public class Y {	
}
---------------------------------
So, "fMethod.getDeclaringType().getElementName()" should be replaced with "method.getDeclaringClass().getName()" i.e. method's declaring type.

- Also, your fix does not handle the above case.
Created attachment 234754
Better patch

This contribution complies with http://www.eclipse.org/legal/CoO.php

Noopur,

Not sure what I did wrong with the previous patch for you not to be able to import it. Hopefully this one is better.

I have changed the code to handle the test case you gave.
I have found more test cases that fail.....
Please ignore the patch. I will submit a new one.
Created attachment 234785
Now handles inner classes as well.

This contribution complies with http://www.eclipse.org/legal/CoO.php

Ok this latest patch now handles all the cases I can think of.
(In reply to comment #7)
> Created attachment 234785 [details] [diff]
> Now handles inner classes as well.

Nikolay, you would have to create a patch again and attach here :-).
The current patch cannot be applied since master now contains the fix for bug 356687 on the same files.
Created attachment 234799
merged with head

This contribution complies with http://www.eclipse.org/legal/CoO.php

After some merge difficulties I managed to get it correct. Here is a new patch.
Comment on attachment 234799
merged with head

- for loop on 'fStaticImports' can be replaced with 'fStaticImports.contains(method)'

- method.getDeclaringClass() can be extracted to a local variable and should have a null check.

- 'qualifiedName.substring(packageName.length() + 1)' will not work for default package where the package name's length is 0.

- Please follow the following pattern for any new addition to the contributors list and keep it in a single line: 
Name <e-mail> - summary - https://bugs.eclipse.org/BUG_NUMBER
Created attachment 234805
Latest code review comments

This contribution complies with http://www.eclipse.org/legal/CoO.php

Thanks Noopur,
Here is my latest attempt
Thanks Nikolay. Used IType#getTypeQualifiedName(char) to get the type qualified name of declaring type. Please have a look:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=7acac94cbbccefac8bdf219e4587fd5562de555d
Quite elegant in the end. Thanks Noopur.
