RC4

1) Follow the smoke test up to the Refactoring->Extract Method
2) Follow the extract method case until you look at the preview.
3) observe. there is a node in the preview labelled "add new method
computeConstraints".
4) click on the change to view it.
5) observe: the change shows the addition of an empty method like so:

	/**
	 * @param logo
	 * @param constraintsLogo1
	 */
	private void computeConstraints(JLabel logo, GridBagConstraints constraintsLogo1) {
		
	}

This, however is not what will be inserted. What will be inserted is this
(correct) method:

	/**
	 * @param logo
	 * @param constraintsLogo1
	 */
	private void computeConstraints(JLabel logo, GridBagConstraints constraintsLogo1) {
		constraintsLogo1.gridx = 2; constraintsLogo1.gridy = 0;
		constraintsLogo1.gridwidth = 1; constraintsLogo1.gridheight = 1;
		constraintsLogo1.anchor = GridBagConstraints.CENTER;
		getContentPane().add(logo, constraintsLogo1);
	}


Note that viewing the change on a level above (the type AboutDialog) correctly
shows the change.

RC4

1) Follow the smoke test up to the Refactoring->Extract Method
2) Follow the extract method case until you look at the preview.
3) observe. there is a node in the preview labelled "add new method
computeConstraints".
4) click on the change to view it.
5) observe: the change shows the addition of an empty method like so:

	/**
	 * @param logo
	 * @param constraintsLogo1
	 */
	private void computeConstraints(JLabel logo, GridBagConstraints constraintsLogo1) {
		
	}

This, however is not what will be inserted. What will be inserted is this
(correct) method:

	/**
	 * @param logo
	 * @param constraintsLogo1
	 */
	private void computeConstraints(JLabel logo, GridBagConstraints constraintsLogo1) {
		constraintsLogo1.gridx = 2; constraintsLogo1.gridy = 0;
		constraintsLogo1.gridwidth = 1; constraintsLogo1.gridheight = 1;
		constraintsLogo1.anchor = GridBagConstraints.CENTER;
		getContentPane().add(logo, constraintsLogo1);
	}


Note that viewing the change on a level above (the type AboutDialog) correctly
shows the change.
The problem is that the newly created method contains a copy target edits, but 
the copy source edits aren't executed when creating the preview for a single 
method add (they belong to a different range).

Fix is to execute all edits and then simply clip the result (see class 
TextChange#getPreviewContent(TextEditChangeGroup[] changeGroups, IRegion 
region, boolean expandRegionToFullLine, int surroundingLines, IProgressMonitor 
pm)).
*** Bug 72112 has been marked as a duplicate of this bug. ***
Created attachment 15537
Patch that fixes the problem

Dani, can you please review and release
Patch is against org.eclipse.text. 
Any numbers/ideas about the performance impact of this change?
This only affects the preview and the refactoring change execution when there
are unchecked modifications. Other text edit sceanrios like format are not affected.
Committed to HEAD. Will be in I200411020800.
