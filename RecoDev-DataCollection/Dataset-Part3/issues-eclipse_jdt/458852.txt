Bug 458704 introduced new API to TextSearchRequestor to support faster text searches. Update the JDT's TextSearchRequestors to support collecting results from multiple jobs running in parallel.

I see three subclasses of TextSearchRequestor:
1) org.eclipse.jdt.internal.corext.refactoring.util.QualifiedNameFinder.ResultCollector, which is used in package rename refactorings
2) org.eclipse.jdt.internal.ui.propertiesfileeditor.PropertyKeyHyperlink.ResultCollector, which is used to find hyperlink targets to keys in .properties files
3) An anonymous class in org.eclipse.jdt.ui.examples.MyRenameTypeParticipant.createChange(), which is in the org.eclipse.jdt.ui.tests plug-in

Dani, do you know of any other subclasses?

Bug 458704 introduced new API to TextSearchRequestor to support faster text searches. Update the JDT's TextSearchRequestors to support collecting results from multiple jobs running in parallel.

I see three subclasses of TextSearchRequestor:
1) org.eclipse.jdt.internal.corext.refactoring.util.QualifiedNameFinder.ResultCollector, which is used in package rename refactorings
2) org.eclipse.jdt.internal.ui.propertiesfileeditor.PropertyKeyHyperlink.ResultCollector, which is used to find hyperlink targets to keys in .properties files
3) An anonymous class in org.eclipse.jdt.ui.examples.MyRenameTypeParticipant.createChange(), which is in the org.eclipse.jdt.ui.tests plug-in

Dani, do you know of any other subclasses?
The Gerrit review is here: https://git.eclipse.org/r/40809

When running a hosted Eclipse instance and enabling performance tracing, I saw the text search portion of properties file hyperlink detection speed up by a factor of 2x (~300ms -> ~150ms), and the text search portion of package rename refactoring speed up by a factor of 2x (~1300ms -> 650ms). I found both operations to be perceptibly faster.
(In reply to Terry Parker from comment #0)
> Bug 458704 introduced new API to TextSearchRequestor to support faster text
> searches. Update the JDT's TextSearchRequestors to support collecting
> results from multiple jobs running in parallel.
> 
> I see three subclasses of TextSearchRequestor:
> 1)
> org.eclipse.jdt.internal.corext.refactoring.util.QualifiedNameFinder.ResultCollector,
> which is used in package rename refactorings
> 2)
> org.eclipse.jdt.internal.ui.propertiesfileeditor.PropertyKeyHyperlink.ResultCollector,
> which is used to find hyperlink targets to keys in .properties files
> 3) An anonymous class in
> org.eclipse.jdt.ui.examples.MyRenameTypeParticipant.createChange(), which is
> in the org.eclipse.jdt.ui.tests plug-in
> 
> Dani, do you know of any other subclasses?

Nope, those are the ones, but I'd leave the example alone.
(In reply to Dani Megert from comment #2)
> (In reply to Terry Parker from comment #0)
> > Bug 458704 introduced new API to TextSearchRequestor to support faster text
> > searches. Update the JDT's TextSearchRequestors to support collecting
> > results from multiple jobs running in parallel.
> > 
> > I see three subclasses of TextSearchRequestor:
> > 1)
> > org.eclipse.jdt.internal.corext.refactoring.util.QualifiedNameFinder.ResultCollector,
> > which is used in package rename refactorings
> > 2)
> > org.eclipse.jdt.internal.ui.propertiesfileeditor.PropertyKeyHyperlink.ResultCollector,
> > which is used to find hyperlink targets to keys in .properties files
> > 3) An anonymous class in
> > org.eclipse.jdt.ui.examples.MyRenameTypeParticipant.createChange(), which is
> > in the org.eclipse.jdt.ui.tests plug-in
> > 
> > Dani, do you know of any other subclasses?
> 
> Nope, those are the ones, but I'd leave the example alone.

I can either revert the example completely or update it with comments only. Let me know which one you would prefer.
(In reply to Terry Parker from comment #3)
> I can either revert the example completely or update it with comments only.
> Let me know which one you would prefer.

Let's just revert the changes for that class.
(In reply to Dani Megert from comment #4)
> (In reply to Terry Parker from comment #3)
> > I can either revert the example completely or update it with comments only.
> > Let me know which one you would prefer.
> 
> Let's just revert the changes for that class.

Done.
Gerrit change https://git.eclipse.org/r/40809 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=e353fccc97e507902823e751250b377459238461
Thanks Terry, submitted with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=1a8fa338581bcf92326491e70672c0d91b69acc2
(In reply to Dani Megert from comment #7)
> Thanks Terry, submitted with
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/
> ?id=1a8fa338581bcf92326491e70672c0d91b69acc2

Thanks also from my side. Dani, is JDT using the "noteworthy" tag? I think this one qualifies for N&N.
(In reply to Lars Vogel from comment #8)
> (In reply to Dani Megert from comment #7)
> > Thanks Terry, submitted with
> > http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/
> > ?id=1a8fa338581bcf92326491e70672c0d91b69acc2
> 
> Thanks also from my side. Dani, is JDT using the "noteworthy" tag? I think
> this one qualifies for N&N.

It doesn't hurt to use it, but that's not our main/only source to create the N&N at the end of a milestone.
