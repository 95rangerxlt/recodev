http://www.ott.oti.com/uvm/OTIIBM/numbat/Testing/JCK-
14/tests/lang/BINC/binc014/binc01401/binc01401.html - POSITIVE TEST
	This is a binary compatibility test. You need to compile first the 
first test case and then the second. Not both at the same time. And then 
execute it. The problem with the Eclipse
	compiler occurs only at runtime.

Test cases:

	javac 1.4:
		compilation: OK
		runtime:
Super

	javac 1.3: 
		compilation: OK
		runtime:
Hyper
failed

	Eclipse compiler:
		compilation: OK
		runtime:
Hyper
failed

NOTES:

OT (18/09/2001 6:27:24 PM)
	javac 1.4 declares the declaring class of the field h to be binc01401 
instead of Hyper like we do.

	We can clearly see the difference for the getField bytecode.

http://www.ott.oti.com/uvm/OTIIBM/numbat/Testing/JCK-
14/tests/lang/BINC/binc014/binc01401/binc01401.html - POSITIVE TEST
	This is a binary compatibility test. You need to compile first the 
first test case and then the second. Not both at the same time. And then 
execute it. The problem with the Eclipse
	compiler occurs only at runtime.

Test cases:

	javac 1.4:
		compilation: OK
		runtime:
Super

	javac 1.3: 
		compilation: OK
		runtime:
Hyper
failed

	Eclipse compiler:
		compilation: OK
		runtime:
Hyper
failed

NOTES:

OT (18/09/2001 6:27:24 PM)
	javac 1.4 declares the declaring class of the field h to be binc01401 
instead of Hyper like we do.

	We can clearly see the difference for the getField bytecode.
Adapted to this change for 1.4 mode only.
Fixed
