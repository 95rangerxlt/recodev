Version: 4.2.0  Build id: I20120608-1400

Tests below started to fail from JDK8 b108 in org.eclipse.ltk.core.refactoring.tests package:
testReadDescriptor4
testReadDescriptor5


Expected refactoring descriptor is not equal to actual one: expected:<... comment,arguments={[arg1=value 1, version=1.0]},flags=1]> but was:<... comment,arguments={[version=1.0, arg1=value 1]},flags=1]>

junit.framework.ComparisonFailure: Expected refactoring descriptor is not equal to actual one: expected:<... comment,arguments={[arg1=value 1, version=1.0]},flags=1]> but was:<... comment,arguments={[version=1.0, arg1=value 1]},flags=1]>
at org.eclipse.ltk.core.refactoring.tests.history.RefactoringHistorySerializationTests.compareReadHistory(RefactoringHistorySerializationTests.java:65)
at org.eclipse.ltk.core.refactoring.tests.history.RefactoringHistorySerializationTests.testReadDescriptor4(RefactoringHistorySerializationTests.java:216)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:501)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:259)
at org.eclipse.test.UITestApplication$2.run(UITestApplication.java:197)
at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3529)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3182)
at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1022)
at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:916)
at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:86)
at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:585)
at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:540)
at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
at org.eclipse.test.UITestApplication.runApplication(UITestApplication.java:140)
at org.eclipse.test.UITestApplication.run(UITestApplication.java:62)
at org.eclipse.test.UITestApplication.start(UITestApplication.java:212)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
at org.eclipse.equinox.launcher.Main.main(Main.java:1414)
at org.eclipse.core.launcher.Main.main(Main.java:34)

Steps to Reproduce:
Use eclipse-Automated-Tests-4.2 to run automated tests with jdk8.
1. Install jdk8 (b108 or b109) from http://jdk8.java.net/download.html 
2. Run ltkcorerefactoringtests 

The failures are reproducible on solaris & windows (32-bit)

Version: 4.2.0  Build id: I20120608-1400

Tests below started to fail from JDK8 b108 in org.eclipse.ltk.core.refactoring.tests package:
testReadDescriptor4
testReadDescriptor5


Expected refactoring descriptor is not equal to actual one: expected:<... comment,arguments={[arg1=value 1, version=1.0]},flags=1]> but was:<... comment,arguments={[version=1.0, arg1=value 1]},flags=1]>

junit.framework.ComparisonFailure: Expected refactoring descriptor is not equal to actual one: expected:<... comment,arguments={[arg1=value 1, version=1.0]},flags=1]> but was:<... comment,arguments={[version=1.0, arg1=value 1]},flags=1]>
at org.eclipse.ltk.core.refactoring.tests.history.RefactoringHistorySerializationTests.compareReadHistory(RefactoringHistorySerializationTests.java:65)
at org.eclipse.ltk.core.refactoring.tests.history.RefactoringHistorySerializationTests.testReadDescriptor4(RefactoringHistorySerializationTests.java:216)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:501)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:259)
at org.eclipse.test.UITestApplication$2.run(UITestApplication.java:197)
at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3529)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3182)
at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1022)
at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:916)
at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:86)
at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:585)
at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:540)
at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
at org.eclipse.test.UITestApplication.runApplication(UITestApplication.java:140)
at org.eclipse.test.UITestApplication.run(UITestApplication.java:62)
at org.eclipse.test.UITestApplication.start(UITestApplication.java:212)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
at org.eclipse.equinox.launcher.Main.main(Main.java:1414)
at org.eclipse.core.launcher.Main.main(Main.java:34)

Steps to Reproduce:
Use eclipse-Automated-Tests-4.2 to run automated tests with jdk8.
1. Install jdk8 (b108 or b109) from http://jdk8.java.net/download.html 
2. Run ltkcorerefactoringtests 

The failures are reproducible on solaris & windows (32-bit)
Looks like a problem in LTK test.
Manju, please investigate.
The tests are failing when executed using JDK8 b108. After analysing the issue, came to the conclusion that the problem is with HashMap#put(K, V) in JDK b108. The method has a different implementation in JDK8 b104 and JDK8 b108.

Try the sample snippet given below:
import java.util.HashMap;
import java.util.Map;

public class TestHashMap {

	public static void main(String[] args) {
		Map map = new HashMap(6);
		map.put("arg1", "1");
		map.put("version", "1.0");

		System.out.println(map.values());
	}
}

When the above code is executed using JDK8 b104 the result is: [1, 1.0]
But when executed using JDK8 b108 the result is: [1.0, 1]
In testReadDescriptor4, the expected result contains "arguments={arg1=value 1, version=1.0}" but the actual result contains "arguments={version=1.0, arg1=value 1}". The order of the argument is reversed and hence the test fails. The argument is stored in a HashMap and while retrieving the order of insertion is not maintained in JDK b108.
(In reply to Manju Mathew from comment #3)
> The argument is stored in a HashMap and while retrieving the order of
> insertion is not maintained in JDK b108.

HashMap is free to use any order it likes, so this sounds like a wrong usage of HashMap on our part.
Created attachment 236016
Patch.

Replaced the usage of HashMap with LinkedHashMap in MockRefactoringDescriptor.java and RefactoringSessionReader.java so that the order is maintained. Executed  org.eclipse.ltk.core.refactoring.tests.AllTests using JDK8 b108 and the tests are green.
Markus, let me know if the change is fine.
(In reply to Manju Mathew from comment #5)
I don't like the change in the RefactoringSessionReader because it could be a performance blooper. That map shouldn't have to be a LinkedHashMap just to satisfy our tests.

Better fix this in MockRefactoringDescriptor#toString() by sorting the map there (e.g. wrap getArguments() into a TreeMap).
(In reply to comment #6)
> Better fix this in MockRefactoringDescriptor#toString() by sorting the map there
> (e.g. wrap getArguments() into a TreeMap).

That could very well end up being slower than just using LinkedHashMap. LinkedHashMap API docs briefly mentions

"Performance is likely to be just slightly below that of HashMap, due to the added expense of maintaining the linked list, with one exception: Iteration over the collection-views of a LinkedHashMap requires time proportional to the size of the map, regardless of its capacity. Iteration over a HashMap is likely to be more expensive, requiring time proportional to its capacity. "

I've seen some libraries prefer LinkedHashMaps over HashMaps internally, often when there's just a few stored items, but I don't know if they've benchmarked it or going by the API docs.
Created attachment 236069
Updated Patch

Agreeing with Markus on this. Since we do not have any issue with the existing functionality and the intention of the fix is just for the test case to pass, changes in RefactoringSessionReader is an overhead.
Updated the patch by fixing in MockRefactoringDescriptor#toString(). The tests pass in JDK8 b108.
(In reply to Manju Mathew from comment #8)
Thanks, please release.


(In reply to Timo Kinnunen from comment #7)
Thanks for weighing in. However, as Manju said, there are other factors in the game here that pull us more into the direction of a non-invasive fix: The code is in maintenance mode. Without more investigation, we can't say for sure how often these descriptors are created. The additional memory consumption of LinkedHashMap is another factor.
Released the fix as : http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=446f309817085d3d1ee3d5c868acb9b7eaaf9ad4
