I20050329-2000

Consider this CU:

---------

class Generic<T> {
	T fT;

	public Generic(T field) {
		fT= field;
	}
}

class SubGeneric<E extends Number> extends Generic<E> {

	E fE;
	Number fNumber;
	
	public SubGeneric(E field, Number n) {
		super(field);
	}
	
}
-----------------

- in SubGeneric, execute Source>Create ctor using fields
- in the dialog, select fNumber

-> Note: the dialog displays a warning, that the created ctor might be a duplicate

- in the dialog, uncheck fNumber and check fE

> expected: the duplicate warning would appear as well
< actual: the duplicate warning does not appear. Executing the change will
produce a second constructor that does not compile, as it has the same erasure
as the already existing one.

I20050329-2000

Consider this CU:

---------

class Generic<T> {
	T fT;

	public Generic(T field) {
		fT= field;
	}
}

class SubGeneric<E extends Number> extends Generic<E> {

	E fE;
	Number fNumber;
	
	public SubGeneric(E field, Number n) {
		super(field);
	}
	
}
-----------------

- in SubGeneric, execute Source>Create ctor using fields
- in the dialog, select fNumber

-> Note: the dialog displays a warning, that the created ctor might be a duplicate

- in the dialog, uncheck fNumber and check fE

> expected: the duplicate warning would appear as well
< actual: the duplicate warning does not appear. Executing the change will
produce a second constructor that does not compile, as it has the same erasure
as the already existing one.
Tobias, how expensive is this to fix. Annoying, but not critical for 3.1
This is a two-liner
Fixed > 20050504
