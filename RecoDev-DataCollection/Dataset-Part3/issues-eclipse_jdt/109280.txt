Applying the Extract Method refactoring to the following selection results in 
a new method that fails to compile.

Original program:

  private int f(boolean b1, boolean b2) {
    int n = 0;
    int i = 0;
    // Extract Method from here
    if (b1)
      i = 1;
    if (b2)
      n = n + i;
    // to here
    return n;
  }

Applying Extract Method on the selected code (signalled by the comments)
results with the following code: 

  private int f(boolean b1, boolean b2) {
    int n = 0;
    int i = 0;
    n = newMethod(b1, b2, n);
    return n;
  }

  private int newMethod(boolean b1, boolean b2, int n) {
    int i;
    if (b1)
      i = 1;
    if (b2)
      n = n + i;
    return n;
  }

Problem: Eclipse did not identify that the local variable i should be sent as 
a parameter. The program doesn't compile anymore, because in the statement n = 
n + i; in the new method, "the local variable i may not have been initialized".

I expected the refactored source to look like this:
 
  private int f(boolean b1, boolean b2) {
    int n = 0;
    int i = 0;
    n = newMethod(b1, b2, n, i);
    return n;
  }

  private int newMethod(boolean b1, boolean b2, int n, int i) {
    if (b1)
      i = 1;
    if (b2)
      n = n + i;
    return n;
  }

Applying the Extract Method refactoring to the following selection results in 
a new method that fails to compile.

Original program:

  private int f(boolean b1, boolean b2) {
    int n = 0;
    int i = 0;
    // Extract Method from here
    if (b1)
      i = 1;
    if (b2)
      n = n + i;
    // to here
    return n;
  }

Applying Extract Method on the selected code (signalled by the comments)
results with the following code: 

  private int f(boolean b1, boolean b2) {
    int n = 0;
    int i = 0;
    n = newMethod(b1, b2, n);
    return n;
  }

  private int newMethod(boolean b1, boolean b2, int n) {
    int i;
    if (b1)
      i = 1;
    if (b2)
      n = n + i;
    return n;
  }

Problem: Eclipse did not identify that the local variable i should be sent as 
a parameter. The program doesn't compile anymore, because in the statement n = 
n + i; in the new method, "the local variable i may not have been initialized".

I expected the refactored source to look like this:
 
  private int f(boolean b1, boolean b2) {
    int n = 0;
    int i = 0;
    n = newMethod(b1, b2, n, i);
    return n;
  }

  private int newMethod(boolean b1, boolean b2, int n, int i) {
    if (b1)
      i = 1;
    if (b2)
      n = n + i;
    return n;
  }
Sending i to the method is actually not needed since i isn't changed at read
outside of the refactored code. So the correct extract method has to look like this

  private int newMethod(boolean b1, boolean b2, int n) {
    int i= 0;
    if (b1)
      i = 1;
    if (b2)
      n = n + i;
    return n;
  }

Not passing i is only possible in the given case. If i is initialized with a construct that more complicated than a constant then it might not be possible to initialize the new local in the extracted method correctly. Reasons may be: code not visible since the body is generated in an outer class; reordering of statements which might break semantic. So the right thing to do here is to pass i.
Fixed for RC1.
*** Bug 116033 has been marked as a duplicate of this bug. ***
