I have implemented IClasspathContainer. When I add my container to a java 
project via Project Properties > JavaBuild Path > Libraries > Add Library 
wizard, the Package Explorer view is not updated if my container resolves to an 
empty classpath and the container does not appear in the view.

If I then close and then reopen the java project the container appears in the 
Package Explorer view correctly, even if the container resolves to an empty 
classpath.

This problem can be reproduced in Eclipse 2.1 as follows:

1. Open the Java Perspective, Package Explorer view.
2. Create a new Java Project.
3. Right-click the project and select Properties > Java Build Path > Libraries 
(tab).
4. Note the default JRE System Libraries container should appear in the list.
5. Select the Add Library button and then select the Required Plug-ins 
container from the Add Library page.
6. Then select Next and then Finish to return to the Properties page.
7. In the Properties page select OK to return to the Package Explorer view.
8. Note the Package Explorer view has not updated and the Required Plug-ins 
container is not displayed.
9. Right-click on the java project and select Close Project form the menu.
10. Then right-click on the java project and select Open Project form the menu.
11. Note the Package Explorer view has now updated and the Required Plug-ins 
container is now displayed.

I believe the JavaModel is not being updated if a newly added container 
resolves to an empty classpath. This is probably incorrect or lacking 
functionality in the special case of an "empty" IClasspathContainer and 
therefore some notification to update the JavaModel, under these circumstances, 
may be required.

This problem was recreated under Windows 2000 SP1, Eclipse 2.1 Build 
200303272130, and Sun Java 2 SDK Standard Edition v1.3.1.

Regards,

Joss Wright

I have implemented IClasspathContainer. When I add my container to a java 
project via Project Properties > JavaBuild Path > Libraries > Add Library 
wizard, the Package Explorer view is not updated if my container resolves to an 
empty classpath and the container does not appear in the view.

If I then close and then reopen the java project the container appears in the 
Package Explorer view correctly, even if the container resolves to an empty 
classpath.

This problem can be reproduced in Eclipse 2.1 as follows:

1. Open the Java Perspective, Package Explorer view.
2. Create a new Java Project.
3. Right-click the project and select Properties > Java Build Path > Libraries 
(tab).
4. Note the default JRE System Libraries container should appear in the list.
5. Select the Add Library button and then select the Required Plug-ins 
container from the Add Library page.
6. Then select Next and then Finish to return to the Properties page.
7. In the Properties page select OK to return to the Package Explorer view.
8. Note the Package Explorer view has not updated and the Required Plug-ins 
container is not displayed.
9. Right-click on the java project and select Close Project form the menu.
10. Then right-click on the java project and select Open Project form the menu.
11. Note the Package Explorer view has now updated and the Required Plug-ins 
container is now displayed.

I believe the JavaModel is not being updated if a newly added container 
resolves to an empty classpath. This is probably incorrect or lacking 
functionality in the special case of an "empty" IClasspathContainer and 
therefore some notification to update the JavaModel, under these circumstances, 
may be required.

This problem was recreated under Windows 2000 SP1, Eclipse 2.1 Build 
200303272130, and Sun Java 2 SDK Standard Edition v1.3.1.

Regards,

Joss Wright
Containers do not appear in the JavaModel, only their contributed entries do 
show up as package fragment roots. So if an empty container is added to the 
classpath, it is likely not going to modify the set of roots (which are shown 
by the package view).
What would you expect to see ? An empty entry for the empty container ?
Note that unbound entries aren't either listed.
Please reopen when you have a comment on Philippe's question
My answer was in the original bug report:

"... in the special case of an "empty" IClasspathContainer..." I would expect 
to see an empty container icon in the Package Explorer.

I'm not sure what Philippe means about an empty entry but the whole idea is 
that a container could be treated like a special folder and jars can be dragged 
to or from it to dynamically add jars to a Java project.

However you cannot add jars to a container if the container does not appear in 
the Package Explorer. I believe containers were probably designed to be static 
containers for libraries defined at startup, i.e. outside of a project, but why 
limit a container to that, they could be extremely useful as dynamic containers.

I simply created a plugin that can be used to create a container for dropping 
jars into. I pointed out that if I create a container without any jars in it, 
it does not appear in the Package Explorer until you close and reopen a 
project. Therefore it does not appear when you first create it, either there is 
a bug in Eclipse that shows empty containers in the Explorer when it shouldn't 
or there is a bug that DOES NOT show an empty container when it should. If it 
is the former then I would like to raise it as an enhancement. If it is the 
latter then it would be nice if it was resolved.

The instructions in the original email demonstrate the issue. However I have 
not tested this on any Eclipse 3.0 release as yet. To demonstrate the problem 
further you may wish to look at the plugin I created.

Regards,

Joss

PS: I have read a similar bug report elsewhere that I believe was raised by a 
WSAD, i.e. an IBM developer. I shall try and find the bug ID.
In 3.0 I verified that the Required Plug-ins container doesn't show up after 
reopening the project (so this is at least consistent).

Moving to JDT UI for comment (since classpath containers are not Java elements 
and UI decided to show them in the Package Explorer).
Erich, can you please comment.
Created attachment 7398
IClasspathContainer implementation
As promised I found a similar bug report, by Erich, the bug ID is 40578 and I 
believe describes exactly the problem I reported.

My solution to the problem was VERY messy and involved adding a resource change 
listener to the underlying folder that I was using to hold jar files and then 
detecting delta changes to the resource and forcing a rebind of the classpath 
to the project if a delta change occurred on the underlying folder.

Please see attached IClasspathContainer implementation.

Regards,

Joss
*** Bug 40578 has been marked as a duplicate of this bug. ***
Sometime in the 3.0 stream we have changed the package explorer to filter out 
classpath containers that do not contribute to the class path. This change was 
not correct (this explains why Jerome didn't see when he verified the bug).

The update problem still remains. The issue is that the package explorer is 
handling class path changes by listening to the 
IJavaElement.F_ADDED_TO_CLASSPATH and IJavaElement.F_REMOVED_TO_CLASSPATH 
flags. These flags are only sent out for package fragment roots. When an empty 
class path container is added/removed then no change shows up at the package 
fragment root level.

There are 2 possible solutions:
1) the package explorer listens to resource changes to the ".classpath" file. 
Whenever there is a change to the .classpath file then the project is 
refreshed.
2) Java core provides change flag at the project level F_CLASSPATH_CHANGED, 
this flag is set whenever the class path is changed.

The problem with 1) is that a client has to know about the ".classpath" file 
which should be an implementation detail of the Java model.

Jerome can you please argument from the Java core level.

Although this may be a duplicate of bug 40578, the example in bug 40578
demonstrates that this can also occur with non-empty classpath containers.
BTW, this is blocking a minor bug in WSDD.
>the example in bug 40578
>demonstrates that this can also occur with non-empty classpath containers.
the proposed fix to always refresh the project when there the class path 
change would cover this problem as well.

However, I'll reopen the other bug since the delta includes the change to a 
package fragment root.
Erich, I think Java Core can help you. I entered bug 49986 to introduce the 
F_CLASSPATH_CHANGED flag.
the code was adapted to use F_CLASSPATH_CHANGED some time ago
