Build 20020115

1. Make sure you have JDK1.3.1 as the default JRE (and that you have source for 
rt.jar)
2. Open java.io.File
3. Select field 'tmpFir'
4. Searcg for references to this field
5. You should get 3 matches in method getTempDir()
6. Double-click on the search result
Observe: The first match is not selected.

Build 20020115

1. Make sure you have JDK1.3.1 as the default JRE (and that you have source for 
rt.jar)
2. Open java.io.File
3. Select field 'tmpFir'
4. Searcg for references to this field
5. You should get 3 matches in method getTempDir()
6. Double-click on the search result
Observe: The first match is not selected.
I have checked the SearchEngine, and it seems that the positions it reports are 
correct.
It seems that the resource (i.e. project) of the class file editor is not the
same as the resource of the marker. It is therefore important to have several J
projects with rt.jar to reproduce the bug.
It is not clear yet why breakpoints do work but search results don't.
Found the bug: the resource reported by the Java search engine is wrong:
MatchLocator.report(int sourceStart, int sourceEnd, IJavaElement element, int
accuracy) returns
this.getCurrentResource()
as resource (=project) but the project of the reported binary element is different.

FYI: The reported element had "org.eclipse.jdt.ui" as project but
getCurrentResource was "Test" which is the LAST project in my workspace.
I changed the priority to 1 and see this as a major bug.


Changed match locator to ensure that the java project of the binary element is 
the same as the resource. But this didn't change the behavior. Dani, any other 
hints?
Yep. It must be the same as the resource of the elment and for external JARs
this is the Java project. So I guess simplest fix would be to return
element.getJavaProject().getProject() in case J elements in external JARs.

That's what I did, but I still see the problem. So I guess the problem is in 
another area. But I don't know where to look. Could you please tell me what 
code is invoked when I double-click on a search result? 
Interesting for you are
- JavaSearchResultCollector - to see what is reported and the marker creation
- GotoMarkerAction - to see how it is opened.
- ClassFileAnnotationModel - to see if the markers are valid for the class file

Problem appears only if an editor was opened on the class file.
ClassFileAnnotationModel relies on the fact that its fMarkerResource will be 
the same as the resource of the marker from the delta. In my test case, I had 
opened java.io.File in rt.jar in project org.eclipse.jdt.core, and the match 
locator found a match in java.io.File in rt.jar in project Test. For the Java 
Model, these are the same elements. For the ClassFileAnnotationModel they 
belong to 2 different projects.
So unless I missed something, this is a ClassFileAnnotationModel problem.

I think I now see what's happening. Do you change the parent of Java elements?
I.e. If I get Object parented at project A and someone asks for Integer (via
project B) do you then reparent Object to project A?

Because what I see in the Java perspective is the following:
1. Open a class (X) in java.awt from project A
    With editor linking on, when selecting X in the editor, X is in rt.jar of A
2. Open a class (Y) in java.awt from project B
    With editor linking on, when selecting X (yes X) in the editor, X is in
rt.jar of B (yes B)

This would explain why the search markers are not seen.


 (and Kai assures he does not change anything)
No, we don't change the parent of Java elements. Two java elements coming from 
the same jar file but with different java projects are just considered equal by 
the java model. I'm not sure what would be the prefered java project if we 
wanted to reroot them.
We are getting burned by the Java model's JAR element semantic again.

One fix is to not return early when the marker resource is not equals with the 
delta resource and the resource type is a IProject.

Kai may be you find a better solution.
Kai,

as you can see J Core says: "no change in parent".
The overall question is then: "Why does it work for breakpoints?" I guess the
reason is that breakpoints come in via UI and not via model.


Rewrote ClassFileMarkerAnnotationModel using 
IResourceChangedEvent.findMarkerDeltas(..). This way, the optimization of 
pruning based on the markerResource is no longer necessary. Build I-20020212.
