At the moment, we issue a warning. Javac does it too, but when the identifier is  for a lambda parameter, Javac rejects the code. This bug is to discuss this behavioral difference between ECJ and Javac.

At the moment, we issue a warning. Javac does it too, but when the identifier is  for a lambda parameter, Javac rejects the code. This bug is to discuss this behavioral difference between ECJ and Javac.
There was some confusion about this earlier. Latest spec draft 15.7.1 is
clear about this: 

It is a compile-time error if a lambda parameter has the name _ (that is, a 
single underscore character).
The use of the variable name _ in any context is discouraged; future versions 
of the Java Programming Language may reserve this name as a keyword and/or give 
it special semantics.

Fix will follow shortly.
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=800086b43f754a4bddaa8c7c50578119d7c63538

See that there is one instance where we would emit both a warning and
an error for the same construct - 
See NegativeLambdaExpressionsTest.testUnderScoreParameter(). I don't think
it is worth going through the hoops to fix this case.
