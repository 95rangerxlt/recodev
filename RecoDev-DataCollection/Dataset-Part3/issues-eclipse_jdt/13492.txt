Build 20020409

Bug 13466 shows that when a JavaModelException that wraps a CoreException is 
thrown, the UI doesn't extract the CoreException info.

It should use JavaModelException.getException() to extract this info and thus 
display the status of the CoreException.

This would allow faster debugging and this would avoid moving bugs to JDT/Core 
when it is a Platform problem.

Build 20020409

Bug 13466 shows that when a JavaModelException that wraps a CoreException is 
thrown, the UI doesn't extract the CoreException info.

It should use JavaModelException.getException() to extract this info and thus 
display the status of the CoreException.

This would allow faster debugging and this would avoid moving bugs to JDT/Core 
when it is a Platform problem.
I agree that the wrappered information should not be lost. However, this should 
be done by the JavaModelException transparently, i.e., when a CoreException is 
wrappered then the getStatus call should be forwarded by the JavaModelException 
to the wrappered CoreException. 

This is also the approach taken in Throwable in JDK 1.4 were there is support 
for exception wrappering in Throwable directly.

Moving back to JDT core.

When a JavaModelException wraps a CoreException, the status of the 
CoreException is now remembered instead of creating a JavaModelStatus.
