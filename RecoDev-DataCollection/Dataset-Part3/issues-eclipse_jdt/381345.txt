Current java8 beta versions generate classes with major version 51. java 7 also used version 51. The tests uses the same constant to make an explicit run of the java versions. Assuming that some of the next beta versions could change the version to 52, I have changed the constant to 52 with the fix for bug 380106. However, while writing the class files it writes the version as 51. 
Whenever java8 moves the version number to 52, we should change this version too.
- Look at Todos in CodeSnippetClassFile.java and ClassFile.java

Current java8 beta versions generate classes with major version 51. java 7 also used version 51. The tests uses the same constant to make an explicit run of the java versions. Assuming that some of the next beta versions could change the version to 52, I have changed the constant to 52 with the fix for bug 380106. However, while writing the class files it writes the version as 51. 
Whenever java8 moves the version number to 52, we should change this version too.
- Look at Todos in CodeSnippetClassFile.java and ClassFile.java
FYI: At least as of 1.8.0-ea-b72, java8 uses version 52
Yep, since we're targeting b73+ now, we need to create class files using version 52.

I've pushed the changes recommended by Satyam via commit 575e58be0448bede94ba905837e2b6fe920027f7.
*** Bug 399571 has been marked as a duplicate of this bug. ***
Created attachment 227159
Patch for 1.8 support in JavaCore

Shouldn't we also add the 1.8 support to JavaCore? It's kindda required for JDT/UI work, isn't it? Or should this be a separate bug?
(In reply to comment #4)
> Created attachment 227159 [details]
> Patch for 1.8 support in JavaCore
> 
> Shouldn't we also add the 1.8 support to JavaCore? It's kindda required for
> JDT/UI work, isn't it? Or should this be a separate bug?

I fixed a bunch more places needing this change and released the fix
here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=63b001f83264125c7dd42160689ada7c16b8afb5.

Thanks!
