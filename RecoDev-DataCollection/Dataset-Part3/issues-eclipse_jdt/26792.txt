When inserting a class name into a JavaDoc comment, the fully qualified class name is not always included. If the class has been imported from another package using an import statement, then the unqualified name is inserted.

If you type:

import java.util.Vector;
/**
 * @see Vec
 */ 

and then use the code-completion to select 'Vector' it comes up with

import java.util.Vector;
/**
 * @see Vector
 */ 

instead of the required

import java.util.Vector;
/**
 * @see java.lang.Vector
 */ 

This also happens in {@link } tags as well as after @see tags.

It's quite possible that other code-generation routine (i.e. guessing parameters, exception names etc.) are inserted as unqualified class names instead of the fully qualified ones as well, but that's probably the subject of another bug ...

When inserting a class name into a JavaDoc comment, the fully qualified class name is not always included. If the class has been imported from another package using an import statement, then the unqualified name is inserted.

If you type:

import java.util.Vector;
/**
 * @see Vec
 */ 

and then use the code-completion to select 'Vector' it comes up with

import java.util.Vector;
/**
 * @see Vector
 */ 

instead of the required

import java.util.Vector;
/**
 * @see java.lang.Vector
 */ 

This also happens in {@link } tags as well as after @see tags.

It's quite possible that other code-generation routine (i.e. guessing parameters, exception names etc.) are inserted as unqualified class names instead of the fully qualified ones as well, but that's probably the subject of another bug ...
Additional notes;

Sorry for the long lines. My browser doesn't auto-format to the width, and it
looks like the comments come out in <PRE> blocks.

Secondly, I'm using 2.1 M3 on Mac OS X 10.2.2
Created attachment 2470
Odd behaviour seen using auto complete: two different behaviours

When using the piece of code given, one auto-complete resulted in the fully
qualified name 'cards.Card' being used, and the other just generated 'Card'
I have now seen auto-complete using both fully-qualified and non-qualified references to a class, referencing the same class in the same file.

In the type comment, I put:
/**
 * @see Ca
 */
and auto completed it to
/**
 * @see cards.Card
 */

I then put in a comment in the field comment

/**
 * @see Ca
 */

and auto completed it, and it changed to

/**
 * @see Card
 */

It was exactly the same class, and I haven't got a clue why it should have one behaviour twice in the same session. It was immediately after it in the editing, so there isn't even a save-change to be taken into consideration. What's more, it seemed to be reproducible; after editing the field, I went back up to make another link in the type comment (it worked as cards.Card) and down again in the member (field) comment (it did not work as Card). I'm not sure if the bug may be as simple as not putting fully qualified names in the member comment ...

... a bit more testing; it looks like this is indeed the case. Putting a @see in the type comment results in the fully qualified class name being added; putting the same one in a member comment (field/constructor/method) results in the unqualified name being added.
Changed Platform and OS to 'All' since problem does not seem to be Mac specific
This also goes wrong when inserting class names used in method arguments:

setName(<ctrl>+Sp
setName(String)
instead of
setName(java.lang.String)
as required by JavaDoc.
works for me using I20030917

Have tested this against 3.0M3 (Build 200308281813) and it still exists. Will check against a later 
build to see if this occurs later; however, it may still exist as follows:

import java.util.Vector;
/**
 * @see Vec<Ctrl+Sp>
 */
public class Example {
  /**
   * @see Vec<Ctrl+Sp>
   */
  public Example() {
  }
}

The first completion results in '@see java.util.Vector' whereas the second generates '@see Vector'. 
Unless this has been fixed in the week after 3.0M3 then it is likely the bug still exists and the 
method for repeating the bug was not as clear as it should have been.
This bug still exists in the build mentioned in #6 on Mac OS X.2.6.

I believe that in order to see this bug, an explicit import for 'java.util.Vector' needs to be present at 
the top of the file. If the import is not there, the auto-complete for the JavaDoc correctly puts in 
the FQN. If the import is there, the FQN is only put in in the class JavaDoc comment, and not in 
member JavaDoc comments.

This also occurs during {@link } auto completion as well.
Can be reproduced using a memeber (I20030930). I probably tested against a type.

This has been fixed during 3.2: it now depends on your compiler settings: if you choose to check/process Javadoc it will add the import but if you don't, it will fully qualify the type.
