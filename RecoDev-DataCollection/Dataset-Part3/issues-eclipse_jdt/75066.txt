eclipse version :  3.1 M2
The RemoveExtraParenthesis Quickassist should not appear with this code:
System.out.println("zaza" + (5 + 3));

eclipse version :  3.1 M2
The RemoveExtraParenthesis Quickassist should not appear with this code:
System.out.println("zaza" + (5 + 3));
There is also a problem with the following code:
int i = 5 - ( 5 - 3);
int j = 9/(3 / 3);

The Quickassist should not appear.
Konstantin, do you want to take this one?
Sure.
I will try to fix it now.
Created attachment 15059
Fix

Main fix is how to handle case when precedences for expression and parent infix
expressions are equal.
I've added following fixes:
1. When parent expression is PLUS with String, then disallow quick fix.
2. For parent operations '/', '%' and '-' it will allow quick fix only if
current expression is left operand.
Created attachment 15060
Fix

Small style change.
release patch > 20041008

Konstantin, I removed the old quick assist 'Remove surrounding parenthesis' with
the idea that it should be replaced by your advanced one.
Can we change the advanced one to also work with an empty selection cursor
before an opening or after a closing parenthesis?
(it's just a test if the covering node is a parenethised expression)
Please also note bug 75896.


the following case is not detected
package test1;
public class E {
    public int foo() {
        return (9+ 8);
    }
}

That was a test case for 'Remove surrounding parenthesis' which I removed (see
comment 6) in favor of the advanced quick fix.

QuickAssistTest.testUnwrapParanthesis is testing this but now disabled until
this works again

Ok, I will check empty selection and bug 75896. I will need 2-3 days.
Created attachment 15091
Support for empty selection, optimized 'getFullyCoveredNodes' and 5 new quick assists
New patch supports empty selection and cursor is on ParenthesizedExpression. It
also proposes to remove paranthesis when parent node is not expression (for
example method invocation, i.e. current expression is argument; and 'return').

I've added also optimization in 'getFullyCoveredNodes', so now it will not visit
node if it is not intersecting with selection. So, we will cut off most unneeded
nodes. We also call now 'getFullyCoveredNodes' only one time for all quick
assists. I've changed it also a little to support case when full CompilationUnit
is selected. So, now it is possible to remove extra parenthesis or add
paranoidal parenthesis for full unit.

This patch contains also version of "Cast expression and assign to local
variable" that does not use separate class for proposal.

There are also 5 new quick assists:

1. getPickOutStringProposals.
  Extract selected part of string in separate string:

  "Goodbye |Cruel| World" -> "Goodbye " + "Cruel" + " World"

  Activation: select part of StringLiteral.

2. getReplaceIfElseReturnWithReturnConditionalProposals
  
	public int testIfThenElseReturn(boolean a) {
		if (a) {
			return 1;
		} else {
			return 2;
		}
	}

into:

	public int testIfThenElseReturn(boolean a) {
		return a ? 1 : 2;
	}

  Activation: place cursor on 'if' statement.

3. getReplaceIfElseAssignWithReturnConditionalProposals.

	public void testIfThenElseAssign(boolean a) {
		int v;
		if (a)
			v = 1;
		else
			v = 2;
	}

into:

	public void testIfThenElseAssign(boolean a) {
		int v;
		v = a ? 1 : 2;
	}

  Activation: place cursor on 'if' statement.

4. getReplaceReturnConditionalWithIfElseReturnProposals

	public int testIfThenElseReturn(boolean a) {
		return a ? 1 : 2;
	}

into:

	public int testIfThenElseReturn(boolean a) {
		if (a)
			return 1;
		else
			return 1;
	}

  Activation: place cursor somewhere on 'return' statement (not only 'return'
keyword).

5. getReplaceAssignConditionalWithIfElseAssignProposals

	public void testIfThenElseAssign(boolean a) {
		int v;
		v = a ? 1 : 2;
	}

into:

	public void testIfThenElseAssign(boolean a) {
		int v;
		if (a)
			v = 1;
		else
			v = 2;
	}

  Activation: place cursor somewhere on assignment statement.
Thanks Konstantin!

released patch > 20041011

Made some changes:

worked on 'assign to cast'
- to work also with 'while'
- introduce a block if necessary
- removed name guessing and type proposal code. This is IMO not performant
enough to do when collecting proposals (ok if implemented in an own propasal)
but I think it is not so crutial to have in this case, so it's ok to leave it away
- changed label to 'Intruduce new local with casted type'
- added test cases

For the 'getFullyCoveredNodes', I'm still not happy. The first visitor now migth
be shared, but in the collection code more deep visits are performed.
I would like to remove these 'deep-searching' quick assists for performace
reasons. IMO it's fine if there is a first precondition check, e.g. 'covering
node is an expression' and then go down all children as long they are expressions.
I see what your idea is, selecting a block of code and do a kind of 'multi quick
assist', and I agree it has it's charm, but as explained, I think it doesn't
scale when performed while collecting proposals.

Created attachment 15108
Tweak for getFullyCoveredNodes

1. I think there is misprint in word "Intr_u_duce".

2. I agree about 'getInverseConditionProposals' - it is not useful with block
selection, in reallity it was created mostly for boolean expressions inversion.
So, it can be rewriten to handle only single selected expression.

  I've tested speed of 'getRemoveExtraParenthesisProposals' and
'getAddParanoidalParenthesisProposals' and can say that they work fairly fast.
For AdvancedQuickAssistProcessor.java itself, when full compilation unit is
selected, it needs only 20-30 ms (after couple times, i.e. once JIT compiled
byte code). I hope that this is good enough speed. When I select one long
method, it needs about 1 ms to process it.

  I've changed a little 'getFullyCoveredNodes' to be more optimal, now it will
not go into node if it is fully selected.
  I found also bug it case when expression in parentheses is type cast and is
expression in method invocation. In this case we can not remove parentheses.
  Plus I've added primitive timing using 1.5 nanoTime() method, if you have
Java 1.5, try with it, or use currentTimeMillis() version to check, how fast it
is for your cases.
  See new patch with these changes.

  BTW, what is really slow is QuickTemplateProcessor. :-) I see them each time
when I select several lines. I think that they are useful only when several
statements in same block are selected. When I select full compilation unit and
accidently stay on it, I have to wait tens seconds. :-)
Thanks Constantin. I released your patch > 20041014

Fixed 'Intr_u_duce', thanks!

I guess having only the two 'deep' quick assists is not a problem, but as they 
are a new form of quick assist, I guess we will soon have more.

I'll have a look at the QuickTemplateProcessor.

I mark this bug report as fixed
