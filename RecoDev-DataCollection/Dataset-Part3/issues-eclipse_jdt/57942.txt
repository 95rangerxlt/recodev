I'm editing java files in 3.0M8.  I did a little searching and didn't see this 
reported, but it's got to be driving other people nuts too.

Reproduction steps:
Take the code below and stick it in a blank java file and save.  Make sure 
that the Java Smart Cursor Positioning within Java Names flag is on.

public class test {
	
	static int JAVA_SINGLE_LINE_COMMENT;
	public static void main(String[] args) {
		int s=JAVA_SINGLE_LINE_COMMENT;
		if (s==JAVA_SINGLE_LINE_COMMENT)
		{}
                abc;abc
	}
}

1. Go to the start of the second occurrence of JAVA_SINGLE_LINE_COMMENT
2. Do ctrl+right arrow
3. The cursor goes to the position after the semicolon
NOTE: I think this is a bug.  The cursor should stop on punctuation so that if 
you hit ctrl+delete you only delete the following word (and subsequent 
whitespace).  Or if you are on an operator, then it would delete to the next 
word start.  Also, the cursor should be stopping on each underscore (before or 
after).
4. Do ctrl+left arrow
5. The cursor goes to the beginning of the string
NOTE: This has got to be a bug.
6. Put the cursor before the semicolon and do ctrl+left arrow
7. The cursor goes right before the "C" in COMMENT
8. Hitting ctrl+left arrow subsequently takes the cursor to just after each 
preceding underline
NOTE: I believe this is the correct behavior
9. Put the cursor at the start of the 3rd occurrence of 
JAVA_SINGLE_LINE_COMMENT.
10. ctrl+right arrow
11. The cursor goes right *before* the close paren.  
NOTE: This is what I expect, but would not have predicted based on the semi 
colon behavior.
12. Put the cursor at the start of the "abc" line.
13. ctrl+right arrow
14. The cursor moves to the end of the line
NOTE: I think this is also a bug since two words are skipped over.

I'm editing java files in 3.0M8.  I did a little searching and didn't see this 
reported, but it's got to be driving other people nuts too.

Reproduction steps:
Take the code below and stick it in a blank java file and save.  Make sure 
that the Java Smart Cursor Positioning within Java Names flag is on.

public class test {
	
	static int JAVA_SINGLE_LINE_COMMENT;
	public static void main(String[] args) {
		int s=JAVA_SINGLE_LINE_COMMENT;
		if (s==JAVA_SINGLE_LINE_COMMENT)
		{}
                abc;abc
	}
}

1. Go to the start of the second occurrence of JAVA_SINGLE_LINE_COMMENT
2. Do ctrl+right arrow
3. The cursor goes to the position after the semicolon
NOTE: I think this is a bug.  The cursor should stop on punctuation so that if 
you hit ctrl+delete you only delete the following word (and subsequent 
whitespace).  Or if you are on an operator, then it would delete to the next 
word start.  Also, the cursor should be stopping on each underscore (before or 
after).
4. Do ctrl+left arrow
5. The cursor goes to the beginning of the string
NOTE: This has got to be a bug.
6. Put the cursor before the semicolon and do ctrl+left arrow
7. The cursor goes right before the "C" in COMMENT
8. Hitting ctrl+left arrow subsequently takes the cursor to just after each 
preceding underline
NOTE: I believe this is the correct behavior
9. Put the cursor at the start of the 3rd occurrence of 
JAVA_SINGLE_LINE_COMMENT.
10. ctrl+right arrow
11. The cursor goes right *before* the close paren.  
NOTE: This is what I expect, but would not have predicted based on the semi 
colon behavior.
12. Put the cursor at the start of the "abc" line.
13. ctrl+right arrow
14. The cursor moves to the end of the line
NOTE: I think this is also a bug since two words are skipped over.
Also, the algorithm apparently skips over commas, but stops on spaces.  So 
parts of multiple arguments in method calls can be deleted.

ex. fDocument,fOffset,fRangeEnd-fOffset
If the cursor is right after the "t" in "fDocument", ctrl+right arrow will 
move the cursor to the minus sign, skipping the first occurrence of fOffset 
completely.
Christof,
given the fact that we when a new word start we should reconsider jumping over _

Was fixed for 3.0RC1 or earlier as part of another fix.
