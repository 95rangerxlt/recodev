'Refactor -> rename' don't work when eclipse compiled from src with jdk 1.4 
compiler with any 'target' tag or with jdk 1.3 compiler with 'target="1.3"' tag.

1) To reproduce this bug download zip-file with build scripts from eclipse 
site, replace in all 'build.xml' files '<javac' to '<javac target="1.3"' and 
compile eclipse. Any 'refactor -> rename' within this build isn't perfomed.

2) This bug could be explainde by different call dispatching produced by 
compiler for the portion of code listed below.

//-- eclipse source code -----------------------------------------------
public interface org.eclipse.jface.viewers.ISelection {...}
public interface org.eclipse.jface.viewers.IStructuredSelection extends
org.eclipse.jface.viewers.ISelection {...}

public class org.eclipse.jdt.ui.actions.SelectionDispatchAction ... {
  ...
  protected void run(IStructuredSelection selection) {
    run((ISelection)selection); // line 127
  }
  protected void run(ISelection selection) {
  }
}
public class org.eclipse.jdt.ui.actions.RenameAction extends
org.eclipse.jdt.ui.actions.SelectionDispatchAction ... {
  ...
  protected void run(IStructuredSelection selection) {
    fRenameJavaElement.run(selection); // line 116
  }
}
public class
org.eclipse.jdt.internal.ui.refactoring.actions.RenameJavaElementAction
extends org.eclipse.jdt.ui.actions.SelectionDispatchAction ... {
  ...
  protected void run(IStructuredSelection selection) {...}
}
//-- end of eclipse source code ----------------------------------------

Jdk 1.4.compiler possibly generates the following call in line 116 of 
org.eclipse.jdt.ui.actions.RenameAction.java file:
RenameAction.run(IStructuredSelection selection) -> SelectionDispatchAction.run
(ISelection selection);
and jdk 1.3 compiler generates the following call in line 116 of 
org.eclipse.jdt.ui.actions.RenameAction.java file:
RenameAction.run(IStructuredSelection selection) -> RenameJavaElementAction.run
(IStructuredSelection selection);

3) I wrote a simple test program which emulates this behaviour:
//-- eclipse/a/Parent.java -------------------------------------
package eclipse.a;

public class Parent {
  public Parent() {}

  protected void doSmth(Object obj) {
    System.err.println("Parent.doSmth(Object '" + obj + "')");
  }

  protected void doSmth(String str) {
    System.err.println("Parent.doSmth(String '" + str + "')");
    doSmth((Object)str);
  }
}
//--------------------------------------------------------------
//-- eclipse/a/DerivedA.java -----------------------------------
package eclipse.a;

import eclipse.b.DerivedB;

public class DerivedA extends Parent {
  private final DerivedB derivedB;

  public DerivedA(DerivedB derivedB) {
    super();
    this.derivedB = derivedB;
  }

  protected void doSmth(String str) {
    System.err.println("DerivedA.doSmth(String '" + str + "')");
    derivedB.doSmth((String)str);
  }

  public static void main(String[] args) {
    DerivedB b = new DerivedB();
    DerivedA a = new DerivedA(b);
    a.doSmth("TEST");
  }
}
//--------------------------------------------------------------
//-- eclipse/b/DerivedB.java -----------------------------------
package eclipse.b;

import eclipse.a.Parent;

public class DerivedB extends Parent {

  public DerivedB() {
    super();
  }

  protected void doSmth(String str) {
    System.err.println("DerivedB.doSmth(String '" + str + "')");
  }

}
//--------------------------------------------------------------

We expect to see 
>DerivedA.doSmth(String 'TEST')
>DerivedB.doSmth(String 'TEST')
in console, but for the following compilers we got
>DerivedA.doSmth(String 'TEST')
>Parent.doSmth(Object 'TEST')
These compilers are:
 - eclipse compiler with complience level set to 1.4 and any .class 
compatibility;
 - javac compiler from sun j2sdk 1.3.1_07-b02 with any target;

4) Possible workaround:
--begin-------------------------------------------------
org.eclipse.jdt.ui\ui\org\eclipse\jdt\ui\actions\RenameAction.java.orig	Thu May 
15 08:42:35 2003
+++ org.eclipse.jdt.ui\ui\org\eclipse\jdt\ui\actions\RenameAction.java	Fri May 
16 12:16:17 2003
@@ -113,7 +113,7 @@
 	
 	protected void run(IStructuredSelection selection) {
 		 if (fRenameJavaElement.isEnabled())
-			fRenameJavaElement.run(selection);
+			((SelectionDispatchAction)fRenameJavaElement).run
((IStructuredSelection)selection);
 		if (fRenameResource != null && fRenameResource.isEnabled())
 			fRenameResource.run(selection);
 	}
--end---------------------------------------------


Best regards,
Stanislav Bernatsky.

'Refactor -> rename' don't work when eclipse compiled from src with jdk 1.4 
compiler with any 'target' tag or with jdk 1.3 compiler with 'target="1.3"' tag.

1) To reproduce this bug download zip-file with build scripts from eclipse 
site, replace in all 'build.xml' files '<javac' to '<javac target="1.3"' and 
compile eclipse. Any 'refactor -> rename' within this build isn't perfomed.

2) This bug could be explainde by different call dispatching produced by 
compiler for the portion of code listed below.

//-- eclipse source code -----------------------------------------------
public interface org.eclipse.jface.viewers.ISelection {...}
public interface org.eclipse.jface.viewers.IStructuredSelection extends
org.eclipse.jface.viewers.ISelection {...}

public class org.eclipse.jdt.ui.actions.SelectionDispatchAction ... {
  ...
  protected void run(IStructuredSelection selection) {
    run((ISelection)selection); // line 127
  }
  protected void run(ISelection selection) {
  }
}
public class org.eclipse.jdt.ui.actions.RenameAction extends
org.eclipse.jdt.ui.actions.SelectionDispatchAction ... {
  ...
  protected void run(IStructuredSelection selection) {
    fRenameJavaElement.run(selection); // line 116
  }
}
public class
org.eclipse.jdt.internal.ui.refactoring.actions.RenameJavaElementAction
extends org.eclipse.jdt.ui.actions.SelectionDispatchAction ... {
  ...
  protected void run(IStructuredSelection selection) {...}
}
//-- end of eclipse source code ----------------------------------------

Jdk 1.4.compiler possibly generates the following call in line 116 of 
org.eclipse.jdt.ui.actions.RenameAction.java file:
RenameAction.run(IStructuredSelection selection) -> SelectionDispatchAction.run
(ISelection selection);
and jdk 1.3 compiler generates the following call in line 116 of 
org.eclipse.jdt.ui.actions.RenameAction.java file:
RenameAction.run(IStructuredSelection selection) -> RenameJavaElementAction.run
(IStructuredSelection selection);

3) I wrote a simple test program which emulates this behaviour:
//-- eclipse/a/Parent.java -------------------------------------
package eclipse.a;

public class Parent {
  public Parent() {}

  protected void doSmth(Object obj) {
    System.err.println("Parent.doSmth(Object '" + obj + "')");
  }

  protected void doSmth(String str) {
    System.err.println("Parent.doSmth(String '" + str + "')");
    doSmth((Object)str);
  }
}
//--------------------------------------------------------------
//-- eclipse/a/DerivedA.java -----------------------------------
package eclipse.a;

import eclipse.b.DerivedB;

public class DerivedA extends Parent {
  private final DerivedB derivedB;

  public DerivedA(DerivedB derivedB) {
    super();
    this.derivedB = derivedB;
  }

  protected void doSmth(String str) {
    System.err.println("DerivedA.doSmth(String '" + str + "')");
    derivedB.doSmth((String)str);
  }

  public static void main(String[] args) {
    DerivedB b = new DerivedB();
    DerivedA a = new DerivedA(b);
    a.doSmth("TEST");
  }
}
//--------------------------------------------------------------
//-- eclipse/b/DerivedB.java -----------------------------------
package eclipse.b;

import eclipse.a.Parent;

public class DerivedB extends Parent {

  public DerivedB() {
    super();
  }

  protected void doSmth(String str) {
    System.err.println("DerivedB.doSmth(String '" + str + "')");
  }

}
//--------------------------------------------------------------

We expect to see 
>DerivedA.doSmth(String 'TEST')
>DerivedB.doSmth(String 'TEST')
in console, but for the following compilers we got
>DerivedA.doSmth(String 'TEST')
>Parent.doSmth(Object 'TEST')
These compilers are:
 - eclipse compiler with complience level set to 1.4 and any .class 
compatibility;
 - javac compiler from sun j2sdk 1.3.1_07-b02 with any target;

4) Possible workaround:
--begin-------------------------------------------------
org.eclipse.jdt.ui\ui\org\eclipse\jdt\ui\actions\RenameAction.java.orig	Thu May 
15 08:42:35 2003
+++ org.eclipse.jdt.ui\ui\org\eclipse\jdt\ui\actions\RenameAction.java	Fri May 
16 12:16:17 2003
@@ -113,7 +113,7 @@
 	
 	protected void run(IStructuredSelection selection) {
 		 if (fRenameJavaElement.isEnabled())
-			fRenameJavaElement.run(selection);
+			((SelectionDispatchAction)fRenameJavaElement).run
((IStructuredSelection)selection);
 		if (fRenameResource != null && fRenameResource.isEnabled())
 			fRenameResource.run(selection);
 	}
--end---------------------------------------------


Best regards,
Stanislav Bernatsky.
Philippe,

can you please shed some light on this. My understanding of virtual binding is 
that a call fRenameAction.run(selection) where selection is of type 
IStructuredSelection and fRenameAction is of type RenameJavaElementAction is 
bound to RenameJavaElementAction.run(IStructuredSelection ...). But this 
doesn't seem to be the case under 1.4.
From 1.4 on, all the compiler does is to tag the method ref in generated 
bytecode with the receiver type instead of the declaring class of the bound 
method. This information used to be ignored by VMs prior to 1.4, and was 
causing visibility issues at runtime (the invoked method wasn't legite since 
not visible)

Note that 
Sun JDK 1.3.1_01 would still display:
>DerivedA.doSmth(String 'TEST')
>DerivedB.doSmth(String 'TEST')

and Sun 1.4.0 and better do display
>DerivedA.doSmth(String 'TEST')
>Parent.doSmth(String 'TEST')

Technically, the protected method from DerivedB isn't visible from DerivedA, 
only the parent method is visible from it. This is now properly enforced at 
runtime as well. 

You need to adapt your code to reflect this (make these methods public).


Eclipse compiler is actually printing:
>DerivedA.doSmth(String 'TEST')
>Parent.doSmth(Object 'TEST')

Why not the following answer?
>DerivedA.doSmth(String 'TEST')
>Parent.doSmth(String 'TEST')
>Parent.doSmth(Object 'TEST')

JDK1.4.1 behaves like the Eclipse compiler in 1.4 compliance mode.

If you remove the doSmth method in DerivedB, then you get:
>DerivedA.doSmth(String 'TEST')
>Parent.doSmth(String 'TEST')
>Parent.doSmth(Object 'TEST')

This looks like a bug. If a method is not visible, how can it interfere with
methods in Parent?

*** Bug 34886 has been marked as a duplicate of this bug. ***
Add CC'
*** Bug 37901 has been marked as a duplicate of this bug. ***
Fixed by making the methods in SelectionDispatchAction public.
Moving to JDT/Core to clarify if they wnat to follow up on comment #3. Please 
close as fixed otherwise.
Could you please backport this fixes to the 2.1.x stream? It's greatly annoying 
if you have to make sure, that you are using a jdk1.3 for compiling...

You simply need to specify the target option of the javac ant task to be 1.1. 
and it should work fine. By default ant sets the target value according to the 
VM on which it is running. The default value for the JDK1.4 is target 1.2. This 
has a side-effect on the declaring class of the method invocations or field 
references.
So add the following argument in your javac ant task and it should work fine.
target="1.1"

We will not pack port this to 2.1 since it is only relevant if you compile 
Eclipse from source. 
Created attachment 5451
Patch for 2.1.1

This is a patch used by the debian packages. You need to apply it by hand in
the directory, which contains plugins. AFAIK it works...
Moving to JDT UI to dispose
mark as fixed in 3.0. no back porting planed.
It's steel present in RC1.
The log exception.
!SUBENTRY 1 org.eclipse.jdt.core 4 -1 ¨l¨Y¨h§°¨l¨` 12, 2004 11:47:08.312
!MESSAGE I/O exception.
!STACK 0
java.util.zip.ZipException: error in opening zip file
	at java.util.zip.ZipFile.open(Native Method)
	at java.util.zip.ZipFile.<init>(Unknown Source)
	at java.util.zip.ZipFile.<init>(Unknown Source)
	at org.eclipse.jdt.internal.core.JavaModelManager.getZipFile
(JavaModelManager.java:1145)
	at org.eclipse.jdt.internal.core.JarPackageFragmentRoot.getJar
(JarPackageFragmentRoot.java:210)
	at org.eclipse.jdt.internal.core.JarPackageFragmentRoot.computeChildren
(JarPackageFragmentRoot.java:76)
	at org.eclipse.jdt.internal.core.PackageFragmentRoot.buildStructure
(PackageFragmentRoot.java:173)
	at org.eclipse.jdt.internal.core.Openable.generateInfos
(Openable.java:183)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed
(JavaElement.java:572)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo
(JavaElement.java:309)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo
(JavaElement.java:295)
	at org.eclipse.jdt.internal.core.JavaElement.getChildren
(JavaElement.java:250)
	at 
org.eclipse.jdt.internal.core.search.matching.MatchLocator.locatePackageDeclarat
ions(MatchLocator.java:908)
	at 
org.eclipse.jdt.internal.core.search.matching.MatchLocator.locatePackageDeclarat
ions(MatchLocator.java:881)
	at 
org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches
(JavaSearchParticipant.java:99)
	at org.eclipse.jdt.core.search.SearchEngine.findMatches
(SearchEngine.java:469)
	at org.eclipse.jdt.core.search.SearchEngine.search
(SearchEngine.java:758)
	at 
org.eclipse.jdt.internal.corext.refactoring.rename.RenamePackageProcessor.getNam
esakePackages(RenamePackageProcessor.java:367)
	at 
org.eclipse.jdt.internal.corext.refactoring.rename.RenamePackageProcessor.getRef
erencesToTypesInNamesakes(RenamePackageProcessor.java:338)
	at 
org.eclipse.jdt.internal.corext.refactoring.rename.RenamePackageProcessor.checkF
inalConditions(RenamePackageProcessor.java:289)
	at 
org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.checkFin
alConditions(ProcessorBasedRefactoring.java:134)
	at org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run
(CheckConditionsOperation.java:84)
	at org.eclipse.ltk.core.refactoring.CreateChangeOperation.run
(CreateChangeOperation.java:114)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run
(PerformChangeOperation.java:182)
	at org.eclipse.core.internal.resources.Workspace.run
(Workspace.java:1673)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run
(WorkbenchRunnableAdapter.java:58)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run
(ModalContext.java:101)

Feodor, the reproted stack trace isn't releated to this bug. The refactoring 
didn't run since there is a problem with a zip file. Please report this as a 
normal bug to compontent JDT and provide, if possible, steps to reproduce.
