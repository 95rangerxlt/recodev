In the case where you create say, a new servlet, using the J2EE perspective, you see the following entry in the "Problems" view: 

"Warning	The serializable class AnotherNewServlet does not declare a static final serialVersionUID field of type long".

By right-clicking on the icon shown, you can fire off a "quick fix".  You also have that option in the editor of course...

When you do this for a servlet, you have three options:
Add default serial version ID
Add generated serial version ID
Add @SupressWarnings 'serial' to 'ServletName'

If you choose the first option, the default version id is set to "1L", however if you choose the second option, another jvm is evidently spawned and the process seems to hang at that moment.  When you do this by right-clicking on the warning icon in the file editor, you get a progress window indicating the launching of a jvm that hangs about half-way thru the progress bar... 

Finally, if you create a java project and have a class that implements serializable, then you get the same warning, but quickfix only gives you the first two options:
Add default serial version ID
Add generated serial version ID

But in the case of an ordinary java project, the quickfix actuation works without incident.

In the case where you create say, a new servlet, using the J2EE perspective, you see the following entry in the "Problems" view: 

"Warning	The serializable class AnotherNewServlet does not declare a static final serialVersionUID field of type long".

By right-clicking on the icon shown, you can fire off a "quick fix".  You also have that option in the editor of course...

When you do this for a servlet, you have three options:
Add default serial version ID
Add generated serial version ID
Add @SupressWarnings 'serial' to 'ServletName'

If you choose the first option, the default version id is set to "1L", however if you choose the second option, another jvm is evidently spawned and the process seems to hang at that moment.  When you do this by right-clicking on the warning icon in the file editor, you get a progress window indicating the launching of a jvm that hangs about half-way thru the progress bar... 

Finally, if you create a java project and have a class that implements serializable, then you get the same warning, but quickfix only gives you the first two options:
Add default serial version ID
Add generated serial version ID

But in the case of an ordinary java project, the quickfix actuation works without incident.
John, in what build did you observe the hang of the 'Serial version ID'?
It seems I mis-labeled the version.  It was 3.2 M4 with WTP/GEF/JEM M4.  Sorry about the confusion...

The eclipse buildID is:  I20051215-1506, the WTP buildID is: 200601131852

The code to communicate with the second VM has been completely rewritten for 3.2 M6. This should now work
Hi,

So I tried WTP/EMF/GEF/JEM M5 with Eclipse M6 and evidently while the JVM no longer hangs, you get a default serial version UID of 1L regardless of which option you take (default or generate).  Again, with Java projects that have classes implementing Serializable, the quick-fix is fine.  This looks to be a WTP problem... but there is no WTP selection in the drop-down, and I would not know which (if any) of EMF/GEF/JEM it might be due to.
Please see my prior comment.
I suspect that the classpath cannot be set up correctly for the second VM. We have this problem currently with classes somehow referencing SWT. For whatever reason, class ObjectStreamClass needs to load the native DLLs as well when calculating the SUID of an SWT class. The problem is that this information is not obtainable from the project which contains the class being annotated.

If your case is similar, I am afraid we cannot do much here. We would need more support from the JDT Core classpath API to set up the second VM.
Could the problem be in WST/WTP?
No, this is not WST/WTP. It is the general problem that JDT Core has no information for native DLLs on the classpath.
fixed by the fix for bug 169407.
