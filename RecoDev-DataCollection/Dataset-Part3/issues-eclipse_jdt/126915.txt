'Add serial version ID' has options 'Generated' and 'Random'. Is the random really just any random number? What would be the use case for this?

AFAIK, the options of the quick fix are:
- Default (1L)
- Generated (only useful if serialized objects already exist)

I would use labels with the descriptions above to help the user decide which one is appropriate for his use case.

'Add serial version ID' has options 'Generated' and 'Random'. Is the random really just any random number? What would be the use case for this?

AFAIK, the options of the quick fix are:
- Default (1L)
- Generated (only useful if serialized objects already exist)

I would use labels with the descriptions above to help the user decide which one is appropriate for his use case.
The "random" number is the one from the class ObjectStreamClass. I would also suggest to stick with the existing terminology
The random number is realy just a random number:
RANDOM_NUMBER_GENERATOR.nextLong()
The generated one is the one from the ObjectStreamClass.

The way I understood it is that if you already have serialized objects without SUIDs you need to add one with the value generated by ObjectStreamClass#getSerialVersionUID otherwise you can just take any number you want, i.e. a random number. 

"The serialVersionUID defines a set of classes all with the same name that have evolved from a common root class and agree to be serialized and deserialized using a common format."

If you have two different classes with the same name then you should use different IDs...
> The way I understood it is that if you already have serialized objects without
> SUIDs you need to add one with the value generated by
> ObjectStreamClass#getSerialVersionUID otherwise you can just take any number
> you want, i.e. a random number. 

That's how I understtod it too, so just take 1L to make it easy, predicatable, and understandable.

> "The serialVersionUID defines a set of classes all with the same name that have
> evolved from a common root class and agree to be serialized and deserialized
> using a common format."
> 
> If you have two different classes with the same name then you should use
> different IDs...

I think that's wrong: This 'name' refers to the fully qualified name of a class. The 'set of classes' means 'the same class as it evolves over time'. You can definitely have multiple classes with the same SUID - it only identifies a version of the class in the flow of time, not the class name.

Here's more information:
http://java.sun.com/j2se/1.5.0/docs/guide/serialization/index.html
fixed > I20060131-1200

Replacing Random number by default number (1L) 
