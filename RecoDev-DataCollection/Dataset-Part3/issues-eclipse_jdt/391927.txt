Many jdt.ui and jdt.ui.refactoring tests call JavaProjectHelper#performDummySearch(IJavaSearchScope). This was added to synchronize with the indexer, to make sure subsequent file deletions don't fail because the indexer is still running and locks the file.

However, performDummySearch is quite costly and is most often not necessary. I'll comment out the search and rely on the try-catch-retry in JavaProjectHelper#delete(IResource) to handle the rare case where file locking is really a problem.

Initial measurements predict a speedup of 2.5 (AllJDTTests takes only 30 min instead of 75 min).

Many jdt.ui and jdt.ui.refactoring tests call JavaProjectHelper#performDummySearch(IJavaSearchScope). This was added to synchronize with the indexer, to make sure subsequent file deletions don't fail because the indexer is still running and locks the file.

However, performDummySearch is quite costly and is most often not necessary. I'll comment out the search and rely on the try-catch-retry in JavaProjectHelper#delete(IResource) to handle the rare case where file locking is really a problem.

Initial measurements predict a speedup of 2.5 (AllJDTTests takes only 30 min instead of 75 min).
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=9b008aeb6f5070a3f16390883c8a40a0dd6e3505
very nice. Thanks!
