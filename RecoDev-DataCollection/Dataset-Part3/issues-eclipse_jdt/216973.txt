Build ID: I20071213-1700

Steps To Reproduce:
JavaProjectWizard is an internal wizard class with two pages represented by the new API classes NewJavaProjectWizardPageOne and NewJavaProjectWizardPageTwo.

However the wizard class itself contains (~100 lines of) other code to:
- initialize the first page with default values for the working set
- reveal the active package explorer when done

I'd like to use the new API classes, but don't want to have my custom JavaProjectWizard behave differently from the standard one in unexpected ways.  Currently this means one of:
- extend the internal class
- reimplement the above code
- copy the above code (if license-compatible)

Can we make the helper code available, or make the JavaProjectWizard class API?

Build ID: I20071213-1700

Steps To Reproduce:
JavaProjectWizard is an internal wizard class with two pages represented by the new API classes NewJavaProjectWizardPageOne and NewJavaProjectWizardPageTwo.

However the wizard class itself contains (~100 lines of) other code to:
- initialize the first page with default values for the working set
- reveal the active package explorer when done

I'd like to use the new API classes, but don't want to have my custom JavaProjectWizard behave differently from the standard one in unexpected ways.  Currently this means one of:
- extend the internal class
- reimplement the above code
- copy the above code (if license-compatible)

Can we make the helper code available, or make the JavaProjectWizard class API?
I'd like to keep JavaProjectWizard internal.
It defines the 'original' Java Project Wizard, with it's labels, banner images.

If you need the original wizard, then you would use the corresponding action to open it (OpenNewJavaProjectWizardAction)

If your wizard is an extension of the orginal wizard, then it also needs different  labels and banners and most likely has different behavior on finish.

I realize that theres quite some code to initialize the working set field. I moved this code to the first page.
New API NewJavaProjectWizardPageOne.init has been added.

Now the code in JavaProjectWizard is quite minimal and easy to be reimplemented in your code.

fixed > 20080130
Thanks for your work on this -- I've been taking advantage of these changes add a third page, so that it adds a few more files to the created Java project (and does a small amount of configuration).
So what I want is actually the same behaviour on finish.

So I'm trying to mimic the behaviour of the JavaProjectWizard, and am looking at a couple of issues:
1) JavaProjectWizard.performFinish() calls PackageExplorerPart.tryToReveal(), but PackageExplorerPart is internal.  
If the new project wouldn't be visible in the Package Explorer under its current configuration, this call tries to change its filters or working sets to show it.

2) NewElementWizard (extended by JavaProjectWizard) performFinish() runs finishPage() in a WorkbenchRunnableAdapter (which is internal).
Would I achieve equivalent behaviour with a WorkspaceModifyOperation?  
There is the line: 
  runnable= new WorkbenchRunnableAdapter(op, rule, true);
However unlike WorkbenchRunnableAdapter, WorkspaceModifyOperation doesn't seem to transfer its scheduling rule when threadChange() is called.


I'm reopening the existing bug since these problems seem to fall under the existing heading -- let me know if a new bug is better.

Thanks!
For issue 1, I changed our code to
IWorkbenchPart activePart= getActivePart();
if (activePart instanceof IPackagesViewPart) {
  (new ShowInPackageViewAction(activePart.getSite())).run(newElement);
}

this is all API and can be used by your wizard as well.

2. WorkspaceModifyOperation will do the Job in this situation as well as there wouldn't be any existing locks when the action is run and transfer is not required.

We don't intend to make WorkbenchRunnableAdapter API. If you need a similar functionality, have a similar class in your plugin.

Please leave the reopening of bugs to us. Add comments to the bug or file new issue. This makes it simpler to track and plan our work. Thanks.
