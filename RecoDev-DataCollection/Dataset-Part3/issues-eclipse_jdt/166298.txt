If you create a JDK 1.5 enum, and add an element with a comment like this:

/** This element has something to do with the <head> tag. */

And then go to another file and try to use that enum (through auto-completion), Eclipse will spin and use up all of a CPU on the computer.

Here is the basic code that does this.  I have not tested that this code causes the problem out of my environment.

public enum PTMarkupFragmentTypes
{
	/** The fragment is a string containing finished markup ready for display without further post-processing. */
	PT_MARKUP_FRAGMENT_TYPE_FINISHED(1, "PT_MARKUP_FRAGMENT_TYPE_FINISHED"),

	/** The fragment contains an XML tag that requires post-processing, in an array with columns defined by {@link com.plumtree.runner.transformers.common.PT_XML_ARRAY_COLS PT_XML_ARRAY_COLS}. */
	PT_MARKUP_FRAGMENT_TYPE_PT_XML(2, "PT_MARKUP_FRAGMENT_TYPE_PT_XML"),

	/** The fragment contains the name of the control used to render and intrinsic portlet. */
	PT_MARKUP_FRAGMENT_TYPE_IPP(3, "PT_MARKUP_FRAGMENT_TYPE_IPP"),

	/** The fragment contains XUI (aka SCI) controls. */
	PT_MARKUP_FRAGMENT_TYPE_XUI(4, "PT_MARKUP_FRAGMENT_TYPE_XUI"),

	/** The fragment contains the portlet title. */
	PT_MARKUP_FRAGMENT_TYPE_TITLE(5, "PT_MARKUP_FRAGMENT_TYPE_TITLE"),

	/** The fragment contains an URL which should be gatewayed. */
	PT_MARKUP_FRAGMENT_TYPE_GATEWAY_URL(6, "PT_MARKUP_FRAGMENT_TYPE_GATEWAY_URL"),
	
	/** The fragment contains a placeholder for gateway fixURL function insertion. */
	PT_MARKUP_FRAGMENT_TYPE_FIX_FN(7, "PT_MARKUP_FRAGMENT_TYPE_FIX_FN"),
    
    /** The fragment contains a secure URL which should be gatewayed. */
    PT_MARKUP_FRAGMENT_TYPE_SECURE_GATEWAY_URL(8, "PT_MARKUP_FRAGMENT_TYPE_SECURE_GATEWAY_URL"),
    
 	/** The fragment marks the location immediately after the first <html> tag. */
	PT_MARKUP_FRAGMENT_TYPE_BEGIN_HTML(18, "PT_MARKUP_FRAGMENT_TYPE_BEGIN_HTML"),

	/** The fragment marks the location immediately before the first </head> tag. */
	PT_MARKUP_FRAGMENT_TYPE_END_HEAD(19, "PT_MARKUP_FRAGMENT_TYPE_END_HEAD"),

	/** The fragment marks the location immediately after the <head> tag. */
	PT_MARKUP_FRAGMENT_TYPE_BEGIN_HEAD(20, "PT_MARKUP_FRAGMENT_TYPE_BEGIN_HEAD"),

	/** Invalid, this value and above are reserved for future use. */
	PT_MARKUP_FRAGMENT_TYPE_INVALID(21, "PT_MARKUP_FRAGMENT_TYPE_INVALID");

	private int m_nFragmentType;
	private String m_strFragmentType;

	private PTMarkupFragmentTypes(int _nFragmentType, String _strFragmentType)
	{
		m_nFragmentType = _nFragmentType;
		m_strFragmentType = _strFragmentType;
	}

Item 20 is the problem enum.  If the comment has the <head> tag, it will fail.  Eclipse highlights this tag correctly, but then when you try to auto-complete in another file, the CPU pegs.  If you remove the angle brackets, this works fine.

Here's the code that uses the enum:

assertEquals("Third fragment should be a begin head marker fragment.",
	PTMarkupFragmentTypes.PT_MARKUP_FRAGMENT_TYPE_BEGIN_HEAD, 
	fragment.GetFragmentType());

This happens for me in build:

Version: 3.2.0
Build id: M20060629-1905

It also happens in BEA workshop 3.2, which is built on 3.2.

If you create a JDK 1.5 enum, and add an element with a comment like this:

/** This element has something to do with the <head> tag. */

And then go to another file and try to use that enum (through auto-completion), Eclipse will spin and use up all of a CPU on the computer.

Here is the basic code that does this.  I have not tested that this code causes the problem out of my environment.

public enum PTMarkupFragmentTypes
{
	/** The fragment is a string containing finished markup ready for display without further post-processing. */
	PT_MARKUP_FRAGMENT_TYPE_FINISHED(1, "PT_MARKUP_FRAGMENT_TYPE_FINISHED"),

	/** The fragment contains an XML tag that requires post-processing, in an array with columns defined by {@link com.plumtree.runner.transformers.common.PT_XML_ARRAY_COLS PT_XML_ARRAY_COLS}. */
	PT_MARKUP_FRAGMENT_TYPE_PT_XML(2, "PT_MARKUP_FRAGMENT_TYPE_PT_XML"),

	/** The fragment contains the name of the control used to render and intrinsic portlet. */
	PT_MARKUP_FRAGMENT_TYPE_IPP(3, "PT_MARKUP_FRAGMENT_TYPE_IPP"),

	/** The fragment contains XUI (aka SCI) controls. */
	PT_MARKUP_FRAGMENT_TYPE_XUI(4, "PT_MARKUP_FRAGMENT_TYPE_XUI"),

	/** The fragment contains the portlet title. */
	PT_MARKUP_FRAGMENT_TYPE_TITLE(5, "PT_MARKUP_FRAGMENT_TYPE_TITLE"),

	/** The fragment contains an URL which should be gatewayed. */
	PT_MARKUP_FRAGMENT_TYPE_GATEWAY_URL(6, "PT_MARKUP_FRAGMENT_TYPE_GATEWAY_URL"),
	
	/** The fragment contains a placeholder for gateway fixURL function insertion. */
	PT_MARKUP_FRAGMENT_TYPE_FIX_FN(7, "PT_MARKUP_FRAGMENT_TYPE_FIX_FN"),
    
    /** The fragment contains a secure URL which should be gatewayed. */
    PT_MARKUP_FRAGMENT_TYPE_SECURE_GATEWAY_URL(8, "PT_MARKUP_FRAGMENT_TYPE_SECURE_GATEWAY_URL"),
    
 	/** The fragment marks the location immediately after the first <html> tag. */
	PT_MARKUP_FRAGMENT_TYPE_BEGIN_HTML(18, "PT_MARKUP_FRAGMENT_TYPE_BEGIN_HTML"),

	/** The fragment marks the location immediately before the first </head> tag. */
	PT_MARKUP_FRAGMENT_TYPE_END_HEAD(19, "PT_MARKUP_FRAGMENT_TYPE_END_HEAD"),

	/** The fragment marks the location immediately after the <head> tag. */
	PT_MARKUP_FRAGMENT_TYPE_BEGIN_HEAD(20, "PT_MARKUP_FRAGMENT_TYPE_BEGIN_HEAD"),

	/** Invalid, this value and above are reserved for future use. */
	PT_MARKUP_FRAGMENT_TYPE_INVALID(21, "PT_MARKUP_FRAGMENT_TYPE_INVALID");

	private int m_nFragmentType;
	private String m_strFragmentType;

	private PTMarkupFragmentTypes(int _nFragmentType, String _strFragmentType)
	{
		m_nFragmentType = _nFragmentType;
		m_strFragmentType = _strFragmentType;
	}

Item 20 is the problem enum.  If the comment has the <head> tag, it will fail.  Eclipse highlights this tag correctly, but then when you try to auto-complete in another file, the CPU pegs.  If you remove the angle brackets, this works fine.

Here's the code that uses the enum:

assertEquals("Third fragment should be a begin head marker fragment.",
	PTMarkupFragmentTypes.PT_MARKUP_FRAGMENT_TYPE_BEGIN_HEAD, 
	fragment.GetFragmentType());

This happens for me in build:

Version: 3.2.0
Build id: M20060629-1905

It also happens in BEA workshop 3.2, which is built on 3.2.
Reproduced with build I20061129-1340.

Simpler test case:

public enum AnEnum {
	/**
	 * bla <head> bla.
	 */
	AN_ENUM_CONSTANT;
}

public class Main {
	public static void main(String[] args) {
		AnEnum x = AnEnum.AN_ENUM_CONSTANT|; // do code assist at |
	}
}

The problem occurs when the list of completion proposals appear and try to display the javadoc.

The problem can be reproduced with another test case

public enum AnEnum {
	/**
	 * bla <head> bla.
	 */
	AN_ENUM_CONSTANT; // place the pointer above 'AN_ENUM_CONSTANT'
}


Move to JDT Text.

Fixed in HEAD.
Available in builds > N20061130-0010.
