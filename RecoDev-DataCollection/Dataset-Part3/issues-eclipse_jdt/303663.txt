I am looking at one of our customer's stack traces, and I see that PDE has caused a deadlock.

In particular, on the main thread, as a part of loading the PDECore class
org/eclipse/pde/internal/core/PDECore.(PDECore.java:32)

it is causing the JavaRuntime to load, which causes the LaunchingPlugin to start, which eventually touches a file, which is waiting on a workspace lock. (The PDECore class is still not fully loaded). 

Meanwhile in Worker-1, it has the workspace lock, and it is trying to load the PDECore class. It is blocked on the main thread.

I am looking at one of our customer's stack traces, and I see that PDE has caused a deadlock.

In particular, on the main thread, as a part of loading the PDECore class
org/eclipse/pde/internal/core/PDECore.(PDECore.java:32)

it is causing the JavaRuntime to load, which causes the LaunchingPlugin to start, which eventually touches a file, which is waiting on a workspace lock. (The PDECore class is still not fully loaded). 

Meanwhile in Worker-1, it has the workspace lock, and it is trying to load the PDECore class. It is blocked on the main thread.
Created attachment 159966
stack trace
The customer was doing a headless build at the time of the deadlock, using an adopters product.
Any update on this? Our customer's see deadlocks as very serious failures.
This is fixed in 3.5 as a side effect of changing how the JavaCore options are set, via bug 255381.
Note that the fix to bug 255381 also caused bug 260445, which was fixed in 3.5.
Moving to JDT
Marking as duplicate.

*** This bug has been marked as a duplicate of bug 255381 ***
Reopening, as we need this fixed in 3.4.2.
Created attachment 160842
patch for 3.4.x code base
Released to the 3.4 maintenance stream.
