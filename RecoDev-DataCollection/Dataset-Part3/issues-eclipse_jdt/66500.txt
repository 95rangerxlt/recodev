3.0rc1
i have:
void foo(){
  Set/*<String>*/ ss= new HashSet();
  ss.add("");
}

generalize type of ss - you get
void foo(){
  Collection ss= new HashSet();
  ss.add("");
}

the important documenting comment is gone.
not a huge deal but still a bug

3.0rc1
i have:
void foo(){
  Set/*<String>*/ ss= new HashSet();
  ss.add("");
}

generalize type of ss - you get
void foo(){
  Collection ss= new HashSet();
  ss.add("");
}

the important documenting comment is gone.
not a huge deal but still a bug
Can be fixed now with a TargetSourceRangeComputer that doesn't use the extended
source ranges.

The AST rewrite can be configured with such a traget source range computer.

Frank, can you please have a look for 3.1
Dirk,

I suspect that this may be a bug in the ASTRewrite class. I find the
infrastructure for dealing with comments completely incomprehensible,
and I have no idea how to fix this bug, so I'm reassigning it to you.

In my opinion, there should be some infrastructure that makes it easy
to get and change the comments associated with a given ASTNode. 

  -Frank
As mentioned in comment #1 the infrastructure is now there. A refactoring can
define it's own comment to node mapping by providing a TargetSourceRangeComputer.

Have you looked at the API ?

In our case it might be the easiest to not assiociate any comments with the type
node. So the implementation of the TargetSourceRangeComputer is fairly easy.
Simple create a source range that is built form the start and lenght of the node.
Fixed thorugh patch 72331.
