BETA_JAVA8:

While working on adding support for type annotations on nested qualified 
type names (bug 383596), it has become clear that the existing grammar
changes done for 308 support are too complicated to work with and problem
prone. This bug will be used to document/track a brand new design that has
been prototyped that is very clean, elegant and orders of magnitude 
simpler. 

Basically, type annotations are recognized as type annotations in some 
places in the present grammar and as modifiers in other places to satisfy
the parser generator's requirement on the LALR(1)'ness of the input grammar. 

As a result,

    -  If we stack type annotations purely in the expression stack as we
do for Java SE5 annotations, they get interspersed with other expressions 
and some of the code is not prepared to handle such interleaving and will 
look ugly if changed. Maintaining type annotations in a separate stack
altogether was not possible with the present design since they are 
recognized as modifiers in certain parts of the grammar - So type 
annotations end  up in the expression stack at times and in type 
annotation stack at others. This greatly complicates the decoration of
AST nodes in a clean and consistent fashion - leading to a lot of 
code clutter.

    - Signalling the absence of type annotations becomes very difficult in
some places in the grammar: We need a non-terminal that reduces to epsilon
so we can attach a semantic action method to the production to push zero
on the type annotation length stack, but empty productions can and do trigger
various conflicts when placed in the "right" location. This forces us to
place them on occasions well after where they should be - sometimes well 
after other annotations are encountered. This causes us to violate the 
stack protocol by having to push at locations other than the top of stack: 
basically unstack various items, push and restack - not a happy situation.

    - In those locations where type annotations are recognized as modifiers,
the language accepted by the parser is no longer conformant and call for
constraining downstream by pruning the illegal programs (see bug 385293).
This problem is not a blocker in itself and is also integral to the 
alternate solution that has been prototyped, but is present only in a 
very non-virulent form in the new design (modifiers are not stacked, 
need to be retrieved before they evaporate  - see https://bugs.eclipse.org/bugs/show_bug.cgi?id=385293#c4).

The new design starts with simple modifications to allow type annotations 
*at the grammar level* before *any* type production in the grammar. Starting
from the observation that any type reference in Java must start
with either a primitive type or a simple name, we can now proceed by 
tweaking the relevant productions (shown somewhat simplistically, but 
materially truthfully):

PrimitiveType ::= TypeAnnotationsopt PrimitiveType
Name ::= TypeAnnotationsopt SimpleName
Name -> TypeAnnotationsopt QualifiedName
QualifiedName ::= Name '.' TypeAnnotationsopt SimpleName

Since *all* other productions that describe various flavors of type
(ClassType, InterfaceType, ClassOrInterfaceType, ClassOrInterface,
GenericType, ArrayType ...) are composed of PrimiveTypes and Names
these simple rules automatically ensure that *every use of a type* 
can be annotated with JSR308 style annotations without wholesale 
changes all over the place. 

Two details need mention:

(1) The specifications forbids type annotations in some places - in those 
places the grammar would be seen to be too permissive - these cases are
handled straighforwardly by rejecting the annotations if present in the 
AST construction phase.

(2) Such a change would make JSR308 annotations permissible at places
where SE5 annotations are acceptable - In the design this is handled
by feedback from the parser to the scanner using the machinery put in
place for JSR335 support (See bug 380194 and bug 385009) so that in
places where SE5 annotations are legal, the scanner is able to discriminate
and scan and hand out a SE5 annotation to the parser.

Patch to follow shortly.

BETA_JAVA8:

While working on adding support for type annotations on nested qualified 
type names (bug 383596), it has become clear that the existing grammar
changes done for 308 support are too complicated to work with and problem
prone. This bug will be used to document/track a brand new design that has
been prototyped that is very clean, elegant and orders of magnitude 
simpler. 

Basically, type annotations are recognized as type annotations in some 
places in the present grammar and as modifiers in other places to satisfy
the parser generator's requirement on the LALR(1)'ness of the input grammar. 

As a result,

    -  If we stack type annotations purely in the expression stack as we
do for Java SE5 annotations, they get interspersed with other expressions 
and some of the code is not prepared to handle such interleaving and will 
look ugly if changed. Maintaining type annotations in a separate stack
altogether was not possible with the present design since they are 
recognized as modifiers in certain parts of the grammar - So type 
annotations end  up in the expression stack at times and in type 
annotation stack at others. This greatly complicates the decoration of
AST nodes in a clean and consistent fashion - leading to a lot of 
code clutter.

    - Signalling the absence of type annotations becomes very difficult in
some places in the grammar: We need a non-terminal that reduces to epsilon
so we can attach a semantic action method to the production to push zero
on the type annotation length stack, but empty productions can and do trigger
various conflicts when placed in the "right" location. This forces us to
place them on occasions well after where they should be - sometimes well 
after other annotations are encountered. This causes us to violate the 
stack protocol by having to push at locations other than the top of stack: 
basically unstack various items, push and restack - not a happy situation.

    - In those locations where type annotations are recognized as modifiers,
the language accepted by the parser is no longer conformant and call for
constraining downstream by pruning the illegal programs (see bug 385293).
This problem is not a blocker in itself and is also integral to the 
alternate solution that has been prototyped, but is present only in a 
very non-virulent form in the new design (modifiers are not stacked, 
need to be retrieved before they evaporate  - see https://bugs.eclipse.org/bugs/show_bug.cgi?id=385293#c4).

The new design starts with simple modifications to allow type annotations 
*at the grammar level* before *any* type production in the grammar. Starting
from the observation that any type reference in Java must start
with either a primitive type or a simple name, we can now proceed by 
tweaking the relevant productions (shown somewhat simplistically, but 
materially truthfully):

PrimitiveType ::= TypeAnnotationsopt PrimitiveType
Name ::= TypeAnnotationsopt SimpleName
Name -> TypeAnnotationsopt QualifiedName
QualifiedName ::= Name '.' TypeAnnotationsopt SimpleName

Since *all* other productions that describe various flavors of type
(ClassType, InterfaceType, ClassOrInterfaceType, ClassOrInterface,
GenericType, ArrayType ...) are composed of PrimiveTypes and Names
these simple rules automatically ensure that *every use of a type* 
can be annotated with JSR308 style annotations without wholesale 
changes all over the place. 

Two details need mention:

(1) The specifications forbids type annotations in some places - in those 
places the grammar would be seen to be too permissive - these cases are
handled straighforwardly by rejecting the annotations if present in the 
AST construction phase.

(2) Such a change would make JSR308 annotations permissible at places
where SE5 annotations are acceptable - In the design this is handled
by feedback from the parser to the scanner using the machinery put in
place for JSR335 support (See bug 380194 and bug 385009) so that in
places where SE5 annotations are legal, the scanner is able to discriminate
and scan and hand out a SE5 annotation to the parser.

Patch to follow shortly.
A few more design notes:

Essentially the new approach makes annotatability (with 308 style
annotations) an intrinsic property of a type reference rather than
a property of the *location* where the type reference features in the
grammar.

Also, in OO parlance one can say that we are pulling up annotatability as
far up in the "hierarchy" of type references as possible. Since all flavors
of Java types are "derived" from primitive types and Names, ensuring these
can always be annotated ensure that all derived types wherever they occur
stand annotatable.

In the earlier design, at the grammar level there were no discrimination
between SE5 and SE8 annotations. Some incarnations of SE5 annotations are
morphed and treated as SE8 annotations based on the location where the 
annotation was written in the program.

In the new design, these two styles of annotations are two completely 
different beasts albeit sharing the same syntax. It is not as though all
annotations are born as SE5 annotations and they mutate into SE8 annotations.
When encountering the token '@' the scanner asks the parser (in effect)
whether the parser state indicates that a SE5 annotation could be in the
offing - If the parser answers yes, the token '@' is passed onto the parser
as is. On the other hand, should the parser indicate that '@' is not
a viable prefix for the remaining input given the already consumed input,
the scanner manufactures and returns a synthetic token that guides the
parse into a completely different direction.
Created attachment 221705
Patch under consideration.
(In reply to comment #0)

> we can now proceed by 
> tweaking the relevant productions (shown somewhat simplistically, but 
> materially truthfully):
> 
> PrimitiveType ::= TypeAnnotationsopt PrimitiveType
> Name ::= TypeAnnotationsopt SimpleName
> Name -> TypeAnnotationsopt QualifiedName
> QualifiedName ::= Name '.' TypeAnnotationsopt SimpleName

That should read:

PrimitiveType ::= TypeAnnotationsopt PrimitiveType
Name ::= TypeAnnotationsopt SimpleName
Name -> QualifiedName
QualifiedName ::= Name '.' TypeAnnotationsopt SimpleName
SimpleName -> Identifier

where TypeAnnotationsopt is a rule that stands for 0 or any number of
type annotations.
Fix and tests released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=cc1c110e9641a2cecfab702ac9383376aefe030a.

There are 16 tests that are still failing, but these have nothing
to do with the patch but to do with bug 390761 and the issues discussed
in bug 388800.

As a bonus, this redesign has allowed to restore a bunch of tests
disabled earlier and tracked at bug 383608.

The following tests don't fail anymore:

ComplianceDiagnoseTest.test0029()
ComplianceDiagnoseTest.test0038()
ComplianceDiagnoseTest.test0040()
ComplianceDiagnoseTest.test0041()

GenericTypeTest.test0932
GenericTypeTest.test1403

ASTConverterBugsTestJLS3.testBug130778q 

The following tests have been re-enabled as the diagnostic
now is better, or at least as good as or only as bad as :)
the earlier messages:

DietRecoveryTest.test75
DietRecoveryTest.test77
DietRecoveryTest.test99

ParserTest.test003()
ParserTest.test006()

AnnotationTest.testBug366003b()
AnnotationTest.testBug366003c()
AnnotationTest.testBug366003d()
AnnotationTest.testBug366003()

I had to disable these freshly for the time being and these will
be tracked via bug 383608:

DietRecoveryTest.test110
GenericDietRecoveryTest.test0019()
GenericTypeTest.test0932()
