The while...iterator template seems broken to me.  First, here's how I use it. 
I type something like the following:

    Iterator iter = myList.iterator();

    while<Ctrl-Space>


When I hit Ctrl-Space, I am offered a few proposals including "while - iterate
with iterator".

If I select it, I get the following:

        while (iterator.hasNext())
        {
            type element = (type) iterator.next();

        }

The problem is, it chooses "iterator" as the name of my iterator, not "iter". 
If I instead name my iterator "iterator", it chooses "iter". This is very
consistent.  

Tom Eicher suggested I file this bug.

The while...iterator template seems broken to me.  First, here's how I use it. 
I type something like the following:

    Iterator iter = myList.iterator();

    while<Ctrl-Space>


When I hit Ctrl-Space, I am offered a few proposals including "while - iterate
with iterator".

If I select it, I get the following:

        while (iterator.hasNext())
        {
            type element = (type) iterator.next();

        }

The problem is, it chooses "iterator" as the name of my iterator, not "iter". 
If I instead name my iterator "iterator", it chooses "iter". This is very
consistent.  

Tom Eicher suggested I file this bug.
The ${iterator} variable resolver tries to find a name for an iterator that is
not already used - which is fine for the for-loop, where the Iterator instance
will be created, but not for the while loop, where it should resolve to an
existing local Iterator.
With bug 10694 fixed, the while template should be rewritten to:

while (${enumeration}.hasMoreElements()) {
	${type} ${element} = (${type}) ${enumeration}.nextElement();
	${cursor}
}
fixed >= 3.3 M1. 
