Follow-up to bug 399791. That bug only added API in Flags for AccDefaultMethod, but the flag isn't actually returned by IMethod#getFlags().

On the other hand IMethod#getFlags() currently includes the unspecified Bit18 (ClassFileConstants.AccAnnotationDefault) for an annotation type method with a default value, e.g. javax.annotation.Generated#date() -- but ONLY if it's coming from a class file. For source files, it's masked away in SourceElementNotifier
#notifySourceElementRequestor(AbstractMethodDeclaration, ...)


For IMethod#getFlags() and IMethodBinding#getModifiers(), we need to decide which of these flags to include:

- Flags/ClassFileConstants#AccDeprecated:
included in getFlags(), but not in getModifiers() (spec'd like this)
=> keep it like this

- ClassFileConstants#AccAnnotationDefault (no API yet):
sometimes included in getFlags()
=> needs a new API constant in Flags
=> getFlags(): should always be returned since we may want to show this in the element icon
=> getModifiers(): not necessary; checking IMethodBinding#getDefaultValue() for null is good enough

- Flags/ExtraCompilerModifiers#AccDefaultMethod:
currently not returned anywhere
=> getFlags(): should always be returned since we may want to show this in the element icon; absence of 'abstract' is not enough to detect this in source
=> getModifiers(): not necessary; if declaring type is an interface type and IMethodBinding#getModifiers() includes 'abstract', then we know it's a default method.

Follow-up to bug 399791. That bug only added API in Flags for AccDefaultMethod, but the flag isn't actually returned by IMethod#getFlags().

On the other hand IMethod#getFlags() currently includes the unspecified Bit18 (ClassFileConstants.AccAnnotationDefault) for an annotation type method with a default value, e.g. javax.annotation.Generated#date() -- but ONLY if it's coming from a class file. For source files, it's masked away in SourceElementNotifier
#notifySourceElementRequestor(AbstractMethodDeclaration, ...)


For IMethod#getFlags() and IMethodBinding#getModifiers(), we need to decide which of these flags to include:

- Flags/ClassFileConstants#AccDeprecated:
included in getFlags(), but not in getModifiers() (spec'd like this)
=> keep it like this

- ClassFileConstants#AccAnnotationDefault (no API yet):
sometimes included in getFlags()
=> needs a new API constant in Flags
=> getFlags(): should always be returned since we may want to show this in the element icon
=> getModifiers(): not necessary; checking IMethodBinding#getDefaultValue() for null is good enough

- Flags/ExtraCompilerModifiers#AccDefaultMethod:
currently not returned anywhere
=> getFlags(): should always be returned since we may want to show this in the element icon; absence of 'abstract' is not enough to detect this in source
=> getModifiers(): not necessary; if declaring type is an interface type and IMethodBinding#getModifiers() includes 'abstract', then we know it's a default method.
Created attachment 229644
Fix
Srikanth/Jay, is this OK for you?
(In reply to comment #2)
> Srikanth/Jay, is this OK for you?

Jay, please take a look, Thanks.
The AccAnnotationDefault changes could theoretically also go into master.
But since nobody complained about this, I don't think it's worth the hassle.
(In reply to comment #2)
> Srikanth/Jay, is this OK for you?

This is fine by me. I also agree with not releasing this for master.
Thanks, fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=2b0e753de92cc29b7a8b55b07153a9f3b515c0be .

I've included a small fix in BinaryMethods: Static methods should not be flagged as default.
(In reply to comment #0)
> - Flags/ExtraCompilerModifiers#AccDefaultMethod:
> => getModifiers(): not necessary; if declaring type is an interface type and
> IMethodBinding#getModifiers() includes 'abstract', then we know it's a
> default method.

Should be: if declaring type is an interface type and IMethodBinding#getModifiers() includes neither of 'abstract' and 'static', then we know it's a default method.
I've added some more Javadoc fixes, mainly to clarify when IMethod#getFlags() returns derived flags: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=6ae5b75e45a8ed1fe5a89bb3aa53c58ea92d4b35
