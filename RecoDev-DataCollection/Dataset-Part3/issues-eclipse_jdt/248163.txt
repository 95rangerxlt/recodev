+++ This bug was initially created as a clone of Bug #248156 +++

Build ID: I20080617-2000

Steps To Reproduce:
1. Using http://wiki.netbeans.org/FaqApt ...
2. Create a project with ann/Handlable.java, proc/HandlableProcessor.java, and META-INF/services/javax.annotation.processing.Processor
3. Compile project and export as Jar file
4. Create another project which uses the produced Jar as its annotation processor and add demo/Main.java
5. Note that Main.java does not compile.

More information:
Notes...  It would be nice to be able to use the first project directly (as the source for annotation processing) rather than indirectly via a Jar file.  Meanwhile, the example doesn't compile because the Eclipse compiler seems incomplete.

To see this, you need to start Eclipse with "-consolelog -debug".  I'm digressing again, but it would be nice not to have to do this -- it would be preferable to have the errors show up in Eclipse itself rather than in the terminal that launched it.

The first error you get is:
java.lang.UnsupportedOperationException: Not yet implemented
	at org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeOutputJavaFileObject.toUri(IdeOutputJavaFileObject.java:104)
	at proc.HandlableProcessor.process(HandlableProcessor.java:36)

This corresponds to "f.toUri()" in the printMessage call.  Commenting that out gives:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.apt.model.Factory.newTypeMirror(Factory.java:384)
	at org.eclipse.jdt.internal.compiler.apt.model.Factory.newTypeMirror(Factory.java:389)
	at org.eclipse.jdt.internal.compiler.apt.model.ElementImpl.asType(ElementImpl.java:50)
	at proc.HandlableProcessor.process(HandlableProcessor.java:43)

which corresponds to "e.asType()".

+++ This bug was initially created as a clone of Bug #248156 +++

Build ID: I20080617-2000

Steps To Reproduce:
1. Using http://wiki.netbeans.org/FaqApt ...
2. Create a project with ann/Handlable.java, proc/HandlableProcessor.java, and META-INF/services/javax.annotation.processing.Processor
3. Compile project and export as Jar file
4. Create another project which uses the produced Jar as its annotation processor and add demo/Main.java
5. Note that Main.java does not compile.

More information:
Notes...  It would be nice to be able to use the first project directly (as the source for annotation processing) rather than indirectly via a Jar file.  Meanwhile, the example doesn't compile because the Eclipse compiler seems incomplete.

To see this, you need to start Eclipse with "-consolelog -debug".  I'm digressing again, but it would be nice not to have to do this -- it would be preferable to have the errors show up in Eclipse itself rather than in the terminal that launched it.

The first error you get is:
java.lang.UnsupportedOperationException: Not yet implemented
	at org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeOutputJavaFileObject.toUri(IdeOutputJavaFileObject.java:104)
	at proc.HandlableProcessor.process(HandlableProcessor.java:36)

This corresponds to "f.toUri()" in the printMessage call.  Commenting that out gives:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.apt.model.Factory.newTypeMirror(Factory.java:384)
	at org.eclipse.jdt.internal.compiler.apt.model.Factory.newTypeMirror(Factory.java:389)
	at org.eclipse.jdt.internal.compiler.apt.model.ElementImpl.asType(ElementImpl.java:50)
	at proc.HandlableProcessor.process(HandlableProcessor.java:43)

which corresponds to "e.asType()".
I can repro this with the following:

package p;
import a.Anno; // package a; public @interface Anno {}
public class Main
    @Anno private String f;
}

The org.eclipse.jdt.internal.compiler.lookup FieldBinding for 'f' has a null 'type' field, which is causing the NPE.  The type is null regardless of whether 'f' happens to be a String, an int, a user type, or whatever.

When running in the commmand-line compiler, the FieldBindings we get have non-null type.  Do we need to do something additional in the IDE compiler to get this field resolved?  Note that this code does compile correctly, i.e., this is not a recovered binding.

Reassigning to JDT Core for clarification - please reassign back to APT after answering.
(In reply to comment #1)
> I can repro this with the following:
> 
> package p;
> import a.Anno; // package a; public @interface Anno {}
> public class Main
>     @Anno private String f;
> }
> 
Walter, is the missing '{' after Main intended?
No, that's a typo in the bug, sorry.  The code does compile without errors (e.g., if I turn off annotation processing).
Created attachment 113275
Test case

Attached APT test case demonstrates the problem.  This is a patch to org.eclipse.jdt.apt.pluggable.tests project.

The problem happens only when I get the fields directly using getElementsAnnotatedWith().  If I get the parent class using getElementsAnnotatedWith, and then get the fields using getEnclosedElements(), the types are as expected and the test passes.  This is shown in a comment in ModelTesterProc.java.

So, I am assuming the problem is that when we collect bindings inside the RoundEnvImpl constructor, using the AnnotationDiscoveryVisitor, the field has not fully been resolved; if we get them later on it has been.

If you put a breakpoint in the end of the RoundEnvImpl constructor and look at the contents of _annoToUnit, it's pretty easy to see the state of things.
Philippe to investigate
*** Bug 253915 has been marked as a duplicate of this bug. ***
This bug appears to be hitting users.  If it is possible to backport to 3.4.2 that would be good.

It seems to affect any processor that directly targets method annotations (as opposed to targeting class annotations and then iterating through the class's methods).
Hey Walter, I tried the patch in comment 4, and got the following when running ModelTests; am I missing some portions of the testcase ?

Failure while running test org.eclipse.jdt.apt.pluggable.tests.ModelTests#testFieldType()!!!
Actual output is:
		"Problem : LookAt cannot be resolved to a type [ resource : </testproj0001/src/p/Foo.java> range : <240,246> category : <40> severity : <2>]\n" + 
		"Problem : LookAt cannot be resolved to a type [ resource : </testproj0001/src/p/Foo.java> range : <279,285> category : <40> severity : <2>]\n" + 
		"Problem : LookAt cannot be resolved to a type [ resource : </testproj0001/src/p/Foo.java> range : <325,331> category : <40> severity : <2>]\n" + 
		"Problem : ModelTestTrigger cannot be resolved to a type [ resource : </testproj0001/src/p/Foo.java> range : <148,164> category : <40> severity : <2>]\n" + 
		"Problem : The attribute test is undefined for the annotation type ModelTestTrigger [ resource : </testproj0001/src/p/Foo.java> range : <165,169> category : <50> severity : <2>]\n" + 
		"Problem : The import org.eclipse.jdt.apt.pluggable.tests.annotations.LookAt cannot be resolved [ resource : </testproj0001/src/p/Foo.java> range : <91,145> category : <30> severity : <2>]\n" + 
		"Problem : The import org.eclipse.jdt.apt.pluggable.tests.annotations.ModelTestTrigger cannot be resolved [ resource : </testproj0001/src/p/Foo.java> range : <18,82> category : <30> severity : <2>]\n"

Expected output is:
		""


After manually refreshing lib/annotations.jar, I was able to reproduce the NPE.
Walter - would it be possible for test setup to produce the JAR itself ? 

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.apt.model.Factory.newTypeMirror(Factory.java:384)
	at org.eclipse.jdt.internal.compiler.apt.model.Factory.newTypeMirror(Factory.java:389)
	at org.eclipse.jdt.internal.compiler.apt.model.ElementImpl.asType(ElementImpl.java:50)
	at org.eclipse.jdt.apt.pluggable.tests.processors.modeltester.ModelTesterProc.testFieldType(ModelTesterProc.java:158)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.jdt.apt.pluggable.tests.processors.modeltester.ModelTesterProc.round(ModelTesterProc.java:117)
	at org.eclipse.jdt.apt.pluggable.tests.processors.modeltester.ModelTesterProc.process(ModelTesterProc.java:96)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.handleProcessor(RoundDispatcher.java:139)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.round(RoundDispatcher.java:121)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:159)
	at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:134)
	at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:794)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:423)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:363)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:178)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:300)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:60)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:254)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:173)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:633)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:170)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:201)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:253)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:256)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:309)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:341)
	at org.eclipse.core.internal.resources.Workspace.build(Workspace.java:330)
	at org.eclipse.jdt.core.tests.builder.TestingEnvironment.fullBuild(TestingEnvironment.java:439)
	at org.eclipse.jdt.core.tests.builder.BuilderTests.fullBuild(BuilderTests.java:390)
	at org.eclipse.jdt.apt.pluggable.tests.ModelTests.testFieldType(ModelTests.java:56)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)
	at org.eclipse.pde.internal.junit.runtime.CoreTestApplication.run(CoreTestApplication.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:574)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:195)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:370)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:549)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:504)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1236)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1212)

Created attachment 117175
Added a method type testcases

The problem is not specific to field types (can be reproduced with method types).
Basically, none of the source member bindings are resolved yet, since annotation processing is hooked after #beginToCompile(...). At that stage, bindings have not yet been completed (connected together).
Actually, types got connected (completeTypeBinding steps), but fields&methods did not get resolved (not until processUnit/faultInTypes).

The fix resides in compiler.apt though, so as to ensure trigering lazy resolution when traversing the AST and exposing bindings (a binding may not have been resolved). It apparently seemed to handle the argument case already, but missed fields & methods & constructors.

See patch below.

Note: Walter - you should release more tests for method argument types and exception types ?


Created attachment 117177
Proposed patch in APT
I would also support backporting this fix to 3.4.2, as it feels a big hole in the story, and a reasonable fix is at hand.

Moving back to APT land.
Created attachment 117188
Proposed patch ported to eclipse 3.4.1
I applied the proposed patch to the sources coming with eclipse 3.4.1.

Applying this patch works with a small modification in: 
org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.

(made resolveTypeFor(FieldBinding field) public)


Using this patched version of eclipse 3.4.1 resolves bug #253915.

thanks a lot.


Fixed in trunk (3.5 M4).  I will keep the bug open until I've applied to 3.4.x as well.
Philippe, if you approve backporting this change to 3.4.2 (as I think we should), could you release the SourceTypeBinding.java change in the maintenance branch?  Then I can apply the APT changes there as well.
I do approve backporting, and made the necessary change on SourceTypeBinding in 3.4 branch.
Fix released for 3.4.2.
*** Bug 259324 has been marked as a duplicate of this bug. ***
