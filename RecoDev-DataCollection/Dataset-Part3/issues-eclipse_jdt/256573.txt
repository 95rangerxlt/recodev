I20081125-0840.

While doing the dead-code analysis I found this code in
org.eclipse.jdt.internal.corext.refactoring.surround.SurroundWithTryCatchRefactoring.createTryCatchStatement(IBuffer, String):

	IVariableBinding binding= ((VariableDeclarationFragment)original.next()).resolveBinding();
	// If we want to initialize the new local then we should do a flow analysis upfront
	// to decide if the first access is a read or write.
	if (true /* binding == null */) {
		fragment.setInitializer(null);
	} else {
		fragment.setInitializer(ASTNodeFactory.newDefaultExpression(ast, binding.getType()));
	}

The else-branch is dead code and the computation of 'binding' is superfluous.

I20081125-0840.

While doing the dead-code analysis I found this code in
org.eclipse.jdt.internal.corext.refactoring.surround.SurroundWithTryCatchRefactoring.createTryCatchStatement(IBuffer, String):

	IVariableBinding binding= ((VariableDeclarationFragment)original.next()).resolveBinding();
	// If we want to initialize the new local then we should do a flow analysis upfront
	// to decide if the first access is a read or write.
	if (true /* binding == null */) {
		fragment.setInitializer(null);
	} else {
		fragment.setInitializer(ASTNodeFactory.newDefaultExpression(ast, binding.getType()));
	}

The else-branch is dead code and the computation of 'binding' is superfluous.
Fixed in HEAD.
