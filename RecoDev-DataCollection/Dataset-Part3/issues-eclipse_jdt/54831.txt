I20040311
Second time today running out of memory. There's nothing in the .log of 
interest but both times it was using content assist. Another hint that this 
was about to occur: Eclipse slooooowing doing to the point of being un-usable. 
Everything was slow, and I assume this was caused by swapping/high memory 
usage.

I20040311
Second time today running out of memory. There's nothing in the .log of 
interest but both times it was using content assist. Another hint that this 
was about to occur: Eclipse slooooowing doing to the point of being un-usable. 
Everything was slow, and I assume this was caused by swapping/high memory 
usage.
Created attachment 8572
log file after workbench crashed
Were you noticing excessive slowness *before* you did code assist?

Moving to JDT.
Actually it has just happened again. I was doing some heavy refactoring, then 
things really started to slow-down. Then crash. OOM...
I haven't received my YourKit license yet, but this happens all the time now. 
Eclipse doesn't always crash but it sloooows down a lot. Here is the pattern 
I've seen recently, it's actually quite reproduceable:

perform a couple of refactorings (e.g. > 50 files touched) then notice how 
Eclipse becomes slow. After this, scrolling, code assist, search... is all 
really slow. I assume the refactorings leaked memory and the VM is trashing.
There's a known editor leak (bug 55174), but of course we keep the eyes open for
other problems
I inspected a memory dump with 100 MB of heap size and there aren't any 
leaking refactoring object in that dump. The only references to refactoring in 
that dump are four undo objects on the undo stack.

I doubt that the big Heap is because of leaking refactoring objects. However 
some of the refactorings needs quite some amount of heap space for their 
computation (especially if lots of referencing updating is envolved). 
Refactorings consuming memory are: extract interface, use supertype where 
possible and Generalize Type. Jean-Michel, did you use some of them ?
I did use Generalize Type. Just to note that I'm currently running with 
YourKit at all times. But unfortunatly since it's milestone week I haven't 
been using refactoring much. But I'll attach a dump the next time Eclipse 
slows down.
We started to implement performance tests for refactorings and are working on 
an improved version of the type constraints to lower memory consumption for 
extract interface, use supertype where possible and generalize types.

Markus, please take care of the PR and close it when the new intrastructure is 
in place and used by the refactorings.
We improved the memory consumption of the refactorings dealing with type
constraints. Furthermore, the out of memory can be caused by everybody and
simply manifest itself in the code assist.

I will close the bug since without a heap dump there is nothing more we can do.
