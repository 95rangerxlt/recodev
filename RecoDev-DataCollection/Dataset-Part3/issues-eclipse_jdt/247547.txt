Created attachment 112697
assist_diff.txt

Taken from bug 208540:

- enable incremental completion
- invoke content assist after ( | = caret):

----------------------------------
    void m(Object o) {
        if (o instanceof Integer)
            o.g|
----------------------------------

- expected: prefix completed to "o.get", proposals for getClass and getInteger methods
- actual: no prefix completion, the proposal selector opens directly

--

Also, the fix for #208540 added a small change when compared to 3.3 to the "semi case sensitive" matching done by prefix completion:

- enable incremental completion
- invoke content assist after ( | = caret):

----------------------------------
    void m(int indexCount) {
        ind|
----------------------------------

- expected: incremental completion detects the sole case sensitve match for the
  'indexCount' parameter and applies the proposal (3.3 behavior)
- actual: the proposal selector opens and shows all kinds of types like IndexOutOfBoundsException

The case matching algorithm is arguably peculiar - but the case outlined above bugs me frequently.

The attached patch fixes the two problems described and adds tests, also for #208540. The patch restores one part of the previous fix for #208540 and overwrites getPrefixCompletionStart in JavaMethodCompletionProposal for METHOD_REF_WITH_CASTED_RECEIVER proposals.

Created attachment 112697
assist_diff.txt

Taken from bug 208540:

- enable incremental completion
- invoke content assist after ( | = caret):

----------------------------------
    void m(Object o) {
        if (o instanceof Integer)
            o.g|
----------------------------------

- expected: prefix completed to "o.get", proposals for getClass and getInteger methods
- actual: no prefix completion, the proposal selector opens directly

--

Also, the fix for #208540 added a small change when compared to 3.3 to the "semi case sensitive" matching done by prefix completion:

- enable incremental completion
- invoke content assist after ( | = caret):

----------------------------------
    void m(int indexCount) {
        ind|
----------------------------------

- expected: incremental completion detects the sole case sensitve match for the
  'indexCount' parameter and applies the proposal (3.3 behavior)
- actual: the proposal selector opens and shows all kinds of types like IndexOutOfBoundsException

The case matching algorithm is arguably peculiar - but the case outlined above bugs me frequently.

The attached patch fixes the two problems described and adds tests, also for #208540. The patch restores one part of the previous fix for #208540 and overwrites getPrefixCompletionStart in JavaMethodCompletionProposal for METHOD_REF_WITH_CASTED_RECEIVER proposals.
The fix for the casted method proposals is fine but the fix in CompletionProposalPopup brings back one of my and Markus's most hated things:

SWT.NO, SWT.no and SWT.nO ==> open popup and you can also choose None or NONE

SWT.No ==> SWT.None is directly inserted - but hey: I wanted SWT.NONE


Now, here's a very simple test case (in addition to bug 208540 comment 1) to demonstrate the problem of your patched CompletionProposalPopup:

public class TestClass {
	private static final String goodboy= "";
	private static final String GOODGIRL= "";
	void m(Object o) {
		good<code assist here>
	}
}
with your patch this immediately inserts goodboy and never allows me to select the GOODGIRL ;-)

Code assist is well known to be case-insensitive and just because prefix completion is enabled I don't want to change this. Sorry Tom ;-)

I've committed your patch but without CompletionProposalPopup and without the MethodInsertCompletionTest.testIncrementalCaseSensitivePrefix() which is broken without this.

I've also added your credentials to the affected files.
(In reply to comment #1)

> Code assist is well known to be case-insensitive and just because prefix
> completion is enabled I don't want to change this. Sorry Tom ;-)

Alright, alright.

> The fix for the casted method proposals is fine but the fix in
> CompletionProposalPopup brings back one of my and Markus's most hated things:
> 
> SWT.NO, SWT.no and SWT.nO ==> open popup and you can also choose None or NONE
> 
> SWT.No ==> SWT.None is directly inserted - but hey: I wanted SWT.NONE

But hey, isn't it a bad thing to change the behavior of content assist because someone didn't read the coding conventions :-) ? Also, if you took the time to type in a captial 'N', isn't that a sign that you actually meant 'None'?

We have other places in the UI where the case-sensitiveness tries to be smart, e.g. the quick outline filtering does case sensitive matching if there are any capital letters in the filter expression.

Anyway, thanks for putting it in...
The old approach works well for small class hierarchies with a few methods but if you have deep hierarchies with many inherited members it is easy do filter away stuff that you would really like to see (esp. when typing small letters only).
