2.0

1. Create a selfhosting workspace containing org.eclipse.ui.
2. Attach the following URL to workbench.jar

http://download.eclipse.org/downloads/documentation/2.0/html/plugins/org.eclipse
.platform.doc.isv/reference/api

3. select a package in the JAR. Press Shift + F2.
4. browser (Internet Explorer) comes up with a script error

This is the old well known problem with the illegal parent access.
The help servlet should also be a proxy for http:// adresses.

2.0

1. Create a selfhosting workspace containing org.eclipse.ui.
2. Attach the following URL to workbench.jar

http://download.eclipse.org/downloads/documentation/2.0/html/plugins/org.eclipse
.platform.doc.isv/reference/api

3. select a package in the JAR. Press Shift + F2.
4. browser (Internet Explorer) comes up with a script error

This is the old well known problem with the illegal parent access.
The help servlet should also be a proxy for http:// adresses.
This one is slightly more involved because of the different networking settings 
the user has.
For example, the user can access the internet using some proxy that is likely 
not available to Eclipse, so when help tried to open the remote address 
(http://....) using the standard java.net.* classes it also need to know the 
proxy values (server, user, passwed, etc.)
I guess we have o assume that the user starts the VM with the appropriate 
parameters (if I remember right there was a similar discussion with CVS?)


Update, not CVS. Its bug 19258.
We will not fix this one as it bypasses browser security. It was ok for file: 
because the files were loaded from the user's machine. However, treating the 
remote documents as part of help could lead to security violations. This is 
especially true for the info-center scenario.
If you can think of a safe fix, please re-open the bug.
The bug is not fixed we need a solution.
Note that for example Netscape on Linux doen not show any doc when running into 
that.
I agree that my suggested fix would introduce a security leak. We must find 
another solution then.

What about allow us to have our own browser window?
I agree with running the system browser when browsing external (http) 
documents. In fact, the guidelines for help developers was to, whenever linking 
to an external doc, use <a href="http://server/file.thml"  target="_new">
so that the external link is launched in the system browser.

Help does not currently exposes the system browser, it has browser adapters 
that you can use, but I think the SWT team is looking at providing such an API: 
http://bugs.eclipse.org/bugs/show_bug.cgi?id=20954
The problem exists with Javadoc coming from an external http server.  I think 
it only affects javadoc generated using Sun's default doclet.  The solution to 
the bug has two parts.
1.  Knowing which URLs are pointing to the Javadoc files that contain bad 
script.
2.  Treating these URLs differently, than other help topics so the problem can 
be avoided.

1.  As not all external URLs will run into this problem, it is necessary to 
narrow down the set of URLs that need special treatment.  The decision is best 
made in JDT UI code rather than help code.  I imagine when JDT calls help, it 
already knows whether a particular URL is supposed to contain javadoc, or other 
HTML pages, so whether part 2 needs to be applied or not.  A further 
improvement may be added to factor out URLs that point to javadoc, but 
generated with a different doclet that would not cause a problem.

1a. A list of sites that are known to host problematic javadoc can be 
maintained.  If an URL does not belong to the list, it can probably be 
displayed in help frameset and not result in an error.

1b. Content can be obtained and analyzed from the URL, before deciding what to 
open in the browser.  If the beginning of document 
contains "parent.document.title=" than it will cause trouble when displayed by 
help.  Running this detection can better determine whether javadoc is wrong, 
but has its disadvantages.  It introduces delay into launching the URL, because 
some time must be allowed for obtaining the content.  If site is down, or the 
proxy is not setup correctly, this method is unreliable, and will unnecessary 
slow down launching the browser.


Part 2.  can be accomplished by:
2a. Help not using multiple frames in a browser, but using a separate widget 
for each frame.  Given that a browser widget is in plans for Eclipse 2.2, we 
can wait with the solution, and if help is redesigned not to use frames, the 
problem will disappear.

2b. Opening these URLs in a browser without help any help frames.  This will 
not look integrated with help, but will solve the problem, and from the 
comments above, it seems is an OK solution.  As having reliable code for 
launching the browser on all platform is tricky, the  
org.eclipse.help.internal.browser.BrowserManager.createBrowser() can be used to 
obtain a browser instance by JDT team.  This is an internal API, but is used 
outside help by PDE, and Update.  I imagine, JDT team can use it as well until 
UI team provides a widget that everybody can use.  If using JDT cannot use 
internal class from help, they can pass some flag with the URL when calling 
IHelp.displayHelpResource(href), and help system would open a separate browser 
and load the URL upon detecting this flag added to the URL.

2c. The content of the URL can be stream through the help server, so it will 
appear as coming from the same domain as other frames.  As discussed, this 
creates issues when a proxy needs to be used, and the VM is not configured to 
use it.  This will overcome security of the browser, and hence create security 
concerns as well.  I would imagine a question displayed to the user when they 
attach javadoc.  The question would ask whether they trust the site serving the 
Javadoc, or whether they are O.K. seeing the error.  If users trust the site, 
JDT UI, can run a webapp on the help server that will act as a proxy for these 
particular URLs.


Please comment on what are your preferences in proceeding with this bug.
I think it would be good if the user can decide that the Javadoc is shown in a 
browser without frames. We could introduce a preference setting.

I'll have a look with the BrowserManager. If we can have an extra flag in 
displayHelpResource, that would be great as well.

We made  a change to the default (embedded IE) browser on Windows so that error 
messages are no longer displayed, so that would be a workaround for most users.
We cannot longer reproduce the problem with latest code.
Please reopen if you see the problem in RC2
*** Bug 33244 has been marked as a duplicate of this bug. ***
*** Bug 36004 has been marked as a duplicate of this bug. ***
Reopenning since the problem still exists if customer has a J++ or script 
debugger installed as explaned in bug 36004.
There is a browser widget in 3.0 Eclipse plan.  If it is implemented, would 
you use the new widget for displaying Javadoc, or still require the help 
browser to handle Javadoc?
>There is a browser widget in 3.0 Eclipse plan.  If it is implemented,
> would you use the new widget for displaying Javadoc, or still 
>require the help browser to handle Javadoc?

If it didn't require me to find some obscure option, it was the default and 
worked out of the box.

Sure, why not?

Ã˜yvind

Sorry.  User should not need to do anything.

My question was directed more towards Martin, how JDT would implement 
displaying Javadoc.  Would JDT code use the new widget or continue to call 
help?
I have to look at it again, but I think we're already quite coupled with help:
We use the info pop (IContext) where we add a link to the Javadoc of the current
selection, and we're using the help webapp to open html out of archives (UI
support will be in M2). So if it's ok for you, I'd continue using the help
infrastructure.

So what about a way for a IHelpResource to declare that it wants to be opened in
an own window? A possible way non-breaking way to do so would be to introduce an
interface IStandAloneHelpResource extends IHelpResource.
This bug is about a workaround for a erroneous Javadocs, not a bug or feature 
in help, so I would hate to complicate help APIs by adding 
IStandAloneHelpResource interface, and would rather not have help resources 
being opened outside of help in most circumstances.

Another way to do this is for help to recognize that the resource prefers to 
be opened in its own window from a format of its href.  If JDT can construct 
resource with href="http://path/to/file?noframes=true" (or 
href="noframes:http://path/to/file", help can remove and interpret 
the "noframes" before opening document.  That way we can fix this particular 
bug without having to advertise a completely new API.
That's fine for me, too. As long as you don't get trouble with URLs that happen
to end with "?noframes=true"..
*** Bug 41246 has been marked as a duplicate of this bug. ***
I do not think chances of collision is very high, so I have released the code 
that recognizes ?noframes=true appended to an http: URL as in comment 8.  The 
URL is then not considered help topic, and is displayed without surrounding 
help frames.

You can now append this parameter for javadoc document URLs (only for http: 
ones, the problem did not exist for file: URLs).
*** Bug 43185 has been marked as a duplicate of this bug. ***
Now all external Javadoc opens without the help frame
It would be possible to open file:// urls with frames, but this seems 
inconsistent. Please speak up if you think it would be better to have that.

Konrad, would it make sense to still get the help bar (next, prev, print..) in 
noframe mode?

The toolbar that was there was an HTML toolbar.  Having it would imply frames 
that we had to avoid.  Right click menu is working, so theoretically there is 
a way to perform browser operations (back, forward, print, add to favorites).

To have a toolbar again we would need to implement them in SWT, so really have 
two different embedded browsers (one for help with HTML toolbar, and one for 
Javadoc with SWT toolbar).
Another solution is to never use embedded browser for Javadoc, but open it in 
a system browser.

I am not sure whether there is much to gain in having a toolbar but 
introducing more inconsistency in help browsers, and more hack in help code.  
Open a feature for help if you think a toolbar is necessary.
