I20031119

Most of our current refactorings only do a sporadic check of 
IProgressMonitor.isCanceled() resulting in a bad canceling behavior. We should 
make a path over our existing refactoring and queck the cancel state at least 
after each compilation unit we have processes in checkInput and createChange.

The code pattern to add should look like this:

pm.worked(...)
if (pm.isCanceled()) {
  // clean-up state if necessary
  throw new OperationCancelException();
}

I20031119

Most of our current refactorings only do a sporadic check of 
IProgressMonitor.isCanceled() resulting in a bad canceling behavior. We should 
make a path over our existing refactoring and queck the cancel state at least 
after each compilation unit we have processes in checkInput and createChange.

The code pattern to add should look like this:

pm.worked(...)
if (pm.isCanceled()) {
  // clean-up state if necessary
  throw new OperationCancelException();
}
Markus, can you take care of Adam's refactorings as well.
*** Bug 46998 has been marked as a duplicate of this bug. ***
This will very likely not make it into M6 for all refactorings.
Postponing to M7.
Be aware that non-responiveness to cancel is also caused by bug 3738 (see also
bug 25608 and bug 42694):

Currently (3.0M7), refactoring dialogs only respond to cancel after the
'Preview' button has been pressed. When the user presses 'Finish', cancelling
the precondition calculation (and the change execution) is not possible.

For 'Finish', a PerformChangeOperation calculates preconditions *and* executes
the changes. Since the actual execution of the change must happen in the UI
thread, the PerformChangeOperation can't simply be run in another thread.
Fixed.
