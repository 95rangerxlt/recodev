Code recovery has problem with the following code:

class X {
         public void foobar(X this, int, int k) {} // NPE!
}

But the NPE is thrown only when the first regular parameter is incomplete. For e.g. the following code throws no NPE.

         public void foobar(X this, int i, int , int ,) // No NPE 

This is the root cause of the exception:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.parser.RecoveredMethod.updateFromParserState(RecoveredMethod.java:511)
	at org.eclipse.jdt.internal.compiler.parser.Parser.updateRecoveryState(Parser.java:12061)
	at org.eclipse.jdt.internal.compiler.parser.Parser.resumeOnSyntaxError(Parser.java:11976)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:10639)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:10970)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:10927)
	at org.eclipse.jdt.internal.compiler.parser.Parser.dietParse(Parser.java:9359)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:718)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:383)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1133)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:685)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1186)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)

Code recovery has problem with the following code:

class X {
         public void foobar(X this, int, int k) {} // NPE!
}

But the NPE is thrown only when the first regular parameter is incomplete. For e.g. the following code throws no NPE.

         public void foobar(X this, int i, int , int ,) // No NPE 

This is the root cause of the exception:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.parser.RecoveredMethod.updateFromParserState(RecoveredMethod.java:511)
	at org.eclipse.jdt.internal.compiler.parser.Parser.updateRecoveryState(Parser.java:12061)
	at org.eclipse.jdt.internal.compiler.parser.Parser.resumeOnSyntaxError(Parser.java:11976)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:10639)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:10970)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:10927)
	at org.eclipse.jdt.internal.compiler.parser.Parser.dietParse(Parser.java:9359)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:718)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:383)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1133)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:685)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1186)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
Jesper, this is readily fixable - In RecoveredMethod.java, the "protection"
put in place for bugs 15142 fails to offer any real protection because the
argument is mutated into the receiver and so arguments is null.
Created attachment 228827
Fix and test

Add comment 0 as a test, as well as a "if it's not an argument, it must be a receiver"-protection.

I'm not sure why the syntax error is reported twice, though.
Fix looks good. I added the JCP disclaimer to RecoveredMethod.java and used
the fix. The test belongs more in NegativeTypeAnnotationsTests and I moved it
there. The double reporting does not happen when the test is in this file and
is perhaps due to some error handling policy differences between the two suites.

The present error recovery is not so good, but that is a different topic
that we can address later.

Fix and tests released here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=4d25f5ead9ec8b7cb8b7982110fb9ccd9a9e64fc
