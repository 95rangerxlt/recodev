I20040330 + jdt.ui, debug.*, jdt.debug.* from HEAD

I'm implementing the support of the refactoring for the Java breakpoints. I have
a problem when trying to update the breakpoint for IType rename, the workspace
is not in a usable state.
Breakpoints are basically just markers associated with some code. To update the
breakpoint, I have to delete it and recreate it on the resource. The problem is
the fact that when the perform() method of my change is called, the new resource
hasn't been created yet, so I cannot add the breakpoint.
It would be better if the processor completes all it's changes before calling
the participants.

I20040330 + jdt.ui, debug.*, jdt.debug.* from HEAD

I'm implementing the support of the refactoring for the Java breakpoints. I have
a problem when trying to update the breakpoint for IType rename, the workspace
is not in a usable state.
Breakpoints are basically just markers associated with some code. To update the
breakpoint, I have to delete it and recreate it on the resource. The problem is
the fact that when the perform() method of my change is called, the new resource
hasn't been created yet, so I cannot add the breakpoint.
It would be better if the processor completes all it's changes before calling
the participants.
Created attachment 9175
bug_57340.patch - patch to jdt.debug.ui

This is an example of the problem.
To try it, put a watchpoint on the field of a type, and rename this type.

If you put a breakpoint on line 58 of JavaWatchpointTypeNameChange, you can see
that I have the new IType I have is from a working copy, and evaluating
'newType.getResource().exists()' return false.
(an exception is thrown where trying to create the breakpoint/marker)
Luc, the processor changes are executed before any participant changes are 
performed. Hoewever all changes are executed inside a workspace runnable which 
might have an influence about what you are seeing. If this is the case there 
is little I can do. I will investigate...
I looked into it and the processor changes are executed before the participant 
changes. The problem is that we use resource rename instead of compilation 
unit rename to rename the file. As a result the Java model only notice the 
rename after the workspace runnable has been executed. Changed the refactoring 
code to use a compilation unit rename in this scenario. 

Fix will be available in HEAD. 
