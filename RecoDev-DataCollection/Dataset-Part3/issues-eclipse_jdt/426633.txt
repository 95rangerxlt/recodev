Consider the following program:

// -
interface I {
	 <T> void foo (T... p);
}
abstract class A implements I {
	public void foo(Object [] p) {
		System.out.println("A.foo");
	}
}
public class X extends A {
	public static void main(String[] args) {
		A a = new X();
		a.foo("hello", "world");
	}
}

At the call site, A.foo is not applicable given the arguments and parameters
differ in length.

I.foo is accessible and applicable, but A.foo does override it without being
applicable.

Consider the following program:

// -
interface I {
	 <T> void foo (T... p);
}
abstract class A implements I {
	public void foo(Object [] p) {
		System.out.println("A.foo");
	}
}
public class X extends A {
	public static void main(String[] args) {
		A a = new X();
		a.foo("hello", "world");
	}
}

At the call site, A.foo is not applicable given the arguments and parameters
differ in length.

I.foo is accessible and applicable, but A.foo does override it without being
applicable.
This issue has had a colorful past: 

JDK5 issues:

X.java:5: warning: foo(java.lang.Object[]) in A cannot implement <T>foo(T...) in
 I; overriding method is missing '...'
        public void foo(Object [] p) {
                    ^
X.java:9: warning: foo(java.lang.Object[]) in A cannot implement <T>foo(T...) in
 I; overriding method is missing '...'
public class X extends A {

but then goes ahead and compiles which when run prints A.foo

JDK6:

Silent during compile, A.foo at runtime.

JDK7:

X.java:12: error: method foo in class A cannot be applied to given types;
                a.foo("hello", "world");
                 ^

JDK8:

X.java:12: error: <T>foo(T...) in I is defined in an inaccessible class or inter
face
                a.foo("hello", "world");
                 ^
  where T is a type-variable:
    T extends Object declared in method <T>foo(T...)
1 error

On BETA_JAVA8 head, project setting 1.5 - 1.7 compile the code with a warning

Varargs methods should only override or be overridden by other varargs methods unlike A.foo(Object[]) and 
	 I.foo(Object...)


1.8 setting issues:

The method foo(Object[]) in the type A is not applicable for the arguments (String, String)

but that is due to a recent change in an area that is under flux. And there
are variants which we do compile as we do in 1.7- modes.

We need to emit a clear new diagnostic for this scenario.
(In reply to Srikanth Sankaran from comment #1)

> but that is due to a recent change in an area that is under flux. And there
> are variants which we do compile as we do in 1.7- modes.

Consider:

interface I {
	 <T> void foo (T... p);
}
abstract class A  {
	public void foo(Object [] p) {
		System.out.println("A.foo");
	}
}
abstract class B extends A implements I {
	
}
public class X extends B implements I {
	public static void main(String[] args) {
		B b = new X();
		b.foo("hello", "world");
	}
}

This is compiled without error in 1.8 and when run prints A.foo.
Fix and tests available here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=2b49f89ec08ec07d960829d0eb3050d846fdb2ac
