0205

1. Create a project with using an external jar and attached source 
corresponding to the class below.
2. In the package view, expand to Inner.class.
3. Select the method invocation test() in callsTest.
4. Press F3.
This fails with a beep.

NOTE: The same test succeeds if MyClass.class is selected instead.

I was confused because I was scrolling around and did not realize that
I had an inner class selected (it was used because I had done an earlier
search).  

public class MyClass {
	
	class Inner {
		public void junk() { }
	}
	
	public void test() { }
	
	public void callsTest() {
		test();
	}

}

0205

1. Create a project with using an external jar and attached source 
corresponding to the class below.
2. In the package view, expand to Inner.class.
3. Select the method invocation test() in callsTest.
4. Press F3.
This fails with a beep.

NOTE: The same test succeeds if MyClass.class is selected instead.

I was confused because I was scrolling around and did not realize that
I had an inner class selected (it was used because I had done an earlier
search).  

public class MyClass {
	
	class Inner {
		public void junk() { }
	}
	
	public void test() { }
	
	public void callsTest() {
		test();
	}

}
Moving to Core for investigation.
Is Inner.class a classfile in the output folder ? These are not true Java 
elements (not defined under a package fragment root).
I am not looking in the output folder - the classes are in
a jar.

MyClass$Inner.class is showing up in the packages view.

I will attach the jar and the source.
Created attachment 332
zzz.jar (jar with MyClass.class and MyClass$Inner.class)
Created attachment 333
zzzsrc.jar (jar with MyClass.java)
If code select from class file, the BasicCompilationUnit must be the main type.

Fixed
