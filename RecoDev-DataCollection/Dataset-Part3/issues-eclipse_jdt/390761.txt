BETA_JAVA8: 

The following compiles alright with Lambda JDK8b56, but fails
to compile on Eclipse top of beta8 branch. I believe the right
behavior is to compile this fine. As Map's method replaces MapStream's
asIterable(), at X, only the more immediate method should be seen
thus eliminating any chance of a clash.

However, the current code leaves in MapStream's method also
perhaps under the influence of https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358: Essentially we should not skip the inherited method if any 
overriding version in a subclass may have a different erasure.

In the present case since Map and MapStream are isomorphic with pass-through
parameterization, it is kosher to eliminate MapStream's method.

// ----
public interface X extends Map {
}

interface Map<K,V> extends MapStream<K, V>  {
	Iterable<BiValue<K, V>> asIterable() default {
		return null;
	}
}
interface MapStream<K, V> {
	Iterable<BiValue<K, V>> asIterable();
}

interface BiValue<T, U> {
    T getKey();
    U getValue();
}

BETA_JAVA8: 

The following compiles alright with Lambda JDK8b56, but fails
to compile on Eclipse top of beta8 branch. I believe the right
behavior is to compile this fine. As Map's method replaces MapStream's
asIterable(), at X, only the more immediate method should be seen
thus eliminating any chance of a clash.

However, the current code leaves in MapStream's method also
perhaps under the influence of https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358: Essentially we should not skip the inherited method if any 
overriding version in a subclass may have a different erasure.

In the present case since Map and MapStream are isomorphic with pass-through
parameterization, it is kosher to eliminate MapStream's method.

// ----
public interface X extends Map {
}

interface Map<K,V> extends MapStream<K, V>  {
	Iterable<BiValue<K, V>> asIterable() default {
		return null;
	}
}
interface MapStream<K, V> {
	Iterable<BiValue<K, V>> asIterable();
}

interface BiValue<T, U> {
    T getKey();
    U getValue();
}
I'll take a look since Stephan is busy at JavaOne. Besides, this is causing
test failures that need to be fixed before I can release some code
Gee. 

MethodVerifier15.isInterfaceMethodImplemented(MethodBinding, MethodBinding, ReferenceBinding)

begins with:

	if (inheritedMethod.original() != inheritedMethod && existingMethod.declaringClass.isInterface())
		return false; // must hold onto ParameterizedMethod to see if a bridge method is necessary

Must hold onto Parameterized method to see if a bridge is required is
no concern inside a method such as isInterfaceMethodImplemented.

Fix on way.
Created attachment 221697
Plausible patch

Stephan, please take a look. This does trigger additional JRE8 related 
failures - I haven't analyzed them yet.
(In reply to comment #2)
> Gee. 
> 
> MethodVerifier15.isInterfaceMethodImplemented(MethodBinding, MethodBinding,
> ReferenceBinding)
> 
> begins with:
> 
> 	if (inheritedMethod.original() != inheritedMethod &&
> existingMethod.declaringClass.isInterface())
> 		return false; // must hold onto ParameterizedMethod to see if a bridge
> method is necessary

That's the exact location where my WIP on bug 382347 comment 6 also changes some checks. I will check your patch after the conf, ok?
(In reply to comment #4)

> That's the exact location where my WIP on bug 382347 comment 6 also changes
> some checks. I will check your patch after the conf, ok?

Sounds good. In the meantime, I'll inch along.

(In reply to comment #0)

> However, the current code leaves in MapStream's method also
> perhaps under the influence of
> https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358: Essentially we should
> not skip the inherited method if any 
> overriding version in a subclass may have a different erasure.

No, the new code added for this bug is doing the right thing, but is
effectively short circuited by the check for interface type to retain
for bridge methods.
Created attachment 221732
A patch much further along

but still a few more failures to be understood. (AMT, STT)
Are you saying the previous implementation in this area needs fixing even for 1.7-?
Otherwise, if the problem can only be triggered with default methods perhaps a more local change could succeed by just excluding default methods from this code path? 
My first naive attempts in bug 382347 came down to I think only 1 failure this way. But this naive solution may be breaking down when default methods do need some of this extra work like bridge methods..
(In reply to comment #7)
> Are you saying the previous implementation in this area needs fixing even
> for 1.7-?

Not in practical terms. If Super#foo is completely isomorphic modulo covariance
with Class#foo then the subtypes of Class need not be exposed to Super#foo at
all. I don't think anything is "broken" with it being exposed until default
methods came along.

> Otherwise, if the problem can only be triggered with default methods perhaps
> a more local change could succeed by just excluding default methods from
> this code path? 

I agree with your suggestion. My patch is still leaving out super's
method in some cases where for some reason *other* than bridge methods
resulting in failures - It may not worth trying to nail this semantics
precisely.

> My first naive attempts in bug 382347 came down to I think only 1 failure
> this way. But this naive solution may be breaking down when default methods
> do need some of this extra work like bridge methods..

I think the really safe and local fix is to toss out my patch and introduce
a check just before emitting the new diagnostic whether one of the two methods
we are complaining against overrides the other - If there are concerns about
repeated override checks, we can introduce a cache of results computed
already for other purposes - by introducing a level of indirection.
Created attachment 221755
Patch under test

This takes the simpler approach outlined in last comment
Fix and tests released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=ad212f198d44f12b089ac288333111d68cc2e3fe
