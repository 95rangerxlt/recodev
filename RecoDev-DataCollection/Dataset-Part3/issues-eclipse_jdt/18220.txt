When I import org.eclipse.jdt.debug from source I get the following error 

This resource is a duplicate and was not copied to the output folder	MANIFEST.MF	org.eclipse.jdt.debug/src-jdimodel/META-INF	

STEPS
1) Select Import - Plug-ins
2) Choose "Extraxt source archives"
3) Import org.eclipse.jdt.debug

When I import org.eclipse.jdt.debug from source I get the following error 

This resource is a duplicate and was not copied to the output folder	MANIFEST.MF	org.eclipse.jdt.debug/src-jdimodel/META-INF	

STEPS
1) Select Import - Plug-ins
2) Choose "Extraxt source archives"
3) Import org.eclipse.jdt.debug
There is a MANIFEST.MF in org.eclipse.jdt.debug/src-jdi and
org.eclipse.jdt.debug/src-jdimodel
The problem is that there are two jars in this plugin.
When PDE imports the source, it copies all of the non-class files from the 
runtime jar into the source directory.  Since there are two jars, there are two 
META-INF/manifest.mf files.  The builder reports the collision as an error.

I see two possible fixes:
1. PDE doesn't copy the manifest.mf file out (explicit check).
2. we add a META-INF/ or manifest.mf to the java builders do not copy list.

Does anyone have a dependency on the contents of the META-INF directory being 
copied into the bin directory?  If so, we are constrained to solution 1 (or 
defer).  

I will collect info on the question above and then move accordingly (to either 
pde or jdt)
John asked me to comment on this from a WSAD perspective.  We do need the META-
INF contents copied into the output location.  When we unit test server apps, 
the server looks at the output folder and treats it as a JAR.  For regular Java 
projects, the manifest.mf is needed to pick up runtime class-path entries.  

For EJB projects, we currently default to a combined source and output location 
so we are not dependent on the copy for the deployment descriptors.  However, 
we are looking at supporting other project structures where they could be 
separated and copying would definitely be required.

Long-term, it seems like maybe the single output folder is a problem for 
projects which map to multiple JARs.  But in the short-term, should the 
collision really be an error, or just a warning that one resource is hiding 
another?  manifest.mf is just the most common case.  It's probably not that 
uncommon for duplicate resources to exist in JARs and to be found based on 
classpath order.
Given Scott's additional info, I believe no action is the best solution for 2.0.
I am moving this to JDT / UI to move to LATER.
adopting bug and defered as suggested by John
.
Reopen for investigation.
Philippe, any opinion on treating this as a warning. 
Let's make its severity configurable, and default to warning.
Added option JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE and its default 
setting is a warning.

Moving to UI so the Java->Compiler->Other preferences page can be updated.
Kent, what are the possible settings? ERROR and WARNING?
(The description is missing in JavaCore.getDefaultOptions)
added UI to compiler page. the assumtion is that the valid selections 
are 'ERROR' and 'WARNING'
Please reopen if this assumtion is wrong.
