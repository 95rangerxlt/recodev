Build: I20030925

I was investigating a situation where adding breakpoints to a large file was
very slow.  It can take up to a second to add a breakpoint to a file such as
Workspace.java (2000 lines).  Almost all of this time is in the resource change
listener added by ResourceMarkerAnnotationModel. First, a minor issue:

Instead of adding a resource change listener that traverses the entire delta,
you can locate a given resource delta within the resource change delta very
quickly using IResourceDelta.findMember():

public void resourceChanged(IResourceChangeEvent e) {
  IResourceDelta delta= e.getDelta();
  if (delta != null) {
    IResourceDelta child = delta.findMember(fResource.getFullPath());
    if (child != null)
      update(child.getMarkerDeltas());
  }
}

However, this was only a small speed improvement. The main problem is that the
entire compilation unit is reparsed every time a breakpoint is added. I have
added a profiler trace of where the time is going for adding a single breakpoint.

Build: I20030925

I was investigating a situation where adding breakpoints to a large file was
very slow.  It can take up to a second to add a breakpoint to a file such as
Workspace.java (2000 lines).  Almost all of this time is in the resource change
listener added by ResourceMarkerAnnotationModel. First, a minor issue:

Instead of adding a resource change listener that traverses the entire delta,
you can locate a given resource delta within the resource change delta very
quickly using IResourceDelta.findMember():

public void resourceChanged(IResourceChangeEvent e) {
  IResourceDelta delta= e.getDelta();
  if (delta != null) {
    IResourceDelta child = delta.findMember(fResource.getFullPath());
    if (child != null)
      update(child.getMarkerDeltas());
  }
}

However, this was only a small speed improvement. The main problem is that the
entire compilation unit is reparsed every time a breakpoint is added. I have
added a profiler trace of where the time is going for adding a single breakpoint.
Created attachment 6258
profiler trace for adding a breakpoint
Replaced the visitor as suggested.

This has been fixed for I20030930.
Dani, I'm investigating bug 43721 about sluggish UI performance, and I'm seeing
a very similar pattern to the profile in this bug report.  In particular, I'm
seeing several places where CompilationUnit.reconcile is called in the UI thread
(for example on save).  This seems strange - shouldn't reconcile happen only in
the reconcile thread?  The profiling suggests that the UI thread is fighting
with the reconciler thread over the compilation unit object monitor, since both
threads do the following:

synchronized (compilationUnit) {
   compilationUnit.reconcile();
}

This is causing the UI thread to become blocked because the reconciler thread
owns the object monitor.
 
The fix we put in no longer reconciles when there are only marker changes (as it
is the case when saving).

John, We have to reconcile at several points because we have to make sure that 
the Java model is up-to-date with the contents of the document. The operation 
to achieve this "reconcile". Reconciling causes the Java model to change and 
reports problems. In order to avoid stale model states and as we have to 
manage the problems reported for a compilation unit we need to ensure that 
there is only one reconciling operation running at any point in time.

Most of this behavior is in since 1.0, some additions came with newer releases.
I understand.  Editor save will have to move out of the UI thread anyway (to
support cancelation while blocked), so this will cease to be a UI problem.
