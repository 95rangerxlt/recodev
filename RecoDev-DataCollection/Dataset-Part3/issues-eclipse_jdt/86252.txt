I released a new completion kind in Jdtcore/head:
CompletionProposal.ANNOTATION_ATTRIBUTE_REF

This kind of proposals will be used to complete annotation's attribute reference.
---------------------------
public @interface Annot {
  String foo1();
  String foo2();
}
// complete at | location
@Annot(foo| = "")
public class Test {
}
---------------------------

/**
 * Completion is a reference to annotation's attribute.
 * This kind of completion might occur in a context like
 * &lt;code&gt;"@Annot(attr^=value)"&lt;/code&gt; and complete it to
 * &lt;code&gt;"@Annot(attribute^=value)"&lt;/code&gt;.
 * &lt;p&gt;
 * The following additional context information is available
 * for this kind of completion proposal at little extra cost:
 * &lt;ul&gt;
 * &lt;li&gt;{@link #getDeclarationSignature()} -
 * the type signature of the annotation that declares the attribute that is
referenced
 * &lt;/li&gt;
 * &lt;li&gt;{@link #getFlags()} -
 * the modifiers flags of the attribute that is referenced
 * &lt;/li&gt;
 * &lt;li&gt;{@link #getName()} -
 * the simple name of the attribute that is referenced
 * &lt;/li&gt;
 * &lt;li&gt;{@link #getSignature()} -
 * the type signature of the attribute's type (as opposed to the
 * signature of the type in which the referenced attribute
 * is declared)
 * &lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;
 * 
 * @see #getKind()
 */
 public static final int ANNOTATION_ATTRIBUTE_REF = 13;

This kind of proposal is similar to FIELD_REF and attribute declaration is
similar to method declaration (use METHOD_REF ?). But use FIELD_REF or
METHOD_REF to propose attribute would create ambiguous proposals (unable to
recognize a real field ref from an attribut ref).

Currently only the API is released and CompletionEngine does not propose this
kind of proposal.

I released a new completion kind in Jdtcore/head:
CompletionProposal.ANNOTATION_ATTRIBUTE_REF

This kind of proposals will be used to complete annotation's attribute reference.
---------------------------
public @interface Annot {
  String foo1();
  String foo2();
}
// complete at | location
@Annot(foo| = "")
public class Test {
}
---------------------------

/**
 * Completion is a reference to annotation's attribute.
 * This kind of completion might occur in a context like
 * &lt;code&gt;"@Annot(attr^=value)"&lt;/code&gt; and complete it to
 * &lt;code&gt;"@Annot(attribute^=value)"&lt;/code&gt;.
 * &lt;p&gt;
 * The following additional context information is available
 * for this kind of completion proposal at little extra cost:
 * &lt;ul&gt;
 * &lt;li&gt;{@link #getDeclarationSignature()} -
 * the type signature of the annotation that declares the attribute that is
referenced
 * &lt;/li&gt;
 * &lt;li&gt;{@link #getFlags()} -
 * the modifiers flags of the attribute that is referenced
 * &lt;/li&gt;
 * &lt;li&gt;{@link #getName()} -
 * the simple name of the attribute that is referenced
 * &lt;/li&gt;
 * &lt;li&gt;{@link #getSignature()} -
 * the type signature of the attribute's type (as opposed to the
 * signature of the type in which the referenced attribute
 * is declared)
 * &lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;
 * 
 * @see #getKind()
 */
 public static final int ANNOTATION_ATTRIBUTE_REF = 13;

This kind of proposal is similar to FIELD_REF and attribute declaration is
similar to method declaration (use METHOD_REF ?). But use FIELD_REF or
METHOD_REF to propose attribute would create ambiguous proposals (unable to
recognize a real field ref from an attribut ref).

Currently only the API is released and CompletionEngine does not propose this
kind of proposal.
has been fixed a while ago.
