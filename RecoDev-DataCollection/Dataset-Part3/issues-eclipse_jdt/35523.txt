Build: 2.1 RC3a
VM: IBM JRE 1.3.0 build cn130-20010502

I was testing the scalability of some of the java refactorings with today's
build.  I was getting OutOfMemoryErrors for a number of tests, which I've almost
never experienced with this VM.  For example, I tried:

1) Import jdt.ui and all required projects as source using the plugin import wizard.
2) Refactor > Change Method Signature on org.eclipse.core.runtime.Status
3) Change order of method arguments.

This was giving me OutOfMemoryErrors on Windows and Linux.  After setting my max
java heap very high (-Xmx700M), it was successful, but VM size according to
Windows went from 150M to over 700M allocated.

This refactoring isn't as big as it seems.  There were under 700 references to
this constructor, so that's almost 1MB of memory per reference.

Build: 2.1 RC3a
VM: IBM JRE 1.3.0 build cn130-20010502

I was testing the scalability of some of the java refactorings with today's
build.  I was getting OutOfMemoryErrors for a number of tests, which I've almost
never experienced with this VM.  For example, I tried:

1) Import jdt.ui and all required projects as source using the plugin import wizard.
2) Refactor > Change Method Signature on org.eclipse.core.runtime.Status
3) Change order of method arguments.

This was giving me OutOfMemoryErrors on Windows and Linux.  After setting my max
java heap very high (-Xmx700M), it was successful, but VM size according to
Windows went from 150M to over 700M allocated.

This refactoring isn't as big as it seems.  There were under 700 references to
this constructor, so that's almost 1MB of memory per reference.
This is strange. Adam, can you please investigate. Do we somehow keep a 
reference to the AST when we do precondition checking. Change Method Signature 
should not be so memory hungry.

There are other refactorings which need quite a bit of memory (e.g extract 
interface). See also bug 33246
Created attachment 4316
patch

full fix would be too scary at this point in the 2.1 endgame

attached is a fix that flushes unused caches just before the refactoring
actually goes and modifies files - so the worst that can happen is a failure
during precondition checking, not performing changes (which would be much
nastier)

should definitely fix for 2.2
To clarify: if we don't flush the caches before executing the change the 
changes are high that we end up with a OOM while performing the changes which 
will not result in loss of work but the workspace will end up in a state where 
it doesn't compile without errors anymore.
+1
+1
+1
we should verify how effective the cash flushing is for John's scenario
fixed released for 20030324
+1
To clarify things:

The fix only frees memory after the precondition checking. So when executing 
the changes there is enough free memory to manipulate the workspace without 
being faced with OOMs during this phase.

From looking at the code most memory is spend during precondition checking so 
the overall memory consumption of change method signature will not be much 
better.

The full fix (e.g lowering the memory consumption for the precondition 
checking) needs recoding of change method signature which is to risky to do 
for 2.1. But we should consider it for 2.1.1.

So I changed the title and opened a new one which we should address in > 2.1
