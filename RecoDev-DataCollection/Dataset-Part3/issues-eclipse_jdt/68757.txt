3.0

Assume type T is imported. When using code assist in Javadoc regions for a type
T gets inserted fully qualified while for method Javadoc it gets inserted
unqualified. The result that two version of T in Javadoc are in your file.

3.0

Assume type T is imported. When using code assist in Javadoc regions for a type
T gets inserted fully qualified while for method Javadoc it gets inserted
unqualified. The result that two version of T in Javadoc are in your file.
I am also suffering from type-o-mania in Eclipse.
More generally, CodeAssist's autocompletion always inserts fully qualified
typenames for classes that are *in the same* package, which unnecessesarily
clutters up the sourcecode and is not required by Javadoc-rules.

Still occours in Eclipse 3.1

Moving all javadoc code assist bugs to jdt.core so they can be handled in the
new jdt.core implementation.
JDT/Core completion always provides fully qualified name type proposals. So,
it's also the case now code assist in Javadoc is handled by JDT/Core. However,
this is JDT/UI who decides to add it as this or add an import instead (see
preferences).
Tom, I assign this bug to you as it should be fixed when you'll set specific
preference for Javadoc area...

I've some specific test cases added in JavadocBugsCompletionModelTest to verify
that JDT/Core proposals are correct.

After discussions with Dirk and Frederic

- We will treat type references in javadoc as in code, respecting the code
assist import preference.
- Types in the same package will not have the fully qualified name
- Additionally, if the compiler prefs say to not process javadoc, we will always
import qualified types (except when in the same package) in order to not produce
unused imports.
- Completing a type as an informal references (say, between <code></code> tags,
but not in @link or @see tags) will insert the simple name only.

Tom, what will be behavior for {@code } tag, same as for <code></code> or as
@link/@see tags?
(In reply to comment #6)
> Tom, what will be behavior for {@code } tag, same as for <code></code> or as
> @link/@see tags?

Same as for <code></code> - the rule would be inclusive: 

Never add any import/fully qualified name *except* for formal references. Formal
references are those within the following tags:
- @see 
- {@link}
- {@linkplain}
- {@value}

Does that make sense? Of course, it would be nice if a proposal (or the
completion context) knew whether it completes a formal reference or not.
That makes sense but there are also following tags for formal reference:
 - @throws
 - @exception

I can easily add in context whether completion takes place in a formal reference
or not... Perhaps replace boolean "inJavadoc" in CompletionContext with
"javadoc" and use bit pattern values depending on where completion takes place
in javadoc (text, formal reference, etc.)?

(In reply to comment #8)
> That makes sense but there are also following tags for formal reference:
>  - @throws
>  - @exception

Agree.

> I can easily add in context whether completion takes place in a formal 
> reference
> or not... Perhaps replace boolean "inJavadoc" in CompletionContext with
> "javadoc" and use bit pattern values depending on where completion takes place
> in javadoc (text, formal reference, etc.)?

Sounds good. 


owner change was a user error...
Fixed the importing behavior to respect the preference setting. Will adapt to
the context info for formal/informal references once this is provided by jdt-core.
I've released in JDT/Core HEAD new following API methods for CompletionContext:
/**
 * Tell user whether completion takes place in text area of a javadoc comment or
not.
 * 
 * @return boolean true if completion takes place in a text area of a javadoc
comment, false otherwise.
 * @since 3.2
 */
public boolean isInJavadocText() {...}
/**
 * Tell user whether completion takes place in a formal reference of a javadoc
tag or not.
 * Tags with formal reference are:
 * <ul>
 * 	<li>@see</li>
 * 	<li>@throws</li>
 * 	<li>@exception</li>
 * 	<li>{@link Object}</li>
 * 	<li>{@linkplain Object}</li>
 * 	<li>{@value} when compiler compliance is set at leats to 1.5</li>
 * </ul>
 * 
 * @return boolean true if completion takes place in formal reference of a
javadoc tag, false otherwise.
 * @since 3.2
 */
public boolean isInJavadocFormalReference() {...}

