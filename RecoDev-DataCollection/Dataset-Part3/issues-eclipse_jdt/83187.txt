Consider the following cases

public class IntroduceFactory<T> {
	public IntroduceFactory(T t) {
	}
	public IntroduceFactory(String ... args) {
	}
}

Problems:

- creating a factory method for IntroduceFactory(T t) outside of 
  IntroduceFactory class shouldn't be support due to the reference to the
  type parameter

- creating a factory method for IntroduceFactory(String ... args) creates
  an array based signature.

======================================================================

public enum E {
	A(1), B(2), C(3);
	public E(int i) {
	}
}

We should disable Introduce factory for constructors on enums. Creating a
factory for them doesn't make sense anyway.

Annotation shouldn't be affected by introduce factory.

Bob, can you fix this for M5, add the corresponding test case and try to come up
with other scenarios that might be broken.

Consider the following cases

public class IntroduceFactory<T> {
	public IntroduceFactory(T t) {
	}
	public IntroduceFactory(String ... args) {
	}
}

Problems:

- creating a factory method for IntroduceFactory(T t) outside of 
  IntroduceFactory class shouldn't be support due to the reference to the
  type parameter

- creating a factory method for IntroduceFactory(String ... args) creates
  an array based signature.

======================================================================

public enum E {
	A(1), B(2), C(3);
	public E(int i) {
	}
}

We should disable Introduce factory for constructors on enums. Creating a
factory for them doesn't make sense anyway.

Annotation shouldn't be affected by introduce factory.

Bob, can you fix this for M5, add the corresponding test case and try to come up
with other scenarios that might be broken.
Created attachment 17698
Draft patch for jdt-ui to update IntroduceFactory to handle Java 5.0 features

This patch was made against the integration build of I2005-0202-0800.
Created attachment 17699
Draft patch for jdt-ui refactoring tests to exercise new Java 5.0-related behavior

This patch was made against the integration build of I2005-0202-0800.
This is a first draft that partly addresses the new 5.0 language features.

To do:
  - I don't know how to create a varargs method signature, so the refactoring 
still generates an array type for the last argument of the factory method when 
the encapsulated constructor was a varargs method.

    >>> Please advise!

N.B.:
 - The wildcard-related test is broken due to an apparent bug in the search 
engine which fails to find call sites for wildcard-bearing methods.
 - The varargs-related test is likewise broken due to an apparent bug in the 
search engine which fails to find call sites for varargs methods.
 - The annotation-related tests are broken by a spurious "imprecise search 
results" warning that only occurs in junit test mode (not in a proper run-time 
workbench).

    >>> Please advise!

Also, it is possible to create the factory method outside the constructor-
owning class, by use of a method type parameter (see test "testTypeParam2").
Bob,

here my comments:

- we shouldn't abreviate enumeration type with enum. Please adjust proeperties
  file
- copyTypeParameters should use the import rewriter. The class has now a new
  method which takes a binding to import and an AST an returns a type node
  to be used inside the AST to represent the type.
- to create a proper vararg signature set the isVararg bit on the 
  SingleVariableDeclaration representing the vararg
- can you explain why the method findNonPrimaryType is necessary. IMO you simply
  use the wrong project in factoryType= getProject().findType. The project
  returned from getProject() is the one in which you made the selection. If
  you use the same as for the search the result should be the same.

Regarding the search engine problems do the following:

- open a PR against JDT/Core.
- add a test case to the introduce factory tests and a static final field
  BUG_`BugNr` set to false. Use the field to comment out the test. This allows
  use tracking failing test cases due to JDT/Core bugs.
> can you explain why the method findNonPrimaryType is necessary.

findNonPrimaryType() does just that: find non-primary types, which 
IJavaProject.findType() fails to find. This is necessary when the user 
specifies a factory-method-owner class that is not a primary type.
Stupid me. I should have read the spec. It says that it doesn't find secondary
types.
Created attachment 17763
Revised patch for jdt-ui to update IntroduceFactory to handle Java 5.0 features

This patch addresses Dirk's first round of comments.
Created attachment 17764
Revised patch for jdt-ui refactoring tests to exercise new Java 5.0-related behavior

This patch addresses Dirk's first round of comments.
There are now 2 PR's against JDT/Core regarding search engine issues.

The first (#84724) concerns failure to find references to varargs methods. This 
PR breaks the test testVarArgsCtor(). The constructor is encapsulated, but the 
call site is not rewritten at all, since it doesn't appear in the search 
results.

The other (#84736) concerns a difference in behavior between the run-time 
workbench and the junit plug-in test harness. This PR breaks testcases 
testAnnotation1() through testAnnotation3(). In the run-time workbench, all is 
fine and the expected output is produced. Using the exact same input source 
under the junit plug-in test harness, the search results for the constructor 
call sites are all tagged as "inaccurate", causing the precondition check to 
fail (the warnings in the RefactoringStatus cause status.isOk() to be false).
In the revised patches:
 - I've fixed the "enum" abbreviation in the properties file.
 - copyTypeParameters() now uses the ImportRewriter (thanks for the tip!).
 - A proper varargs signature is now created as needed.
 - See the above comment regarding the search engine PR's.

Oddly, the aforementioned wildcard-related search engine issue disappeared at 
some point, though honestly, looking at the previous patches and the revised 
ones, I don't see what change could have caused it to go away. Perhaps I should 
just be happy, but, you know... :-/
Markus, do you have any idea what might go wrong with the test cases (see
comment #9). 
The first (bug 84724) seems to be a JDT/Core bug in *constructor* reference
search (works fine for method reference search).

The second (bug 84736) is probably not a search engine bug, but a wrong
assumtion about the test setup. I skimmed over the IntroduceFactoryTests, and it
looks like the CU generated for testAnnotation1() out of Annotation1.java is
called "Annotation1_in.java". This leads to a compile error, since CU
"Annotation1_in.java" cannot contain a *public* type "Annotation1" -> search
match is inaccurate, which is OK.
If this observation is true, then please close bug 84736 and provide a corrected
patch.
Created attachment 17782
Revised patch for jdt-ui refactoring tests to exercise new Java 5.0-related behavior

This fixes the typos in the input source for the annotation-related tests that
was causing "inaccurate search results" and re-enables the corresponding
annotation-related tests. The only disabled test is now testVarArgsCtor(),
pending resolution of bug #84724.
Created attachment 17784
Revised patch for jdt-ui to update IntroduceFactory to handle Java 5.0 features

Relative to the earlier draft patches, this version uses a CoreException to
wrap a JavaUIStatus rather than using the JDT/Core internal class
JavaModelStatus.
Bob, thanks for the updated patches. I have released them.
