I obeserved a livelock when running the JDT debug test suite interactively on
RedHat 8.0 (on a relatively slow machine). The problem seems to be in
RemoteTestRunner.shutdown(). In there, there is a call to 

     fReader.close();
	

However, the BufferedReader there synchronizes on the underlying
InputStreamReader. The input stream reader on the other hand is currently
reading from it's underlying socket input stream (and synchronizes on itself,
i.e. it owns the lock the BufferedReader tries to acquire). Since the socket
read is blocking, and nobody is writing anything to that socket, the socket read
never terminates, and thus the fReader.close() call never returns. The tested
eclipse instance (i.e. the inner instance) hangs at that time.

I obeserved a livelock when running the JDT debug test suite interactively on
RedHat 8.0 (on a relatively slow machine). The problem seems to be in
RemoteTestRunner.shutdown(). In there, there is a call to 

     fReader.close();
	

However, the BufferedReader there synchronizes on the underlying
InputStreamReader. The input stream reader on the other hand is currently
reading from it's underlying socket input stream (and synchronizes on itself,
i.e. it owns the lock the BufferedReader tries to acquire). Since the socket
read is blocking, and nobody is writing anything to that socket, the socket read
never terminates, and thus the fReader.close() call never returns. The tested
eclipse instance (i.e. the inner instance) hangs at that time.
Erich, can you please comment on this one. It might explain some of the DNF 
problems we saw when running the test during build.
The build is using a different test runner that doesn't involve socket 
communication. However, this explains why pde.junit sometimes hangs on Linux.

Fix for this problem is to shutdown the reader thread before closing the 
socket.
the read thread is now interrupted before the reader is closed
