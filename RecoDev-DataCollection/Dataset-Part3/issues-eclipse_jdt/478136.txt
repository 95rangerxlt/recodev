public class Class {
  public void method() {
    Runnable r = new Runnable() {
      @Override
      @Deprecated
      public void run() {
      }
    };
    r.run();
  }
}


When I process this code snippet with the lambda replacer, the result is:

public class Class {
  public void method() {
    Runnable r = () -> {
    };
    r.run();
  }
}

The @Deprecated annotation has been removed. Since this also happens with other annotations, it has an effect especially in code that uses annotations for AspectJ weaving.

The lambda cleanup should only remove @Override annotations.

public class Class {
  public void method() {
    Runnable r = new Runnable() {
      @Override
      @Deprecated
      public void run() {
      }
    };
    r.run();
  }
}


When I process this code snippet with the lambda replacer, the result is:

public class Class {
  public void method() {
    Runnable r = () -> {
    };
    r.run();
  }
}

The @Deprecated annotation has been removed. Since this also happens with other annotations, it has an effect especially in code that uses annotations for AspectJ weaving.

The lambda cleanup should only remove @Override annotations.
So, where do you suggest the annotations to be attached? In your testcase, we are annotating the method declaration, which is now being removed and hence the annotations are gone too. I can confirm any annotations within the method body are removed.

Moving to UI for closure.
I suggest that the “cleanup” operation is simply not possible in this case.

Cleanup operations should really only be cleanup and have no observable effect on the running code. When there are annotations on the method, the cleaned up code doesn’t have the exact same meaning anymore. Therefore I don’t consider it to be “cleanup”.
See bug 425413 also which talks about type annotations at method parameters, return type and throws clause.
Yes, Clean Ups should not remove annotations that may have some value. The Quick Assist should still be available.

Roland, do you really have a use case for preserving @Deprecated? I think we should skip anonymous types in the Clean up if there are any unknown annotations in the method signature, but I would still allow to remove @Override and @Deprecated.
(In reply to Markus Keller from comment #4)
> Roland, do you really have a use case for preserving @Deprecated? I think we
> should skip anonymous types in the Clean up if there are any unknown
> annotations in the method signature, but I would still allow to remove
> @Override and @Deprecated.

No, I don’t. The @Deprecated annotation was just meant as a placeholder. My actual case was an annotation that was used by AspectJ to transform the method call.

I’m fine with the above suggestion.
New Gerrit change created: https://git.eclipse.org/r/56944
Gerrit change https://git.eclipse.org/r/56944 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=e16260ac6674d23c9f185d04bd176dd128bdff91
(In reply to Eclipse Genie from comment #7)
> Gerrit change https://git.eclipse.org/r/56944 was merged to [master].
> Commit:
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=e16260ac6674d23c9f185d04bd176dd128bdff91
> 

With the fix, Clean up does not convert an anonymous class to lambda if its method has any declaration annotation other than @Override and @Deprecated.
Quick assist still allows the conversion to lambda. 

Fixed in master.
Should a tool tip or help guide describe this behavior? I am not sure anyone will be able to guess that annotations make lambdas ineligible for clean-up.
(In reply to Paul Benedict from comment #9)
> Should a tool tip or help guide describe this behavior? I am not sure anyone
> will be able to guess that annotations make lambdas ineligible for clean-up.

This can be added to the New & Noteworthy document for Neon M3.
Also, it can be added to the JDT tips & tricks page - bug 478807.
On a related note, someone also please check to ensure that no Quick Assist will provide the ability to convert the lambda under the same circumstance.
(In reply to Paul Benedict from comment #11)
> On a related note, someone also please check to ensure that no Quick Assist
> will provide the ability 
> to convert the lambda under the same circumstance.

While converting the lambda to anonymous class, we will not have this issue of declaration annotations on method.

While converting the anonymous class to lambda, where the method in anonymous class has declaration annotations, the quick assist will still be provided. See comment #4.
Would it be possible to have this merged down to Mars?
(In reply to Roland Illig from comment #13)
> Would it be possible to have this merged down to Mars?

This can be merged for 4.5.2.
New Gerrit change created: https://git.eclipse.org/r/58440
(In reply to Eclipse Genie from comment #15)
> New Gerrit change created: https://git.eclipse.org/r/58440

Dani, please review the change for 4.5.2.

Bundle version updates: https://git.eclipse.org/r/#/c/58441/
(In reply to Noopur Gupta from comment #16)
> (In reply to Eclipse Genie from comment #15)
> > New Gerrit change created: https://git.eclipse.org/r/58440
> 
> Dani, please review the change for 4.5.2.

I don't like the fix and for me it is not complete. Even for Quick Assist it must not remove annotations if not 100% sure, otherwise I get compile warnings/errors.


Test Case:

public class Class {
  public void method() {
    Runnable r = new Runnable() {
      @SuppressWarnings("unused")
      public void run() {
    	  int i;
      }
    };
    r.run();
  }
}
New Gerrit change created: https://git.eclipse.org/r/60205
Gerrit change https://git.eclipse.org/r/60205 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=3380c309abb68f4c69df3cf6db00872d93814fc8
(In reply to Eclipse Genie from comment #19)
> Gerrit change https://git.eclipse.org/r/60205 was merged to [master].
> Commit:
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=3380c309abb68f4c69df3cf6db00872d93814fc8
> 

With this fix, the behavior remains the same for clean up as with the previous commit (i.e. clean up is skipped if there are declaration annotations other than @Override and @Deprecated). In such cases, conversion via quick assist is still allowed but the quick assist specifies that annotations are being removed with the text: "Convert to lambda expression (removes annotations on method)".

Fixed in master. Dani, please have a look if the same should be backported to 4.5.2.
(In reply to Noopur Gupta from comment #20)
> (In reply to Eclipse Genie from comment #19)
> Fixed in master. Dani, please have a look if the same should be backported
> to 4.5.2.

The fix itself is good, but we can't add new NLS keys in a backport (except if adding a new NLS key is really critical) since those strings would show up in English in a translated Eclipse.
(In reply to Dani Megert from comment #21)
> (In reply to Noopur Gupta from comment #20)
> > (In reply to Eclipse Genie from comment #19)
> > Fixed in master. Dani, please have a look if the same should be backported
> > to 4.5.2.
> 
> The fix itself is good, but we can't add new NLS keys in a backport (except
> if adding a new NLS key is really critical) since those strings would show
> up in English in a translated Eclipse.

OK, then we will not backport the fix. 

Closing the bug as fixed for 4.6 M4.
Gerrit change https://git.eclipse.org/r/58440 was merged to [R4_5_maintenance].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=17cedae36201e87bd9c718429636c6ad0187ef2b
(In reply to Noopur Gupta from comment #22)
> (In reply to Dani Megert from comment #21)
> > (In reply to Noopur Gupta from comment #20)
> > > (In reply to Eclipse Genie from comment #19)
> > > Fixed in master. Dani, please have a look if the same should be backported
> > > to 4.5.2.
> > 
> > The fix itself is good, but we can't add new NLS keys in a backport (except
> > if adding a new NLS key is really critical) since those strings would show
> > up in English in a translated Eclipse.
> 
> OK, then we will not backport the fix. 
> 
> Closing the bug as fixed for 4.6 M4.

Checked with Dani and backported the fix to 4.5.2 without NLS changes.
Also updated the bundle versions for 4.5.2.
