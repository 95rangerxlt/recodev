JUnit 4.4 was released on July, 18

JUnit 4.4 was released on July, 18
I'd appreciate this update, since there were both bugfixes made and features added that make testing more of a pleasure.
Moving to Orbit.
(In reply to comment #2)
What does this mean in respect to the estimated time of completion? 
Orbit libraries are not part of the major releases, are they?
For JDT/UI, JUnit 4.4 is currently not a high priority item, since every update requires testing, and we need to absorb the changes and new features in the UI.

We expect to see a JUnit 4.5 before the Eclipse 3.4 lockdown starts (in spring 2008), so JDT/UI might also skip JUnit 4.4 and jump directly to 4.5.

However, the JUnit plug-ins in Eclipse are now managed by the Orbit team, which is why I moved the bug. Maybe other clients would like to have JUnit 4.4 support earlier, so it would probably make sense to offer a 4.4 plug-in in Orbit (which is also a prerequisite for JDT/UI to start work on using it in the SDK).
Markus, is there a CQ open for this to get approval for the new Junit?
> Markus, is there a CQ open for this to get approval for the new Junit?
No, I haven't opened or found one.

Since JUnit 4.4 contains a lot of new features that need some adaptations in the UI, JDT/UI will not try to get this through for 3.4M3. Rumors are telling that there will be a JUnit 4.5 release by the end of this year (they're roughly planning 4 releases/year), so JDT/UI will only initiate the IP process for 4.5, not for 4.4 (but this time as soon as 4.5 is released:-).
Ok, for now we will defer releasing v4.4 and await v4.5. In the meantime we have been working on problems that existed when running JUnit4 tests and I believe we should have all the issues sorted out and tested soon. 

fyi, the junit4 problems that we were having are covered in bug 153429.

Since the Ganymede IP deadline is January 31 and JUnit 4.5 is not yet available, I've filed an IP request for JUnit 4.4 now, see https://dev.eclipse.org/ipzilla/show_bug.cgi?id=2027
Any update on this?  I'd like to use jMock with junit 4.4 for plug-in testing.
> Any update on this?

It's under review in the Eclipse foundation's IP pipeline. Their target is "ganymede" and 2008-04, which means it should be ready for 3.4M7.

DJ, do you have news on the state of PDE and the automated testing framework with regards to multiple plug-ins with the same ID? If we really want to release JUnit 4.4 as org.junit, then we should start this early in M7 (transformation can also be started with the current JUnit 4.3.1).

I will not go through all the hassle in the last two weeks of M7, so if this is not ready, then I'll just update org.junit4 to 4.4 when it has been approved.
The bug which covers the test framework changes to support JUnit4 is covered by bug 153429. 

Realistically I can't see us making these changes for 3.4. I don't see us 1) having the time to review all the changes and 2) wanted to cause any more disruption to the build and test process for this release.

So I recommend waiting until the summer before we integrate.
> So I recommend waiting until the summer before we integrate.

OK, taking this bug to JDT/UI then. Keeping bug 186369 for moving JUnit 4 to Orbit.
Moving to RC1, since the IP review is not yet ready.
Legal approvement is still pending. This is too late for 3.4 now, will reconsider in 3.4.1.
For those of us too impatient to wait for the lawyers, here's how you can hack junit 4.4 into Eclipse 3.4 M7:

Dowonload and unpack junit 4.4.
Rename junit-4.4.jar to junit.jar
Replace eclipse/plugins/org.junit4_4.3.1/junit.jar with the version 4.4 jar.
Edit eclipse/plugins/org.junit4_4.3.1/META-INF/MANIFEST.MF and add the following to the list of exported packages: org.hamcrest,org.hamcrest.core

I thought I'd have a problem with jar signing, but that does not seem to be the case.  I've also managed to get jmock to work with this hack.
It seems that the JUnit 4.4 plug-in I hacked by replacing the existing junit.jar with the junit-4.4.jar has a problem when you try to add a plug-in containing the complete Hamcrest library.  I had all sorts of issues with not being able to import any of the Hamcrest packages.  The only thing that seems to work is:

1. create a Hamcrest plug-in with the full Hamcrest library
2. unpackage the junit-4.4.jar
3. delete the Hamcrest classes
4. repackage the junit-4.4.jar
5. replace the existing junit.jar with the junit-4.4.jar
6. Edit the junit4 manifest and add a dependency on the Hamcrest plug-in

I also had issues when the Hamcrest plug-in was installed as a jar file.  I had to set the option in the Hamcrest feature to unpack the plug-in.

As part of the pending updgrade to JUnit 4.4, I hope these issues can get sorted out so that we can take advantage of the full Hamcrest libraries.
Created attachment 108579
Update to 4.4

Patch does not contain binary updates to junit.jar and junitsrc.zip.
Released update to 4.4 to HEAD for next I-build.
I guess we need PMC approval for this since we will update the minor version of the org.junit plug-in in the maintenance branch from 4.3.1 to 4.4.

JUnit 4.4 has been out for quite a while now. We initially wanted to ship it with 3.4, but the IP review could not be completed on time.

JUnit 4.4 includes bug fixes, a new assertion mechanism (hamcrest matchers), and other improvements.
JUnit 4.5 is available since Aug. 8. See 
http://sourceforge.net/project/showfiles.php?group_id=15278&package_id=12472
> JUnit 4.5 is available since Aug. 8.

Yes, I've opened bug 244423 for this (for 3.5).

As soon as IP work is done (I expect this to be quicker than for JUnit 4.4, since there were no changes in the bundled hamcrest library), we will maybe backport it to Eclipse 3.4.1 or 3.4.2. Please use bug 244423 for discussions on JUnit 4.5.
Given what you said in comment 4: 
> For JDT/UI, JUnit 4.4 is currently not a high priority item, since every update
> requires testing, and we need to absorb the changes and new features in the UI.
Why would we need to backport to 3.4.1 ?

Also, Markus said: "They renamed/removed some internal classes (but clients should not have used them anyway). There's source compatibility issue in the Assert class: They added overloaded versions of assertEquals(..), which can lead to ambiguous method invocations in client code."

This may cause some disruption in a service release. My personal vote currently would be to not backport change to 3.4.x; and consider such changes in 3.5 stream only (and likely going to 4.5 there).

Am I missing something which makes this upgrade compelling in 3.4.x stream ?
> requires testing, and we need to absorb the changes and new features in the UI.

It turned out that we didn't need to change anything in the UI (except for updating version numbers everywhere and fixing the JUnit library container).
Re testing: I released 4.4 in HEAD a few weeks ago, and we have not gotten any bugs so far.

Nevertheless, given the breaking changes in JUnit 4.4, I agree that it's hard to justify the risk of breaking Eclipse users who change from 3.4 to 3.4.1.
That we missed the boat for 3.4 is sad, but should not be an argument to risk stability in 3.4.1.

Marking as fixed in 3.5M1.
So, cutting a long story short, there'll be no JUnit 4.4 in eclipse 3.4.1?
I want to add a +1 vote for adding JUnit 4.4 to Eclipse 3.4.x because the current version of Spring (2.5.x) depends on JUnit 4.4.  Spring's JUnit 4-based test framework will ONLY work with JUnit 4.4 (because of the previously mentioned package changes between 4.3 and 4.4).
Spring 2.5 seems to assume a strong dependency on JUnit 4.4, can't it be improved to be made compatible with previous versions ? 
This would feel like the best to me.

I understand there is a workaround for Spring 2.5, which is to add manually JUnit 4.4 on the build path. Suboptimal, but still working, and documented on quite a few websites.

Also, given JUnit 4.5 is out there, if we were to upgrade in 3.4.x stream (which currently we are not considering), why no going to the latest then ?

Is there someone around representing Spring who we could interact with ?


The hack of adding junit 4.4 to the classpath doesn't work if you want to do plugin tests (and I do).

The only solution I've found is to hack the existing junit 4 plugin by replacing the junit.jar and updating the MANIFEST.MF file with extra OSGi export-packages.

I had read that since Spring make use of a custom runner, they needed JUnit 4.4 as the custom stuff wasn't officially available in earlier Junit 4 releases.  I can't find the link, so don't take this as gospel.
Created attachment 111601
JUnit4.4 Feature Patch for Eclipse Ganymede 3.4.1.

For those who can't upgrade to Eclipse 3.5M1 but still need JUnit 4.4 in Eclipse 3.4.1, here's a feature patch that updates M20080903-0800 to use JUnit 4.4. Install it via Software Update (add the downloaded zip as an archive site).

Feature patches can only target a single build, so if this works for you and you want me to produce a similar patch for the final 3.4.1 build, please ping here.
Markus, that's be totally cool! Thanks in advance.
Markus, will you provide a feature patch for 3.4.1 final ?
(In reply to comment #31)
> Markus, will you provide a feature patch for 3.4.1 final ?

Yes, I'll do it next Monday (sorry for the delay, I'm currently out in the field with mediocre internet connection...).
Comment on attachment 111601
JUnit4.4 Feature Patch for Eclipse Ganymede 3.4.1.

(In reply to comment #29)
> Created an attachment (id=111601) [details]
> 
> Feature patches can only target a single build [..]

Actually, a feature patch can only target a single *version of a feature*.

Since the JDT feature has not been changed since comment 29, my original feature patch actually also works for the final 3.4.1 build (M20080911-1700), so there's no need for a new one.
Methods annotated with @Theories are not invoked when using "Run as > JUnit Test". I'm using the latest feature patch.
>Methods annotated with @Theories are not invoked when using "Run as > JUnit
>Test". I'm using the latest feature patch.
This bug is fixed. If you see a problem please file a new bug report.
