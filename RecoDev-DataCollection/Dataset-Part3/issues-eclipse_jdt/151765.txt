My formatter for constructor declarations -> parameters section is setup like this

Wrap all elements, every element on a new line
Indent by one

If I then choos to generate constructor from superconstructor, the constructor is generated like this

  /**
   * @param id
   * @param hostname
   * @param serviceName
   * @param serviceType
   * @param totalRequests
   * @param totalRecords
   * @param validRecords
   * @param restartDate
   * @param insertDate
   * @param updateDate
   */
  public ServiceInstanceHistory(long id, String hostname, String serviceName, String serviceType, long totalRequests, long totalRecords, long validRecords, Timestamp restartDate, Timestamp insertDate, Timestamp updateDate)
  {
    super(id, hostname, serviceName, serviceType, totalRequests, totalRecords,
        validRecords, restartDate, insertDate, updateDate);
    // TODO Auto-generated constructor stub
  }


which is incorrent. When I then choose to Source -> Format element I get the expected result.

  /**
   * @param id
   * @param hostname
   * @param serviceName
   * @param serviceType
   * @param totalRequests
   * @param totalRecords
   * @param validRecords
   * @param restartDate
   * @param insertDate
   * @param updateDate
   */
  public ServiceInstanceHistory(
    long id,
    String hostname,
    String serviceName,
    String serviceType,
    long totalRequests,
    long totalRecords,
    long validRecords,
    Timestamp restartDate,
    Timestamp insertDate,
    Timestamp updateDate)
  {
    super(id, hostname, serviceName, serviceType, totalRequests, totalRecords,
        validRecords, restartDate, insertDate, updateDate);
    // TODO Auto-generated constructor stub
  }

My formatter for constructor declarations -> parameters section is setup like this

Wrap all elements, every element on a new line
Indent by one

If I then choos to generate constructor from superconstructor, the constructor is generated like this

  /**
   * @param id
   * @param hostname
   * @param serviceName
   * @param serviceType
   * @param totalRequests
   * @param totalRecords
   * @param validRecords
   * @param restartDate
   * @param insertDate
   * @param updateDate
   */
  public ServiceInstanceHistory(long id, String hostname, String serviceName, String serviceType, long totalRequests, long totalRecords, long validRecords, Timestamp restartDate, Timestamp insertDate, Timestamp updateDate)
  {
    super(id, hostname, serviceName, serviceType, totalRequests, totalRecords,
        validRecords, restartDate, insertDate, updateDate);
    // TODO Auto-generated constructor stub
  }


which is incorrent. When I then choose to Source -> Format element I get the expected result.

  /**
   * @param id
   * @param hostname
   * @param serviceName
   * @param serviceType
   * @param totalRequests
   * @param totalRecords
   * @param validRecords
   * @param restartDate
   * @param insertDate
   * @param updateDate
   */
  public ServiceInstanceHistory(
    long id,
    String hostname,
    String serviceName,
    String serviceType,
    long totalRequests,
    long totalRecords,
    long validRecords,
    Timestamp restartDate,
    Timestamp insertDate,
    Timestamp updateDate)
  {
    super(id, hostname, serviceName, serviceType, totalRequests, totalRecords,
        validRecords, restartDate, insertDate, updateDate);
    // TODO Auto-generated constructor stub
  }
*** Bug 151766 has been marked as a duplicate of this bug. ***
The same is true for methods arguments. Method code formatting preferences for arguments are setup 

Wrap all elements, every element on a new line
Indent by one

When I create new which implements an interface with a method, the method is generated as

  /**
   * {@inheritDoc}
   */
  public void registerService(String strServiceName, String strServiceType)
  {
    // TODO Auto-generated method stub

  }

But this time even if I select Source -> Format element it doesn't fix the formatting of the method



fixed > 20060727

I couldn't reproduce the problem in comment 3. Make sure you either have 'Force Split' turned on or the line length small enough. If you have it reproducable, please file a separate bug against jdt.core.
