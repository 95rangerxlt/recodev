Build 20040121

This enhancement request is to capture feedback from the community about adding 
library support in JDT. Please add your comment with use cases.

1. What is a library?
- The simple definition is 'a set of jars'.
-  A more advanced definition is 'a set of jars and binary folders'
- Even more advanced: 'a set of jars, binary folders and other libraries'

2. Can a library be dynamically updated? Or is it statically defined?

3. Can a library be shared?
- in a workspace: you define 1 library in the workspace and share it across
projects
- in a team: one member defines a library and then check it in a repository
so that other team members can check it out

4. How do we represent libraries in the Java model?
- Using projects: the classpath of a project defines the set of jars (or
more) that make the library
- Using classpath containers: the JRE System Library is an example of a
library

Build 20040121

This enhancement request is to capture feedback from the community about adding 
library support in JDT. Please add your comment with use cases.

1. What is a library?
- The simple definition is 'a set of jars'.
-  A more advanced definition is 'a set of jars and binary folders'
- Even more advanced: 'a set of jars, binary folders and other libraries'

2. Can a library be dynamically updated? Or is it statically defined?

3. Can a library be shared?
- in a workspace: you define 1 library in the workspace and share it across
projects
- in a team: one member defines a library and then check it in a repository
so that other team members can check it out

4. How do we represent libraries in the Java model?
- Using projects: the classpath of a project defines the set of jars (or
more) that make the library
- Using classpath containers: the JRE System Library is an example of a
library
1. Should also consider references to projects.

4. Remember that containers can only denote JAR/classfolder or projects. In 
particular, they cannot denote classpath variables or further containers. Thus 
it could seriously put a limitation on what library containers could be 
representing. If people did intend to use libraries so as to factor portions of 
classpath, then this portion couldn't use any of the sophisticated abstraction 
mechanism available on the classpath (container or variable).

On the other hand, using projects would nicely allow all these combinations. 
Isn't it then only a filtering issue on the UI side to avoid polluting the 
navigator with these library projects ? (they could be located elsewhere that 
user projects). Also library projects can automatically be shared which is 
another free feature.
Also see alternate initiatives for library folders (bug 39198, bug 38144), 
which had the drawback of not allowing to persist source attachment information 
for referenced JARs.

Also other related bug 38360
The approach I would take is to keep it as simple as possible: We define a 
library as a set of external JAR's plus: support for folders that contain a set 
of JAR's:
The support for folders that contain JARs would be
Either
a.) simply UI help to select an external folder then the UI then adds all JAR's 
it find in it (result in a static set of external JARs)
b.) Let the user choose a folder and then dynamically add the contained JAR's 
when the classpath is requested.

-> 1. Simple set of _external_ JAR's
   2. Either dynamically (b.), or statically (a.), to be decided
   3. Sharing in workspace, but no sharing in the team,
      UI offers import/export simlilar to templates
      (it's hard to share external JARs anyways
   4. using containers for simple cases, motivate to use projects for the rest

Why keeping it as simple as possible and not offer project, internal jar and 
class folder references?
As Philippe mentioned, projects offer all you want from libraries with the 
exception of not being dynamically. But you have the full flavour of possible 
class path entries (you can even use source folders to patch a class in your 
libraries), they solve the sharing problem and we have the UI to configure it.

So, everything is there, you can already use projects as libaries, but, either 
it's not obvious or people just don't want that.

What we could do to make it more obvious is to introduce an extra flag in 
projects that marks them as library-projects. This flag would also be stored in 
the .classpath file. Having that we can show them with a different icon, we 
could hide them in our views as top level elements but present them as children 
of normal project that refer them. We could also change the build path dialog 
to show these projects when you click 'Add library'.
I must say, however, that I hesitate to add a flag that is mearly for 
presentation and make something different that is really the same.

But I think even this would not silence the wishes for a classpath container. 
It's obviously what you expect having used other IDE's.

So therefore I think it makes sense to add this, but: Let's not start to 
imitate projects. Let's not have two similar things having almost the same UI 
but each with it's own limitations.
Supporting only external jars solves 80% of the users needs. For the other 20% 
(expert users) let's motivate them to learn about projects. 
My two cents..

- As Martin suggested mark a project as a library project so that the UI can
intelligently display/hide/filter the contents.
- Do not allow dynamic updating. 
- Regarding sharing across a team. Since projects can already be shared that
should happen for free.
I don't like the library project idea. All I need is a new kind of classpath 
entry - currently you have a jar file entry, a class directory entry, and the 
new kind would be a library directory entry (a directory that contains jar 
files). All three should be allowed to be inside the workspace or outside the 
workspace. All should be dynamic, i.e., automatically adjust to changes in 
their content.
In our shop we leave the choice of IDE to each individual developer. Thus we 
have had to build a development environment that is IDE independent. We store 
all the 3rd. party jars that we use in a common directory tree on a shared 
drive that is accessible from all developer workstations. Using this structure 
could be easily met using Ed Burnette's suggestion.

However, whenever source code is available, we like to compile a debug version 
of the jar, so that we can debug into the 3rd. party code when necessary. In 
an Eclipse environment this leads to a set of Eclipse projects, one for each 
jar for which we have source code. So now we have 2 jar files for each 3rd. 
party jar; the distribution jar and the debug jar. We place the debug jars in 
a directory tree that parallels the base structure. We also add copies of 
those jars for which source is not available into the debug jar tree and we 
essentially use this tree as our library. The ability to simply specify the 
library in a project would save a considerable amount of time.

Based on our use cases, I do not see the need for a library project or other 
more complex structures. I can see, particularly for larger organizations, the 
valuein allowing nested libraries. This could be dealt with quite simply by 
considering a library to be a single directory. Nested libraries would then 
simply become sub-directories in the library structure. It would be desirable 
to be able to use Eclipse links to specify sub-directories so that a library 
structure could be built from non-contiguous components. Libraries should be 
dynamic in that new content should be immediately available to the library 
users.

The following new capabilities would be helpful in allowing us to make fullest 
use of a library capability.

1. Allow archives to be defined as source folders. Since most 3rd. party jars 
use archives to distribute their source code, this would allow us to build 
debug jars without the need to de-archive the source.

2. A library provides considerable help in making resources easily available 
to a project. It also introduces a problem at packaging time. We need a 
facility to determine, on an individual project, working set or workspace 
basis what jars in a library are actually used. This might be implemented as a 
view, or it could possibly be implemented as additional information in a 
navigation view.
Source code can already be read out of archive (.jar and .zip) files without 
having to expand them. Every jar containing classes can be associated with a 
jar/zip containing source (which might be the same jar).
Here's an existing library plugin implementation for Eclipse. It worked fairly
nicely up to about M5 or M6, but new Eclipse builds seem to have broken it.
http://www.javango.net/eclipse/userlib.html

btw, the license it totally open:
---
This software (binary code and documentation) can be used, copied,
and distributed without any limitation and free of charge subject 
to the following conditions:

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED.IN NO EVENT AND UNDER NO CIRCUMSTANCES SHALL 
THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR ANY 
OTHER LIABILITY, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
SOFTWARE OR ITS USE.
---

Apache's Maven - http://maven.apache.org - has a project object model that
handles libraries as dependencies.  While I would like to see 1st class support
for maven in eclipse (as a new type of project/builder), at least taking
advantage of some of the maven infrastructure - for dependencies - might be useful.
added user libraries as described in comment 3.
> 20040307

Currently all in jdt.ui. It is planed to move the classpath container
infrastructure down to jdt.core
*** Bug 39198 has been marked as a duplicate of this bug. ***
My pet peeve about the "user libraries" plugin is that you can't add entries in
terms of classpath variables. Will this library implmentation be able to do that?
No it doesn't. This is a restriction by the jdt.core infrastructure.

Hello,

I came to this one via #39198 because this seems to be exactly what I'm looking for and the reason why a plugin - that was doing what I want - is abandoned and I'm completely unable to figure out how I'm supposed to use this now (assuming it is implemented because it's marked as resolved / fixed).

So what I would like to do is the following:

Mark a folder (inside a project or not - doesn't matter to me) as a container that dynamically adds or removes jars to the classpath of my project when i add or remove them to this folder (exactly like the 'Web App Library' folder from the Web Tools Project does).

Further this folder should be shown like a directory (again like the 'Web App Library' container or the 'JRE System Library') so my 'Project Explorer' view isn't drowned with jar entries and remains useful.

IMHO this should be possible by 'Selecting Project Preferences' -> 'Java Build Path' -> Libraries -> 'Add Library' -> __'Add Folder'__. But this isn't possible because there's no 'Add Folder' option. Therefore I can only use 'Add class folder' - which accepts only .class files not jars - or manually add every single jar - which is exactly what I want to avoid!

To put it short: I need a 'Web App Library' container for normal (non web) projects.

Please enlighten me how one is supposed to do that.

Thanks a lot in advance :)
I'm going to agree with Stephan here.  It seems like the ability to tag a lib folder as part of a projects buildpath and have any jars within that folder available as part of the classpath was completely sidestepped in the "fix".  Are we both missing something here or is that the case?
See bug 166556 for a followup request for enhancement for a way to configure folders as dynamic library containers that provide the included jars to the classpath.
bug 39198, bug 50461, bug 166556

I published a new version of 'Library Folder ClasspathContainer'
with an agreement with the original author, Joris.
Library Folder ClasspathContainer marks a folder and adds all
jars and zips on the folder.
When a member of the jars or zips is removed, this plugin automatically
follows the changes.
I modified the original plugin for eclipse 3.2 and 3.3. Maybe available on 3.0 and 3.1.

Please visit and try it.
  http://libcontainer.sourceforge.net/updates/

