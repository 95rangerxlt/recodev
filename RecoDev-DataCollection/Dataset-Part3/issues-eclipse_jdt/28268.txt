If I have a comment at the end of a method that I refactor with Extract Method,
the  closing bracket with the comment gets moved to the newly created method.
Example:

// Before Refactoring
public class Sample1
{
  int index = 0 ;
  public void doSomething()
  {
    index = 10 ;
  } // doSomething()
}

---------------------

// After Extract method on the line containing "index = 10 ;"
public class Sample1
{
  int index = 0 ;
  public void doSomething()
  {
    init();
  }

  public void init()
  {
    index = 10 ;
  } // doSomething()
}

If I have a comment at the end of a method that I refactor with Extract Method,
the  closing bracket with the comment gets moved to the newly created method.
Example:

// Before Refactoring
public class Sample1
{
  int index = 0 ;
  public void doSomething()
  {
    index = 10 ;
  } // doSomething()
}

---------------------

// After Extract method on the line containing "index = 10 ;"
public class Sample1
{
  int index = 0 ;
  public void doSomething()
  {
    init();
  }

  public void init()
  {
    index = 10 ;
  } // doSomething()
}
Extract method is a JDT/UI feature.
Move to JDT/UI.
The problem is that the // doSomething comment doesn't belong to the method 
doSomething. Hence extract method things that the method ends with the closing 
bracket } and inserts the new method after the closing bracket. As a side 
effect the // doSomething comment ends up at the new method.

Moving back to JDT core to comment on the final strategy for line comments and 
AST nodes. For fields the semantic has been changed so that in the example

int field; // comment

the comment now belongs to the field. 

Isn't the trailing line comment also part of the method (like we did for 
fields)? 
I think the trailing comment is not part of the method declaration in the 
DOM/AST position. I will investigate how to change this.
Most important for me is that we are consistent. Either all nodes have trailing 
comments or none has. 

I would prefer that trailing comments belong to the node (at least for nodes of 
type body declaration). If we add trailing comments to body declaration nodes 
there should be an additional field so that we have access to the actual end of 
the declaration without the comment (e.g for field declarations the ; for the 
rest the closing }).

Then this requires some API change.
Jim - any comment?
It might be time to propose a consistent story for comments in general (leading
and  trailing comments). When this is done, we might want to fix this bug.
I agree that we should treat trailing comments in a consistent way.
However, in Compare land I don't need access to the actual end of 
the declaration without the comment.

Summary of where we are right now:
- source range extends from 1st character of 1st real token through
last character of last real token matched by grammar rule for node type;
leading whitespace and comments, and trailing whitespace, comments are
NOT INCLUDED in source range with the exception of Javadoc comments
- for BodyDeclarations, the Javadoc comment is treated like a token and
is represented by a Javadoc node
- Statement.get/setLeadingComment allows for a single comment before
the statement; however, AST.parseCompilationUnit has never associated
leading comments with any statement nodes it creates

So where do we go from here? At the very least, we should
(1) clarify this contract in the API spec
(2) delete (deprecate) Statement.get/setLeadingComment

This would at least gives us a minimal, consistent, approach for 
leading and trailing comments. The question is: is it worthwhile doing more?
The general approach to date has been that AST/DOM clients interested in
finer-grained lexical issues should rescan the source in the vicinity of
the construct to find what they're interesting in. This is reasonably
straightforward, given org.eclipse.jdt.core.compiler.IScanner and accurate
and consistent source ranges for all nodes and ancestors.

We could add a second, "extended" source range to certain node types
like statements, body declarations, import declarations, and package 
declarations that would "round up" to the "natural" source line boundary
to better align with what a human author would consider the source range for a 
construct. 

Q: If the API had this, would clients use it (given that many of them already
have their own scanners and have to do this sort of thing other places too)? 
If yes, what are "natural" boundaries that this API should recognize?

Also one thing to keep in mind is consistency with other JavaModel APIs. What 
is considered to be a method element source range should be matching what a DOM 
method source range.

In the JavaModel, element source ranges are visible when using the segmented 
view. A member owns all leading comments since last member, and will extend 
until the end of any immediate trailing line comment.

e.g.

/* 
 * belongs to foo()
 */

/** 
 * also belongs to foo()
 */
void foo(){
} // end of foo()

Response from Jonathan Gossage <jgossage@magma.ca> posted to jdt-core-
dev@eclipse.org on Dec. 17, 2002

Ideally, I would like to see all comments and other whitespace accounted for
in the AST. This becomes important if you want to provide a renderer that
can take an AST and produce human readable source code. Specifically I would
like to see the following kinds of nodes for dealing with whitespace.

1. A node that describes a consecutive run of whitespace characters
including runs of a single character. This would always be a leaf node. This
node would be ignored by compilers and tools that are only interested in the
Java content.
2. A node that describes for a multi-line comment (i.e. /* */). This would
also be a leaf node. Again this node would be ignored by tools that are not
interested.
3. A node describing a single line comment (i.e // ...). This would be a
leaf node and would be ignored by tools that are not interested.
4. A composite node that would be a parent to any node with associated
comments. The children would be the associated comment and white space nodes
and the Java node. To me the following rules for associating comments and
white space with Java constructs make sense.

a) Recognize and preserve a file comment block at the start of a compilation
unit. This could take the form of a single multi-line comment or it could be
a consecutive range of single line comments and blank lines. This should
result in a composite node with one or more comment and whitespace nodes
under it.
b) Recognize any consecutive run of blank lines, multi-line comments or
single line comments as a comment block to be attached to the following java
node type using the list of types you specified with the addition of field
declarations. Here there would be a composite node with the
whitespace/comment nodes and the Java node underneath.
c) If a single or multi-line comment is found immediately following, on the
same line, any of the nodes defined above, collect it and all single line
comments and whitespace that immediately follow. The intent is to deal with
constructs such as the following:

    {...} // comment
          // comment2

or statement; // comment
              // comment2

or statement; /* comment1
                 comment2 */

d) Multiline or single line comments embedded within a statement should
simply generate a comment node without any composite node. For example
   invoke( a, // comment 1
           b /* comment2 */ );
would simply generate two comment nodes plus the associated whitespace
nodes.

Since there could be a substantial space penalty in generating these nodes,
consideration should be given to making the generation optional. This would
allow tools that need this kind of information to have it without penalizing
conventional tool users.

The composite node I mentioned above is a specialized instance of a more
general capability that I would like to see in the AST. I would like to
introduce the concept of a intermediate node that could be used by tools
that generate source code fragments. Such a node would have two sub-trees
under it, one consisting of nodes that only have meaning to a specific tool,
and the other that contains the generated code as an AST fragment. This type
of node would allow tools to present constructs at a high conceptual level
to the developer while also giving compilers etc. direct access to the
generated source code.

Response from Dirk Bauemer posted to jdt-core-dev@eclipse.org
on Dec. 17, 2002

Here is the refactoring view: 

Currently we don't handle comments in a special way. This means that in some 
cases we loose comments or leave comments at the original locaction when we 
move or somehow else modify source code. So we would highly benefit from a 
general comment story provided by the AST. Whitespace are less important for 
us since we have a solution to preserve formatting information (e.g. 
whitespace and comments) when modifying and rewriting an AST. 

The following items are important for us: 

- The rules source positions adhere to (e.g. parent.start < children
[0].start, .....) should not be broken or modified when introducing support 
for comments. 

- simply adding the comments to the source range of an ASTNode will break your 
current refactorings. They assume that [getStartPosition(), getStartPosition
() - getLength() - 1] cover only the statement relevant characters and no  
preceding or trailing comments. IMO changing this would break the spec of the 
ASTNodes. 

Introducing composite nodes as suggested by Jonathan would IMO lead to 
problems where subnodes assume a special kind of child nodes. Consider a 
VariableDeclarationStatement which contains a list of 
VariableDeclarationFragement. If we introduce a special node, what are the 
subnodes of the declaration statement if we have preceding or trailing 
comments for declaration fragments ? So instead of merging comments into the 
existing AST we could build a "comment tree" and provide methods to connect 
ASTNodes to comments and vice versa. We could built the special comment tree 
on request and that tree should handle all the cases described in Jonathan's 
mail.

re: Jonathan's suggestion that comments and whitespace be accounted for by 
nodes in the AST. Introducing composite parent nodes would be a breaking 
change, as Dirk points out. However, it's hard for me to imagine them in a 
separate *tree*, as there's nothing really to provide a hierarchical 
structure. It would end up being a flat list of comments and whitespace nodes, 
not substantially different from the stream of tokens you get from a scanner.

It's not clear what the best solution is. I've entered
- bug 29178 for an improved core solution
- bug 29176 for deprecating the inadequate Statement.get/setLeadingComment

Moving back to JDT/UI.

This got addressed with the new AST rewriter.
