Title says it all...

Title says it all...
Inline Constant and Inline Method should behave in the same way.

Current behavior (both don't store any setting):
Inline Method:
- reference selected: "Only selected", "Delete declaration" unchecked
- declaration selected: "All", "Delete declaration" checked

Inline Constant:
- reference selected: "All", "Delete declaration" unchecked
- declaration selected: "All", "Delete declaration" unchecked

Both dialogs automatically uncheck "Delete declaration" as soon as "Only
selected" is selected and don't restore the checked state when "All" is selected.

I can easily change Inline Constant to behave like Inline Method. But I think
the "right" solution for both would be to remember the state of the "Delete
declaration" box and to leave it checked, even when the box is disabled.

Dirk?
From a user perspective, it is annoying to check the preference again and 
again when inlining a bunch of constants. The wizards even show that the 
delete declaration setting is not honored (if not applicable) by disabling the 
check box.
In such cases, preferences which are dependent on another preference should 
not be automatically adjusted if the dependee changes. There are other cases 
(e.g. involving path names) where this makes perfect sense.
Markus, the inline constant refactoring should behave the same way as inline method.

I am not convinced that remembering the state here is the right thing to do. in
99% of the cases when I inline a declaration I want to remove it.

Just my two cents
I agree with Dirk that you rarely want to inline all without removing the
declaration. Therefore, I changed Inline Constant to these defaults:

- reference selected: "Only selected"
- declaration selected: "All"
- "Delete declaration" always checked

The "Delete declaration" checkbox is only enabled if "All" is selected and the
refactoring only removes the declaration iff all references are inlined.
