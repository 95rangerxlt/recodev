import java.util.function.Consumer;

public class LambdaWithBridge {
    interface StringConsumer extends Consumer<String> {
        void accept(String t);
    }
    static void m(String s) { System.out.println("m("+s+")"); } 
    public static void main(String... x) {
      StringConsumer c = LambdaWithBridge::m;
      c.accept("direct call");
      Consumer<String> c4b=c;
      c4b.accept("bridge method");
    }
}

and

import java.util.function.Consumer;

public class LambdaWithBridge {
    interface StringConsumer extends Consumer<String> {
        void accept(String t);
    }
    public static void main(String... x) {
      StringConsumer c = s->System.out.println("m("+s+')');
      c.accept("direct call");
      Consumer<String> c4b=c;
      c4b.accept("bridge method");
    }
}

produce

m(direct call)
Exception in thread "main" java.lang.AbstractMethodError: Method LambdaWithBridge$$Lambda$1.accept(Ljava/lang/Object;)V is abstract
	at LambdaWithBridge$$Lambda$1/2536472.accept(Unknown Source)
	at LambdaWithBridge.main(LambdaWithBridge.java:13)

which indicates that the necessary bridge method has not been generated. The compiler must emit code which invokes altMetafactory with FLAG_BRIDGES and the bridge method signatures. An alternative would be creating the bridge method as synthetic default method inside the interface, however, if the interface is not on the build path and originates from a non-Java8 project, the bridge method must be generated for the lambda.

import java.util.function.Consumer;

public class LambdaWithBridge {
    interface StringConsumer extends Consumer<String> {
        void accept(String t);
    }
    static void m(String s) { System.out.println("m("+s+")"); } 
    public static void main(String... x) {
      StringConsumer c = LambdaWithBridge::m;
      c.accept("direct call");
      Consumer<String> c4b=c;
      c4b.accept("bridge method");
    }
}

and

import java.util.function.Consumer;

public class LambdaWithBridge {
    interface StringConsumer extends Consumer<String> {
        void accept(String t);
    }
    public static void main(String... x) {
      StringConsumer c = s->System.out.println("m("+s+')');
      c.accept("direct call");
      Consumer<String> c4b=c;
      c4b.accept("bridge method");
    }
}

produce

m(direct call)
Exception in thread "main" java.lang.AbstractMethodError: Method LambdaWithBridge$$Lambda$1.accept(Ljava/lang/Object;)V is abstract
	at LambdaWithBridge$$Lambda$1/2536472.accept(Unknown Source)
	at LambdaWithBridge.main(LambdaWithBridge.java:13)

which indicates that the necessary bridge method has not been generated. The compiler must emit code which invokes altMetafactory with FLAG_BRIDGES and the bridge method signatures. An alternative would be creating the bridge method as synthetic default method inside the interface, however, if the interface is not on the build path and originates from a non-Java8 project, the bridge method must be generated for the lambda.
Thanks Holger, I'll take a look.
Created attachment 240775
Patch under consideration
Fix and tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=2323f3f57de6c106bba7d022fda77960201afa72.

Thanks for the defect report and continuing to test.

Stephan, Jay, please review.
Released into BETA_JAVA8_LUNA
I'm not sure I'll find the time to thoroughly review these changes before leaving for ECNA. Some easy questions for now:

- why does a code gen issue change the error message in NLET?

- the change in ReferenceBinding: un/related? is order semantically significant? micro optimization?
(In reply to Stephan Herrmann from comment #5)

> - why does a code gen issue change the error message in NLET?

This is related to the same issue raised below:

> - the change in ReferenceBinding: un/related? is order semantically
> significant? micro optimization?

Prior to https://bugs.eclipse.org/bugs/show_bug.cgi?id=423467 and its
commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=02ca7d63ca30b6951ead9edfd62cb5ea00ae7204, 

an interface's own contracts were examined and accumulated before those of
its supertype.

Thus the return value of getInterfaceAbstractContracts(scope) used to 
contain methods arranged from bottom of hierarchy to root of hierarchy 
left to right in the return value array.

https://bugs.eclipse.org/bugs/show_bug.cgi?id=423467 changed the visitation
order to we end up with the orders reversed in the returned array (i.e super
methods show up first)

This means that the SAM computed is really from the super type - it didn't
matter so far because they are all anyways override equivalent and return
type substitutable.

The order mattered while I was building the solution to this bug - at least 
in the interim stages. In the final form this changes does not seem to be 
required i.e all new tests pass without this change in RB.gSAM. I'll leave
it as is though since returning the subtype method is what we should be doing.

That said, Jay reported some problems that I am looking into - may or may not
be relevant to this particular change.
(In reply to Srikanth Sankaran from comment #6)

> That said, Jay reported some problems that I am looking into - may or may not
> be relevant to this particular change.

No, that was unconnected issue: See https://bugs.eclipse.org/bugs/show_bug.cgi?id=430241
Looks good to me.
I have a dangling review flag here. 

Srikanth, is a full review still needed?
(In reply to Stephan Herrmann from comment #9)
> I have a dangling review flag here. 
> 
> Srikanth, is a full review still needed?

Not mandatory at this point. Thanks.
