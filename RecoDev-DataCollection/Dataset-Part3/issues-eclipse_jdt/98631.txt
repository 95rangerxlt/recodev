We want to generate random numbers used as IDs within the java code.
For that we defined a java code template with a special variable called
randomNumber. To resolve the variable within the java-context we implemented a
variable resolver but unfortunately the java editor does not use the
org.eclipse.ui.editors.templates extension point to recognise templates and the
appropriate variable resolver.

We want to generate random numbers used as IDs within the java code.
For that we defined a java code template with a special variable called
randomNumber. To resolve the variable within the java-context we implemented a
variable resolver but unfortunately the java editor does not use the
org.eclipse.ui.editors.templates extension point to recognise templates and the
appropriate variable resolver.
The Java editor currently chooses not to allow resolvers to be added to its
contexts. We could investigate whether the current Java and Javadoc context
types are robust enough to allow custom resolvers to be contributed.
Note that the Java editor *does* use the org.eclipse.ui.editors.templates
extension point: you can add templates to the Java editor via the extension
point (the pre-installed templates are even contributed as an extension), but
not resolvers.
I already knew that the java editor uses that extension piont to extend
templates but not resolvers. But the extension point defines an element "resolver".
May be the question is more general: 
How do I find out whether a feature of an extension point is mandatory or
optional? Are there any rules defined by eclipse?
In the described case the declaration of an resolver seems to be an option,
because there are users of the extension point (the java editor) that does not
implement all elements described in org.eclipse.ui.editors.templates. 
If eclipse does not decides between mandatory and optinal elements than the bug
is not that the editor does not implement the extension for resolvers but rather
that the editor does not defines his own extension point for templates without
resolvers.
For the Java code editor not to honour the full semantics & general contract 
of the org.eclipse.ui.editors.templates extension point seems like a pretty 
serious limitation. There's a clear intent to offer both axes of 
extensibility: custom resolvers and custom templates. 

Surely the onus is on the extending plugin to provide a correct and robust 
implementation of an extension point? Attempting to defend against buggy 
extensions by arbitrarily refusing to honour the general contract of an 
extension point simply breaks the architecture, IMO.

The Java code editor's lack of support the for custom resolvers prevents 
vendors from providing custom Java templates which require custom resolvers. 
In my own case (Versata, Inc.) the capability to do this is so vital to our 
product I have no alternative but to try and find a way to subvert the policy 
and forcibly add my custom resolvers. I'm sure other vendors encountering this 
surprising limitation with be forced to do likewise.
Time permitting for 3.2
Has to be shifted to 3.3.
*** Bug 142419 has been marked as a duplicate of this bug. ***
Fixed > 20060623.
