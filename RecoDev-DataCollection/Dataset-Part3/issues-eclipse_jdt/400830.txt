Update the code formatter for Java 8 constructs. Currently, the formatter just gives up if it e.g. sees an annotation on an array type or vararg.

ASTRewrite needs a working code formatter to work correctly. ASTRewriteFormatter formats snippets to find the current formatter settings, and it runs the code formatter for new nodes.

Update the code formatter for Java 8 constructs. Currently, the formatter just gives up if it e.g. sees an annotation on an array type or vararg.

ASTRewrite needs a working code formatter to work correctly. ASTRewriteFormatter formats snippets to find the current formatter settings, and it runs the code formatter for new nodes.
Jesper, Many thanks for offering to work on this. Much appreciated.
As Markus calls out in comment#0, ASTRewrite requires a working
formatter and a functional AST rewrite is required to unblock the
UI team to start work on JSR308 initially and then on JSR335.

JSR308 is publicly available at types.cs.washington.edu/jsr308/
Latest spec is dated Jan 30th. Apart from code generation which
is underway, other phases of compiler should work fine (class file
readers still need update.)

For testing the formatter: Ctrl+Shift+O with "*Format*Test" brings
up a whole bunch of junit suites. IIRC, not all of them are
hooked into RunFormatterTests.java for performance reasons.
In particular entries like FullSourceWorkspaceFormatterTests and
RunFormatterMassiveTests may not be hooked into either RunFormatterTests
or RunJDTCoreTests. But these need to run to validate the formatter.

A good starting point to understand the code could be
org.eclipse.jdt.core.formatter.CodeFormatterApplication.start(IApplicationContext) and you can F3 your way the maze to the relevant classes.

Alternately browse the package org.eclipse.jdt.internal.Formatter.

If you want to copy + paste some 308 code snippets for testing,
Ctrl+Shift+O with "*TypeAnno*Test". Also GrammarCoverageTests308.java
has many snippets that provide near 100% coverage of the modified
grammar rules.

Good luck and thanks again.
So, I have a few smoke test examples running now where the JSR308 annotations are properly expected by the formatter and they are properly re-emitted.
I've created a set of expected input and output files for the JSR308 samples from GrammarCoverageTests308.java.

Issues:
- Smallest meaningful patch is going to be big, even without test.
- Tests will be even bigger.
- Existing test classes "uncooperative" in terms of sharing useful utilities, much copy+paste evidence.
- Right now focussing on passing the JSR308 constructs through, actual formatting options will come later.
- Not started on Lambdas, default methods on interfaces, and method references yet.
(In reply to comment #2)
> So, I have a few smoke test examples running now where the JSR308
> annotations are properly expected by the formatter and they are properly
> re-emitted.

Thanks!

> - Smallest meaningful patch is going to be big, even without test.

Let us not worry about this point - Submitting a high quality fully
functional implementation for a sizable project is one way to get 
commit rights with module ownership (I should mention here that in
JDT/Core, we have a project local process that even after commit rights,
reviews are mandatory for all code changes for the first full year.) 

> - Existing test classes "uncooperative" in terms of sharing useful
> utilities, much copy+paste evidence.

I don't know if you are specifically talking about the formatter tests,
but in general in the compiler area, there is a lot of infrastructural/utilitarian/foundational support.
(In reply to comment #3)
> (In reply to comment #2)
> > - Existing test classes "uncooperative" in terms of sharing useful
> > utilities, much copy+paste evidence.
> 
> I don't know if you are specifically talking about the formatter tests,
> but in general in the compiler area, there is a lot of
> infrastructural/utilitarian/foundational support.

I was talking about the formatter tests, which have a lot support, but it appears that this support is copy+pasted into the different test classes which was a bit confusing at first.

I'm going for the "external" form of test, with separate X_in.java and X_out.java files residing in a separate directory for each test, which saves some escaping woes.

I'll see if I can refactor some of the test support for formatting once I'm through the 'meat' of the formatting work.
Created attachment 227406
Initial patch for review, formatting all of JSR308

This patch adds basic formatting for all of JSR308, based on the grammar tests.

I'll need to add some options for formatting, i.e. whether to format like:

List<@Ann1 Integer> or
List< @Ann1 Integer>

int @Ann1 [] or
int @Ann1[]

Next up: Lambda support
Created attachment 227407
mylyn/context/zip
(In reply to comment #5)
> Created attachment 227406 [details]
> Initial patch for review, formatting all of JSR308

Thanks, I won't be able to get to review this for a week, so I request 
your patience.

(In reply to comment #6)
> Created attachment 227407 [details]
> mylyn/context/zip

Your reviewer is a minimalist who works with bare bones eclipse sdk. So these
are not useful for me - I have no idea how to use them.
(In reply to comment #7)
> (In reply to comment #6)
> > Created attachment 227407 [details]
> > mylyn/context/zip
> 
> Your reviewer is a minimalist who works with bare bones eclipse sdk. So these
> are not useful for me - I have no idea how to use them.

Yes, that got sent by mistake, but you should try it out someday.

I'll be patient, but likely update the patch in a few days.
(In reply to comment #5)
> List<@Ann1 Integer> or
> List< @Ann1 Integer>

List<@Ann1 Integer>


> int @Ann1 [] or
> int @Ann1[]
 
int @Ann1[]
> I'll need to add some options for formatting, 

Please try to keep the amount of new options at a minimum. I don't think we need an option to insert a new line after annotations on type references.

> List<@Ann1 Integer> or
> List< @Ann1 Integer>

This is governed by the existing options for space after '<' (off by default).

> int @Ann1 [] or
> int @Ann1[]

This is governed by the existing options for space before '[' (off by default).
(In reply to comment #10)
> Please try to keep the amount of new options at a minimum. I don't think we
> need an option to insert a new line after annotations on type references.

I will, thanks for the input.
(In reply to comment #10)
> > I'll need to add some options for formatting,
> 
> Please try to keep the amount of new options at a minimum.

I'm now doing the lambda formatting, so I'm guessing we'll need a few options now:
 - Space before/after arrow:  x->x , x-> x , x ->x, x -> x
 - Space before/after lambda expressions:
     "do( (x,y) -> (x+y) );" may not be the same style-decision as "do( 123 );" vs "do(123);"
 - Should there be a specific 'brace positions' preference for lambda blocks ?
 
Only other possible option that I can think of, but don't see covered, is the ability to not wrap blocks, as in:
 
	collection.forEach( () -> { boom(); };

With the reasonably tight lambda notation, that style could have merit, if the line is short enough not to wrap. Is that a good idea?

Other than that, all is working.
Created attachment 227503
Complete patch covering both JSRs, including new options

This patch contains formatting for both JSRs, and includes three new options:
 - Space before lambda arrow -> (default: insert)
 - Space after lambda arrow -> (default: insert)
 - Brace position for lambda block (default: end of line)
 
 No UI-part of this, just core.
 
 Enjoy!
Jesper, I am ready to review this. The patch does not apply as is: It does
not look like a cumulative patch: For example some diff hunks for
FormatterJSR308AnnotationsTests.java are relative to a previous version of
this file which does not exist on top of branch.

If it is not too much to ask, to begin with I would like to see it broken
into a separate one for lambda expressions, one for reference expressions
and one for 308 work. This will help me in the review process by allowing
to better focus. I'll raise separate bugs for these items shortly.
Ok, I'll break it up and submit in pieces
(In reply to comment #15)
> Ok, I'll break it up and submit in pieces

Thank you. Extracting the lambda expressions related pieces and attaching
them to bug 402173 would be the top priority. We just released the fix for
bug 399793 and we release the formatter and also close the ASTRewrite, then
UI team can start work.
This bug will serve as the umbrell/root bug for formatter work. Please
don't post patches here. They should go to individual topic bugs that
should be tagged as blockers for the present bug. 

High level discussions can happen here as needed.
(In reply to comment #15)
> Ok, I'll break it up and submit in pieces

To help you focus on the 'method can be static' analysis reimplementation,
I'll take up this task - If I need help I'll ask.
Jesper, the original patch you posted contains only incremental
diffs to FormatterJSR308AnnotationsTests. Could you post a patch
that contains this file please ? Thanks (one way to avoid this sort
of problems is to always amend the last commit and thus maintain
a single commit for a particular ER/CR).
I'll leave this open for a week or so, if no issues are uncovered by
testing by then, we will resolve this - beyond that any problems found
can be reported as blockers for bug 287648 or bug 380188
Any bugs will be addressed as bugs. This project is complete. Thanks Jesper.
