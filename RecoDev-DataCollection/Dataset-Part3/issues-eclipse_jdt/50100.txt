Using 0106 build, it takes minutes to update the markers for a compilation unit
containing 250 problems (maximum limit).
Each time I save the unit, the UI dies for several minutes. There is a running
job in the background that I cannot identify.
This is something new. I was not that bad with M5.
I set it as critical, because it makes the editor unusable.

Using 0106 build, it takes minutes to update the markers for a compilation unit
containing 250 problems (maximum limit).
Each time I save the unit, the UI dies for several minutes. There is a running
job in the background that I cannot identify.
This is something new. I was not that bad with M5.
I set it as critical, because it makes the editor unusable.
I think I saw that too.
My scenario:
- A workspace that has only org.eclipse.ui.workbench.texteditor as project.
- Open AbstarctTextEditor in editor
- remove all imports (to generate some errors)
- add a space and save. Repeat this until NPE is reached

declaration is in the 'changedAnnotation' array. but seems to be removed already.

- note the funny efects when repeating 'add space and save'. Somethimes there
are now error underlies but full, red background highlights.

Thread [main] (Suspended (exception NullPointerException))
	AnnotationPainter.catchupWithModel(AnnotationModelEvent) line: 283
	AnnotationPainter.updatePainting(AnnotationModelEvent) line: 531
	AnnotationPainter.access$1(AnnotationPainter, AnnotationModelEvent) line: 528
	AnnotationPainter$1.run() line: 597
	RunnableLock.run() line: 35
	UISynchronizer(Synchronizer).runAsyncMessages() line: 102
	Display.runAsyncMessages() line: 2295
	Display.readAndDispatch() line: 2003
	Workbench.runEventLoop(Window$IExceptionHandler, Display) line: 1518
	Workbench.runUI() line: 1494
	Workbench.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 258
	PlatformUI.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 139
	IDEApplication.run(Object) line: 47
	PlatformActivator$1.run() line: 226
	EclipseStarter.run(String[], Runnable) line: 85
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available
[native method]
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 79
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 41
	Method.invoke(Object, Object[]) line: 386
	Main.basicRun(String[]) line: 279
	Main.run(String[]) line: 742
	Main.main(String[]) line: 581


Fixed the NPE (see bug 50157). Need to verify whether this is really the cause
for the problem reported by this PR.

>There is a running job in the background that I cannot identify.
Doesn't the job have a name when you go to the Progress view (set to verbose)?

Is there something in .log?

I tried it with AbstractTextEditor having set the number to 999 and removed all
imports. I could save without any delay.

Do you see this with all files or just a specific one?

>Doesn't the job have a name when you go to the Progress view (set to verbose)?
I didn't know the verbose mode.

>Is there something in .log?
Nothing in the .log.

>I tried it with AbstractTextEditor having set the number to 999 and removed
>all imports. I could save without any delay.
I tried to describe what I got. I had 250 errors and the performance was very 
low. It took minutes sometimes before I could do something.

>Do you see this with all files or just a specific one?
My case was a specific file.

>I didn't know the verbose mode.
Go to the Progress view's view menu and there you can enable it.

Can you reproduce the error on that file?
If this is reproducible please give me the name and revision of that file and
how to reproduce the 250 errors I will then load JDT Core from the repository
and try to find the bug.

I got it again in a different file. That time I got this exception:

org.eclipse.core.internal.resources.ResourceException: Marker id: 76748 not 
found.
at org.eclipse.core.internal.resources.Marker.checkInfo(Marker.java:53)
at org.eclipse.core.internal.resources.Marker.getType(Marker.java:176)
at org.eclipse.core.internal.resources.Marker.isSubtypeOf(Marker.java:194)
at org.eclipse.jdt.ui.ProblemsLabelDecorator.isAnnotationInRange
(ProblemsLabelDecorator.java:263)
at org.eclipse.jdt.ui.ProblemsLabelDecorator.getErrorTicksFromWorkingCopy
(ProblemsLabelDecorator.java:246)
at org.eclipse.jdt.ui.ProblemsLabelDecorator.computeAdornmentFlags
(ProblemsLabelDecorator.java:185)
at org.eclipse.jdt.ui.ProblemsLabelDecorator.decorateImage
(ProblemsLabelDecorator.java:146)
at org.eclipse.jdt.internal.ui.viewsupport.JavaUILabelProvider.decorateImage
(JavaUILabelProvider.java:119)
at org.eclipse.jdt.internal.ui.viewsupport.JavaUILabelProvider.getImage
(JavaUILabelProvider.java:134)
at org.eclipse.jface.viewers.DecoratingLabelProvider.getImage
(DecoratingLabelProvider.java:73)
at org.eclipse.jdt.internal.ui.viewsupport.DecoratingJavaLabelProvider.getImage
(DecoratingJavaLabelProvider.java:103)
at org.eclipse.jface.viewers.TreeViewer.doUpdateItem(TreeViewer.java:99)
at org.eclipse.jface.viewers.AbstractTreeViewer$UpdateItemSafeRunnable.run
(AbstractTreeViewer.java:87)
at org.eclipse.core.internal.runtime.InternalPlatform.run
(InternalPlatform.java:814)
at org.eclipse.core.runtime.Platform.run(Platform.java:457)
at org.eclipse.jface.viewers.AbstractTreeViewer.doUpdateItem
(AbstractTreeViewer.java:469)
at org.eclipse.jface.viewers.AbstractTreeViewer.internalRefresh
(AbstractTreeViewer.java:1029)
at org.eclipse.jface.viewers.AbstractTreeViewer.internalRefresh
(AbstractTreeViewer.java:1044)
at org.eclipse.jface.viewers.AbstractTreeViewer.internalRefresh
(AbstractTreeViewer.java:1044)
at org.eclipse.jface.viewers.AbstractTreeViewer.labelProviderChanged
(AbstractTreeViewer.java:1160)
at org.eclipse.jface.viewers.ContentViewer.handleLabelProviderChanged
(ContentViewer.java:161)
at org.eclipse.jface.viewers.StructuredViewer.handleLabelProviderChanged
(StructuredViewer.java:650)
at 
org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage$JavaOutlineViewer.handle
LabelProviderChanged(JavaOutlinePage.java:688)
at org.eclipse.jface.viewers.ContentViewer$1.labelProviderChanged
(ContentViewer.java:74)
at org.eclipse.jdt.ui.ProblemsLabelDecorator.fireProblemsChanged
(ProblemsLabelDecorator.java:347)
at org.eclipse.jdt.ui.ProblemsLabelDecorator.access$0
(ProblemsLabelDecorator.java:342)
at org.eclipse.jdt.ui.ProblemsLabelDecorator$1.problemsChanged
(ProblemsLabelDecorator.java:322)
at org.eclipse.jdt.internal.ui.viewsupport.ProblemMarkerManager$1.run
(ProblemMarkerManager.java:183)
at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:102)
at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:2295)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2003)
at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1518)
at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1494)
at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:258)
at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:139)
at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:47)
at org.eclipse.core.internal.runtime.PlatformActivator$1.run
(PlatformActivator.java:226)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:85)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:324)
at org.eclipse.core.launcher.Main.basicRun(Main.java:279)
at org.eclipse.core.launcher.Main.run(Main.java:742)
at org.eclipse.core.launcher.Main.main(Main.java:581)

The test case is to edit a file with lots of compilation errors and fix the 
errors one by one.
Did you see this exception only ones? Which build?

I got it using 0113 build.
I don't have it all the time.

Concerning your comment 6, you need to load JDT/Core from source using the 
HEAD contents and then you replace the DefaultCodeFormatterOptions.java in 
formatter/org.eclipse.jdt.internal.formatter with its revision number 1.32. 
Then you should see the performance issue while editing the file.
A background thread is running that prevents the key bindings to work. The 
mouse action (copy/paste) are still working fine, but Ctrl + C is not working.
Also increase the number of problems per cu to 250 or more.
We need to revisit code in the form of
  x.exists() && <do something that expects x to exist>
Another thread might have deleted the marker/annotation after exists() results
to true but before the code after && gets fully executed. This causes <...> to
fail. In this particular case we fill the log. We must handle that case more
gracefully.

Adding Martin since he's the ProblemDecorator owner
Moving to Martin to
1. not fill the .log
2. think about how decoration can be made more robust regarding changes in other
threads
fixed > 20040126

no logging for removed markers. decorator should behave tolerant and not force a
lock.
