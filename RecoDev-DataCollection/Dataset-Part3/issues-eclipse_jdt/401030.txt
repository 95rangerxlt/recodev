BETA_JAVA8:

This may be broken. 

LambdaExpression.resolveType is an amalgam of 

MethodScope.createMethod
SourceTypeBinding.resolveTypesFor
AbstractMethodDeclaration.resolve

I may not have hooked up all portions needed for null inheritance/analysis
since some of this code was too dependent on the method binding having an
associated AbstractMethodDeclaration.

In particular, the call to SourceTypeBinding.createArgumentBindings is
not there.

Please see Scope.isLambdaScope, Scope.isLambdaSubscope, scope.namedMethodScope
et al which may help with an alternate implementation.

BETA_JAVA8:

This may be broken. 

LambdaExpression.resolveType is an amalgam of 

MethodScope.createMethod
SourceTypeBinding.resolveTypesFor
AbstractMethodDeclaration.resolve

I may not have hooked up all portions needed for null inheritance/analysis
since some of this code was too dependent on the method binding having an
associated AbstractMethodDeclaration.

In particular, the call to SourceTypeBinding.createArgumentBindings is
not there.

Please see Scope.isLambdaScope, Scope.isLambdaSubscope, scope.namedMethodScope
et al which may help with an alternate implementation.
Stephan, if this calls for restructuring LambdaExpression type, please
request review so I can be sure the changes are in line with others in
pipeline - TIA.
Created attachment 227227
work in progress
Created attachment 227228
mylyn/context/zip
(In reply to comment #2)
> Created attachment 227227
> work in progress

With this patch the signature of a lambda is wired to any null annotations on the implemented SAM type.

Up-to this point I can well work with the existing structure of LambdaExpression and friends.
Still I modified that code to make it easier to compare this code to the various origins where bits and pieces have been copied from:
- revert creative naming
- restore original order of code blocks (concerns the block dealing with declared exceptions)
- add code comments mentioning correspondence to similar code for methods
- added TODOs for sections that were omitted during copy&paste but might be relevant
(In reply to comment #4)

> - added TODOs for sections that were omitted during copy&paste but might be
> relevant

For the record, here are the comments on the two TODOs:

(1) Erasure is not allowed in ascertainment of parameter identity.
Per 15.27.3:

A lambda expression is congruent with a function descriptor if the 
following are true:

The number of lambda parameters is the same as the number of parameter 
types of the descriptor. If the lambda parameters have explicitly-declared 
types, these types are the same as the parameter types of the descriptor.
This came up earlier in https://bugs.eclipse.org/bugs/show_bug.cgi?id=382701#c41
and Jesper dug up the citation.

(2) Because of (1) we must not issue raw type usage warnings. If raw types
were inadvertently used, it would trigger a compile error anyway. If they
are deliberately used to match the descriptor's rawness, a warning would
not be actionable and so would be wrong.
(In reply to comment #5)
> (In reply to comment #4)
> 
> > - added TODOs for sections that were omitted during copy&paste but might be
> > relevant
> 
> For the record, here are the comments on the two TODOs:

Thanks for clarification.
I decided to let lambdas be unaffected by any nullness default, because the lambda itself does never define a contract, only the underlying SAM can do so.
At the flip-side of this coin, I made lambdas inherit the SAM's null annotation independent of the compiler option which controls this part for regular methods.
Practically this means that lambdas will not normally have null annotations of their own, but are required to implement the SAM's null contract.

Technically, this implies that lambdas are not handled by ImplicitNullAnnotationVerifier, but instead a much simplified version is given in LambdaExpression#mergeParameterNullAnnotations().

For regular methods, null annotations have to be resolved and interpreted as early as STB.resolveTypesFor() because after that call, message sends against a given message already needed to know about these null annotations. For lambdas this is not an issue as there are no direct callers. Hence it is safe to do all the resolving during LambdaExpression#resolveType().
Released via commit de85d73a10e0280a45c9d9fcbbd2b35068e06127.
Do we need any analysis for reference expressions ? Once the single compile
time declaration that corresponds to the reference expression is known, does
any contract specified by the descriptor be checked with the chosen method
for conflicting annotations ? (line 221 in ReferenceExpression.java)
While debugging some other code, I noticed that NPEs were getting
triggered by ReturnStatement.checkAgainstNullAnnotation. This method
has some resilience to catch these and swallow them, but for lambda
returns, this will always trigger an NPE since the reference context
associated with a lambda is not an AMD, so scope.methodScope().referenceMethod()
call will return null.
(In reply to comment #10)
> While debugging some other code, I noticed that NPEs were getting
> triggered by ReturnStatement.checkAgainstNullAnnotation. This method
> has some resilience to catch these and swallow them, but for lambda
> returns, this will always trigger an NPE since the reference context
> associated with a lambda is not an AMD, so scope.methodScope().referenceMethod()
> call will return null.

Very good catch, thanks.
For the issue at hand this is easily fixed - finally I understand the significance of your reference to Scope.isLambdaScope().
To make things still simpler I'm introducing a MethodScope.getReferenceMethodBinding() to return the appropriate binding for both cases.
I'm taking the opportunity to check other callers of MethodScope.referenceMethod(), if any of those should benefit from the same.
(In reply to comment #11)
> I'm taking the opportunity to check other callers of
> MethodScope.referenceMethod(), if any of those should benefit from the same.

I found one more occurrence where this is relevant:

Constructor of LocalTypeBinding:
Currently a local class inside a lambda generates a bogus EnclosingMethod attribute, which in fact refers to the enclosing class.
Fixed by using the new MethodScope.getReferenceMethodBinding() also in this location

For one location I couldn't easily see what's needed:
HandleFactory.createElement(Scope, int, ICompilationUnit, HashSet, HashMap)

All other callers look good to me.

Running the tests on my patch now.
Fix for ReturnStatement (with similar fix in LocalTypeBinding) has been released via commit 7f980ceab757037c68fa499102c3002c2efaa926.

I still need to ponder on comment 9.
(In reply to comment #13)
> I still need to ponder on comment 9.

I moved that to a bug of its own (Bug 402028), at what point this bug is ready again for closing.
