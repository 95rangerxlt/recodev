When an annotation is repeated, it should be emitted as part of its container annotation.

When an annotation is repeated, it should be emitted as part of its container annotation.
I wonder if this task would be simplified a good bit if the abstract
Annotation class is changed to have:

        Annotation annotationToEmit = this;
	Annotation getAnnotationToEmit() {
		return this.annotationToEmit;
	}

and when we see a repeated annotation, fabricate a suitable container annotation
(ASTNode)  and make it the shared annotationToEmit for the repeating
annotations with each repeated annotation being accumulated in the value-pairs 
of the container.

Then at code generation time, emit code for the annotation that corresponds to getAnnotationToEmit() rather than for the annotation itself directly (making
sure not to emit the container multiple times)

Please feel free to ignore :) I didn't prototype this, so don't know how well
it would work in practice.
Created attachment 235833
A sketch

Couldn't resist prototyping :) This shows very early sketch of what it *could*
look like.

Note: I don't plan to continue with this, so the fun is all yours to have.
Take a look and see if you want to leverage some elements of the solution.
I am fine with any alternates you come up with.
While reviewing JSR308 APT work, it came up that we also need to think
about how to encode repeated annotations into compiler and DOM bindings. 

One option is to not do anything, i.e let them appear repeated in bindings. 

Code generation for annotations happens from the AST. So this is not an issue
anyway.

For APT TypeMirrors and Elements, we can present a different world view
all within APT.

Comments ?
(In reply to Srikanth Sankaran from comment #3)
> While reviewing JSR308 APT work, it came up that we also need to think
> about how to encode repeated annotations into compiler and DOM bindings. 
> 
> One option is to not do anything, i.e let them appear repeated in bindings. 

Should the DOM bindings not work the same between source and binary bindings? I that case, we should choose a method which works the same.

If I understand correctly, that *may* translate into checking each binary target's annotation for potentially being a container (an annotation type with a X[] value()) on a binary annotation target for a @Repeatable annotation on X, before determining whether to expand it into it's constituent repeated annotations.

> For APT TypeMirrors and Elements, we can present a different world view
> all within APT.
> 
> Comments ?

This may not be super-high priority, but to get it 'right' we should probably make the same extensions to the DOM API as they did in reflection and the Element API.

If it walks like a hack, and quacks like a hack, perhaps it is a hack...
(In reply to Jesper Moller from comment #4)

> If I understand correctly, that *may* translate into checking each binary
> target's annotation for potentially being a container (an annotation type
> with a X[] value()) on a binary annotation target for a @Repeatable
> annotation on X, before determining whether to expand it into it's
> constituent repeated annotations.

This may be an overkill, I am not sure DOM clients would care - We can present
a world view that is consistent with what is on the bindings which could be:

    - Repeated annotations on bindings that originate from source constructs.
    - The container on bindings that originate from binary constructs.
    - Document this as being the case.

Markus, we need UI team's opinion here. Do you have an example that shows
UI and other clients would care to see either repeated annotations or the
container annotation consistently ? Or that they need the ability to unwrap
the contained elements ? 

> This may not be super-high priority, but to get it 'right' we should
> probably make the same extensions to the DOM API as they did in reflection
> and the Element API.

That would be true, only if DOM/AST clients care/have a use for such 
facilities. The whole idea of a container is brought into the picture
because there could be clients for the annotation processing framework that
could be surprised/unprepared for repeated annotations. Because the
existing API (getAnnotation(Class<A>)) could return at most one annotation 
of a certain type. On the DOM API side, I don't think we have an API that 
has such limitations. IBinding.getAnnotations() is the only API that I see: 
this can return either repeated annotations or their container.

> If it walks like a hack, and quacks like a hack, perhaps it is a hack...

:)
I'm pretty close with the final patch for this, just getting the various corner-case tests in, and suppressing the duplicated errors from typechecking the container annotation in the presence of errors regarding the containing annotation, or rather, preventing such typechecking.

Will post tomorrow.
Created attachment 236424
A proposed solution

This is a proposed solution, based on the sketch. There are parts that I find less elegant, including the use of 'suppressed' annotations (i.e. all but the first repeated annotation) -- also the error suppression is not really elegant.

Improvements are welcome!
Thanks for the patch Jesper, I have been doing some black box testing
and things look OK, except for that repeated type annotations are
not packaged into containers. Don't worry I have this covered already

Totally fortuitously, the exiting code lends itself very well to the
code generator not choosing to emit an annotation at the last possible
moment, at the deepest leaf level method viz ClassFile#generateAnnotation.

In ClassFile.generateRuntimeTypeAnnotations: I was puzzled by this code:

if ((annotationContext.visibility & AnnotationContext.INVISIBLE) != 0) {
	int currentAnnotationOffset = this.contentsOffset;
        generateTypeAnnotation(annotationContext, currentAnnotationOffset);
	invisibleTypeAnnotationsCounter--;
	if (this.contentsOffset != currentAnnotationOffset) {
	    counter++;
	}
}

as to why this.contentsOffset would not change if we are emitting an
annotation just above.

Turns out this is just copy + paste + pound from generateRuntimeAnnotations().
generateAnnotation can return without anything if the annotation binding is
null - Curious that the code would resort to such checks and not instead
make generateAnnotation return true/false.

Anyways, not complaining about it ! This works perfectly for us and we
can check in the leaf routine if the annotation is packaged and emitted
already and just return.
(In reply to Jesper Moller from comment #7)
> Created attachment 236424 [details]
> A proposed solution
> 
> This is a proposed solution, based on the sketch. There are parts that I
> find less elegant, including the use of 'suppressed' annotations (i.e. all
> but the first repeated annotation) -- also the error suppression is not
> really elegant.
> 
> Improvements are welcome!

OK, Thanks for the patch, I cleaned it up a bit and released. Please take a 
look at http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3c8b95412c50bb73a8372fbf9db9df68231cc311.

I eliminated setContainer, getContainer, isSuppressed() et all in favor
of just getPersistibleAnnotation and setPersistibleAnnotation.

Also look at the creation of ProblemReferenceBindings to tag an error
scenario.

Type annotations support hooked in: New tests that several sites have been
added.

Package annotation tests enabled as a disassembler test here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=618a6ff3d34de5a5e41db8b1f1893c42061e44cd

I plan to follow up with another round of polish. In particular, I would
like to settle on this nomenclature:

    - Repeating annotation stands for annotation instance that repeats.
    - Repeatable annotation type stands for the declaration context.
      or when we have to refer to the type binding for the annotation type.    
    - Container annotation type -> type binding for the container.
    - Container - instance.

I already cleaned up things a bit, but there is more to do.

I also plan to inline some methods that in the final implementation
get called just from a single place.

Overall, terrific contribution and a big help, Thank You !
(In reply to Srikanth Sankaran from comment #9)
> (In reply to Jesper Moller from comment #7)
> > Improvements are welcome!
> 
> OK, Thanks for the patch, I cleaned it up a bit and released.

"A bit"? I do believe you are being modest here. :-)

> I eliminated setContainer, getContainer, isSuppressed() et all in favor
> of just getPersistibleAnnotation and setPersistibleAnnotation.

More elegant that way in Annotation, but the very big scope of 'annotation' in the emitting methods in ClassFile really irks me, perhaps a question of taste.

> Also look at the creation of ProblemReferenceBindings to tag an error
> scenario.

Clever.

> I plan to follow up with another round of polish. In particular, I would
> like to settle on this nomenclature:
[...]
>     - Container annotation type -> type binding for the container.
>     - Container - instance.

Shouldn't that be :
     - Container annotation type -> Containing annotation type binding.
     - Container - instance.
(In reply to Jesper Moller from comment #10)

> > I eliminated setContainer, getContainer, isSuppressed() et all in favor
> > of just getPersistibleAnnotation and setPersistibleAnnotation.
> 
> More elegant that way in Annotation, but the very big scope of 'annotation'
> in the emitting methods in ClassFile really irks me, perhaps a question of
> taste.

When you are talking about the "the very big scope of 'annotation'
in the emitting methods" are you talking about the new code or the 
existing/prior infrastructure that deals with annotation generation ?

For JEP120, we have added just 12 lines of code in ClassFile.java.
If you count the fact that I nuked 15 LOC by eliminating 
generateWildcardTypeAnnotation(), we accomplished code generation with
-3 LOC :)

Basically we ask an annotation: Hey annotation, what should I emit for
you in the class file and let it answer appropriately.

> > Also look at the creation of ProblemReferenceBindings to tag an error
> > scenario.
> 
> Clever.

Just using existing infrastructure, can't claim credit for it :)

> > I plan to follow up with another round of polish. In particular, I would
> > like to settle on this nomenclature:
> [...]
> >     - Container annotation type -> type binding for the container.
> >     - Container - instance.
> 
> Shouldn't that be :
>      - Container annotation type -> Containing annotation type binding.
>      - Container - instance.

Right. I made an attempt at harmonizing messages, variable names, method names
etc in:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=533660d1560f1a7aff4c5ccabdcd0cb35c0194c1 

This patch also includes some changes to eliminate needless hunting for
@Repeatable annotation.
(In reply to Srikanth Sankaran from comment #11)
> (In reply to Jesper Moller from comment #10)
> 
> > > I eliminated setContainer, getContainer, isSuppressed() et all in favor
> > > of just getPersistibleAnnotation and setPersistibleAnnotation.
> > 
> > More elegant that way in Annotation, but the very big scope of 'annotation'
> > in the emitting methods in ClassFile really irks me, perhaps a question of
> > taste.
> 
> When you are talking about the "the very big scope of 'annotation'
> in the emitting methods" are you talking about the new code or the 
> existing/prior infrastructure that deals with annotation generation ?

No, I mean the 'annotation' local inside ClassFile.generateRuntimeAnnotations, which is re-used in each loop, where I'd usually prefer to have it isolated to each loop, as an effectively final local variable (shorter scope -> less risk of bad re-use). More lines of non-liveness for an in-scope variable strains the next reader of the code.

But, it would cost one extra line in each loop, turning

if ((annotation = annotations[i].getPersistibleAnnotation()) == null) continue; 

into 

Annotation annotation = annotations[i].getPersistibleAnnotation();
if (annotation == null) continue;

So, it really is just nitpicking.
(In reply to Jesper Moller from comment #12)
> No, I mean the 'annotation' local inside
> ClassFile.generateRuntimeAnnotations, which is re-used in each loop, where
> I'd usually prefer to have it isolated to each loop, as an effectively final
> local variable (shorter scope -> less risk of bad re-use). More lines of
> non-liveness for an in-scope variable strains the next reader of the code.

OK, I understand now. I don't quite recall how I ended up hoisting the local
from the loops into method prologue. It is harmless, but I agree the scope
needless spans a larger portion of code than in needs to. Fixed here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=d469b28de67962080fcf567963cfa5517cd349da

Thanks
