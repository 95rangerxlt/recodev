20030506

i have this:
class A{
   public A(int foo, boolean bar){
   }
}

i'd like something to take me from here to:
class A{
   private final fFoo;

   public A(int foo, boolean bar){
   }
}

20030506

i have this:
class A{
   public A(int foo, boolean bar){
   }
}

i'd like something to take me from here to:
class A{
   private final fFoo;

   public A(int foo, boolean bar){
   }
}
arrgh! BUGZILLA!

the desired state is:

class A{
   private final int fFoo;
   private final boolean fBar;
   public A(int foo, boolean bar){
      fFoo= foo;
      fBar= bar;
   }
}

but nothing in jdt ui assists me here
:-(
Another subtle additional feature (this might be more Refactor releated), but to 
allow the user to create a constructor that initializes a set of known 
properties.  Perhaps a dialog like the getter/setter creator, which allows the 
user to choose which properties should be initialised for this new constructor.

This already exists in 3.0 M3... see Generate Constructor using Fields action.
Geez, and I'm already using M3, I must be blind.   Thx heaps. All hail Eclipse.
Eclispe 3.0 JDT Quick Fix to create fields based on CTOR params:

Why are the generated fields final? What if the class will have a setter for 
the field? This should be preference or should be configurable through a 
preview dialog.
There was a feature request to have such fields final. I think the 'final' is 
a good option as we also offer you to remove the final again when you assign 
the variable the first time.

Closing this bug report. 3.0 has a quick assist 'assign parameter to new 
field' (set the cursor on a parameter) solving the problem as stated by Adam.
Granted that it is not a big deal to locate and delete the final keyword, I 
just wanted to make a few points:

1. Not everyone in the team may be using Eclipse (hard to believe but true :()
2. Some of the JDK1.1 compilers complain about such construct. To address that 
generation of final keyword could have been controlled by compilers compliance 
settings(?)
