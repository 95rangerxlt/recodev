The UnaryExpression, in contrast to the BinaryExpression, doesn't store the computed expression type in the bit mask.

The following line seems to be missing

		int result = ResolveTypeTables[tableId][(expressionId << 4) + expressionId];
		expression.implicitConversion = result >>> 12;
		TypeBinding type;
		bits |= result & 0xF;																												<==== missing statement.
		switch (result & 0x0000F) { // only switch on possible result type.....



NOTES:

The UnaryExpression, in contrast to the BinaryExpression, doesn't store the computed expression type in the bit mask.

The following line seems to be missing

		int result = ResolveTypeTables[tableId][(expressionId << 4) + expressionId];
		expression.implicitConversion = result >>> 12;
		TypeBinding type;
		bits |= result & 0xF;																												<==== missing statement.
		switch (result & 0x0000F) { // only switch on possible result type.....



NOTES:
Fixed in 204
PRODUCT VERSION:
203


