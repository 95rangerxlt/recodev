fup of bug 48399.

Added a new compiler warning to signal presence of dead code, e.g. if (false) deadCode(); . This diagnosis is controlled by option: JavaCore.COMPILER_PB_DEAD_CODE and produces a problem marker which ID is IProblem.DeadCode problem ID.

* Compiler option ID: Reporting Dead Code.
* When enabled, the compiler will issue an error or a warning if some non fatal dead code is detected. For instance, if (false) foo();
* is not reported as truly unreachable code by the Java Language Specification. If this diagnostic is enabled, then the invocation of foo() is
* going to be signaled as being dead code.
* Option id:"org.eclipse.jdt.core.compiler.problem.deadCode"
* Possible values:{ "error", "warning", "ignore" }
* Default:"ignore"


Note: it got categorized as CAT_POTENTIAL_PROGRAMMING_PROBLEM, since it may be more evil than just unused code...

fup of bug 48399.

Added a new compiler warning to signal presence of dead code, e.g. if (false) deadCode(); . This diagnosis is controlled by option: JavaCore.COMPILER_PB_DEAD_CODE and produces a problem marker which ID is IProblem.DeadCode problem ID.

* Compiler option ID: Reporting Dead Code.
* When enabled, the compiler will issue an error or a warning if some non fatal dead code is detected. For instance, if (false) foo();
* is not reported as truly unreachable code by the Java Language Specification. If this diagnostic is enabled, then the invocation of foo() is
* going to be signaled as being dead code.
* Option id:"org.eclipse.jdt.core.compiler.problem.deadCode"
* Possible values:{ "error", "warning", "ignore" }
* Default:"ignore"


Note: it got categorized as CAT_POTENTIAL_PROGRAMMING_PROBLEM, since it may be more evil than just unused code...
Added option to preference page.
Also added quick fix and fixed fix for unreachable code, e.g. 'while (false) ..'.
