3.3 M6
In an effort to reduce the number of toolbar items to allow space for other
plugins:

We should consider removing "Create New Java Project" as being present by default in the toolbar.

Generally speaking, toolbar items should be used to represent frequently accessed items (e.g. see MS Vista guidelines).  Creation of Java projects is not a frequent task, because project creation is inherently infrequent as they are long lived, second because in Eclipse people tend to create them via PDE and lastly via download from say CVS.

3.3 M6
In an effort to reduce the number of toolbar items to allow space for other
plugins:

We should consider removing "Create New Java Project" as being present by default in the toolbar.

Generally speaking, toolbar items should be used to represent frequently accessed items (e.g. see MS Vista guidelines).  Creation of Java projects is not a frequent task, because project creation is inherently infrequent as they are long lived, second because in Eclipse people tend to create them via PDE and lastly via download from say CVS.
I use this button a lot. Mostly for creating test projects.

I also believe that it is a must for the Java perspective to contain this button. It is the starting point for newcomers.



>>I use this button a lot. Mostly for creating test projects.

Well then *you* can enable it optionally.  This is about common usage.

>>I also believe that it is a must for the Java perspective to contain this
>>button. It is the starting point for newcomers.

I understand this argument and figured it was the rational for the tool's presence.  But this doesn't fit generally accepted guidelines.

If you look at for example the Vista guidelines, http://msdn2.microsoft.com/en-us/library/aa511500.aspx

"Are there a small number of frequently used commands? Toolbars can't handle as many commands as menu bars, so they work best as a way to efficiently access a small number of frequently used commands."

"Frequency. Toolbars present only the most frequently used commands, whereas menu bars catalog all the available top-level commands within a program."

"Number and density. The screen space required by a toolbar is proportional to the number of its commands and that space is always used, even if the commands are not. Consequently, toolbars must use their space efficiently."

"If you do only one thing...
Make sure your toolbars are designed primarily for efficiency. Focus toolbars on commands that are frequently used, immediate, direct, and quickly recognizable."

So new user guidance is *not* a generally accepted criteria. The issue we are facing is that with only the Base + JDT UI we are already taking up half the toolbar. We really need to be more frugal with our toolbar space usage to allow space for the many many products and components that get layered on top.  For example, a full Europa build takes up two lines of toolbars.
By way of CC of Erich and Julian, we've been discussing use of toolbar space in general and I thought this was an interesting case worth discussing. It would be good to come up with a consistent set of criteria for when an action warrants a toolbar item by default.  I recognize though that we're so used to seeing the New Java Project icon that perhaps its contentious to suggest removing it.

While I really feel for the "new user introduction" case, most users aren't new. In retrospect we've been using toolbars incorrectly to address this problem.  We do have a pretty good welcome experience, which we didn't initially, so perhaps that's enough.  Finally, there is the problem of the SDK leading by example when it comes to good UI guideline/consistency practice.
With respect to new users, it occurs to me that we already do a good job for new users because the New Class/Interface control will offer to create a Java project for you if you don't have one (which would seem to be the case we care about).

This is actually a much nicer new user support, because new users typically don't understand projects and why they need one, and certainly don't think to create them first.  If the user is more advanced then that, then we have the general "New" tool which is where people often go to learn what they can make.
We had some more discussions here and agree that the points brought up make sense. I'm ready to remove the 'new project wizard' from the tool bar, but we need to offer good alternatives

- There's currently no other quick way of opening the new Java wizard. The next best way is: 'New' button, 'Projects...', 'Select Java project' 'Next'. 4 clicks.
  Suggestion a.) what about making 'Projects...' a sub-menu that contains the perspective's favorites (Java project, Plug-in project...) and the existing 'Projects...' that brings up a wizard?
  Suggestion b.) similar to the Java types button, we make the 'New Java project' tool bar button a drop down and add 'New Java project' 'New Plug-in Project...' ect. The default activation would be 'New Java project'

- You wrote "Well then *you* can enable it optionally.". That's not so easy, the 'Configure Perspective' configuration page only has the granularity of an action set. So that would mean we would create a new action set for the 'New Project wizard' with the drawback of adding another group to the toolbar (additional vertical separator). It would also add a new category on the crowded 'Configure Perspective' page.
Can't the 'Configure Perspective' configuration page allow a per item configuration? 

- How sure are we that the new Java project wizard isn't used often? As said, I use it quite often. My unused tool bar buttons are 'Save', 'Print' and 'Mark Occurrences'. 
This is my current standing on this issue:

This is a late change that might provoke user protests.
As always, we should be prepared to offer alternatives and provide ways to restore the old behavior:
  a. provide an alternative action that is easy to find. The current 4 click solution is not acceptable
  b. improve the way how the toolbar can be configured
     - enable/disable single toolbar items (not just by action set)
     - enable/disable toolbar items independent from menus
       (currently disabling a action set removes toolbar buttons and menus) 
    - Add a context menu to the toolbar with a 'Configure...' action.
      The current way: Window > Customize Perspective > Commands.. is not intuitive

> unless Platform has a solution to a. and b. no changes planed for 3.3
These are good points.  

For (a), what if we had Java Project in the drop down list for "New" for Java Perspective?  Might be odd to have Project then Java Project after each other, but on the other hand nice to have all the Java items together.  Some people use the New to discover the kinds of things they can make so in this sense nice to have them together.  Would look like:

Project...
---------
Java Project
Class
Interface

As for (b), its clear our story here is weak.  We have a few Action Groups that have only a single element so clearly we've looking for a finer grain configuraiton option.  That said, its not going to happen in 3.3.  

I am fine with us leaving New Java Project as a toolbar item. It was a good discussion and at least I think we have some clearer notions of when we need a toolbar item.
From what I understood, the design idea of the 'New' menu was to have the 'Project...' entry for all projects and use the other list only for non-project wizards.
I think this separation makes sense and my suggestion to solve that would be suggestion a.) from comment 5. (Turn 'Project...' into a submenu). I filed bug 182716 for this ('Improve 'New' menu for projects')

For the toolbar I filed bug 182714 ('Improve toolbar configurability')

Moving to 'later'
sorry, I really meant later.
Set target to 3.5. We can't remove anything unless users have the possibility to add it again (Improve toolbar configurability, bug 182716)
Paul, does the new configurable toolbar support allow to specify the initial state or is this only possible via UI?
(In reply to comment #12)
> Paul, does the new configurable toolbar support allow to specify the initial
> state or is this only possible via UI?

For M4 I believe it is only configurable after the fact using the UI (Configure Perspective Dialog), and initial state is still only configurable with the old extensions (like actionSets).  I know that Eric had wanted to make it driven by the same kind of interface programmatically as through the CPD, but I'm not sure where he is on that (not for M4 I'm sure).

PW

Final call on this to be made in 3.6 M1.
>Final call on this to be made in 3.6 M1.
Done: we'll remove it in a way that users can bring it back. In addition we'll add it to the the File > New short list.

This will be done at the beginning of M2.
Fixed in HEAD.
Available in M2 builds >= N20090807-2000.

