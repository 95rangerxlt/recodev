BETA_JAVA8:

A number of changes are being made to overload resolution mechanism
to accommodate poly expressions in method invocation context.

ECJ needs to evolve to address this scenario, which creates some interesting
problems: When a lambda expression occurs in method invocation context as
an argument, the type of the lambda expression cannot be determined until
the overloaded method is chosen and the overloaded method cannot be chosen
until the lambda expression's type is known.

JLS8 15.12.2 (part F of JSR335 specification) spells out the amended 
overload resolution rules to address this and other scenarios.

BETA_JAVA8:

A number of changes are being made to overload resolution mechanism
to accommodate poly expressions in method invocation context.

ECJ needs to evolve to address this scenario, which creates some interesting
problems: When a lambda expression occurs in method invocation context as
an argument, the type of the lambda expression cannot be determined until
the overloaded method is chosen and the overloaded method cannot be chosen
until the lambda expression's type is known.

JLS8 15.12.2 (part F of JSR335 specification) spells out the amended 
overload resolution rules to address this and other scenarios.
I'll work on this one.
Released one batch of changes for overload resolution support here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=719705b20dc5e72fab3b2b50b669f9dfc58049aa

Still some ways to go to wrapping this up - hopefully end of this week should 
see this resolved.

Stephan, note the addition of Expression.isPertinentToApplicability().
This is still evolving. I hope to have the API fully in place by tommorrow
(as well as the Expression.isExactMethodTReference piece)
More progress here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3aabc067e22084d59ef0ea59b0d58e1085dede4c.

I updated the signature of TypeBinding.isFunctionalInterface to include scope
so it is properly placed in the hierarchy.
Overload resolution support for constructor reference and array constructor reference expressions released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=b7295bb19a68269f09e5fdceeecf4f4c701e7063
Overload resolution support with Method references as arguments released here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=62ced9026f30eddc79c6a97850b3155aea91f5e5
(In reply to Srikanth Sankaran from comment #5)
> Overload resolution support with Method references as arguments released

Several more tests for this functionality are here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=003491686c72056382b17a1410bd6c4b2d79bf5e
I am ready to resolve this - we still have open item: bug 421922, but the
umbrella bug for the overload resolution effort has served its purpose. Any
future issues can be given their own home.
