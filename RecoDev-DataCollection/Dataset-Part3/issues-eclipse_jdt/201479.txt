When parent files are changed such that non-source generated files are no longer generated, a NegativeArraySizeException is thrown from the Java Builder.

The test that currently tests this, apt.tests.FileGenerationTests.testTextGen, is defective: it calls fullBuild() rather than incrementalBuild(), clearing the state of the file system before the Builder has anything to do and therefore preventing the failure.  This is true of many other tests in our suite too, and should probably be looked into.

In this case, the problem is that when the GeneratedFileManager calculates what files to delete at the end of a build, and reports those files back to JDT Core, it is reporting all the files it deleted rather than just those files that JDT actually compiled.  That causes JDT to try to delete .class files for .java files that don't exist, and it fails.  The correct fix is probably to track non-source files separately from source files, and not report them to JDT at all.

This is a fairly serious failure, and should be fixed in 3.3.x as well as in HEAD.

Here's the stack trace of the failure that occurs when fullBuild() is changed to incrementalBuild() in testTextGen:

org.eclipse.core.runtime.AssertionFailedException: assertion failed: Core exception in testing environment: Errors running builder 'Java Builder' on project 'org.eclipse.jdt.apt.tests.FileGenerationTestsProject'.
java.lang.NegativeArraySizeException encountered while running Java Builder.

	at org.eclipse.core.runtime.Assert.isTrue(Assert.java:109)
	at org.eclipse.jdt.core.tests.builder.TestingEnvironment.handleCoreException(TestingEnvironment.java:714)
	at org.eclipse.jdt.core.tests.builder.TestingEnvironment.handle(TestingEnvironment.java:687)
	at org.eclipse.jdt.core.tests.builder.TestingEnvironment.incrementalBuild(TestingEnvironment.java:739)
	at org.eclipse.jdt.core.tests.builder.BuilderTests.incrementalBuild(BuilderTests.java:400)
	at org.eclipse.jdt.apt.tests.FileGenerationTests.testTextFileGen(FileGenerationTests.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:58)
	at org.eclipse.pde.internal.junit.runtime.CoreTestApplication.run(CoreTestApplication.java:24)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethod(EclipseAppContainer.java:533)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:155)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:106)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:76)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:363)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:176)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:504)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:443)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1169)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1144)

When parent files are changed such that non-source generated files are no longer generated, a NegativeArraySizeException is thrown from the Java Builder.

The test that currently tests this, apt.tests.FileGenerationTests.testTextGen, is defective: it calls fullBuild() rather than incrementalBuild(), clearing the state of the file system before the Builder has anything to do and therefore preventing the failure.  This is true of many other tests in our suite too, and should probably be looked into.

In this case, the problem is that when the GeneratedFileManager calculates what files to delete at the end of a build, and reports those files back to JDT Core, it is reporting all the files it deleted rather than just those files that JDT actually compiled.  That causes JDT to try to delete .class files for .java files that don't exist, and it fails.  The correct fix is probably to track non-source files separately from source files, and not report them to JDT at all.

This is a fairly serious failure, and should be fixed in 3.3.x as well as in HEAD.

Here's the stack trace of the failure that occurs when fullBuild() is changed to incrementalBuild() in testTextGen:

org.eclipse.core.runtime.AssertionFailedException: assertion failed: Core exception in testing environment: Errors running builder 'Java Builder' on project 'org.eclipse.jdt.apt.tests.FileGenerationTestsProject'.
java.lang.NegativeArraySizeException encountered while running Java Builder.

	at org.eclipse.core.runtime.Assert.isTrue(Assert.java:109)
	at org.eclipse.jdt.core.tests.builder.TestingEnvironment.handleCoreException(TestingEnvironment.java:714)
	at org.eclipse.jdt.core.tests.builder.TestingEnvironment.handle(TestingEnvironment.java:687)
	at org.eclipse.jdt.core.tests.builder.TestingEnvironment.incrementalBuild(TestingEnvironment.java:739)
	at org.eclipse.jdt.core.tests.builder.BuilderTests.incrementalBuild(BuilderTests.java:400)
	at org.eclipse.jdt.apt.tests.FileGenerationTests.testTextFileGen(FileGenerationTests.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:58)
	at org.eclipse.pde.internal.junit.runtime.CoreTestApplication.run(CoreTestApplication.java:24)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethod(EclipseAppContainer.java:533)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:155)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:106)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:76)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:363)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:176)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:504)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:443)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1169)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1144)
Created attachment 77180
test case

Patch for test case, that causes this bug to manifest.
Created attachment 77190
proposed patch

Proposed patch adds a _nonSourceFiles set to GeneratedFileManager.  When computing obsolete files, we now return a "toReport" list as well as the list of files to be physically deleted.  The toReport list only includes source files, not non-source files.  With this patch, the test case (as well as all other APT tests) passes.
The proposed patch fails to handle serialization of the dependency state.  A replacement which does is just about ready.
Created attachment 77348
proposed patch

Proposed patch including serialization of build state.  With this patch, it is possible to generate a text file; exit the workspace; restart the workspace; delete the annotation that caused the text file to be generated; rebuild; and have the file be properly deleted as expected.

This patch also changes the severity of the "couldn't (de)serialize build dependencies" error to be a warning, rather than an error.  This reflects that fact that the only consequence is that no-longer-generated files may not be deleted until the next clean.
Created attachment 77349
proposed patch

Like the previous one, but also fixes a comment.
Jess, please review for inclusion in 3.3.1 and HEAD.
+1
Released proposed patch #3, and test case, to HEAD and 3.3.1.
