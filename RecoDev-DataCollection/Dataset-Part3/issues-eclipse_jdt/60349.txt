 

 
Created attachment 10092
Patch to reduce deprecation warnings

The attached patch eliminates most of the warnings due to recent deprecations
in core runtime.
Note for post 3.0: The patch does not remove all dependence on 
org.eclipse.core.runtime.compatibility. The one snag was that one class 
JavaEditor in org.eclipse.jdt.ui plug-in accesses the JFace Preferences of the 
org.eclipse.ui.editors plug-in. It does this via
   Platform.getPlugin(EditorsUI.PLUGIN_ID).getPluginPreferences();

This access pattern relies on Platform.getPlugin(String) which only works if 
org.eclipse.core.runtime.compatibility is present. Once this reference is 
eliminated, the only other changes required to cut dependence on core runtime 
compatibility are:
(1) change JavaPlugin.JavaPlugin(IPluginDescriptor) to JavaPlugin.JavaPlugin()
(2) change <import plugin="org.eclipse.core.runtime.compatibility"/>
to <import plugin="org.eclipse.core.runtime"/>

To be clear, the patch should be applied as soon as possible (before it gets 
stale).
Released the patch. Moving to JDT/Text to consider comment #2
re: comment2: What is the recommended way from Platform Core to fix this?

The recommended solution is situational.  In essence the plugin hosting the 
prefrences is declariing API saying "I have prefernces and you can get them".  
You should decide the appropriate way for your case.  Your generic choices are:
- make the plugin object public (eg.. MyPlugin.getPlugin())
- make the prefs public (e.g., someAPIObject.getPreferneces())

Then clients of this API get updated to use the API.



If EditorsPlugin were API, you would replace 
   Platform.getPlugin(EditorsUI.PLUGIN_ID).getPluginPreferences()
with 
   EditorsPlugin.getDefault().getPluginPreferences()

Since EditorsPlugin is not an API class, and probably doesn't want to expose 
it to the world, I suggest adding a method to EdistorsUI, which is API:
/**
 * Returns the preferences of this plug-in.
 * 
 * @return the preferences
 */
public static org.eclipse.core.runtime.Preferences getPluginPreferences() {
	return EditorsPlugin.getDefault().getPluginPreferences();
}

If you are after real runtime based preferences then there is likely a way to 
do this using the new Preferences API.  Adding DJ to the party to comment.

The need to expose the Plugin object wrt preferences typically only arises when 
dealing with the JFace preferences which do not have an alternate access path.
I agree with what is being said above. If a plug-in is publishing preference
keys as API, then their plug-in class should be made available as API so people
can access these values.

There are a few cases (because of refactoring in RCP land) where some plug-ins
have to look up preferences for a plug-in which they don't have a "plugin.xml
requirement" on. The org.eclipse.ui.workbench and org.eclipse.ui plug-ins are
one example of this...some prefs in the ui plug-in were made API but now they
are needed in the ui.workbench plug-in even though it doesn't have it in its
list of dependancies.

What is the situation for JDT/Text? Are you accessing prefs which are API?
Yes, see comment 2.

Platform Text defines lots of API constants to read preferences values. It is up
to clients (e.g. JDT or Ant) to read these values from any given store (e.g. if
Ant editor wants to use the editor settings from JDT it simply reads them there
via official 2.x API:

Platform.getPlugin(<here comes the ID from plug-in XML>).getPluginPreferences()
This has been fixed.

