Step to reproduce
 1) create class X
   --------------
   public class X {
      void foo(){
        String x = "";
        x.index<cursor>/**/
      }
   }
 2) do ctrl + space at cursor location
 
 there is no proposition.

Step to reproduce
 1) create class X
   --------------
   public class X {
      void foo(){
        String x = "";
        x.index<cursor>/**/
      }
   }
 2) do ctrl + space at cursor location
 
 there is no proposition.
pls fix if this is a trivial partitioning fix.
otherwise leave as is.
*** Bug 10457 has been marked as a duplicate of this bug. ***
No action for 2.0
Could we have this one addressed for 3.0 ? This is something we hit from times 
to times...
A real usecase scenario is one where you perform some invocation with primitive 
types (e.g. boolean) and you want to add a comment to indicate what this value 
is meant to represent,

foo(this.<CODEASSIST>/*isEnabled*/);
We'll check for 3.0 what we can do.

We could combine this with the zero-length partition work. In this context, 
we'd have to introduce a distinction beween delimited and open partitions. 
E.g., Javadoc is surrounded by delimiters and thus left and right of it we 
could invoke the content assist of the neighboring partition. Thus, between 
two Javadoc comments with no gap inbetween, there would be a zero-length code 
partition. Taking this approach partitions would get closer to grammar. We'd 
need to check what this means for the rest of our framework.
fixed by fixing bug 49264. Fixed > 20040414.
