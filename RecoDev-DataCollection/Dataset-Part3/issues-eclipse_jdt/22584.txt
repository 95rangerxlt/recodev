Release 2.0. Set "Link Java Browsing Views selection to active editor" in Java
preferences. Set up a perspective with Projects, Packages, Types and Navigator
views showing and open a Java source file in an editor. Next, open a non-Java
file in Navigator. Packages and Types view lose their inputs and display nothing.

This behavior is unexpected and makes the user lose context (at least, I do).
Browsing views should only track editors they can understand (compilation unit
and class file) and do nothing for others.

Release 2.0. Set "Link Java Browsing Views selection to active editor" in Java
preferences. Set up a perspective with Projects, Packages, Types and Navigator
views showing and open a Java source file in an editor. Next, open a non-Java
file in Navigator. Packages and Types view lose their inputs and display nothing.

This behavior is unexpected and makes the user lose context (at least, I do).
Browsing views should only track editors they can understand (compilation unit
and class file) and do nothing for others.
Are you sure it's the editor linking? When I open a CU and a properties file and
then switch between them it's ok. I see the behavior when opening or selecting a
non Java resource in the Navigator or Package Explorer.

I guess it depends how you use the view: the goal was that the browsing views
can also be used independent of each other (i.e. you can customize your
perspective with the views you like most) and hence set their input (or
selection) according to the currently selected element. In that sense the
browsing views would show "old" stuff when a non Java resource is selected.

I do use browsing views in my own perspective and I do expect them to preserve
the old stuff. But I will *always* lose the Packages view contents (without
regards to active working sets and the link preference) when I open a properties
file from Navigator or Package Explorer. 

Switching between them afterwards works fine, though once the input is lost
Packages view will use the source folder for the Java class next time I switch
to it rather than the current selection in Packages Explorer. I use projects and
working sets rather than source folders to limit the browsing view contents so I
will need to click on the project to set the input of the browsing views after
it changes to a source folder. That makes me wish for a way to lock the input of
the browsing views, similar to what Type Hierarchy method pane has.

Still, that would be fixing the symptom (though it sound like a good idea by
itself). The main problem is that the views lose their inputs when opening (but
not switching to) non-Java files.
Fixed the views to follow non-Java resources i.e. it will try to select the
folder. This means if your non-Java file is in the same folder/package as the
previous CU then it will not flush the Packages view. If it is in another
package then the Packages view will adapt to that change.

Available in 2.1 builds > 20020830

From what I understand of your description, I'm not sure if the fix solves the
original problem. You usually don't have your non-Java file in the same
package/folder with the previous CU unless it's the package.html file or a
resource file that has to be in the class path. 

I think any Java views that are supposed to display only Java model elements and
nothing else (these are the browsing views) should ignore all editor changes for
files not related to the Java model. Does this make sense? 
It's fixed in the sense that it does no longer show nothing. You now know where
your context is. Instead of being empty the Packages view will show all
packages. of the project in which you currently edit a resource.

>I think any Java views that are supposed to display only Java model elements and
>nothing else (these are the browsing views) should ignore all editor changes for
>files not related to the Java model. Does this make sense? 
Yes it does. But the current approach also makes sense, doesn't it? If you are
in project Y and then edit a resource in project X it is nice that the views
switch to the new context. The primary design behind the browsing views is to be
fed by selection. If you need a view which behaves different i.e. which is only
fed if the selection is a Java element then you need to implement your own view.

Since milestones are now available, changing milestone from "2.1" to "2.1 M1".
