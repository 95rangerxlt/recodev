Allow the Externalize Strings action to update properties from an existing 
properties file as well as maintain current behavior.

Allow the Externalize Strings action to update properties from an existing 
properties file as well as maintain current behavior.
Created attachment 5824
proposed enhancements.

First shot at this. Please have a look.

Issues:
- If the NLS is already marked as don't translate, we shouldnt mark it again as
dont translate.
- Doesn't "internalize"/remove NLS from properties file yet
- Still just does a normal append to the properties file for new NLS instead of
putting them in well-guessed location.
- NLSRefacotring.compareResourceGetter may be bogusly parsing the method
invocation string since it's looking for first instance of "("
- Current strings which have been set don't add a //$NON-NLS-1$ to the .java
file, since its assumed it exists. We may have to search through to see if it
exists instead.
- Checking for duplicate keys has been removed.
- Coloring the background for TableItems in the tableviewer which are existing
NLS is not implemented. A good suggestion on how to do something like this is
needed.
I'd suggest to not yet release this patch. There are some bugs that make the
wiard hard to use:

- I would leave a way the checkbox 'Display existing NLS'. All strings should be
shown
- We need a better visual indication of the 3 cases
  'translated', 'no-tanslation' 'new string'
Maybe these cases should be separated in different tables or we go to a table tree.
The current 3 images are not helpful

- Change the value of a (already) translated string, (e.g. 'About' to 'About1'),
go to the preview page and look at the changes for the property file: The edit
description is: "add entry for xy". It should be 'change value for xy'

- There are unnecessary entries for non changed strings on the preview page

- The configuration controls for the package, property file name and Message
class should be before the strings table. This is because the table is dependend
on these settings. 


- Right, this is not ready for release, just needed some eyes on it to check 
progress. 

- I disagree with not having a way to remove strings already set. There could 
be 300 properties already in a properties file and only 2 in the file that 
haven't been set yet. Without the ability to filter the 300 from the 
properties file, the dialog will annoy those who just want to externalize 
strings and not work with existing ones.

- The wizard is already too cluttered. In fact, its too tall to fit on a 
screen smaller than about 800 pixels. We need to remove the visual markers to 
reclaim some space in the wizard. I tried a combo in the table and I really 
didn't like the way it looked. Having a table for each case will just add 
space to the dialog. If we use a TableTreeViewer instead, I'm not sure that 
gives us anything different from what we already have. We still need a 
mechanism for choosing the functionality desired of the wizard for a given 
string.

- The entries for the unchanged strings exist b/c they are currently being 
overwritten to be the same exact thing. The compare viewer finds no difference 
b/t them however. Will fix this.
*** Bug 41847 has been marked as a duplicate of this bug. ***
Created attachment 5831
proposed enhancements.

New patch showing progress, probably not ready for release. Please comment:

+ Addresses bug 41847: removing code templates from method bodies and setting
up a default javadoc comment.
+ colors backgrouns in table for table items already existing in a properties
file.
+ moves widgets for code pattern and new class creation to the top of the
wizard page.
+ removes addition of phantom code changes for refactoring
+ changes multiple label descriptions in the wizard and the refactoring
- editor does not update properly after completing refactoring. I get red
underlines on failure to resolve newly created Messages class.
Created attachment 5847
proposed enhancements.

- New problem on the refactoring screen with line delimeters in the properties
file. The properties file that gets created with the new NLS looks ok, however
the refactoring view with the change displays them all on a single line
+ Fixes updating of the model when a new package or a new properties file is
chosen. So if you browse to a new properties file, the existing NLS keys get
updated; however any modifications made in the table to the key/value are lost
at the update since the model is recreated.
- The browse button at the top of the dialog for the import declaration is
grabbing horizontally but it shouldn't be.
- The dialog still may be too tall. Need suggestions on shrinking.
Martin, I think this is fixed now, right?
yes, new NLS wizard in M9
