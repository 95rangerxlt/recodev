+++ This bug was initially created as a clone of Bug #131348 +++

I20060307-1315

**** NEW ERROR in 3.3 ****

Attempting the action described below in the latest 3.3 release causes an unspecified Error (I can't find the Error view anymore in 3.3?)

I'm using the Java developer distribution.

**************************


Start with these two CUs:

public interface I {
}
public class C implements I {
	boolean value;
}

Select the "value" field, and run the "Pull Up" refactoring.  Select "I" as the destination of the refactoring.  No warnings are presented, but of course a non-final field doesn't make sense in an interface.  After the refactoring there is a compile error in "I".  The refactoring shouldn't allow  non-final fields to be pulled up (or at least warn against it).

+++ This bug was initially created as a clone of Bug #131348 +++

I20060307-1315

**** NEW ERROR in 3.3 ****

Attempting the action described below in the latest 3.3 release causes an unspecified Error (I can't find the Error view anymore in 3.3?)

I'm using the Java developer distribution.

**************************


Start with these two CUs:

public interface I {
}
public class C implements I {
	boolean value;
}

Select the "value" field, and run the "Pull Up" refactoring.  Select "I" as the destination of the refactoring.  No warnings are presented, but of course a non-final field doesn't make sense in an interface.  After the refactoring there is a compile error in "I".  The refactoring shouldn't allow  non-final fields to be pulled up (or at least warn against it).

Clarification - in 3.3, the behavior I'm observing is an Error caused by a *valid* refactoring of a "public static final short CONST = 0;" from a class to an interface - not a post-refactoring build error of a pull up of an ineligible field.
bug 196635 probably prevented the warning
In > 20070717 you see the waring which tells you that moving a non static final field to an interface will introduce a compile error.
