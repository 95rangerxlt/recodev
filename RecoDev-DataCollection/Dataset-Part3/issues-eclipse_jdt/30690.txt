Using "Convert Local Variable to Field" on fInt1:
(refactoring parameters are: private, current method)

public class Test {
	
	private int fInt0;
	
	/*
	 * Test comment
	 */
	public void test0() {}
	
	public void test1() {
		int fInt1= 0;
	}
	
}

results in:

public class Test {
	
	private int fInt0;
	
	/*
	 * Test comment
	 */
	private int fInt1;

	public void test0() {}
	
	public void test1() {
		fInt1 = 0;
	}
	
}

Using "Convert Local Variable to Field" on fInt1:
(refactoring parameters are: private, current method)

public class Test {
	
	private int fInt0;
	
	/*
	 * Test comment
	 */
	public void test0() {}
	
	public void test1() {
		int fInt1= 0;
	}
	
}

results in:

public class Test {
	
	private int fInt0;
	
	/*
	 * Test comment
	 */
	private int fInt1;

	public void test0() {}
	
	public void test1() {
		fInt1 = 0;
	}
	
}
must be ast rewrite problem
(it seems to not be able to handle non-javadoc comments correctly)
The problem is that non Java doc comments in front of a member don't belong to 
the member from a language point of view (in contrast to Javadoc comments).

Martin, is there something we can do ? For example using to insert something 
after instead of before a member
fixed > 20030213

The astrwriter have been updated to evaluate member start positions itself. All 
comments are assigned to a member if they preceed the member without an empty 
line in between.

The logiv for this is in a new class TokenScanner.getTokenCommentStart which 
might be helpful in other cases as well.
