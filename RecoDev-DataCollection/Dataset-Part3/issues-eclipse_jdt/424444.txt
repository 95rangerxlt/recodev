This program, when run, produces a VerifyError:

interface Functional<T> {
    T foo(int size);
}
public class X  {
    public static void main(String argv[]) {
    	Functional<int[]> constr = int[]::new; 
    } 
}


Exception in thread "main" java.lang.VerifyError: Bad return type
Exception Details:
  Location:
    javasoft/sqe/tests/lang/lmbd044/lmbd04401m0/X.lambda$0(I)[I @4: areturn
  Reason:
    Type '[LI;' (current frame, stack[0]) is not assignable to '[I' (from method signature)
  Current Frame:
    bci: @4
    flags: { }
    locals: { integer }
    stack: { '[LI;' }
  Bytecode:
    0000000: 1abd 001c b0

This program, when run, produces a VerifyError:

interface Functional<T> {
    T foo(int size);
}
public class X  {
    public static void main(String argv[]) {
    	Functional<int[]> constr = int[]::new; 
    } 
}


Exception in thread "main" java.lang.VerifyError: Bad return type
Exception Details:
  Location:
    javasoft/sqe/tests/lang/lmbd044/lmbd04401m0/X.lambda$0(I)[I @4: areturn
  Reason:
    Type '[LI;' (current frame, stack[0]) is not assignable to '[I' (from method signature)
  Current Frame:
    bci: @4
    flags: { }
    locals: { integer }
    stack: { '[LI;' }
  Bytecode:
    0000000: 1abd 001c b0
I have a patch under test. Amazingly we don't have a single test for primitive
array constructor. We have several for reference arrays.
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=266fb0d2bc58e2f4f179d2c1279dee095ed53e45
