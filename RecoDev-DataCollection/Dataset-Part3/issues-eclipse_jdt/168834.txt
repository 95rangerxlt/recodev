I20061219-1300

Given:
package test;
public class E {
	private final int field;
	public E() {
		field= -1;
	}
}
1. Source>Generate Getters and Setters...
2. Check 'field' (why is it not already checked?)
3. OK
Is:
 Dialog is asking me if I want to skip the generation of the setter (due to final modifier of field)
Should:
 What I want is that the action removes the final modifier.

There is code which can do that: VariableDeclarationRewrite

I20061219-1300

Given:
package test;
public class E {
	private final int field;
	public E() {
		field= -1;
	}
}
1. Source>Generate Getters and Setters...
2. Check 'field' (why is it not already checked?)
3. OK
Is:
 Dialog is asking me if I want to skip the generation of the setter (due to final modifier of field)
Should:
 What I want is that the action removes the final modifier.

There is code which can do that: VariableDeclarationRewrite
This should not happen automatically behind my back.
Yes, sure, not without a warning:
1. Warning indicator in the checkbox tree on the generate getter/setter dialog if a setter is checked which sets a final field. Warning is: "final modifier will be removed" or so. 
2. Checkbox on the generate setter/getter dialog: 'Remove final modifier from fields if necessary' (and if not checked the setters which do set a final field are disabled).
3. Another option on the dialog that asks for skipping the setter generation (but IMHO we should try to get rid of this kind of dialogs, they are disturbing). 
4. Just generate the setter anyway, the user will then see the compile error and understand...

1 looks ugly so I would go for 2
I think automatically removing is the best thing to do. But we can change the message (turn around the logic):

Field 'fX' is final. Do you still want to create a setter and remove the 'final' keyword from the field? (No will skip the setter generation)

'Yes' 'Yes To All' 'No' 'No to All' 'Cancel'

But I also start to like idea number 2.
implemented suggestion 2
 > 20061222
