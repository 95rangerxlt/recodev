I20040907

Have the following: 
for (int i= 0, length= numbers.length; i < length; i++) {
	int number= numbers[i];
	System.out.println("Number " + i + ": " + new Integer(numbers[i]));
}

The quick assist allows me to convert this into code which causes a compile error:
for (int element : numbers) {
	System.out.println("Number " + i + ": " + new Integer(numbers[i]));
}

Note: if I first assign
int number= numbers[i]; and use number instead of numbers[i] in the println then
the quick assist is not offered (correct).

I20040907

Have the following: 
for (int i= 0, length= numbers.length; i < length; i++) {
	int number= numbers[i];
	System.out.println("Number " + i + ": " + new Integer(numbers[i]));
}

The quick assist allows me to convert this into code which causes a compile error:
for (int element : numbers) {
	System.out.println("Number " + i + ": " + new Integer(numbers[i]));
}

Note: if I first assign
int number= numbers[i]; and use number instead of numbers[i] in the println then
the quick assist is not offered (correct).
Danny, something you want to work on ?
I'll have a look into this sometime this week. Right now I've got some 
visitors from Switzerland and have to take care of them.
Created attachment 14797
patch for ConvertForLoopProposal 

patch created against latest version of org.eclipse.jdt.ui (Sept 27th)
Created attachment 14798
patch for tests

Contains the test case which reveals the bug.
patch created against latest version of org.eclipse.jdt.ui.tests
I fixed the bug. The problem occured in the case where a statement would contain
more than one reference to the index of the array; some of those references
would be illegal for conversion to EnhancedFor. The flag which checked this
precondition was overwritten by subsequent checks, but it's fine now.   
Thanks, Danny. Released the patches for I20040928.
