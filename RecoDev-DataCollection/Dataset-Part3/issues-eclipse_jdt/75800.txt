See bug 73270 for detailed explanation.  Searching for references to a field, 
and then continuing to search for references to those references is common.  
The Call hierarchy view allows this type of local recursive search.

See bug 73270 for detailed explanation.  Searching for references to a field, 
and then continuing to search for references to those references is common.  
The Call hierarchy view allows this type of local recursive search.
Jesper, would you like to implement this?
You don't have to hurry - I'll be on vacation the next two weeks ;-)
Hi Markus,

I'll take a look at it. As you may have noticed, my pace has slowed down
somewhat lately, and it's not getting better for the next month at least - so
don't expect this one to be fixed when you return.

Have a nice vacation!
How about extending this to also allow for searches for references to types in
addition to fields? That might also be an interesting and analogous use case.
I agree with Jesper - it would give users great control if Call Hierarchy worked
with references to types in addition to fields.
Please see bug 73270. The original request is that the Call Hierarchy view be 
removed entirely, and the Tree function be integrated into the default Search 
view.

This bug is a short term fix and should be limited in scope.
Since the more general #73270 has been turned down, could this issue be revived?
I second that the use-case is very relevant:
  "which control-flows result in accessing (reading / writing) a given field."

Could the following suggestion be seen as kind of a compromise:
A user starts with the regular search page, and if the selection
is references to methods or references to fields she can check
a box "show in call hierarchy" which takes the search result
as the seed for a call hierarchy??


I'll try to find some time to do this for 3.3.
Created attachment 80258
draft proposal: call hierarchy for field writes

I drafted a patch that could be used as a starting point for
the desired feature.

With this patch you can hit Ctrl-Alt-H on a field and this will
populate the call hierarchy with this field as the root and all its
write accesses as first-level children. From there on it behaves
as normal. This already serves the use-case that is most common
for me: investigate the control flows that result in writing to
a specific field.

In contrast to my previous statement I actually feel that enabling
call hierarchy for more kinds of elements might really be the most elegant
solution. For an integration with search it would perhaps be more difficult 
to achieve a consistent UI (unless you really want something like:
"all control flows to any public set* methods of class Foo" etc.,
but many searches don't seem to make sense for a call hierarchy).

In case you like the approach of my patch, here are some musings about 
where to go from here:
+ one might want to add a menu option to filter read/write/any access.
  (currently only write access)
+ it should be decided whether to disable callee-mode for a field,
  or whether to interpret an initializer as the field's body
  and search it for callees.
+ it might be interesting to investigate other elements, too.
  I could think of a call hierarchy on a class meaning all instantiations,
  i.e., calls to all constructors of a class.


There's also a known bug in this patch: double clicking the field
in the call hierarchy does not yet work.
(In reply to comment #8)
Thanks for you effort. See my comments below:

> + one might want to add a menu option to filter read/write/any access.
>   (currently only write access)
As long as we don't have a filtering infrastructure, please search for all references, not only for write accesses.

> + it should be decided whether to disable callee-mode for a field,
>   or whether to interpret an initializer as the field's body
>   and search it for callees.
I never really use the callees mode, but I would just disable it for fields for now.

> + it might be interesting to investigate other elements, too.
>   I could think of a call hierarchy on a class meaning all instantiations,
>   i.e., calls to all constructors of a class.
Let's first do it for fields and pursue this in a separate bug report.

> There's also a known bug in this patch: double clicking the field
> in the call hierarchy does not yet work.

You cannot create FakeFieldAccessor as a subclass of the internal SourceMethod from jdt.core. CallerFieldAccessWrapper should also not be necessary. Instead, simply enhance CallerMethodWrapper to also work with IFields.

JavaElementImageProvider and CallHierarchyLabelProvider should not need to be changed.
> > + it might be interesting to investigate other elements, too.
- on Types: bug 171658
- problems with anonymous classes: bug 102281

> simply enhance CallerMethodWrapper to also work with IFields.

CallerMethodWrapper probably doesn't have to be changed at all, but a few places (mostly in the UI) have to be enhanced to work with IFields as well as with IMethods (need to adapt references to IJavaElement.METHOD as well).
Created attachment 80502
alternative implementation

OK, I tried to avoid the FakeXY classes from my previous patch.
This worked more smoothly than I had expected, since many places
already used IMember, not IMethod.
Still the patch is more invasive than the previous one, where
I tried to add rather than change code in too many places.

This variant searches for all references, not just write access.
Regarding a filtering option (which I would like very much!):
Do you have a quick answer, how this option should best be passed
from the ui down to where the search happens in 
CallerMethodWrapper.findChildren(IProgressMonitor)?

I did not yet disable the Caller-mode or make any changes to it.

The effect of this approach and the previous one should be pretty
closely the same.
One more comment on the difference between both approaches:
When creating all these fake- and wrapper classes I also had
in mind that the same strategy could perhaps be applied to
other elements (notably classes).
With consistently using IMember instead of wrapping I don't
see how classes could be supported using the same strategy.

I see the problem, though, that extending SourceMethod was
just a quick hack. Perhaps a fresh new implementation of 
IMethod could do the job, (despite of "This interface is not
intended to be implemented by clients."), but then this thing 
gets kind of heavy weight..

That's just my thoughts I wanted to persist, before you decide
which road to go..
(In reply to my own comment #12)
> With consistently using IMember instead of wrapping I don't
> see how classes could be supported using the same strategy.
Coming from the compiler world I forgot that IType is also a subtype
of IMember. It actually takes very little changes to also support
classes, as to search for all constructor calls.
Would you like me to send that patch, too? Here? Bug 171658?
I'll make a little note about that at bug 171658 for cross-reference.
  
Thanks, the alternative implementation was much cleaner. We strictly adhere to Eclipse API rules, so subtyping IMethod or using internal classes is always a no-go.

For the type => constructors feature, please use bug 171658.

If you want to implement the read-vs-write filter feature, please open a new enhancement request. (BTW: I don't think the implementation should use a modified search query. Filters should be applied after the search and should affect all expanded fields in the hierarchy.)

Released to HEAD with a few changes:

- Added CallHierarchy.isPossibleParent(..) and replaced all explicit element type checks by a call to this helper (adapted a few more places).

- I found it hard to explain why fields are only expanded on the first level, so I removed that restriction.

- Fixed bug that "Focus on 'selection'" action did not appear in the context menu of a selected field.

- Fixed CallHierarchyTransferDropAdapter that now allowed also ITypes and IInitializers to be dropped

- Removed the special description for call hierarchies on fields. I know that a method call and a field access are not the same, but if we start distinguishing there, we would also have to rename the view to Call and Access Hierarchy, etc.

- Added contribution statements in copyright header comments.
Markus, didn't you want to change the Milestone to 3.4M3 instead of 3.3M3? Or can you change the past ;-)
> Markus, didn't you want to change the Milestone to 3.4M3 instead of 3.3M3?
Corrected, thanks for your eagle eyes.

> Or can you change the past ;-)
This is the proof that I can't, otherwise I would have undone your post and set the right milestone in the "first" place ;-)
(In reply to comment #14)

> If you want to implement the read-vs-write filter feature, please open a new
> enhancement request.
did that, it's bug 206949, where I also replied to some details
of your comment.
