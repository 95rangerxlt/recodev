Build Identifier: 20110916-0149

In Eclipse, when you hover on an element, only the Javadoc shows, and the element's (unconstrained) signature.

Suppose I have a class X <T extends Object> {}. If I use Eclipse's Javadoc generator, I get:

/**
 * @param <T>
 */ 

The rendered Javadoc looks like this. Note the lack of type constraint information.

com.domain.X<T>

Parameters:
       <T>

Is there any way to show the generic type constraints from the Javadoc viewer in Eclipse?


Reproducible: Always

Steps to Reproduce:
1.See above
2.
3.

Build Identifier: 20110916-0149

In Eclipse, when you hover on an element, only the Javadoc shows, and the element's (unconstrained) signature.

Suppose I have a class X <T extends Object> {}. If I use Eclipse's Javadoc generator, I get:

/**
 * @param <T>
 */ 

The rendered Javadoc looks like this. Note the lack of type constraint information.

com.domain.X<T>

Parameters:
       <T>

Is there any way to show the generic type constraints from the Javadoc viewer in Eclipse?


Reproducible: Always

Steps to Reproduce:
1.See above
2.
3.
Fair enough, the generated Javadoc also shows the bounds in the header.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=956442e3d7be21e8980799249915d7bdcc33d6d7
Wow, that was fast..  Thanks Markus and whomever pays your salary!  :)
Sorry--to clarify, since I couldn't decipher what the code change actually does, is this done once by "pasting" the text of the constraint into the Javadoc source comment? 

Or is it shown dynamically when rendering the Javadoc itself so that if for instance the user changed the constraint, the rendered Javadoc would show the correct constraint and not be out of date?

And I'm sorry to possibly create more work for you--if I should file another request, let me know.  I assume that for the same reasons as the Javadoc request, it would also make sense for the constraints to show during hover over non-Javadocumented elements?

Thanks!
Jeff
The fix doesn't touch the "@param" part of the Javadoc (that part stays similar to the output from the Javadoc tool).

The fix adds the bounds to the (bold) header at the beginning of the Javadoc tooltip. If you hover over "T" in older builds, the header already says "T extends Object". When rendering the header for a class, I replaced the bare "T" with the same "T extends Object", so that the tooltip for XYZ in

-----------------------------------------------------------------------------
package xy;

import java.io.Serializable;
import java.util.*;

/**
 * The XYZ.
 * @param <T> the element type
 * @param <S> the list
 */
class XYZ<T extends Number & Serializable, S extends ArrayList<Integer>> {
}
-----------------------------------------------------------------------------

... is now:

-----------------------------------------------------------------------------
xy.XYZ<T extends Number & Serializable, S extends ArrayList<Integer>>

The XYZ.

Parameters:
<T> the element type
<S> the list
-----------------------------------------------------------------------------


Added some tests and fixed rendering of multiple bounds with
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=8d8c3871d6303432277fa3873dc889802eb09c04
Thanks again so much for doing this.  It sounds like exactly what I was hoping for.
Sorry I posted prematurely and then re-read the example you provided.  It does sound like, at least for the Javadoc-commented cases it behaves exactly as I'd hoped. 

I'd like to clarify what I was talking about when I asked whether I should enter a different ticket.  

Even if no Javadoc comment exists for a given element, if I hover over references to the element, the "tooltip" will now show the generic-parameter constraints.  

Does the change you applied already cover this case too? 

Again, thanks so much for the quick fix!
> Even if no Javadoc comment exists for a given element, if I hover over
> references to the element, the "tooltip" will now show the generic-parameter
> constraints.  
> 
> Does the change you applied already cover this case too? 

Sure.
