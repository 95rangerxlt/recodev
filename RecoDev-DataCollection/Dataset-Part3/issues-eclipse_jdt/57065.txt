3.0 M8

(not sure which component to report this bug to)

If I add the following method:

public int getType() {
  return 1;
}	

to any class in runtime or resources, searching for references will return
callers to similar methods (same name, not necessarily same return type) in
other plugins:

equals(Object) - org.eclipse.jdt.internal.launching.RuntimeClasspathEntry (3
matches)
getSourceAttachmentLocation() -
org.eclipse.jdt.internal.launching.RuntimeClasspathEntry (1 match)
getSourceAttachmentRootLocation() -
org.eclipse.jdt.internal.launching.RuntimeClasspathEntry (1 match)
getSourceLocations(IRuntimeClasspathEntry[]) -
org.eclipse.jdt.launching.sourcelookup.JavaSourceLocator (1 match)
getVariableName() - org.eclipse.jdt.internal.launching.RuntimeClasspathEntry (2
matches)
hashCode() - org.eclipse.jdt.internal.launching.RuntimeClasspathEntry (3 matches)
resolveClasspath(IRuntimeClasspathEntry[], ILaunchConfiguration) -
org.eclipse.jdt.launching.StandardSourcePathProvider (1 match)
resolveRuntimeClasspathEntry(IRuntimeClasspathEntry, ILaunchConfiguration) -
org.eclipse.jdt.launching.JavaRuntime (1 match)
resolveRuntimeClasspathEntry(IRuntimeClasspathEntry, IJavaProject) -
org.eclipse.jdt.launching.JavaRuntime (1 match)
serviceChanged(ServiceEvent) - org.osgi.util.tracker.ServiceTracker.Tracked (1
match)
updateClasspathEntry(IPath, IPath, IPath) -
org.eclipse.jdt.internal.launching.RuntimeClasspathEntry (1 match)


Note that all hits come from plugins imported as binary projects, and that I
have both "Ignore inexact matches" "Use new search view" checked.

3.0 M8

(not sure which component to report this bug to)

If I add the following method:

public int getType() {
  return 1;
}	

to any class in runtime or resources, searching for references will return
callers to similar methods (same name, not necessarily same return type) in
other plugins:

equals(Object) - org.eclipse.jdt.internal.launching.RuntimeClasspathEntry (3
matches)
getSourceAttachmentLocation() -
org.eclipse.jdt.internal.launching.RuntimeClasspathEntry (1 match)
getSourceAttachmentRootLocation() -
org.eclipse.jdt.internal.launching.RuntimeClasspathEntry (1 match)
getSourceLocations(IRuntimeClasspathEntry[]) -
org.eclipse.jdt.launching.sourcelookup.JavaSourceLocator (1 match)
getVariableName() - org.eclipse.jdt.internal.launching.RuntimeClasspathEntry (2
matches)
hashCode() - org.eclipse.jdt.internal.launching.RuntimeClasspathEntry (3 matches)
resolveClasspath(IRuntimeClasspathEntry[], ILaunchConfiguration) -
org.eclipse.jdt.launching.StandardSourcePathProvider (1 match)
resolveRuntimeClasspathEntry(IRuntimeClasspathEntry, ILaunchConfiguration) -
org.eclipse.jdt.launching.JavaRuntime (1 match)
resolveRuntimeClasspathEntry(IRuntimeClasspathEntry, IJavaProject) -
org.eclipse.jdt.launching.JavaRuntime (1 match)
serviceChanged(ServiceEvent) - org.osgi.util.tracker.ServiceTracker.Tracked (1
match)
updateClasspathEntry(IPath, IPath, IPath) -
org.eclipse.jdt.internal.launching.RuntimeClasspathEntry (1 match)


Note that all hits come from plugins imported as binary projects, and that I
have both "Ignore inexact matches" "Use new search view" checked.
Moving to Core. 
First problem: the new search view reports inexact matches as regular matches.
Second problem: inexact matches are due to a missing reference to rt.jar in 
the 'External Plug-ins Libraries' project (see bug 49573)

Moving to JDT UI to take the accuracy into account in the new search view.
Thomas, the old search reported inexact matches in a different color and with 
a test (inexact) at the end. We have to bring this functionality back. What we 
should consider if we rename inexact to potential.
Again showing "potential" matches. Fixed.
