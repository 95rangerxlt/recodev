Using build 1218:

Here is a test case:

public class A  implements I \u007B \u007D

\u007B = {
\u007D = }

I is an interface that simply defines one method:
public interface I {
	void foo();
}

If I select A in the outliner and I do "Override Methods" and I select the 
method foo from I, I got:
public class A  implements I \u007B \u007	/*
	 * @see I#foo()
	 */
	public void foo() {
	}

D

instead of:
public class A  implements I \u007B 	/*
	 * @see I#foo()
	 */
	public void foo() {
	}

\u007D

This means the unicode are not handled at all by this operation. The 
corresponding JavaModel operation seems to be 
org.eclipse.jdt.internal.core.CreateElementInCUOperation. The problem seems to 
be from the DOMNode position. The fInsertionPosition is incorrect.
The DOMType and the DOMNode in general use '{' and '}' directly in the normalize 
operations without taking care of unicodes.

Using build 1218:

Here is a test case:

public class A  implements I \u007B \u007D

\u007B = {
\u007D = }

I is an interface that simply defines one method:
public interface I {
	void foo();
}

If I select A in the outliner and I do "Override Methods" and I select the 
method foo from I, I got:
public class A  implements I \u007B \u007	/*
	 * @see I#foo()
	 */
	public void foo() {
	}

D

instead of:
public class A  implements I \u007B 	/*
	 * @see I#foo()
	 */
	public void foo() {
	}

\u007D

This means the unicode are not handled at all by this operation. The 
corresponding JavaModel operation seems to be 
org.eclipse.jdt.internal.core.CreateElementInCUOperation. The problem seems to 
be from the DOMNode position. The fInsertionPosition is incorrect.
The DOMType and the DOMNode in general use '{' and '}' directly in the normalize 
operations without taking care of unicodes.
Fixed and released in HEAD.
