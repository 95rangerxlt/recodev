BETA_JAVA8:

We just ran into this testing APT changes for JSR308.

Given:

// ---
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;


public class X {
	int @Nullable [] f @NonNull [] = null; 
}
// ----


on the compiler side, when incorrectly fold the extra dimensions into total 
dimensions and end up with 

int @Nullable [] @NonNull [] f;

It should be 

int @NonNull [] @Nullable[] f;

Since in a C style array declaration, the extra dimension should bind
more readily with the field than any type components preceding it.

While the compiler side story is easy to fix, it will break DOM/AST encoding
unless care it taken: some original dimensions could start showing up as
extra dimensions and vice versa !

I think it is not hard to fix cleanly end to end. I'll see what can be done.

BETA_JAVA8:

We just ran into this testing APT changes for JSR308.

Given:

// ---
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;


public class X {
	int @Nullable [] f @NonNull [] = null; 
}
// ----


on the compiler side, when incorrectly fold the extra dimensions into total 
dimensions and end up with 

int @Nullable [] @NonNull [] f;

It should be 

int @NonNull [] @Nullable[] f;

Since in a C style array declaration, the extra dimension should bind
more readily with the field than any type components preceding it.

While the compiler side story is easy to fix, it will break DOM/AST encoding
unless care it taken: some original dimensions could start showing up as
extra dimensions and vice versa !

I think it is not hard to fix cleanly end to end. I'll see what can be done.
(In reply to Srikanth Sankaran from comment #0)

> I think it is not hard to fix cleanly end to end.

Did I write that ? We have different notions of elementType to begin with :)
or should that emoticon be :( :)

Jay also reported that given:

@TypeUseAnnotation("a") String @TypeUseAnnotation("a1") [] @TypeUseAnnotation("a2") [] @TypeUseAnnotation("a3") [] _field2 , _field3 @TypeUseAnnotation("a4") [][] = null;

when looking at the annotations on dimensions for _field3, all but a4 was
missing.
Created attachment 235876
Test case

This is a patch with new tests in TypeBindingTests308 for the failing scenarios. This only tests the DOM bindings, but should be good enough.
(In reply to Jayaprakash Arthanareeswaran from comment #2)
> Created attachment 235876 [details]
> Test case
> 
> This is a patch with new tests in TypeBindingTests308 for the failing
> scenarios. This only tests the DOM bindings, but should be good enough.

Thanks, but no thanks :) The test has a bug in it, as you traverse the
component types, it is not updating the binding, but expects different
annotations, but fortunately didn't cause too much loss of time.
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=5663a1e0521003a6152962cf3fce8cc9ca6a4647

I have disabled one failing test org.eclipse.jdt.core.tests.dom.TypeBindingTests308._test005() temporarily.
I'll fix it before resolving this bug.

Solution sketch:

- Make the field annotationsOnDimensions private and force clients
to use an accessor which takes a boolesn indicating whether clients
want to see annotations on dimensions in "source order" or "external
order". The former would be used by ASTConverter, Formatters, AST vistors
etc. The latter would be used in binding creation, toString() outputs and
code generation.
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=c611850252ecccb24f660547467e0d555dd4fb70 takes care of that
failure and this is ready to be resolved.
