The suite method we're running:
  public static Test suite() {
    TestSuite suite = new TestSuite();

    suite.addTest(new TD_DecoratorOne(new TestSuite(TC_SomeTest.class)));
    suite.addTest(new TD_DecoratorTwo(new TestSuite(TC_SomeTest.class)));
		
    return suite;
  }


  // One of the methods in TC_SomeTest 
  protected void testQuery() {
    ... some assertEquals()... with a customized message reflecting the
    decorator that was run.
  }

Assume testQuery() fails when run in each decorator (our decorators are 
subclasses of TestSetup).  System.out.println() reflects the customized 
message.  The JUnit SwingUI reflects the customized message.  The JUnit TextUI 
reflects the customized message.  The Eclipse JUnit plugin Failure Trace shows 
the message for the most recent failure for BOTH failures rather than the 
correct customized message for each failure.

We think the potential source of the problem is that the 2 tests have the same 
name and it looks like TestRunInfo is basing the failure trace display on the 
test name (see the equals() method). This may not be the source of the 
problem...just a guess after looking at the plugin for about 10 minutes.

Due to this problem, we really can't depend on the JUnit plugin whenever we use 
decorators, because the failure message isn't accurate. Other than this issue, 
we're quite fond of the JUnit plugin and would love to use it.

The suite method we're running:
  public static Test suite() {
    TestSuite suite = new TestSuite();

    suite.addTest(new TD_DecoratorOne(new TestSuite(TC_SomeTest.class)));
    suite.addTest(new TD_DecoratorTwo(new TestSuite(TC_SomeTest.class)));
		
    return suite;
  }


  // One of the methods in TC_SomeTest 
  protected void testQuery() {
    ... some assertEquals()... with a customized message reflecting the
    decorator that was run.
  }

Assume testQuery() fails when run in each decorator (our decorators are 
subclasses of TestSetup).  System.out.println() reflects the customized 
message.  The JUnit SwingUI reflects the customized message.  The JUnit TextUI 
reflects the customized message.  The Eclipse JUnit plugin Failure Trace shows 
the message for the most recent failure for BOTH failures rather than the 
correct customized message for each failure.

We think the potential source of the problem is that the 2 tests have the same 
name and it looks like TestRunInfo is basing the failure trace display on the 
test name (see the equals() method). This may not be the source of the 
problem...just a guess after looking at the plugin for about 10 minutes.

Due to this problem, we really can't depend on the JUnit plugin whenever we use 
decorators, because the failure message isn't accurate. Other than this issue, 
we're quite fond of the JUnit plugin and would love to use it.
Analysis is correct, the current scheme to associate info with traces is not 
precise enough
downgrading priority. this one really hurts but it isn't a stop ship since 
there is a workaround.
Created attachment 1546
test case illustrating the problem
*** Bug 32435 has been marked as a duplicate of this bug. ***
Have a fix that properly handles the attached test case.

Marking as an RC2 candidate.
released for RC2
