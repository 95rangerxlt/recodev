I wonder how we should represent the Java 6 APT options in the IDE preferences.  At present there is no way to enable Java 6 annotation processing in the IDE.

For Java 5, annotation processing was a separate, Sun-proprietary tool in the JDK.  So it did not make sense to mix the APT options in with the compiler options; we put them in a separate preferences page underneath the JDT compiler, and we store them in a separate file under .settings.

For Java 6, annotation processing settings (such as the processor path, and the -proc:only or -proc:none options) are part of the javac command line.

There is still good reason and precedent to keep the settings on a separate preference page, and even perhaps in a separate settings file.  After all, the IDE compiler does not need to know anything about processing unless it has processing enabled.  However, "whether processing is enabled" is something the compiler does have to decide.  Right now that is a per-project setting, stored under the APT preferences node.

We have a CompilerOptions.processAnnotations flag.  We use it in AbstractImageBuilder to decide whether to enable Java 6 annotation processing.  At the command line this flag is set from the command line options, but in the IDE there is nothing that sets it, yet.  And it is kind of redundant with the APT equivalent.

I suggest that we:

  1. Stop writing the "enable annotation processing" setting in the APT preferences node.  (Of course I will need to make it backward compatible with the old setting, for old projects.)

  2. Allow the APT preference pane to set the JDT "processingEnabled" option.

  3. Use this option to control both Java 5 and Java 6 processing.  (Since we don't do Java 5 processing from the batch compiler, this doesn't make any difference there.  I don't think we should have separate settings for Java 5 versus Java 6, because most people won't know the difference.)


Olivier, Martin, How do you guys feel about that?  It would not require any change in JDT, but I wanted to ask because it means that APT would be reading and setting a JDT compiler option.

I wonder how we should represent the Java 6 APT options in the IDE preferences.  At present there is no way to enable Java 6 annotation processing in the IDE.

For Java 5, annotation processing was a separate, Sun-proprietary tool in the JDK.  So it did not make sense to mix the APT options in with the compiler options; we put them in a separate preferences page underneath the JDT compiler, and we store them in a separate file under .settings.

For Java 6, annotation processing settings (such as the processor path, and the -proc:only or -proc:none options) are part of the javac command line.

There is still good reason and precedent to keep the settings on a separate preference page, and even perhaps in a separate settings file.  After all, the IDE compiler does not need to know anything about processing unless it has processing enabled.  However, "whether processing is enabled" is something the compiler does have to decide.  Right now that is a per-project setting, stored under the APT preferences node.

We have a CompilerOptions.processAnnotations flag.  We use it in AbstractImageBuilder to decide whether to enable Java 6 annotation processing.  At the command line this flag is set from the command line options, but in the IDE there is nothing that sets it, yet.  And it is kind of redundant with the APT equivalent.

I suggest that we:

  1. Stop writing the "enable annotation processing" setting in the APT preferences node.  (Of course I will need to make it backward compatible with the old setting, for old projects.)

  2. Allow the APT preference pane to set the JDT "processingEnabled" option.

  3. Use this option to control both Java 5 and Java 6 processing.  (Since we don't do Java 5 processing from the batch compiler, this doesn't make any difference there.  I don't think we should have separate settings for Java 5 versus Java 6, because most people won't know the difference.)


Olivier, Martin, How do you guys feel about that?  It would not require any change in JDT, but I wanted to ask because it means that APT would be reading and setting a JDT compiler option.
Moving to the jdt.core inbox as it seems it's more to a jdt.core question. Walter's suggestions make sense to me. 
I vote for storing the data in the compiler prefs, and leaving the UI where it is, in the APT pane.
Walter,

Since apt is really connected to JDT with Java6 apt, I think your steps are
reasonable. Let me know if you need any help to set them up.
Moving to JDT/APT then.

Fixed in 3.3M7.  Java 5 processing is controlled by the OR of the old and new settings; the logic is in AptConfig.isEnabled().  Java 6 processing is controlled by the new (org.eclipse.jdt.core.compiler.processingEnabled) setting.  When we write a new value for the setting from the AptConfig API or from the preferences GUI, we set both values.
