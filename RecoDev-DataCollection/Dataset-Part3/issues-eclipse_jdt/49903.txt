the question is if it is possible to indent when typing <code>break</code>,
<code>continue</code> or <code>return</code>, especially for <code>switch</code>
keyword.

the question is if it is possible to indent when typing <code>break</code>,
<code>continue</code> or <code>return</code>, especially for <code>switch</code>
keyword.
Move to JDT/Text.
Can give a bit more context or an example.
If I understand correctly, you want to unindent the cursor in the following
snippet, after entering a new line:

<pre>
switch (i) {
  case 1:
    doStuff();
    break;
    |<- caret is here, but you want it aligned with the case statement.
  default:
    return;
}
</pre>

The problem with this is that we would need to analyse the code to see whether
the ending statement (return, throw, break, continue) is inside a conditional or
not... 

aaaahhh, switch statements are just such a mess for indenting....
you have all understood Tom Eicher, except that even if we are in a conditional
statement you can unindent the caret

example :
<pre>
  if (isTrue()) {
    doStuff();
    return false;
    | (1)here is the caret for the moment...
  | (2)here it would be if we unindent
  } else {
  }
</pre>

 (2) which is still correct since nothing must appear here, because the code
would be unreachable
In fact after typing the semicolon if <enter> is typed, then if 
the last statement is RETURN or BREAK or CONTINUE or THROW then we can
in allmost all case unindent the caret.

Am i right ?
Is there any counter example ?


We need simple flow analysis to do what you request:

<pre>
switch (i) {
  case 1:
    doStuff();
    if (condition) break;
    |<- caret must go here since break is conditional
  default:
    return;
}
</pre>


*** Bug 62799 has been marked as a duplicate of this bug. ***
*** Bug 74951 has been marked as a duplicate of this bug. ***
bug 74951 is a really simple request: don't be so clever when I press TAB or 
BACKSPACE.  This bug is about what happens when you press ENTER.  Is it really 
a dupe?
I would say - the double indentation upon 'Tab' could only be fixed if this PR
was fixed, since you only want that behavior if the previous case block was
terminated somehow. From bug 74951 (| is the caret): 

switch (value) {
    case 0:
       return;
       break;
|
}

Since you want to add another 'case', a single indent would be correct. Consider
this:

switch (value) {
    case 0:
       stuff();
|
}

I assume you would expect the indent to align with 'stuff()' when pressing tab
here. Distinguishing the two cases needs a heuristic.

If you don't want indentation upon tab at all, you can disable on the
Java>Editor>Typing preference page.
I don't care about the heuristic.  The folling if valid code:

switch (i) {
  case 1:
    doStuff();
  case 2:
    doMoreStuff();<<CARET>>
  default:
    doEvenMore();
}

"break" statements are optional.  The heuristic is working good enough for me.  
If I press ENTER at the caret, the indentation should be double, but I *SHOULD* 
be able to press BACKSPACE and delete a single TAB, *not* both.  Currently, 
BACKSPACE deletes both TABS.  Then, pressing TAB inserts 2 TABS.  This is 
wrong. The users intentions will always be ambiguous and you need to choose the 
smaller modification in this case.
The issue in comment 10 has been fixed a while ago (pressing backspace has no smartness anymore).

We won't do any flow analysis to detect whether the statements prior to the caret terminate. Note that the following will be aligned correctly as soon as you type them:

- opening and closing braces
- the 'case' keyword in switch statements

Closing as invalid as worksfor me as indentation is working as expected.
