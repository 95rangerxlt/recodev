Is this a bug or am I missing something?

I have a class which the JUnit Failure Trace window seems unable to GoTo,
instead bringing up an error dialog which reads, "Test class not found in project".

Steps:
[1] Run a JUnit launch configuration which has failures.
[2] In the failures tab, select "test_mumble". Right-menu/GoTo has the expected,
correct behavior.
[3] In the Failure Trace window below, I see the stack trace.  I can double
click or right-menu/GoTo all but one of the line in this window that correspond
to my code, and be taken to the appropriate code position.

For this trace, however, I cannot double click or use right-menu/GoTo for the
method which raised an assert exception.  If I try, I get the "Test class not
found in project" error.  I should point out that the assert is not being raised
in test code, but in an unimplemented stub.

Possibly relevant:
The actual assert is in a method of a static inner class, said method looking
roughly like

		double[] apply(double[] vectorIn, Space space) {
			assert false : "nyi";
			return null;
		}

Is this a bug or am I missing something?

I have a class which the JUnit Failure Trace window seems unable to GoTo,
instead bringing up an error dialog which reads, "Test class not found in project".

Steps:
[1] Run a JUnit launch configuration which has failures.
[2] In the failures tab, select "test_mumble". Right-menu/GoTo has the expected,
correct behavior.
[3] In the Failure Trace window below, I see the stack trace.  I can double
click or right-menu/GoTo all but one of the line in this window that correspond
to my code, and be taken to the appropriate code position.

For this trace, however, I cannot double click or use right-menu/GoTo for the
method which raised an assert exception.  If I try, I get the "Test class not
found in project" error.  I should point out that the assert is not being raised
in test code, but in an unimplemented stub.

Possibly relevant:
The actual assert is in a method of a static inner class, said method looking
roughly like

		double[] apply(double[] vectorIn, Space space) {
			assert false : "nyi";
			return null;
		}
Further testing:

In the code just a level up from the stub which asserts false, if I insert a
call to a static method of the outer class whose form looks like,

	static void fail() {
		assert false: "nyi";
	}

then I can open the class to the point at which the assert was raised.
Correction and further testing:

The assert was *not* simply in a static inner class.  Instead, the assert was
inside the method of an *anonymous* inner class which was being assigned to a
static member of the top level class.  A la


	static OperatorClass classLinear = new OperatorClass() {

		double[] apply(double[] vectorIn, Space space) {
			assert false : "nyi";
			return null;
		}
	}
If I change the assignemnt to something like the following, GoTo can find the
correct class:
	static OperatorClass classLinear = new StaticLinearOperatorClass();
	static class StaticLinearOperatorClass {

		double[] apply(double[] vectorIn, Space space) {
			assert false : "nyi";
			return null;
		}
	}

So it seems the problem is related to being able to go to anonymous classes, or
some subset of anonymous classes.

If it's possible to fix this one for 2.0, I would appreciate it.
Apparently can't find it when the class is a top-level non-public class which
trails a public class in the same compilation unit.
The class matching is done in a naive way by only matching the name in the 
trace against the name of compilation units. As a consequence local or 
anonymous classes will not be found. 
*** Bug 11035 has been marked as a duplicate of this bug. ***
not sure if this is a dupe...
Created attachment 3600
patch
released patch for RC1
