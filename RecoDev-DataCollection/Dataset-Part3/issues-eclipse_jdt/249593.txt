Build ID: org.eclipse.jdt.core_3.4.1.v_877a_R34x.jar

Steps To Reproduce:
We have a product where we'd like the default compiler level set to 1.5 instead of 1.6 (which is the default).  We added these lines to our product customization ini file:


org.eclipse.jdt.core/org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
org.eclipse.jdt.core/org.eclipse.jdt.core.compiler.source=1.5
org.eclipse.jdt.core/org.eclipse.jdt.core.compiler.compliance=1.5

However if we launch our product on a new workspace, these values get overwritten and replaced with 1.6.  The above is how we customize all kinds of preferences.  These ones don't seem to be working for us though.  Is there something we're doing wrong?


More information:

Build ID: org.eclipse.jdt.core_3.4.1.v_877a_R34x.jar

Steps To Reproduce:
We have a product where we'd like the default compiler level set to 1.5 instead of 1.6 (which is the default).  We added these lines to our product customization ini file:


org.eclipse.jdt.core/org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
org.eclipse.jdt.core/org.eclipse.jdt.core.compiler.source=1.5
org.eclipse.jdt.core/org.eclipse.jdt.core.compiler.compliance=1.5

However if we launch our product on a new workspace, these values get overwritten and replaced with 1.6.  The above is how we customize all kinds of preferences.  These ones don't seem to be working for us though.  Is there something we're doing wrong?


More information:
The true defaults for JDT(Core) are 1.4 compliance. They become 1.6 based on the default JRE (coming from the running JVM) as a lack of any better indication.

Darin - since you control this behavior, would you suggest something here ? Like not change the defaults if they are already distinct from the JDT/Core defaults ?
If we have to, can we change the default JRE?  We supply a server runtime with a corresponding JRE.  How can we set this as the default for the product?  When I change the default JRE in the preference page, it gets serialized with an absolute path, so I'm not sure if I can do this via the plug customization ini file.
(In reply to comment #2)
> If we have to, can we change the default JRE?  We supply a server runtime with
> a corresponding JRE.  How can we set this as the default for the product?  When
> I change the default JRE in the preference page, it gets serialized with an
> absolute path, so I'm not sure if I can do this via the plug customization ini
> file.

There is a vmInstalls extension point to contribut JRE's. However, there is currently no attribute to contribute on of these JERs as the default JRE (our reasoning was that there would be no way to know which JRE to choose if more than one claimed to be the default).

You could use API in JavaRuntime to programmatically set the default JRE - JavaRuntime.setDefaultVMInstall(...). This should be done with case in case the user has already changed/specified a default JRE for themselves.
Darin - for my education, what about not altering defaults if they are not defaults actually ? (like I was suggesting in comment 1).
(In reply to comment #4)
> Darin - for my education, what about not altering defaults if they are not
> defaults actually ? (like I was suggesting in comment 1).

Yes, we can likely implement this solution.
(In reply to comment #5)
> (In reply to comment #4)
> > Darin - for my education, what about not altering defaults if they are not
> > defaults actually ? (like I was suggesting in comment 1).
> Yes, we can likely implement this solution.


Well, interestingly enough, this logic is already present in the JDT launching code and has been since 3.2:


Hashtable defaultOptions = JavaCore.getDefaultOptions();
Hashtable options = JavaCore.getOptions();
boolean isDefault =
  equals(JavaCore.COMPILER_COMPLIANCE, defaultOptions, options) &&
  equals(JavaCore.COMPILER_SOURCE, defaultOptions, options) &&
  equals(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, defaultOptions, options) &&
  equals(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, defaultOptions, options) &&
  equals(JavaCore.COMPILER_PB_ENUM_IDENTIFIER, defaultOptions, options);
  // only update the compliance settings if they are default settings, otherwise the
  // settings have already been modified by a tool or user
  if (isDefault) {
    JavaCore.setComplianceOptions(compliance, options);
    JavaCore.setOptions(options);
  }
When preferences are specified via preference customization, it effects the "default" preferences... so the suggested fix does not work - as the override is considered to be the "default" - and the code correctly follows the path that detects the "preference settings are equal to default settings".
So you need to be able to find the default defaults from JDT/Core, instead of the current default (after product customization).
Therefore you need a new API, or we'd have to expose some internal for you (x-friends).

cc'ing Frederic for JDT/Core API work.
Thanks for the tip to work around this issue.  I schedule a Job in our plug-in's start() method (which is early startup) and I am able to set the default JRE and compiler level.  
Grant - are you saying that you no longer need anything ? 

As it is today, it feels like our mechanics for product customization is not handled properly in JDT when it comes to setting default JRE/compliance.
Now this is not new...

Another question: Grant, why does it still make sense to set 1.5 compliance on a 1.6 JRE ? Isn't it asking for trouble ?

I think the proper fix should be pursued, as I view what I've done as a hack.

Ideally, we'd be able to set the default JRE and compiler compliance setting from our plug-in customization file (or product definition).

In our case, the runtime is using a 1.5 JRE, so we weren't that troubled with using a 1.6 JRE if we could set the compliance level to be 1.5 because it *should* work, right?
The problem you may run into is that you let users think they are using Java5, but you expose Java6 libraries to them on their build path when they develop. Thus they may use some API which are non existent on Java5. So yes, it would compile clear, but when you deploy and run on a Java5 JRE, you would see problems.

So in essence, when there is a disconnect between classlibs and compliance settings, you need to be very careful. The recommended situation is to align them all (and this is why the JDT/JRE support is trying to make these consistent by default).
In our product, we manage the JRE classpath library for projects with our nature.  So I guess, in essence, we are using a 1.5 default JRE for our projects.  We are just not using the JDT-level "default JRE" preference.  So I agree that it would be best if we set the default JRE in the JDT level to match the JRE classpath container that we're using for our projects.
Frederic, is there a JCORE bug I can track for the JCORE side of the work?
Removing 3.5 milestone, pending bug 263564.
*** Bug 269316 has been marked as a duplicate of this bug. ***
Created attachment 143284
Solution that does not work (but should)

Ok, I have tried to create a patch for testing, no new API, just reference to internal class that defines default compiler settings.

The patch correctly discovers preference modification, but... it is not enough!

Look at this stack-trace:

JavaCore.setComplianceOptions(String, Map) line: 4874	
JavaModelUtil.setComplianceOptions(Map, String) line: 651	
JavaModelUtil.set50ComplianceOptions(Map) line: 647	
ProfileVersioner.setLatestCompliance(Map) line: 120	
FormatterProfileManager.getJavaSettings() line: 89	
FormatterProfileManager.addBuiltinProfiles(List, IProfileVersioner) line: 51	
FormatterProfileManager.<init>(List, IScopeContext, PreferencesAccess, IProfileVersioner) line: 47	
FormatterProfileStore.checkCurrentOptionsVersion() line: 119	
JavaPlugin.ensurePreferenceStoreBackwardsCompatibility() line: 491	
JavaPlugin.start(BundleContext) line: 359	

For some reason formatter sets the workspace compliance to 5.0, and I do not know how to workaround this :-(. Any help is welcome.
It's not formatter who overwrites settings - it is ComplianceConfiguration#setDefaultCompilerComplianceValues introduces by bug 243712
Created attachment 143394
Patch that seems to work

However it needs to be distributed/formatted/adjusted to JDT code style etc.

Any comments are welcome!
3.6 M3 is approaching us slowly - I think we have only this week for fixing the issue.
I've updated dependent bug 263564. We need that bug fixed before proceeding.
In the latest patch there are some changes to JavaCore, which address bug 263564, at least in the scope that is necessary to fix this bug.

Unfortunately contributing to JDT is quite difficult for me due to high entry barrier, so if you could review my patch and tell me what to do next, I'd be extremely happy to provide new, better patch :).
Changes are required in both JDT/Debug and JDT/UI.
Please let me know if the new API on JDT/Core is not sufficient.
Released fix to JavaRuntime, moving to JUI for remaining work.
Note that when changing the default compliance settings you should also set:

org.eclipse.jdt.core/org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
org.eclipse.jdt.core/org.eclipse.jdt.core.compiler.problem.enumIdentifier=error

Otherwise they are in an inconsistent state which might lead to unexpected results.
Created attachment 150528
Patch for jdt.ui based on new JDT Core API

This patch would fix the issue in JDT UI using the new JDT Core API. However, I'm not happy with that new API as this is just a workaround for missing preferences API which should allow to query product and command line preferences.

Also note that the code in JavaRuntime should probably compare original with default scope.

More to follow by Darin.
Suggest to defer to M4 based on bug 293331.
I was looking at this a bit closer while thinking about bug 293331 and was wondering if there is an easier solution. We have been throwing around the word "default values" here but first I want to make sure we all mean the same thing. 

In the preference world, default value (e.g. preferences in the default scope) are NEVER persisted. That is, they are recalculated every time you start Eclipse. When someone says "give me the default preferences for the jdt.core plug-in" we go calculate the overrides (preference initializer, file in bundle, product file, command-line file) and then return an object with the values that we applied.

So unless there is a value specified in one of these file (or in the pref intializer) then a key/value pair is never set. 

The code in JavaModelManager#getDefaultOptions seems to populate a table based on the key/value pairs which have been set. 

So I guess my question is shouldn't something like this do what you want? 
  Map options = JavaCore.getDefaultOptions();
  if (options.containsKey(key)) {
    // pref default was set by someone
  } else {
    // value was not set
  }

This looks pretty similar to the code currently in JavaRuntime#equals (called from JavaRuntime#updateCompliance) so perhaps there is just a subtle bug that we can fix rather than implementing something new?
After talking to Olivier about this, it seems by "defaults" you mean "the default values that are set by the bundle itself in its preference initializer and overrides file but not the default values that are set by the product file or command-line". Does this sound right?
(In reply to comment #29)
> After talking to Olivier about this, it seems by "defaults" you mean "the
> default values that are set by the bundle itself in its preference initializer
> and overrides file but not the default values that are set by the product file
> or command-line". Does this sound right?

Correct.
Created attachment 151288
Patch for JDT Launching and UI based on new preference API
Grant, can you give a bit more details what you customize and what your expected goal is? If you only override the compliance options (as indicated in comment 0) then you might end up with unwanted results as the JRE version won't match the compiler options. Or are you also customizing the installed JREs?
In our case, we were actually changing the default JRE as well.  We wanted the JRE from our server to be the default.
>In our case, we were actually changing the default JRE as well. 
And the compliance should be the default one matching that JRE? If so I would expect that simply setting the default JRE should be enough.
And Grant: how do you set the JRE? Also via ini-file or via code?
I reviewed/tested with DJ's patch: +1. However, we should hear Grant's answers first.
Right now, we did it via code.  All we really wanted was the compliance level, I think, because the server JRE version was older than that of the tool's (wouldn't that be enough?).  If we could set the default JRE via preferences, that would be great too.
(In reply to comment #37)
> Right now, we did it via code.  All we really wanted was the compliance level,
> I think, because the server JRE version was older than that of the tool's
> (wouldn't that be enough?).  If we could set the default JRE via preferences,
> that would be great too.

You can contribute JREs via the org.eclipse.jdt.launching.vmInstalls extension point, but there's no support for setting the default JRE via the extension point (since more than one client could claim to have the default JRE). 

Slamming the org.eclipse.jdt.launching.PREF_VM_XML preference would be problematic, as absolute paths are used to persist JRE settings.
Grant, one more question: in comment 9 you wrote:

  Thanks for the tip to work around this issue.  I schedule a Job in our
  plug-in's start() method (which is early startup) and I am able to set the
  default JRE and compiler level.

How does your workaround interact/behave once we fix this (just in case we backport this to a maintenance stream)?
Created attachment 151570
Patch for JDT Launching and UI based on new preference API

Updated patch to use new BundleDefaultsScope plus corrected dependency in manifest.
Created attachment 151573
Patch for JDT Launching and UI based on new preference API
Created attachment 151575
Patch for JDT Launching and UI based on new preference API

This time also with correct manifest update for jdt.ui.
Grant can you answer the question from comment 39? Thanks.
Sorry, I thought I answered that question, but apparently I didn't.

I'm not sure what the interactions would be.  I would expect my Job code to run after the fixes being implemented here... so my code would likely just blow away any defaults that are set.  No?

Note that we've removed this code for the latest release of our product, as the tooling and runtime are now on the same java version.
If your code doesn't depend on existing values then this will work fine. Only if it expects some defaults - which might now be different - it could lead to problems.
Darin, all code committed except the JDT Launching part. Please commit for M4.
Released. Fixed up the Javadoc.
