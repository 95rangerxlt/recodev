build I20050315

Editors that implement their own IFile-based EditorInput do not fully integrate
with Eclipse.  There are many places in the SDK where we assume that IFile-based
editors use [I]FileEditorInput.
It would be better to use editorInput.getAdapter(IFile.class).

See bug 87288 and bug 88451 for more details.

build I20050315

Editors that implement their own IFile-based EditorInput do not fully integrate
with Eclipse.  There are many places in the SDK where we assume that IFile-based
editors use [I]FileEditorInput.
It would be better to use editorInput.getAdapter(IFile.class).

See bug 87288 and bug 88451 for more details.
Refs to IFileEditorInput in JDT UI:

org.eclipse.jdt.internal.ui.browsing.JavaBrowsingPart
org.eclipse.jdt.internal.ui.browsing.JavaBrowsingPart.getElementOfInput(IEditorInput)
(2 potential matches)
org.eclipse.jdt.internal.ui.browsing.JavaBrowsingPart.setSelectionFromEditor(IWorkbenchPart,
ISelection) (3 potential matches)
org.eclipse.jdt.internal.ui.jarpackager.JarFileExportOperation.createSaveModifiedResourcesRunnable(IFile[])
(2 potential matches)
org.eclipse.jdt.internal.ui.jarpackager.JarFileExportOperation.getUnsavedFiles()
(2 potential matches)
org.eclipse.jdt.internal.ui.jarpackager.new IRunnableWithProgress() {...}
org.eclipse.jdt.internal.ui.javadocexport.JavadocWizard.createSaveModifiedResourcesRunnable(IFile[])
(2 potential matches)
org.eclipse.jdt.internal.ui.javadocexport.JavadocWizard.getUnsavedFiles(List) (2
potential matches)
org.eclipse.jdt.internal.ui.javadocexport.new IRunnableWithProgress() {...}
org.eclipse.jdt.internal.ui.javaeditor.ClassFileDocumentProvider._FileSynchronizer
org.eclipse.jdt.internal.ui.javaeditor.ClassFileDocumentProvider._FileSynchronizer._FileSynchronizer(ClassFileDocumentProvider,
IFileEditorInput) (potential match)
org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor
org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor.transformEditorInput(IEditorInput)
(2 potential matches)
org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.createFileInfo(Object)
(3 potential matches)
org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.createSaveOperation(Object,
IDocument, boolean) (2 potential matches)
org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor
org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.canHandleMove(IEditorInput,
IEditorInput) (4 potential matches)
org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSaveAs(IProgressMonitor)
(2 potential matches)
org.eclipse.jdt.internal.ui.javaeditor.EditorUtility.getJavaProject(IEditorInput)
(2 potential matches)
org.eclipse.jdt.internal.ui.javaeditor.EditorUtility.openInEditor(Object,
boolean) (3 potential matches)
org.eclipse.jdt.internal.ui.javaeditor.EditorUtility.revealInEditor(IEditorPart,
int, int) (2 potential matches)
org.eclipse.jdt.internal.ui.javaeditor.new
TextFileDocumentProvider$DocumentProviderOperation() {...}
org.eclipse.jdt.internal.ui.javaeditor.new WorkspaceModifyOperation() {...}
org.eclipse.jdt.internal.ui.packageview.PackageExplorerPart
org.eclipse.jdt.internal.ui.packageview.PackageExplorerPart.getElementOfInput(IEditorInput)
(2 potential matches)
org.eclipse.jdt.internal.ui.propertiesfileeditor.OpenAction
org.eclipse.jdt.internal.ui.propertiesfileeditor.OpenAction.checkEnabled(ITextSelection)
(potential match)
org.eclipse.jdt.internal.ui.propertiesfileeditor.OpenAction.OpenAction(PropertiesFileEditor)
(potential match)
org.eclipse.jdt.internal.ui.propertiesfileeditor.PropertiesFileDocumentProvider
org.eclipse.jdt.internal.ui.propertiesfileeditor.PropertiesFileDocumentProvider.createFileInfo(Object)
(3 potential matches)
org.eclipse.jdt.internal.ui.propertiesfileeditor.PropertyKeyHyperlinkDetector
org.eclipse.jdt.internal.ui.propertiesfileeditor.PropertyKeyHyperlinkDetector.checkEnabled(IRegion)
(potential match)
org.eclipse.jdt.internal.ui.refactoring.nls.search.NLSSearchResult
org.eclipse.jdt.internal.ui.refactoring.nls.search.NLSSearchResult.computeContainedMatches(AbstractTextSearchResult,
IEditorPart) (3 potential matches)
org.eclipse.jdt.internal.ui.refactoring.nls.search.NLSSearchResult.isShownInEditor(Match,
IEditorPart) (4 potential matches)
org.eclipse.jdt.internal.ui.search.JavaSearchResult
org.eclipse.jdt.internal.ui.search.JavaSearchResult.computeContainedMatches(AbstractTextSearchResult,
IEditorPart) (3 potential matches)
org.eclipse.jdt.internal.ui.search.JavaSearchResult.isShownInEditor(Match,
IEditorPart) (4 potential matches)
org.eclipse.jdt.internal.ui.search.JavaSearchScopeFactory
org.eclipse.jdt.internal.ui.search.JavaSearchScopeFactory.getEditorInputElement(IEditorInput)
(2 potential matches)
org.eclipse.jdt.internal.ui.search.OccurrencesSearchResult
org.eclipse.jdt.internal.ui.search.OccurrencesSearchResult.computeContainedMatches(AbstractTextSearchResult,
IEditorPart) (3 potential matches)
org.eclipse.jdt.internal.ui.search.OccurrencesSearchResult.isShownInEditor(Match,
IEditorPart) (2 potential matches)
org.eclipse.jdt.internal.ui.text.JavaReconciler.ResourceChangeListener
org.eclipse.jdt.internal.ui.text.JavaReconciler.ResourceChangeListener.getResource()
(3 potential matches)
org.eclipse.jdt.internal.ui.workingsets.HistoryWorkingSetUpdater.Tracker
org.eclipse.jdt.internal.ui.workingsets.HistoryWorkingSetUpdater.Tracker.getInput(IEditorPart)
(3 potential matches)
Changing checks for IFileEditorInput to use getAdapter(IFile.class) instead is
not as important as I initially thought.  See bug 87288 comment 17.
However, it still decouples you more from a specific editor input type.

Also, checks for FileEditorInput should still be changed to use IFileEditorInput
or getAdapter.

Verified that we use FileEditorInput only when we instantiate one.
