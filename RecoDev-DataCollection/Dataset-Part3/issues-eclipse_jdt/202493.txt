M20070905-1045 and I20070904-0800.

The Javadoc warning for deprecated and non visible Javadoc tags are only reported if the invalid tag option is also enabled. This dependency is not spec'ed like that in JavaCore.getDefaultOptions() and hence the UI doesn't show it either.

Please investigate whether implementation or the spec is wrong. If it's the spec then we need fix the Javadoc and adjust the UI.

Test Case:
1. add Javadoc which has a reference to a non visible member
2. add Javadoc which has a reference to a deprecated member
3. enable Javadoc validation and:
   [ ] Report errors in tags
   [x] Report non visible references
   [x] Report deprecated references
==> problems are not reported
4. go and check "Report errors in tags" too
==> problems are reported

M20070905-1045 and I20070904-0800.

The Javadoc warning for deprecated and non visible Javadoc tags are only reported if the invalid tag option is also enabled. This dependency is not spec'ed like that in JavaCore.getDefaultOptions() and hence the UI doesn't show it either.

Please investigate whether implementation or the spec is wrong. If it's the spec then we need fix the Javadoc and adjust the UI.

Test Case:
1. add Javadoc which has a reference to a non visible member
2. add Javadoc which has a reference to a deprecated member
3. enable Javadoc validation and:
   [ ] Report errors in tags
   [x] Report non visible references
   [x] Report deprecated references
==> problems are not reported
4. go and check "Report errors in tags" too
==> problems are reported
This dependency has been intentionally implemented. So the option javadoc comment should be modified accordingly, unless someone disagrees with this behavior...

The UI needs to be fixed then.
(In reply to comment #2)
> The UI needs to be fixed then.
> 
So, move this bug to JDT/UI

I talked with Jerome about this and we agreed to keep the current behavior.
Our proposal to match this behavior is:
   [x] Report invalid references
       [x] Include non visible references
       [x] Include deprecated references

After discussion with Eric about how to add the UI for bug 73352 (new option 'missing tag descriptions', I'd like to expand this bug so we get a good overall solution

'Report errors in tags' is too generic, so I made it more explicit:

   [x] Validate tag arguments (@param, @throws/@exception, @see, @link)
       [x] Report non visible references
       [x] Report deprecated references
   [x] Report missing tag description
       o @return tag only (minimal requirement by Javadoc tool)
       o all tags
(In reply to comment #4)
>    [x] Validate tag arguments (@param, @throws/@exception, @see, @link)
--> I expect that the label will read:
[x] Validate tag arguments
and not will not list the tags that will be validated - correct?
Also note that once bug 73352 implemented, the @param validation will not be triggered by the "Validate tag arguments" (current "Report errors in tags") option, but rather by the new "Report missing tag description".
>    [x] Report missing tag description
>        o @return tag only (minimal requirement by Javadoc tool)
>        o all tags
--> I would expect this to be a new combo "Report missing tag description"
with 3 values:
- return tag (default)
- all tags
- ignore


I would like to be as explicit as possible and have the list of the tags that are influenced by the option

@param  parameter-name description 
The parameter-name is enforced by the first option, the description by the second
(One could ask if if makes sense to ho have the first unchecked and the second checked)

I think the checkbox/radio UI is better than the combo. Combos always have the problem that you have to open them first to see the alternatives.
The suggested approach also allows us to explain why we have a special case for @return

Note that this only is about the UI. Core API can stay as is.
>I think the checkbox/radio UI is better than the combo.
+1
>I think the checkbox/radio UI is better than the combo.
+1


(In reply to comment #6)
> I would like to be as explicit as possible and have the list of the tags that
> are influenced by the option
> 
This sounds reasonable to me.

> @param  parameter-name description 
> The parameter-name is enforced by the first option, the description by the
> second
> (One could ask if if makes sense to ho have the first unchecked and the
> second checked)
> 
This is not possible to have the description without parameter-name. By construction, the first word of the description would be inferred as the parameter-name and then user got a warning on it...

> I think the checkbox/radio UI is better than the combo. Combos always have the
> problem that you have to open them first to see the alternatives.
> The suggested approach also allows us to explain why we have a special case
> for @return
> 
+1

> Core API can stay as is.
> 
+1


Created attachment 80061
fix1 show dependency in UI
Created attachment 80065
fix2 add new preferences

Sorry, I have to use a combo: using radios seams to be quite challenging to write, and a combo is acceptable.
fixed > I20071009-2225
