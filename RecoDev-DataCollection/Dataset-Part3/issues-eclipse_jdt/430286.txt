Adapt to APIs from bug 430195.

Adapt to APIs from bug 430195.
I've already added rendering of lambda types along the lines of anonymous types ("new SupertypeName() {...}"), e.g. like this:

() -> {...} FunctionalInterfaceName

http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=6c84c0e7fc727e0d1ca3397a885a3e960becf52a

This should prevent failures when bug 430195 is implemented. (I removed a bad "elementName.length() == 0" test.)

Keeping this bug for adoption of the new IType#isLambda() API.
(In reply to Markus Keller from comment #1)
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/
> ?id=6c84c0e7fc727e0d1ca3397a885a3e960becf52a

For the record, the correct commit is:

http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=d68c7bf0029fec4b322c2e1f2c7bc8f953328f22
(In reply to Manju Mathew from bug 430195 comment #11)
> Markus, #isAnonymous() throws JavaModelException. In some places where we
> catch this exception what is the right thing to do, fall back to
> IType.getElementName().length() == 0 or ignore?

There's no good general answer. The JME should never happen, and if it happens and we can't pass it on, then we should generally log the problem and take the safest exit route. In code paths that are frequently hit (label providers, etc.), we don't log. In case we've already tried #isLambda() and we later expect a non-empty name, it's often best to fall back to length() == 0.

> Attaching the patch. Below are the locations identified where i need
> clarification:
> 
> - JavaElementLabelComposer#appendTypeLabel LN: 1003 => in-case of exception,
> we fall back to name.length() == 0 to determine anonymous, but here it looks
> fine as we check for #isLambda before this case.

Agree.

> - RenameTypeProcessor#getCurrentElementName => checked the callers and it
> looked harmless

Yes, RenameType doesn't make sense on a lambda type. But since isAnonymous() no longer returns true for lambda types, I had to update RefactoringAvailabilityTester#isRenameAvailable(IType) and a few other similar methods there.

> - JavaElementLinkedLabelComposer#getElementName LN: 131 => The Java element
> can be Lambda or anonymous, should this be modified?

Fixed comment and changed code path in JavaElementLabelComposer#appendTypeLabel(IType, long) to avoid calling this method for lambdas.


In AbstractHierarchyViewerSorter, we better add lambda types to the ANONYM category. In AddJavaDocStubAction, we have to disable the action for lambda types and for lambda methods.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=e64ec1eddfd69aeabf6de8ab7229afbe43e09073
The isLambda() API is only available since version 3.10 in org.eclipse.jdt.core, so this JDT UI's Require-Bundle line is not correct:   

org.eclipse.jdt.core;bundle-version="[3.9.0,4.0.0)",

This causes Gerrit patches against JDT UI to automatically fail. Also, for some reason I can't reopen this bug, so hopefully someone can do that for me, please.
(In reply to Timo Kinnunen from comment #4)
Thanks for noticing, fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=90ec0b2dcc1b979ad72f79675105294f2215c62f
Thanks, let's see what happens in Gerrit!
Oh dear... isLambda() Javadoc claims @since 3.10 but I looked inside the IType.class from org.eclipse.jdt.core_3.10.0.v20140422-1047.jar and there is no isLambda() method there, hence Gerrit still fails. I'm not sure what the correct fix is now, actually. But I know It Doesn't Work.
(In reply to Timo Kinnunen from comment #7)
> Oh dear... isLambda() Javadoc claims @since 3.10 but I looked inside the
> IType.class from org.eclipse.jdt.core_3.10.0.v20140422-1047.jar and there is
> no isLambda() method there, hence Gerrit still fails. I'm not sure what the
> correct fix is now, actually. But I know It Doesn't Work.

That sounds like Gerrit compiles against the last I-build. But the new IType#isLambda() API was only released a few hours later. Sorry, but it looks like we have to wait for the next I-build to get that in shape again (Sunday night).
Wow, that sounds... really screwy. Did I stumble into a difference between OSGi and Maven versioning? Or should jdt.core have bumped their version to 3.11 when adding the isLambda-API? An unsatisfiable dependency sounds to me like how this thing should have failed, correctly.
