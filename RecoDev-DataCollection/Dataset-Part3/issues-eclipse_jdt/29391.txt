I'm not sure whether or not this refactoring is supposed to generate code with 
errors.... 

1. Execute "move to top level" on TestRefactore->Foo

2. The visibility of ABC is not modified, hence the refactored code does not 
compile.

public class TestRefactor
{
	private final static int ABC=1;

	class Foo
	{
		int foo()
		{
			return  TestRefactor.ABC;
		}
	}
}

I'm not sure whether or not this refactoring is supposed to generate code with 
errors.... 

1. Execute "move to top level" on TestRefactore->Foo

2. The visibility of ABC is not modified, hence the refactored code does not 
compile.

public class TestRefactor
{
	private final static int ABC=1;

	class Foo
	{
		int foo()
		{
			return  TestRefactor.ABC;
		}
	}
}
sometimes to avoid generating errors you'd need a lot of analysis

this case we could cover however
you'll get a warning - it'll not modify the visibility of ABC (that's our 
policy)
to be investigated
can't commit to this
This works in I20100629-0800, visibility of ABC is changed to default.
Marking this as Fixed.
