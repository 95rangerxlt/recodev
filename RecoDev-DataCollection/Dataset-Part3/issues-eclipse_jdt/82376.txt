Enclosed patches to add API to create a working set new wizard. The API also
allows passing in an array of working set ids which limit the set of available
new pages.

Enclosed patches to add API to create a working set new wizard. The API also
allows passing in an array of working set ids which limit the set of available
new pages.
Created attachment 16988
Patch against workbench
Created attachment 16989
Patch against tests to make use of new API
Patch applied.  The following code in
AbstractWorkingSetManager.createWorkingSetNewWizard looks suspect.
Shouldn't it be checking that all descriptors have a page class name (i.e. is
editable).  This could also use descriptor.isEditable().

	public IWorkingSetNewWizard createWorkingSetNewWizard(String[] workingSetIds) {
		WorkingSetDescriptor[] descriptors= getSupportedDescriptors(workingSetIds);
		for (int i= 0; i < descriptors.length; i++) {
			if (descriptors[i].getPageClassName() != null)
				return new WorkingSetNewWizard(descriptors);
		}
		return null;
	}
Correct. The code should look like this:

public IWorkingSetNewWizard createWorkingSetNewWizard(String[] workingSetIds) {
	WorkingSetDescriptor[] descriptors= getSupportedEditableDescriptors(workingSetIds);
	if (descriptors.length == 0)
		return null;
	return new WorkingSetNewWizard(descriptors);
}


private static WorkingSetDescriptor[] getSupportedEditableDescriptors(String[]
supportedWorkingSetIds) {
	WorkingSetDescriptor[] allDescriptors=
WorkbenchPlugin.getDefault().getWorkingSetRegistry().getWorkingSetDescriptors();
	List result= new ArrayList(allDescriptors.length);
	for (int i= 0; i < allDescriptors.length; i++) {
		WorkingSetDescriptor descriptor= allDescriptors[i];
		if (isSupported(descriptor, supportedWorkingSetIds) && descriptor.isEditable()) {
			result.add(descriptor);
		}
	}
	return (WorkingSetDescriptor[])result.toArray(new
WorkingSetDescriptor[result.size()]);
}

private static boolean isSupported(WorkingSetDescriptor descriptor, String[]
supportedWorkingSetIds) {
	if (supportedWorkingSetIds == null)
		return true;
	final String id= descriptor.getId();
	for (int i= 0; i < supportedWorkingSetIds.length; i++) {
		if (supportedWorkingSetIds[i].equals(id))
			return true;
	}
	return false;
}	

This implementation is O(N^2), so I've changed it to look up the descriptors by
id, or get all editable descriptors if the arg is null.

Code is:
    private static WorkingSetDescriptor[] getSupportedEditableDescriptors(
            String[] supportedWorkingSetIds) {
        WorkingSetRegistry registry = WorkbenchPlugin.getDefault()
                .getWorkingSetRegistry();
        if (supportedWorkingSetIds == null) {
            return registry.getNewPageWorkingSetDescriptors();
        }
        List result = new ArrayList(supportedWorkingSetIds.length);
        for (int i = 0; i < supportedWorkingSetIds.length; i++) {
            WorkingSetDescriptor desc = registry
                    .getWorkingSetDescriptor(supportedWorkingSetIds[i]);
            if (desc != null && desc.isEditable()) {
                result.add(desc);
            }
        }
        return (WorkingSetDescriptor[]) result
                .toArray(new WorkingSetDescriptor[result.size()]);
    }

I've also changed the test to use the following.  It wasn't going through the
manager before.
        fWizard = getWorkbench().getWorkingSetManager().createWorkingSetNewWizard();

Dirk, can you please verify?

Nick, agree that this is a better implementation. 

Verified implementation in my workspace.


