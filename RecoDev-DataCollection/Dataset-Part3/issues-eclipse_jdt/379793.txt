Build Identifier: Version: 3.8.0 Build id: I20120516-2100

Every time I try to format the source for the attached file eclipse hangs.
I will attach a zip containing the file and the exported formatter-xml.

My Java-Version:
  java version "1.7.0_06-ea"
  Java(TM) SE Runtime Environment (build 1.7.0_06-ea-b09)
  Java HotSpot(TM) Server VM (build 23.0-b21, mixed mode)

This is not the only source - but with this I can reproduce it always.


Reproducible: Always

Build Identifier: Version: 3.8.0 Build id: I20120516-2100

Every time I try to format the source for the attached file eclipse hangs.
I will attach a zip containing the file and the exported formatter-xml.

My Java-Version:
  java version "1.7.0_06-ea"
  Java(TM) SE Runtime Environment (build 1.7.0_06-ea-b09)
  Java HotSpot(TM) Server VM (build 23.0-b21, mixed mode)

This is not the only source - but with this I can reproduce it always.


Reproducible: Always
Created attachment 215758
java-source-file and formatter-xml
I am able to reproduce this in the recent RC1 builds as well as previous 3.8 milestones release. This must have been introduces during 3.7 time frame. Versions 3.6.x don't seem to have this problem while 3.7.1 and 3.7.2 are buggy.
Ayush, can we have a quick assessment of what introduced this bug and
what our options are. TIA.
Created attachment 215761
Thread dumps

Attaching the thread dumps taken in a span of ~3 mins. At a quick glance, I don't see any deadlocks.
Created attachment 215762
Thread dump as non-patch

Some issue with the previous attachment.
Phew. Finally figured out that this is reproduced only with compliance 1.7, and happens because of the presence of try-with-resources statement in a nested if.
Deleting the twr from the code below makes formatter work ok.

Reduced source:
package at.jps.mailserver.gui;


public class SettingsPanel{
 
  void jbtnJDBCTest_actionPerformed(final ActionEvent e) {

    if ((driverClasses != null) && (JDBCURL != null)) {

      if (test == true) {

        // try to establish connection

        try (final Connection connection = DriverManager.getConnection(JDBCURL);) {
          test = (connection != null);
          if (test == true) {
            jTextArea1.setText("The test was completeted successfully!");
          }
        } catch (final SQLException sx) {
          jTextArea1
            .setText("the connection to the JDBC Datasource failed\nthe URL seems to be either wrong or incomplete\n or the server cannot be reached");
        }
      }
    } else {
      jTextArea1.setText("Either drivername or URL is missing !");
    }
  }

}

I'm still going around in circles trying to see why it hangs.
(In reply to comment #6)
I think it is the placement of the ';' is causing the problem. Remove the ';' at the end of the resources and it seems to work fine.
Created attachment 215767
Proposed patch

Ayush, Please see if this could be a fix and let me know if you can take it forward.
Created attachment 215789
proposed fix v1.0 + regression tests

The problem is that the semicolon is being wrapped using the alignment of the try with resources, which is causing the formatter to go in an endless loop, because the semicolon is placed at line 80, exactly at the line wrapping position. The semicolon should be placed after exiting from the alignment of twr.
(In reply to comment #8)
> Created attachment 215767 [details]
> Proposed patch
> 
> Ayush, Please see if this could be a fix and let me know if you can take it
> forward.

Oops I didn't notice this patch. You didn't tell me you were looking into this bug. :(
(In reply to comment #8)
> Created attachment 215767 [details]
> Proposed patch
> 
> Ayush, Please see if this could be a fix and let me know if you can take it
> forward.

I don't think we need to put the insertion of the last semicolon into the alignment loop. Aligning the whole thing and then inserting the dangling semicolon seems more straightforward to me. Anyhow, since you've already investigated this, please review my patch. TIA.
This looks like a good candidate for RC2 - Tentatively tagging as such.

Stephan, please also review the fix. TIA.
Thanks for the quick investigation Ayush & Satyam.
Patch looks good. +1 for RC2.
Patch looks good. Ayush, please release for 3.8 RC2.

Dani, this formatter bug results in a hang and should be back
ported.
Released in master via commit c0469eab51d719c9db50006771869e2887035ef3
Will be reopened if backport request is approved.
(In reply to comment #15)

> Dani, this formatter bug results in a hang and should be back
> ported.

Did I say *that* ? :)
+1 to backport to R3_7_maintenance and R3_6_maintenance_Java7.
Reopening for backport
Released in 3.7.2+ and 3.6.2+J7 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_7_maintenance&id=bc297b5ba5ce65d04a10e1d08fe0c8abe02c58e6 and http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_6_maintenance_Java7&id=f4f6ce25213802ef8d63ed0a83e5e0e2b60e306f
Verified for 3.8 RC2 with build I20120524-2100.
