During editing, while typing an annotation but before the annotation type was imported into the code, I received many "processor failed during reconcile" entries due to an NPE.  The relevant part of the stack trace follows.

The problem is probably that, due to the work we've done in compiler resilience for JSR269, we now are encountering more recovered bindings.  The code calls Factory.createReferenceType() and dereferences the result without a null check; but createReferenceType() returns null if the binding passed in is recovered.  The calling code needs a null check.

This is a regression in M6, not present in M5.

java.lang.NullPointerException
	at org.eclipse.jdt.apt.core.internal.env.AbstractCompilationEnv.getAnnotationTypes(AbstractCompilationEnv.java:275)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.dispatchToFileBasedProcessor(APTDispatchRunnable.java:602)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.access$0(APTDispatchRunnable.java:598)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable$ReconcileEnvCallback.run(APTDispatchRunnable.java:77)
	at org.eclipse.jdt.apt.core.internal.env.ReconcileEnv$CallbackRequestor.acceptBinding(ReconcileEnv.java:135)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:759)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:474)
	at org.eclipse.jdt.core.dom.ASTParser.createASTs(ASTParser.java:733)
	at org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv.createASTs(BaseProcessorEnv.java:852)
	at org.eclipse.jdt.apt.core.internal.env.ReconcileEnv.openPipeline(ReconcileEnv.java:108)
	at org.eclipse.jdt.apt.core.internal.env.AbstractCompilationEnv.newReconcileEnv(AbstractCompilationEnv.java:97)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.reconcile(APTDispatchRunnable.java:211)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTDuringReconcile(APTDispatchRunnable.java:159)
	at org.eclipse.jdt.apt.core.internal.AptCompilationParticipant.reconcile(AptCompilationParticipant.java:223)

During editing, while typing an annotation but before the annotation type was imported into the code, I received many "processor failed during reconcile" entries due to an NPE.  The relevant part of the stack trace follows.

The problem is probably that, due to the work we've done in compiler resilience for JSR269, we now are encountering more recovered bindings.  The code calls Factory.createReferenceType() and dereferences the result without a null check; but createReferenceType() returns null if the binding passed in is recovered.  The calling code needs a null check.

This is a regression in M6, not present in M5.

java.lang.NullPointerException
	at org.eclipse.jdt.apt.core.internal.env.AbstractCompilationEnv.getAnnotationTypes(AbstractCompilationEnv.java:275)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.dispatchToFileBasedProcessor(APTDispatchRunnable.java:602)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.access$0(APTDispatchRunnable.java:598)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable$ReconcileEnvCallback.run(APTDispatchRunnable.java:77)
	at org.eclipse.jdt.apt.core.internal.env.ReconcileEnv$CallbackRequestor.acceptBinding(ReconcileEnv.java:135)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:759)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:474)
	at org.eclipse.jdt.core.dom.ASTParser.createASTs(ASTParser.java:733)
	at org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv.createASTs(BaseProcessorEnv.java:852)
	at org.eclipse.jdt.apt.core.internal.env.ReconcileEnv.openPipeline(ReconcileEnv.java:108)
	at org.eclipse.jdt.apt.core.internal.env.AbstractCompilationEnv.newReconcileEnv(AbstractCompilationEnv.java:97)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.reconcile(APTDispatchRunnable.java:211)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTDuringReconcile(APTDispatchRunnable.java:159)
	at org.eclipse.jdt.apt.core.internal.AptCompilationParticipant.reconcile(AptCompilationParticipant.java:223)
Fixed in HEAD by adding appropriate null checks.
These changes have been in since 1st week of M6, how didn't we detect the issue sooner ? 
The changes look safe, but I do not see any corresponding regression tests.

Given the 5 weeks without detecting it, I am tempted to say it could wait until early M7.
Ok, there will be a M6 rebuild, so we might as well put this safe change in as well.

+1 for 3.4M6
The 5 weeks without detecting it is my fault; I was focused on automated testing and not doing enough manual testing.  This doesn't show up in the automated tests, firstly because we don't have any that reconcile code containing unresolved annotation types, and secondly because even if we did it would just have been a log entry and our tests don't check for log entries.  And unfortunately, the use case for annotations is in J2EE and as we know most of the J2EE users don't pick up our code in between milestone releases.

I will add an automated regression test for this, but wanted to get the code fix in.  (FWIW, I've stepped through the unfixed and fixed code in the debugger and confirmed that the fix is doing what I would expect.)

Per Philippe's comment, I will tag the map files and release for M6.
