200211216
in a project, create a src folder and another src folder nested in it
move the outer one to another project
boom, both are moved

need to see if it's us or jcore

200211216
in a project, create a src folder and another src folder nested in it
move the outer one to another project
boom, both are moved

need to see if it's us or jcore
IMO it is ok moving both. But we have to check what refactoring does to the 
build path.
(same issue as in bug 28526 really)
IPackageFragmentRoot is not an ISourceManipulation
so all these routines for reorg are now implemented in the ui land, which is
suboptimal i think

everytime something fundamental changes (like the fact that you can nest source
folders now), we have to do work that is not really ui work

Phillippe, can deeper reason why IPackageFragmentRoot is not an
ISourceManipulation? Then, we could simply call 'delete/rename/copy/move' 
and jcore, which is in a much better position to do it, would do the right thing
Added the following API on IPackageFragmentRoot:
/**
 * Moves the resource of this package fragment root to the destination path
 * as specified by <code>IResource.move(IPath,int,IProgressMonitor)</code>
 * but excluding nested source folders.
 * <p>
 * If specified, update the raw classpaths of all Java projects referring to
 * this root's resource by removing the corresponding classpath entries on
 * the raw classpaths and update the classpath of the destination's project.
 * If a non-<code>null</code> sibling is specified, a copy of this root's
 * classpath entry is inserted before the sibling on the destination
 * project's raw classpath. If <code>null</code> is specified, the classpath
 * entry is added at the end of the destination project's raw classpath.
 * </p>
 * 
 * @param destination the destination path
 * @param updateFlags bit-wise or of update flag constants
 * (<code>FORCE</code>, <code>KEEP_HISTORY</code> and <code>SHALLOW</code>)
 * @param updateClasspath whether the classpaths of the referring projects
 * and destination project should be updated
 * @param sibling the classpath entry before which a copy of the classpath
 * entry should be inserted
 * @param monitor a progress monitor
 * 
 * @exception JavaModelException if this root could not be moved. Reasons
 * include:
 * <ul>
 * <li> This root does not exist (ELEMENT_DOES_NOT_EXIST)</li>
 * <li> A <code>CoreException</code> occurred while copying the
 * resource</li>
 * <li> This root is external (INVALID_RESOURCE_TYPE)</li>
 * <li> The destination is not in a Java project and
 * <code>updateClasspath</code> was specified (INVALID_DESTINATION)</li>
 * <li> The sibling is not a classpath entry on the destination project's
 * raw classpath (INVALID_SIBLING)</li>
 * <li> The same classpath entry already exists on the destination project's
 * classpath (NAME_COLLISION) and <code>updateFlags</code> has not been
 * specified as <code>FORCE</code>
 * </ul>
 * @see IResource#move
 * @since 2.1
 */
void move(IPath destination, int updateFlags, boolean updateClasspath, 
IClasspathEntry sibling, IProgressMonitor monitor) throws JavaModelException;

Moving back to JDT/UI to use this new API.
fixed
thanks
