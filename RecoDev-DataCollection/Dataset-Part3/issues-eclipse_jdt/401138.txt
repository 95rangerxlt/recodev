Per the javadoc for org.eclipse.jdt.internal.compiler.apt.model.ElementsImpl#getAllAnnotations(Element), "Annotations are inherited only if the annotation type is meta-annotated with @Inherited". However, the check for the @Inherited meta-annotation does not occur, and indeed all annotations on super classes of the class represented by element are returned, regardless of whether they are annotated with @Inherited.

Steps To Reproduce:
1. create annotation @Foo which is *not* annotated with @Inherited  
2. create annotation processor with @SupportedAnnotationTypes("*"), and have it call processingEnv.getElementUtils().getAllAnnotationMirrors(element) for each root element, and print out the results (or use a debugger to see what it gets)
3. use annotation and processor like this:
   a. create BaseClass and apply the annotation @Foo
   b. create SubClass inheriting BaseClass.
4. The processor will be told that SubClass has the @Foo annotation on it.

Per the javadoc for org.eclipse.jdt.internal.compiler.apt.model.ElementsImpl#getAllAnnotations(Element), "Annotations are inherited only if the annotation type is meta-annotated with @Inherited". However, the check for the @Inherited meta-annotation does not occur, and indeed all annotations on super classes of the class represented by element are returned, regardless of whether they are annotated with @Inherited.

Steps To Reproduce:
1. create annotation @Foo which is *not* annotated with @Inherited  
2. create annotation processor with @SupportedAnnotationTypes("*"), and have it call processingEnv.getElementUtils().getAllAnnotationMirrors(element) for each root element, and print out the results (or use a debugger to see what it gets)
3. use annotation and processor like this:
   a. create BaseClass and apply the annotation @Foo
   b. create SubClass inheriting BaseClass.
4. The processor will be told that SubClass has the @Foo annotation on it.
This is fixed in commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=2d801bf770aaf09259e660518c988fbfdf829ec5, available on the BETA_JAVA8 branch.
Resolved.
