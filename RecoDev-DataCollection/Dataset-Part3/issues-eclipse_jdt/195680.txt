Build ID: I20070621-1340

Steps To Reproduce:
1. Run a test suite in thd debugger with the 'Keep JUnit running after a test run when debugging' option selected.

2. Rerun an individual test which will behave differently on a subsequent run (succeed after initial failure or vice-versa).

3. Once the JUnit pane's green / red bar changes to red, it will never change back to green, even though all tests show that they have completed successfully. Additionally, the Failure count will increase with each test failure and never decrease when a failed test case succeeds upon rerunning.

The status bar never changed back to green in Eclipse 3.1, but did in 3.2, so perhaps that design decision has been reversed. But the monotonically increasing failure count seems incorrect.

More information:
It does not seem to make any difference whether the changed behavior is due to editing and hot-code-replace or due to side effects changing the test preconditions.

Example JUnit Test - this test will maintain state between runs and alternate between success and failure, exposing the problem.
---------------------------
package junk;

import junit.framework.TestCase;

public class TestEclipseJunit extends TestCase
{
    private static boolean fail = false;
    
    public void testTest() {
        if (fail)
            fail("Failed this time");
    }
    
    public void tearDown() {
        fail = !fail;
    }
}

Build ID: I20070621-1340

Steps To Reproduce:
1. Run a test suite in thd debugger with the 'Keep JUnit running after a test run when debugging' option selected.

2. Rerun an individual test which will behave differently on a subsequent run (succeed after initial failure or vice-versa).

3. Once the JUnit pane's green / red bar changes to red, it will never change back to green, even though all tests show that they have completed successfully. Additionally, the Failure count will increase with each test failure and never decrease when a failed test case succeeds upon rerunning.

The status bar never changed back to green in Eclipse 3.1, but did in 3.2, so perhaps that design decision has been reversed. But the monotonically increasing failure count seems incorrect.

More information:
It does not seem to make any difference whether the changed behavior is due to editing and hot-code-replace or due to side effects changing the test preconditions.

Example JUnit Test - this test will maintain state between runs and alternate between success and failure, exposing the problem.
---------------------------
package junk;

import junit.framework.TestCase;

public class TestEclipseJunit extends TestCase
{
    private static boolean fail = false;
    
    public void testTest() {
        if (fail)
            fail("Failed this time");
    }
    
    public void tearDown() {
        fail = !fail;
    }
}
Can you check the .log file?
I just checked the .log file, and nothing appears when my test case is run.
(In reply to comment #0)
> The status bar never changed back to green in Eclipse 3.1, but did in 3.2, so
> perhaps that design decision has been reversed. But the monotonically
> increasing failure count seems incorrect.

The 3.2 behavior is correct. 3.3 unfortunately had a bug in the rerun handling.
Fixed in HEAD of TestRunSession (in registerTestFailed(..)).

Martin, the fix would be trivial to backport to 3.3.1. It's a regression, but it's not really a major problem since only the failure statistics panel is affected.
