BETA_JAVA8:
-----------

The following program when compiled and run with branch head, produces:

Exception in thread "main" java.lang.BootstrapMethodError: call site initialization exception
	at java.lang.invoke.CallSite.makeSite(CallSite.java:298)
	at java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:294)
	at X.main(X.java:7)
Caused by: java.lang.NullPointerException
	at java.lang.invoke.MethodHandleInfo.<init>(MethodHandleInfo.java:53)
	at java.lang.invoke.AbstractValidatingLambdaMetafactory.<init>(AbstractValidatingLambdaMetafactory.java:110)
	at java.lang.invoke.InnerClassLambdaMetafactory.<init>(InnerClassLambdaMetafactory.java:109)
	at java.lang.invoke.LambdaMetafactory.metaFactory(LambdaMetafactory.java:188)
	at java.lang.invoke.CallSite.makeSite(CallSite.java:283)
	... 2 more

------------------

// --
interface I {
    Object copy(int [] ia);
}

class X  {
    public static void main(String [] args) {
        I i = int[]::<String>clone;
        i.copy(new int[10]);
    }
}

// ---

Thanks to Andy Clement for reporting this.

BETA_JAVA8:
-----------

The following program when compiled and run with branch head, produces:

Exception in thread "main" java.lang.BootstrapMethodError: call site initialization exception
	at java.lang.invoke.CallSite.makeSite(CallSite.java:298)
	at java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:294)
	at X.main(X.java:7)
Caused by: java.lang.NullPointerException
	at java.lang.invoke.MethodHandleInfo.<init>(MethodHandleInfo.java:53)
	at java.lang.invoke.AbstractValidatingLambdaMetafactory.<init>(AbstractValidatingLambdaMetafactory.java:110)
	at java.lang.invoke.InnerClassLambdaMetafactory.<init>(InnerClassLambdaMetafactory.java:109)
	at java.lang.invoke.LambdaMetafactory.metaFactory(LambdaMetafactory.java:188)
	at java.lang.invoke.CallSite.makeSite(CallSite.java:283)
	... 2 more

------------------

// --
interface I {
    Object copy(int [] ia);
}

class X  {
    public static void main(String [] args) {
        I i = int[]::<String>clone;
        i.copy(new int[10]);
    }
}

// ---

Thanks to Andy Clement for reporting this.
I'll take a look. Thanks for the report Andy.
Jesper, do you have a crisp explanation for why this does not work ?
I understand how it can be fixed particularly looking at javac code
generation, but would like to know the reason why this fails in the
first place.

Our code:

// ---

C:\jtests>C:\work\lambda-8-b81-windows-x64-12_mar_2013\jdk1.8.0\bin\javap -verbose -private -cp c:\jtests X.class 
Classfile /C:/jtests/X.class
  Last modified Apr 25, 2013; size 952 bytes
  MD5 checksum 464f99aab9e547442e16306b86fe6707
  Compiled from "X.java"
class X
  SourceFile: "X.java"
  BootstrapMethods:
    0: #38 invokestatic java/lang/invoke/LambdaMetafactory.metaFactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
      Method arguments:
        #40 invokeinterface I.copy:([I)Ljava/lang/Object;
        #45 invokevirtual java/lang/Object.clone:()Ljava/lang/Object;
        #46 ([I)Ljava/lang/Object;
  InnerClasses:
       public static final #52= #48 of #50; //Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
  minor version: 0
  major version: 52
  flags: ACC_SUPER
Constant pool:
   #1 = Class              #2             //  X
   #2 = Utf8               X
   #3 = Class              #4             //  java/lang/Object
   #4 = Utf8               java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = Utf8               Code
   #8 = Methodref          #3.#9          //  java/lang/Object."<init>":()V
   #9 = NameAndType        #5:#6          //  "<init>":()V
  #10 = Utf8               LineNumberTable
  #11 = Utf8               LocalVariableTable
  #12 = Utf8               this
  #13 = Utf8               LX;
  #14 = Utf8               main
  #15 = Utf8               ([Ljava/lang/String;)V
  #16 = NameAndType        #17:#18        //  lambda:()LI;
  #17 = Utf8               lambda
  #18 = Utf8               ()LI;
  #19 = InvokeDynamic      #0:#16         //  #0:lambda:()LI;
  #20 = InterfaceMethodref #21.#23        //  I.copy:([I)Ljava/lang/Object;
  #21 = Class              #22            //  I
  #22 = Utf8               I
  #23 = NameAndType        #24:#25        //  copy:([I)Ljava/lang/Object;
  #24 = Utf8               copy
  #25 = Utf8               ([I)Ljava/lang/Object;
  #26 = Utf8               args
  #27 = Utf8               [Ljava/lang/String;
  #28 = Utf8               i
  #29 = Utf8               LI;
  #30 = Utf8               SourceFile
  #31 = Utf8               X.java
  #32 = Methodref          #33.#35        //  java/lang/invoke/LambdaMetafactory.metaFactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
  #33 = Class              #34            //  java/lang/invoke/LambdaMetafactory
  #34 = Utf8               java/lang/invoke/LambdaMetafactory
  #35 = NameAndType        #36:#37        //  metaFactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
  #36 = Utf8               metaFactory
  #37 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
  #38 = MethodHandle       #6:#32         //  invokestatic java/lang/invoke/LambdaMetafactory.metaFactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
  #39 = Utf8               BootstrapMethods
  #40 = MethodHandle       #9:#20         //  invokeinterface I.copy:([I)Ljava/lang/Object;
  #41 = Methodref          #3.#42         //  java/lang/Object.clone:()Ljava/lang/Object;
  #42 = NameAndType        #43:#44        //  clone:()Ljava/lang/Object;
  #43 = Utf8               clone
  #44 = Utf8               ()Ljava/lang/Object;
  #45 = MethodHandle       #5:#41         //  invokevirtual java/lang/Object.clone:()Ljava/lang/Object;
  #46 = MethodType         #25            //  ([I)Ljava/lang/Object;
  #47 = Utf8               InnerClasses
  #48 = Class              #49            //  java/lang/invoke/MethodHandles$Lookup
  #49 = Utf8               java/lang/invoke/MethodHandles$Lookup
  #50 = Class              #51            //  java/lang/invoke/MethodHandles
  #51 = Utf8               java/lang/invoke/MethodHandles
  #52 = Utf8               Lookup
{
  X();
    flags: 
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0       
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return        
      LineNumberTable:
        line 5: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0       5     0  this   LX;

  public static void main(java.lang.String[]);
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=2, args_size=1
         0: invokedynamic #19,  0             // InvokeDynamic #0:lambda:()LI;
         5: astore_1      
         6: aload_1       
         7: bipush        10
         9: newarray       int
        11: invokeinterface #20,  2           // InterfaceMethod I.copy:([I)Ljava/lang/Object;
        16: pop           
        17: return        
      LineNumberTable:
        line 7: 0
        line 8: 6
        line 9: 17
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0      18     0  args   [Ljava/lang/String;
               6      12     1     i   LI;
}

// -- Javac code:


C:\jtests>C:\work\lambda-8-b81-windows-x64-12_mar_2013\jdk1.8.0\bin\javap -verbose -private -cp c:\jtests X.class 
Classfile /C:/jtests/X.class
  Last modified Apr 25, 2013; size 913 bytes
  MD5 checksum d0cbab7db428e7d88a1c8cef23615d15
  Compiled from "X.java"
class X
  SourceFile: "X.java"
  InnerClasses:
       public static final #45= #44 of #48; //Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
  BootstrapMethods:
    0: #19 invokestatic java/lang/invoke/LambdaMetafactory.metaFactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
      Method arguments:
        #20 invokeinterface I.copy:([I)Ljava/lang/Object;
        #21 invokestatic X.lambda$0$bridge:([I)Ljava/lang/Object;
        #22 ([I)Ljava/lang/Object;
  minor version: 0
  major version: 52
  flags: ACC_SUPER
Constant pool:
   #1 = Methodref          #6.#17         //  java/lang/Object."<init>":()V
   #2 = InvokeDynamic      #0:#23         //  #0:lambda$:()LI;
   #3 = InterfaceMethodref #24.#25        //  I.copy:([I)Ljava/lang/Object;
   #4 = Methodref          #26.#27        //  "[I".clone:()Ljava/lang/Object;
   #5 = Class              #28            //  X
   #6 = Class              #29            //  java/lang/Object
   #7 = Utf8               <init>
   #8 = Utf8               ()V
   #9 = Utf8               Code
  #10 = Utf8               LineNumberTable
  #11 = Utf8               main
  #12 = Utf8               ([Ljava/lang/String;)V
  #13 = Utf8               lambda$0$bridge
  #14 = Utf8               ([I)Ljava/lang/Object;
  #15 = Utf8               SourceFile
  #16 = Utf8               X.java
  #17 = NameAndType        #7:#8          //  "<init>":()V
  #18 = Utf8               BootstrapMethods
  #19 = MethodHandle       #6:#30         //  invokestatic java/lang/invoke/LambdaMetafactory.metaFactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
  #20 = MethodHandle       #9:#3          //  invokeinterface I.copy:([I)Ljava/lang/Object;
  #21 = MethodHandle       #6:#31         //  invokestatic X.lambda$0$bridge:([I)Ljava/lang/Object;
  #22 = MethodType         #14            //  ([I)Ljava/lang/Object;
  #23 = NameAndType        #32:#33        //  lambda$:()LI;
  #24 = Class              #34            //  I
  #25 = NameAndType        #35:#14        //  copy:([I)Ljava/lang/Object;
  #26 = Class              #36            //  "[I"
  #27 = NameAndType        #37:#38        //  clone:()Ljava/lang/Object;
  #28 = Utf8               X
  #29 = Utf8               java/lang/Object
  #30 = Methodref          #39.#40        //  java/lang/invoke/LambdaMetafactory.metaFactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
  #31 = Methodref          #5.#41         //  X.lambda$0$bridge:([I)Ljava/lang/Object;
  #32 = Utf8               lambda$
  #33 = Utf8               ()LI;
  #34 = Utf8               I
  #35 = Utf8               copy
  #36 = Utf8               [I
  #37 = Utf8               clone
  #38 = Utf8               ()Ljava/lang/Object;
  #39 = Class              #42            //  java/lang/invoke/LambdaMetafactory
  #40 = NameAndType        #43:#47        //  metaFactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
  #41 = NameAndType        #13:#14        //  lambda$0$bridge:([I)Ljava/lang/Object;
  #42 = Utf8               java/lang/invoke/LambdaMetafactory
  #43 = Utf8               metaFactory
  #44 = Class              #49            //  java/lang/invoke/MethodHandles$Lookup
  #45 = Utf8               Lookup
  #46 = Utf8               InnerClasses
  #47 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
  #48 = Class              #50            //  java/lang/invoke/MethodHandles
  #49 = Utf8               java/lang/invoke/MethodHandles$Lookup
  #50 = Utf8               java/lang/invoke/MethodHandles
{
  X();
    flags: 
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0       
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return        
      LineNumberTable:
        line 5: 0

  public static void main(java.lang.String[]);
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=2, args_size=1
         0: invokedynamic #2,  0              // InvokeDynamic #0:lambda$:()LI;
         5: astore_1      
         6: aload_1       
         7: bipush        10
         9: newarray       int
        11: invokeinterface #3,  2            // InterfaceMethod I.copy:([I)Ljava/lang/Object;
        16: pop           
        17: return        
      LineNumberTable:
        line 7: 0
        line 8: 6
        line 9: 17

  static java.lang.Object lambda$0$bridge(int[]);
    flags: ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0       
         1: invokevirtual #4                  // Method "[I".clone:()Ljava/lang/Object;
         4: areturn       
      LineNumberTable:
        line 7: 0
}
The "equivalent" case in

// ---
interface I {
    YBase copy(Y ia);
}

class X  {
    public static void main(String [] args) {
        I i = Y::<String>copy;
        i.copy(new Y());
    }
}

class YBase {
	public YBase copy() {
		return this;
	}
}

class Y extends YBase {
	
}

// ----

works fine. Other than arrays are not real classes, I don't see a difference.
Looks like clone alone needs special treatment. The following works
ok: 

// --
interface I {
    int copy(int [] ia);
}

class X  {
    public static void main(String [] args) {
        I i = int[]::<String>hashCode;
        System.out.println(i.copy(new int[10]));
    }
}
// ---

Looking at JLS7, 10.7, since clone is supposed to be not inherited from
Object for arrays and is overridden with a public implementation it looks
like ECJ's code generation bypasses the virtual dispatch rules and tries
to reach into and invoke a replaced super method. Perhaps that explains
the observed failure.

I'll get on with a bridge method generation a la javac.
The bounded reference case triggers a different problem:

// ----
interface I {
    Object copy();
}

class X  {
    public static void main(String [] args) {
    	int [] x = new int[10];
    	I i = x::<String>clone;
        System.out.println(i.copy());
    }
}
// ----
produces:

Exception in thread "main" java.lang.ClassFormatError: Invalid method signature in class X referenced from constant pool index 19 in method X.main([Ljava/lang/String;)V
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2474)
	at java.lang.Class.getMethod0(Class.java:2715)
	at java.lang.Class.getMethod(Class.java:1622)
	at sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:555)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:537)

// -------------

javac is OK.
Fix and tests released here; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=ccf24ba3615c241f4b234ee572c67902c4cad252

For the problem reported in comment#5, I raised bug 406584
