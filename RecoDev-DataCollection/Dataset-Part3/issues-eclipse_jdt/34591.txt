Consider the example below:

- Select Test->Foo
- Refactor->"Convert nested type to top level"
- The code does not compile. 

public class Test
{
	public String bar2()
	{
		return "wee!";
	}
	public class Foo
	{
		
		public void bar()
		{
			new Runnable()
			{
				public void run()
				{
					System.out.println(bar2());
				}
			};
		}
	}
}

Consider the example below:

- Select Test->Foo
- Refactor->"Convert nested type to top level"
- The code does not compile. 

public class Test
{
	public String bar2()
	{
		return "wee!";
	}
	public class Foo
	{
		
		public void bar()
		{
			new Runnable()
			{
				public void run()
				{
					System.out.println(bar2());
				}
			};
		}
	}
}
Adam pls comment whether we have a deeper problem here
i'll grab it to my sandbox for investigation
no deeper problem - it should just check if 'this' is enough or 'Test.this' 
should be used. So it works ok if you don't have such classes inside (anonymous 
or double nested) or if the member class you're moving out is static.

i can fix it but it does not sound critical enough for 2.1

Erich?
If the fix is trivial then we can take it.
everything is easy if you have many test cases

you just have be careful to remeber that there are at least 6 cases (your 
report mentions 1 of them)

here are all 6 (we want to convert class Inner to top level):

class A
{
	public String bar2()
	{
		return "wee!";
	}
	public String bar3;
	
	public class Inner
	{
		
		public void bar0(){
			class Local{
				public void run()
				{
					System.out.println(bar2());
					bar3= "fred";
				}
			}
		}
		
		public void bar()
		{
			new Runnable()
			{
				public void run()
				{
					System.out.println(bar2());
					bar3= "fred";
				}
			};
		}
		class InnerInner{
			public void run()
			{
				System.out.println(bar2());
				bar3= "fred";
			}
		}
	}
}
Erich, ok to put in? The bar is green.
agreed not to put in because it's:
- not a regression,
- not a lost work scenario
- not a very common case
- not a 1 trivial liner

i have a fix and will put it in right after 2.1

fix lives in revision 1.36 of the MoveInnerToTopRefactoring.java file
i will use it after 2.1
reopening 
fixed

