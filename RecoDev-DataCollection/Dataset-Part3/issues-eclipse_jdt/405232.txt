Currently it doesn't recognize 1.8 as an option. There are probably other things to be taken care of as well. This bug is to make the batch compiler work in 1.8 mode with support for annotation processing.

Currently it doesn't recognize 1.8 as an option. There are probably other things to be taken care of as well. This bug is to make the batch compiler work in 1.8 mode with support for annotation processing.
I see this line in:

} else if (currentArg.equals("1.8") || currentArg.equals("8") || currentArg.equals("8.0")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$
					this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_8);


org.eclipse.jdt.internal.compiler.batch.Main ??

I think Satyam added it as part of commit: 2208491f1e360e4237b8017b36c8fa0890474137
(In reply to comment #1)
> I think Satyam added it as part of commit:
> 2208491f1e360e4237b8017b36c8fa0890474137

I missed that. But there is some more code in compiler.apt that is only looking for 1.6 (bug 405225)

As of now, that's not enough as demonstrated by bug 405225. Most probably the fix to the above bug should be enough for Java 8. But let's keep this bug for testing and verification of the fix in BETA_JAVA8.
Confirmed that I am able to compile and run a Java 8 program with eclipse command line compiler alright. Also, verified that the command line compiler's help displays 1.8 as part of supported source levels. So, at this point, I can't think of anything else that might be required. Marking this as resolved.
