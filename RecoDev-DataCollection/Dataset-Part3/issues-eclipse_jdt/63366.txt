When you are changing from calling a method to calling some other method, code 
assist will incorrectly insert the PARENS and argument names if the 
preference "Fill Argement Names on Completion" is enabled.  If this preference 
is disable, code assist is smarter at deciding when to insert "(<<CARET>>)"

For example:
arrayList.addAf<<CODE ASSIST>>(anObject);

This complete the method call to "addAfter", but should *not* 
insert "(object)".

When you are changing from calling a method to calling some other method, code 
assist will incorrectly insert the PARENS and argument names if the 
preference "Fill Argement Names on Completion" is enabled.  If this preference 
is disable, code assist is smarter at deciding when to insert "(<<CARET>>)"

For example:
arrayList.addAf<<CODE ASSIST>>(anObject);

This complete the method call to "addAfter", but should *not* 
insert "(object)".
I assume you are using "Completion Inserts", right? For me "Completion
Overwrites" fits better.
I am using completion inserts.  I don't even know what that option means.
instead of simply adding the proposal it removes the characters up to the
bracket or . Give it a try I think you might like it.

Window > Preferences > Java > Editor > Code Assist | top most preference
But JavaCompletionProposal.apply should still be smarter when overwriting - an
existing parameter list is never replaced and the behaviour described in comment
0 will still hit you.
sure. that's why the bug is assigned ;-)
> an existing parameter list is never replaced

I wouldn't expect the paremeters to be replaced in the scenario described.  The 
user is only trying to change which method is being called, which probably 
takes the same params or similar.  I think we all agree on this, but just being 
sure.
*** Bug 76889 has been marked as a duplicate of this bug. ***
*** Bug 77248 has been marked as a duplicate of this bug. ***
*** Bug 69264 has been marked as a duplicate of this bug. ***
*** Bug 97430 has been marked as a duplicate of this bug. ***
*** Bug 23497 has been marked as a duplicate of this bug. ***
This has been fixed a while ago:
- One can choose to not insert brackets by default by choosing
  'Completion overwrites' on the Java > Editor > Content Assist preference page.
- One can temporarily toggle that default by pressing the 'Ctrl' key while
  inserting the proposal.
- The Fill Argument Names on Completion preference no longer affects whether
  the brackets are inserted or not.
