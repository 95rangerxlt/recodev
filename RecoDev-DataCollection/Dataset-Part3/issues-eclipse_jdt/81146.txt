M4 test pass (I20041214-2000-gtk)

1. have the code in Test.java
- note ThrowAwayMethod is not static
2. Select ThrowAwayMethod and choose to move to new file
3. Choose to create field of the source type ('Test' in this case)

-> The moved annotation looks like the one in ThrowAwayMethod.java
(missing imports covered in bug 81135)

-> The moved annotation is treated like a normal type, but really shouldn't. An
annotation can't have a field of the origin type (i.e. it must be initialized to
a constant expression). The resulting annotation does not make sense.

-> We should disable creating the field completely.



--------- Test.java --------

package com.example.m4testing;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

public class Test {
	
	/**
	 * Declares a throwaway method that won't live long.
	 */
	@Retention(RetentionPolicy.SOURCE)
	@Target(ElementType.METHOD)
	@interface ThrowAwayMethod {
		
	}
	
	/**
	 * Execute da stuff.
	 * 
	 * @param inner the target
	 */
	@ThrowAwayMethod
	void method(Inner inner, int size) {
		if (inner.check()) {
			inner.set(this, inner.get());
		}
	}
	
	public void caller() {
		Inner inner= new Inner();
		
		method(inner, 4);
	}
}

--------- ThrowAwayMethod.java ----------

package com.example.m4testing;



@Retention(RetentionPolicy.SOURCE)
@Target(ElementType.METHOD)
@interface ThrowAwayMethod {

	/**
	 * Comment for <code>test</code>
	 */
	final Test test= new Test();

	/**
	 * @param test
	 */
	ThrowAwayMethod(Test test) {
		this.test= test;
	}
	
}

M4 test pass (I20041214-2000-gtk)

1. have the code in Test.java
- note ThrowAwayMethod is not static
2. Select ThrowAwayMethod and choose to move to new file
3. Choose to create field of the source type ('Test' in this case)

-> The moved annotation looks like the one in ThrowAwayMethod.java
(missing imports covered in bug 81135)

-> The moved annotation is treated like a normal type, but really shouldn't. An
annotation can't have a field of the origin type (i.e. it must be initialized to
a constant expression). The resulting annotation does not make sense.

-> We should disable creating the field completely.



--------- Test.java --------

package com.example.m4testing;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

public class Test {
	
	/**
	 * Declares a throwaway method that won't live long.
	 */
	@Retention(RetentionPolicy.SOURCE)
	@Target(ElementType.METHOD)
	@interface ThrowAwayMethod {
		
	}
	
	/**
	 * Execute da stuff.
	 * 
	 * @param inner the target
	 */
	@ThrowAwayMethod
	void method(Inner inner, int size) {
		if (inner.check()) {
			inner.set(this, inner.get());
		}
	}
	
	public void caller() {
		Inner inner= new Inner();
		
		method(inner, 4);
	}
}

--------- ThrowAwayMethod.java ----------

package com.example.m4testing;



@Retention(RetentionPolicy.SOURCE)
@Target(ElementType.METHOD)
@interface ThrowAwayMethod {

	/**
	 * Comment for <code>test</code>
	 */
	final Test test= new Test();

	/**
	 * @param test
	 */
	ThrowAwayMethod(Test test) {
		this.test= test;
	}
	
}
Fixed > 20050105
