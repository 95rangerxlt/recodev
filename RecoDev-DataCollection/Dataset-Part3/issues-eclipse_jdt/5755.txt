I can't find any of the classes in some of my packages in the Open Type(Ctrl-
Shift-T) dialog. They just aren't there... Class files exist for them.
20011106

I can't find any of the classes in some of my packages in the Open Type(Ctrl-
Shift-T) dialog. They just aren't there... Class files exist for them.
20011106
Pls verify:
- the classes are on the build path
- the build path is complete

Open type is using the index and we only index resources on the build path.
If it is an index problem try to delete the index files 
.metadata/.plugins/org.eclipse.jdt.core/*.index
By 'the classes are on the build path' do you mean 'the classes are on the 
build path of at least one of the projects in the workspace'? If so, the answer 
is yes. I don't know how to answer your question of whether the build path is 
complete, how can I get this information? The problem has since disappeared, 
all classes show up properly now. I have no idea what I did to fix it, but as a 
futher data point a full build of the workspace did NOT fix it, nor did exiting 
the workspace and restarting. This has happened to me before though...
>'the classes are on the build path' do you mean 'the classes are on the 
>build path of at least one of the projects in the workspace'? 
yes, for All Type to work being on one project's build path is required.

>I don't know how to answer your question of whether the build path is 
>complete, how can I get this information? 
this can't be automatically checked, but did you tweak the build class path in 
between "not working" and "working"

>as a futher data point a full build of the workspace did NOT fix it, 
the indexing is independing of compiling so this is consistent.

>nor did exiting 
>the workspace and restarting. 
the indexer performs a consistency check and this can recognize
some problem. To really see whether it is an indexer problem
you should throw away the indexes as described below. The indexer
will then reconstruct them.

>This has happened to me before though...
The next time the problem happens please zip up the workspace.

Moving to Java-Core so that they are also aware of this problem.
Could this rather be a caching issue in the UI ? Did you have to wait for 
indexing being finished, and then canceled the request ?

Will keep open for a while in case someone sees it again. I am not aware of 
such a defect other than this one report.
I had this happen again in a new workspace, and I have a reproduceable case. 
How I got in this state is the interesting part, so I'll describe it in detail, 
bear with me. If this is user error, please let me know.

1. Unzip eclipse drop in d:\eclipse
2. Create directory d:\eclipse\target
3. Copy d:\eclipse\plugins and d:\eclipse\install to d:\eclipse\target, in self-
hosting fashion.
4. Delete d:\eclipse\target\plugins\org.eclipse.jdt.ui.vcm
5. Start workbench with -platform d:\eclipse\target\plugins.
6. Define ECLIPSE_ROOT to be D:\eclipse
7. Create project P, and add org.eclipse.ui to the build path as an variable 
JAR, ECLIPSE_ROOT\plugins\org.eclipse.ui\workbench.jar
8. In Java perspective, press Ctrl-Shift-T. Type "ISel" and notice ISelection 
is in the list.
9. From dev.eclipse.org, add the project org.eclipse.jdt.ui.vcm to your 
workspace. It is broken due to incorrect project references.
10. Open one of the classes in org.eclipse.jdt.ui.vcm in a java editor.
11. Press Ctrl-Shift-T. ISelection is in the list.
12. Organize imports on the class you opened, and save (it should remove all 
the imports).
13. Press Ctrl-Shift-T. ISelection is not in the list anymore.
14. Go to the build path page for org.eclipse.jdt.ui.vcm and remove the 
incorrect references (they appear as closed projects, which is kind of weird, I 
understand the directories appear on the hard disk but this seems wrong). Hit 
OK.
15. Now that the build path for that project is 'fixed' (i.e. it doesn't have 
any bad entries in it, but it is still missing entries so there are compilation 
problems), press Ctrl-Shift-T. ISelection is still not in the list.

After I delete org.eclipse.jdt.ui.vcm, the class reappears in the list. Why did 
it disappear though? It is properly referenced from my P project and is on its 
build path without problems.
Was able to reproduce in 20020129.

The OrganizeImportsOperation has the side effect of caching the types visible 
to the project's compilation unit in the global TypeCache (because of a call to 
AllTypeSearchEngine.searchTypes(...)). Thus the next call to get all types 
returns the list of types used by the OrganizeImportsOperation, which is a 
subset of all types in the workspace.

Moving to JDT-UI.
The organize import action should go through the type cache, even if it is done 
properly.

In general I observe that the type cache is flushed too often. I rarely create 
new classes but the Open Type dialog is still slow because it recomputes the 
types.

Martin pls investigate in the OrganizeImport side effect. Adam pls investigate 
in the type cache flushing. We should internally run with an instrumented 
version that logs to stdout when the type cache is flushed.
there were several bugs in the type cache.
rewrote everything: AllTypesSearchEngine and TypeCache are now deprecated,
new class AllTypesCache.

added TestCase: AllTypesCacheTest

> 20205
