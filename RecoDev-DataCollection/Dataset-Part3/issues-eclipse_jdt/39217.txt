20030623

We have a new preference where the user can descide if 'is' should be taken for
boolean getters.
The logic is in the GetterSetterUtil. If you use this, no changes are needed.
From a quick search I saw that RenameFieldRefactoring.getNewGetterName still uses
NamingConventions.suggestGetterName. Either use the new preference setting or
change the implementation to use GetterSetterUtil

(b.t.w. the code in RenameFieldRefactoring.getNewGetterName looks bogus. It
always seems to return the same, regardless if the method was found in the first
line.)

20030623

We have a new preference where the user can descide if 'is' should be taken for
boolean getters.
The logic is in the GetterSetterUtil. If you use this, no changes are needed.
From a quick search I saw that RenameFieldRefactoring.getNewGetterName still uses
NamingConventions.suggestGetterName. Either use the new preference setting or
change the implementation to use GetterSetterUtil

(b.t.w. the code in RenameFieldRefactoring.getNewGetterName looks bogus. It
always seems to return the same, regardless if the method was found in the first
line.)
GetterSetterUtil is too limited
i need to get a getter name in a situation when it does not exist yet, and even 
the field does not exist yet. I only know the field name and type.
Make 
private static String getGetterName(IJavaProject project, String fieldName, int
lags, boolean isBoolean, String[] excludedNames){

public if you want...

fixed
bug 30906 explains the bogosity
