Some of the exceptions trown from a test cases may contain a really large
messages. Practically I saw that for remote exceptions thrown by some EJB's
running on Weblogic where message contain a complete stack trace on a server.
Currently, Eclipse's JUnit freeze on such cases doing something on remote
sockets between JUnit view and remote JUnit runner.

Here is the test that illustrates this issue:

public class ATest extends TestCase {

  public void test() throws Exception {
    StringBuffer sb = new StringBuffer();
    
    for( int i = 0; i<10000; i++) 
      sb.append( "12345123451234512345123451234512345123451234512345\n");
    System.err.println( "go!");
    throw new Exception( sb.toString());
  }
}

10000 is enough on my PC.

Some of the exceptions trown from a test cases may contain a really large
messages. Practically I saw that for remote exceptions thrown by some EJB's
running on Weblogic where message contain a complete stack trace on a server.
Currently, Eclipse's JUnit freeze on such cases doing something on remote
sockets between JUnit view and remote JUnit runner.

Here is the test that illustrates this issue:

public class ATest extends TestCase {

  public void test() throws Exception {
    StringBuffer sb = new StringBuffer();
    
    for( int i = 0; i<10000; i++) 
      sb.append( "12345123451234512345123451234512345123451234512345\n");
    System.err.println( "go!");
    throw new Exception( sb.toString());
  }
}

10000 is enough on my PC.
Erich, any comments ?
Ping...
Dirk, is it ping for Erich? I haven't seen much comments from him for quite
awhile. :-(
yes... erich is listening
Not clear what the best fix is, but we should understand the problem.
David can you please take a look.
The failure trace was stored in the RemoteTestRunnerClient as a String, and
grown with +=.  I tried making this a StringBuffer.  Results:

String with 2000 iterations: 16 seconds
String with 10000 iterations: lost patience

StringBuffer with 2000 iterations: 0 seconds
StringBuffer with 10000 iterations: 1 second.

Patch to come soon
Created attachment 20632
Proposed fix

Stores the failure trace in a StringBuffer, rather than a String--improves
performance drastically for large traces.
Released the patch to HEAD.

David, I saw that the same problem exists for fExpectedResult, fActualResult,
and fFailedRerunTrace. Could you please provide a patch that also fixes those
three fields?

Here's a test case for fExpectedResult:

public void test2() throws Exception {
	StringBuffer sb = new StringBuffer();
	for (int i = 0; i < 4000 /*10000*/; i++)
	    sb.append("12345123451234512345123451234512345123451234512345\n");
	System.err.println("go2!");
	assertEquals(sb.toString(), "234");
}
Created attachment 20689
Fixed fix

Added fix for suggested string fields, and eliminated the resulting
duplication.
Released second fix to HEAD.
