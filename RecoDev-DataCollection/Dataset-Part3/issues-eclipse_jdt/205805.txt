3.4

We want to push down the RenameResourceProcessor to LTK so that platform IDE and other clients can use it to rename a resource.

The RenameResourceProcessor serves participants, does validate edit and checks changes with the ResourceChangeValidator.

3.4

We want to push down the RenameResourceProcessor to LTK so that platform IDE and other clients can use it to rename a resource.

The RenameResourceProcessor serves participants, does validate edit and checks changes with the ResourceChangeValidator.
Created attachment 79944
intended changes to ltk.core.refactoring
Created attachment 80014
Throwaway patch on top of martin's v01

Martin, I've created this (non-functioning but compiling) patch to see if I understand a bit better (after talking to Susan).

We would create the appropriate Processors and ResourceChange classes in LTK.  The processor has to handle validation (just for the starting state? or for all of the undo states as well?).  The changes come in pairs (that is what implements undo/redo), and the change actually does the work.  Assuming I'm not too far off base, your patch really helped :-)

I could then implement my IDE operations (DeleteResourceOperation, etc) in terms of the "change pair" for the matching processor.  I would leave the operations around (they're API), but re-implement my actions (DeleteResourcesAction) to create the matching wizard page and open the appropriate wizard.

Tomorrow I'll get myself my own bug to play with :-)

PW
Created attachment 80069
next generation

Next iteration:
Added RenameResourceDescriptor as API. RenameResourceParticipant is now internal.
Added RenameResourceWizard to ltk.ui
The last patch has been released (plus JDT UI has been updated to use the new APIs) > 20071010

Paul, your patch looks good (I haven't tried it, just looked at it quickly). Delete and move are the next APIs I'm going to look at.
added the MoveResourcesWizard > 20071016
