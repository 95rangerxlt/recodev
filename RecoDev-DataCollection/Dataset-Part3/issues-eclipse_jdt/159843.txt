I regularly experience a few pain-points regarding jar upgrades and associating Javadoc and source.

#1: We name our jars with the version embedded in the name (e.g. spring-2.0, hibernate-3.1.3, etc).  Each time we upgrade the jar, the name changes (obviously).  If I use the user interface to make the change (project properties > java build path > libraries), I will lose the already associated source and Javadoc values.  It's likely they need to change anyway (though not always, especially for Javadoc), but it's a lot quicker to change the value than to set it from scratch since it's often only a single digit.  A work-around is to edit the .classpath file directly.

There should be a way to point a library entry to a new file without reseting the Javadoc and source attachments to blank.

Another alternative might be to decide on a convention, that if the user chooses to follow, eclipse can automatically make Javadoc and source associations.  One such convention might be to specific a ext-docs and ext-src directory (possible a variable extension), and if zip exists with the same filename as a project jar then eclipse can auto-associate.  For example:

 some-project/lib/spring-2.0.jar (in the classpath)
 some-project/ext-src/spring-2.0-src.zip (auto-associated with spring-2.0)
 some-project/ext-doc/spring-2.0-doc.zip (auto-associated with spring-2.0)

#2: Eclipse assumes that there is a one-to-one association between jar and Javadoc and source.  That is, a single jar can be associated with only a single javadoc location or source attachment.  I have encountered some situations where a 3rd party library will have its code split into multiple src directories, even though it's code is all contained in a single jar.  Spring places code under src and tiger.  Thus, there's no way associate all of the source with the spring jar.

There should be a way to handle scenarios like this, though this isn't as big a deal as #1 IMHO

Final thoughts: My team and I find associated doc/source very helpful during development, and we're always trying to find a way to minimize maintenance of this information.  Being able to do so would certainly make life easier for teams who use eclipse, especially larger teams.

I regularly experience a few pain-points regarding jar upgrades and associating Javadoc and source.

#1: We name our jars with the version embedded in the name (e.g. spring-2.0, hibernate-3.1.3, etc).  Each time we upgrade the jar, the name changes (obviously).  If I use the user interface to make the change (project properties > java build path > libraries), I will lose the already associated source and Javadoc values.  It's likely they need to change anyway (though not always, especially for Javadoc), but it's a lot quicker to change the value than to set it from scratch since it's often only a single digit.  A work-around is to edit the .classpath file directly.

There should be a way to point a library entry to a new file without reseting the Javadoc and source attachments to blank.

Another alternative might be to decide on a convention, that if the user chooses to follow, eclipse can automatically make Javadoc and source associations.  One such convention might be to specific a ext-docs and ext-src directory (possible a variable extension), and if zip exists with the same filename as a project jar then eclipse can auto-associate.  For example:

 some-project/lib/spring-2.0.jar (in the classpath)
 some-project/ext-src/spring-2.0-src.zip (auto-associated with spring-2.0)
 some-project/ext-doc/spring-2.0-doc.zip (auto-associated with spring-2.0)

#2: Eclipse assumes that there is a one-to-one association between jar and Javadoc and source.  That is, a single jar can be associated with only a single javadoc location or source attachment.  I have encountered some situations where a 3rd party library will have its code split into multiple src directories, even though it's code is all contained in a single jar.  Spring places code under src and tiger.  Thus, there's no way associate all of the source with the spring jar.

There should be a way to handle scenarios like this, though this isn't as big a deal as #1 IMHO

Final thoughts: My team and I find associated doc/source very helpful during development, and we're always trying to find a way to minimize maintenance of this information.  Being able to do so would certainly make life easier for teams who use eclipse, especially larger teams.
I updated the 'Edit' on the library page of the build path wizard to not clear the attributes > 20061006
For 2, please file a separate feature request against jdt.core. However, this is very difficult if not impossible to change at this stage.
