Build ID: M20070212-1330

Steps To Reproduce:
1. Using attached ExampleEnum.java with attached org.eclipse.jdt.core.prefs, Ctrl+Shift+F and see that the header is formatted even though option to format is unchecked.
2. Using attached InnerEnumWorks.java, follow same steps to see header is not formatted.

More information:
The option to "Enable comment formatting" is checked, but the "Format header comment" is unchecked.  For any files except those containing only an enum, the header file is not line wrapped and mashed together.

Build ID: M20070212-1330

Steps To Reproduce:
1. Using attached ExampleEnum.java with attached org.eclipse.jdt.core.prefs, Ctrl+Shift+F and see that the header is formatted even though option to format is unchecked.
2. Using attached InnerEnumWorks.java, follow same steps to see header is not formatted.

More information:
The option to "Enable comment formatting" is checked, but the "Format header comment" is unchecked.  For any files except those containing only an enum, the header file is not line wrapped and mashed together.
Created attachment 65060
ExampleEnum that shows problem
Created attachment 65061
InnerEnum example
Created attachment 65064
JDT core prefs
Reproduced with HEAD.
If this enum is converted to a class in the first example, then the formatting works as expected.
I'll investigate this.
The problem is located in the header detection outside of the formatter. I know that the formatter should control the header's detection (see bug 173289), but this is not the case yet.
Then the code in org.eclipse.jdt.internal.ui.text.comment.CommentFormattingStrategy should be fixed.
The method computeHeaderEnd(..) create a scanner that will scan tokens according to the 1.3 JLS. This means that enum will always be seen as an identifier, never as the enum keyword.
This is why it behaves differently between an enum declaration and a class declaration.

Now there is another issue. The loop that finds the header ends up scanning too  many tokens.
If you have a javadoc/block comment to start with, this should be considered as the header and the loop should abort immediately.
Because of the line comments inserted between the first javadoc comment and the package declaration, the loop is scanning all tokens till the 'class' token in the case of a class declaration and the whole class in case of an enum declaration.

I'll provide a patch to create a scanner with the appropriate source/compliance constants, but this doesn't solve the problem of scanning too many tokens.

Moving to JDT/UI
Created attachment 65418
Proposed fix

This patch makes the class and enum cases behaving the same. But we should stop the scanning loop earlier in this case.
Thanks Olivier.
Fixed in HEAD.
Available in builds >= I20070501-0010.
