DefaultProjectClasspathEntry#expandProject() by default compares containers by
using the "variable name" of the classpath container.

This leads to only one of "n" classpath containers beeing added to the runtime
classpath. 

Solution: UserLibraryClasspathContainer should implement
IRuntimeContainerComparator for example as follows: 

	public boolean isDuplicate(IPath containerPath) {
		return containerPath != null && containerPath.equals(getPath());
	}

DefaultProjectClasspathEntry#expandProject() by default compares containers by
using the "variable name" of the classpath container.

This leads to only one of "n" classpath containers beeing added to the runtime
classpath. 

Solution: UserLibraryClasspathContainer should implement
IRuntimeContainerComparator for example as follows: 

	public boolean isDuplicate(IPath containerPath) {
		return containerPath != null && containerPath.equals(getPath());
	}
Moving to Debug...
The contributor of the classpath container must provide a comparator for a 
conatiner. The default behavior is to use the container id for the comparison 
(checking for duplicates). See IRuntimeContainerComparator

/**
 * Determines if container entries are duplicates/redundant on a runtime
 * classpath. If an <code>IClasspathContianer</code> implements this interface,
 * the <code>isDuplicate</code> method is used to determine if containers are
 * duplicates/redundant. Otherwise, containers with the same identifier are
 * considered duplicates. 
 * 
 * @since 2.0.1
 */
Darin, the user library container is supposed to be moved down to jdt.core 
which doesn't know of jdt.launching.

Any idea's what we could do? 
My feeling is that the extension should have been designed the other way 
around, say containes are considered different in general, only only when you 
implement the comparator you can say that the identifier is enough to compare. 
But I guess this can't be changed anymore.
We probably have to convince jdt.core to add a IClasspathContainerComparator
(that could also be used for the build path dialog to detect duplicated 
containers, e.g. two JRE's on a build path)
We added this mechanism in 2.0.1 as a workaround to the duplicate container 
problem, so it is hard to undo. Hmmm.
Is there any work-around for this, other than adding the project referenced 
libraries to each project?

I assume what I'm seeing (below) is this bug:

Project "A" uses the Apache Log4J library which I have set up as a user
library.

Under the properties for this "A" project, on the 'Order and Export' tab I
have checked the user library Log4J as well as the project itself (and
several other user libraries as well).

Project "B" references "A" (project properties, Project References choice).

When I run "B", I get a class not found for Log4J (since it starts out
init-ing Log4J, but can't find it).

Examining the properties for the command line that runs "B", I only see
that 1 library is being exported, even though I have many checked.

In the latest I build, this should be fixed as I use 
the 'IRuntimeContainerComparator' now. In which build are you seeing this?
Using M8.  Nervous about using an "I" build, but I may try it.
Martin,

just to be sure - since your comment reads like this should be fixed, but it is
still "NEW" - it's not expected that I take further action regarding this bug,
or is it? 

Just asking this, because I normally don't use UserLibraries and only randomly
found this problem while looking for problems with my own classpath container.

Just in case you do - using I200404131323 this works for me now.
I keep the bug report open to remember this when moving the library container 
down to jdt.core. we will have to find a new solution then. (possibly a new 
interface offered by jdt.core that would replace the launching one)
fixed. library now in jdt core, new method
ClasspathContainerInitializer.getComparisonID was added as a replacement for
IRuntimeContainerComparator.

