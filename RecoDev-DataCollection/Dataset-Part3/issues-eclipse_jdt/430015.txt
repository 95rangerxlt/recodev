NPE trying to disassemble classfile with lambda method and MethodParameters.

------------------------------
package jsr335.funint;

import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.util.Arrays;
import java.util.function.IntConsumer;

public class Snippet {
    IntConsumer xx(int a) {
        return i -> { };
    }
    
    public static void main(String[] args) {
        Method[] methods = Snippet.class.getDeclaredMethods();
        Parameter[] parameters = methods[2].getParameters();
        System.out.println(Arrays.asList(parameters));
    }
}
------------------------------

For this snippet, ecj produces a classfile in which the lambda$xx$0(int) method has a MethodParameters attribute whose single parameter has a zero name and the "synthetic" flag.

Problems:

1.) Should we really produce a MethodParameters attribute for the lambda? Javac doesn't produce one.
1.1) If yes, should the parameter really be synthetic? The lambda method is already synthetic, and I don't think that should make everything inside it synthetic as well.

2.) Disassembler should not throw an NPE in this case. JVMS8 4.7.24 allows a zero parameter name. javap also supports it, but reflection is broken in 1.8.0-b131.

!ENTRY org.eclipse.e4.ui.workbench 4 0 2014-03-10 14:54:23.741
!MESSAGE 
!STACK 0
java.lang.NullPointerException
	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:504)
	at java.lang.StringBuffer.append(StringBuffer.java:314)
	at org.eclipse.jdt.internal.core.util.Disassembler.disassemble(Disassembler.java:604)
	at org.eclipse.jdt.internal.core.util.Disassembler.disassemble(Disassembler.java:910)
	at org.eclipse.jdt.internal.core.util.Disassembler.disassembleTypeMembers(Disassembler.java:2382)
	at org.eclipse.jdt.internal.core.util.Disassembler.disassemble(Disassembler.java:1154)
	at org.eclipse.jdt.internal.core.util.Disassembler.disassemble(Disassembler.java:261)
	at org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor$SourceAttachmentForm.updateCodeView(ClassFileEditor.java:410)
	at org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor$SourceAttachmentForm.createControl(ClassFileEditor.java:210)
	at org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor.verifyInput(ClassFileEditor.java:797)
	at org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor.createPartControl(ClassFileEditor.java:747)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.createPartControl(CompatibilityPart.java:142)

NPE trying to disassemble classfile with lambda method and MethodParameters.

------------------------------
package jsr335.funint;

import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.util.Arrays;
import java.util.function.IntConsumer;

public class Snippet {
    IntConsumer xx(int a) {
        return i -> { };
    }
    
    public static void main(String[] args) {
        Method[] methods = Snippet.class.getDeclaredMethods();
        Parameter[] parameters = methods[2].getParameters();
        System.out.println(Arrays.asList(parameters));
    }
}
------------------------------

For this snippet, ecj produces a classfile in which the lambda$xx$0(int) method has a MethodParameters attribute whose single parameter has a zero name and the "synthetic" flag.

Problems:

1.) Should we really produce a MethodParameters attribute for the lambda? Javac doesn't produce one.
1.1) If yes, should the parameter really be synthetic? The lambda method is already synthetic, and I don't think that should make everything inside it synthetic as well.

2.) Disassembler should not throw an NPE in this case. JVMS8 4.7.24 allows a zero parameter name. javap also supports it, but reflection is broken in 1.8.0-b131.

!ENTRY org.eclipse.e4.ui.workbench 4 0 2014-03-10 14:54:23.741
!MESSAGE 
!STACK 0
java.lang.NullPointerException
	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:504)
	at java.lang.StringBuffer.append(StringBuffer.java:314)
	at org.eclipse.jdt.internal.core.util.Disassembler.disassemble(Disassembler.java:604)
	at org.eclipse.jdt.internal.core.util.Disassembler.disassemble(Disassembler.java:910)
	at org.eclipse.jdt.internal.core.util.Disassembler.disassembleTypeMembers(Disassembler.java:2382)
	at org.eclipse.jdt.internal.core.util.Disassembler.disassemble(Disassembler.java:1154)
	at org.eclipse.jdt.internal.core.util.Disassembler.disassemble(Disassembler.java:261)
	at org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor$SourceAttachmentForm.updateCodeView(ClassFileEditor.java:410)
	at org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor$SourceAttachmentForm.createControl(ClassFileEditor.java:210)
	at org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor.verifyInput(ClassFileEditor.java:797)
	at org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor.createPartControl(ClassFileEditor.java:747)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.createPartControl(CompatibilityPart.java:142)
Thanks Markus, I'll follow up.
Fix and tests for the NPE here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=ea585ca8104de943bd71824eec2c8a9d4d408df2

I'll open a separate bug (not for GA) to investigate whether lambda's should
have MethodParameters attribute and whether synthetic bit should be set on.
(In reply to Srikanth Sankaran from comment #2)

> I'll open a separate bug (not for GA) to investigate whether lambda's should
> have MethodParameters attribute and whether synthetic bit should be set on.

https://bugs.eclipse.org/bugs/show_bug.cgi?id=430025
org.eclipse.jdt.core.tests.compiler.regression.JSR335ClassFileTest.test430015() fails on my system, answering
  [java.lang.String[] arg0]
instead of
  [int arg0]

My JVM seems to answer methods in a different order.

Is it OK to ignore that failure for now? Do you have a simple fix to make the test more robust?
Obviously the same for org.eclipse.jdt.core.tests.compiler.regression.LambdaExpressionsTest.test430015()
(In reply to Stephan Herrmann from comment #5)
> Obviously the same for
> org.eclipse.jdt.core.tests.compiler.regression.LambdaExpressionsTest.
> test430015()


Sorry about that, I think I got too bought into the write once, run everywhere
slogan ;-)

Is this better: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=8494492b1be5c1f0c2d9920279df917cc46fdac5
(In reply to Srikanth Sankaran from comment #6)
> Is this better:
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
> ?h=BETA_JAVA8&id=8494492b1be5c1f0c2d9920279df917cc46fdac5

much better, thanks :)
Now, a parameter with a zero name looks as if the stored name was "arg0", which is not distinguishable from a parameter that is really named "arg0".

The disassembler should rather output something like "<no name>".
(In reply to Markus Keller from comment #8)
> Now, a parameter with a zero name looks as if the stored name was "arg0",
> which is not distinguishable from a parameter that is really named "arg0".
> 
> The disassembler should rather output something like "<no name>".

Did I do that ? 

I guess in my present sleep deprived state, I need to add "releasing code" to one
of the things I should not be doing apart from driving and operating heavy
machinery.

Fix will follow shortly. I will also fix the other place from which I copy 
pasted this code.

Thanks Markus.
Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8_LUNA&id=ed946ccd4c40fd03fb87770eaaaa24036f629ae3

and here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=913f8b823237e2b59739d30285c084e179b3b696
(In reply to Stephan Herrmann from comment #7)
> (In reply to Srikanth Sankaran from comment #6)
> > Is this better:
> > http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
> > ?h=BETA_JAVA8&id=8494492b1be5c1f0c2d9920279df917cc46fdac5
> 
> much better, thanks :)

Well, let's say it was almost good (but still or again failed).

I'm sure this is what you intended to say: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=d920fd81857e307b7520d733512191c07ae2bdfd


(also released to BETA_JAVA8_LUNA).
(In reply to Stephan Herrmann from comment #11)

> Well, let's say it was almost good (but still or again failed).
> 
> I'm sure this is what you intended to say:
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
> ?h=BETA_JAVA8&id=d920fd81857e307b7520d733512191c07ae2bdfd
> 
> 
> (also released to BETA_JAVA8_LUNA).

Gee. See comment #9. Thanks Stephan !
