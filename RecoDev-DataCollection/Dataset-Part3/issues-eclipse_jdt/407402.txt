In windows & linux OS the checked JRE is the one defined in eclipse.ini (see screen-cap), on MAC OS the JRE listed in eclipse.ini is not even one of the listed JREs, what is checked instead is the defined Default OS JRE (could be different Java version entirely than what is listed in eclipse.ini)

In windows & linux OS the checked JRE is the one defined in eclipse.ini (see screen-cap), on MAC OS the JRE listed in eclipse.ini is not even one of the listed JREs, what is checked instead is the defined Default OS JRE (could be different Java version entirely than what is listed in eclipse.ini)
Not sure if this has anything to do with directory structure of JRE on windows/linux as compared to MAC OS?
Mac 10.8.2.
Most likely a JDT Debug issue.
(In reply to comment #0)
> In windows & linux OS the checked JRE is the one defined in eclipse.ini (see
> screen-cap), on MAC OS the JRE listed in eclipse.ini is not even one of the
> listed JREs, what is checked instead is the defined Default OS JRE (could be
> different Java version entirely than what is listed in eclipse.ini)

On the Mac we have always delegated to whatever the Mac OS returned as installed VMs, because traditionally only Mac VMs could be used anyway. Now we could probably be trying to compute the VM the same way we do for Windows, etc. The code to handle this is in JavaRuntime#detectEclipseRuntime (which delegates to the VM install type).
Created attachment 230748
patch

Here is a patch that will look for the VM used to launch Eclipse. It changes up the way VMs are added in new workspaces: with the patch when you launch Eclipse you get one VM install that is set to the default (just like Windows / Linux, etc) rather than the entire list of all Mac installed VMs (like you do now). The Mac search still works the same (finds all Mac installed VMs), but has to be done from the preference page by the user. This makes the mac workflow for detecting / adding VMs much more similar to that of the other platforms.

In the event that a default VM cannot be computed we fall back to running the Mac search (for new workspaces).

I have to test this a bit more, but one immediate downside is that if the VM used to launch Eclipse is one of the Mac installed ones, if the user later does a search, we would get the 'Runtime VM' and one of the searched VMs referring to the same location.
Created attachment 230882
patch

This patch allows the VM used to launch Eclipse to be detected
Created attachment 230884
screen shot

Shows the Java 8 VM I used in my ini file is properly detected.
Markus, please review. Note that these changes only apply to new workspaces, we do not stomp all over any existing JRE settings.
Created attachment 230899
patch 2

Up to now, Mac users never had to care about VMs in a new workspace, and they always got all installed VMs for free. We should not change that now.

The Mac is different from other platforms, because there's a standard command that should know about all properly installed VMs (/usr/libexec/java_home).

I don't think we should make a big difference between the VM that was used to launch Eclipse and other VMs that are found at the default location. In MacOSXVMInstallType#detectInstallLocation(), the java.home VM should just be used to determine the default VM. The extra code to create a special MacVMStandin should only run if the defaultLocation couldn't be found among the detected VMs.

Patch 2 implements this and also fixes some formatting and tells that StandardVMType#getJavaHomeLocation() can return null.
Patch works nicely, thanks Markus.

I have to agree that RC1 is probably not the best time to change how VMs are detected on the Mac. Ultimately though, I want to get rid of all the special support for Mac and simply use standard VMs on the Mac.

This is also a good candidate for 4.2.2.

Pushed to master: http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=ffb75848c2bcb567f0059a43dfbc215fbc3be59a
Created attachment 230959
4.2.2 patch

Here is the patch adapted to 4.2.2
Pushed to 3.8.2+ (4.2.2+): http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?h=R3_8_maintenance&id=f1769dbfecbd7d94d505e1550203ea3b5eff4364
