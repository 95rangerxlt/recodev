I20071030-0010.

COMPILER_PB_OVERRIDING_PACKAGE_DEFAULT_METHOD is in wrong category: on the preference page we show it under 'Naming shadowing and conflicts' but in the Problems view it appears under 'Potential Programming Problems'.

I think it makes sense to have the shadowing category and hence JDT Core should add this too.

Test Case:
--- %< ---
package bar;
public class XXX {
	static void foo() {
	}
}
--- %< ---
package foo;
public class YYY extends bar.XXX {
	static void foo() { // WARNING HERE
	}
}

If you now group by categories you see the warning in the 'Potential Programming Problems' group. When you now want to change the severity in the preference you'll have a hard time to find it.

I20071030-0010.

COMPILER_PB_OVERRIDING_PACKAGE_DEFAULT_METHOD is in wrong category: on the preference page we show it under 'Naming shadowing and conflicts' but in the Problems view it appears under 'Potential Programming Problems'.

I think it makes sense to have the shadowing category and hence JDT Core should add this too.

Test Case:
--- %< ---
package bar;
public class XXX {
	static void foo() {
	}
}
--- %< ---
package foo;
public class YYY extends bar.XXX {
	static void foo() { // WARNING HERE
	}
}

If you now group by categories you see the warning in the 'Potential Programming Problems' group. When you now want to change the severity in the preference you'll have a hard time to find it.
Agree that this is a name shadowing issue. I'll change the category.
Looking through the problem, I noticed a few things that I believe could benefit from some polishing:
- quoting JLS 3, 'The default access is that a member can be accessed
anywhere within the package that contains its declaration; other possibilities are
public, protected, and private.'; this tells us that by default access to a method is granted to all places in the same package, and that non-default access is specified by public, protected or private; it falls short of defining what a 'Package-Default Method' or 'A package default method' could be; I could not find the definition of that concept anywhere else in the spec.; accordingly, unless someone else can exhibit a satisfying definition, I'd support our editing the matching lines in JavaCore#getDefaultOptions' javadoc; note that the name of the constant does not absolutely need to change though, since it can be seen as an acceptable contraction for 'package or default' (or even, 'default hence package'); Philippe, what do you think?
- the name of the preference in the interface should be improved; it reads 'Method overridden but not package visible', which implies that the method is overridden, which is untrue (since it cannot be overridden outside of its own package), and that it is not 'package visible', which it is; moreover, the problem is reported against the method that might be attempting to override the package-visible method but fails to do so, while the preferences label relates to the method that would get overridden; Dani, what do you think?
Maxime, how old is the build you're using? I've improved the UI a while ago.
I've been using the one you opened the bug against, aka Build id: I20071029-0010.
JDT Core initially positions the category as CAT_NAME_SHADOWING_CONFLICT on the problem it returns, will investigate further to see how this gets presented within the Potential Programming Problems section of the Problems view.
Released ProgrammingProblemsTest#17 to check the category at JDT level.
>Maxime, how old is the build you're using? 
I meant "using for daily development" ;-)
I'll check in latest.
With the original build, I believe that line:
        <markerAttributeMapping value="100" markerGroupingEntry="org.eclipse.jdt.ui.category.potential"/>
in org.eclipse.jdt.ui plugin.xml is to blame. Will check with HEAD.
(In reply to comment #6)
> I'll check in latest.
In latest available I-build, aka I20071113-0800, the preference reads: 'Package visible method overriden', which is still untrue as far as the considered cases are concerned. The following matches the message semantics:

package p;
class X {
  void foo() {}
}

package p;
class Y extends X {
  void foo() {}
}

but this does not raise the message...

The point is that the user may think there is an override, but there's none.

According to JLS3, what happens in the original test case is neither shadowing nor hiding. Any proposition will have to surface some variant of the 'override' word. If we follow the example given by the next line in the interface, we could attempt something like 'Method conflicts with package visible method (no override)'?

What about:
'Method does not override package visible method'
Created attachment 83311
Suggested patch against UI

JDT UI will have to decide what they want to do. However, this patch shows that JDT Core is not involved (using it places the said warning in the 'Name Shadowing and Conflicts' category of the Problems view, and it does not touch JDT Core code).
>JDT Core is not involved
Sorry about that. I aksed Martin whether JDT UI or Core is definng the categories and he said JDT Core.
(In reply to comment #9)
> What about:
> 'Method does not override package visible method'
Like it. Piggy backing: 'Method cannot override package visible method'?
(In reply to comment #1)
> - quoting JLS 3, 'The default access is that a member can be accessed
> anywhere within the package that contains its declaration; other possibilities
> are
> public, protected, and private.'; this tells us that by default access to a
> method is granted to all places in the same package, and that non-default
> access is specified by public, protected or private; it falls short of defining
> what a 'Package-Default Method' or 'A package default method' could be; I could
> not find the definition of that concept anywhere else in the spec.;
> accordingly, unless someone else can exhibit a satisfying definition, I'd
> support our editing the matching lines in JavaCore#getDefaultOptions' javadoc;
> note that the name of the constant does not absolutely need to change though,
> since it can be seen as an acceptable contraction for 'package or default' (or
> even, 'default hence package'); Philippe, what do you think?
Opened bug 210353 for this part.
Moving to JDT UI.
When discussing the categories in the problems view fro 3.3, we choose some more general groups.
But I now think having them all is probably better.
patch released > 20071120
