This is related to bug #82641.  With the new preference "Insert new line after 
annotations" set to true the behavior when adding a new Annotation is different 
based on whether the field has access modifiers.  If the field does not have 
any access modifiers then the following behavior is seen when adding an 
Annotation ast node to a field declaration

Example: 

String foo;

Add an annotation:

@MyAnnotation String foo;

Add second annotation:

@MyAnnotation
@AnotherAnnotation String foo;


If an access modifier exists then the code looks like this after the 2nd 
annotation is added.

@MyAnnotation
@AnotherAnnotation
public String foo;

Behavior should be the same whether the declaration has access modifiers or not.

This is related to bug #82641.  With the new preference "Insert new line after 
annotations" set to true the behavior when adding a new Annotation is different 
based on whether the field has access modifiers.  If the field does not have 
any access modifiers then the following behavior is seen when adding an 
Annotation ast node to a field declaration

Example: 

String foo;

Add an annotation:

@MyAnnotation String foo;

Add second annotation:

@MyAnnotation
@AnotherAnnotation String foo;


If an access modifier exists then the code looks like this after the 2nd 
annotation is added.

@MyAnnotation
@AnotherAnnotation
public String foo;

Behavior should be the same whether the declaration has access modifiers or not.
The related bug is actually #82461
The code formatter is putting each annotation on its own line.
Do you use the ASTRewrite to add the new annotation? 
Yes, here is some of my code used to do this:

AST ast = astRewrite.getAST();
NormalAnnotation annotation = ast.newNormalAnnotation();
annotation.setTypeName(ast.newSimpleName("MyAnnotation"));

astRewrite.getListRewrite(bodyDeclaration,     
bodyDeclaration.getModifiersProperty()).insertAt(annotation, 0, null);

Martin,

do you have a special handling for new annotation when no modifiers are specified?
its a bug in the AST rewriter. 
Here's how to reproduce in Eclipse I20050617-0010:

import java.util.List;
class Try {
    Object m(List<?> arg) {
        return (List<? extends String>) arg; //Quick Fix 'Add @SuppressWarnings'
    }
}

=> The annotation is inserted on the method declaration line. When the method
has e.g. a 'public' modifier, then it is correctly inserted on the line before.
Created attachment 38399
suggested fix
Philippe, this is one of the fixes I mentioned. Can you approve?

The fix doesn't solve all cases, but solves the simple, most common scenario when one or multople new annotations are added.
The complete fix that also does the right thing when (noremal) modifiers are removed at the same time. This is more work and I'll have a look at this in 3.3.
David - pls look at the patch
Philippe - the patch looks good for me and as said by Martin, cases don't cover by the fix are not common cases.
+1 for 3.2RC1
fix released for 20060412-1200
