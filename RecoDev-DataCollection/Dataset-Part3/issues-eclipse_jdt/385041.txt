BETA_JAVA8:

As we haven't unearthed any blocker issues, we will use the current
bug to track follow up actions from the review and verification of
the fix for bug 380194.

Here is a laundry list of things to follow up. This does not include
any issues for which a separate bug has been raised already.


(1) Check callers of Scanner.getNextToken() for need to use
Parser.getNextToken() (see bug 380194 comment 47)

(2) Comment changes from bug bug 380194 comment 49 plus re-sync Parser.java <-> java.g

(3) Check use of getUnspecifiedReferenceOptimized() for getting a simple
Identifier (see bug bug 380194 comment 50)

(4) Decide fields of ReferenceExpression (only one of name/type/primary is used
- see bug bug 380194 comment 53)

(5) Parser has some comments indicating an interim solution:
 (a) consumeLambdaExpression() 
     // ')' position, discard for now 
     (see also bug 384667)
 (b) consumeReferenceExpressionNameForm()
     // Pop and drop dimensions as of now - there is some ambiguity between
type reference and name reference here.
     I haven't checked the business of dimensions in this locations.
     Is this s.t. unfinished?

(6) inside consumeReferenceExpressionTypeForm(), extract this line
       this.intPtr --; // pop '<' position
    from then and else branches 
    (I was wondering about the line without a comment ...)

(7) Scanner.atLambdaParameterList() and atReferenceExpression() both call
jumpOver(), which can modify unicodeAsBackSlash. It seems we'd need to store
and restore this flag, too - or provide reasoning why this is not needed. 

Of these, (7) is rendered stale by https://bugs.eclipse.org/bugs/show_bug.cgi?id=385009.

BETA_JAVA8:

As we haven't unearthed any blocker issues, we will use the current
bug to track follow up actions from the review and verification of
the fix for bug 380194.

Here is a laundry list of things to follow up. This does not include
any issues for which a separate bug has been raised already.


(1) Check callers of Scanner.getNextToken() for need to use
Parser.getNextToken() (see bug 380194 comment 47)

(2) Comment changes from bug bug 380194 comment 49 plus re-sync Parser.java <-> java.g

(3) Check use of getUnspecifiedReferenceOptimized() for getting a simple
Identifier (see bug bug 380194 comment 50)

(4) Decide fields of ReferenceExpression (only one of name/type/primary is used
- see bug bug 380194 comment 53)

(5) Parser has some comments indicating an interim solution:
 (a) consumeLambdaExpression() 
     // ')' position, discard for now 
     (see also bug 384667)
 (b) consumeReferenceExpressionNameForm()
     // Pop and drop dimensions as of now - there is some ambiguity between
type reference and name reference here.
     I haven't checked the business of dimensions in this locations.
     Is this s.t. unfinished?

(6) inside consumeReferenceExpressionTypeForm(), extract this line
       this.intPtr --; // pop '<' position
    from then and else branches 
    (I was wondering about the line without a comment ...)

(7) Scanner.atLambdaParameterList() and atReferenceExpression() both call
jumpOver(), which can modify unicodeAsBackSlash. It seems we'd need to store
and restore this flag, too - or provide reasoning why this is not needed. 

Of these, (7) is rendered stale by https://bugs.eclipse.org/bugs/show_bug.cgi?id=385009.
Status of (1) - (6):

I am prototyping a solution that would eliminate parserAtConflictScenario()
altogther and along with the wrapped parser's getNextToken. This is along
the lines of the cheap state machine outlined in https://bugs.eclipse.org/bugs/show_bug.cgi?id=383378#c9. Once done, (1) would
go away automatically.

(5) (a) can be tracked via bug 384667, I'll a note there.

(5) (b) can be tracked via the reopened bug 381121.

Current bug can be used for 
(2), (3) and (6) which can be pushed out as soon as the grammar rules 
are finalized.

That leaves (4) - this needs a bit more study. Also to watch how the
bound references survey plays out.
(8) I'd suggest to extract the common parts from pushIdentifier() and consumeExplicitThisParameter(boolean)
Created attachment 218841
comment updates for the parser

(9) Here's a suggested set of comment updates to document usage of parser stacks, mostly intStack.

Note that in one case instead of documenting I applied a little refactoring :)
(10) VanguardParser & VanguardScanner: should provide toString methods.
I am sorry for the delay in this - I wanted to finish 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=385374 and
https://bugs.eclipse.org/bugs/show_bug.cgi?id=383596 first as these would
modify some of the code paths. The latter involves a tremendous amount
of grunt work and is taking quite a while.
(In reply to comment #0)

> (1) Check callers of Scanner.getNextToken() for need to use
> Parser.getNextToken() (see bug 380194 comment 47)

The method Parser.getNextToken() has vanished from the code base altogether.
The equivalent question of whether the scanner should disambiguate between
the uses of '(' and '<' and inject synthetic tokens for all its clients
is a worthy question to be asked: The answer being, disambiguation is required
only for those clients which are interested in the "structural" details of
the program and not merely in viewing the program as a token stream. There are
exactly two such clients today: the Parser and the DiagnoseParser both of
which collaborate with the scanner to do the "right thing" - so this item
is a NOP.


> (2) Comment changes from bug bug 380194 comment 49 plus re-sync Parser.java
> <-> java.g

Changes from bug 380194 comment 49 are already released. Resync of Parser.java <-> java.g achieved via:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3f94b4fc51205d2abd8631c1b4ac72d7bd836d3a

> (3) Check use of getUnspecifiedReferenceOptimized() for getting a simple
> Identifier (see bug bug 380194 comment 50)

open item# 1

> 
> (4) Decide fields of ReferenceExpression (only one of name/type/primary is
> used
> - see bug bug 380194 comment 53)

open item# 2.

> 
> (5) Parser has some comments indicating an interim solution:
>  (a) consumeLambdaExpression() 
>      // ')' position, discard for now 
>      (see also bug 384667)

Moved to bug 384667.

>  (b) consumeReferenceExpressionNameForm()
>      // Pop and drop dimensions as of now - there is some ambiguity between
> type reference and name reference here.
>      I haven't checked the business of dimensions in this locations.
>      Is this s.t. unfinished?

This method has vanished. The ambiguity is still there and will get handled
as a part of bug 382701.

> (6) inside consumeReferenceExpressionTypeForm(), extract this line
>        this.intPtr --; // pop '<' position
>     from then and else branches 
>     (I was wondering about the line without a comment ...)

Change already on Java8 branch.

> (7) Scanner.atLambdaParameterList() and atReferenceExpression() both call
> jumpOver(), which can modify unicodeAsBackSlash. It seems we'd need to store
> and restore this flag, too - or provide reasoning why this is not needed. 
> 
(7) is rendered stale by
https://bugs.eclipse.org/bugs/show_bug.cgi?id=385009.

(In reply to comment #2)
> (8) I'd suggest to extract the common parts from pushIdentifier() and
> consumeExplicitThisParameter(boolean)

Done. Changes already on Java 8 branch.

(In reply to comment #3)
> Created attachment 218841 [details]
> comment updates for the parser
> 
> (9) Here's a suggested set of comment updates to document usage of parser
> stacks, mostly intStack.
> 
> Note that in one case instead of documenting I applied a little refactoring
> :)

Changes are on Java8 branch.

(In reply to comment #4)
> (10) VanguardParser & VanguardScanner: should provide toString methods.

Open issue# 3
Open issues renumbered:

(1) Check use of getUnspecifiedReferenceOptimized() for getting a simple
Identifier (see bug bug 380194 comment 50)

(2) Decide fields of ReferenceExpression (only one of name/type/primary is
used see bug bug 380194 comment 53

(3) VanguardParser & VanguardScanner: should provide toString methods.
(In reply to comment #7)
> Open issues renumbered:
> 
> (1) Check use of getUnspecifiedReferenceOptimized() for getting a simple
> Identifier (see bug bug 380194 comment 50)

I just realized that this concern is stale too. As a part of grammar clean
up work for JSR308, several changes were made as a result of which we don't
call getUnspecifiedReferenceOptimized() anymore from the consumeRerefenceExpression* methods. The identifier is directly wrapped as
a SingleNameReference.

> (2) Decide fields of ReferenceExpression (only one of name/type/primary is
> used see bug bug 380194 comment 53

Don't yet know how to handle this. I am not happy with the abstraction as 
it stands, but the ugliness in the model merely follows the ugliness in 
the domain. Stephan, do you have any recommendations for this part - 
that wouldn't proliferate classes ? 

This is also an area of flux in the spec as it may undergo changes. I plan to
move this concern to bug 382701 and address it in due course. 

> 
> (3) VanguardParser & VanguardScanner: should provide toString methods.

Done.
(In reply to comment #6)
> (In reply to comment #0)
> 
> > (1) Check callers of Scanner.getNextToken() for need to use
> > Parser.getNextToken() (see bug 380194 comment 47)
> 
> The method Parser.getNextToken() has vanished from the code base altogether.
> The equivalent question of whether the scanner should disambiguate between
> the uses of '(' and '<' and inject synthetic tokens for all its clients
> is a worthy question to be asked:

So after Parser.getNextToken() has gone, it is Scanner.setActiveParser() that decides whether or not disambiguation is potentially applied, right?

> The answer being, disambiguation is
> required
> only for those clients which are interested in the "structural" details of
> the program and not merely in viewing the program as a token stream. There
> are
> exactly two such clients today: the Parser and the DiagnoseParser both of
> which collaborate with the scanner to do the "right thing" - so this item
> is a NOP.

OK, Parser and DiagnoseParser both call Scanner.setActiveParser(). But from a quick scan of all callers of Scanner.getNextToken() I see a few clients where it's not immediately clear to me, if a token stream is enough, e.g.,:
- SelectionEngine.checkTypeArgument()
- SearchPattern.createTypePattern()
Probably all of ASTConverter needs the full structural view, too, right?

Do you plan to address these driven by reported defects?
(In reply to comment #6)
> (In reply to comment #2)
> > (8) I'd suggest to extract the common parts from pushIdentifier() and
> > consumeExplicitThisParameter(boolean)
> 
> Done. Changes already on Java 8 branch.

In current BETA_JAVA8 I can't find any code sharing between these two methods despite the strong similarity.
(In reply to comment #10)
> (In reply to comment #6)
> > (In reply to comment #2)
> > > (8) I'd suggest to extract the common parts from pushIdentifier() and
> > > consumeExplicitThisParameter(boolean)
> > 
> > Done. Changes already on Java 8 branch.
> 
> In current BETA_JAVA8 I can't find any code sharing between these two
> methods despite the strong similarity.

Sorry, wrt "current" I was wrong. I read your comment as saying this has been done long time ago. Now after pulling yesterday's changes I see that all is as I suggested, thanks. Maybe a reference to the commit might have helped avoid my confusion :)
(In reply to comment #9)

> So after Parser.getNextToken() has gone, it is Scanner.setActiveParser()
> that decides whether or not disambiguation is potentially applied, right?

Yes,

> OK, Parser and DiagnoseParser both call Scanner.setActiveParser(). But from
> a quick scan of all callers of Scanner.getNextToken() I see a few clients
> where it's not immediately clear to me, if a token stream is enough, e.g.,:
> - SelectionEngine.checkTypeArgument()
> - SearchPattern.createTypePattern()
> Probably all of ASTConverter needs the full structural view, too, right?

While Parser and DiagnoseParser are the only clients interested in the
macro and micro structural details of the program, I agree there could
be clients that need to react to unexpected tokens showing up in the
stream: These clients are interested in the local/micro structure of the
program and expect only some set of tokens in a local context and may
be surprised by certain (non-synthetic) tokens showing up. 

So, no one else need disambiguation, but they may need some massaging
of their nevertheless.

> Do you plan to address these driven by reported defects?

Yes. Also by coverage tests for each component to the extent possible.
(In reply to comment #8)
> (In reply to comment #7)
> > Open issues renumbered:

> > (2) Decide fields of ReferenceExpression (only one of name/type/primary is
> > used see bug bug 380194 comment 53
> 
> Don't yet know how to handle this. I am not happy with the abstraction as 
> it stands, but the ugliness in the model merely follows the ugliness in 
> the domain. Stephan, do you have any recommendations for this part - 
> that wouldn't proliferate classes ? 
> 
> This is also an area of flux in the spec as it may undergo changes. I plan to
> move this concern to bug 382701 and address it in due course. 

Commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=1eeba055c4a858ddea83f6c85864678280808173 has cleaned up this
mess. Now there is a single field of type Expression (all of name, type,
primary are expressions) and a single constructor.
(In reply to comment #8)
> (In reply to comment #7)
> > Open issues renumbered:
> > 
> > (1) Check use of getUnspecifiedReferenceOptimized() for getting a simple
> > Identifier (see bug bug 380194 comment 50)
> 
> I just realized that this concern is stale too. As a part of grammar clean
> up work for JSR308, several changes were made as a result of which we don't
> call getUnspecifiedReferenceOptimized() anymore from the
> consumeRerefenceExpression* methods. The identifier is directly wrapped as
> a SingleNameReference.

But we were using getUnspecifiedReference instead and for the record, this concern is finally addressed in  https://bugs.eclipse.org/bugs/show_bug.cgi?id=402609
