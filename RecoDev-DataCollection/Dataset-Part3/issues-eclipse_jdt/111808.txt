There is no "Expressions" component, so I wasn't sure where to file this bug.   
   
It would be helpful if expressions would expose the names of the variables   
which they reference.  This is helpful for two reasons:   
+ Improving performance   
+ Conflict resolution   
   
If an expression reports the names of the variables it references, then it is   
possible for clients of the expression system to group expression based on   
variable names.  This way, rather than evaluating all expressions when any one   
variable changes, it is possible to evaluate only those expressions that   
reference the changed variable.  This provides a clear benefit if, for   
example, there is an expression tied to every menu item and the active part   
changes.   
   
The names of the variables also allow a rudimentary conflict resolution scheme   
based on variable name.  For example, consider the case of a handler selection   
process using expressions.  In the Navigator view, there might be multiple   
handlers that wish to handle rename, depending on certain conditions.  There   
could be a default rename handler for all renames in the Navigator view.    
There could also be a special rename handler for resources that support   
refactoring rename (e.g., a Java file).  Both handlers would have expressions   
associated with them: one checking the active part, and the other checking the   
current selection.  In this case, it would be possible to give preference to   
the one checking the current selection, if it was possible to know that the   
expression references the selection variable.   
   
I've created a simple patch providing this functionality.  It would be helpful   
if you could provide feedback.   
   
This is something that is important to the completion of the contributions  
proposal, which Platform/UI is hoping to complete for 3.2.  We talked about  
this briefly during 3.1, but I apologize if this comes as a bit of a surprise.

There is no "Expressions" component, so I wasn't sure where to file this bug.   
   
It would be helpful if expressions would expose the names of the variables   
which they reference.  This is helpful for two reasons:   
+ Improving performance   
+ Conflict resolution   
   
If an expression reports the names of the variables it references, then it is   
possible for clients of the expression system to group expression based on   
variable names.  This way, rather than evaluating all expressions when any one   
variable changes, it is possible to evaluate only those expressions that   
reference the changed variable.  This provides a clear benefit if, for   
example, there is an expression tied to every menu item and the active part   
changes.   
   
The names of the variables also allow a rudimentary conflict resolution scheme   
based on variable name.  For example, consider the case of a handler selection   
process using expressions.  In the Navigator view, there might be multiple   
handlers that wish to handle rename, depending on certain conditions.  There   
could be a default rename handler for all renames in the Navigator view.    
There could also be a special rename handler for resources that support   
refactoring rename (e.g., a Java file).  Both handlers would have expressions   
associated with them: one checking the active part, and the other checking the   
current selection.  In this case, it would be possible to give preference to   
the one checking the current selection, if it was possible to know that the   
expression references the selection variable.   
   
I've created a simple patch providing this functionality.  It would be helpful   
if you could provide feedback.   
   
This is something that is important to the completion of the contributions  
proposal, which Platform/UI is hoping to complete for 3.2.  We talked about  
this briefly during 3.1, but I apologize if this comes as a bit of a surprise.
Created attachment 27956
Patch to "org.eclipse.core.expressions"
Hi Douglas,

I have looked at the patch and I did some modifications to address the following
problem: there can be sub classes of expression which might not implement the
new method. In this case the returned result can IMO not be trusted. I extended the
code to collect the classes as well which don't implement the method to be able
to log them so that client can adjust their code. To do so I introduced a class
ReevaluationInfo instead of using a string array. 

Let me know what you think about the new path.
Created attachment 28675
The new patch
Doug, I wrote some test cases and discovered some problems with the
implementation. I will attach a new one soon...
Created attachment 28678
Improved patch
Created attachment 28679
Test cases
I was aware of the subclassing, but felt it could just be ignored.  Your way 
is a much better way of dealing with. 
 
The new "ReevaluationInfo" is a bit confusing to me.  It seems to refer to a 
particular use case (i.e., whether the expression should be re-evaluated).  
There are other uses for the information (e.g., conflict resolution).  Why not 
use something like "VariableInfo" instead? 
 
Efficiency is a big concern for me.  It would be nice if we could pack things 
down.  It's nice that you avoid adding strings for variable names that we know 
a priori (e.g., system properties). 
 
It might be better to minimize the size of the HashSets in ReevaluationInfo or 
use arrays.  The default HashSet constructor makes a HashMap table with 16 
slots.  I feel the average ReevaluationInfo instance will only have one or two 
or three variable names.  In such a small case, it actually might be faster to 
just do a loop using equals to detect duplicates, and keep the array as small 
as possible. 
 
If there are two booleans in the class, then it might be better to compact the 
information into a single integer. 
 
Several implementations of doComputeReevaluationInfo create a second temporary 
instance of ReevaluationInfo.  And I'm not sure why it's necesary unless the 
default variable is changing.  Is there some other case I'm missing? 
 
Thanks again for spending time on this. 
 
I chose the name since I thought that we might add more "information" in the
future to the object. For example the referenced property testers and the
plug-ins that define them. So we would be able to reevaluate an expression tree
when a plug-in gets loaded and therefore the tester can be fully evaluated.
However I am open for a better name, but VariableInfo is IMO a little bit to
specific. What's about EvaluationInfo

Regarding performance:

- I can limit the hash set to a certain size or even switch the implementation
  between array and hash set depending on the size of the collection. But 
  without real numbers I would like to stick to hash sets with a limited size.

- two booleans: IMO this is the job of a compiler or VM ;-).

Regarding create a second temporary instance of ReevaluationInfo:

the problem is visibility. To reuse doCompute... I have to make it public on
Expression instead of protected and then it will be visible for clients which
might be a little confusing. So one idea is to remove the compute method which
returns the info and only provide one implementation that takes "the result" as
an argument.
Created attachment 28755
Performance Test App

How about just making it getInfo() and call the class "ExpressionInfo"?  BTW,
adding more information to the info class after 3.2 will be difficult, as
anyone can subclass.

I don't see the visibility problem.  doCompute is protected, and so available
to all subclasses.  In fact, a few subclasses already call doCompute -- just
not all of them.

I was curious as to how justified my paranoia was.  So I wrote a small
performance test application.  You can read the source code to see what these
numbers mean exactly.  But, basically, arrays are *much* faster than sets.

Default hash set - 165ms
7 size hash set - 134ms
5 size array - 35ms
growing array - 55ms

Also, I tested the different ways of storing booleans ...
100 000 BooleanObjects used 1 999 416 bytes.
100 000 IntegerObjects used 1 995 872 bytes.

... and the time it takes to set two boolean values in each ...
BooleanObject - 56ms
IntegerObject - 54ms

(not a very significant difference between two booleans and one integer, so
you're right to leave the VM to handle this case)
Quick answer regarding visibility: it is protected and defined on Expression.
CompositeExpression is in a different package and although a subclass of
Expressions isn't allowed to call protected methods on instances of type
Expression (e.g. the children managed in the fExpressions list).

I will look at the rest of the comment tomorrow.
We can always deal with performance issues later.  I didn't realize the   
visibility was an issue in this case.  We could go back to the model of having  
the "result" based around as an argument.  I have mild preference for that 
approach, but I'm not sure it matters enough. 
Here is what I did:

- renamed the class to ExpressionInfo
- using lists instead of hash tables
- two methods
  computeExpressionInfo (convenience method)
  collectExpressionInfo (doing the actual work)
- Composite expression uses collectExpressionInfo

Thank you. 
