Created attachment 99675
a few test cases added to NegativeTests (source only - need to generate the jar file again)

I20080510-2000

In some cases typically involving missing types, JDT APT's implementation of TypeElement#getInterfaces returns ERROR types whereas javac's returns nothing at all.

See the attachments for a more complete set of cases, and a hack that fixes them.

Most simple case would be like:
package p;
class X implements I {
}

package q;
interface I {
}

javac would not see I as an interface for X, whereas JDT APT would provide an ERROR type for it.

Created attachment 99675
a few test cases added to NegativeTests (source only - need to generate the jar file again)

I20080510-2000

In some cases typically involving missing types, JDT APT's implementation of TypeElement#getInterfaces returns ERROR types whereas javac's returns nothing at all.

See the attachments for a more complete set of cases, and a hack that fixes them.

Most simple case would be like:
package p;
class X implements I {
}

package q;
interface I {
}

javac would not see I as an interface for X, whereas JDT APT would provide an ERROR type for it.
Created attachment 99676
Exploratory fix

This is an exploratory fix meant to start the discussion. Note that it has comments in it that I wouldn't release, but are only meant to support further elaboration. The trick is that HasMissingType is set for some types we wouldn't want to exclude, hence the somewh
[hit return by mistake - apologies]
... somewhat clumsy test of the binding type, which might well be too tightly coupled to the current bindings hierarchy.
The JSR269 spec requires these interfaces to be returned.  Javac is not in compliance with the spec, and Eclipse (without this fix) does comply.  The reason to consider changing Eclipse's behavior is that some commercial products based on Eclipse need to pass the Java compliance tests, which apparently reflect the javac bug.  Because we meet the spec, we fail the tests.

We should assume that the tests will be fixed at some point.  If we apply this patch, and the tests get fixed, we will fail them again; so at some point this patch will need to be removed again.  I am not sure how we will discover the problem or how we will manage that change in a way that benefits our users.

I am not aware of any users who currently rely on this, especially since it's broken in javac.  However, it's fairly easy to imagine a use case that drives it:

package org.xyz.impl;
@GenerateIDL(name="org.xyz.idl.IPiggyBank")
class PiggyBank implements org.xyz.idl.IPiggyBank {
    @IDLMethod
    @Override
    void addPennies(int nPennies) { ... }

    @IDLMethod
    @Override
    int getTotal() { ... }

    void doSomethingInternal() { ... }
}

The idea here is that an APT code generator will create the IPiggyBank interface, and perhaps also some IDL stubs to it, based on the set of methods annotated with @IDLMethod.

Again, I don't know of anyone actually doing this, but I believe this is the use case envisioned by the JSR269 designers.
Actually, a correction - in the code I just pasted, there'd be no reason to call getInterfaces().  If you remove the "name" element from the @GenerateIDL, then you need getInterfaces() to work; and indeed, you'd want it to recover the qualified name of the interface, not just its simple name.  That's more than JSR269 promises, so perhaps that's why nobody's pursued this (to my knowledge).
Walter, I think this situation is business as usual. If I compare this with the base Java language, we've got a specification (JLS 3), reference implementations (javac at various levels), and tests that products that build upon Eclipse and want to be declared Java compliant must pass. As long as all those pieces agree, we're fine. As soon as discrepancies creep in, we've got to make hard choices, and, as far as we can, work with the people who publish the pieces of the whole to reduce the said discrepancies.
My understanding is that Eclipse is not only a great tool that strives to provide its users with the best possible value, but also a great platform which continued success as such demands that products can be built upon it, part of which will eventually need to certify against tests. Accordingly, I'd see our runway wrt to Java compatibility tests essentially reduced to nothing at all, even if we've got some left wrt to the reference implementation and the spec when those clash.
(In reply to comment #5)
> Walter, I think this situation is business as usual. [...] I'd see our
> runway wrt to Java compatibility tests essentially reduced to nothing at all,
> even if we've got some left wrt to the reference implementation and the spec
> when those clash.

I agree with this.  However, I do think in this case the tests may be a moving target, because the javac behavior is such a clear violation of the spec.  Unfortunately Sun does not make the JCK bug list public, so there is no way to know what the state of this bug might be - it may already be fixed in the latest version of the compliance test.

So my main concern is, if we make this fix, how we will track it and revert it when the Sun bug is fixed.
(In reply to comment #6)
...
> So my main concern is, if we make this fix, how we will track it and revert it
> when the Sun bug is fixed.
Valid point indeed.


Reviewed and committed Maxime's changes to HEAD for 3.4RC1.  I added a comment in the code change to link it back to this bug.
