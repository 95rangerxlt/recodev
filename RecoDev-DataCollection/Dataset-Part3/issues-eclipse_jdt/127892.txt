Various enhancements for existing refactorings including hierarchical package rename and delete, updating related fields, methods and locals on type rename and improved visibility adjustments on move refactorings will be implemented. Furthermore, existing refactorings will be improved to preserve API compatibility where possible (for example when renaming a method, a deprecated stub with the old signature will be generated that forwards to the new method). We will investigate in a new refactoring 'Extract super class'. [JDT UI]

Various enhancements for existing refactorings including hierarchical package rename and delete, updating related fields, methods and locals on type rename and improved visibility adjustments on move refactorings will be implemented. Furthermore, existing refactorings will be improved to preserve API compatibility where possible (for example when renaming a method, a deprecated stub with the old signature will be generated that forwards to the new method). We will investigate in a new refactoring 'Extract super class'. [JDT UI]
Added for 3.2:
- hierarchical package rename and delete
- updating related fields, methods and locals on type rename
- improved visibility adjustments on move refactorings
- API aware refactorings (leave delegate behind)
- new refactoring 'extract supertype'
- new refactoring 'introduce indirection'

