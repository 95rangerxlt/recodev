When I try to apply "Use SuperType Where Possible" to the program below
(trying to replace references to type "FastEcho" with references to type
"Echo"), I get a popup "The refactoring does not change any source code."
However, the declaration of variable f in class "Hello" can be given type
"Echo".

  - Frank

Echo.java:


public interface Echo {
        public String echo(String s);
}

FastEcho.java:


public class FastEcho extends SuperEcho {

}

Goodbye.java:


public class Goodbye {

        static public void use(FastEcho f) {
                System.out.println(f.echo("Goodbye world."));
        }

}

Hello.java:


public class Hello {

        public static void main(String[] args) {
                System.out.println("Hello");
                FastEcho f = new FastEcho();
                System.out.println( f.echo("World.") );
                // Goodbye.use(f);
        }

}

SlowEcho.java:


public class SlowEcho extends SuperEcho {

        public String echo(String s){
                try {
                        Thread.sleep(5000);
                } catch (InterruptedException e) {
                        e.printStackTrace();
                }
                return s;
        }

}

SuperEcho.java:


public class SuperEcho implements Echo {

        public String echo(String s){
                return s;
        }

}

When I try to apply "Use SuperType Where Possible" to the program below
(trying to replace references to type "FastEcho" with references to type
"Echo"), I get a popup "The refactoring does not change any source code."
However, the declaration of variable f in class "Hello" can be given type
"Echo".

  - Frank

Echo.java:


public interface Echo {
        public String echo(String s);
}

FastEcho.java:


public class FastEcho extends SuperEcho {

}

Goodbye.java:


public class Goodbye {

        static public void use(FastEcho f) {
                System.out.println(f.echo("Goodbye world."));
        }

}

Hello.java:


public class Hello {

        public static void main(String[] args) {
                System.out.println("Hello");
                FastEcho f = new FastEcho();
                System.out.println( f.echo("World.") );
                // Goodbye.use(f);
        }

}

SlowEcho.java:


public class SlowEcho extends SuperEcho {

        public String echo(String s){
                try {
                        Thread.sleep(5000);
                } catch (InterruptedException e) {
                        e.printStackTrace();
                }
                return s;
        }

}

SuperEcho.java:


public class SuperEcho implements Echo {

        public String echo(String s){
                return s;
        }

}
Frank, are you looking into this ?
Not for 3.0.
Cannot reproduce when replacing FastEcho with Echo. Could reproduce when
replacing with SuperEcho. Assuming this was inaccurately reported.

Fixed in HEAD. The problem was that the last line of TypeBindings.isSubtypeOf(.)
used IBinding.equals(Object) where it should have used Bindings.equals(.).

I corrected that by removing class TypeBindings and reusing classes Bindings and
TypeRules instead.
*** Bug 50985 has been marked as a duplicate of this bug. ***
*** Bug 51023 has been marked as a duplicate of this bug. ***
