package p;

public class FinalConstructor {
	private final int test;
	public FinalConstructor() {
		test=5;
	}
}
Use Extract Class on all fields and create getters and setters. The code results in:
package p;

public class FinalConstructor {
	private FinalConstructorParameter parameterObject = new FinalConstructorParameter();
	public FinalConstructor() {
		parameterObject.setTest(5);
	}
}
But a final field can only be set in the constructor. I can't see how to solve this problem, except by warning the user.

package p;

public class FinalConstructor {
	private final int test;
	public FinalConstructor() {
		test=5;
	}
}
Use Extract Class on all fields and create getters and setters. The code results in:
package p;

public class FinalConstructor {
	private FinalConstructorParameter parameterObject = new FinalConstructorParameter();
	public FinalConstructor() {
		parameterObject.setTest(5);
	}
}
But a final field can only be set in the constructor. I can't see how to solve this problem, except by warning the user.
Should:
package p;

public class FinalConstructor {
	private FinalConstructorParameter parameterObject = 
		new FinalConstructorParameter(5);

	public FinalConstructor() {
	}
}

package p;
public class FinalConstructorParameter {
	private final int test;

	public FinalConstructorParameter(int test) {
		this.test= test;
	}

	public int getTest() {
		return test;
	}
}

A final variable can only be assigned once and only in an initializer.
It would be much easier to implement if you would generate:

public class FinalConstructor {
	private final FinalConstructorParameter parameterObject;

	public FinalConstructor() {
		parameterObject= new FinalConstructorParameter(5);
	}
}


Do this if possible before 3.4 please. Otherwise generate a setter for test and make the field non final in the parameter class.

Unfortunately it is not that easy. i.e if you have 2 final fields like:
package p;

public class FinalConstructor {
	private final int test;
	private final int test2;
	public FinalConstructor() {
		test=5;
		if (test==6){
			test2=3;
		} else
			test2=7;
	}
}
There is nothing you could do if you don't want to perform complete control flow analysis. I guess stating a message that such cases will cause error and leaving the original assignment are the best/general way to deal with it.
public class FinalConstructor {
        private final ParameterObject parameterObject;

        public FinalConstructor() {
                int test=5;
                int test2;
                if (test==6){
                        test2=3;
                } else
                        test2=7;

                parameterObject= new ParameterObject(test, test2);
        }
}

No need for flow analysis. Keep it simple.

Looks like a good solution. It seems quite common, but will require some additional code that I will look into later.
Created attachment 75427
Patch

This patch ignores the original final modifier and creates a normal field for it with setters
Released 'Patch' for 3.3M1
marking as fixed for M1
