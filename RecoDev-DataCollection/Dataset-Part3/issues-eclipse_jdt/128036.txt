I20050215

See a similar scenario to the one from bug 127692:

- have this code
public class A {
    public static void main(String[] args) {
        System.out.println("ouch");
    }
    
    
    void foo() {
        String s= "abcdefghijklmnopqrstuvwxyz";
        String s1= "abcdefghijklmnopqrstuvwxyz";
        String s2= "abcdefghijklmnopqrstuvwxyz";
        String s3= "abcdefghijklmnopqrstuvwxyz";
    }
}

- select the entire three lines of the main method
- press Ctrl+1
- type 'f' to filter the proposals (this also replaces the main method with f
- press <return> to apply the for-template

> too much of the document gets replaced.

The problem here is that QuickTemplateProcessor::collectSurroundTemplates uses the (int, int) version of CompilationUnitContextType::createContext. This produces a template context that cannot properly track changes in the underlying document. When passing a tracked Position to the createContext() factory method, this problem would be fixed as the document modification would update the position properly.

The hard part in using a position is that you have to remove the position again after the quick assist session is over - even if your proposal never got executed. One could do this by listening for completion sessions (see ICompletionListener).

I20050215

See a similar scenario to the one from bug 127692:

- have this code
public class A {
    public static void main(String[] args) {
        System.out.println("ouch");
    }
    
    
    void foo() {
        String s= "abcdefghijklmnopqrstuvwxyz";
        String s1= "abcdefghijklmnopqrstuvwxyz";
        String s2= "abcdefghijklmnopqrstuvwxyz";
        String s3= "abcdefghijklmnopqrstuvwxyz";
    }
}

- select the entire three lines of the main method
- press Ctrl+1
- type 'f' to filter the proposals (this also replaces the main method with f
- press <return> to apply the for-template

> too much of the document gets replaced.

The problem here is that QuickTemplateProcessor::collectSurroundTemplates uses the (int, int) version of CompilationUnitContextType::createContext. This produces a template context that cannot properly track changes in the underlying document. When passing a tracked Position to the createContext() factory method, this problem would be fixed as the document modification would update the position properly.

The hard part in using a position is that you have to remove the position again after the quick assist session is over - even if your proposal never got executed. One could do this by listening for completion sessions (see ICompletionListener).
We don't realy support filtering proposals in quick fix. Typing while the proposal window is open is just typing in the editor and and quick fixes should reevaluated..
The special 'validate' behaviour of code templates should be disabled.

We should create the TemplateProposals in quick fix in such a way that they do not use 'validate'.

fixed > I20060216-2000

Return 'false' in TemplateProposal#validate, effect is that proposal pop up does close
fixed the fix:

Only return false if it is a quick template proposal or a surround with template proposal.
