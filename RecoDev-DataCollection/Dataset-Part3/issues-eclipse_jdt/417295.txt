BETA_JAVA8:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd released on behalf of
https://bugs.eclipse.org/bugs/show_bug.cgi?id=417113 needs some tweaking/massaging
in the type annotated null analysis support. These were captured during review
of the mentioned patch and the present CR is being opened to track such tasks.

From bug 409586 comment 65:
(1) NTAT#testBinary05 demonstrates that resetting contradictory nullTagBits is currently broken. Subsequently the non-null value is detected as not conforming to '@NonNull @Nullable Object'.

(2) ArrayBinding.nullAnnotatedReadableName(CompilerOptions, boolean) must use nullAnnotatedReadableName(..) also for its #leafComponentType, tests will need adjustments after that.

(3) FlowAnalysisTest8#testLambda_04 is now expecting one more error, which should be reverted. Should be a simple matter of clearing bogus nullAnnotationTagBits.

(4) Error messages in testBug416175()
1.: mixing short and long names
2.: I like "required \'@NonNull ? extends String\'" better than "required \'@NonNull capture#\'" when it's clear we're not interested in compatibility of the capture itself, only in null safety.


(5) STB#resolveTypeFor(FieldBinding): Invoking copySE8AnnotationsToType before field.fillInDefaultNonNullness is problematic because we'll use field.tagBits instead of field.type.tagBits!
'Accidentally' this is partly fixed by VariableBinding.isNonNull() where we check both tagBits locations. But bug shows when assigning null to such field:
  @NonNullByDefault class AllAreNonNull {
	String s3 = ""; // leaving this uninitialized would be detected
	void test() {
		this.s3 = null; // this goes unnoticed!!!
	}
  }
Note that the corresponding method resolveTypesFor(MethodBinding) does not have this issue, because INAV.checkImplicitNullAnnotations already distinguishes 1.7- vs. 1.8+ 

(6) MethodBinding#fillInDefaultNonNullness18 is currently broken. The following two simple changes seem to fix the respective TODOs:
  this.parameters[i] = env.createAnnotatedType(parameter, new AnnotationBinding[]{env.getNonNullAnnotation()});
  this.returnType = env.createAnnotatedType(this.returnType, new AnnotationBinding[]{env.getNonNullAnnotation()});
Seeing these as marked TODO could indicate there's more to this??

[No, I didn't know env.getNonNullAnnotation() was available]

(7) BinaryTB#scanFieldForNullAnnotation had an initial stanza which served two purposes for the 1.8+ case:
- apply a @NonNullByDefault to the field's type binding
- shortcut everything else that is needed only for 1.7-

Frankly, I don't understand this change.
The first aspect may partly be covered by VariableBinding#isNonNull() which checks tagBits at the FieldBinding AND at its type, but this is probably not sufficient/safe.

[Sorry, I may have been guilty of over-pruning here and in a few other places]

BETA_JAVA8:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd released on behalf of
https://bugs.eclipse.org/bugs/show_bug.cgi?id=417113 needs some tweaking/massaging
in the type annotated null analysis support. These were captured during review
of the mentioned patch and the present CR is being opened to track such tasks.

From bug 409586 comment 65:
(1) NTAT#testBinary05 demonstrates that resetting contradictory nullTagBits is currently broken. Subsequently the non-null value is detected as not conforming to '@NonNull @Nullable Object'.

(2) ArrayBinding.nullAnnotatedReadableName(CompilerOptions, boolean) must use nullAnnotatedReadableName(..) also for its #leafComponentType, tests will need adjustments after that.

(3) FlowAnalysisTest8#testLambda_04 is now expecting one more error, which should be reverted. Should be a simple matter of clearing bogus nullAnnotationTagBits.

(4) Error messages in testBug416175()
1.: mixing short and long names
2.: I like "required \'@NonNull ? extends String\'" better than "required \'@NonNull capture#\'" when it's clear we're not interested in compatibility of the capture itself, only in null safety.


(5) STB#resolveTypeFor(FieldBinding): Invoking copySE8AnnotationsToType before field.fillInDefaultNonNullness is problematic because we'll use field.tagBits instead of field.type.tagBits!
'Accidentally' this is partly fixed by VariableBinding.isNonNull() where we check both tagBits locations. But bug shows when assigning null to such field:
  @NonNullByDefault class AllAreNonNull {
	String s3 = ""; // leaving this uninitialized would be detected
	void test() {
		this.s3 = null; // this goes unnoticed!!!
	}
  }
Note that the corresponding method resolveTypesFor(MethodBinding) does not have this issue, because INAV.checkImplicitNullAnnotations already distinguishes 1.7- vs. 1.8+ 

(6) MethodBinding#fillInDefaultNonNullness18 is currently broken. The following two simple changes seem to fix the respective TODOs:
  this.parameters[i] = env.createAnnotatedType(parameter, new AnnotationBinding[]{env.getNonNullAnnotation()});
  this.returnType = env.createAnnotatedType(this.returnType, new AnnotationBinding[]{env.getNonNullAnnotation()});
Seeing these as marked TODO could indicate there's more to this??

[No, I didn't know env.getNonNullAnnotation() was available]

(7) BinaryTB#scanFieldForNullAnnotation had an initial stanza which served two purposes for the 1.8+ case:
- apply a @NonNullByDefault to the field's type binding
- shortcut everything else that is needed only for 1.7-

Frankly, I don't understand this change.
The first aspect may partly be covered by VariableBinding#isNonNull() which checks tagBits at the FieldBinding AND at its type, but this is probably not sufficient/safe.

[Sorry, I may have been guilty of over-pruning here and in a few other places]
(8) If it is not too much work, rewire IProblem.NullAnnotationUnsupportedLocationAtType (and IProblem.NullAnnotationUnsupportedLocation ?) to report errors after checking
bindings and not AST. This combined with good coverage in test suite to reject
null annotations in all unsupported locations would help shake out any bugs
in the deep encoding implementation.
(9) http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd has 10 items
with the tag TODO(Stephan). Go through these to make sure all are suitably
addressed. A few may have to wait until TVB/substitution issues are fully
investigated. Many others can be cleaned up already.
(10) LE#getNullableAnnotation and its counterpart should not call new,
but should use LE#createAnnotation or LE.typeSystem.getAnnotationType.
Looks like I wrote the getNullableAnnotation and its partner, I have
no memory of it :) These routines could come in handy to synthesize
null annotations for use with getAnnotatedType.

(11) In ParameterizedTypeBinding.isEquivalentTo(TypeBinding), I have commented
out some code with the question: "is this intentional ??". I felt a bit
uncomfortable with routines that implement JLS being changed. This needs to
be looked into to see what is the right thing. Can a test be constructed
that would show why this change is absolutely needed ? Is commenting out
this code the reason for the mutation of the message in NTAT#testBinary02 ?
If so, is the new message good enough that we can have this change stay
commented out (deleted)
(In reply to Srikanth Sankaran from comment #1)
> (8) If it is not too much work, rewire
> IProblem.NullAnnotationUnsupportedLocationAtType (and
> IProblem.NullAnnotationUnsupportedLocation ?) to report errors after checking
> bindings and not AST. This combined with good coverage in test suite to
> reject
> null annotations in all unsupported locations would help shake out any bugs
> in the deep encoding implementation.

Can you clarify the intention?
Are you suggesting to detect problems later in order to exercise more of
our code while running NTAT?
If so, maybe the same can be achieved by one-time tweaking of options during
test so that null annotations are not handled specially? Not sure.
(In reply to Srikanth Sankaran from comment #0)
> (2) ArrayBinding.nullAnnotatedReadableName(CompilerOptions, boolean) must
> use nullAnnotatedReadableName(..) also for its #leafComponentType, tests
> will need adjustments after that.

This is fixed the easy way via commit a170a70f9fd89b9996c94f318397ff4dca1db782
(In reply to Srikanth Sankaran from comment #0)
> (1) NTAT#testBinary05 demonstrates that resetting contradictory nullTagBits
> is currently broken. Subsequently the non-null value is detected as not
> conforming to '@NonNull @Nullable Object'.

Also other items speak of wiping bogus null annotations. Bit thinking more about this I feel this would be wrong: When using TypeBinding.unannotated() we could easily remove unrelated annotations, and in the end we should probably present the original bindings with all annotations to JDT/UI.
Even wiping just the null tag bits is probably not a good idea: only if we keep all null tag bits we can recognize by inspecting instantiated PGMBs if substitution created any contradictions, which will be a first step towards solving bug 416190.
For these reasons I implemented the inverse strategy:
- annotations and even null tag bits are fully retained
- ensure that both bits set (Nullable & NonNull) won't cause duplicate error
  messages. Use NAM.validNullTagBits for filtering where appropriate
- do not call TypeBinding.unannotated() after detecting an error
- to compensate for not calling unannotated() from InstanceOfExpression
  Expression.checkCastTypesCompatibility needs to use equalsEquals() in two
  locations

Additionally, I moved one block from MessageSend.analyseCode to resolveType,
because it doesn't depend on any flow information

Released via commit 25c55f5a3b95044fb71ce56ee0bb0a797b58daa1
(In reply to Srikanth Sankaran from comment #0)
> (6) MethodBinding#fillInDefaultNonNullness18 is currently broken. The
> following two simple changes seem to fix the respective TODOs:
>   this.parameters[i] = env.createAnnotatedType(parameter, new
> AnnotationBinding[]{env.getNonNullAnnotation()});
>   this.returnType = env.createAnnotatedType(this.returnType, new
> AnnotationBinding[]{env.getNonNullAnnotation()});
> Seeing these as marked TODO could indicate there's more to this??
> 
> [No, I didn't know env.getNonNullAnnotation() was available]

Fixed the easy way via commit aa6078ae8b56e2dd94bf0e99bd049422ccaa24f4
(In reply to Srikanth Sankaran from comment #0)
> (3) FlowAnalysisTest8#testLambda_04 is now expecting one more error, which
> should be reverted. Should be a simple matter of clearing bogus
> nullAnnotationTagBits.

Fixed in commit e3e2c6db2bd518e6c887dd95ff25a83382caa874 by avoiding to set nullAnnotationTagBits on BaseTypeBindings.
(In reply to Srikanth Sankaran from comment #0)
> (4) Error messages in testBug416175()
> 1.: mixing short and long names
> 2.: I like "required \'@NonNull ? extends String\'" better than "required
> \'@NonNull capture#\'" when it's clear we're not interested in compatibility
> of the capture itself, only in null safety.

Fixed in commit 79dfe93fb5ee8f61e6c4f3be92a2d21cce1717db :

1.: Fixed an unconditional readableName() to obey to shortNames

2.: In ProblemReporter don't blame this problem against a capture but its wildcard. May optionally want to apply the same strategy to more problems.
(In reply to Srikanth Sankaran from comment #0)
> (5) STB#resolveTypeFor(FieldBinding): Invoking copySE8AnnotationsToType
> before field.fillInDefaultNonNullness is problematic because we'll use
> field.tagBits instead of field.type.tagBits!
> 'Accidentally' this is partly fixed by VariableBinding.isNonNull() where we
> check both tagBits locations. But bug shows when assigning null to such
> field:
>   @NonNullByDefault class AllAreNonNull {
> 	String s3 = ""; // leaving this uninitialized would be detected
> 	void test() {
> 		this.s3 = null; // this goes unnoticed!!!
> 	}
>   }
> Note that the corresponding method resolveTypesFor(MethodBinding) does not
> have this issue, because INAV.checkImplicitNullAnnotations already
> distinguishes 1.7- vs. 1.8+ 

Instead of fiddling with the order of steps I adjusted FieldBinding.fillInDefaultNonNullness to directly create an annotated type in 1.8+

Released via commit 6ca7655344cc04fd2732983b3bef96aa0f451863
(In reply to Srikanth Sankaran from comment #0)
> (7) BinaryTB#scanFieldForNullAnnotation had an initial stanza which served
> two purposes for the 1.8+ case:
> - apply a @NonNullByDefault to the field's type binding
> - shortcut everything else that is needed only for 1.7-
> 
> Frankly, I don't understand this change.
> The first aspect may partly be covered by VariableBinding#isNonNull() which
> checks tagBits at the FieldBinding AND at its type, but this is probably not
> sufficient/safe.
> 
> [Sorry, I may have been guilty of over-pruning here and in a few other
> places]

I added a test to witness the problem (actually a direct variant of what I added for item (5)). The test shows that restoring the deleted block fixes the problem.

Released via commit 43351a2f71910029138257aaee18da33f0b724b2

This concludes the bunch of items from comment 0.
Addressing test failures in NullAnnotationTests I consolidated detection of contradictory annotations:

- during Annotation#resolveType:
  - all recipients check for contradictions based on SE5 tagBits
  - no more special checking for locals

- consistently use Scope#validateNullAnnotation after resolving Annotations
  to check more illegal usages

- within ASTNode.copySE8AnnotationsToType() check whether the newbies conflict
  with any existing annotations on the type (e.g., type variable with
  declaration site null annotation).

- avoid double treatment in Argument#createBinding

Released via commit 68db0a50107f072688f40bcdb70cc1c2cadc3119

Additionally commit 7c0be3631ccaa5ae2d50fbe318ed50c01164d856 brings a refactoring suggested in bug 417113 (item (9) after renumber).
(In reply to Stephan Herrmann from comment #4)
> (In reply to Srikanth Sankaran from comment #1)
> > (8) If it is not too much work, rewire
> > IProblem.NullAnnotationUnsupportedLocationAtType (and
> > IProblem.NullAnnotationUnsupportedLocation ?) to report errors after checking
> > bindings and not AST. This combined with good coverage in test suite to
> > reject
> > null annotations in all unsupported locations would help shake out any bugs
> > in the deep encoding implementation.
> 
> Can you clarify the intention?
> Are you suggesting to detect problems later in order to exercise more of
> our code while running NTAT?
> If so, maybe the same can be achieved by one-time tweaking of options during
> test so that null annotations are not handled specially? Not sure.

OK, let us say we see a construct:

    pkg.@NonNull Outer.@NonNull Inner oi;

If we say @NonNull annotation does not make sense on Outer and want to complain,
then we could complain looking at the AST or at the binding. My suggestion was 
to complain looking at the binding, so these tests serve as additional proof 
that the encoding works as expected. But only if it is not too much to work
to change.
Some failures in NullAnnotationTest where due to wrong behaviour in {Field,Method}Binding#canBeSeenBy(..). Suitable use of equalsEquals / notEquals fixes these issues. Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=c8fa56c625729a2c5aff4c492dea2eebe9fdcef6

Another group of failures was related to open TODOs in ImplicitNullAnnotationVerifier, fixed via commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=841f0bfe84392d37aa864c563d3642fdef603b24

With these I'm down at 1 failure in NullAnnotationTest, which is related to ConditionalExpression and whether we need an intersection type...
(In reply to Stephan Herrmann from comment #14)

> With these I'm down at 1 failure in NullAnnotationTest, which is related to
> ConditionalExpression and whether we need an intersection type...

Thanks, I hope to get to my set of open issues within a week's time. Thanks
for your patience.
(In reply to Stephan Herrmann from comment #14)

> With these I'm down at 1 failure in NullAnnotationTest, which is related to
> ConditionalExpression and whether we need an intersection type...

Does it make sense to disable that one test and enable the suite, so everyone
gets the benefit of testing more ? TIA.
(In reply to comment #16)
> (In reply to Stephan Herrmann from comment #14)
> 
> > With these I'm down at 1 failure in NullAnnotationTest, which is related to
> > ConditionalExpression and whether we need an intersection type...
> 
> Does it make sense to disable that one test and enable the suite, so everyone
> gets the benefit of testing more ? TIA.

No need for tweak :) 
Simply adding one more equalsEquals in ConditionalExpression fixes that failure and brings NAT back to full success.

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=2070676b1e20c45846e614809eff55257373d539 are:
- the fix in ConditionalExpression for NullAnnotationTest
- a preventive improvement to use the more dangerous of two equalsEquals types
- a follow-up correction in NAM.computeNullProblemSeverity()
- re-enabling of NullAnnotationTest in 1.8 mode
(In reply to comment #2)
> (9)
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd
> has 10 items
> with the tag TODO(Stephan). Go through these to make sure all are suitably
> addressed. A few may have to wait until TVB/substitution issues are fully
> investigated. Many others can be cleaned up already.

Some items have already been addressed by previous changes, some are covered by numbered items in this bug.
Last remaining TODO in NTAT on behalf of bug 417113 is addressed by http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3e7114db66d7154ea4072c5af4dcd065de055bb8:

* ConditionalExpression with different annotations on valueIfTrue / False: if types are equalsEquals try harder to find the "more dangerous" type, otherwise: see below

New item arising from the above:

(12) lub computation if types are 
- compatible 
- but not equalsEquals 
- *and* have different null annotations 
-> requires more work, see new disabled NTAT._testConditional2
(In reply to comment #3)
> (10) LE#getNullableAnnotation and its counterpart should not call new,
> but should use LE#createAnnotation or LE.typeSystem.getAnnotationType.
> Looks like I wrote the getNullableAnnotation and its partner, I have
> no memory of it :) These routines could come in handy to synthesize
> null annotations for use with getAnnotatedType.

Resolved via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=7bc187afbb4bb56c7b85a00c0e5a5881aabde72f

(I took the liberty to cache these two annotation bindings in LE)
(In reply to comment #3)
> (11) In ParameterizedTypeBinding.isEquivalentTo(TypeBinding), I have commented
> out some code with the question: "is this intentional ??". I felt a bit
> uncomfortable with routines that implement JLS being changed. This needs to
> be looked into to see what is the right thing. Can a test be constructed
> that would show why this change is absolutely needed ? Is commenting out
> this code the reason for the mutation of the message in NTAT#testBinary02 ?
> If so, is the new message good enough that we can have this change stay
> commented out (deleted)

Thanks for catching this. These lines were prematurely released for bug 392384, at what time NAT had some failures in 1.8 mode, ie. null type annotation analysis was pretty much in flux, still. Much water has flown into the sea since then and today those lines would only cause harm -> removed via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=0de87442117bb22923c82a3ea7fce2ce6f7d0ece
Taking stock of done vs. todo the following items remain:

(In reply to Srikanth Sankaran from comment #1)
> (8) If it is not too much work, rewire
> IProblem.NullAnnotationUnsupportedLocationAtType (and
> IProblem.NullAnnotationUnsupportedLocation ?) to report errors after checking
> bindings and not AST. This combined with good coverage in test suite to
> reject
> null annotations in all unsupported locations would help shake out any bugs
> in the deep encoding implementation.

(In reply to Stephan Herrmann from comment #18)
> (12) lub computation if types are 
> - compatible 
> - but not equalsEquals 
> - *and* have different null annotations 
> -> requires more work, see new disabled NTAT._testConditional2
Created attachment 235685
proposal for lub computation

Srikanth, here's a proposal how we could approach the lub computation involving annotated types.

I'd like to hear your say before committing, because this goes in a different direction than what you have indicated in the code, maybe I misunderstood s.t.

My starting point was test NTAT.testConditional2, where a conditional expression requires computing the lub of List<@NonNull String> and ArrayList<String>.

The patch does contain a commented attempt to use an intersection type as suggested, but 
(a) this gives a *typing* error 

  Type mismatch: cannot convert from List<capture#1-of ? extends String> to List<String>

where we need a null type safety error

  Null type safety (type annotations): The expression of type 'List<String>' needs unchecked conversion to conform to 'List<@NonNull String>'\n

and (b) intersection type to me seems to go the wrong direction, isn't lub more like a union type than an intersection?


The patch proceeds in two steps:

In Scope.minimalErasedCandidates() I revert to using != instead of notEquals so we populate allInvocations also with mapping String->'@NonNull String' etc. (thus reading "erased" as "erased and unannotated"). In this vein erasedSuperTypes is populated with unannotated() types, too.

When the result of the above is fed into leastContainingTypeArgument I added special case treatment for two types that only differ in type annotations: in that case refrain from creating wildcards but simply use the unannotated variant. This is in line with reading 'unannotated' as the union type of all annotated variants. Perhaps we should be more specific, to combine C<@A T> and C<@A @B T> into C<@A T>, i.e., we may have to compute the intersection of incoming annotations.

All changes are commented with some variant of TODO. 


The patch fixes this particular test and doesn't cause regressions in RunAllJava8Test, but obviously we need more tests in this area as well.

Do you have a comment?
(In reply to comment #22)

Apparently I tested a slightly different variant than what I posted: The given patch does cause a failure in ClassFileReaderTest_1_8.test003_classExtends(), which can be fixed by either:
- revert the change marked as "// TODO unnecessary?"
- add code to Scope.hasErasedCandidatesCollisions() to filter out the case
  where multiple mecs only differ in annotations.

More tests needed to decide which is better.
Created attachment 235694
improved patch for lub computation

This is probably as good as it will get for now, some more successful tests added, no regression found.

Summarizing the revised strategy:

- the initial change is still in Scope#minimalErasedCandidates:
  + here we use != rather than notEquals to add more mappings
    naked->annotated into the allInvocations map.
  + erasedSuperTypes are recorded unannotated
  + new: when a 'match' was found which is annotated, include the naked
    variant as a value into the allInvocations map to signal that the type
    annotations of 'match' have not yet been checked against all input types
  As a result all returned types are naked, but allInvocations if filled with
  more mappings holding the type annotations.

- inside Scope#leastContainingInvocation we may need to perform one more step: after identifying the type/bestArgument we want to re-apply the intersection of annotations from input types.

- re-applying common type annotations requires a small change in AnnotatableTypeSystem.getAnnotatedType(TypeBinding, TypeBinding,
TypeBinding[], AnnotationBinding[]) as proposed in bug 417113 comment 43

- Scope#leastContainingTypeArgument: if two types are != and equalsEquals consider the unannotated version as the common containing type (could apply the intersection of common annotations as above, but no test found for this, yet).

- as a consequence of the above: when checking for super interface collision we now need to check if the perceived collision is due only to type annotations and avoid reporting in that case

At the end I could remove the special treatment in ConditionalExpression using NAM.moreDangerousType(). By reverting to using "==" instead of equalsEquals more cases go into the lub() branch, where they are now treated well :)

The causes one change in observable behavior:
Previously, a CE of the shape 'boolean ? @Nullable C : C' would be typed as '@Nullable C' (due to special semantics in moreDangerousType()), which would show in error messages.
Now, the expression is *typed* as 'C' but flow analysis *infers* it to be @Nullable.
The message is similar but reported in category NullAnnotationInferenceConflict rather than NullSpecViolation.

I'll let it rest for a couple of days before committing. Comments welcome.
(In reply to Stephan Herrmann from comment #24)
> Created attachment 235694 [details]
> improved patch for lub computation
onInferenceConflict rather than NullSpecViolation.

> I'll let it rest for a couple of days before committing. Comments welcome.

Give me a few days more please. I am wondering if we should punt on the whole
issue as belonging to grey area - I don't think the spec calls for annotations
being handled one way or other for lub computation and an ostrich approach may
not be uncalled for. For null analysis, may be some special code could be
added that would look deep inspect the parts of the conditional - I don't know
how easy/clean this would be, but something to think about.

Not ruling out the proposed solution, it has its merits.

In ATS, if you want to make the change, we should use the unannotated type as 
the key consistently every where, not just in getAnnotatedType() ? Also the
cachedType must be compared with the incoming type everywhere along with
other attributes of the value element that are already being compared ? Earlier
this comparison was implied since the keys were different.

I think this change in ATS is worth making, it would likely address the
needless duplication referred to in https://bugs.eclipse.org/bugs/show_bug.cgi?id=417113#c16
(In reply to Srikanth Sankaran from comment #25)

> Not ruling out the proposed solution, it has its merits.

On investigaing further, I can see the complications that led you to the
proposed solution. This is a tricky one, I'll study further.
Created attachment 235738
Fix that completely bypasses lub computation.

Stephan, please take a look and see if this meet our needs. I had to remaster
the tests to match the new expected output - that is slightly different, but
IMO something we can live with.

This fix completely side steps the issue of lub computation in the presence of
type annotations. 

I think this approach is consistent with JSR308's as well as overall JLS's
mandate that the compiler should ignore (type) annotations other than to validate
their syntactical correctness and applicability via meta annotations.
Comment on attachment 235738
Fix that completely bypasses lub computation.

On another note, it would seem all compiler subsystems except *TypeSystem
should ignore type annotations and use TypeBinding.equalsEquals and 
TypeBinding.notEquals consistently and we should keep to a minimum the use of 
the method unannotated(). I am beginning to think that anytime we see a need 
for ==/!= or unannotated(), we need to take a second (and perhaps a third) look.
That goal may turn out to be utopian, but not terribly so ?
(In reply to Srikanth Sankaran from comment #27)
> Created attachment 235738 [details]
> Fix that completely bypasses lub computation.

Sorry for the piecemeal updates, this fails a couple of tests:
test_nullable_field_11 and test_nullable_field_11a.

I think the expiry policy for null checked field info needs some massaging to
work well with the new solution that reaches into the conditional's arms.
Stephan, do you want to take a look ?
Srikanth, your proposed patch is tempting by its simplicity. Nice!

From a JLS purist p.o.v. this is probably the way to go.
From a null analysis p.o.v. I don't know how to proceed from there.
Here's a mean little example:

	@NonNull String lub(List<@NonNull String> l1, 
			List<@Nullable String> l2, int i) {
		if (i < 10)
			return ((i % 2 == 0) ? l1 : l2).get(i/2); // #1
		return ((i % 2 == 0) ? l2 : l1).get(i-10); // #2
	}

With your patch we're silent at #1 and at #2 we report
   Null type mismatch (type annotations): required '@NonNull String' but this expression has type '@Nullable String'

Without going into details of this asymmetry: the main question is whether or not the ConditionalExpression itself has a type that carries useful type annotations. Regarding this question
- JLS is silent
- null analysis wants intersection of type annotations
- JDT/UI *may* want the rich variant, e.g., for extracting the CE into a method and proposing a suitably annotated return type

Looking further into one possible future: having type annotations (optionally?) considered in lub computation we would be doing one step towards a universal poor-man's pluggable type system, i.e., ability to raise an optional warning if *any* type annotations don't provably match. I say "poor man's", because most type systems for type annotations probably need *some* special treatment that cannot be covered by this universal scheme. But we could do initial compatibility checking - optionally of course.


The JLS argument weighs heavy. As you may guess I want a better answer for null analysis. I suggest to let this rest for now (my time to work on this right now is limited). On a related note: should we include substitution in the same discussion? AFAICS in that scenario you've gone the deep route, haven't you?


As for better test coverage I was thinking of creating a bunch of white box tests using DOM bindings, which much better let us test the exact type bindings computed by the compiler - after bug 409586 is released, that is.
(In reply to Stephan Herrmann from comment #30)
> Srikanth, your proposed patch is tempting by its simplicity. Nice!
> 
> From a JLS purist p.o.v. this is probably the way to go.
> From a null analysis p.o.v. I don't know how to proceed from there.
> Here's a mean little example:

Sorry, my bad. IIRC, you pointed out the same/similar oversight earlier. I 
couldn't readily locate that comment though.

> The JLS argument weighs heavy. As you may guess I want a better answer for
> null analysis. I suggest to let this rest for now (my time to work on this
> right now is limited).

OK, I plan to spend a bounded time to try and understand this scenario better.

> On a related note: should we include substitution in
> the same discussion? AFAICS in that scenario you've gone the deep route,
> haven't you?

Yes, but that is fully warranted, even though the JLS may not call it out
expressly. If annotations on type arguments of a parameterized type do not
participate in substitution, they are worthless. 

> As for better test coverage I was thinking of creating a bunch of white box
> tests using DOM bindings, which much better let us test the exact type
> bindings computed by the compiler - after bug 409586 is released, that is.

Thanks.
(In reply to Stephan Herrmann from comment #21)
> Taking stock of done vs. todo the following items remain:
> 
> (In reply to Srikanth Sankaran from comment #1)
> > (8) If it is not too much work, rewire
> > IProblem.NullAnnotationUnsupportedLocationAtType (and
> > IProblem.NullAnnotationUnsupportedLocation ?) to report errors after checking
> > bindings and not AST. This combined with good coverage in test suite to
> > reject
> > null annotations in all unsupported locations would help shake out any bugs
> > in the deep encoding implementation.

Thanks to Jay, there is excellent coverage via TypeBindingTests308.
I think we can tag this items as done. We have further tests coming
in for APT TypeMirrors too.


> (In reply to Stephan Herrmann from comment #18)
> > (12) lub computation if types are 
> > - compatible 
> > - but not equalsEquals 
> > - *and* have different null annotations 
> > -> requires more work, see new disabled NTAT._testConditional2

Let us handle this in https://bugs.eclipse.org/bugs/show_bug.cgi?id=417113.
