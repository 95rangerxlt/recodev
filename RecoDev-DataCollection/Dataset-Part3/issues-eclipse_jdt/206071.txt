We need to create a resource delete processor similar to the rename one in bug 205805 that can be used by IDE resource actions and other clients.

PW

We need to create a resource delete processor similar to the rename one in bug 205805 that can be used by IDE resource actions and other clients.

PW
Created attachment 80174
Delete Resources Processor v01

Partial creation of the DeleteResourcesProcessor - the DeleteFileChange and UndoDeleteResourceChange.

Obviously not even a partially functioning patch ... no processor!

PW
Created attachment 80271
Delete Resources Processor v02

Work in progress.  This now has the processor, descriptor, and contribution. It handlers undo/redo for IFile and IFolder deletes.

PW
Created attachment 80377
Delete Resources Processor v03

I've updated this to follow the MoveResourcesProcessor more closely.  The descriptor handles multiple resources/paths.  The delete change objects hold a copy of their change descriptor.

I've also made the UndoResourceDeleteChange internal, which allows me to make the ResourceDescriptor internal and use it without exposing it (or until we have a better answer).

Now if only I had a wizard to go with it :-)

PW
looks good, let me know when you want me to release it
comments:
- I'd rather put the serializing functionality to a util class and not 'misuse' inhertance for this (ResourceRefactoringContribution)
- We need to find out what to do with the ResourceDescription hierarchy
  > Name conflict, sounds like descriptor
  > Big hierarchy, is that really needed?
  > code duplication

You can the tests to ltk.core.refactoring.tests
Created attachment 80448
Delete Resources Processor v04

I've updated the patch with:
* I've moved the 2 serialize methods onto ResourceProcessors as static utility methods
* I've renamed the ResourceDescription hierarchy to *State ... they're saved state objects, and then they don't look so much like the ResourceDescriptors.  They are still all internal.  Another posibility would be to add Undo to make them more descriptive (haha).  ResourceUndoState, FileUndoState, ProjectUndoState, etc
* I've moved the tests into ResourceRefactoringTests, and I've had to add more dependencies in the test plugin (core.commands, core.filesystem, core.test.harness, etc).

As for the ResourceState hierarchy ... It does look to be big, but it seems to include what is needed to undo (mostly) deletes.  File content, markers, folders, projects, containers.  I'm not that familiar with the resource stuff, except that these classes are what ui.ide is using to get the undo resource operations working correctly.

I'd like to go ahead and commit this, unless you would like to send it back for further modifications (I think I've followed the MoveResourcesProcessor pattern).  I'll try my wizard tomorrow in another bug.

PW
I liked your idea of calling it UndoState. I renamed the files and moved them in an own package.

Reviewed and released with some changes (mostly comments) > 20071017
The changes look good.  Thanx for your help.

PW

(In reply to comment #6)
> I liked your idea of calling it UndoState. I renamed the files and moved them
> in an own package.

Oh, it doesn't look like the tests were released.  Is there some more work you'd like me to do?

PW

The tests are released as well in a new file 'ResourceRefactoringUndoTests'.
I still have to add it to the full ltk.refactoring.core.tests suite, so they are run with nightly builds.

I'll soon release the delete wizard, with some UI polish.
But after that I think we're done. Of course we need some deeper testing and also more tests. 

Ooops, I missed that class.  Next week I'll look at providing some move/undo tests as well.

PW

