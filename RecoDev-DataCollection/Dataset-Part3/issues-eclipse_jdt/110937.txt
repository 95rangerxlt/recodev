I20050921-1200

Open a Java editor
Ctrl-o to open the quick outline
Switch to another app with alt-tab REALLY REALLY FAST
go back to eclipse and ctrl-o no longer works

Relevant are of the debug trace:

CONTEXTS >> [org.eclipse.ui.contexts.dialogAndWindow, org.eclipse.jdt.ui.javaEditorScope, 
org.eclipse.ui.contexts.window]
BINDINGS >> Cache miss
BINDINGS >> There are 29 deletion markers
BINDINGS >> A conflict occurred for COMMAND+F11
BINDINGS >>     [Binding(COMMAND+F11,ParameterizedCommand(Command
(org.eclipse.debug.ui.commands.DebugLast,Debug Last Launched,Debug the last launch in debug mod
KEYS >>> Listener.handleEvent(type = KeyDown, stateMask = 0x0, keyCode = 0x400000, time = 
-1658628572, character = 0x0)
KEYS >>> Listener.handleEvent(type = KeyDown, stateMask = 0x400000, keyCode = 0x6f, time = 
-1658628179, character = 0x6f)
KEYS >>> WorkbenchKeyboard.press(potentialKeyStrokes = [COMMAND+O])
KEYS >>> WorkbenchKeyboard.executeCommand(commandId = 
'org.eclipse.jdt.ui.edit.text.java.show.outline', parameters = {})
CONTEXTS >> [org.eclipse.ui.contexts.dialogAndWindow, org.eclipse.ui.contexts.window]


Note the contexts no longer contain the java context.

I20050921-1200

Open a Java editor
Ctrl-o to open the quick outline
Switch to another app with alt-tab REALLY REALLY FAST
go back to eclipse and ctrl-o no longer works

Relevant are of the debug trace:

CONTEXTS >> [org.eclipse.ui.contexts.dialogAndWindow, org.eclipse.jdt.ui.javaEditorScope, 
org.eclipse.ui.contexts.window]
BINDINGS >> Cache miss
BINDINGS >> There are 29 deletion markers
BINDINGS >> A conflict occurred for COMMAND+F11
BINDINGS >>     [Binding(COMMAND+F11,ParameterizedCommand(Command
(org.eclipse.debug.ui.commands.DebugLast,Debug Last Launched,Debug the last launch in debug mod
KEYS >>> Listener.handleEvent(type = KeyDown, stateMask = 0x0, keyCode = 0x400000, time = 
-1658628572, character = 0x0)
KEYS >>> Listener.handleEvent(type = KeyDown, stateMask = 0x400000, keyCode = 0x6f, time = 
-1658628179, character = 0x6f)
KEYS >>> WorkbenchKeyboard.press(potentialKeyStrokes = [COMMAND+O])
KEYS >>> WorkbenchKeyboard.executeCommand(commandId = 
'org.eclipse.jdt.ui.edit.text.java.show.outline', parameters = {})
CONTEXTS >> [org.eclipse.ui.contexts.dialogAndWindow, org.eclipse.ui.contexts.window]


Note the contexts no longer contain the java context.
The problem is somewhere either in SWT or JDT/UI.  In  
AbstractInformationControl.createViewMenu, there is a line as follows:  
  
fKeyBindingService.setScopes(new String[]  
{IWorkbenchContextSupport.CONTEXT_ID_WINDOW});  
  
The scopes are restored in a subsequent widgetDisposed handler.  However, for 
whatever reason, this widgetDisposed handler is never called.  As such, the 
scopes are never restored. 
 
To make it easier to reproduce, I would recommend opening the "OS" class from 
SWT.  It takes quite a while for Ctrl+O to open the shell on this file. 
 
I can reproduce this problem on Linux GTK+ and Kim can reproduce on MacOS X. 
 
something we need to look at in M3
moving to M4 - we should coordinate this with bug 113104
Apparently, this just happened to me.  I don't know for sure, but I don't think
I used one of the quick views. Can this happen with the code assist pop-up too?
(In reply to comment #4)
> Can this happen with the code assist pop-up too?

I don't think so - we don't set any contexts or scopes there.
This is now fixed by using the new PopupDialog.
There's one remaining issue: bug 115785.
