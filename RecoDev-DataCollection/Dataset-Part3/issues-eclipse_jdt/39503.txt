20030701

TAB goes to the next linked field, SHIFT + TAB to the previous.

- the algorithm never selects a field of the same kind. For the quick fix/assist
it might be better to allow that, so the linked fields can be 'browsed'.
- a loop mode might be good: Pressing TAB at the end position, the first
position could be activated again.

This seems to be a bug:

void foo() {
   newMethod();
}

void newMethod() {
}

newMethod and void are positions
when 'void' is in focus, TAB does not go to newMethod: LinkedPositionManager
considers 'newMethod' as already visited

20030701

TAB goes to the next linked field, SHIFT + TAB to the previous.

- the algorithm never selects a field of the same kind. For the quick fix/assist
it might be better to allow that, so the linked fields can be 'browsed'.
- a loop mode might be good: Pressing TAB at the end position, the first
position could be activated again.

This seems to be a bug:

void foo() {
   newMethod();
}

void newMethod() {
}

newMethod and void are positions
when 'void' is in focus, TAB does not go to newMethod: LinkedPositionManager
considers 'newMethod' as already visited
- not sure about the fields of the same kind - it's the point of the linked 
fields (e.g. when a template gets inserted) that you only have to define a 
reference once - being able to do that in more than one spot might confuse the 
user?

+1 for the loop - I am already looking into this.
Created attachment 5364
linked position patch. Allows loops, custom typed positions, and ProposalPositions

- adds an optional argument "type" to the addPosition method in
LinkedPositionManager that allows the caller to specify the position type
instead of it being determined by the document content at the position.

- new addPosition arguments allow to specify an array of ICompletionProposal
that will be shown in a content-assist-like popup when the position is
selected.

- a quick and dirty modification of ParameterGuessingProposal and
ParameterGuesser show an example of how the above changes can be used.

- the implementation of the popup is currently based on a modified copy of the
jface.text.contentassist infrastructure.

- changes to jface.text.contentassist and JavaEditor.InformationDispatchAction
allows F2 to give focus to the current popup (because TAB is used by the linked
UI to iterate positions.
Note that ICompletionProposal might not be the best choice: It only offers
apply(IDocument).  So in fact you need ICompletionProposalExtension to get the
current insertion offset.
How do you get the replacement length?

ICompletionProposalExtension is just an extension to ICompletionProposal - any 
extension should also implement ICompletionProposal. The content assist will 
choose which apply() methods are called based on the runtime type of the 
proposals. 

So, if you feed in ICompletionProposalExtension(2,3), the appropriate methods 
will be called - and replacement at the correct position will only work then, 
as you said.
Created attachment 5420
focus and accessibility

Addition to attachment 5364

- Removes the IPopupParent 

Extends the IWidgetTokenOwner /-keeper protocol:
- adds priorities to widget token requests
- IWidgetTokenKeepers can be asked to take the focus
- F2 action (by default) requests a registered token keeper to take focus
- TAB belongs now entirely to Linked Position UI - the normal ProposalPopup
will just close, but not give focus to the popup.

Minor enhancements / fixes to the ParameterGuesser hack:
- will now return "this" if parameter fits enclosing class
- does not throw exception on zero proposals any more
Created attachment 5421
focus and accessibility

included wrong version of jface.text patch in attachment 5420. Take this one.
fixed a long time ago
