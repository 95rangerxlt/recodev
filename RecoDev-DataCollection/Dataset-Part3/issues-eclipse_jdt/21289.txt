When using automatic method generation for implementing abstract methods, it 
would be helpful to have an option to generate a method body with a 
RuntimeException being raise, e.g.

public Object foo() {
 throw new UnsupportedOperationException("Method foo is not implemented.");
}

instead of a normal return.

This will be helpful for selectively implementing part of an interface.

When using automatic method generation for implementing abstract methods, it 
would be helpful to have an option to generate a method body with a 
RuntimeException being raise, e.g.

public Object foo() {
 throw new UnsupportedOperationException("Method foo is not implemented.");
}

instead of a normal return.

This will be helpful for selectively implementing part of an interface.
The idea is to control something like this via templates so that users can 
define their own method stub.
It may not be as simple as using the template, without the template system 
being enhanced. If the user chooses to continue the current implementation 
(ie. have the stub generated to return the default value, null, 0, 0.0, 
false), there is no way (as far as I could tell) to have the template 
automatically insert the right choice/type.
This can now be controlled using the new code templates. Preferences->Java-
>Code Generation->Code and Comments.


