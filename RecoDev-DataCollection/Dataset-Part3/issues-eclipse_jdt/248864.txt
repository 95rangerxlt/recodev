HEAD, follow-up to bug 164449

I find the 3 Java proposal categories introduced with bug 164449 confusing.

Better proposals names (would also make sure they are not spread over the whole list):
- Java Proposals          (replaces All Java Proposals)
- Java Type Proposals     (replaces Type Proposals)
- Java Non-Type Proposals (replaces All But Java Type Proposals)

However, do we really have to bother the user with 3 partly overlapping proposals at all? In HEAD, when I have all 3 Java proposal kinds enabled, I get all proposals twice. This must not happen. Can't you just deal with the performance issue internally and leave the UI as in 3.4?

I would revert the UI to the state of I20080918-0100 (maybe rename to "Java Type Proposals" and "Java Non-Type Proposals" as suggested above). The Java proposal computers should talk to each other and decide on the right code assist call depending on whether one or both of them are enabled.

Furthermore, you also have to check the final solution for migration compatibility. Currently failing scenario:
- create new workspace with I20080918-0100
- in 'default' list, enable word proposals, disable both Java proposals, OK
- in 'default' list, enable all proposals, OK
- launch with I20080923-0800
=> You get double proposals, since all 3 proposal kinds are now active. This actually happened to me.

HEAD, follow-up to bug 164449

I find the 3 Java proposal categories introduced with bug 164449 confusing.

Better proposals names (would also make sure they are not spread over the whole list):
- Java Proposals          (replaces All Java Proposals)
- Java Type Proposals     (replaces Type Proposals)
- Java Non-Type Proposals (replaces All But Java Type Proposals)

However, do we really have to bother the user with 3 partly overlapping proposals at all? In HEAD, when I have all 3 Java proposal kinds enabled, I get all proposals twice. This must not happen. Can't you just deal with the performance issue internally and leave the UI as in 3.4?

I would revert the UI to the state of I20080918-0100 (maybe rename to "Java Type Proposals" and "Java Non-Type Proposals" as suggested above). The Java proposal computers should talk to each other and decide on the right code assist call depending on whether one or both of them are enabled.

Furthermore, you also have to check the final solution for migration compatibility. Currently failing scenario:
- create new workspace with I20080918-0100
- in 'default' list, enable word proposals, disable both Java proposals, OK
- in 'default' list, enable all proposals, OK
- launch with I20080923-0800
=> You get double proposals, since all 3 proposal kinds are now active. This actually happened to me.
The migration problem has already been fixed last week.

I agree that it looks weird on first look but it is an ADVANCED setting after all. The solution I took also solves the issue for people that first want to have e.g. templates or methods and then on the second Ctrl+Space they want all proposals - or: first have all and then restrict to non-types- This was not possible so far.

I like the name changes.

Fixed in HEAD.
Available in builds > N20080928-2000.
