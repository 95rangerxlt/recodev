The present visual design of JUnit View UI is vertical-oriented. Usually test 
names in hierarchy and class names in a failure trace are long and user have to 
make JUnit UI wider, which affets the rest of workplace UI. From other hand, 
the most of output went to the console, which is horisontal oriented, and task 
view area with all of the errors fit to the same place. So, it will be much 
better to review the present JUnit view and adjust it to fit better in the same 
spot as console and task view. It will be also good to reduce the size of the 
area with progress bar and execution statistics (maybe to alligh those into one 
horizontal row).

As an example of the possible design you may look at the screenshot of IDEA 
JUnit UI at http://joe.truemesh.com/screenshots/idea-junit1.gif

The present visual design of JUnit View UI is vertical-oriented. Usually test 
names in hierarchy and class names in a failure trace are long and user have to 
make JUnit UI wider, which affets the rest of workplace UI. From other hand, 
the most of output went to the console, which is horisontal oriented, and task 
view area with all of the errors fit to the same place. So, it will be much 
better to review the present JUnit view and adjust it to fit better in the same 
spot as console and task view. It will be also good to reduce the size of the 
area with progress bar and execution statistics (maybe to alligh those into one 
horizontal row).

As an example of the possible design you may look at the screenshot of IDEA 
JUnit UI at http://joe.truemesh.com/screenshots/idea-junit1.gif
Created attachment 4366
Example of JUnit UI from IDEA
Have you tried to use the JUnit view as a fast view. Then it only pops up on 
request (when you click on it). You can figure out if the tests are ok by the 
green or red squares rendered over the image.

No action planned for 2.1
"Fast view" is the only practical vay to use JUnit view in a present time. 
Unfortunately it became very inconvenient to use in the situation when many 
tests are fail (for example after some redesigns or refactorings).

My suggestion is to introduce option to allow vertical split of error details 
like it is dome for "Type Hiearchy", "Call 
Hierarchy", "Variables", "Expressions" and some other views. It will allow of 
the better representation of wide stack traces and much more convenient 
navigation and switching between source and error details.

Another convenient improvements could be to add history to "Run" button of 
JUnit view, the same way as it is implemented for "Search" view or in "Run" 
button of the main toolbar.
Erich,

can you pleae comment.


Created attachment 7150
pic showing the fix
Created attachment 7151
fix

Implementation notes

Adapted code from:

org.eclipse.jdt.internal.ui.callhierarchy.ToggleOrientationAction

and

org.eclipse.jdt.internal.ui.callhierarchy.CallHierarchyViewPart

reused the images from org.eclipse.jdt.ui_3.0.0\icons\full\elcl16

@@@@

There is one problem remaining though:

The view menu will not show the radio before the current orientation if one
closes the view then reopens.

I think the problem is that restoreLayout is not called when the view is
redisplayed (e.g. the scroll lock button will not keep its setting either).
see bug 39853 [JUnit] 'scroll lock' not saved between sessions [JUnit]

The view's orientation could be persisted in the same way.
Great work Sebastian! I can only suggest to rearrange view in new vertical mode,
so runs/errors/failures will be in the same line as progress bar. This way space
will be used a bit better.

Dirk, Eric, is there are any chance to see this patch in the codebase?

incorporated the patch - in the vertical layout the the JUnit progress bar is 
shown on the same line as the counters. thanks for the patch and the 
suggestion!
I've tested these changes. UI looks almost great. However there are some bugs in
the implementation. For instance, it does not show a correct number of failures
and errors in the summary numbers.

I also think that this new UI still can be improved. I can see two possibilities.

-- 1st. Make it similar to CVS Synchronize UI. Progress bar and summary
(Runs/Errors/Failures) are in the status bar. This way it will be very
consistent with the UI of Synchronize view.

-- 2nd. Reduce offsets in that single line progress and summary information and
put it instead of the "Failure Trace" column header. Buttons from that header
can be moved into view titlebar. So, tabs Failures and Hierarchy will be at the
top of the view.

Even these options will not be accepted it will be great to reduce offsets anyway.

There are also something wrong with labels in the Failures list. I see the same
text twice, like this:

  testAA : 0 : 0 - testAA : 0 : 0

My test cases has toString() implementation that returns "testAA : 0 : 0"

I can also think of some more fundamental changes in JUnit view and in the JUnit
integration, but not quite sure if this bugreport is the appropriateplace for
such comments. Please advise.
let's keep this bug closed and file new bugs for the problems you mention 
below. The ground rule: is 1 problem per bug report.

>For instance, it does not show a correct number of failures
>and errors in the summary numbers.
pls file a bug and provide a reproducable test case.

Regarding the suggested layout options.

Option 1) you also want to see the progress bar when the view isn't active 
(status lines contributions are associated with the active part). So this 
isn't an option.

Option 2) will not work in the vertical/fast view case

Regarding overridding toString(). This problem is understood but the proper 
fix requires a change in junit.
>> For instance, it does not show a correct number of failures
>> and errors in the summary numbers.
> pls file a bug and provide a reproducable test case.

Will do

> Regarding the suggested layout options.

> Option 1) you also want to see the progress bar when the view 
> isn't active (status lines contributions are associated with 
> the active part). So this isn't an option.

> Option 2) will not work in the vertical/fast view case

About Option 2. Why it will not work? You can still stack labels and progress
bar verically as it is right now. Removing that dummy table header in vertical
layout too will buy us some more screen space in there too.

> Regarding overridding toString(). This problem is understood 
> but the proper fix requires a change in junit.

So, what are the chances that it might happend?


regarding the toString() problem...
There is good news I could fix it inside the Eclipse integration (i.e., it no 
longer relies on toString()). This is goodness since the JUnit committers are 
really slow when it comes to incorporating fixes...

regarding option 2) and removing the table header, we have been there and we 
got complaints. The header makes it clear what the pane is about. We have no 
plans to go back to this layout.
