The current completion feature is great, but with only the first letters of a
class name, one often gets quite a long list of candidates. Given the Java
convention of using CamelCase for names, I would like to be able to complete
names using the "compressed" form of a class name, where only uppercase letters
are relevant: "StringBuffer"'s compressed form would be "SB".

More specifically: on completion, if the text being completed consists only of
uppercase letters, for example "SB", consider this as a "template" for the full
name, and look in priority for class names of the form
"S[a-z0-9_]+B[a-z0-9_]+.*". Then, if there is still an ambiguity and the user
types another uppercase letter, say "B", restrict the candidate list to the ones
corresponding to the template "SBC" (giving for example ScatteringByteChannel).

Examples:
  SB<C-space> => StringBuffer (and others)
  CNFE<C-space> => ClassNotFoundException (probably the only one)
  STSTV<C-space> => StringToStringTableVector (here, typing "String<C-space>",
which is one character longer, gives you dozens of candidates, the right one
being almost at the end).

The current completion feature is great, but with only the first letters of a
class name, one often gets quite a long list of candidates. Given the Java
convention of using CamelCase for names, I would like to be able to complete
names using the "compressed" form of a class name, where only uppercase letters
are relevant: "StringBuffer"'s compressed form would be "SB".

More specifically: on completion, if the text being completed consists only of
uppercase letters, for example "SB", consider this as a "template" for the full
name, and look in priority for class names of the form
"S[a-z0-9_]+B[a-z0-9_]+.*". Then, if there is still an ambiguity and the user
types another uppercase letter, say "B", restrict the candidate list to the ones
corresponding to the template "SBC" (giving for example ScatteringByteChannel).

Examples:
  SB<C-space> => StringBuffer (and others)
  CNFE<C-space> => ClassNotFoundException (probably the only one)
  STSTV<C-space> => StringToStringTableVector (here, typing "String<C-space>",
which is one character longer, gives you dozens of candidates, the right one
being almost at the end).
Might be worth a try.

I have not tested this yet, but according to 3.2M4 "New and Noteworthy", this is now fixed (item "CamelCase support in code completion"). As the original bug reporter, I think this can be closed.

Indeed.
