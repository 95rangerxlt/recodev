1. Define a location for external annotations for a library or JRE
2. Edit the location
3. Press cancel
4. Wrong effect: the library configuration shows "(None)"
5. Click OK
6. The wrong effect is persisted.

1. Define a location for external annotations for a library or JRE
2. Edit the location
3. Press cancel
4. Wrong effect: the library configuration shows "(None)"
5. Click OK
6. The wrong effect is persisted.
Might be related to the recently fixed issue of deleting a configured value?
Created attachment 251668
jdt.debug patch to fix the problem
Created attachment 251669
jdt.ui patch to fix the problem
(In reply to Frits Jalvingh from comment #3)
> Created attachment 251669 [details]
> jdt.ui patch to fix the problem

That was quick, thanks!

I'll nevertheless wait until M6 has sailed, because M6 testing day is just over, and we don't want to risk invalidating the test efforts.
(In reply to Frits Jalvingh from comment #2)
> Created attachment 251668 [details]
> jdt.debug patch to fix the problem

@Sarika, this patch would be "for you". As mentioned above I think we should wait until M6 has sailed and then safely put these into M7 after due scrutiny.

Are you OK with picking up "your" patch from here, or do you prefer a new bug in JDT/Debug?
Well, I am a bit ashamed that this much comes out of a simple addition 8-/ So let's hope this is the last thingy...
Let me know if you'd rather have a different mechanism for posting these fixes.
Unless you want to jump on the gerrit band-waggon, patches are fine for me, no matter how small :)
Obviously automated tests would be awesome to demonstrate that quality is 	monotonically increasing.
(In reply to Stephan Herrmann from comment #5)
> (In reply to Frits Jalvingh from comment #2)
> > Created attachment 251668 [details]
> > jdt.debug patch to fix the problem
> 
> @Sarika, this patch would be "for you". As mentioned above I think we should
> wait until M6 has sailed and then safely put these into M7 after due
> scrutiny.
> 
> Are you OK with picking up "your" patch from here, or do you prefer a new
> bug in JDT/Debug?
We will put in M7 . We don't need a new bug.
(In reply to Frits Jalvingh from comment #2)
> Created attachment 251668 [details]
> jdt.debug patch to fix the problem

The patch does not solve the problem completely. The patch brings back the original issue of deleting and pressing OK. It does not delete the location. 

org.eclipse.jdt.ui.wizards.BuildPathDialogAccess.configureExternalAnnotationsAttachment(Shell, IPath)
should differentiate between 2 nulls it is returning .
One in the case of empty annotation location with ok and other when user cancels the dialog.
(In reply to Sarika Sinha from comment #9)
> (In reply to Frits Jalvingh from comment #2)
> > Created attachment 251668 [details]
> > jdt.debug patch to fix the problem
> 
> The patch does not solve the problem completely. The patch brings back the
> original issue of deleting and pressing OK. It does not delete the location. 
> 
> org.eclipse.jdt.ui.wizards.BuildPathDialogAccess.
> configureExternalAnnotationsAttachment(Shell, IPath)
> should differentiate between 2 nulls it is returning .
> One in the case of empty annotation location with ok and other when user
> cancels the dialog.

Oops!! looks like I missed the JDT UI patch !!
> Oops!! looks like I missed the JDT UI patch !!
Phfew ;-) I was worrying and could indeed not reproduce your new finding ;-)
Yes, the patch works fine now !!

My only worry is that we are in M7 which means no API changes.
New Gerrit change created: https://git.eclipse.org/r/44486
(In reply to Eclipse Genie from comment #13)
> New Gerrit change created: https://git.eclipse.org/r/44486

 * Based on attachment 251669
 * Fixed a copy & paste error (source attachment vs. external annotation)
 * Updated other pre-existing javadoc in the same vein.

(In reply to Sarika Sinha from comment #12)
> Yes, the patch works fine now !!

I can confirm, too: the following cases are now correctly distinguished:
 - cancel: no change
 - empty entry and OK: delete
 - non-empty entry and OK: set new value
 
> My only worry is that we are in M7 which means no API changes.

The only changes touching API are javadoc updates. At a closer look we are only making an explicit contract even more visible.
In fact class BuildPathDialogAccess was inconsistent as some methods mentioned <code>null</code> only in the general description and some additionally mentioned this in the @return description.

The uploaded gerrit change consistently repeats the null-hint in all @return descriptions.

@Markus: please let me know if you regard these javadoc changes in BuildPathDialogAccess as requiring approval of some sort. TIA.
Gerrit change https://git.eclipse.org/r/44486 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=50b1b8fdb288f43748740e035a420fdfe0902487
(In reply to Eclipse Genie from comment #15)
> Gerrit change https://git.eclipse.org/r/44486 was merged to [master].
> Commit:
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/
> ?id=50b1b8fdb288f43748740e035a420fdfe0902487

JDT/UI part released. 

Sarika, are you ready to release the JDT/Debug part, too?
> Sarika, are you ready to release the JDT/Debug part, too?

Pushed via
http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=d966f3a6ceac813cc1c8f6e56b5ebc31ca1f929c
(In reply to Sarika Sinha from comment #17)
> > Sarika, are you ready to release the JDT/Debug part, too?
> 
> Pushed via
> http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/
> ?id=d966f3a6ceac813cc1c8f6e56b5ebc31ca1f929c

Thanks!
That resolves this one.
