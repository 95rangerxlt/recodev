When using a ICodeFormatter implementation which just returns the received 
string of a single-line comment without changes, a fatal error occurs in the 
underlying widget.

Steps to reproduce:

-Use the Java Editor example (org.eclipse.ui.examples.javaeditor)
-Create simple formatter implementing ICodeFormatter
-In method "format(java.lang.String, int, int[], java.lang.String)" return the 
first parameter as result iff the input is from a single-line comment 
partition, the empty string otherwise.
-Create formatting strategy
-Enable partition-aware content formatting
-In method "format(java.lang.String, boolean, java.lang.String, int[]" use the 
following code:

final ICodeFormatter formatter= new CommentFormatter();

// or use StubUtility.getLineDelimiterFor(fViewer.getDocument())
String separator= "\r\n"; //$NON-NLS-1$
try {
	separator= fViewer.getDocument().getLineDelimiter(0);
} catch (BadLocationException e) {
}
return formatter.format(content, 0, positions, separator);

-Register the formatter with the following code in "getContentFormatter
(org.eclipse.jface.text.source.ISourceViewer)":

ContentFormatter formatter= new ContentFormatter();

IFormattingStrategy strategy= new SingleCommentFormattingStrategy
(sourceViewer);
formatter.setFormattingStrategy(strategy, 
JavaPartitionScanner.JAVA_SINGLELINE_COMMENT);

return formatter;

Error: see attachment

Possible cause: Single-stepping in debug mode shows that the input of the code 
formatter is e.g "//$NON-NLS-1$\r". But the document does not use the single 
carriage return character as line delimiter (see code).
It seems that the region stops between two line delimiter tokens. Returning 
e.g. "//$NON-NLS-1$" solves the problem, but has not the desired effect. Any 
string ending with some line delimiter tokens causes the fatal error.

When using a ICodeFormatter implementation which just returns the received 
string of a single-line comment without changes, a fatal error occurs in the 
underlying widget.

Steps to reproduce:

-Use the Java Editor example (org.eclipse.ui.examples.javaeditor)
-Create simple formatter implementing ICodeFormatter
-In method "format(java.lang.String, int, int[], java.lang.String)" return the 
first parameter as result iff the input is from a single-line comment 
partition, the empty string otherwise.
-Create formatting strategy
-Enable partition-aware content formatting
-In method "format(java.lang.String, boolean, java.lang.String, int[]" use the 
following code:

final ICodeFormatter formatter= new CommentFormatter();

// or use StubUtility.getLineDelimiterFor(fViewer.getDocument())
String separator= "\r\n"; //$NON-NLS-1$
try {
	separator= fViewer.getDocument().getLineDelimiter(0);
} catch (BadLocationException e) {
}
return formatter.format(content, 0, positions, separator);

-Register the formatter with the following code in "getContentFormatter
(org.eclipse.jface.text.source.ISourceViewer)":

ContentFormatter formatter= new ContentFormatter();

IFormattingStrategy strategy= new SingleCommentFormattingStrategy
(sourceViewer);
formatter.setFormattingStrategy(strategy, 
JavaPartitionScanner.JAVA_SINGLELINE_COMMENT);

return formatter;

Error: see attachment

Possible cause: Single-stepping in debug mode shows that the input of the code 
formatter is e.g "//$NON-NLS-1$\r". But the document does not use the single 
carriage return character as line delimiter (see code).
It seems that the region stops between two line delimiter tokens. Returning 
e.g. "//$NON-NLS-1$" solves the problem, but has not the desired effect. Any 
string ending with some line delimiter tokens causes the fatal error.
Created attachment 5567
Fatal error message
Issue is fixed with the new context based formatter
Available in builds >= I20030916

