I20051108-1011

ProcessorBasedRefactoring protects itself against participants that throw an
exception in createChange(..). However, it does not catch execptions thrown in
initialize(..) or in checkConditions(..).

We had a case where initialize(..) threw a ClassCastException, which generated a
wrong error message (participant does not extend required type).

I think we should protect all call backs and disable participants that throw a
RuntimeException.

I20051108-1011

ProcessorBasedRefactoring protects itself against participants that throw an
exception in createChange(..). However, it does not catch execptions thrown in
initialize(..) or in checkConditions(..).

We had a case where initialize(..) threw a ClassCastException, which generated a
wrong error message (participant does not extend required type).

I think we should protect all call backs and disable participants that throw a
RuntimeException.
Agree.
changing target to M5
I have change the code in the following way:

participant initialization: a participant got already disabled when throwing a core exception. Same happens now for runtime exceptions.

condition checking: participants causing a runtime exception are disbaled for this refactoring execution (e.g. they will not create any changes), an execpetion is logged and a message is presented to the user.
Fixed for build >= I20060110.
