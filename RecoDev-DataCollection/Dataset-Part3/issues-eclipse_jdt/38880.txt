Build 3.0-M1

When generating setter for field 'String name;', it will issue:

public void setName(String string){

}

Build 3.0-M1

When generating setter for field 'String name;', it will issue:

public void setName(String string){

}
[Damn bugzilla, couldn't finish my post in one shot...]


public void setName(String string){
   name = string;
}

The end result isn't very informative, since hovering onto the setter will show 
redundant information in between the type&parameter names.

It is generally better to provide meaningful names for parameters, and in this 
case: 'name' would read better. Thus, the setter below is far more desirable.

public void setName(String name){
   this.name = name;
}

Martin, 

in this case we are using JDT/COre naming proposal. Right? IMO we know better 
then JDT/Core and should first try to use name. If this results in a conflict 
we should ask JDT/Core for a proposal.
This doesn't fit in the name prefix story, though it could be extended for this 
purpose. In this particular scenario though, I would be more than happy to 
have 'all' my setter use the 'this.field' pattern (even if no collision)

This could be an option on your end, since you own this generation code.

Note that I logged a request on improving our naming suggestion to 
propose 'name' in such a scenario.
Are you sure this was 3.0-M1? We had this problem in 2.1 but fixed this. I also
couldn't reproduce it.

The reason why we changed this in 2.1 was because we wanted to use the JCore
name guesser to get the correct parameter prefix/suffixes. I changed back as
there were many complaints: I'm using the name guesser with a trick: see bug 38111
Oops, you're right, this was in 2.1.1RC1. Sorry.
fixed in 3.0 stream
