When dealing with certain classes, the Quick Fix solution doesn't match the
warning.  In this case, I'm not templatizing (or whatever Java calls it compared
to C++) a callback..  The QuickFix is to inverse the If operation.  No, that's
not right.

Warning Message:
Type safety: The method isAssignableFrom(Class) belongs to the raw type Class.
References to generic type Class<T> should be parameterized

Quick Fix: 
Inverse "if" statement


Example Code:
	Class c = Class.forName(instrumentClassName);
	if (c.isAssignableFrom(Instrument.class))
	{
		System.out.println("Yep, it's an Instrument");
	}
	else
	{
		System.out.println("Nope, it's bad.");
	}

When dealing with certain classes, the Quick Fix solution doesn't match the
warning.  In this case, I'm not templatizing (or whatever Java calls it compared
to C++) a callback..  The QuickFix is to inverse the If operation.  No, that's
not right.

Warning Message:
Type safety: The method isAssignableFrom(Class) belongs to the raw type Class.
References to generic type Class<T> should be parameterized

Quick Fix: 
Inverse "if" statement


Example Code:
	Class c = Class.forName(instrumentClassName);
	if (c.isAssignableFrom(Instrument.class))
	{
		System.out.println("Yep, it's an Instrument");
	}
	else
	{
		System.out.println("Nope, it's bad.");
	}
Compiler Compatibilty: 5.0
JDK: 1.5.0 (not _01)
Version: 3.1.0
Build id: I20050401-1645

What you see is only a general quick assist of if statements.
We currently don't provide a quick fix to fix raw accesses to generic types
(note that there is no light bulp next to the error)

*** Bug 111737 has been marked as a duplicate of this bug. ***
I have it on the M5 plan. 
released a first simple version > I20060119

Maybe this is allready good enough. For a more advanced fix one can apply the Infer Generic Type Arguments refactoring. Or I have to reuse some code from this refactoring for the quick fix to do code flow analyses.
fixed > I20060119

Released a much more advanced version which uses parts of the infer generic type arguments refactoring. i.e.:
List l;
l.add("String");
is fixed by proposing <String> as argument for List.
*** Bug 86076 has been marked as a duplicate of this bug. ***
*** Bug 110590 has been marked as a duplicate of this bug. ***
