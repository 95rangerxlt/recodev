Created attachment 97473
Jar file with annotation processor.

Build ID: M20080221-1800

Steps To Reproduce:
1. Enable annotation processing on a current project.
2. Add the attached jar file to the annotation processing path.
3. See the errors.
4. Run the same code with Sun's apt, which correctly allows wrapper to primitive assignment.


More information:
The issue here is that Types.isAssignable is returning false when passed a ClassType of "java.lang.Integer" and a PrimitiveType of Kind "INT", respectively.  Types should correspond to what's acceptable at the *source* level, not at the binary level for four reasons:

1.  The annotations occur in the source, and are annotating source transformations.
2.  According to the "Overview" section of he Mirror API, it's intended to model the language, as opposed to the VM structures.  At the language level, autoboxing and unboxing now allows both int -> Integer and Integer -> int (and of course, the other primitives as well).  Types.isAssignable() should allow that assignment.
3.  It's consistent with the reference APT implementation.
4.  Types.isSubtype() is an appropriate method to use when the opposite meaning is desired.

Created attachment 97473
Jar file with annotation processor.

Build ID: M20080221-1800

Steps To Reproduce:
1. Enable annotation processing on a current project.
2. Add the attached jar file to the annotation processing path.
3. See the errors.
4. Run the same code with Sun's apt, which correctly allows wrapper to primitive assignment.


More information:
The issue here is that Types.isAssignable is returning false when passed a ClassType of "java.lang.Integer" and a PrimitiveType of Kind "INT", respectively.  Types should correspond to what's acceptable at the *source* level, not at the binary level for four reasons:

1.  The annotations occur in the source, and are annotating source transformations.
2.  According to the "Overview" section of he Mirror API, it's intended to model the language, as opposed to the VM structures.  At the language level, autoboxing and unboxing now allows both int -> Integer and Integer -> int (and of course, the other primitives as well).  Types.isAssignable() should allow that assignment.
3.  It's consistent with the reference APT implementation.
4.  Types.isSubtype() is an appropriate method to use when the opposite meaning is desired.
Created attachment 97474
Annotation processor source for bug demo.
APT is failing here because org.eclipse.jdt.core.dom.TypeBinding.isAssignmentCompatible(ITypeBinding type) returns "false" when the receiver type is int and the argument is java.lang.Integer.

Reassigning to JDT Core for clarification.  Should we be calling a different method?  Or is there a technicality that I'm not understanding?  (JLS 5.2 seems to include boxing.)  If so, please reassign back to APT.  Thanks.
Could it be that the project is not a 1.5 project ?
ITypeBinding.isAssignmentCompatible(ITypeBinding) works fine for boxing and unboxing conversion if this is done in a context where the source level is greater or equals to 1.5.
What are the compiler settings for the project ?
Added test org.eclipse.jdt.core.tests.dom.ASTConverter15Test#test0286 to show that the conversion (boxing or unboxing) works fine in a 1.5 project.
I verified the problem in both a 1.5 and a 1.6 project.  (It must be at least 1.5, or else annotation processing wouldn't happen at all.)

How should this normally work?  The int receiver is a BaseTypeBinding, and BaseTypeBinding.isCompatibleWith() returns false when called with a BinaryTypeBinding (ie java.lang.Integer), because of the test at line 51.

APT may be doing something wrong here, I'm just not sure what.

The relevant part of the call stack looks like this (PrimWrapperConversionBug is the annotation processor; TypesUtil and PrimitiveTypeImpl are APT classes):

Daemon Thread [org.eclipse.jdt.internal.ui.text.JavaReconciler] (Suspended (breakpoint at line 51 in BaseTypeBinding))	
	BaseTypeBinding.isCompatibleWith(TypeBinding) line: 51	
	TypeBinding.isAssignmentCompatible(ITypeBinding) line: 953	
	PrimitiveTypeImpl.isAssignmentCompatible(EclipseMirrorType) line: 77	
	TypesUtil.isAssignable(TypeMirror, TypeMirror) line: 268	
	PrimWrapperConversionBug.process() line: 71	
	APTDispatchRunnable.dispatchToFileBasedProcessor(AbstractCompilationEnv, boolean, boolean) line: 628	
	APTDispatchRunnable.access$0(APTDispatchRunnable, AbstractCompilationEnv, boolean, boolean) line: 598	
	APTDispatchRunnable$ReconcileEnvCallback.run(AbstractCompilationEnv) line: 77	
	ReconcileEnv$CallbackRequestor.acceptBinding(String, IBinding) line: 135	
	CompilationUnitResolver.resolve(ICompilationUnit[], String[], ASTRequestor, int, Map, WorkingCopyOwner, int) line: 759	
	CompilationUnitResolver.resolve(ICompilationUnit[], String[], ASTRequestor, int, Map, IJavaProject, WorkingCopyOwner, int, IProgressMonitor) line: 474	
	ASTParser.createASTs(ICompilationUnit[], String[], ASTRequestor, IProgressMonitor) line: 733	
	BaseProcessorEnv.createASTs(IJavaProject, ICompilationUnit[], ASTRequestor) line: 852	
	ReconcileEnv.openPipeline() line: 108	
	AbstractCompilationEnv.newReconcileEnv(ReconcileContext, AbstractCompilationEnv$EnvCallback) line: 97	
	APTDispatchRunnable.reconcile(ReconcileContext, IJavaProject) line: 211	
	APTDispatchRunnable.runAPTDuringReconcile(ReconcileContext, AptProject, Map<AnnotationProcessorFactory,Attributes>) line: 159	
	AptCompilationParticipant.reconcile(ReconcileContext) line: 223
(In reply to comment #5)
> How should this normally work?  The int receiver is a BaseTypeBinding, and
> BaseTypeBinding.isCompatibleWith() returns false 

I was looking down the wrong code path; Olivier, I apologize for wasting your time.  (But thank you for the test case, because it helped me discover that.)

In the repro scenario's processor, there are two calls to isAssignable().  The one that is failing is the second, not the first.

In APT, the code path for the failing call looks like this:

Daemon Thread [org.eclipse.jdt.internal.ui.text.JavaReconciler] (Suspended (breakpoint at line 51 in PrimWrapperConversionBug))	
	PrimWrapperConversionBug.process() line: 51	
	APTDispatchRunnable.dispatchToFileBasedProcessor(AbstractCompilationEnv, boolean, boolean) line: 628	
	APTDispatchRunnable.access$0(APTDispatchRunnable, AbstractCompilationEnv, boolean, boolean) line: 598	
	APTDispatchRunnable$ReconcileEnvCallback.run(AbstractCompilationEnv) line: 77	
	ReconcileEnv$CallbackRequestor.acceptBinding(String, IBinding) line: 135	
	CompilationUnitResolver.resolve(ICompilationUnit[], String[], ASTRequestor, int, Map, WorkingCopyOwner, int) line: 759	
	CompilationUnitResolver.resolve(ICompilationUnit[], String[], ASTRequestor, int, Map, IJavaProject, WorkingCopyOwner, int, IProgressMonitor) line: 474	
	ASTParser.createASTs(ICompilationUnit[], String[], ASTRequestor, IProgressMonitor) line: 733	
	BaseProcessorEnv.createASTs(IJavaProject, ICompilationUnit[], ASTRequestor) line: 852	
	ReconcileEnv.openPipeline() line: 108	
	AbstractCompilationEnv.newReconcileEnv(ReconcileContext, AbstractCompilationEnv$EnvCallback) line: 97	
	APTDispatchRunnable.reconcile(ReconcileContext, IJavaProject) line: 211	
	APTDispatchRunnable.runAPTDuringReconcile(ReconcileContext, AptProject, Map<AnnotationProcessorFactory,Attributes>) line: 159	
	AptCompilationParticipant.reconcile(ReconcileContext) line: 223	
	ReconcileWorkingCopyOperation$1.run() line: 257	


Note that it does not go through PrimitiveTypeImpl; instead, it goes through TypeDeclarationImpl, which does not call to ITypeBinding.isAssignmentCompatible() but instead tries to do the calculation itself and apparently gets it wrong.

I don't know why it doesn't call isAssignmentCompatible() - I'll dig into that.
I'm not doing so well, am I?  That stack missed the most important part:

ClassDeclarationImpl(TypeDeclarationImpl).isSubTypeCompatible(EclipseMirrorType) line: 337	
	ClassDeclarationImpl(TypeDeclarationImpl).isAssignmentCompatible(EclipseMirrorType) line: 331	
	TypesUtil.isAssignable(TypeMirror, TypeMirror) line: 268	
	PrimWrapperConversionBug.process() line: 77	
        [... rest as before]
Heh.  The code comment for the implementation of that method (thanson, 2/9/06) is as follows:

"Implement a hacky version of isAssignable and isSubtype.  Should meet 99% of use cases. Workaround for JDT Multiverse problem."

Guess we found the 1%.

Since the "Multiverse problem" has to do with cases where logically equal types are not ==, I think it should work to return something like "ITypeBinding.isAssignmentCompatible() || [the existing code]".  I'll give that a try.  It's not the most graceful or performant, because it means duplicated work in the (common) case where the types are not assignment compatible, but it should be logically correct.  It would be nice if there were a way to know a priori whether we are dealing with types from two different universes but I don't think that's possible.
Actually I think that would still miss the case where boxing/unboxing is required but the types are from different universes.  I don't think the multiverse problem affects primitive types but I'm not sure about wrapper types.
Created attachment 98122
proposed patch

Primitive types and their wrappers are represented as singletons, for our purposes; see LookupEnvironment.computeBoxingType().  So, it is safe to call isAssignable() if the left binding is primitive.  (If the right binding is primitive, the problem does not exist, as mentioned earlier.)
Fixed for 3.4M7
Does the reciprocal conversion from int to Integer work as well ?
(In reply to comment #12)
> Does the reciprocal conversion from int to Integer work as well ?

Yes.  I still need to add some unit tests, but Adam's test case exercises the conversion in both directions.

The reason is that in the other direction, the receiver is a PrimitiveTypeImpl, which has been doing the right thing all along.
