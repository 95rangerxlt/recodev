The following program does not require bridges, but we request one:

// --
interface K extends I, J {
}
interface I {
    Comparable<Integer> foo();
}
interface J {
    Comparable foo();
}

public class X {
	public static void main(String[] args) {
		K k = () -> null;
		k.foo();
	}
}

Problem in comparing return types as is to see if they differ - we should
compare the erasures - fix will follow shortly.

The following program does not require bridges, but we request one:

// --
interface K extends I, J {
}
interface I {
    Comparable<Integer> foo();
}
interface J {
    Comparable foo();
}

public class X {
	public static void main(String[] args) {
		K k = () -> null;
		k.foo();
	}
}

Problem in comparing return types as is to see if they differ - we should
compare the erasures - fix will follow shortly.
Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=fdda60f4c62b54c5d033a843d12ddcc3278ac971

and here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8_LUNA&id=8661797f1bd928923b1bc22705d473b796245b84

Jay, just a trivial change. All the same, please review, TIA.
Fix Looks good.
