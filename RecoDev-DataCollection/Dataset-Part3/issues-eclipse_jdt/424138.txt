BETA_JAVA8

Bad source ranges for qualified TYPE_USE annotation in extends clause. 

BTW: For this specific example, javac 1.8.0-ea-b115 has even worse bugs...

!ENTRY org.eclipse.jdt.core 4 4 2013-12-16 16:31:25.041
!MESSAGE Bad AST node structure:
- parent [156, 168] org.eclipse.jdt.core.dom.SimpleType
   annotations [156, 194] org.eclipse.jdt.core.dom.MarkerAnnotation
- parent [156, 168] org.eclipse.jdt.core.dom.SimpleType
   previous [156, 194] org.eclipse.jdt.core.dom.MarkerAnnotation
   name [164, 168] org.eclipse.jdt.core.dom.SimpleName

----------------------------------- SOURCE BEGIN -------------------------------------
package jsr308.myex;

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

public class NestedAnnotationTest extends
        @jsr308.myex.NestedAnnotationTest.Anno Object { // bad AST
//        @Anno Object { // OK

    @Target(ElementType.TYPE_USE)
    public @interface Anno {
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalStateException: Bad AST node structure
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1419)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:273)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
...

BETA_JAVA8

Bad source ranges for qualified TYPE_USE annotation in extends clause. 

BTW: For this specific example, javac 1.8.0-ea-b115 has even worse bugs...

!ENTRY org.eclipse.jdt.core 4 4 2013-12-16 16:31:25.041
!MESSAGE Bad AST node structure:
- parent [156, 168] org.eclipse.jdt.core.dom.SimpleType
   annotations [156, 194] org.eclipse.jdt.core.dom.MarkerAnnotation
- parent [156, 168] org.eclipse.jdt.core.dom.SimpleType
   previous [156, 194] org.eclipse.jdt.core.dom.MarkerAnnotation
   name [164, 168] org.eclipse.jdt.core.dom.SimpleName

----------------------------------- SOURCE BEGIN -------------------------------------
package jsr308.myex;

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

public class NestedAnnotationTest extends
        @jsr308.myex.NestedAnnotationTest.Anno Object { // bad AST
//        @Anno Object { // OK

    @Target(ElementType.TYPE_USE)
    public @interface Anno {
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalStateException: Bad AST node structure
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1419)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:273)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
...
The ranges in the MarkerAnnotation actually look fine, but the SimpleType
"@jsr308.myex.NestedAnnotationTest.Anno Object" and its "name" node have wrong ranges.
Same problem in the receiver parameter, on a type argument, and on an extra dimension:

    void foo(@jsr308.myex.NestedAnnotationTest.Anno NestedAnnotationTest this) {
    }
    List<@jsr308.myex.NestedAnnotationTest.Anno Object> l;
    int o @jsr308.myex.NestedAnnotationTest.Anno[];

OK for normal parameters, normal array types, and for simple variable types:

    int @jsr308.myex.NestedAnnotationTest.Anno[] ok;
    @jsr308.myex.NestedAnnotationTest.Anno NestedAnnotationTest f;
    void foo(@jsr308.myex.NestedAnnotationTest.Anno NestedAnnotationTest ok) {
        @jsr308.myex.NestedAnnotationTest.Anno NestedAnnotationTest l;
    }
Created attachment 238619
Proposed Patch

- Doing away with one of the scanner based retrieve functions reusing the extended dimensions field of ArrayTR/AQTR.
- EnhancedForStatementInitHeader representation of similar constructs did not match with the rest of the type reference representation and hence changed the same so that the solution applied uniformly.

Srikanth: Could you please review the Parser changes (approx 5 lines)?
1. Please format the tests properly. I don't see a need for the present style
of indentation.
2. Add a test for enhanced for statement related changes.
3. We can get rid of the method retrieveExtraDimension(TypeReference typeReference) 
Instead add a new method getExtraDimensions to TypeReference that returns 0
and override in ATR and AQTR.


Jay, please review when an amended patch becomes available. TIA.
Created attachment 238707
Proposed Patch

(In reply to Srikanth Sankaran from comment #4)
Thanks for the comments, Srikanth. Jay: Please find the patch incorporated with the review comments.
(In reply to Manoj Palat from comment #5)
> Created attachment 238707 [details]
> Proposed Patch

Here are the comments:
ASTConverter:
1. #convertToVariableDeclarationFragment() - Remove the commented out code
2. #retrieveEndOfElementTypeNamePosition() - the value passes as annotationEnd doesn't include the annotation values, for e.g. in @Type("s") annotationEnd only covers @Type. Nothing is lost, just that a couple of additional tokens have to be processed, which can be avoided. Note, the code is robust enough to handle even cases like @Type((String)"s"). But by passing the correct range, we can avoid some cycles.
3. In the same method, now that annotations' ranges are already known, we can get rid of the switch cases for TokenNameAT and TokenNameIdentifier, which were originally put in to scan through the annotations.

Otherwise, the patch looks good.
Created attachment 238722
Proposed Patch

(In reply to Jayaprakash Arthanareeswaran from comment #6)
> Here are the comments:

Jay: Thanks for the comments. Incorporated in the updated patch.
> 
> Otherwise, the patch looks good.
Patch looks good.
Committed via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3a5401b27a838fcf33757f0b2ef8214fd68d66ea
