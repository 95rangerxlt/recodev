If a project is missing some classes from its build path, processors can hit the following exceptions which end up in the log:

!ENTRY org.eclipse.jdt.apt.core 4 1 2007-05-10 09:23:15.454
!MESSAGE Unexpected failure running APT on the file(s): myJMSCtrl.java
!STACK 0
org.eclipse.jdt.internal.compiler.problem.AbortCompilation
	at org.eclipse.jdt.internal.compiler.problem.ProblemHandler.handle(ProblemHandler.java:96)
	at org.eclipse.jdt.internal.compiler.problem.ProblemHandler.handle(ProblemHandler.java:152)
	at org.eclipse.jdt.internal.compiler.problem.ProblemReporter.handle(ProblemReporter.java:1690)
	at org.eclipse.jdt.internal.compiler.problem.ProblemReporter.isClassPathCorrect(ProblemReporter.java:3406)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.cacheMissingBinaryType(LookupEnvironment.java:179)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:884)
	at org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.buildTargetAnnotation(AnnotationBinding.java:92)
	at org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.addStandardAnnotations(AnnotationBinding.java:55)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.retrieveAnnotations(BinaryTypeBinding.java:918)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.getAnnotations(ReferenceBinding.java:659)
	at org.eclipse.jdt.core.dom.TypeBinding.getAnnotations(TypeBinding.java:83)
	at org.eclipse.jdt.apt.core.internal.declaration.MemberDeclarationImpl.getAnnotationInstances(MemberDeclarationImpl.java:56)
	at org.eclipse.jdt.apt.core.internal.declaration.MemberDeclarationImpl.getAnnotation(MemberDeclarationImpl.java:39)
	at org.apache.beehive.controls.runtime.generator.AptPropertySet.<init>(AptPropertySet.java:57)
	at org.apache.beehive.controls.runtime.generator.AptControlInterface.initPropertySets(AptControlInterface.java:296)
	at org.apache.beehive.controls.runtime.generator.AptControlInterface.<init>(AptControlInterface.java:95)
	at org.apache.beehive.controls.runtime.generator.AptControlInterface.initSuperClass(AptControlInterface.java:185)
	at org.apache.beehive.controls.runtime.generator.AptControlInterface.<init>(AptControlInterface.java:89)
	at org.apache.beehive.controls.runtime.generator.apt.ControlAnnotationProcessor.check(ControlAnnotationProcessor.java:55)
	at org.apache.beehive.controls.runtime.generator.apt.TwoPhaseAnnotationProcessor.check(TwoPhaseAnnotationProcessor.java:103)
	at org.apache.beehive.controls.runtime.generator.apt.TwoPhaseAnnotationProcessor.process(TwoPhaseAnnotationProcessor.java:85)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.dispatchToFileBasedProcessor(APTDispatchRunnable.java:545)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTInFileBasedMode(APTDispatchRunnable.java:265)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.build(APTDispatchRunnable.java:579)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.access$1(APTDispatchRunnable.java:563)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable$2.run(APTDispatchRunnable.java:217)
	at org.eclipse.jdt.apt.core.internal.env.BuildEnv$CallbackRequestor.acceptBinding(BuildEnv.java:633)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:791)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:464)
	at org.eclipse.jdt.core.dom.ASTParser.createASTs(ASTParser.java:707)
	at org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv.createASTs(BaseProcessorEnv.java:820)
	at org.eclipse.jdt.apt.core.internal.env.BuildEnv.createASTs(BuildEnv.java:381)
	at org.eclipse.jdt.apt.core.internal.env.AbstractCompilationEnv.newBuildEnv(AbstractCompilationEnv.java:84)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.build(APTDispatchRunnable.java:223)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.run(APTDispatchRunnable.java:170)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1737)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTDuringBuild(APTDispatchRunnable.java:86)
	at org.eclipse.jdt.apt.core.internal.AptCompilationParticipant.processAnnotations(AptCompilationParticipant.java:157)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.processAnnotations(AbstractImageBuilder.java:561)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:327)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:59)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:241)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:169)
	at com.bea.wstudio.javabuilderx.JavaBuilderX.build(JavaBuilderX.java:66)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:603)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:167)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:201)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:230)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:233)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:252)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:285)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:154)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:217)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)

We should catch the expected AbortCompilationException and quietly return, as the JDT allows it.

If a project is missing some classes from its build path, processors can hit the following exceptions which end up in the log:

!ENTRY org.eclipse.jdt.apt.core 4 1 2007-05-10 09:23:15.454
!MESSAGE Unexpected failure running APT on the file(s): myJMSCtrl.java
!STACK 0
org.eclipse.jdt.internal.compiler.problem.AbortCompilation
	at org.eclipse.jdt.internal.compiler.problem.ProblemHandler.handle(ProblemHandler.java:96)
	at org.eclipse.jdt.internal.compiler.problem.ProblemHandler.handle(ProblemHandler.java:152)
	at org.eclipse.jdt.internal.compiler.problem.ProblemReporter.handle(ProblemReporter.java:1690)
	at org.eclipse.jdt.internal.compiler.problem.ProblemReporter.isClassPathCorrect(ProblemReporter.java:3406)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.cacheMissingBinaryType(LookupEnvironment.java:179)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:884)
	at org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.buildTargetAnnotation(AnnotationBinding.java:92)
	at org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.addStandardAnnotations(AnnotationBinding.java:55)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.retrieveAnnotations(BinaryTypeBinding.java:918)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.getAnnotations(ReferenceBinding.java:659)
	at org.eclipse.jdt.core.dom.TypeBinding.getAnnotations(TypeBinding.java:83)
	at org.eclipse.jdt.apt.core.internal.declaration.MemberDeclarationImpl.getAnnotationInstances(MemberDeclarationImpl.java:56)
	at org.eclipse.jdt.apt.core.internal.declaration.MemberDeclarationImpl.getAnnotation(MemberDeclarationImpl.java:39)
	at org.apache.beehive.controls.runtime.generator.AptPropertySet.<init>(AptPropertySet.java:57)
	at org.apache.beehive.controls.runtime.generator.AptControlInterface.initPropertySets(AptControlInterface.java:296)
	at org.apache.beehive.controls.runtime.generator.AptControlInterface.<init>(AptControlInterface.java:95)
	at org.apache.beehive.controls.runtime.generator.AptControlInterface.initSuperClass(AptControlInterface.java:185)
	at org.apache.beehive.controls.runtime.generator.AptControlInterface.<init>(AptControlInterface.java:89)
	at org.apache.beehive.controls.runtime.generator.apt.ControlAnnotationProcessor.check(ControlAnnotationProcessor.java:55)
	at org.apache.beehive.controls.runtime.generator.apt.TwoPhaseAnnotationProcessor.check(TwoPhaseAnnotationProcessor.java:103)
	at org.apache.beehive.controls.runtime.generator.apt.TwoPhaseAnnotationProcessor.process(TwoPhaseAnnotationProcessor.java:85)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.dispatchToFileBasedProcessor(APTDispatchRunnable.java:545)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTInFileBasedMode(APTDispatchRunnable.java:265)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.build(APTDispatchRunnable.java:579)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.access$1(APTDispatchRunnable.java:563)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable$2.run(APTDispatchRunnable.java:217)
	at org.eclipse.jdt.apt.core.internal.env.BuildEnv$CallbackRequestor.acceptBinding(BuildEnv.java:633)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:791)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:464)
	at org.eclipse.jdt.core.dom.ASTParser.createASTs(ASTParser.java:707)
	at org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv.createASTs(BaseProcessorEnv.java:820)
	at org.eclipse.jdt.apt.core.internal.env.BuildEnv.createASTs(BuildEnv.java:381)
	at org.eclipse.jdt.apt.core.internal.env.AbstractCompilationEnv.newBuildEnv(AbstractCompilationEnv.java:84)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.build(APTDispatchRunnable.java:223)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.run(APTDispatchRunnable.java:170)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1737)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTDuringBuild(APTDispatchRunnable.java:86)
	at org.eclipse.jdt.apt.core.internal.AptCompilationParticipant.processAnnotations(AptCompilationParticipant.java:157)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.processAnnotations(AbstractImageBuilder.java:561)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:327)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:59)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:241)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:169)
	at com.bea.wstudio.javabuilderx.JavaBuilderX.build(JavaBuilderX.java:66)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:603)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:167)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:201)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:230)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:233)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:252)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:285)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:154)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:217)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)

We should catch the expected AbortCompilationException and quietly return, as the JDT allows it.
I believe improvements have been made to the compiler in 3.3 so that this missing binary type problem should be less visible.  However, the problem is very real in 3.2.2, and even in 3.3 it is still possible to receive AbortCompilation errors, which we should silently ignore.

The underlying issue here is that we wish to log exceptions thrown by annotation processors, so that the processor writers can respond.  However, we do not in general want to log exceptions thrown by the compiler from underneath the processors; we want to let JDT handle those just as it would if the exception occurred during normal compilation without the presence of the processor.

For 3.2.2, and 3.3, we need to patch this minimally by reducing the log intensity without other changes.  For 3.3.1 we may want to consider slightly more extensive changes.
Created attachment 67518
Proposed patch for 3.2.2

Proposed patch for v3.2.2.  This patch is very conservative; it backs off the severity of the log entries for processor exceptions caught by build() to be warnings instead of errors, and it prevents logging of AbortCompilation exceptions altogether.

For 3.3, I believe we should be re-throwing the AbortCompilation, so that the upstream JDT code can correctly shut down the build.  I would like a solid repro before I'm willing to explore that, though.
In bug 186427 I proposed a patch that includes the proposed fix for this bug.  In review of that patch, Tim Hanson wrote:

> I don't think it is necessary to stop logging of AbortCompilation exceptions.
> Since this class is not API, the JDT API should not be throwing these.

It's an argument with some merit.  On the one hand, JDT uses this exception during the normal course of compiling code with problems, and it is never exposed to the user.  And one might expect that whatever problem caused the AbortCompilation would also cause the build to terminate with an appropriate problem marker, after annotation processing is done and during the "normal" part of the build.  

But on the other hand, the problem might be something exposed by a processor asking about a type that doesn't exist or can't be found, that would not have showed up in the "normal" part of the build.  How would that problem ever be discovered by the processor writer, if nothing is logged?  And, as Tim points out, why is the problem surfacing through the JDT DOM API, rather than being converted into a null return, a Java Model exception, or the like?

I'm less convinced now that these should be hidden; I think maybe demoting them to "warning" rather than "error" is sufficient.
Fixed, along with bug 186427.  In the patch to 3.2.2 we do not log it at all, but in 3.3 we will log it with "warning" severity.
