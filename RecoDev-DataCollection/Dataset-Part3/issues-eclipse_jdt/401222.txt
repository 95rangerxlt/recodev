For the program below javac 8b76 reports:
C:\jtests>C:\lambda-8-b76-windows-x64-05_feb_2013\jdk1.8.0\bin\javac -cp c:\jtes
ts X.java
X.java:5: error: incompatible types: bad type in conditional expression; int can
not be converted to List<String>
                List<String> l = x== 2 ? (List<String>)(null) : 1;
                                                                ^
1 error

while eclipse BETA_JAVA8 head and javac7 report that Object cannot be
converted to List<String>

This difference needs to be investigated.

For the program below javac 8b76 reports:
C:\jtests>C:\lambda-8-b76-windows-x64-05_feb_2013\jdk1.8.0\bin\javac -cp c:\jtes
ts X.java
X.java:5: error: incompatible types: bad type in conditional expression; int can
not be converted to List<String>
                List<String> l = x== 2 ? (List<String>)(null) : 1;
                                                                ^
1 error

while eclipse BETA_JAVA8 head and javac7 report that Object cannot be
converted to List<String>

This difference needs to be investigated.
Anirban, please see if 0.6.1 warrants any such change. TIA.
Sorry, program to be used is:

// ---
import java.util.Arrays;
import java.util.List;
class X {
	int foo(int x) {
		List<String> l = x == 2 ? (List<String>)(null) : 1;
		return 1;
	}
}
Anirban, I'll take over this one - I completely missed some nuance
here about a necessary implied conversion that makes it a bit tricky.

Stephan, I am planning to remove the API Expression#isPolyExpression
altogether and redesign some parts to implement a pull model rather than
a push model.  

i.e When a message send *is* a poly expression and needs the target type
(i.e its gets treated as an InvocationSite and receives the message
expectedType()) and doesn't have it - it can query its context, get
the result and pass it on - the fact that it queried for the expected
type informs its parent node that the child is a poly expression and
react accordingly.

I cannot see how this will impact anything, but heads up just in case.
(In reply to comment #3)
> Stephan, I am planning to remove the API Expression#isPolyExpression
> altogether and redesign some parts to implement a pull model rather than
> a push model.  

From my understanding we might need both directions:
- some expressions are poly only in assignment and method invocation contexts
- some expressions are poly depending on their own resolved types

Have you seen my draft of parser additions in bug 401170? Those would take
care of the syntactic part of the issue.

> i.e When a message send *is* a poly expression and needs the target type
> (i.e its gets treated as an InvocationSite and receives the message
> expectedType()) and doesn't have it - it can query its context, get
> the result and pass it on - the fact that it queried for the expected
> type informs its parent node that the child is a poly expression and
> react accordingly.

Mh, so a generic method invocation would ask its context, because it
believes it is a poly expression. Then it finds no context (if it is
a StatementExpression) and then withdraws its request of a target type,
concluding that it wasn't poly after all?
Maybe.
(In reply to comment #4)
> (In reply to comment #3)
> > Stephan, I am planning to remove the API Expression#isPolyExpression
> > altogether and redesign some parts to implement a pull model rather than
> > a push model.  
> 
> From my understanding we might need both directions:
> - some expressions are poly only in assignment and method invocation contexts
> - some expressions are poly depending on their own resolved types

Yes, in some places the target type may have to be bubbled up from the
bottom.

> Have you seen my draft of parser additions in bug 401170? Those would take
> care of the syntactic part of the issue.

I did, but I was puzzled by some of the changes. We can answer whether
an allocation expression is a poly expression already readily by:
this.type != null && (this.type.bits & ASTNode.IsDiamond) != 0  in
AE and likewise answering whether there are type arguments in message
send can already be done by 
if (this.typeArguments != null && this.typeArguments.length > 0) ?

I hope to have some clarity soon enough.
Fix and test released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=988b834a35e1571af05adddd8db1ce5aaa1f0ff0

The different diagnostics basically exposed some gaps in my understanding
of what constitutes a poly conditional expression. Now we follow the spec
closely.

isPolyExpression() methods are accurate for each potential expression - but
this API is likely to be useless - it is at least useless as of now, because
they come with the crippling condition that (in one case - message send)
it can't be used before resolve (may throw unsupported operation exception)

The big gap about invocation contexts and not having target types to propagate
top down is still there - I'll tackle this head on now in bug 400871
(In reply to comment #5)
> I did, but I was puzzled by some of the changes.

This is just a different implementation strategy to achieve the same effect.
My patch implements poly recognition by a series of updates of the flag, e.g.:
- parser creates a MessageSend -> isPolyExpression = true
- parser addes type arguments -> isPolyExpression = false, or
- parser consumes message send as a statement -> isPolyExpression = false, or
- resolve finds non-generic target method -> isPolyExpression = false

its the same information, just processed differently.

If you prefer the query style of implementation over incremental updates of
a flag, ASTNode.InsideExpressionStatement might also be our friend.
(In reply to comment #7)

> If you prefer the query style of implementation over incremental updates of
> a flag, ASTNode.InsideExpressionStatement might also be our friend.

Thanks for the pointer. Earlier I was puzzled by the mention of refactoring
resolve methods to include valueRequired - Now I understand your train of
thought.

In the present solution, this need is addressed by the context that an
expression is made aware of as featuring in - This allows us to discriminate
why the value is required in addition to whether it is required, a distinction
we are going to require.

Interestingly neither solution is "more specific" than the other in terms of
generality. In the present solution some nodes whose value is required won't
know of that fact - but none of could be poly expressions - so from a Java 8
perspective, we are covered.
I reverted this attempt at error message parity with javac. It is causing
20 odd tests to fail - analysis shows that error message identity cannot be
reached without copy + pasting a lot of code. Since the disparity shows up
only in error situations, (we report error against the lub, while javac
reports against each constituent) it is not worth attempting to achieve
this.
