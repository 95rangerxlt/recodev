BETA_JAVA8:

As a foundation for the new type inference (JSR 335) I will capture the concepts from JLS8 Section 18.1:
- 18.1.1 Inference Variables
- 18.1.2 Constraint Formulas
- 18.1.3 Bound Sets

It remains to be seen if a direct mapping of these concepts onto code yields a practical implementation:
Pro: structural similarity will facilitate implementation and maintenance of advanced algorithms
Con: the new structures might conflict with our existing implementation or with performance goals.
Let's see.

BETA_JAVA8:

As a foundation for the new type inference (JSR 335) I will capture the concepts from JLS8 Section 18.1:
- 18.1.1 Inference Variables
- 18.1.2 Constraint Formulas
- 18.1.3 Bound Sets

It remains to be seen if a direct mapping of these concepts onto code yields a practical implementation:
Pro: structural similarity will facilitate implementation and maintenance of advanced algorithms
Con: the new structures might conflict with our existing implementation or with performance goals.
Let's see.
Created attachment 227161
work in progress

This patch actually covers more than just 18.1.x because I wanted to see how these structures are used in the algorithm, but ...
... to be continued in the parent bug 400874.
Work in the feature branch sherrmann/NewTypeInference is taking shape.

As of commit 28675a0a07cea3c18b9a7a0c7e8940cfef9f759a I consider the basic structure ready for initial review of the direction taken.

Testing this work by way of GenericTypeTest (at compliance 1.8) yields:
- 0 Errors / 66 Failures / 1493 Total
When forcing Error upon hitting the spec incompleteness in 18.2.3 regarding arrays, we get:
- 56 Errors / 44 Failures / 1493 Total

More specifically, these new classes should be considered part of the current RFE:
* 18.1.1 Inference Variables
   - InferenceVariable
* 18.1.2 Constraint Formulas
   - ConstraintFormula and subclasses
* 18.1.3 Bound Sets
   - TypeBound
   - BoundSet

The whole thing is then orchestrated from InferenceContext18

The internal data structure of BoundSet contains initial speculative optimization, but the final data structures to be used can only be determined once we are able to perform more realistic field experiments.

Incompleteness in the implementation is signaled by calling InferenceContext18.missingImplementation(). One of these is triggered by the spec incompleteness mentioned above.
Interestingly, only the spec incompleteness is triggered in GenericTypeTest, none of the other is.
A quick heads-up: I need to re-work the way unreducealbe constraints are handled.
In 0.6.1 formulas were said to be "delayed" in this case.
I missed to see that in 0.6.2 this has been re-phrased into a new kind of type bound.
This effects the interaction between the top-level methods solve(), reduce() and incorporate().
(In reply to comment #3)
> A quick heads-up: I need to re-work the way unreducealbe constraints are
> handled.

Done, and pushed to the branch via commit 7b47ae64d86c466cb1345515f172a00c8eadbd6e.

The commit also fills a few gaps (re type equality constraints and re primitive types).

At this point GenericTypeTest was down to 23 failures, but then I noticed that in many cases the new inference would answer false, and then the implementation would continue with the old inference.

Now I switched off the fall-back to the old inference, which yielded 176 failures in said test. Mh, that means in many cases inference answers FALSE where it should not.

Next I turned two cases of spec incompleteness into a test error (cf. comment 2) (both in 18.2.3, re arrays and parameterized types). Result:
111 Errors / 71 Failures.
Commit a242bce051a2f77162b42a84d2d1b61ae31a29e6 improves the capability to roll back an unsuccessful resolve step. See 18.4:
"Otherwise, if the resulting bound set does include false, then a second attempt is made ..."
The second attempt, however, is not yet implemented.
I've pushed a few improvements via commit dff83fd0cf22d0e5c2651a3b5a63b1d2dcd3532f :
- draft of "2nd attempt" in resolve, make InferenceVariable a
  TypeVariableBinding to support substitution.
- include advance integration of unchecked conversion into 18.2.3
- improve construction of synthetic type variables:
  -> split bounds from glbs into superclass / superInterfaces
- 2 NPE-fixes

Current score in GenericTypeTest: 
58 Errors / 70 Failures.
All of the errors being due to incomplete spec regarding array types.
Based on spec 0.6.3 I have an implementation where the "foundation" is basically complete.

New elements:
- new class ConstraintExceptionFormula representing ⟨Expression ⊆throws T⟩
  not much implementation since not yet triggered during tests
- new class CaptureBinding18 to represent "fresh type variables" a la 18.4
  This features a lower bound and arbitrary upper bounds, needs more
  investigation for downstream issues from compatibility to signature.
- new class InferenceFailureException, for reporting compile errors from
  deep inside the inference. Still needs real wiring into ProblemReporter.
- interim IProblem.GenericInferenceError to be refined (see previous item)
- added handling of capture bounds (new in 0.6.3)

Other changes:
- create inference context per use, re-using a context from inferring an
  inner message send during inference for an enclosing expression doesn't
  seem to work. Same for AllocationExpression.
- removed unfinished work on field Expression.isPolyExpression, use the
  corresponding method instead (see bug 401170).
- simplify creation of TypeBounds from type variables (same semantics)
- clarified that initial type bounds (18.1.3) are created only for 
  type variables (param decl), not actual type parameters
- extract 18.5.1 / 18.5.2 to methods to be used both
  - at toplevel from ParameterizedGenericMethodBinding
  - during reduction of a ConstraintExpressionFormula (nested expression)
- added initial varargs treatment, not fully sanctioned by spec
- removed handling of delayed constraints (removed in 0.6.3), all
  constraints should be reduceable by construction (and be it to FALSE)
- start using TypeBinding.equalsEquals rather than == (similar for !=)
- real treatment for parameterized and array types in 18.2.3 (spec updated)

After merging with latest from BETA_JAVA8 I've pushed my current implementation to the feature branch (sherrmann/NewTypeInference).

At this point I consider the foundational work done, more to come via parent bug 400874 and its children.
