I recently seen a lot of tips how to create "correct" JUnit test templates [links].

As I want to rework the SWT templates, shall I also create improved JUnit test templates?

I would also suggest to delete the JUnit 3 templates or at least put it into second position.

[links]
http://eclipsesource.com/blogs/2012/03/20/simple-junit4-templates-for-eclipse/
http://www.codeaffine.com/2012/11/26/working-efficiently-with-junit-in-eclipse-2/

I recently seen a lot of tips how to create "correct" JUnit test templates [links].

As I want to rework the SWT templates, shall I also create improved JUnit test templates?

I would also suggest to delete the JUnit 3 templates or at least put it into second position.

[links]
http://eclipsesource.com/blogs/2012/03/20/simple-junit4-templates-for-eclipse/
http://www.codeaffine.com/2012/11/26/working-efficiently-with-junit-in-eclipse-2/
(In reply to comment #0)
> As I want to rework the SWT templates, shall I also create improved JUnit
> test templates?

Sure, why not.
 
> I would also suggest to delete the JUnit 3 templates or at least put it into
> second position.

I'm OK to switch the position. Markus, any objection?
> > I would also suggest to delete the JUnit 3 templates or at least put it into
> > second position.

-1 for deleting, since there are lots of existing JUnit 3 test cases that are still actively maintained.

Switching the position if JUnit 4 is available would be fine with me, but I'm not sure if that's technically possible. Note that the JUnit 4 template is already on top if you write "Test" with a capital "T".

But maybe we should rename the templates to "test method (JUnit 3)" and
"@Test method"?
Created attachment 227969
Patch for the test templates

Attached the patch for the test templates. I remove throw exception as this is not the typical test case and changed the names so that test is now before test (JUnit 3).

I also added templates for @Before and @After including constants for describing them. 

Let me know if I need to change something.
Created attachment 227970
Patch with credentials

Same patch but I also added me to the credentials.
(In reply to comment #3)
> Created attachment 227969 [details] [diff]
> Patch for the test templates
> 
> Attached the patch for the test templates. I remove throw exception as this
> is not the typical test case and changed the names so that test is now
> before test (JUnit 3).
> 
> I also added templates for @Before and @After including constants for
> describing them. 
> 
> Let me know if I need to change something.

I would prefer that the JUnit 4 templates are grouped together. If you use "@test method" as name, like Markus suggested, and "@after method" and "@before method" , then that could be achieved. I would also not mention JUnit 4 in the description, since this is obvious when we use the annotation in the name.

Markus, what's your final word on this?
Internal note: all tests pass with the proposed patch.
if I use @ in the beginning @Ctrl+Space does in my setup not trigger a template completion, that is why I have implemented it differently. @Ctrl+Space ends up in my case as "@interface". 

I can remove the JUnit4 from the test, but I assume it is easier if you do it directly. If that assumption is incorrect, please let me know. I also personally would prefer to rename the JUnit3 template to something like "JUnit3 test" to have "test" for JUnit 4 only but I assume that is a controversial change, it avoid that.
(In reply to comment #7)
> if I use @ in the beginning @Ctrl+Space does in my setup not trigger a
> template completion, that is why I have implemented it differently.
> @Ctrl+Space ends up in my case as "@interface". 

Interesting. This looks like a bug in the template content assist processor when inside Java code. Inside Javadoc, @author works fine.


> I also
> personally would prefer to rename the JUnit3 template to something like
> "JUnit3 test" to have "test" for JUnit 4 only but I assume that is a
> controversial change, it avoid that.

-1 for that.


Let's wait what Markus prefers. I'd rather fix the template processor or defer this fix than using something that's close but not what we really like in the end and change again later.
> Interesting. This looks like a bug in the template content assist processor
> when inside Java code. Inside Javadoc, @author works fine.

Would be great to have that fixed.
 
> > I also
> > personally would prefer to rename the JUnit3 template to something like
> > "JUnit3 test" to have "test" for JUnit 4 only but I assume that is a
> > controversial change, it avoid that.
> 
> -1 for that.

Thought so. :-) 

> Let's wait what Markus prefers. I'd rather fix the template processor or
> defer this fix than using something that's close but not what we really like
> in the end and change again later.

IMHO would be great to have an improvement in 4.3 for the test templates. It feels to me that fixing the template processors is currently unrealistic for 4.3, at least definitely from me side.
Opened Bug 406770 for the support of @ in the template content assist processor.
(In reply to comment #5)
> I would prefer that the JUnit 4 templates are grouped together.

Actually, this is the case with your patch. We both should have tested the patch before making our comments: the JUnit 3 test template appears first and the JUnit 4 templates afterwards (grouped together). The reason for this, is that the template proposals are sorted by the complete display string. I filed bug 406784 for that.


Markus and I discussed what's best here. We decided to change the names as follows:

Test ==> test
test ==> test3

We will not add @After and @Before templates, since the New JUnit Test Case wizard can generate them when desired.


Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=932cf1260a5fe3600fe1dc38685d32c7d862c1d6
.
Thanks for the change (I refreshed my browser, my assumption is that I now don't reset any of the flag sets).
Created attachment 230254
N&N patch

Suggestion to add this to the M7 N&N.
> (I refreshed my browser, my assumption is that I now
> don't reset any of the flag sets).

It's difficult. Some browsers try to be helpful but cause confusion: On refresh, they reload the page from the server, but then they change all form fields to the value before the refresh. In that scenario, Bugzilla cannot know that the browser tricked you and hence it doesn't show an in-flight conflict.

Therefore, it's best to avoid refreshing a form page. Ctrl+L, Enter is a better solution, since it ensures that you get an untampered page from the server. Unfortunately, that doesn't work if there's a fragment in the URL (e.g. #c0), since page is not reloaded in that case.

The best solution is to open the bug again via Click or Ctrl+click on the bug number. This is readily available if you use our Greasemonkey script that fixes Bugzilla UI bloopers: http://www.eclipse.org/jdt/ui/dev.php#scripts
(In reply to comment #14)
> Created attachment 230254 [details] [diff]
> N&N patch
> 
> Suggestion to add this to the M7 N&N.

I've added an entry together with a screenshot.
