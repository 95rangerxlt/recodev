Build ID: 3.2.0

Previous I could refactor a name to an existing name and I would receive an warning that there was a nameclash. That clash could I then deal with after the refactoring. In 3.2.0 I am not even allowed to do the refactoring.

A simplyfied example. I have a static class like

public class CONST {
public static final int TIMEOUT_1 = 1000;
public static final int TIMEOUT_2 = 2000;
}
 
At some point I realize that I do not need the TIMEOUT_2. I would then 
refactor TIMEOUT_2 to TIMEOUT_1, and remove one of the declarations in the class. 

This feature is something that I use really often.

Build ID: 3.2.0

Previous I could refactor a name to an existing name and I would receive an warning that there was a nameclash. That clash could I then deal with after the refactoring. In 3.2.0 I am not even allowed to do the refactoring.

A simplyfied example. I have a static class like

public class CONST {
public static final int TIMEOUT_1 = 1000;
public static final int TIMEOUT_2 = 2000;
}
 
At some point I realize that I do not need the TIMEOUT_2. I would then 
refactor TIMEOUT_2 to TIMEOUT_1, and remove one of the declarations in the class. 

This feature is something that I use really often.
Markus, can you comment?
Has been like this forever (at least back to 2.1). You probably used the "Rename in File" quick assist (Ctrl+1, Enter) when it worked for you.

There's actually a better way to achieve the same:

1) change the declaration to:
    public static final int TIMEOUT_2 = TIMEOUT_1;

2) select TIMEOUT_2 and run 'Refactor > Inline'

However, changing the error to be non-fatal does no harm either. Fixed in HEAD.
> Has been like this forever (at least back to 2.1).

Definitly not. I have a 3.1 where it works. Note that
I usually do this with methods.

> You probably used the "Rename in File" quick assist (Ctrl+1, Enter) when it 
> worked for you.

No, I always use alt-shift-r.

I will try the suggested method on methods

> Note that I usually do this with methods.

On methods, it's a different story. There, we allow it because we know there are many ways you can use (and abuse;-) the refactoring if overloaded methods come into play.
> On methods, it's a different story.

Ahh, ok. Then the #1 text wrong. I should have stated
that I was refactoring methods and it changed behaviour from 3.2 and up.
And that in general it did not seem to work anymore, which
resulted in the simple example with variables. I should have made
an example with methods.

Should I make a new bugreport?
> Should I make a new bugreport?

Yes, please. However, I quickly tried it with methods, and my scenarios with and without parameters always worked fine (with scary warnings, but that's intended;-).
