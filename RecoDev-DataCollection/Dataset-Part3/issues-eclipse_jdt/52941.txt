I20040219

0. JDT UI and JFace Text in source
1. open JavaSourceViewerConfiguration
2. select getPresentationReconciler
3. search references in workspace
==> 0 matches but it has one in SourceViewer.configure(...)

I20040219

0. JDT UI and JFace Text in source
1. open JavaSourceViewerConfiguration
2. select getPresentationReconciler
3. search references in workspace
==> 0 matches but it has one in SourceViewer.configure(...)
The point here being that you are searching for references to method in a
superclass, but not finding references to the overridden method in the subclass
like so:

class A {
  public void foo() {
  }
}

class B extends A {
  public void foo() {
  }
}

Do references to A.foo(), but you don't find references to B.foo(). Correct?
yes
The simple example works for me. I suspect PDE classpath container badness when
we compute the possible search scope. Will investigate.
What does refactoring do here? Does it mean this fails as well?

The PDE container has nothing to do with it, as far as I've seen. We're only
adding projects that reference the method in question, not those that may
reference the super implementation. 

Refactoring does the same thing, as far as I'm concerned, but I suppose it
doesn't show since they're explicitly checking the override cases.
Markus will find out whether Refactoring is affected.
I released a workaround that deactivates the "optimization" for non-private methods.
*** Bug 53023 has been marked as a duplicate of this bug. ***
is this a regression compared with M6?

JDT Core is already doing the reduced scope optimization (support for 
supressing search in system libraries will come during M8). We should confirm 
with JDT Core when the optimization in JDT UI can be removed.
We have been doing the scope reduction since ever. Optionally eliminating 
system libs should occur soon (within a week or so).
For refactorings, there's no regression. We will drop our scope reduction when
bug 52273 is implemented. 
*** Bug 53460 has been marked as a duplicate of this bug. ***
I20030302 has the API you were looking for.
With Eclipse 3.0M8 (build id 200403261517) on Solaris 9 and HP-UX11.11 
plantform, I found a similar problem with context menu 'References > 
Workspace'. It may not display correct search result. The following is my 
procedure to reproduce the problem:

1. Download the 3.0M8 SWT Examples zip file from the eclipse.org site and load 
it on to Eclipse workbench.
2. Create a Java project and call it "JUnit".
3. In the Packages Explorer view, select JUnit project and from its context 
menu "Import->Zip file".
4. Browse to junit37src.jar file in 
<eclipse>/plugins/org.eclipse.jdt.ui.examples.projects/archive/junit/ directory.
Select file name and click "Ok".
5. Click the "Select All" button to make sure that all the files are selected 
in the folder. Ensure that the destination folder is "JUnit". Click "Finish" 
and click "Yes" on the question box concerning .classpath file.
6. In the Java Perspective select the Search button from the toolbar and select 
Java search tab.
7. In the Search string field, type 'runTest'. In the Search, select Method and 
References. Verify that the Scope is set to Workspace. Click "Search". 
8. runTest is display on the Mew Search view.
9. In the Package Explorer view, expand the junit.framework package, and double 
click on "Assert.java file.java".
10. In the Outline view, select the fail(String) method and from its context 
menu select 'References > Workspace'. The display is incorrect. It is the same 
as when search for 'runTest'.
11. Expand the Assert.java file and select the Assert Class. From the Package 
Explorer's context menu, select 'References > Workspace'. The display is wrong 
again.
12. select the 'Assert' class beneath the Assert.java file, and from the 
context menu, select 'Open Type Hierarchy'.
13. In the Hierarchy view, select the 'Assert' class, and from the context 
menu, select 'References > Workspace'. The search display is incorrect.


Brian, this works fine for me in the latest build. Was there anything in the
.log file?
Sorry I did not check the .log file. I was using the M8 official build. How 
about you mark this one as fixed and I will retest it with the M9 official 
build?
In order to finally close this PR: I added a checkbox to the java search page
that  allows to not search the JRE libraries when doing reference searches.
