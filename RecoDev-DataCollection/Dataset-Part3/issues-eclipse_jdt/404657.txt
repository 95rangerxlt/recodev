BETA_JAVA8 follow-up of bug 382721:

The following program is currently accepted (except for the expected
"Missing code implementation in the compiler" during code-gen):

public class EffectivelyFinalInLoop {
	void executeLater(Runnable r) { /*...*/ }
	void test() {
		int n;
		for (int i=0; i<3; i++) {
			n=i;
			executeLater(()-> System.out.println(n));
		}
	}
}

The analysis incorrectly believes that n is assigned only once.

I noticed this by analogy to definite-assignment analysis:
The error duplicateInitializationOfFinalLocal() is triggered from 3 locations:
- SingleNameReference.analyseAssignment()
- FinallyFlowContext.complainOnDeferredChecks()
- LoopingFlowContext.complainOnDeferredFinalChecks()

Of these locations only the first resets IsEffectivelyFinal, whereas
all of them should consider to do so.

BETA_JAVA8 follow-up of bug 382721:

The following program is currently accepted (except for the expected
"Missing code implementation in the compiler" during code-gen):

public class EffectivelyFinalInLoop {
	void executeLater(Runnable r) { /*...*/ }
	void test() {
		int n;
		for (int i=0; i<3; i++) {
			n=i;
			executeLater(()-> System.out.println(n));
		}
	}
}

The analysis incorrectly believes that n is assigned only once.

I noticed this by analogy to definite-assignment analysis:
The error duplicateInitializationOfFinalLocal() is triggered from 3 locations:
- SingleNameReference.analyseAssignment()
- FinallyFlowContext.complainOnDeferredChecks()
- LoopingFlowContext.complainOnDeferredFinalChecks()

Of these locations only the first resets IsEffectivelyFinal, whereas
all of them should consider to do so.
Jesper, please follow up. TIA.
(In reply to comment #1)
> Jesper, please follow up. TIA.

Let me know if you want me to help / step in.
Those deferred checks are an arduous business...
Created attachment 230491
Attempted patch

This extends the final analysis in loops and finally blocks by adding effectively final variables to flowContext.recordSettingFinal, and then differentiating inside FinallyFlowContext and LoopingFlowContext.

There is still a problem with only one such error being reported per class. I guess this is because the error triggers an AbortException being throw. Is this really necessary?
I'll take a look, though it might be some days before I get to it...
Sorry, I meant to look into this much earlier.

While playing with the patch I'm surprised to see how the reported error escalates:
- NameReference.checkEffectiveFinality() throws AbortMethod
- LambdaExpression.generateCode() converts this into throwing AbortType
Ergo: first error of this kind stops code generation for the entire type!! 
Further errors to be detected during codegen go unnoticed.
This doesn't look right to me.

The AbortMethod has been introduced via bug 382721, was that just a stop-gap measure or is there s.t. deeper for me to understand?

The conversion AbortMethod -> AbortType is from bug 405067.
@Srikanth: do you have a comment on that?
Also, here's a test that's not analysed correctly:

	void test2() {
		int m;
		try {
		} finally {			
			m=2;
			executeLater(()-> System.out.println(m));
			for (int i=0; i<3; i++) {
				m = 3;
			}
		}
	}

With the patch I get: "Variable m is required to be final or effectively final" against the lambda body, but at that location we should be fine, actually.
This seems to be caused by the way how FlowContext.recordSettingFinal() traverses parents, which seems to be unsuitable for effectively final analysis.
(In reply to comment #5)

> The AbortMethod has been introduced via bug 382721, was that just a stop-gap
> measure or is there s.t. deeper for me to understand?

Not sure.

> The conversion AbortMethod -> AbortType is from bug 405067.
> @Srikanth: do you have a comment on that?

Not sure again. See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=406176
(In reply to comment #7)

> Not sure.

> Not sure again. See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=406176

I would treat any issue non-integral to the present subject in a follow up
bug.
(In reply to comment #6)
> Also, here's a test that's not analysed correctly:
> 
> 	void test2() {
> 		int m;
> 		try {
> 		} finally {			
> 			m=2;
> 			executeLater(()-> System.out.println(m));
> 			for (int i=0; i<3; i++) {
> 				m = 3;
> 			}
> 		}
> 	}
> 
> With the patch I get: "Variable m is required to be final or effectively
> final" against the lambda body, but at that location we should be fine,
> actually.
> This seems to be caused by the way how FlowContext.recordSettingFinal()
> traverses parents, which seems to be unsuitable for effectively final
> analysis.

Oops, I think I was blaming the wrong way.
However, removing the enclosing try-finally toggles the error,
which is not correct.
Jesper, OK to assign to Anirban to take this to closure so you can focus
exclusively on JEP 118 + 120 ?
I'll assume the absence of objection implies consent. Anirban, please take this forward.
(In reply to comment #6)
> Also, here's a test that's not analysed correctly:
> 
> 	void test2() {
> 		int m;
> 		try {
> 		} finally {			
> 			m=2;
> 			executeLater(()-> System.out.println(m));
> 			for (int i=0; i<3; i++) {
> 				m = 3;
> 			}
> 		}
> 	}
> 
> With the patch I get: "Variable m is required to be final or effectively
> final" against the lambda body, but at that location we should be fine,
> actually.
> This seems to be caused by the way how FlowContext.recordSettingFinal()
> traverses parents, which seems to be unsuitable for effectively final
> analysis.

Stephan, what exactly did you have in mind ? I think this fuller snippet
below is erroneous. See that 8b100 also complains:

// --
interface I {
	void f();
}
public class X {
void test2() {
		int m;
		try {
		} finally {			
			m=2;
			executeLater(()-> System.out.println(m));
			for (int i=0; i<3; i++) {
				m = 3;
			}
		}
	}
	void executeLater(I i) {}
}
// --

X.java:10: error: local variables referenced from a lambda expression must be fi
nal or effectively final
                        executeLater(()-> System.out.println(m));
                                                             ^
1 error
(In reply to comment #12)

> Stephan, what exactly did you have in mind ? I think this fuller snippet
> below is erroneous. See that 8b100 also complains:

Sorry, reading comments piecemeal: I see that comment#9 already clarifies
the position wrt comment#6. However,

(In reply to comment #9)

> Oops, I think I was blaming the wrong way.
> However, removing the enclosing try-finally toggles the error,
> which is not correct.

On HEAD of BETA_JAVA8, removing the try-finally still produces the error,
so I don't think there is an open issue here ?
(In reply to comment #13)
> On HEAD of BETA_JAVA8, removing the try-finally still produces the error,
> so I don't think there is an open issue here ?

On HEAD of BETA_JAVA8 the following test produces one error instead of two on my machine:

public void testBug404657() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"	void executeLater(Runnable r) { /*...*/ }" +
			"  void test1() {\n" + 
			"		int m;\n" + 
			"		try {\n" + 
			"		} finally {\n" + 
			"			m=2;\n" + 
			"			executeLater(()-> System.out.println(\"one\"+m));\n" + 
			"			for (int i=0; i<3; i++) {\n" + 
			"				m = 3;\n" + 
			"			}\n" + 
			"		}\n" + 
			"	}\n" +
			"  void test2() {\n" + 
			"		int m;\n" + 
			"			m=2;\n" + 
			"			executeLater(()-> System.out.println(\"two\"+m));\n" + 
			"			for (int i=0; i<3; i++) {\n" + 
			"				m = 3;\n" + 
			"			}\n" + 
			"	}\n" +
			"}\n",
		},
		"----------\n" + 
		"1. ERROR in X.java (at line 7)\n" + 
		"	executeLater(()-> System.out.println(\"one\"+m));\n" + 
		"	                                           ^\n" + 
		"Variable m is required to be final or effectively final\n" + 
		"----------\n" + 
		"2. ERROR in X.java (at line 16)\n" + 
		"	executeLater(()-> System.out.println(\"two\"+m));\n" + 
		"	                                           ^\n" + 
		"Variable m is required to be final or effectively final\n" + 
		"----------\n");
}
(In reply to comment #14)
> (In reply to comment #13)
> > On HEAD of BETA_JAVA8, removing the try-finally still produces the error,
> > so I don't think there is an open issue here ?
> 
> On HEAD of BETA_JAVA8 the following test produces one error instead of two
> on my machine:

Reproduced. Thanks, I suspect we abort code generation on first at a granularity
that inhibits the second error.

Anirban, if this hypothesis is correct, let us move this issue to a separate
follow up bug (please raise, TIA).
(In reply to comment #15)
> (In reply to comment #14)
> > (In reply to comment #13)
> > > On HEAD of BETA_JAVA8, removing the try-finally still produces the error,
> > > so I don't think there is an open issue here ?
> > 
> > On HEAD of BETA_JAVA8 the following test produces one error instead of two
> > on my machine:
> 
> Reproduced. Thanks, I suspect we abort code generation on first at a
> granularity
> that inhibits the second error.

Sorry, guilty again of reading comments in piece meal. https://bugs.eclipse.org/bugs/show_bug.cgi?id=404657#c5 already provides
an analysis is what is happening.

Anirban, could you (a) bring the patch up to date (it does not apply cleanly)
and (b) org.eclipse.jdt.internal.compiler.ast.LambdaExpression.generateCode(ClassScope, ClassFile) make rethrow the AbortMethod instead of manufactutring an AbortType 
(c) run the tests and if all is well post a patch for review ? TIA,
(In reply to comment #15)
> (In reply to comment #14)
> > (In reply to comment #13)
> > > On HEAD of BETA_JAVA8, removing the try-finally still produces the error,
> > > so I don't think there is an open issue here ?
> > 
> > On HEAD of BETA_JAVA8 the following test produces one error instead of two
> > on my machine:
> 
> Reproduced. Thanks, I suspect we abort code generation on first at a
> granularity
> that inhibits the second error.
> 
> Anirban, if this hypothesis is correct, let us move this issue to a separate
> follow up bug (please raise, TIA).

This is the same issue as https://bugs.eclipse.org/bugs/show_bug.cgi?id=406176,
so there is no need to generate a new bug for this. Let us close the present
bug by bringing Jesper's patch up to date and testing it.

Stephan, Anirban will repost Jesper's patch after merging it with the
latest changes. Is your review complete ? If so, could you mark the review
flag please ? Otherwise do you want to review afresh once Anirban reposts
a patch ?
Mh, when I created the example in comment 6 I was searching for a witness to a problem I saw in FlowContext.recordSettingFinal(). Apparently, the witness which I found was a red herring, caused only by the AbortType mentioned before.
Since my witness doesn't show what it was intended to, I need to investigate more, whether the problem I saw in the code is real.

Ergo: my review is still incomplete. Actually, I'd prefer to have the changes requested in comment 16 before continuing the review, OK?
Created attachment 234935
Jesper's patch, cleaned

Hello,
This is cleaned and applicable version of the patch originally posted by Jesper.
This patch has some regression failures, though, in AssignmentTest (41, 42).

A subsequent patch from me will get those cleaned.

Thanks
Anirban
(In reply to comment #18)

> Ergo: my review is still incomplete. Actually, I'd prefer to have the
> changes requested in comment 16 before continuing the review, OK?

Discussing with Anirban the regressions seen by him, required me to look through
the patch - I can complete the review since it is still fresh in my memory.
I'll make a mental note of this and offload some other review in future to you :)
Created attachment 234977
Completion of this bug

Hello,
Please apply this over cleaned Jesper's patch.
Thanks
Anirban
This contribution complies with http://www.eclipse.org/legal/CoO.php
(In reply to comment #19)
> Created attachment 234935 [details]
> Jesper's patch, cleaned
> 
> Hello,
> This is cleaned and applicable version of the patch originally posted by
> Jesper.
> This patch has some regression failures, though, in AssignmentTest (41, 42).

Patch looks good bit for the issue Anirban discovered. Released here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=7736b79d5cddbdce7ca86cc5b0c7f1093a423d7e.
Released Anirban's fix here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=44977e3b03be3654979e5c18499b69a14e8712d9.

Thanks Jesper, Thanks Anirban
