The syntax coloring preferences dialog for the Java editor has one category for "brackets and operators". I prefer having brackets with bright colors that stand out (especially braces since they help delinate code blocks), but since operators are so much more common in code, having them also be bright is distracting. Apps like JCreator and even TextPad have separate classifications for brackets and operators - Eclipse should too!

The syntax coloring preferences dialog for the Java editor has one category for "brackets and operators". I prefer having brackets with bright colors that stand out (especially braces since they help delinate code blocks), but since operators are so much more common in code, having them also be bright is distracting. Apps like JCreator and even TextPad have separate classifications for brackets and operators - Eclipse should too!
I have a working patch that I will post later today.
Created attachment 46487
A patch based on 3.2.0 Release
Created attachment 46488
A patch based on HEAD as of 2006--07-18
The attached patch splits the colloring of brackets and operators in two separate syntax coloring driven by their own prefs.
The criteria used is that a bracket is either {} , () or [].
The others are operators.
There are two patches one based on the 3.2.0 general release, the other based on HEAD.



And IMHO, having tested it, I love it...
It really make code reading easier and faster!
Try it, you'll adopt it!
Tom, please review. Especially in light of Java 5 coding.
*** Bug 28355 has been marked as a duplicate of this bug. ***
Trying out the patch... 

Makes sense to separate operators and brackets. The patch looks good.

The only issue is with angle brackets: starting with Java5 source level, angle brackets can be both operators or brackets of generic or parameterized types. Which one they are cannot be syntactically determined. However, adding a semantic highlighting for brackets would be overkill IMO.

I propose to release the patch with minor modifications (copyright issues and the like), which always treats angle brackets as operators. While this is not entirely precise, the impact is not so bad, also because generic signatures tend to not be very long and will never span multiple lines in practice.

Dani, you decide.
+1 but make sure the default preferences map to existing behavior.

(In reply to comment #8)
> The only issue is with angle brackets: starting with Java5 source level, angle
> brackets can be both operators or brackets of generic or parameterized types.
> Which one they are cannot be syntactically determined. However, adding a
> semantic highlighting for brackets would be overkill IMO.

> I propose to release the patch with minor modifications (copyright issues and
> the like), which always treats angle brackets as operators. 
This is what the patch does.. I explicitely excluded <> angle brackets because it was impossible to address them a simple syntactic way.
> While this is not
> entirely precise, the impact is not so bad, also because generic signatures
> tend to not be very long and will never span multiple lines in practice.

(In reply to comment #9)
> +1 but make sure the default preferences map to existing behavior.
The defaults for brackets in the patch explicitely matches the existing defaults
for operators, so out of the box, things look exactely the same.
Gumpish:
I have built and posted an un-official jdt.ui patched bundle at:
http://sourceforge.net/project/showfiles.php?group_id=131065&package_id=154855&release_id=433294
This is based on the jdt.ui org.eclipse.jdt.ui_3.2.0.v20060605-1400 which is part of the Eclipse 3.2.0 release.
Enjoy at your own risk.
released > 20060719 with the following modifications:

- added Philippe Ombredanne to the list of contributors in the header of JavaCodeScanner.java
- made BracketRule and OperatorRuler private static final
