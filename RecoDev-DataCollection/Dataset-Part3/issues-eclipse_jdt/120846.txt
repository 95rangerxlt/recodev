I20051214-0010

- new workspace, import junit3.8.1 source
- new project JUnitTests
- move all junit.tests* and junit.samples* packages to JUnitTests

- export JUnit into junit1.jar with refactoring annotations
- import the junit1.jar as file into JUnitTests and add to build path

- rename Test to Toast, enable updating similar, with 3rd strategy

- export JUnit to junit2.jar
- import junit2.jar into JUnitTests

=> Error message:
"Assertion failed: Search for method declaration did not find original element"

-> There should be a log entry for such failures
-> The refactoring should work ;-)

I20051214-0010

- new workspace, import junit3.8.1 source
- new project JUnitTests
- move all junit.tests* and junit.samples* packages to JUnitTests

- export JUnit into junit1.jar with refactoring annotations
- import the junit1.jar as file into JUnitTests and add to build path

- rename Test to Toast, enable updating similar, with 3rd strategy

- export JUnit to junit2.jar
- import junit2.jar into JUnitTests

=> Error message:
"Assertion failed: Search for method declaration did not find original element"

-> There should be a log entry for such failures
-> The refactoring should work ;-)
Search engine wrongly receives a binary type from an erroneous typehierarchy. See also bug 81058

Needs to be investigated whether this is a JDT Core problem
The problem seems to be the equals() implementation of IMethods. During the search for the similar elements declaration, we have to find out all ripple methods of a similar method.

The Search engine returns instances of SourceMethod, while the original input is a ResolvedSourceMethod (since it is coming from a type hierarchy). IMethod#equals() returns false on two IMethod instances with exactly the same field instances, except that one is a SourceMethod and the other one is a ResolvedSourceMethod with an additional uniqueKey field.

Moving to JDT Core for comments
Created attachment 34839
example source code
Coudl not reproduce. I'm not sure about the steps. What does "import junit2.jar into JUnitTests" exactly mean ? Do I need to add it to the classpath ?
How is refactoring involved when importing junit2.jar ?

Also for the equality between SourceMethod and ResolvedSourceMethod, I don't see how this could fail if the 'fields' are exactly the same, since ResolvedSourceMethod doesn't redefine equal.

Reassigning to component owner (it was assigned to jdt-core-inbox with UI as the component).


I had a chat with Frédéric. He has been able to reproduce it with the described steps.
I disagree... Search Engine never returns SourceMethod but always ResolvedSourceMethod. The origin of the problem is somewhere else...

Putting a breakpoint in RippleMethodFinder2 constructor shows that provided IMethod is a SourceMethod.

Looking in stack trace, I see that this java element comes from RenameTypeProcessor fPreLoadedElementToName which contains only SourceMethod. I've also verified that fReferences which seems to be the field where search results are stored contains only ResolvedSourceMethod elements...

Back to JDT/UI for comment
Comment 1 is correct: On line 1315 of RenameTypeProcessor (rev. 1.89), the refactoring creates a type hierarchy from focus type MockRunner, which is an instanceof SourceType:

class MockRunner [in BaseTestRunnerTest [in BaseTestRunnerTest.java [in junit.tests.runner [in .src1140107251050 [in JUnitClient]]]]]
  MockRunner(junit.tests.runner.BaseTestRunnerTest)
  void runFailed(java.lang.String)
  void testEnded(java.lang.String)
  void testFailed(int, junit.framework.Test, java.lang.Throwable)
  void testStarted(java.lang.String)

The resulting typehierarchy contains a classToSuperclass mapping from MockRunner to the ResolvedBinaryType BaseTestRunner, which is clearly incorrect, since all types of the JAR file on the build path have been converted to source type stubs in a source folder, which is placed before the JAR file on the classpath (second last entry of the Java project)

The generated type stubs are in the .metadata/.plugins/org.eclipse.jdt.ui/.stubs directory

Could you please investigate why the typehierarchy contains binary types?
Some additional info to be able to reproduce the problem using comment 0 steps:
1) Test to rename is the interface in junit.framework package
2) before click on Finish while exporting JUnit to junit2.jar you need to:
   a) select to check "Export refactoring into JAR file" box
   b) click twice on Next button to reach "Jar Refactoring Selection" wizard page
      and select the refactoring "Rename type 'Test' to 'Toast'"
3) import junit2.jar means in fact:
   a) select junit.jar in JUnitTests project
   b) Click on Build path->Replace JAR File... menu item
   c) click on Browse button and select exported junit2.jar file
   d) click twice on Next button to perform refactoring including in this jar

Then (and only then), you will get systematically the exception.

Note that Cancel the operation after it will put back JUnitTests project in previous state (ie. with junit1.jar on its classpath) and you can try to replace  the JAR file once more and get the exception again and again...

Packages in the .src folder are created using LocalFile.mkdir(). Since this is run in an IWorkspaceRunnable, the Java model has no chance to know about these packages.

Thread [ModalContext] (Suspended (breakpoint at line 1095 in File))
	File.mkdir() line: 1095 [local variables unavailable]
	File.mkdirs() line: 1122
	LocalFile.mkdir(int, IProgressMonitor) line: 249
	StubCreationOperation.run(IProgressMonitor) line: 536
	JarImportWizard(StubRefactoringHistoryWizard).createTypeStubs(Refactoring, IProgressMonitor) line: 412
	JarImportWizard(StubRefactoringHistoryWizard).aboutToPerformRefactoring(Refactoring, RefactoringDescriptor, IProgressMonitor) line: 322
	JarImportWizard(RefactoringHistoryWizard).createRefactoring(RefactoringDescriptor, RefactoringStatus, IProgressMonitor) line: 433
	RefactoringHistoryWizard.access$10(RefactoringHistoryWizard, RefactoringDescriptor, RefactoringStatus, IProgressMonitor) line: 430
	RefactoringHistoryWizard$8.run(IProgressMonitor) line: 667
	ModalContext$ModalContextThread.run() line: 113

Using IPackageFragmentRooot#createPackageFragment(...) should solve the problem.
Why does the handle to the input element of the refactoring (in this case a handle to the interface Test) exist? All type stubs are generated in a single operation
Add Jerome in CCs list to give him a chance to answer your comment 11 question...
(In reply to comment #11)
> Why does the handle to the input element of the refactoring (in this case a
> handle to the interface Test) exist? All type stubs are generated in a single
> operation
> 
Because we're being too nice and allow to open elements even if the parent was already opened. This was requested to open external compilation units at one point. Might not be needed any longer.

Would it be better for you if I changed the behavior so that the stubs won't exist until the end of the IWorkspaceRunnable if their packages are not created with a IPackageFragmentRooot#createPackageFragment(...) ?
I have fixed the implementation to create the package fragments and type stubs with Java model routines, unfortunately with some performance loss.
IMHO the behavior of opening element does not need to be changed, since the new implementation seems to work.
If performance is an issue (how much did you loose btw ?), you might want to try to go back creating the packages with IResource routines, and force a checkpoint (see IWorkspace#checkpoint(...)) to update the Java model before you query it.
I do not have any exact numbers yet, but I try out your suggestion and see how it behaves performance-wise
Fixed in HEAD > 20060217
