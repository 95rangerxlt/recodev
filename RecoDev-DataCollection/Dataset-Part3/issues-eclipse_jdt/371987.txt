Build Identifier: Indigo release, 20110615-0604

If the context in which an undeclared field is used refers to a type whose name is masked by another one (e.g. due to a locally declared class of the same name), the 'quick fix' generated just substitutes one error for another, i.e. that the types are incompatible.  Eclipse should detect this scenario and use fully qualified types when it would occur.

This is not as strange a scenario as it would at first appear, and happens especially frequently in code using the Android API, which includes interfaces that mask each other in the same context (e.g. DialogInterface.OnClickListener and View.OnClickListener, both of which are local types in classes that extend Dialog, and Eclipse currently declares fields to be the former whereas the latter is more commonly used).

Reproducible: Always

Steps to Reproduce:
1. Create class with code that refers to a non-existent field that should have a type which is masked by a local declaration, for example:

public class Test {
	class Runnable
	{
		
	}
	
	public void test ()
	{
		new Thread (myRunnable);
	}
}

2. Choose 'quick fix' for the undefined identifier error, and choose 'create field'

The field declaration added is:

private Runnable myRunnable;

It should be:

private java.lang.Runnable myRunnable;

as in this context 'Runnable' refers to the local class that is not the one that should be used.

Build Identifier: Indigo release, 20110615-0604

If the context in which an undeclared field is used refers to a type whose name is masked by another one (e.g. due to a locally declared class of the same name), the 'quick fix' generated just substitutes one error for another, i.e. that the types are incompatible.  Eclipse should detect this scenario and use fully qualified types when it would occur.

This is not as strange a scenario as it would at first appear, and happens especially frequently in code using the Android API, which includes interfaces that mask each other in the same context (e.g. DialogInterface.OnClickListener and View.OnClickListener, both of which are local types in classes that extend Dialog, and Eclipse currently declares fields to be the former whereas the latter is more commonly used).

Reproducible: Always

Steps to Reproduce:
1. Create class with code that refers to a non-existent field that should have a type which is masked by a local declaration, for example:

public class Test {
	class Runnable
	{
		
	}
	
	public void test ()
	{
		new Thread (myRunnable);
	}
}

2. Choose 'quick fix' for the undefined identifier error, and choose 'create field'

The field declaration added is:

private Runnable myRunnable;

It should be:

private java.lang.Runnable myRunnable;

as in this context 'Runnable' refers to the local class that is not the one that should be used.
Another case with the error involves type names that are nested in both instances:

public class Test {
	interface Interface { }
	public void method(Interface parameter) { }
}

private class Test2 extends Test {
	interface Interface { }
	
	public void test ()	{
		method(field);
	}
}

In this case, the quick fix for field being undeclared should add:

private Test.Interface field;

but adds:

private Interface field;

This is more like the Android case I mentioned in the summary.
This may be a broader problem than just quick fix.  Content assist also appears to make the same mistake, e.g. in the context of my first example, enter a field declaration:

private java.lang.Runnable myRunnable = new

and press Space then Ctrl+Space.  Select 'Runnable Anonymous Inner Type java.lang' from the list, and the following is added:

new Runnable () {
   public void run () {
   }
}

which is still referring to the wrong Runnable.
(In reply to comment #2)
> This may be a broader problem than just quick fix.  Content assist also appears
> to make the same mistake,

See bug 349672.
I knew we had all the infrastructure to fix this. Turned out it was just a one-line oversight.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=6a4ed473a4ca5dec83e9e90423a591e872811fc0

Thanks for the test cases. The "private class Test2" in comment 1 is not legal Java, but the fix works there anyway.
