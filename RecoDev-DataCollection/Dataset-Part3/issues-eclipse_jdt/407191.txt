Following on from bug 383624 which activates code generation for type annotations, this bug covers further work in JDT core on surfacing this information elsewhere in the compiler.

Work items (likely incomplete list), please feel free to add !

org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader
- load type annotations on the types and members
- has structural change checking for annotations

BinaryTypeBinding 
- surface relevant type annotations

Following on from bug 383624 which activates code generation for type annotations, this bug covers further work in JDT core on surfacing this information elsewhere in the compiler.

Work items (likely incomplete list), please feel free to add !

org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader
- load type annotations on the types and members
- has structural change checking for annotations

BinaryTypeBinding 
- surface relevant type annotations
Created attachment 230467
Initial patch for ClassFileReader changes

Basic initial patch that enables ClassFileReader to load type annotations for types, methods and fields.  It does not load anything within methods (code level type annotations) - it isn't clear that is necessary right now.

This patch should be applied after those in the jsr308 code gen bug.
I'm much looking forward to this :)
Do you consider this patch ready for review and release?
Functionally complete for what I wanted it to do but it is a bit old now. I think I need to at least modify the copyright statements *sigh*, but I probably should also verify it still applies. I'll try to get to doing that soon.
Created attachment 233332
Patch to implement this change

I rebased the patch on the latest BETA_JAVA8 and have fixed up the copyright messages.

I'm still having a couple of issues signing the CLA with my gopivotal ID unfortunately so haven't managed that yet - but this patch seems good for review.
Great, I applied the patch on BETA_JAVA8 with only one glitch in CodeSnippetSkeleton.

Now the nitpicking starts :)

(1) Looking at this snippet in ClassFileReader:
	TypeAnnotationInfo[] newInfos = null;
	int newInfoCount = 0;
	newInfos = new TypeAnnotationInfo[numberOfAnnotations];
	for (int i = 0; i < numberOfAnnotations; i++) {
		// With the last parameter being 'false', the data structure will not be flushed out
		TypeAnnotationInfo newInfo = new TypeAnnotationInfo(this.reference, this.constantPoolOffsets, readOffset, runtimeVisible, false);
		readOffset += newInfo.readOffset;
		newInfos[newInfoCount++] = newInfo;
	}
	if (this.annotations == null) {
		if (newInfoCount != newInfos.length)

I bet that the last if condition will never evaluate to true:
newInfoCount is incremented exactly numberOfAnnotations-times.
Looks like copy-paste from the more involved decodeAnnotations().

(2) In the same snippet the check (this.annotations == null) looks wrong, should
be (this.typeAnnotations == null), shouldn't it?

(3) Is there any comment stating that type annotations from method bodies are
never decoded? Maybe TypeAnnotationInfo would be a good place to mention this.

(4) For bug 392384 I will also need this in IBinaryType:
    IBinaryTypeAnnotation[] getTypeAnnotations();
do you want to add this now, or should I do when I need it?

That's it for now.

The semantics will be tested via bug 392384 :)
Thanks for taking a look Stephan. Yep, some copy paste issues there!

(1) fixed
(2) fixed with test case added to check it.
(3) added
(4) I'll add it.

patch update to follow
Created attachment 233383
patch that implements ClassFileReader support for type annos

New patch that addresses the previous comments
Stephan, thanks for completing the review and committing when ready.

Andy, please confirm if you have been able to complete the CLA process ?
If not please outline what is the issue you are facing so we can work with
the right folks to have this taken care of.
The new CLA tag in bugzilla still shows a minus for Andy, so I'll just wait for
a green tick before doing a final once-over and commit.
Andy, can be please ping me, when you are cleared? TIA
CLA signed (wooo I have a CLA tick in bugzilla)
Re-checked and patch looks good.

I will release after final testing.
Testing for bug 392384 on top of this patch was successful.

I found one bug in the type annotation foundation: bug 414384, but that is not a bug
in binary access but in the original code gen.

Other than that the foundations worked smoothly, thanks for this solid contribution!

I was going to release this but the commit hook "reminded" me that Andy has to sign-off:
see http://wiki.eclipse.org/Development_Resources/Contributing_via_Git#Contributing_via_Bugzilla


Andy, could you please add the required sign-off wrt the Certificate of Origin?

<sigh>
Created attachment 234080
minimally adjusted patch

Actually, I did make a tiny change in the way how the new test class is registered.
So this is the patch pending for release.

Setting to resolve was wishful thinking. Re-opening until legal stuff is done.
And yes, when re-opening I have to make a comment
I realized that the patch has significant size and therefore I filed CQ 7485.
(In reply to comment #13)
> see
> http://wiki.eclipse.org/Development_Resources/
> Contributing_via_Git#Contributing_via_Bugzilla
> 
> 
> Andy, could you please add the required sign-off wrt the Certificate of
> Origin?

Andy, this is required to proceed with the CQ.
Sorry guys, too many bugzilla emails for to look through.  Here we go:

This contribution complies with http://www.eclipse.org/legal/CoO.php
After approval of the CQ I released the patch for BETA_JAVA8.

I tried to maintain a clear separation:
- Andy's patch in commit 2c4adf2736a9a7ce066a42070aabd3f4b1ddf5af
- my tiny adjustment in commit 7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101

Unfortunately a last minute rebase-conflict with Bug 409236 and/or Bug 406973
added some noise, but the final result is exactly as intended.
