when compiling a project via the BatchCompiler on Java 7 I get an NPE thrown from org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager.concatFiles(EclipseFileManager.java:202)

the problem seem to be at line 573:

    return this.locations.get(location.getName());

which works fine in Java 6, but returns null for Java 7.  location.getName() is "PLATFORM_CLASS_PATH" at that point.

building the same project with Java 6 works fine.

see more details at:
http://stackoverflow.com/questions/15819926/eclipse-jdt-compiler-ecj-throws-npe-in-java-1-7

stacktrace:
java.lang.NullPointerException
    at org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager.concatFiles(EclipseFileManager.java:202)
    at org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager.handleOption(EclipseFileManager.java:669)
    at org.eclipse.jdt.internal.compiler.apt.dispatch.BatchProcessingEnvImpl.(BatchProcessingEnvImpl.java:88)
    at org.eclipse.jdt.internal.compiler.apt.dispatch.BatchAnnotationProcessorManager.configure(BatchAnnotationProcessorManager.java:69)
    at org.eclipse.jdt.internal.compiler.batch.Main.initializeAnnotationProcessorManager(Main.java:3632)
    at org.eclipse.jdt.internal.compiler.batch.Main.performCompilation(Main.java:3737)
    at org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1679)
    at org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1372)
    at org.eclipse.jdt.core.compiler.batch.BatchCompiler.compile(BatchCompiler.java:80)
    at org.eclipse.jdt.core.compiler.batch.BatchCompiler.compile(BatchCompiler.java:52)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
...
    at java.lang.Thread.run(Thread.java:722)

when compiling a project via the BatchCompiler on Java 7 I get an NPE thrown from org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager.concatFiles(EclipseFileManager.java:202)

the problem seem to be at line 573:

    return this.locations.get(location.getName());

which works fine in Java 6, but returns null for Java 7.  location.getName() is "PLATFORM_CLASS_PATH" at that point.

building the same project with Java 6 works fine.

see more details at:
http://stackoverflow.com/questions/15819926/eclipse-jdt-compiler-ecj-throws-npe-in-java-1-7

stacktrace:
java.lang.NullPointerException
    at org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager.concatFiles(EclipseFileManager.java:202)
    at org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager.handleOption(EclipseFileManager.java:669)
    at org.eclipse.jdt.internal.compiler.apt.dispatch.BatchProcessingEnvImpl.(BatchProcessingEnvImpl.java:88)
    at org.eclipse.jdt.internal.compiler.apt.dispatch.BatchAnnotationProcessorManager.configure(BatchAnnotationProcessorManager.java:69)
    at org.eclipse.jdt.internal.compiler.batch.Main.initializeAnnotationProcessorManager(Main.java:3632)
    at org.eclipse.jdt.internal.compiler.batch.Main.performCompilation(Main.java:3737)
    at org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1679)
    at org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1372)
    at org.eclipse.jdt.core.compiler.batch.BatchCompiler.compile(BatchCompiler.java:80)
    at org.eclipse.jdt.core.compiler.batch.BatchCompiler.compile(BatchCompiler.java:52)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
...
    at java.lang.Thread.run(Thread.java:722)
I'm running this on Windows 7 64bit with Java 7u17 64bit.

the only keys I have in this.locations (in EclipseFileManager) for Java 7 are:

    ANNOTATION_PROCESSOR_PATH
    CLASS_PATH

when I run the same code in Java 6 I have 3 keys there:

    ANNOTATION_PROCESSOR_PATH
    CLASS_PATH
    PLATFORM_CLASS_PATH
For the record, from the stack overflow thread, here is the command used:

-g -1.6 -extdirs "F:/Workspace/git/igal-getrailo/railo-java/libs;C:\Apps\railo-builder\webapps\ra‌​ilo-builder\WEB-INF\railo\lib\compile" -sourcepath F:/Workspace/git/igal-getrailo/railo-java/railo-loader/src[-d none] -d F:/Workspace/railo-build/railo-4.0.5.001-patch-d/__railo-core-bin F:/Workspace/railo-build/railo-4.0.5.001-patch-d/__railo-core-src 

There is something about the path - there are possibly some non ASCII characters. To be more precise, some characters that can't be represented by ISO-8859-1 at ?? in the following path:

C:\Apps\railo-builder\webapps\ra??ilo-builder\WEB-INF\railo\lib\compile

I am not sure if this is what is causing it, but it's better to check that out.
(In reply to comment #2)

thank you for looking into this.  the ?? is an encoding issue on StackOverflow or email encoding.

I can replicate the problem with the main method below which produces the following commandLine:

-g -1.6 -extdirs F:\Workspace\git\igal-getrailo\railo-java\libs;C:\Apps\railo-builder\webapps\railo-builder\WEB-INF\railo\lib\compile -sourcepath F:\Workspace\git\igal-getrailo\railo-java\railo-loader\src[-d none] -d F:\Workspace\railo-build\testjre7\__railo-core-bin F:\Workspace\railo-build\testjre7\__railo-core-src


public static void main(String[] args) {

		PrintWriter out = new PrintWriter( System.out, true );
		PrintWriter err = new PrintWriter( System.err, true );
		
		String srcDir = "F:/Workspace/railo-build/testjre7/__railo-core-src";
		String dstDir = "F:/Workspace/railo-build/testjre7/__railo-core-bin";
		
		String extDir = "F:/Workspace/git/igal-getrailo/railo-java/libs;C:/Apps/railo-builder/webapps/railo-builder/WEB-INF/railo/lib/compile";
		
		String cmdLine = "-g -1.6 -extdirs " + extDir + " -sourcepath F:/Workspace/git/igal-getrailo/railo-java/railo-loader/src[-d none]";
	
		cmdLine += " -d " + dstDir + " " + srcDir;
		
		cmdLine = cmdLine.replace( '/', '\\' );

		System.out.println( cmdLine );
		
		boolean result = BatchCompiler.compile( cmdLine, out, err, null );
		
		System.out.println( "\r\ndone.\tresult: " + result );
	}


the stacktrace of the NPE thrown by the method above is:

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager.concatFiles(EclipseFileManager.java:202)
	at org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager.handleOption(EclipseFileManager.java:669)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.BatchProcessingEnvImpl.<init>(BatchProcessingEnvImpl.java:88)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.BatchAnnotationProcessorManager.configure(BatchAnnotationProcessorManager.java:69)
	at org.eclipse.jdt.internal.compiler.batch.Main.initializeAnnotationProcessorManager(Main.java:3758)
	at org.eclipse.jdt.internal.compiler.batch.Main.performCompilation(Main.java:3876)
	at org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1684)
	at org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1377)
	at org.eclipse.jdt.core.compiler.batch.BatchCompiler.compile(BatchCompiler.java:80)
	at org.eclipse.jdt.core.compiler.batch.BatchCompiler.compile(BatchCompiler.java:52)
	at Test.main(Test.java:31)





> For the record, from the stack overflow thread, here is the command used:
> 
> -g -1.6 -extdirs
> "F:/Workspace/git/igal-getrailo/railo-java/libs;C:\Apps\railo-
> builder\webapps\ra‌​ilo-builder\WEB-INF\railo\lib\compile" -sourcepath
> F:/Workspace/git/igal-getrailo/railo-java/railo-loader/src[-d none] -d
> F:/Workspace/railo-build/railo-4.0.5.001-patch-d/__railo-core-bin
> F:/Workspace/railo-build/railo-4.0.5.001-patch-d/__railo-core-src 
> 
> There is something about the path - there are possibly some non ASCII
> characters. To be more precise, some characters that can't be represented by
> ISO-8859-1 at ?? in the following path:
> 
> C:\Apps\railo-builder\webapps\ra??ilo-builder\WEB-INF\railo\lib\compile
> 
> I am not sure if this is what is causing it, but it's better to check that
> out.
please note that this might be a Windows-specific issue.

I have two colleagues who tried this code:  one of them tried it on Windows and experienced the NPE like I did.  the other tested it on Mac and manage to compile the code with Java 7.
Reproduced in master. Will look into this.
Looks like this code in EclipseFileManager#getDefaultBootclasspath is the problem:

	if (javaversion != null && !javaversion.startsWith("1.6")) { 

This should be a >= or an equivalent test.
Created attachment 229489
Proposed fix

Fix expands the java version check to 1.7 and above. I have made a similar change to org.eclipse.jdt.internal.compiler.tool.EclipseFileManager, whose code is mostly duplicate of org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager.

I think we should use this opportunity to make the BatchCompilerTest to be run at compliance levels > 1.5. It's currently being only run at this level. The patch includes the change for that as well. The tests pass at all levels.

Olivier, do you know why the tests were run only at 1.5 level?
Released the fix via commit:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=933d7ac89005a6db0ba2e9aa90dfe242d592e5e5
(In reply to comment #7)
> Olivier, do you know why the tests were run only at 1.5 level?
Probable for historical reasons. Tests are written at time where 1.7 or 1.8 were not in the picture. So this kind of changes might be required.
Good catch!
thanks for the fast and efficient resolution on this issue.

is there a scheduled release date for version 4.3?  or an estimated release date?  is there an announce mailing list that I can subscribe to and be notified?

thanks again,


Igal
(In reply to comment #10)
> is there a scheduled release date for version 4.3?  or an estimated release
> date?  is there an announce mailing list that I can subscribe to and be
> notified?

4.3 is slated to be out by June end. Or you can grab one of the developer build from here:

http://download.eclipse.org/eclipse/downloads

And you can find more on the timelines here:

http://wiki.eclipse.org/Kepler/Simultaneous_Release_Plan
is the ECJ 4.3 jar available for download anywhere?

I downloaded the new Eclipse 4.3 but the jdt core jar
org.eclipse.jdt.core_3.9.0.v20130604-1421.jar shows version 3.9.0

is that the correct file?  does it contain this patch?  I expected the version to show 4.3

thanks,


Igal
(In reply to comment #12)
> is the ECJ 4.3 jar available for download anywhere?
> 
> I downloaded the new Eclipse 4.3 but the jdt core jar
> org.eclipse.jdt.core_3.9.0.v20130604-1421.jar shows version 3.9.0
> 
> is that the correct file?  does it contain this patch?  I expected the
> version to show 4.3

What you are having is the right one. The version you are talking about is the plug-in version, which can be different from the SDK version.
hi,

I downloaded ECJ 4.3.1 from 
http://www.eclipse.org/downloads/download.php?file=/eclipse/downloads/drops4/R-4.3.1-201309111000/ecj-4.3.1.jar&mirror_id=272

and I still get the NPE.  I thought that it should be fixed for Eclipse 4.3?  Thank you.

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager.concatFiles(EclipseFileManager.java:202)
	at org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager.handleOption(EclipseFileManager.java:669)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.BatchProcessingEnvImpl.(BatchProcessingEnvImpl.java:88)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.BatchAnnotationProcessorManager.configure(BatchAnnotationProcessorManager.java:69)
	at org.eclipse.jdt.internal.compiler.batch.Main.initializeAnnotationProcessorManager(Main.java:3632)
	at org.eclipse.jdt.internal.compiler.batch.Main.performCompilation(Main.java:3737)
	at org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1679)
	at org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1372)
	at org.eclipse.jdt.core.compiler.batch.BatchCompiler.compile(BatchCompiler.java:80)
	at org.eclipse.jdt.core.compiler.batch.BatchCompiler.compile(BatchCompiler.java:52)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at railo.runtime.reflection.pairs.MethodInstance.invoke(MethodInstance.java:37)
still getting the same error on 4.3.1 

I downloaded ECJ 4.3.1 from 
http://www.eclipse.org/downloads/download.php?file=/eclipse/downloads/drops4/R-4.3.1-201309111000/ecj-4.3.1.jar&mirror_id=272
is there a reason this was not fixed?  can anyone please comment on the status of this bug?
Are you sure that you are using the right jar?
I tried with 4.3.1 and I could not get the NPE. I tried the same command line with 4.2.2 jar and I could get it.
If you still get it with 4.3.1 (make sure 4.3.0 or previous is not on your VM classpath), send me a command line I could use and I'll take a look.
hi Olivier, 

my apologies.

I am not running this from a command line per se, but inside a servlet that is running inside Jetty;  

apparently Jetty 8.1.12 ships with the jdt-core lib 3.7 which is in the classpath and I was not aware of.  I updated it to jdt-core 3.9 and it seems to work fine.

sorry to have wasted your time, and thank you for your help.


Igal
