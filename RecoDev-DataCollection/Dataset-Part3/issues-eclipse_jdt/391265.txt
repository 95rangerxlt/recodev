In JavaDoc blocks, {@link}s to methods in other classes, where the method takes a generic argument, are not identified correctly by (I assume) the parser, resulting in two observed bugs.

For example, given these classes:

---

package pk1;

public class A {

	/**
	 * Generic
	 */
	public <T> void method(T t) {}

	/**
	 * Generic array
	 */
	public <T> void method(T[] t) {}
}

---

package pk1;

/**
 * {@link pk1.A#method(T)}.
 * {@link pk1.A#method(T[])}.
 */
public class B {}

---

package pk2;

public class T {}

---

The following can be observed.

1.  The ctrl+click navigation to the methods does not work.  For class B you can navigate to class A directly, but there is no active link available for the methods.

2. On origination of imports for class B, the import pk2.T; is brought in.  (Additionally this effects the behavior of 1., ctrl+click will go to the correct methods, however the T becomes an active link to class T.)

-- Configuration Details --
Product: Eclipse 1.5.1.20120828-0743 (org.eclipse.epp.package.jee.product)
Installed Features:
 org.eclipse.jdt 3.8.1.v20120814-104540-8-8nFqpFNOfwKDRVz-tXOcL5d_83

In JavaDoc blocks, {@link}s to methods in other classes, where the method takes a generic argument, are not identified correctly by (I assume) the parser, resulting in two observed bugs.

For example, given these classes:

---

package pk1;

public class A {

	/**
	 * Generic
	 */
	public <T> void method(T t) {}

	/**
	 * Generic array
	 */
	public <T> void method(T[] t) {}
}

---

package pk1;

/**
 * {@link pk1.A#method(T)}.
 * {@link pk1.A#method(T[])}.
 */
public class B {}

---

package pk2;

public class T {}

---

The following can be observed.

1.  The ctrl+click navigation to the methods does not work.  For class B you can navigate to class A directly, but there is no active link available for the methods.

2. On origination of imports for class B, the import pk2.T; is brought in.  (Additionally this effects the behavior of 1., ctrl+click will go to the correct methods, however the T becomes an active link to class T.)

-- Configuration Details --
Product: Eclipse 1.5.1.20120828-0743 (org.eclipse.epp.package.jee.product)
Installed Features:
 org.eclipse.jdt 3.8.1.v20120814-104540-8-8nFqpFNOfwKDRVz-tXOcL5d_83
Created attachment 221978
Project with example from report
Eclipse's behavior is correct and matches the behavior of the Javadoc tool.

Javadoc method references must use the erasure of the method as type names in the parameter list, so the correct references in your example are:
 * {@link pk1.A#method(Object)}.
 * {@link pk1.A#method(Object[])}.

The documentation in 
http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#package.class is quite weak. It says "Type can be a class, interface, array, or primitive", which excludes type parameters, but it doesn't actually specify that the erasure should be used. Please ask Oracle to fix their spec.
Hint: Use content assist (Ctrl+Space) to create correct references.
Alright then this is a bug in the automatic JavaDoc template generation.  Changing B to extend A, then using (for example the override template) you end up with the following:

package pk1;

public class B extends A {
	
	/* (non-Javadoc)
	 * @see pk1.A#method(java.lang.Object)
	 */
	@Override
	public <T> void method(T t) {
		super.method(t);
	}
	
	/* (non-Javadoc)
	 * @see pk1.A#method(T[])
	 */
	@Override
	public <T> void method(T[] t) {
		super.method(t);
	}
	
}

I first ran into this during JUnit test case generation, where it would generate the pk1.A#method(T[]) style {@link} tags. the root cause of this is the JavaDoc generator, not incorrect linking.
Created attachment 222026
Updated project example with B extending A
Yes, the see_to_overridden and see_to_target variable evaluations were buggy.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=24f1c49b23986dd6fa61fc07cfafa56b0778d000
