I-20021016 linux-gtk:

public class Goo {
  Goo() {
    this(42);
  }
  Goo(int value) {
  }
}

1. select the second constructor
2. inline method
3. press finish
4. observe that the second constructor disappears,
   leaving a compile error for the first constructor

Note that selecting 'this' and calling inline method results in an error
saying "No method invocation or declaration selected". Strictly speaking,
this is the case, but inlining should work for constructors as well.

If inlining constructors is not supported, then it should be disabled 
consistently.

I-20021016 linux-gtk:

public class Goo {
  Goo() {
    this(42);
  }
  Goo(int value) {
  }
}

1. select the second constructor
2. inline method
3. press finish
4. observe that the second constructor disappears,
   leaving a compile error for the first constructor

Note that selecting 'this' and calling inline method results in an error
saying "No method invocation or declaration selected". Strictly speaking,
this is the case, but inlining should work for constructors as well.

If inlining constructors is not supported, then it should be disabled 
consistently.
It is now disabled in both cases. Fully support constructor inlining needs 
rework of the inline refactoring since ConstrctorInvocation != 
MethodInvocation. One is a statement the other is an expression.

Post 2.1
Reopening...
Inlining constructors is now supported.
