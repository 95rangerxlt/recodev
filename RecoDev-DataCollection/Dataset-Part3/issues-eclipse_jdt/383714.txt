BETA_JAVA8:

This is a spin off by splitting bug 381358 into two: One dealing with
correctness issues (the current bug) and the other dealing with quality of
diagnostics (bug 381358). This is so that the correctness issues could be
worked on an a priority basis:

(1) The following program does not elicit an error message at the
moment, when compiled as a 1.7- project. It should be rejected with
a message that reads "Default methods are available only at source 
level 1.8 or above"

// -----
interface I {
  public void foo() default { System.out.println("Place holder"); }
}

(2) The following program should be rejected at 1.7-, but is not at 
the moment:
// ---
interface I {
  void foo(int p);
}
public class X {
  I i = System::exit;
}

(3) 
// ---------------------------
interface I {
  int foo(int p);
}
public class X {
  I i = p -> 10;
}

BETA_JAVA8:

This is a spin off by splitting bug 381358 into two: One dealing with
correctness issues (the current bug) and the other dealing with quality of
diagnostics (bug 381358). This is so that the correctness issues could be
worked on an a priority basis:

(1) The following program does not elicit an error message at the
moment, when compiled as a 1.7- project. It should be rejected with
a message that reads "Default methods are available only at source 
level 1.8 or above"

// -----
interface I {
  public void foo() default { System.out.println("Place holder"); }
}

(2) The following program should be rejected at 1.7-, but is not at 
the moment:
// ---
interface I {
  void foo(int p);
}
public class X {
  I i = System::exit;
}

(3) 
// ---------------------------
interface I {
  int foo(int p);
}
public class X {
  I i = p -> 10;
}
Fix and tests released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=8ff32a67561d85d16e0a42904446ef1ba698078c
In this program, a few constructs are properly reported, but others aren't
(Using 1.7 compliance)

interface I {
	
}
public class Action<K> {
	class Inner {
		
	}
	
	<T> Action<T> retT(T t) {
		return new Action<T>();
	}
	
	
	public void f1(Object[] o[][]) {}
    public void foo() { 
        I len1 = Action::<String>bar ;  // reported as method ref. not allowed
    	I len2 = Action<Integer>::<String>bar ;  // syntax error
        I len3 = Action<Integer>::bar ;   // syntax error
    }
}

Just like the first expression, it'll be nice to have the "Method references are allowed only at source level 1.8 or above" warning on the last two expressions.
(In reply to comment #2)

>         I len1 = Action::<String>bar ;  // reported as method ref. not allowed

This is because, this does not require any look ahead.

>         I len2 = Action<Integer>::<String>bar ;  // syntax error
>         I len3 = Action<Integer>::bar ;   // syntax error

These require look ahead to be recognized as ReferenceExpressions and
look ahead is turned off at 1.7-.

As mentioned elsewhere, if early experiments that show that always-look-ahead
policy results in near zero degradation stand scrutiny, then we may adopt that
policy and the quality of error messages (the subject of bug 381358) should
improve.

See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=383378#c9
Ayush, does the PRECEDES set look right ?

See also  https://bugs.eclipse.org/bugs/show_bug.cgi?id=383378#c11
 https://bugs.eclipse.org/bugs/show_bug.cgi?id=383378#c13
 https://bugs.eclipse.org/bugs/show_bug.cgi?id=383378#16
