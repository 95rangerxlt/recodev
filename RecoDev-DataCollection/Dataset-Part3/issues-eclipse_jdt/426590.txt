It looks like as if the type inference for the tenary operator is broken:

class A {
		
	}
	
	class B extends A {
		
	}
	
	class C extends B {
		
	}
	
	class D {
		D(A a) {
			
		}
		
		D(boolean b) {
			this(b ? new B() : new C());
		}
	}

produces "The constructor FXTestCases.D((b ? new B() : new C())) is undefined"

It looks like as if the type inference for the tenary operator is broken:

class A {
		
	}
	
	class B extends A {
		
	}
	
	class C extends B {
		
	}
	
	class D {
		D(A a) {
			
		}
		
		D(boolean b) {
			this(b ? new B() : new C());
		}
	}

produces "The constructor FXTestCases.D((b ? new B() : new C())) is undefined"
Same for:

void bla(boolean b) {
			test(b ? new B() : new C());
		}
		
		void test(A a) {
			
		}
On branch head, this compiles fine. There was a bit of ripple with
ternary operator handing (which was also the reason for the UnsupportedOperationException). I'll track down the exact change shortly.
Yes, I can reproduce the problem in   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	1.0.0.v20140124-0106_BETA_JAVA8	org.eclipse.jdt.java8patch.feature.group	Eclipse.org

but not on branch head.
(In reply to Srikanth Sankaran from comment #3)

> but not on branch head.

Sorry, I CAN reproduce on branch head - my test project setting was bad.
Will take a look.
Looks like the same problem as bug 426589 ? (With some update gaps for nested
invocations.)
parameterCompatibilityLevel18() doesn't yet handle ConditionalExpression as poly expression. Fix will follow.
I had to fill in a few more gaps in parameterCompatibilityLevel18().

Fix has been released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=86bc6fbd8bb61b3353c5beacb63fca5b9ddef84a
