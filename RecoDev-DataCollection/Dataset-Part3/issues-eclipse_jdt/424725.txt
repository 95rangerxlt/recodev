Getting this problem on a large Java 8 project with the 20 december Java8 release:

java.lang.ArrayIndexOutOfBoundsException: 1
	at org.eclipse.jdt.internal.compiler.ast.Statement.analyseArguments(Statement.java:120)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:168)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:52)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.analyseCode(TryStatement.java:169)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:52)
	at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:105)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:128)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:740)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:264)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:119)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:776)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Unknown Source)

I'm unsure where it occurs exactly as the stack trace leaves much to be desired to figure out where this problem occurs.

Getting this problem on a large Java 8 project with the 20 december Java8 release:

java.lang.ArrayIndexOutOfBoundsException: 1
	at org.eclipse.jdt.internal.compiler.ast.Statement.analyseArguments(Statement.java:120)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:168)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:52)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.analyseCode(TryStatement.java:169)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:52)
	at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:105)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:128)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:740)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:264)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:119)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:776)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Unknown Source)

I'm unsure where it occurs exactly as the stack trace leaves much to be desired to figure out where this problem occurs.
Could you please provide a test case that reproduces this issue? Or share the zip/chunk of code where this error occurs in case its tough to pin point the issue?
I'm unable to reproduce this again after working around the problem (continued work in a different Java 8 enabled Eclipse).

It would have been hard to isolate anyway, as the runaway build process kept interfering with Eclipse operations (requiring restarts), but I'll try activate some logging (or send you the entire project) if it comes back again.

I was actually hoping the given stack trace would give some clue as to what might be wrong.  If I'm reading it right it occurs in a class method, somewhere in a try statement nested within an if block.  Line 120 and whatever analyseArguments is doing should provide some indication of what might be going wrong.
I managed to isolate it after all.  I'm however at a loss why it is causing problems.

The fragment below causes the stack trace.  Uncommenting part of the try or the whole try block makes it go away.

import java.lang.invoke.MethodHandle;

public final class AnnotatedRecordMapper<T> {
  private MethodHandle afterLoadStore;

  public void invokeAfterLoadStore(Object object, Object database) {
    if(afterLoadStore != null) {
      try {
        afterLoadStore.invoke(object, database);
      }
      catch(Throwable e) {
        throw new RuntimeException(e);
      }
    }
  }
}
I can reproduce using the example from comment 3 and after enabling null annotations (as the AIOOBE occurs inside null analysis).

This happens when analysing
  afterLoadStore.invoke(object, database)
which resolves to a PolymorphicMethodBinding, whose original has one "Object[]" parameter, where we are expecting 2 parameters.

It seems in the presence of polymorphic methods we must be much more careful with using original() and assuming it has the same shape is the current method.
The AIOOBE has been fixed via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=7ff9b5e7960c9af4d2ba07d3470483b51a02c825

We are no longer performing any null analysis for the arguments to any polymorphic method call, since we don't have any useful information at hand.

Please let us know if the infinite loop can still be reproduced.
