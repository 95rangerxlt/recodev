BETA_JAVA8:

Lambda spec part H: 

...

An interface may also declare static methods, which work in much the same way as static methods in classes, except that they are not inherited. Often, an interface is the most appropriate place to declare methods that produce or manipulate objects of the interface type.

An interface method that is neither default nor static is implicitly abstract. 

...

So the following program should compile and does with 8b74:

// ----
interface I {
	static void doit() {}
}
// ---

BETA_JAVA8:

Lambda spec part H: 

...

An interface may also declare static methods, which work in much the same way as static methods in classes, except that they are not inherited. Often, an interface is the most appropriate place to declare methods that produce or manipulate objects of the interface type.

An interface method that is neither default nor static is implicitly abstract. 

...

So the following program should compile and does with 8b74:

// ----
interface I {
	static void doit() {}
}
// ---
Jay, since this blocks bug 399791, you may as well work on it. Thanks
The following cases should report error:

static abstract void foo();
static abstract void foo() {}
static void foo();
(In reply to comment #2)
> The following cases should report error:
> 
> static abstract void foo();
> static abstract void foo() {}
> static void foo();

The first two are already rejected but the error message can be better. The closest of the available messages is the following:

"The abstract method foo1 in type I can only set a visibility modifier, one of public or protected"

I will use the above unless someone has reasons for not using it.
Created attachment 226821
Proposed fix

Patch with new tests. This is not up for review yet as one of the tests that is failing needs some clarification from Stephan. Will report back once I have clarified.
(In reply to comment #4)
> Created attachment 226821 [details]
> Proposed fix

The fix touches some of the code added for default methods. There is a chance that this code might change as part of bug 399695. The new tests in the patch will have to be modified for sure. So, this one better wait.
Created attachment 227185
Updated patch

All new tests are passing after the fix for bug 400710 has been released.

Running all tests now will report when done.
(In reply to comment #6)
> Created attachment 227185 [details]
> Updated patch
> 
> All new tests are passing after the fix for bug 400710 has been released.
> 
> Running all tests now will report when done.

All tests are green. Srikanth, this is a simple fix. Do you have time for a quick review? Thanks!

Also let me know if it makes sense to introduce a new error when static and default are both used. Right now the fix reports the usual "Illegal modifier for the interface ..." error.
Jay, with different people touching this, things have gotten clumsy.

I think the error methodNeedBody should be issued exactly from two
places instead of the 4 we have today: MethodDeclaration.resolveStatements 
and ConstructorDeclaration.resolveStatements. Since interfaces cannot have
constructors, only the former is relevant.

Here is what I think we should do:

(1) Remove the error reporting for methodNeedBody from consumeInterfaceMethodDeclaration and checkAndSetModifiersForMethod.


(2) Centralize methodNeedBody  error reporting in MethodDeclaration.resolveStatements. Remove the comment "// by grammatical construction, interface methods are always abstract" and add code to
do the right thing there.

(3) In checkAndSetModifiers, this code:

if (isDefaultMethod && (modifiers & ClassFileConstants.AccAbstract) != 0) {
			problemReporter().abstractMethodNeedingNoBody((AbstractMethodDeclaration) this.referenceContext);
		}

can this be removed and the existing check in consumeInterfaceMethodDeclaration
be tweaked to address this case ?

(4) I think the entire messaging around : "Illegal modifier for the interface method ..." needs to be reworked. Looking at testStaticMethod01, it is
clear that the messages are various and not always precise and can be
confusing.

""----------\n" + 
"4. ERROR in I.java (at line 6)\n" + 
"	abstract static void foo4() {}\n" + 
"	                     ^^^^^^\n" + 
"Illegal modifier for the interface method foo4; only public & abstract are permitted\n" + 
"----------\n"

if the user follows this advice and removes static, the code would still
fail to compile 

I think we need something similar to IllegalVisibilityModifierCombinationForMethod which reports:
360 = The method {1} in type {0} can only set one of public / protected / private

If after making these changes, you hit some tests failures, please post a
patch and the failing test details and I'll take a look.
(In reply to comment #8)
> Jay, with different people touching this, things have gotten clumsy.

OK, I see that Stephan has requested Manoj to do the message clean up
on behalf of bug 400977 and so that lets you off the hook. Could you
address the other concerns and post a patch please ? Thanks.
Also, please rename DefaultMethodsTest to InterfaceMethodsTest and
please see if the TODO remove me is ready to be removed - TIA.
Do we need a separate error message for static interface methods below 1.8, something similar to defaultMethodsNotBelow18 ?
(In reply to comment #11)
> Do we need a separate error message for static interface methods below 1.8,
> something similar to defaultMethodsNotBelow18 ?

yes, please.
Created attachment 227394
Updated patch

Updated patch with test changes.

Partially addresses the two cases mentioned in bug 400977, comment #2. I.e, it now reports only one error about the invalid combination. We no longer report about the missing body or method needing body. The error reporting will be fixed via 400977.

I made one change to an error message, that's probably not required considering the bug 400977. But included anyway in the patch.
(In reply to comment #12)
> (In reply to comment #11)
> > Do we need a separate error message for static interface methods below 1.8,
> > something similar to defaultMethodsNotBelow18 ?
> 
> yes, please.

Somehow I didn't see this reply before posting a patch. Will adjust the patch and repost.
Created attachment 227399
Updated patch

Sorry about the back to back patches. This one includes the new error message for static methods below 1.8.
Comments: 

(0) This patch makes for much cleaner resulting code - Thanks.

(1) Sorry to nitpick: "Static methods in interfaces are allowed only at source level 1.8 or above" reads better instead as "Static methods are allowed in interfaces only at source level 1.8 or above

(2) In MethodDeclaration#resolveStatements:

the reference to native should be removed. Interface methods
cannot be native and it is confusing to see it there.

It could also be copy pasted elsewhere in the future perpetuating the confusion:)

(3) More nitpick: InterfaceMethodsTest : invokved ==> invoked (3 places)

(4) I changed the last test to be:

"public class C implements J {\n" +
"	public static void main(String[] args) {\n" +
"		C c = new C();\n" +
"		c.bar();\n" +
"       c.foo();\n" +
"       C.foo();\n" +
"       J.foo();\n" +
"       I.foo();\n" +
"       new I() {}.foo();\n" +
"	}\n" +
"}"

I get very confusing output: 
J#I
I#I
I#I
J#I
I#I
I#I

javac 8b76 generates bad code. We need to understand what is the right
behavior.

(5) I was surprised to see that in the test modified as above, I didn't
get the warning: The static method foo() from the type I should be accessed in a static way - why ?

Overall looks close, we just need to understand the runtime behavior
oddity.
Created attachment 227434
Updated patch

Added the review suggestions.

The following test case till need to be handled - it should be rejected but is not:

public class X implements II {
	public void foo() {
		bar();
	}
}
interface II {
	public static void bar() {}
}

From the spec, part H:
"An interface may also declare static methods, which work in much the same way as static methods in classes, except that they are not inherited."
(In reply to comment #17)

> From the spec, part H:
> "An interface may also declare static methods, which work in much the same
> way as static methods in classes, except that they are not inherited."

Also: we need tests for these:

The interface inherits, from the interfaces it extends, all members of those interfaces, except for fields, classes, and interfaces that it hides, and abstract or default methods that it overrides, and static methods.

It is a compile-time error to use the name of a type parameter of any 
surrounding declaration in the header or body of a static method.

It is a compile-time error if an interface declares a static method whose signature is a subsignature of an instance method inherited from a superinterface.

It is a compile-time error for the body of a static method to attempt to reference the current object using the keyword this or the keyword super.
I didn't check the patch yet, will do so after the open issues are
resolved, but please add a test for this case also:

There should be only one error in:

// -----
interface I {
	static void foo() { }
}

class Y {
	static void goo(int x) {}
}

class X extends Y {
	void foo() {}        // Should NOT be error.
	void goo(int x) {}   // Should be error.
}
(In reply to comment #19)
> I didn't check the patch yet, will do so after the open issues are
> resolved, but please add a test for this case also:

Likewise a test for interfaces extending other interfaces too.
Created attachment 227545
Updated patch

Patch includes fix for test case mentioned in comment #17 and additional tests.

The following scenario is still open and needs to be discussed.

public class B implements LocalInterface {
	public static void main(String[] args) {
		B b = new B();
		LocalInterface l = b;
		l.foo();
	}
}
interface LocalInterface {
	public static void foo() {
		System.out.println("Hello");
	}
}

Not only does this code compile (apart from the warning about the static method access in a non-static way) I can even run this code, which prints the output!
Created attachment 227642
Updated patch

Patch addresses open issues discussed in the previous posts and includes new tests. 

Srikanth, can you review this patch?
2 issues with the patch:

(1) findMethod, getImplicitMethod etc should not return a valid binding
that is turned into an invalid binding at the client side. This would
require every client to do so. Right thing to do is to expose the problem
at the deepest layer possible.

(2) The following code triggers a duplicate method message:

// ---
interface I {
	static void foo() {}
}

class Y {
	static void foo()  {}
}
class X extends Y implements I {
	{
		X x = new X();
		//x.foo();
		x.foo();  
	}
}
Created attachment 227863
Updated patch

Moved the code to exclude static interface methods to MethodBinding#canBeSeenBy(). As a result, the code is cleaner, but there is a difference in behavior.

With this patch, we report unresolvable method error instead of method not visible error. With the previous patch, we could still open the method declaration even when there were errors. And I think it would be nice to report an error specific and being able to open the method declaration from the invocation.

Srikanth, what's your take?
(In reply to comment #24)

> Srikanth, what's your take?

I'll take a look. This ER is standalone i.e has no impact on any of the
Java SE8 features - so this is not urgent.
Here are the review comments: I have incorporated fixes for these and
will release them after testing.

(1) With this patch, the following program triggers a bogus message:
"This method must return a result of type String."

@interface A {
	static String foo() default "Blah";
}

(2) MethodBinding.canBeSeenBy: we should not be checking for compliance level
but should check for source level.

(3) The polarity of the check is also wrong. The way it is coded, a 1.7
project compiled against a 1.8 jar will be able to see the static method.

(4) This method as it is coded would also allow this illegal access:

interface A {
	static void foo() {}
	default void goo(A a) {
		a.foo(); // No error here.
	}
}

(5) Scope.java:

for (int index = 0; index < receiverMethods.length; index++) {

we need to pull up the loop invariant length computation.

(6) MethodVerifier: fixed bad indentation. 

(7) Review point#1 from comment#16 incorporated.

(8) InterfaceMethodsTest -> fixed various typos sta1tic --> static.

(9) testStaticMethod02 encodes wrong behavior:
"----------\n" + 
"3. WARNING in I.java (at line 7)\n" + 
"	this.foo();\n" + 
"	^^^^^^^^^^\n" + 
"The static method foo() from the type I should be accessed in a static way\n" +

should actually be an error.

(10) testStaticMethod02  is a negative test, comment says it is a positive
test - fixed.

 
Fix and tests released on Jay's behalf in 3 batches here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=15e4d25d59c8a4322c2a033f58582a1471db63ef

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=09d58a6e319cfeec520d29fd7c2c24967ab4e499

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=0b88f9a0bb1950edae0865a8658608a49edfc445

I'll leave this open until spec review is complete and also the
real problem reported in comment#24 is addressed.
(In reply to comment #26)

> I'll leave this open until spec review is complete and also the
> real problem reported in comment#24 is addressed.

Addition changes and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=39c80376eb5a4ddf3b0cc660e46c4e7575c329d8.

At this point, we are done with enabling compiler support for static interface
methods. Resolving. Thanks Jay.
