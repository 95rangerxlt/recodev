package a;

public class A {
    protected class Sub {}
    protected void doSomething(Sub sub){}
}

----------
package b;

public class B extends A {
doSome<<CARET>>
}

----------

The code above describes the scenario.  When you invoke content assist in class B (where the caret is) to override the doSomething() method, an invalid import statement for a.A.Sub is added to class B.  That import statement is not necessary.

package a;

public class A {
    protected class Sub {}
    protected void doSomething(Sub sub){}
}

----------
package b;

public class B extends A {
doSome<<CARET>>
}

----------

The code above describes the scenario.  When you invoke content assist in class B (where the caret is) to override the doSomething() method, an invalid import statement for a.A.Sub is added to class B.  That import statement is not necessary.
There's no proposal with your test case...

You need to modify B.java compilation unit as follows:
----------
package b;

public class B extends a.A {
doSome<<CARET>>
}
----------
Is this a regression of bug 20562
Created attachment 72566
Proposed fix
Released for 3.4M1

Tests added :
  CompletionTests#testCompletionMethodDeclaration13() -> testCompletionMethodDeclaration16()
Hmm, I'm annoying with this one as I must reopen it...

The symptom described at comment 0 still exists but it's a fact that the completion proposal given by JDT/Core does no longer qualify the parameter type as its completion is:
"protected void doSomething(Sub sub)" instead of
"protected void doSomething(a.A.Sub sub)" using 3.3


As JDT/Core proposal seems to be correct now, I think the best thing is to move this  bug to JDT/Text to investigate why the import is still added...

This a bug in the imports computer. It also happens calling Organize Imports on B (R3.3 and I20070802-0800).

Test Case:
1. paste this:
--- %< ---
package a;
public class A {
    protected class Sub {}
    protected void doSomething(Sub sub){}
}
package b;
public class B extends A {
	protected void doSomething(Sub sub) {
		super.doSomething(sub);
	}
}
--- %< ---
2. Organize imports on B.java
==> bug

Martin, can you look at this?
The two cases are different issues. The example code in comment 1 is the right one; then you also don't get the organize imports issue.

I fixed the code assist import problem > 20070813
*** Bug 211880 has been marked as a duplicate of this bug. ***
