If you drag a package into an already populated hierarchy view, you get the 
NOT sign unless there is some empty space without and TreeItems.  IF there is 
a vertical scrollbar, you're out of luck.

If you drag a class on top of another class it is interpreted as some kind of 
refactoring operation, which would only make sense if you were changing the 
superclass. But here it's actually a "Move" refactor.

DND has been overloaded. The original function of DND was to cause the view 
to "focus on" the element being dropped. This is much more useful behavior 
than nesting a class inside another class.  Do other browsing views have this 
issue as well?

If you drag a package into an already populated hierarchy view, you get the 
NOT sign unless there is some empty space without and TreeItems.  IF there is 
a vertical scrollbar, you're out of luck.

If you drag a class on top of another class it is interpreted as some kind of 
refactoring operation, which would only make sense if you were changing the 
superclass. But here it's actually a "Move" refactor.

DND has been overloaded. The original function of DND was to cause the view 
to "focus on" the element being dropped. This is much more useful behavior 
than nesting a class inside another class.  Do other browsing views have this 
issue as well?
What version is that? Probably not M5, because things got worse. The empty space
in the tree doesn't seem to accept the drop anymore (WinXP). This must be a SWT
change.
For M5 I extended the drop range to be the full pagebook, allowing you to drop
on the method viewer header and the methods view. It would be nice to also be on
the view part toolbar, but this is managed by the view part so I can't register
my drop listener there.

You suggest to override the drop if you drop on an element. That seems wrong to
me; there's visual feedback of a drop to the element. To turn that in a drop on
the view is misleading. We also should be consistent on all views. 
But I agree that it would be nice if the tree would offer some more space for a
non-element drop.

Moving to SWT for comments
By empty space, I meant below the last treeitem, not to the right of the 
treeitem.

Am I correct in assuming that dragging one class on top of another is 
interpreted as "nest this class inside the other".  This is not a common 
operation. Changing the class hierarchy would be 10x more useful and intuitive 
inside the hierarchy view.  As far as being consistent, you could create 
feedback for the user which indicates that this is not a move operation.  For 
example, inserting a dummy TreeItem indented below class being targeted by the 
DND.

I don't have the methods pane visible, so dropping there won't help me any.

I'll open a bugzilla requesting the view tab itself support DND somehow.
The problem is the visual feedback that you get when drag on an element. The
element becomes selected. To do a view change input operation there is IMO
wrong, regardless how practical it is. Only target element sensitive operations
apply there.
I have to agree that for the hierarchy the normal reorg operations are not that
useful and even irritating. We could think of disabling them. Originally the
idea was that you could quickly implement new method by drag them from the
method view.
Dragging a type on another type should make the type a subclass of the other type.

Randy, add me as CC on the bug you file against SWT.
Yes, setting viewer input and highlighting the treeitem wouldn't make sense. 
You can only do one or the other.

I was going to open a workbench bug so that the IViewPart could be given a 
mechanism by which it could hook DropTargets to the TabFolder's TabItem.  I 
don't imagine SWT will change their Treeitem targeting (it's useful in some 
cases). In fact, I'm pretty sure you could workaround the issue already by 
using TreeItem#getBounds() after you've called Tree.getItem(Point).
>The empty space in the tree doesn't seem to accept the drop anymore (WinXP).
>This must be a SWT change.

Where is the code for your drop target?  The SWT DropTarget does not 
differentiate between where you are in the widget - you could be over empty 
space or over an item - it doesn't care.  You must have code that determines 
which item is under the cursor and makes a decision based on this. There have 
been changes to Tree in M5 to support multiple columns.  The method 
Tree.getItem(Point) should not have changed in behaviour but maybe it has 
accidentally.
I found the problem why dropping was not possible anymore on the space below the
tree. > 20050317

For the other blank areas on the right of the tree:
The code that decides which item is selected is in DropTarget.notifyListeners. 
DropTarget is not intended to be subclassed, so I can't modify the behaviour
there. Veronika, is that correct?

Don't subclass DropTarget.  The DragOver event is being sent even if the item 
is null.  In the case where event.item is null, in the 
DragOver/DragEnter/DragOperationChanged events the application can use the x 
and y coordiante of the event to determine what item it would prefer to drop 
on.  There is no need to subclass DropTarget and override notifyLIstener.
Like VI says, you can hit test the treeitems yourself in the drop listener.  
Also, you can control which feedback is used (SELECT or NONE), to avoid the 
item showing selection when the view itself is being targeted.
Randy, in JDT we prefer if the decision of reopening a bug is left to us. Just
add comments to the bug and we will reopen if your arguments are convincing. Thanks!
On the GEF team we prefer to mark a bug as fixed when we have addressed the 
problem described. I guess each team is different.
Not all bugs can be fixed in the way or extend that the person who filed the bug
suggests. It is our call what and how we fix something.

The type hierarchy and the call hierarchy now allow to drop a new input on the
right or left side of an item > 20050317
Thanks Randy and Veronica for your help!

