20041215
In the following code hover over 'addElement':
The hover shows 'Vector<E>.addElement(E)', but this is not very valuable. I
would  like to know what 'E' here is ('TestFailure')

-> Hover should show: 'Vector<TestFailure>.addElement(TestFailure)'

protected Vector<TestFailure> fErrors;
...
public synchronized void addError(Test test, Throwable t) {
     fErrors.addElement(new TestFailure(test, t));
}

20041215
In the following code hover over 'addElement':
The hover shows 'Vector<E>.addElement(E)', but this is not very valuable. I
would  like to know what 'E' here is ('TestFailure')

-> Hover should show: 'Vector<TestFailure>.addElement(TestFailure)'

protected Vector<TestFailure> fErrors;
...
public synchronized void addError(Test test, Throwable t) {
     fErrors.addElement(new TestFailure(test, t));
}
There are two ways to solve this

- editor uses AST for hovering not code resolve infrastructure
- JDT/Core adds support to this to code resolve as for searching for List<String>.
  

Moving to JDT/Text.

Note: transferred cc-list.


*** This bug has been marked as a duplicate of 75465 ***
I believe you are talking about the header of the javadoc hover, correct?

Not a dup, then.
What would you like to see in this situation:


protected Vector<? super TestFailure> fErrors;
protected Vector<? extends TestFailure> fWarnings;
...
public synchronized void addError(Test test, Throwable t) {
     fErrors.addElement(new TestFailure(test, t));
     TestFailure warning= fWarnings.get(0);
}

A) bounds:
 'Vector<? super TestFailure>.addElement(? extends TestFailure)'
 'E Vector<E extends TestFailure>.get(int index)'

B) erasure:
 'Vector<*>.addElement(TestFailure)'
 'TestFailure Vector<TestFailure>.get(int index)'

This is getting quite verbose...
hm. getting this info is not easy given the current infrastructure, which
operates only on a resolved java element and does not have any information about
the call site...
If available, the cache AST can be used.
For methods with generic type parameters, the type variables' bindings are now
printed in front of the method signature, e.g. for emptyMap() in ...

        Map<String, Integer> map= Collections.emptyMap();

..., the Javadoc hover reads:
        <String, Integer> Map<K, V> java.util.Collections.emptyMap() 
        
However, for method invocations on a parameterized target, there is no
information on the type variables' bindings. For add() and get() in ...

        ArrayList<Integer> al = new ArrayList<Integer>();
        al.add(al.get(0));

..., the Javadoc hover just says:
        E java.util.ArrayList.get(int index)

IMO, the binding should either be printed for both cases or for neither of them.
Maybe the hover should just print the resolved and then the declared version (if
they are not equal), i.e.:

        Map<String, Integer> java.util.Collections.emptyMap()
        Map<K, V> java.util.Collections.emptyMap()

        And here comes the real doc...

or (from comment 4):

        void java.util.Vector<TestFailure>.addElement(TestFailure obj)
        void java.util.Vector.addElement(E obj)
This has been fixed some time ago.
