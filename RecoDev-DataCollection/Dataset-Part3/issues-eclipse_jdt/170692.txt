Build ID:  I20060922-0010

Steps To Reproduce:
1. Run the APTDemo processor
2. Create a trivial class file annotated with DemoAnnotation(what="beer")
3. Save the file
4. Change beer to fish - do not save the file yet
5. Note that the problem fish is underline with a red squiggle and that the red cross problem marker in the left
margin is still red.
6. Compare this to jdt behaviour where problems are 
partially redacted before saving the file by removing the
red squiggle and changing the red cross to grey.


More information:
Problems generated from an APT based annotation processor do
not seem to be removed during editing as quickly as normal
JDT problems are. This difference in behaviour leads to
confusion for the users.

Build ID:  I20060922-0010

Steps To Reproduce:
1. Run the APTDemo processor
2. Create a trivial class file annotated with DemoAnnotation(what="beer")
3. Save the file
4. Change beer to fish - do not save the file yet
5. Note that the problem fish is underline with a red squiggle and that the red cross problem marker in the left
margin is still red.
6. Compare this to jdt behaviour where problems are 
partially redacted before saving the file by removing the
red squiggle and changing the red cross to grey.


More information:
Problems generated from an APT based annotation processor do
not seem to be removed during editing as quickly as normal
JDT problems are. This difference in behaviour leads to
confusion for the users.
This is also reproducible in 3.2.1.  It appears that we are not clearing problem markers on files when they are reconciled, only when they are built.
Lest this be mistaken for a regression:

If there is no problem, and then an error ("beer") is introduced, it will be red-squiggled.  If the error is then corrected, the red squiggle will disappear again.

However, if after introducing the error one saves and builds (and thus makes a problem appear in the Problems pane), then correcting the error does not make the red squiggle disappear.

The problem here is that JDT Core isn't removing problems that were reported during build originally and that reconcile then does not report. A couple scenarios should illustrate this:

Scenario 1, working correctly:

Build pass 1: APT reports problem X
Build pass 2: APT does not report problem X

Observed: The problem goes away in both the editor and the problems pane.

Scenario 2, which is not working correctly:

Build pass 1: APT reports problem X
Reconcile pass 1: APT does not report problem X

Observed: The problem remains in both the editor and the problems pane.
Expected: The problem should remain in the problems pane and be removed from the editor.

The latter behavior is incorrect. However, there are some processors that are actually depending on this behavior. Is it possible to make this switchable?

Scenario 2 sounds like a bug to me. I'm not sure having an option to force this bug is a good idea.
The reason that it might be interesting to have it switchable is that some annotation processors are slow to run, and therefore want to only run during build, not during reconcile.  

So the current (buggy) behavior is good for slow processors that don't do anything during reconcile, but it is bad for fast processors that want to be able to update the error status during reconcile.

It is not really obvious which kind of processor we should be optimizing for.  It is easy to say "slow processors are just poorly designed", but in fact we have found that some processors have to perform expensive cross-checks across multiple classes, such as making sure that a certain annotation is only present on one class within a given package; so it really is correct for them to only run at build time.

Another way of looking at this is that we are trying to find a way to let processors register as "build only" or "build and reconcile" and then have the error markers behave correctly in each case.
(In reply to comment #5)
> The reason that it might be interesting to have it switchable is that some
> annotation processors are slow to run, and therefore want to only run during
> build, not during reconcile.  
> 
> So the current (buggy) behavior is good for slow processors that don't do
> anything during reconcile, but it is bad for fast processors that want to be
> able to update the error status during reconcile.
> 
> It is not really obvious which kind of processor we should be optimizing for. 
> It is easy to say "slow processors are just poorly designed", but in fact we
> have found that some processors have to perform expensive cross-checks across
> multiple classes, such as making sure that a certain annotation is only present
> on one class within a given package; so it really is correct for them to only
> run at build time.
> 
> Another way of looking at this is that we are trying to find a way to let
> processors register as "build only" or "build and reconcile" and then have the
> error markers behave correctly in each case.
> 
I must be missing something, but can't slow processors just ignore the CompilationParticipant.reconcile(ReconcileContext) request if they don't want to run at reconcile time ?
It's JDT, not the participant, that clears the participant-contributed problem markers.  There's no way for a processor to tell JDT that "I didn't run in reconcile" versus "I ran during reconcile and all the problems have been fixed".  If it's "I didn't run", then markers should remain; if it's "problems have been fixed", then the markers should be cleared.  But right now there's no way for JDT to know which to do.
I think I understand now. Could a possible workaround be for the APT participant to store the problems of the processor when it reports them, and if the processor is not running during reconcile, report the same problems ?
We already do that within builds to handle files that get recompiled during rounding (when a new file is generated, it may fix compilation errors in an already-compiled file).  

There are a few reasons why we didn't explore doing this between reconcile and build.  Perhaps the reasons are not valid?

1. Assuming that a file has changed in order to cause a reconcile, the cached problems will no longer be in the correct position.

2. A file may be reconciled before it is built, e.g. when an editor is opened.

3. The set of all problems across all projects may be extremely large, and managing the lifecycle of these cached problems (e.g., removing problems from the cache if a project is deleted) is challenging.

Reasons #2 and #3 could both be addressed by reading the problems back from disk rather than trying to cache them in memory, although that might slow down reconciles a little.  I'm not sure how to address reason #1 without adding a lot of complexity, though.
Hi Walter, thanks for pointing me to this bugzilla.

I have post the following question in the JDT newsgroup, if anyone of you think that the fix for this bugzilla would noe help my scenario, please let me know.

"I have created my own AnnotationProcessor, QuickFixProcessor, MarkerResolutionGenerator.   In my AnnotationProcessor, I have some EclipseMessanger.printFixableError calls in it.  I found that the little light bulb (indicating quick fix available) only appears in the Java editor if the printFixableError is being called during the Phase.RECONCILE stage of the annotation processing.  I could not get it to appear if the errors are only reported during the Phase.BUILD phase.

I have designed the annotation processor reporting a subset of errors during Phase.BUILD stage because the calculations are expensive.  Is there a way for me support this?"

Sorry I didn't reply earlier Walter (I expected to talk to you on the JDT call).

What I'm not sure to understand is why problems are reported on the first reconcile, and not on subsequent reconciles. Is the first call to the reconcile participant always fast, and other calls are slow ?

I never said that explicitly, but at the JDT/Core level, we don't remove the previous reconcile problems. This is done at the JDT/Text level, but I believe this cannot be controlled.
(In reply to comment #11)
> What I'm not sure to understand is why problems are reported on the first
> reconcile, and not on subsequent reconciles. Is the first call to the reconcile
> participant always fast, and other calls are slow ?

The situation of interest is when problems are reported during a build, but not during reconcile.

The reason a processor would do that is to perform slow operations only during build, not during reconcile.


> I never said that explicitly, but at the JDT/Core level, we don't remove the
> previous reconcile problems. This is done at the JDT/Text level, but I believe
> this cannot be controlled.

Hmm.  I thought I'd seen code in IncrementalImageBuilder() or maybe AbstractImageBuilder that did this, but perhaps I am confused.  I'll take a look.
(In reply to comment #12)
> Hmm.  I thought I'd seen code in IncrementalImageBuilder() or maybe
> AbstractImageBuilder that did this

Which is silly, of course, because those don't have anything to do with reconcile.  Forget I said that :-)

Can this be fixed for 3.3.1 ?
Is comment 10 the same issue as comment 0 ?

My reading is that original problem is about not flushing reconciled problems (greying them out), where comment 10 looks like an issue with quickfix availability (light bulbs) for markers which did not get refreshed in reconcile.
Thinking of original problem, it seems like JDT/Text shouldn't only grey out JDT problems, but also the JDT managed marker types (each compiler participant may declare some). This would allow all APT markers to turn grey, instead of none today.  Now, if some APT markers where to remain red (since not refreshed during reconcile), these would also be greyed out. But would this be an acceptable behavior for 3.3.1 ? Then for 3.4, we provide new API for telling the difference between these ?

Need more info from Walter or Dani to understand the issue in comment 10.
Re: comment 10

Kevin - are you seeing quickfix being available in the problem view still ?
>Thinking of original problem, it seems like JDT/Text shouldn't only grey out
>JDT problems, but also the JDT managed marker types (each compiler participant
>may declare some).
Well, I already looked at that but the APT marker is not declared as sub-type of jdt.core.problem marker.

Also, can someone explain whether in the initial example from comment 0, APT takes part at reconcile or not? Is the error indeed gone when I change 'beer' to 'fish'?  I ask because gray means that the bug is FIXED and will go away when saving. Is that indeed the case here?
(In reply to comment #15)
> My reading is that original problem is about not flushing reconciled problems
> (greying them out), where comment 10 looks like an issue with quickfix
> availability (light bulbs) for markers which did not get refreshed in
> reconcile.

I haven't tried to reproduce the behavior Kevin describes in comment 10. My guess is that the quick-fix light bulb gets cleared every time (and therefore disappears if it's not refreshed during reconcile); the problem markers *don't* get cleared during reconcile, so they stick around even if the problem was fixed.  That is just a guess, because I have not traced the code that creates, displays, or clears the quick-fix annotations.

In each case, though, the behavior is making an assumption about the processor: either assuming that it will run on reconcile, or assuming that it won't.
(In reply to comment #18)
> >Thinking of original problem, it seems like JDT/Text shouldn't only grey out
> >JDT problems, but also the JDT managed marker types (each compiler participant
> >may declare some).
> Well, I already looked at that but the APT marker is not declared as sub-type
> of jdt.core.problem marker.
Sorry it is me that started the confusion. The sub-typing won't work indeed since the APT markers don't subtype the Java markers. Instead we could use the 'managed'  marker types. For example, APT declares managed markers as follow:

   <compilationParticipant
         class="org.eclipse.jdt.apt.core.internal.AptCompilationParticipant"
         id="APT"
         requiredSourceLevel="1.5">
      <managedMarker markerType="org.eclipse.jdt.apt.core.compile.problem"/>
   </compilationParticipant>

> Also, can someone explain whether in the initial example from comment 0, APT
> takes part at reconcile or not? Is the error indeed gone when I change 'beer'
> to 'fish'?  I ask because gray means that the bug is FIXED and will go away
> when saving. Is that indeed the case here?
> 
You are correct. When changing "beer" to "fish", the error should turn gray, and it should disappear on next build.


(In reply to comment #18)
> Well, I already looked at that but the APT marker is not declared as sub-type
> of jdt.core.problem marker.

It looks like it has been that way since the very first check-in of the plugin.xml.  Should we change it?  I think at this point there may be code that depends on it being that way, but I don't know.


> Also, can someone explain whether in the initial example from comment 0, APT
> takes part at reconcile or not? Is the error indeed gone when I change 'beer'
> to 'fish'?  I ask because gray means that the bug is FIXED and will go away
> when saving. Is that indeed the case here?

Yes, in this example the processor is running both in reconcile and in build, and changing 'beer' to 'fish' should have fixed the problem immediately.  The bug is that it is staying red in this case, not changing to gray.
I think we will likely need to postpone this until after 3.3.1. There are processors that are depending on the current behavior, and it doesn't seem like we can change this without also allowing non-reconciling processors to prevent their errors from being removed. This would require some extra information to be passed between Text and APT.

WRT comment #10, however, perhaps there is still something that can be done in JDT/UI to allow quickfix processors to be enabled on problems that were only reported in build and not reconcile?


Let me see if JDT Text can do something in the direction of what Jerome suggests in comment 20. I agree that changes in that area are dangerouns and we should have good arguments to do this. I still miss those. Can someone please explain why this is critical for 3.3.1?
Discussed with Dani. He will investigate the quickfix issue, and report back. He suggested that both problems may be fixed with changing the APT marker hierarchy. If it is an APT batch marker, then keep the same marker type as today; if it is an APT batch+reconcile marker, then APT should use another marker type, which would be a subtype of Java problems. This way JDT Text would handle correctly the reconcile cycle and quickfix availability.
APT would have to simply decide which flavor of APT marker to create based on the degree of awareness of their processors.

Both marker types should be declared as managed in the APT participant.

Dani to report back on his investigations; if unhappy we may have to split this bug in 2 separate issues.
Dani - Jess mentioned on Friday that he wouldn't want an "all gray" solution, since most processors are batch nowadays. So if APT was to generate only one flavour of markers (sub-java problems), then it would not meet expectation. 
Can some surfacing of generic quickfixes be made in editor, similar to your surfacing generic markers already. This generic quickfix support would simply simulate using the quickfix menu action in problem view (nothing more fancy).
Re: comment 25: this would only be a problem if the current marker type gets changed without adding a new one. Unfortunately whis would not fix comment 0 and comment 10 at once as there are indeed two problems:

1) Marker Not Removed/Grayed (see comment 0):
=============================================
The Java editor offers this feature for markers of type 'org.eclipse.idt.core' and its subtypes as we know their life-cycle. Since the APT maker type isn't declared as a subtype of 'org.eclipse.idt.core' this doesn't work. I see two possible fixes for that:
a) JDT APT introduces another marker type that subclasses 'org.eclipse.jdt.core.problem' and which is used for those processors that participate in reconcile. The current one will be used for those processors that do not participate in reconcile. This is need in order not to gray out makers for them while typing.

b) JDT Core introduces API that allows to tell whether a given marker type is affected by reconcile. This can either be a helper method or a new marker attribute.
Personally I prefer solution a) as it fits better into the current story and doesn't require new API.

2) Quick Fix Problem (see comment 10):
======================================
a) The markerResolution extension point is only used by JDT if the problem is not a 'org.eclipse.jdt.core' problem or a subtype of it, e.g. current APT problem. In code this means it is not an IJavaAnnotation. That's OK, but we falsely create an JavaMarkerAnnotation even though the (APT) marker isn't a 'org.eclipse.jdt.core' marker (or subtype of it). This is a bug we can easily fix for 3.3.1 and hence quick fix will work when clicking on the ruler or when pressing Ctrl+1. However, there is no quick fix icon visible in the vertical ruler (see b).

b) Up to now Platform Text does not support to show the Quick Fix icon in the ruler. This feature is only available for 'org.eclipse.idt.core' markers and its subtypes. Adding this for 3.3.1 is doable. I have a patch at hand for that.


NOTE: we should get a simple test case for comment 10 asap so that we are sure that we fix the intended problem.
Hi Daniel,

I'll see whether I can build a simple test case to illustrate the problem in comment 10.  If you have any patch you want me to try out, please let me know.

Regards,

Kelvin
Created attachment 77994
Test project with a batch processor and an incremental processor

This test project just gives an example of a batch annotation processor and an incremental annotation processor.

To play with those processors:
1. Import the project in your workspace (File > Import > General > Existing Projects, then select the attached archive)
2. Open X.java
3. Change the value of the 'number' attribute
4. Observe that:
- when doing a full build (ie. Project > Clean, then build), @GenerateBatchProblems creates the given number of problems
- when doing an incremental build, or when reconciling, @GenerateIncrementalProblems creates the given number of problems
Created attachment 78023
Demo plugin to show the behaviour

I have modified the demo APT plugin to illustrate problem I reported in comment 10.  To reproduce, please follow the following steps:

1. Add the demo plugin to Eclipse (you can self-host it if you want)
2. Start the workspace and create a new Java project
3. Make sure annotation processing is enabled for the Java project and "demo" is listed as one of the plugins containing annotation processors.
4. Add APTDemo.jar to the classpath of the project (available at http://www.eclipse.org/jdt/apt/APTDemo.jar)
5. Create a class with the following annotation:
   @demo.DemoAnnotation(what = "all")
6. You should see a light bulb in the Java editor offering a quick fix.
7. You can switch value of annotation attribute of "what" to "reconcile" (light bulb should still appear), or "build" (where the light bulb won't appear).
   ie.
   @demo.DemoAnnotation(what = "reconcile")
   or
   @demo.DemoAnnotation(what = "build")


Just to give some background information, in demo.DemoAnnotationProcessor, I have added the following lines:

Phase phase = ((EclipseAnnotationProcessorEnvironment) _env).getPhase();
if(((String)whatValue).equals("build") && phase==Phase.BUILD) {
  ((EclipseMessager)messager).printFixableError(
    annoValue.getPosition(),"But I don't like " + whatValue,
    "demo", "TEST_ERROR_BUILD");
} else if(((String)whatValue).equals("all")) {
  ((EclipseMessager)messager).printFixableError(
    annoValue.getPosition(), "But I don't like " + whatValue,
    "demo", "TEST_ERROR_ALL");	 
} else if(((String)whatValue).equals("reconcile") && phase==Phase.RECONCILE) {
  ((EclipseMessager)messager).printFixableError(
    annoValue.getPosition(), "But I don't like " + whatValue,
    "demo", "TEST_ERROR_RECONCILE");
} else {
  messager.printError(
    annoValue.getPosition(), "But I don't like " + whatValue);
}
Looked at test case from comment 29:
>@demo.DemoAnnotation(what = "all")
- I see the quick fix indication in the ruler
- clicking on the icon and Ctrl+1 show the quick fix

>"reconcile" (light
>bulb should still appear), or "build" (where the light bulb won't appear).
I see the opposite behavior. I would need more details to know why. I debugged your marker generator and the what I see seems to be correct.

NOTE:
1) For performance reasons your MarkerResolutionGenerator should also implement  IMarkerResolutionGenerator2.
2) To see the image and the hover text your marker resolution needs to implement IMarkerResolution2.
Created attachment 78055
Patch for 2) Quick Fix Problem (see comment 10)
Time out for 3.3.1. Is the fix needed for 3.4 or 3.3.2 ?
Our product needs this by 3.4 but, since significant progress appears to have been made over the past few days, would 3.3.2 be a reasonable target? The earlier we get this, the earlier we can test our quickfixes.
As these are two bugs I'm splitting them into two: this one about changes
during APT reconcile not reflected in the UI and bug 203040 about Quick Fix not
working for APT problems reported during build.

Kelvin, can you please comment on comment 30 and 32. Thanks.
Jess/Walter, can we expect solution 1.a) from comment 26 for 3.3.2 and 3.4 M2 ?
WRT #35, yes, I think we can implement a solution in 3.3.2. I'm not yet absolutely positive if we can make it for 3.4 M2 yet, as we need to see what the impact is to our tests.

Thanks for all the help with this bug!
Re implementation of solution 1.a from comment 26:

Processors can create files and problems.  We already support processors that do or don't want to create files during reconcile.  For problems, we will create an additional problem marker, a subtype of org.eclipse.jdt.core.problem.  Problems reported by processors which choose to process on both build and reconcile will use the new type.

This leaves the question of how to determine whether a processor wants to process on reconcile.  The issues are different on 3.3.2 versus 3.4 (because we don't want to add API or UI to 3.3.2).  There is some pre-existing structure already: reconcile-time processing can be enabled or disabled for all processors in a project through the settings GUI or API, and individual processors can use AptPreferenceConstants.RTTG_ENABLED_OPTION to specify they want to generate files on reconcile (disabled by default).  A related item is that processors can be set to run in a command-line-compatibility "batch" mode within a given project via the factory path GUI or API.  

We do not yet support any reconcile-time processing for Java 6 processors, and we will probably never support reconcile-time file generation for them.

I propose:

 - For both 3.3.2 and 3.4, add an AptPreferenceConstants flag that processors can return from getSupportedOptions() to indicate they do NOT want to run during reconcile.

 - For 3.4, additionally, add API and GUI parallel to that used for batch mode, to let users stipulate a processor should NOT run during reconcile within a particular project (i.e. factory path).

A processor will run in reconcile in 3.4, thus, if (APT enabled in proj settings) && (reconcile enabled in proj settings) && (!(reconcile disabled by processor flag) && !(reconcile disabled for processor in factory path)).  That is, we don't run unless everything says yes.

An alternative would be to use tri-state logic for the factory path, i.e., let the user override a processor flag to force a processor to run in reconcile.  That seems pointless and risky, not to mention a difficult GUI.

Does anyone object to this scheme?
Clarification: in 3.4, if a user simply adds a jar to their factory path, will that processor be run during reconcile by default?
(In reply to comment #38)
Yes, by default it will run in reconcile, as long as the processor doesn't report the "do not run in reconcile" flag from its getSupportedOptions() method and as long as processing during reconcile is enabled in the project settings.

Oh, I forgot one nuance: if possible, we should grey out the GUI "don't run in reconcile" checkbox for processors that have the flag set internally.  This would involve loading the processor, so it might be tricky, but I'll look into it; we'd like to have that ability in order to list the processor's supported annotations anyway.
Created attachment 80297
proposed patch for 3.3.2

Proposed patch for 3.3.2 permits processors to specify whether or not they want to run during reconcile, by adding "disableProcessingInEditor" to the list of strings they report in AnnotationProcessorFactory.supportedOptions().

When processors report errors, they use one of two problem types.  If the processor will not be run in reconcile (either because reconcile is disabled by the processor or because it's disabled project-wide), an APT-specific problem is used that is not a subtype of the JDT problem type.  JDT does not clear this problem during reconcile.  If the processor will be run in reconcile, then we use a problem that is a subtype of the JDT problem type, so it gets cleared (and perhaps re-set) during reconcile.

I've tested this with processor that do and don't set the option, with reconcile enabled and disabled at the project level, and it seems to work properly in all cases.

For 3.4, I will add the ability to control processor behavior in the factory path (and GUI).
Jess, please review for inclusion in 3.3.2.
+1 for 3.3.2.
Released for 3.3.2 and 3.4M3.
