This code results in an NPE:

interface Base { 
	Base get(int x);
}
class Main {
    <T> Base foo(Base b) { 
        return null; 
     }
    void bar(Base b) { }
    void testCase() {
        bar(foo((int p)->null));
     }
}

And the stack trace:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:393)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:162)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:162)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:128)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:741)

This code results in an NPE:

interface Base { 
	Base get(int x);
}
class Main {
    <T> Base foo(Base b) { 
        return null; 
     }
    void bar(Base b) { }
    void testCase() {
        bar(foo((int p)->null));
     }
}

And the stack trace:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:393)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:162)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:162)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:128)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:741)
Note that just removing the type parameter <T> makes the program compile and run.
Thanks, I'll take a look.
I don't see eventual resolution happening on the lambda at all. Stephan, thanks
for taking a look, this should be simple I think.
Disabled test available here, will need some massaging: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=f7c2ed5ecce3841921f761b0b104d350042f786e
Yep, that wasn't too hard, the old flag polyExpressionSeen simply missed the case of a non-poly invocation that still used inference -> inference still needs to get a chance to finish and update bindings.

Release via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=55b8138a08d89b11e13e7b2e4131608d674ff549
From: https://bugs.eclipse.org/bugs/show_bug.cgi?id=423429#c7:

package packDown;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class SorterNew {
	void sort() {
		Collections.sort(new ArrayList<Person>(),
				Comparator.comparing((Person p) -> p.getName()));
	}
}

class Person {
	public String getName() {
		return "p";
	}
}
----------------------------------------------------------------
Getting the following exception on editing the above code:

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:447)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:167)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:167)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:128)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:741)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:265)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:119)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:923)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:965)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:204
Same stack, same symptom, but different root cause.

In the case of comment 6 we didn't finish resolving, because we didnt' find the type variable instantiation, which in turned happened, because we mixed single and double-level type variables. What do I mean by that:

A generic method in a generic class has two sets for type variables. Hence a ParameterizedGenericMethodBinding is created as a wrapper for a ParameterizedMethodBinding as a wrapper for a MethodBinding.

When inference acts on the type variables of the middle PMB (receiver type is parameterized, but method type variables still need to be inferred) we create inference variables for these type variables.

Later, when we retrieve the solution we used method.original() on the PGMB to get to the type variables. Unfortunately, original() works recursively, so instead of getting to the middle PMB we get straight to the bottom MB.

Fixed by a new method MB.shallowOriginal().

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=c4203edb27100ace82d961d9cf1385c837279276
Encountered similar exception again:
--------------------------------------------
package bug;
interface I1 { int foo(String i); }
class Y {
	I1 i = (a) -> { 
		a.charAt(0);
	};
}
--------------------------------------------

Place caret at end of "String" and press Backspace to delete 'g'.
We get this exception:

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:123)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:52)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:485)
	at org.eclipse.jdt.internal.compiler.ast.FieldDeclaration.analyseCode(FieldDeclaration.java:91)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:703)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:265)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:122)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1211)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:693)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1187)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:813)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:548)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:541)
...
Noopur, please open a fresh defect. Thanks.
(In reply to Srikanth Sankaran from comment #9)
> Noopur, please open a fresh defect. Thanks.

https://bugs.eclipse.org/bugs/show_bug.cgi?id=429833
(In reply to Srikanth Sankaran from comment #10)
> (In reply to Srikanth Sankaran from comment #9)
> > Noopur, please open a fresh defect. Thanks.
> 
> https://bugs.eclipse.org/bugs/show_bug.cgi?id=429833

(this has a totally different root cause BTW)
