Version: 4.2.0
Build id: I20120321-0610

Consider the following snippet:

package a;

public class FinalTest {
	public final Number number = new Number() {
		
		@Override
		public final long longValue() {
			return 0;
		}
		
		@Override
		public int intValue() {
			return 0;
		}
		
		@Override
		public float floatValue() {
			return 0;
		}
		
		@Override
		public double doubleValue() {
			return 0;
		}
	};
	
	public Number number2 = new Number() {
		
		@Override
		public long longValue() {
			return 0;
		}
		
		@Override
		public int intValue() {
			return 0;
		}
		
		@Override
		public float floatValue() {
			return 0;
		}
		
		@Override
		public double doubleValue() {
			return 0;
		}
	};
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		System.out.println("foo");
	}

}

Trying to add a line (or other) breakpoint anywhere in the final inner type will result in a breakpoint being placed on line 27 (public Number number2 = new Number() {).

Version: 4.2.0
Build id: I20120321-0610

Consider the following snippet:

package a;

public class FinalTest {
	public final Number number = new Number() {
		
		@Override
		public final long longValue() {
			return 0;
		}
		
		@Override
		public int intValue() {
			return 0;
		}
		
		@Override
		public float floatValue() {
			return 0;
		}
		
		@Override
		public double doubleValue() {
			return 0;
		}
	};
	
	public Number number2 = new Number() {
		
		@Override
		public long longValue() {
			return 0;
		}
		
		@Override
		public int intValue() {
			return 0;
		}
		
		@Override
		public float floatValue() {
			return 0;
		}
		
		@Override
		public double doubleValue() {
			return 0;
		}
	};
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		System.out.println("foo");
	}

}

Trying to add a line (or other) breakpoint anywhere in the final inner type will result in a breakpoint being placed on line 27 (public Number number2 = new Number() {).
The fix for bug 344984 contained code to stop processing FieldDeclaration nodes if the modifiers included 'final'. This is wrong, we should always be visiting the RHS initializer (if there is one).
Here is a more condensed snippet that will also allow testing of initializers for FieldVariableDeclarations as well:

public class FinalBreakpointLocations {
    public final FinalBreakpointLocations ft1 = new FinalBreakpointLocations() {
    	public void method() {
    		System.out.println("ft1"); //bp here
    	};
    	public void method2() {
    		final FinalBreakpointLocations ftinner = new FinalBreakpointLocations() {
    	    	public void method() {
    	    		System.out.println("ftinner"); //bp here
    	    	};
    	    }; 
    	}
    }; 
}
pushed fix + regression tests to: http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=21f1b6e40defa6da9e5e9085560edcba83297d4f
*** Bug 333600 has been marked as a duplicate of this bug. ***
