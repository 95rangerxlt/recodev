I had the following code:

public class Shape {
	Rectangle fBounds;
	
	public int area() {
		int width= fBounds.getWidth();
		int height= fBounds.getHeight();
		return width*height;
		
	}
}

Since fBounds is accessed multiple times I wanted to move
the area method to Rectangle. The generated area method
in Rectangle is:

	public int area(Shape shape) {
		int width= getWidth();
		int height= getHeight();
		return width*height;
		
	}

Notice the generated parameter shape that isn't needed.

I had the following code:

public class Shape {
	Rectangle fBounds;
	
	public int area() {
		int width= fBounds.getWidth();
		int height= fBounds.getHeight();
		return width*height;
		
	}
}

Since fBounds is accessed multiple times I wanted to move
the area method to Rectangle. The generated area method
in Rectangle is:

	public int area(Shape shape) {
		int width= getWidth();
		int height= getHeight();
		return width*height;
		
	}

Notice the generated parameter shape that isn't needed.
I think you can leverage flow analysis to figure this out.
to be investigated
Created attachment 5720
Patch

The parameter "shape" was added as soon as the original method body contained a
an instance field access.

If the new receiver is a field, the parameter is not necessary if no other
field is accessed. The patch recognizes this situation.
Created attachment 5721
Test cases.

(Tests skip test15 and test16 because patch to bug #40120 adds these.)
released, thanks - it works nicely

please see bug 41468 for another problem i discovered while testing this
