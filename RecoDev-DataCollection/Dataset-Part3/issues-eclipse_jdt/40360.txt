class A {
	void f(B b) {
		System.out.println(b.getName());
	}
}

class B {
	String fName;
	public String getName() {
		return fName;
	}
}

- In A::f, try to inline method b.getName()
- The result should be System.out.println(b.fName),
  but it is only System.out.println(fName) .

class A {
	void f(B b) {
		System.out.println(b.getName());
	}
}

class B {
	String fName;
	public String getName() {
		return fName;
	}
}

- In A::f, try to inline method b.getName()
- The result should be System.out.println(b.fName),
  but it is only System.out.println(fName) .
The problem is that we replace the whole invocation in this case including the 
receiver. We should be smater in this case and should only exchange the call 
and should keep the receiver.

Another problem is that due to the fact the println is overloaded an 
unneccessary cast gets introduced. We should try to avoid this as well.
Fixed for M3.
