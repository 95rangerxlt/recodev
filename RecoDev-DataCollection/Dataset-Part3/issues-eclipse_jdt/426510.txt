(In reply to Jayaprakash Arthanareeswaran from comment #21)
> If you took this new code that create new annotations from the UI code, it
> may not be a bad idea to move that code to Core so both Core and UI could
> use that.

Yes, we should not duplicate nontrivial code. We should remove the old org.eclipse.jdt.internal.corext.dom.ASTNodeFactory#newAnnotation(..) and turn ImportRewrite#newAnnotation(..) into an API like this:

/**
 * Adds the necessary imports for the given annotation binding to the rewriter's record
 * and returns an {@link Annotation} that can be used in the code.
 * <p>
 * No imports are added for types that are already known. If an import for a type is recorded to be removed, this record is discarded instead.
 * </p>
 * <p>
 * The content of the compilation unit itself is actually not modified
 * in any way by this method; rather, the rewriter just records newly added imports.
 * </p>
 * @param binding the annotation to be added
 * @param ast the AST to create the returned annotation for
 * @param context an optional context that knows about types visible in the current scope or <code>null</code>
 * to use the default context (only using the available imports)
 * @return an annotation node. The returned annotation contains unqualified type names where
 * an import could be added or was already known. Type names are fully qualified if an import conflict prevented an import.
 * 
 * @since 3.9 BETA_JAVA8
 */
public Annotation addAnnotation(IAnnotationBinding annotation, AST ast, ImportRewriteContext context)

(In reply to Jayaprakash Arthanareeswaran from comment #21)
> If you took this new code that create new annotations from the UI code, it
> may not be a bad idea to move that code to Core so both Core and UI could
> use that.

Yes, we should not duplicate nontrivial code. We should remove the old org.eclipse.jdt.internal.corext.dom.ASTNodeFactory#newAnnotation(..) and turn ImportRewrite#newAnnotation(..) into an API like this:

/**
 * Adds the necessary imports for the given annotation binding to the rewriter's record
 * and returns an {@link Annotation} that can be used in the code.
 * <p>
 * No imports are added for types that are already known. If an import for a type is recorded to be removed, this record is discarded instead.
 * </p>
 * <p>
 * The content of the compilation unit itself is actually not modified
 * in any way by this method; rather, the rewriter just records newly added imports.
 * </p>
 * @param binding the annotation to be added
 * @param ast the AST to create the returned annotation for
 * @param context an optional context that knows about types visible in the current scope or <code>null</code>
 * to use the default context (only using the available imports)
 * @return an annotation node. The returned annotation contains unqualified type names where
 * an import could be added or was already known. Type names are fully qualified if an import conflict prevented an import.
 * 
 * @since 3.9 BETA_JAVA8
 */
public Annotation addAnnotation(IAnnotationBinding annotation, AST ast, ImportRewriteContext context)
To take care of the following issues as well:

package pack1;
public class X {
	public void foo004(@pack2.ClashMarker Object o2, A arg) {}
}

package pack1;
import java.lang.annotation.*;

public class A {}

	@Target (ElementType.TYPE_USE)
	@interface ClashMarker{
		int value();
		boolean value2() default false; 
	}

package pack2;
import java.lang.annotation.*;
@Target (ElementType.TYPE_USE)
public @interface ClashMarker {}


Move foo004 to A -> clash of ClashMarker with the type defined in A.java is not taken care and import happens causing a compilation error
(In reply to Manoj Palat from comment #1)
Same issue as in 420579 - issue existing from an old build - will be handled separately.
Created attachment 239468
Proposed Patch

new api is a wrapper over the existing code as mentioned in the description. Patch contains the wrapper and the test cases.
The "context == null ? ..." is not necessary, i.e. passing 'context' is enough. That makes the delegating method unnecessary.

Hint: The Change Method Signature refactoring makes it trivial to rename both newAnnotation...() methods to addAnnotation...() and to reorder the parameters.

Verified that the new API is a perfect replacement for the old ASTNodeFactory method.
Thanks for the comments Markus. Fix committed via:http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=78310b6881d29e4104dd5ac0bf79c342409c9931

Raised bug 427232 against ui for replacing existing internal functions by this api (ref comment 0).
