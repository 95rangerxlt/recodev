Eclipse compiler reports errors on the following program:

public class X {
		int a\u058f = 0; // Rejected 
		String a41\u08fc; // Rejected
		float a\u057f = 1; // Allowed
}

My guess is that these are new unicode characters introduced after unicode version 6.0.0, which is the latest we seem to support. Note there's been three versions since then, namely 6.1.0, 6.2.0 and 6.3.0.

At the moment, I have no idea what it takes to start supporting new ones. Will investigate.

Eclipse compiler reports errors on the following program:

public class X {
		int a\u058f = 0; // Rejected 
		String a41\u08fc; // Rejected
		float a\u057f = 1; // Allowed
}

My guess is that these are new unicode characters introduced after unicode version 6.0.0, which is the latest we seem to support. Note there's been three versions since then, namely 6.1.0, 6.2.0 and 6.3.0.

At the moment, I have no idea what it takes to start supporting new ones. Will investigate.
(In reply to Jayaprakash Arthanareeswaran from comment #0)
> My guess is that these are new unicode characters introduced after unicode
> version 6.0.0, which is the latest we seem to support. Note there's been
> three versions since then, namely 6.1.0, 6.2.0 and 6.3.0.

Looks like my guess was right. The characters in question weren't part of the chart 6.0, but found in 6.3.0.
(In reply to Jayaprakash Arthanareeswaran from comment #1)
> Looks like my guess was right. The characters in question weren't part of
> the chart 6.0, but found in 6.3.0.

I should correct that those characters were introduced in Unicode 6.1. From the JDK versions I have, I can't figure out what's the latest Java 8 wants to support.

Srikanth, what would be the right source to get this piece of information?
(In reply to Jayaprakash Arthanareeswaran from comment #2)

> I should correct that those characters were introduced in Unicode 6.1. From
> the JDK versions I have, I can't figure out what's the latest Java 8 wants
> to support.

I believe JDK8 will support 6.2
(In reply to Srikanth Sankaran from comment #3)

> I believe JDK8 will support 6.2

This project falls under JEP133. See https://www.ibm.com/developerworks/mydeveloperworks/groups/service/html/communityview?communityUuid=fa855c78-3991-4bac-8f2e-f7048b73b367
By private mail, Olivier offered to generate the resource files used by
the scanner to upgrade to the new encoding scheme. Reassigning the bug
to him. Thanks Olivier !

Jay, if you can dig up more code that should be accepted, share them here.
(In reply to Srikanth Sankaran from comment #3)
> I believe JDK8 will support 6.2
I think this needs to be clarified. The JEP 133 seems to state that if a newer version of the Unicode standard is released before JDK8 is, it should be supported.
6.3.0 is the latest available standard. So should this one be supported instead?

In the meantime, I'll work on generating the resource files for 6.2.0. It doesn't change much anyway. Once I can do it for one, it is trivial to rerun it for 6.3.0.
(In reply to Olivier Thomann from comment #6)

> In the meantime, I'll work on generating the resource files for 6.2.0. It
> doesn't change much anyway. Once I can do it for one, it is trivial to rerun
> it for 6.3.0.

Thanks, the JDK8 planning page only talks about 6.2: http://openjdk.java.net/projects/jdk8/milestones
Created attachment 239237
Example with more chars

Here's an example with more rejected unicode chars. This is not the complete list, but contains lot more codes.
(In reply to Jayaprakash Arthanareeswaran from comment #8)
> Created attachment 239237 [details]
> Example with more chars
> 
> Here's an example with more rejected unicode chars. This is not the complete
> list, but contains lot more codes.
With the changes I just sent you, I can successfully compile this code.
(In reply to Olivier Thomann from comment #9)
> With the changes I just sent you, I can successfully compile this code.

I have tested that it works too and all existing tests pass. I have released the patch on your behalf here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=768144d4a3d41ee7bf9dfd2621b7a9e45eb26f3e

Thanks a lot for chipping in.
(In reply to Jayaprakash Arthanareeswaran from comment #10)

> Thanks a lot for chipping in.

Let me also chime with in: Many thanks Olivier.
