Eclipse 3.0.1

In our application we provide code assist to our own Java editor. In order to be
consistent with the JDT Java editor we need to provide the same look and feel
for code assist (icons, ordering, display string, etc...).

Currently the only way we can get that to work is using the internal class
ResultCollector.

Since ResultCollector is basically an implementation of ICompletionRequestor,
would it be possible to make it API or at least provide the functionality to
people implementing code assist for Java-like editors?

Eclipse 3.0.1

In our application we provide code assist to our own Java editor. In order to be
consistent with the JDT Java editor we need to provide the same look and feel
for code assist (icons, ordering, display string, etc...).

Currently the only way we can get that to work is using the internal class
ResultCollector.

Since ResultCollector is basically an implementation of ICompletionRequestor,
would it be possible to make it API or at least provide the functionality to
people implementing code assist for Java-like editors?
I know I've brought this issue up before w/ the JDT folks, but I figured it
wouldn't hurt to say it again here =)

The WTP JSP Editor has the exact same issue.

In order to remove internal dependency we've pretty much had to copy what JDT
ResultCollector does, and that is still not 100% the same. Plus we'll have to
maintain whatever changes JDT makes in their collector to preserve consistancy.

I believe we would need these to be public:
 - ResultCollector
 - JavaCompletionProposal
 - JavaCompletionProposalComparator

or something equivalent, so we could perform a code completion on a CU, then
"tweak" the resulting JavaCompletionProposals (offset, text, etc...), then sort
them the same way as JDT does.


We could offer the result collector and the proposal comparator as API but would
change the methods in ResultCollector to return/use IJavaCompletionProposal
instead of JavaCompletionProposal. We are very reluctant in making the
JavaCompletionProposal and all the classes on which it depends API.

OK?

See also bug 84905.
That is fine with me.
*** Bug 86465 has been marked as a duplicate of this bug. ***
ResultCollector is a factory that creates UI ICompletionProposals out of
CompletionProposals received from core. I am not sure whether subclassing it is
the right way to get what you want. 

Comment 0 and comment 1 mainly talk about the UI elements: you want to be able
to create proposals that look the same as the JDT proposals. This includes the
display string and image.

You also want to get some behavioral stuff: the additional info text (javadoc)
and the context information pop-up (the parameter list hover). 

Wouldn't it be better to provide you with a factory for the above which both you
and ResultCollector could use to construct the UI side of the proposals?

You could then create a CompletionRequestor yourself and run it against a CU,
while asking the UI-Element factory questions like:

CompletionProposalUIFactory {
   String getDisplayName(CompletionProposal proposal);
   ImageDescriptor getImageDescriptor(CompletionProposal proposal);
   IContextInformation createContextInfo(CompletionProposal proposal);
}

What do you think?
(In reply to comment #5)
> What do you think?

As long as it allows me to:

- "easily" get the same completions as a java editor would get at the same src 
location
- filter out unwanted completions efficiently (today the resultcollector has 
some flags to avoid processing whole classes of matches)

then its fine by me ,)

I agree with Max (comment #6).
(In reply to comment #7)
> I agree with Max (comment #6).

another requirement is
that i should be able to do this on any string, not only in
a java editor. (this i can do now, so i expect its trivial to fullfill - just 
making sure its remembered ,)


(In reply to comment #6)
> - "easily" get the same completions as a java editor would get at the same src 
> location

I believe as long as you don't want to modify incoming proposals, you are better
off with JavaCompletionProcessor. It collects all the proposals from
ResultCollector, but also mixes in templates.

> - filter out unwanted completions efficiently (today the resultcollector has 
> some flags to avoid processing whole classes of matches)

CompletionRequestor already allows to filter completions by the different
completion types.

> another requirement is
> that i should be able to do this on any string, not only in
> a java editor. (this i can do now, so i expect its trivial to fullfill - just 
> making sure its remembered ,)

You can always create a CU and run code completion on it.

For me this means: we will make a ResultCollector API that is specified to be
soft-final (not to be subclassed outside the framework). The only API surfaced
will be the one already available from core's CompletionRequestor plus a 

IJavaCompletionProposal[] getResults()

method.

What I don't understand is why bug 86465 was a problem for you. Can you explain
your use case where you needed to subclass ResultCollector? Do you sometimes
create your own (modified) proposals? The above requirements only talked about
getting the JDT proposals, and filtering them, but not modifying or creating.

Comments?


(In reply to comment #9)
> (In reply to comment #6)
> > - "easily" get the same completions as a java editor would get at the same 
src 
> > location
> 
> I believe as long as you don't want to modify incoming proposals, you are 
better
> off with JavaCompletionProcessor. It collects all the proposals from
> ResultCollector, but also mixes in templates.

I remember I looked into JavaCompletionProcessor and there was some limitations 
that made me not use it. I think maybe that it is kinda tied into certain 
viewers etc. but cant remember.

Anyhow, in my case java templates is not relevant as i'm more interested in 
packages, classes, interfaces, methods and fields.

And yes I both want to add and transform some of these completions.

> > - filter out unwanted completions efficiently (today the resultcollector has 
> > some flags to avoid processing whole classes of matches)
> 
> CompletionRequestor already allows to filter completions by the different
> completion types.

ok.

> > another requirement is
> > that i should be able to do this on any string, not only in
> > a java editor. (this i can do now, so i expect its trivial to fullfill - 
just 
> > making sure its remembered ,)
> 
> You can always create a CU and run code completion on it.

good.
 
> For me this means: we will make a ResultCollector API that is specified to be
> soft-final (not to be subclassed outside the framework). The only API surfaced
> will be the one already available from core's CompletionRequestor plus a 
> 
> IJavaCompletionProposal[] getResults()
> 
> method.
> 
> What I don't understand is why bug 86465 was a problem for you. Can you 
explain
> your use case where you needed to subclass ResultCollector? Do you sometimes
> create your own (modified) proposals? The above requirements only talked about
> getting the JDT proposals, and filtering them, but not modifying or creating.

Yes I want to do some modifying. 

e.g. if I get a method completion called getSomething() I would like to 
transform that into a "property completion" that has a different icon and just 
includes the string "Something" (or "something" dependent on users choice)
(is there a better way to do this ?)

I also create additonal completions that i add to the list.

Makes sense ?

I would like to be able to mix the templates in but also add/modify proposals.
(In reply to comment #10) 
 
We've got pretty much the same requirements as Max. 
Created attachment 19085
ResultCollector.diff

Proposed API for Java completion proposals.

ResultCollector.java - 
  - instantiate to get the java proposals
  - configure to filter
  - subclass
    - to get fine-grained filter controls
    - to supply your own IJavaCompletionProposals.

ProposalLabelProvider.java - Utility to create labels and images for completion
proposals.

JavaCompletionProposalComparator - no relevant changes compared to internal
version
Please let me know here what you think about the proposed API and what you feel
is missing. 

Philip, in comment 1 you wrote that you would like to tweak the existing
proposals ("offset, text, etc...") - can you be more precise? This is not
supported currently as we don't have any API java completion proposals. However,
you are always free to supply your own implementation. The label provider should
help you to get the looks ok.
In our JSP editor, we create a "virtual" Java document from Java regions of the
JSP, and save the mapping info so we can easily translate between the JSP
coordinates and the Java coordinates.

The Java proposals we get back from a CU code complete then need their
coordinates updated from Java world back to JSP world.

Also we'd like control over the text because the name of the class of our
"virtual" Java document is actually a mangled version of the path to the JSP
file. It needs to be massaged a bit before being pretty for display.

That said, it sounds like we can use our own proposal implementation (as we
currently are) and use ProposalLabelProvider to make them look consistant w/ the
proposals in the Java Editor, so I think the proposed solution is acceptable.


Looks good.
(In reply to comment #15)

just want to note that we do the exact same thing as Philip about transforming 
the offsets etc. to match the actual buffer they need to be inserted into.

I'll try look at the diff, but from the descriptions it sounds good.

I haven't looked at the code but it looks good from the description.
released > 20050324
This change breaks the debug usage of the old ResultCollector. Yes we were 
using internal classes...we have logged bug 89013
The API names of the new classes have again changed. However, the old classes
are kept as deprecated until all parties have managed to catch up.

Renames:

ResultCollector                    > CompletionProposalCollector
ProposalLabelProvider              > CompletionProposalLabelProvider
JavaCompletionProposalComparator   > CompletionProposalComparator

In order not to break the test candidate build we will wait with the deletion.

It will be deleted in I20050331-0010.

(In reply to comment #17)

ok i tried to use this with M6 - my initial comments are:

still need to assume the concrete types are JavaCompletionProposal to be able to 
adjust the replacement offset. I would propose you added a protected 
getReplacementOffset as you have with getLength so I by simple subclassing could 
adjust the replacement offset without assuming the concrete type nor override 
each and every createXXXProposal.

before we had the .reset() method to be able to reuse the same collector, is 
that not relevant anymore or ?

otherwise it seem to work.

I have not tried the completionproposalprovider yet, but it seems it will be 
usefull for me when providing my custom completions for types.


(In reply to comment #23)
> still need to assume the concrete types are JavaCompletionProposal to be able to 
> adjust the replacement offset. I would propose you added a protected 
> getReplacementOffset as you have with getLength so I by simple subclassing could 
> adjust the replacement offset without assuming the concrete type nor override 
> each and every createXXXProposal.

As said in comment 14, we don't plan to open up JavaCompletionProposal, mainly
because we need the freedom to move stuff around there for performance
optimizations. However, given the API included in M6, it should not be too hard
to come up with your own proposal implementation, copying JavaCompletionProposal
if needed. Allowing to arbitrarily change the replacement offset without knowing
how that will affect the proposal does not sound like a good idea.

It may be possible to open up parts of JavaCompletionProposal that would allow
you to adjust its offset, but this will certainly not happen for 3.1

> before we had the .reset() method to be able to reuse the same collector, is 
> that not relevant anymore

There is no big initialization penalty when instantiating a collector, so it did
not justify adding lifecycle to its API. You can still use one single collector
multiple times as argument to ICompilationUnit.reconcile. 

> > adjust the replacement offset without assuming the concrete type nor 
override 
> > each and every createXXXProposal.
> 
> As said in comment 14, we don't plan to open up JavaCompletionProposal, mainly
> because we need the freedom to move stuff around there for performance
> optimizations. 

That is why i suggest that you add an getReplacementOffset() in the Collector 
and not just open up JavaCompletionProposal.

> However, given the API included in M6, it should not be too hard
> to come up with your own proposal implementation, copying 
JavaCompletionProposal
> if needed. Allowing to arbitrarily change the replacement offset without 
knowing
> how that will affect the proposal does not sound like a good idea.

It works for *all* type and field completions, but i see your argument
for having a private API.

But as it is now I would then need to reimplement all the createXXX() in 
Collector where if it had an getReplacementOffset() like it has getLength() then
its much easier to override and maintain.

> It may be possible to open up parts of JavaCompletionProposal that would allow
> you to adjust its offset, but this will certainly not happen for 3.1

Dont need to open up the proposal, just make extending Collector much easier.
 
> not justify adding lifecycle to its API. You can still use one single 
collector
> multiple times as argument to ICompilationUnit.reconcile. 

ok - thank you.


(In reply to comment #25)
> That is why i suggest that you add an getReplacementOffset() in the Collector 
> and not just open up JavaCompletionProposal.

I do see your point - I guess you would simply want to specify a shiftOffset
that all received completion offsets are relative to. Guess it does make sense
for many applications of a public Collector.

Would you file an enhancement request (won't happen for 3.1 because of the API
freeze, but anyway).
done - added 84998
Max, I think you mean bug 90435.
(In reply to comment #28)
> Max, I think you mean bug 90435.

whoops - of course ,)
Using the new API more and just noticed that almost all interesting methods are 
either private or protected final.

This is kinda annoying since it then require us to override with a mix of 
accept() and createJavaCompletionProposal() to adjust things (like filtering out 
certain package/class names from the completions).

If the methods were protected it would be much easier to handle these overrides 
without needing to look *inside* the logic of the Collector.

I know you are heading for an API freeze but just wanted to provide a heads up 
on it.
