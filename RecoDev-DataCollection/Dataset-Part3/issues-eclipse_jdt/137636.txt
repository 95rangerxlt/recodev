1) To repro this problem, check out org.eclipse.jdt.apt.tests. 
2) edit org.eclipse.jdt.apt.tests.annotations.generic.GenericFactory
   a) change the type of the setProcessor method from Object to AbstractGenericProcessor and save
3) Open org.eclipse.jdt.apt.tests.MirrorDeclarationTests
   a) Run As "JUnit Plugin Test"

I apologize for the convoluted repro. Nothing simpler seemed to fail. In both cases, everything builds fine. It seems like there is some interaction between the VM's verifier and the classloader where the classloader does not see the types from the parent plugins.

The call to setProcessor() (on line 233 of MirrorDeclarationTests) if passed null will cause the exception to not happen. Given that there is no difference in the ConstantPool of the class file, it seems the resolution of "AnnotationProcessor" is happening due to bytecode verification while ensuring that the argument is assignable to the formal parameter type.

The test fails immediately with the following stacktrace:
Exception in thread "WorkbenchTestable" org.eclipse.swt.SWTException: Failed to execute runnable (java.lang.NoClassDefFoundError: com/sun/mirror/apt/AnnotationProcessor)
	at org.eclipse.swt.SWT.error(SWT.java:3374)
	at org.eclipse.swt.SWT.error(SWT.java:3297)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:178)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:28)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:3761)
	at org.eclipse.ui.internal.testing.WorkbenchTestable.runTest(WorkbenchTestable.java:109)
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.runTests(UITestApplication.java:103)
	at org.eclipse.ui.internal.testing.WorkbenchTestable$1.run(WorkbenchTestable.java:68)
	at java.lang.Thread.run(Thread.java:595)
Caused by: java.lang.NoClassDefFoundError: com/sun/mirror/apt/AnnotationProcessor
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:620)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.defineClass(DefaultClassLoader.java:160)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass(ClasspathManager.java:491)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl(ClasspathManager.java:461)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl(ClasspathManager.java:420)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(ClasspathManager.java:403)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(DefaultClassLoader.java:188)
	at org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass(BundleLoader.java:339)
	at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:391)
	at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:352)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2365)
	at java.lang.Class.getMethod0(Class.java:2611)
	at java.lang.Class.getMethod(Class.java:1579)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.getTest(RemoteTestRunner.java:399)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:448)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:347)
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:57)
	at org.eclipse.pde.internal.junit.runtime.UITestApplication$1.run(UITestApplication.java:105)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:123)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3323)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2969)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1914)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1878)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:419)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)
	at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:95)
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.run(UITestApplication.java:45)
	at org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:78)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:92)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:68)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:376)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.eclipse.core.launcher.Main.invokeFramework(Main.java:336)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:280)
	at org.eclipse.core.launcher.Main.run(Main.java:977)
	at org.eclipse.core.launcher.Main.main(Main.java:952)

1) To repro this problem, check out org.eclipse.jdt.apt.tests. 
2) edit org.eclipse.jdt.apt.tests.annotations.generic.GenericFactory
   a) change the type of the setProcessor method from Object to AbstractGenericProcessor and save
3) Open org.eclipse.jdt.apt.tests.MirrorDeclarationTests
   a) Run As "JUnit Plugin Test"

I apologize for the convoluted repro. Nothing simpler seemed to fail. In both cases, everything builds fine. It seems like there is some interaction between the VM's verifier and the classloader where the classloader does not see the types from the parent plugins.

The call to setProcessor() (on line 233 of MirrorDeclarationTests) if passed null will cause the exception to not happen. Given that there is no difference in the ConstantPool of the class file, it seems the resolution of "AnnotationProcessor" is happening due to bytecode verification while ensuring that the argument is assignable to the formal parameter type.

The test fails immediately with the following stacktrace:
Exception in thread "WorkbenchTestable" org.eclipse.swt.SWTException: Failed to execute runnable (java.lang.NoClassDefFoundError: com/sun/mirror/apt/AnnotationProcessor)
	at org.eclipse.swt.SWT.error(SWT.java:3374)
	at org.eclipse.swt.SWT.error(SWT.java:3297)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:178)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:28)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:3761)
	at org.eclipse.ui.internal.testing.WorkbenchTestable.runTest(WorkbenchTestable.java:109)
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.runTests(UITestApplication.java:103)
	at org.eclipse.ui.internal.testing.WorkbenchTestable$1.run(WorkbenchTestable.java:68)
	at java.lang.Thread.run(Thread.java:595)
Caused by: java.lang.NoClassDefFoundError: com/sun/mirror/apt/AnnotationProcessor
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:620)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.defineClass(DefaultClassLoader.java:160)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass(ClasspathManager.java:491)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl(ClasspathManager.java:461)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl(ClasspathManager.java:420)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(ClasspathManager.java:403)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(DefaultClassLoader.java:188)
	at org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass(BundleLoader.java:339)
	at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:391)
	at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:352)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2365)
	at java.lang.Class.getMethod0(Class.java:2611)
	at java.lang.Class.getMethod(Class.java:1579)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.getTest(RemoteTestRunner.java:399)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:448)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:347)
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:57)
	at org.eclipse.pde.internal.junit.runtime.UITestApplication$1.run(UITestApplication.java:105)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:123)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3323)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2969)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1914)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1878)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:419)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)
	at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:95)
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.run(UITestApplication.java:45)
	at org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:78)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:92)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:68)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:376)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.eclipse.core.launcher.Main.invokeFramework(Main.java:336)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:280)
	at org.eclipse.core.launcher.Main.run(Main.java:977)
	at org.eclipse.core.launcher.Main.main(Main.java:952)
this feels like one of the indirect reference bugs where either a) the underlying classlib is doing some funky classloader tricks and doing it poorly or b) that your plugin actually does have a dependency on some class in a lib that is not listed as a direct dependency (eg., some super class of one of your classes or static value, ...).  During the verification of your class, this other class is needed and your classloader is asked to get it.  Unless you can see it directly, you can't load it.  Everything compiles ok because at compile time you are able to see the classes available on the transitive closure of your prerequisite bundles.

The trick here would be how to get access to the com.sun.mirror.apt package.  that is, who will export that.  I wonder if this is available on all Java 5 JREs (e.g., IBM).  If you can get someone to export it and get your bundle to import it, then you should be happy.

Of course, I could be completely out to lunch...
com/sun/mirror/apt/
What VM (vender/version) are you running with?
I'm running the Sun VM version 1.5.0_06. 

The class "com.sun.mirror.apt.AnnotationProcessor" is exported by the apt plugin. It is checked in as source. The test plugin depends on the apt plugin directly.

So I don't think there's anything funky going on. Plus if you look at the test plugin there are dozens of references to this exact class. It is only this one that is causing a problem.
Created attachment 39061
log for workspace

I was able to reproduce using the Sun 1.5.0 VM.  It looks like the org.eclipse.jdt.apt.core is failing to start because of a ClassCircularityError.  I find it odd that the org.eclipse.jdt.apt.core bundle includes com.sun packages.  It seems like this is causing the errors.  Does this bundle start under normal conditions? or does it always get the ClassCircularityErrors?
It is definitely odd that we include com.sun classes. They are a part of tools.jar Sun open-sourced these classes specifically at our request. 

The bundle definitely starts under normal conditions. For example, just run the tests as they exist in CVS. They will make extensive use of the com.sun classes. 

I don't think they could be causing a circularity error. Everything in the com.sun .mirror packages only refer other types in that package or types in rt.jar.
That stacktrace is very strange. ClassCircularityError is thrown when there is circular inheritance(eg, A extends B & B extends A). This is only possible if something strange happens during build. It is especially strange since the interface in question, AnnotationProcessor extends nothing.

The problem is you create executable extensions during during the activation of org.eclipse.jdt.apt.core.  This can potentially cause ClassCircularityErrors, see bug 5875 comment 19 for details.

Basically a bundle is asking org.eclipse.jdt.apt.core to load com/sun/mirror/apt/AnnotationProcessor but it is not activated yet.  So it gets asked to activate.  While it is activating it creates executable extensions which force the com/sun/mirror/apt/AnnotationProcessor to attempt to be loaded from the org.eclipse.jdt.apt.core again (when it is currently in the middle of loading it).  This causes the circularity error to occur.
Thanks so much for your help. That was it. We fixed it in our plugin.
Fixed to switch to lazy-loading of APT factories.
