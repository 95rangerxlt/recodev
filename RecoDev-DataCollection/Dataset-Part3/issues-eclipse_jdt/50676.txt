In certain cases, the refactoring aborts with an "internal error while creating 
a change object". The error log reports an Out of memory exception with the 
following trace:

java.lang.reflect.InvocationTargetException
at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:283)
at org.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2.run
(RefactoringWizardDialog2.java:271)
at org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.createChange
(RefactoringWizard.java:377)
at 
org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.computeUserInputSucces
sorPage(RefactoringWizard.java:297)
at 
org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.computeUserInputSucces
sorPage(RefactoringWizard.java:293)
at org.eclipse.jdt.internal.ui.refactoring.UserInputWizardPage.getNextPage
(UserInputWizardPage.java:79)
at 
org.eclipse.jdt.internal.ui.refactoring.UseSupertypeWizard$UseSupertypeInputPage
.getNextPage(UseSupertypeWizard.java:139)
at 
org.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2.previewPressed
(RefactoringWizardDialog2.java:418)
at org.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2.access$3
(RefactoringWizardDialog2.java:416)
at org.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2
$1.widgetSelected(RefactoringWizardDialog2.java:547)
at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:89)
at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:847)
at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2311)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1992)
at org.eclipse.jface.window.Window.runEventLoop(Window.java:586)
at org.eclipse.jface.window.Window.open(Window.java:566)
at org.eclipse.jdt.internal.ui.refactoring.actions.RefactoringStarter.activate
(RefactoringStarter.java:56)
at org.eclipse.jdt.ui.actions.UseSupertypeAction.startRefactoring
(UseSupertypeAction.java:182)
at org.eclipse.jdt.ui.actions.UseSupertypeAction.run(UseSupertypeAction.java:96)
at org.eclipse.jdt.ui.actions.SelectionDispatchAction.dispatchRun
(SelectionDispatchAction.java:212)
at org.eclipse.jdt.ui.actions.SelectionDispatchAction.run
(SelectionDispatchAction.java:188)
at org.eclipse.jface.action.Action.runWithEvent(Action.java:842)
at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:509)
at org.eclipse.jface.action.ActionContributionItem.access$2
(ActionContributionItem.java:461)
at org.eclipse.jface.action.ActionContributionItem$5.handleEvent
(ActionContributionItem.java:408)
at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:847)
at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2311)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1992)
at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1506)
at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1482)
at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:246)
at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:139)
at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:47)
at org.eclipse.core.internal.runtime.PlatformActivator$1.run
(PlatformActivator.java:226)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:85)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:324)
at org.eclipse.core.launcher.Main.basicRun(Main.java:279)
at org.eclipse.core.launcher.Main.run(Main.java:742)
at org.eclipse.core.launcher.Main.main(Main.java:581)
Caused by: java.lang.OutOfMemoryError

To reproduce this error, try extracting (in the same package) a complete 
interface for artofillusion.math.Vec3 in the project

http://sourceforge.net/projects/aoi/

and then, as a second refactoring, to use the interface instead of the class 
where possible.

Apparently, the error occurs rather frequently (so I have been told).

Session Details:

java.version=1.4.1_03
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=de_DE
Command-line arguments: -os win32 -ws win32 -arch x86

-- Friedrich

In certain cases, the refactoring aborts with an "internal error while creating 
a change object". The error log reports an Out of memory exception with the 
following trace:

java.lang.reflect.InvocationTargetException
at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:283)
at org.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2.run
(RefactoringWizardDialog2.java:271)
at org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.createChange
(RefactoringWizard.java:377)
at 
org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.computeUserInputSucces
sorPage(RefactoringWizard.java:297)
at 
org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.computeUserInputSucces
sorPage(RefactoringWizard.java:293)
at org.eclipse.jdt.internal.ui.refactoring.UserInputWizardPage.getNextPage
(UserInputWizardPage.java:79)
at 
org.eclipse.jdt.internal.ui.refactoring.UseSupertypeWizard$UseSupertypeInputPage
.getNextPage(UseSupertypeWizard.java:139)
at 
org.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2.previewPressed
(RefactoringWizardDialog2.java:418)
at org.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2.access$3
(RefactoringWizardDialog2.java:416)
at org.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2
$1.widgetSelected(RefactoringWizardDialog2.java:547)
at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:89)
at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:847)
at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2311)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1992)
at org.eclipse.jface.window.Window.runEventLoop(Window.java:586)
at org.eclipse.jface.window.Window.open(Window.java:566)
at org.eclipse.jdt.internal.ui.refactoring.actions.RefactoringStarter.activate
(RefactoringStarter.java:56)
at org.eclipse.jdt.ui.actions.UseSupertypeAction.startRefactoring
(UseSupertypeAction.java:182)
at org.eclipse.jdt.ui.actions.UseSupertypeAction.run(UseSupertypeAction.java:96)
at org.eclipse.jdt.ui.actions.SelectionDispatchAction.dispatchRun
(SelectionDispatchAction.java:212)
at org.eclipse.jdt.ui.actions.SelectionDispatchAction.run
(SelectionDispatchAction.java:188)
at org.eclipse.jface.action.Action.runWithEvent(Action.java:842)
at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:509)
at org.eclipse.jface.action.ActionContributionItem.access$2
(ActionContributionItem.java:461)
at org.eclipse.jface.action.ActionContributionItem$5.handleEvent
(ActionContributionItem.java:408)
at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:847)
at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2311)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1992)
at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1506)
at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1482)
at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:246)
at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:139)
at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:47)
at org.eclipse.core.internal.runtime.PlatformActivator$1.run
(PlatformActivator.java:226)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:85)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:324)
at org.eclipse.core.launcher.Main.basicRun(Main.java:279)
at org.eclipse.core.launcher.Main.run(Main.java:742)
at org.eclipse.core.launcher.Main.main(Main.java:581)
Caused by: java.lang.OutOfMemoryError

To reproduce this error, try extracting (in the same package) a complete 
interface for artofillusion.math.Vec3 in the project

http://sourceforge.net/projects/aoi/

and then, as a second refactoring, to use the interface instead of the class 
where possible.

Apparently, the error occurs rather frequently (so I have been told).

Session Details:

java.version=1.4.1_03
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=de_DE
Command-line arguments: -os win32 -ws win32 -arch x86

-- Friedrich
which eclipse build?
Version: 3.0.0
Build id: 200312182000
thank you Friedrich
some work has been done in that area _very_ recently
should be in build 20040127 once it's available later today

Frank, FYI - we could try this scenario
Friedrich, another small question: what heap setting are you using ? For 
larger workspace we recommend -Xms30M -Xmx200M.
Dirk,

we tried it with 800M and 1200M -- same result. Couldn't you reproduce the 
error?

-- Friedrich
Dirk, Frank,
just a heads up: please be advised that artofillusion is GPL.
Should not make a difference but, like i said, a heads up.

Friedrich,

I downloaded AoI and imported it into an Eclipse project, so that I
can try things out. I am currently getting build errors because
package javax.media is missing, so I guess I'm missing a jar file. 
Any suggestion where I can find that?

  -Frank
Frank, 

try http://java.sun.com/products/java-media/jmf/2.1.1/download.html. 

The "cross-platform Java" JARs (jmf-2_1_1e-alljava.zip) worked fine for me.

-- Friedrich
Concerning the memory problem, one of my students (Philip Mayer) found out:

The problems occurred with no particular heap setting as well as with the
following settings (on a machine with 1 GB physical RAM):

-Xms400M -Xmx800M

as well as

-Xms800M -Xmx1200M

and 

-XX:+AggressiveHeap

Using the task manager of Windows XP, I verified that the specified maximum
memory (800 resp. 1200 and, in case of AggressiveHeap, 600) was indeed
allocated by the Java VM.

Friedrich,

I have been working on some performance improvements, and I can now process 
your example in a small (default) heap, though it still takes a few minutes to 
process it.

Unfortunately, the example is not processed entirely correctly---a type error
occurs after applying "Use Supertype". This may be the same bug as #50658,
which I am currently working on. Once I have this worked out, I will need to
wait for Dirk to check in some other changes that he is working on. So, 
hopefully we'll have a fix in for you sometime next week.

  -Frank
Friedrich, Dirk,

I did some more investigation. The problem with AoI that I ran into after
eliminating the OutofMemoryError is not the same as bug #50658 (which I have
a fix for now). I opened a new bug (#51039) for the problem when applying 
"Extract Interface" to AoI. 

  -Frank
I ran into another bug triggered by AoI (see Bug 51053) and came up with a 
fix for that.

A fix for this bug is ready now. I'm waiting for Dirk to check in some other
changes, and will submit a patch once that is done.

  -Frank
Created attachment 7689
performance enhancements & bug fixes
Created attachment 7690
additional & fixed tests
Hello Adam, Dirk, Friedrich,

I'm have just attached 2 patches that contain several performance enhancements
and bug fixes:
 1. use caching to avoid the creation of duplicate type constraints
 2. new filtering mechanism for creating much fewer constraints
 3. adapted Extract Interface, Use Supertype, Generalize Type refactorings
    to use the new filtering mechanism
 4. bug fixes for bugs #50658 (failing type constraint tests), #47027
(uncontinuous progress in GT), #46993 (performance problems in GT), #51039
(error in EI), and #51053 (another error in EI
 5. added 2 new tests to Extract Interface

Note: since we're now avoiding the generation of duplicate constraints, I needed
to make slight changes to the TypeConstraintTests. This is because
ConstraintVariables like "field.x" are now shared with ConstraintVariables "x".
In other words, the textual representation of some constraints mentioned in the
TypeConstraintstests has changed. This is the reason that some of the type
constraints tests were failing after the last update.

I created the patch by downloading the 1/29 integration build, and retrieving
the following projects from CVS HEAD:
  - JDT UI
  - JDT Core
  - org.eclipse.ui
  - org.eclipse.ui.editors
  - jface.text
  - org.eclipse.ui.workbench.texteditor

Let me know if you have any questions.

  -Frank 

Frank,

have the patches been included in the latest Stream Integration Build?

Thanks

-- Friedrich
Not yet, Friedrich

I will have a quick look at them and check them in (hopefully tomorrow).
Expect them in the next integration build.

OK, checked in

btw, in our corext packages, do we need references to:
org.eclipse.jdt.internal.ui.preferences.JavaPreferencesSettings;
org.eclipse.text.edits.MultiTextEdit;
org.eclipse.text.edits.TextEditGroup;

i touched a few trivial things: made a few fields private, added some generic
annotations (wow! we use Map<ConstraintVariable, Map<ConstraintVariable,
Map<ConstraintOperator, SimpleTypeConstraint>>> )

all 4 type-constraint based test suites run fine


Thanks, Adam.

>i touched a few trivial things: made a few fields private, added some generic
>annotations (wow! we use Map<ConstraintVariable, Map<ConstraintVariable,
>Map<ConstraintOperator, SimpleTypeConstraint>>> )

Yes, I know. I was just too lazy to type in all that type stuff.

Friedrich, I suggest that you try your example again with the next
integration build that is released. Let me know if you run into
any problems.

  -Frank
Imports to the text edits are ok since the package is headless. The 
preferences page should be looked at (but we will never move the refactoring 
to core anyway)
Version: 3.0.0
Build id: 200402050800

I seem to be running into the very same problem (using standard heap settings 
as well as -Xms30M -Xmx200M) on the AoI example. In fact, the only difference I 
noted is that it now takes considerably longer until the error occurs (and 
blocks my system).

-- Friedrich
Friedrich,

The fix is probably not yet in the I20040205 integration build that you
used. Adam's message in which he told us that he checked in the changes 
was sent at 13:17 yesterday, which was probably soon after he checked in
the patch. The time stamp on the build you used is 08:00.

I'm currently snowed in at home, and downloading Eclipse takes a long
time, so I cannot confirm this right away. Adam: can you check if my
hypothesis is correct?

  -Frank

  -Frank

Dirk,

I don't understand your comment. Are you sure that it refers to this bug?

  -Frank
yes, i don't think it made it to 20040205

Dirk's comment 20 referred to my comment 80 (first part, about imports)
that is, 'my comment 18'
no cure so far -- am I doing it wrong?

-- Friedrich
Friedrich,

Can you confirm that you using the 0210 integration build?  I will try your
example with this build later today.

  -Frank
Frank,

I downloaded and installed eclipse-SDK-I20040210-win32.zip yesterday, although 
I did not bother to clear all directories prior to installation (should I do 
so?). But I rebuilt the project ...

-- Friedrich
Friedrich,

If you don't mind, could you please install that build in a clean directory,
import your project, and try the refactoring again? I want to make sure that
I can replicate your exact situation.

  -Frank
Version: 3.0.0
Build id: 200402100800

here is what I did.

- installed Eclipse in a blank directory
- installed AoI in a blang directory (rooted AoIsrc16)
- installed JMF-2.1.1e as a subdirectory to AoIsrc16
- started Eclipse command line with eclipse -Xms30M -Xmx200M
+ Eclipse reports two Plugin errors:
Plug-in org.eclipse.team.cvs.ui was unable to load class
Plug-in org.eclipse.team.cvs.ui was unable to load class 
- had Eclipse create the project from AoIsrc16
+ Eclipse reports 300 out 411 problems, no errors.
- created total I/F of math.Vec3, called IVec3, in same package
- started refactoring
+ following stack trace
java.lang.reflect.InvocationTargetException
at org.eclipse.jface.operation.ModalContext.runInCurrentThread
(ModalContext.java:315)
at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:252)
at org.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2.run
(RefactoringWizardDialog2.java:271)
at 
org.eclipse.jdt.internal.ui.refactoring.PerformRefactoringUtil.performRefactorin
g(PerformRefactoringUtil.java:35)
at org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.performFinish
(RefactoringWizard.java:410)
at org.eclipse.jdt.internal.ui.refactoring.UserInputWizardPage.performFinish
(UserInputWizardPage.java:118)
at 
org.eclipse.jdt.internal.ui.refactoring.UseSupertypeWizard$UseSupertypeInputPage
.performFinish(UseSupertypeWizard.java:169)
at org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.performFinish
(RefactoringWizard.java:473)
at org.eclipse.jdt.internal.ui.refactoring.RefactoringWizardDialog2.okPressed
(RefactoringWizardDialog2.java:395)
at org.eclipse.jface.dialogs.Dialog.buttonPressed(Dialog.java:263)
at org.eclipse.jface.dialogs.Dialog$1.widgetSelected(Dialog.java:430)
at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:89)
at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:833)
at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2348)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2029)
at org.eclipse.jface.window.Window.runEventLoop(Window.java:586)
at org.eclipse.jface.window.Window.open(Window.java:566)
at org.eclipse.jdt.internal.ui.refactoring.actions.RefactoringStarter.activate
(RefactoringStarter.java:57)
at org.eclipse.jdt.ui.actions.UseSupertypeAction.startRefactoring
(UseSupertypeAction.java:182)
at org.eclipse.jdt.ui.actions.UseSupertypeAction.run
(UseSupertypeAction.java:152)
at org.eclipse.jdt.ui.actions.SelectionDispatchAction.dispatchRun
(SelectionDispatchAction.java:216)
at org.eclipse.jdt.ui.actions.SelectionDispatchAction.run
(SelectionDispatchAction.java:188)
at org.eclipse.jface.action.Action.runWithEvent(Action.java:881)
at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:536)
at org.eclipse.jface.action.ActionContributionItem.access$2
(ActionContributionItem.java:488)
at org.eclipse.jface.action.ActionContributionItem$5.handleEvent
(ActionContributionItem.java:420)
at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:833)
at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2348)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2029)
at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1550)
at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1526)
at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:265)
at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:139)
at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:47)
at org.eclipse.core.internal.runtime.PlatformActivator$1.run
(PlatformActivator.java:245)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:104)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:324)
at org.eclipse.core.launcher.Main.basicRun(Main.java:279)
at org.eclipse.core.launcher.Main.run(Main.java:742)
at org.eclipse.core.launcher.Main.main(Main.java:581)
Caused by: java.lang.OutOfMemoryError

-- Friedrich
Hi Friedrich,

I repeated your instructions and you are right that the refactoring still needs
a lot of memory. However, on my machine, I *can* succesfully apply the 
refactoring if I start Eclipse from the command line with options:
    eclipse -vmargs -Xmx500M
although it takes several minutes to process. Can you try if this works for
you?

What is strange is that in this build the refactoring seems to need more 
memory than in the build that I used when creating the patch. I don't think
Adam's minor changes should have had any effect on efficiency. Perhaps some 
other Eclipse JDT component has become more memory-intensive. If I have some
time later in the week, I will investigate further, but I'm afraid that I
won't have any quick answers to performance bottlenecks.

Thanks very much for your patience with Eclipse, and for going through the
trouble of helping us track down problems. My group at IBM has a vested 
interest in making the analysis engine perform better because we plan to use 
the same infrastructure for new generics-related refactorings that we're 
currently working on. We'll use AoI as a performance stress test.

regards,

  -Frank


 



Frank,

I can confirm that. Eclipse still reports two errors on startup, but they 
appear to remain without consequences. So, should I always start Eclipse with 
eclipse -vmargs -Xmx500M?

We will now continue to (automatically) test the refactoring; a short 
description of what we are trying to do with it (in German) and a paper setting 
the background are attached.

-- Friedrich
Hi Friedrich,

I think that the error messages you are getting on startup are unrelated to
the Extract Interface refactoring. They may go away at the next integration
build. If they don't, I suggest you open another separate bug for this issue.

>So, should I always start Eclipse with eclipse -vmargs -Xmx500M?

Yes, I would recommend doing this if you're going to use analysis-intensive 
refactorings such as Extract Interface and Use Supertype on large applications
such as AoI. 

Given that the OutOfMemoryError no longer occurs, I suggest that we close this
bug. OK?

  -Frank
Frank,

was it ever a bug, or just a lack of resources (and fixing it a matter of 
tuning)? Anyway, go ahead and close it. I'll get back to you should new 
problems arise.

-- Friedrich
Friedrich,

The problem you reported was a case of lack of resources. However, when I
fixed that problem, I encountered 2 real bugs that I also fixed (we weren't 
always computing correct answers in the presence of the ? : operator, which is
widely used in AOI).

I will ask Dirk to close this bug now.

  -Frank



Closing bug on Franks request.
