The following code should not be allowed, but ECJ compiles it:

class C1 {}
class C2 {}

interface I<P1 extends C1, P2 extends P1> {
    P2 foo(P1 p1);
}

public class Main  {
	    public static void main(String argv[]) {
	    	I<?, ?> i = (C1 c1) -> { return new C2(); };
	        Object c2 = i.foo(null);
	    }
}

Note that C1 and C2 have no relationship and hence C2 can't be returned for P2 (which effectively extends C1). As you would expect, this throws up "java.lang.VerifyError: Bad return type" when the program is run.

The following code should not be allowed, but ECJ compiles it:

class C1 {}
class C2 {}

interface I<P1 extends C1, P2 extends P1> {
    P2 foo(P1 p1);
}

public class Main  {
	    public static void main(String argv[]) {
	    	I<?, ?> i = (C1 c1) -> { return new C2(); };
	        Object c2 = i.foo(null);
	    }
}

Note that C1 and C2 have no relationship and hence C2 can't be returned for P2 (which effectively extends C1). As you would expect, this throws up "java.lang.VerifyError: Bad return type" when the program is run.
(Removed by droy 2014-01-09 as requested by the project lead)
Some bug in 18.5.3 Functional Interface Parameterization Inference ? Stephan,
Thanks for taking a look.
(In reply to Srikanth Sankaran from comment #2)
> Some bug in 18.5.3 Functional Interface Parameterization Inference ? Stephan,
> Thanks for taking a look.

Right, in 0.7.0 Functional Interface Parameterization still allowed wildcards to survive inference (unless this was silently intended to be covered by requiring wellformedness). This has been fixed in 0.9.0.
Test & fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=f000b81f70edf0fb40319f8edb7c5d0c8cfe94b6
