Build Identifier: 

I'm not sure what is the point of Arrays.equals() since it can fail to work properly for a number of cases, including three-dimensional arrays, as demonstrated in this example:

import java.util.Arrays;
public class Test {
  public static void main(String[] args) {
    int[][][] a = new int[][][] {{null}};
    int[][][] b = new int[][][] {{null}};
    System.out.println(Arrays.equals(a, b)); // false
    System.out.println(Arrays.deepEquals(a, b)); // true
  }
}

I believe Eclipse-generated equals() method should use Arrays.deepEquals() as it seems to be doing its job properly.

Reproducible: Always

Build Identifier: 

I'm not sure what is the point of Arrays.equals() since it can fail to work properly for a number of cases, including three-dimensional arrays, as demonstrated in this example:

import java.util.Arrays;
public class Test {
  public static void main(String[] args) {
    int[][][] a = new int[][][] {{null}};
    int[][][] b = new int[][][] {{null}};
    System.out.println(Arrays.equals(a, b)); // false
    System.out.println(Arrays.deepEquals(a, b)); // true
  }
}

I believe Eclipse-generated equals() method should use Arrays.deepEquals() as it seems to be doing its job properly.

Reproducible: Always
Move to JDT/UI.
Note that deepEquals should only be used for a project that is >= 1.5.
Created attachment 160486
Proposed fix

The patch is untested.
I quickly tried and it seems to work fine.
*** Bug 355773 has been marked as a duplicate of this bug. ***
Raksha, please review the patch and release it along with a test if OK.
Committed with test. 
commit	8bddf00407bfda5dcb448394c7dfd59664ed5281
*** Bug 385109 has been marked as a duplicate of this bug. ***
