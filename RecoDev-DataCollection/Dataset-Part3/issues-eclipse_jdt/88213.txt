Currently the Code assist has two sorting options: Sort Alphabetically / Context
Intuit

TheContext Intuit tries to intuit the type of variable/method the developer
wants (IE Constructor after a new).

However the code assist also presents method stubs. Sometimes these are inserted
automatically without developer interaction, other that CTRL-Space.

Could more detailed preferences be developed for code assist:
- sort not only by intuit / alpbabetical, but also user created, that is user
created could be presented before other types.
- add choice of the type of "stuff" to include, such as turning off method stubs

Currently the Code assist has two sorting options: Sort Alphabetically / Context
Intuit

TheContext Intuit tries to intuit the type of variable/method the developer
wants (IE Constructor after a new).

However the code assist also presents method stubs. Sometimes these are inserted
automatically without developer interaction, other that CTRL-Space.

Could more detailed preferences be developed for code assist:
- sort not only by intuit / alpbabetical, but also user created, that is user
created could be presented before other types.
- add choice of the type of "stuff" to include, such as turning off method stubs
+1 The current behavior (stubs for made-up method names at the top) is truly
annoying!
I see two things reported here:
- a bug: the relevance for stubs is too high
- a feature request: allow to configure content of code assist (==> bug 69295)

I think for 3.1 we should at least change the order. Here's a small example that
shows the problem:

1. open a CU
2. start declaring a field of type HashMap:
2.1 put caret between two methods
2.2 type hashm
2.3 type Ctrl+Space
==>
  hashm() void - Method stub
  HashMap - java.util

I think we all agree that the 80% case is adding HashMap and not the stub.

See also bug 69295 for another complaint about stub proposals.
The relevance computed inside CompletionEngine for method stubs is very low.
The only less relevant proposals are qualified types with an access restriction
and a case insensitive prefix match.
The only proposals with the same relevance are  qualifed types with a case
insensitive prefix match (like the hashmap test case of comment 2)

I can reduce to 0 the computed relevance for stubs  but stubs are always at the
top of the list because ResultCollector add 100 to the computed relevance for stubs.

Move to JDT/Text for comments
true, the culprit is ResultCollector.
Another annoying one is that StringBuffer shows up before String if you type
stri and code assist:

StringBuffer
StringIndexOutOfBoundsException
String
...

I'm not using StringBuffers anywhere in the code, and I don't know that I've
ever declared a StringIndexOutOfBoundsException.

I'm using Eclipse 3.2M2 Linux GTK.
(In reply to comment #5)
> Another annoying one is that StringBuffer shows up before String if you type
> stri and code assist:

Different issue - see bug 110596.
- special proposals (new method stubs and overrides) are never autoinserted any more (comment 0)
- new method stubs are sorted after other proposals (comment 3)
- an extension point exists that allows other sort orders to be contributed (bug 119603)

I believe the issues reported here have all been fixed. Feel free to reopen if you disagree.
