The generalize type refactoring is not applicable to formal generic type 
parameters

The generalize type refactoring is not applicable to formal generic type 
parameters
Frank, we want to be done with the generic support for M4.
Frank, as discussed please take a look for M5.
I reproduced the problem by selecting the declaration of "t" in the
following program:

public class Test<T> {
  public void foo(){
  	T t;
  }
}

I have a fix for this bug and will create a patch with fixes for this and
several other bugs before the end of this week.

  -Frank
Created attachment 17527
fixes for bugs 72331, 72332, 83190, 66119
Created attachment 17529
additional unit tests (patch against refactoring tests)

this patch for the refactoring.tests project requires patch 17527
Created attachment 17556
fixes for bugs 72331, 72332, 83190, 66119, 66500

patch against I2005-0125 integration build. Includes a fix for bug 66500
Created attachment 17557
additional unit tests (now also for bug 66500) patch against refactoring tests

patch against refactoring tests
Hi Dirk,

Please have a look at these patches and let me know by monday morning as
we discussed.  The TargetSourceRangeComputer works fine.

regards,

  -Frank
Hi Frank,

a first comment to the user interface: the new user interface shows possible
types more than onces compared to the old user interface where a possible super
type only showed up once (see attached screen shots). The user interface should
be corrected to show types only once.
Created attachment 17575
The old UI when generalizing a variable of type ArrayList
Created attachment 17576
The new user interface when generalizing ArrayList
Hi Dirk,

I see you point (more than once :-)  This will be easy to fix, and
I'll send you another patch tomorrow.

In the meantime, let me know if you have any comments about the *code*.
As I mentioned last week, I will need your comments tomorrow---otherwise
I won't be able to do something about them for several weeks.

regards,
  -Frank

PS: I will be attending EclipseCon. Looking forward to seeing you there.
The example below used to propose the raw type "Comparable", but now it does not
find a valid supertype any more. In 5.0 projects, the dialog should have a
checkbox to enable generalization to raw types.

public class Try {
	void m(Interface i) {
		Comparable c= i.getName();
	}
}

interface Interface {
	String getName(); // generalize "String"
}
Frank, here my comments:

ChangeTypeRefactoring

please remove deprecations to RefactoringSearchEngine.search

ChangeTypeRefactoring#addAllChangesFor

why is it necessary to create a AST with bindings here. We don't do any analysis
so an AST without bindings should be enough. Furthermore RefactoringASTParser
should be used here.

ChangeTypeRefactoring#determineSelection

if node == null then the statement above will cause an NPE.


ChangeTypeRefactoring#isSubTypeOf

Implementation looks suboptimal. We shouldn't create a temporary set each time
the method is called.

ChangeTypeLabelProvider

we should use the SourceActionLabelProvider here. This one will be mantained and
removes the indirection to the Java element. 

Additionally who should not use getName or getQualifiedName to present type
bindings in the user interface. None of these values are meant to be presented
in the UI and may cause problems with generic and parameterized types.
... and here some more comments:

Little tweaks:

- ChangeTypeRefactoring#fObject has a wrong javadoc

- ChangeTypeRefactoring#getStrictSuperTypes(..) and #getAllSuperTypes(..) have
their javadocs interchanged

Somewhat bigger changes:

- I'd recommend to use CompilationUnitRewrite, which deals with all rewrite- and
import-related stuff (and removes unused imports):
1.) Call getImportRewrite().addImport(ITypeBinding, AST) to get a new Type node
to use.
2.) Call getImportRemover().registerAddedImports(Type) with this type.
3.) Use the new Type node e.g. in ASTRewrite#replace(..).
4.) Call getImportRemover().registerRemovedNode(..) with the replaced node.
=> The CompilationUnitRewrite will then remove all unused imports.

- I'm not 100% sure, but I think your usage of
ASTRewrite#setTargetSourceRangeComputer(..) does not work when there are
multiple type nodes to update. AFAICS, you set a new SourceRangeComputer in
every call to updateType(..), which overwrites the ones from previous calls.
Regarding Markus comment. A source range computer needs only to be set once for
a rewriter.
In response to Markus' question:
  - regarding your example, the correct solution is to suggest 
    Comparable<String>, which is what I have implemented
  - I consider the checkbox for including/excluding raw types an enhancement,
    and will defer that until later.
 
Created attachment 17593
updated patch

This patch takes care of all problems report by Dirk/Markus, except:
  1 suboptimal implementation of ChangeTypeRefactoring.isSubTypeOf()
  2 adopt SourceActionLabelProvider
  3 adopt CompilationUnitRewrite
because I basically ran out of time, and won't have time to work on
further improvements in the next 4-6 weeks. I suggest that we
proceed as follows:
  - incorporate this patch and close bugs 72331, 72332, 83190, 66119, 66500
  - open a new enhancement request or bug that covers issues 1-3 above.

-Frank
Created attachment 17594
associated tests

Added one more test case for the problem reported by Markus.
Frank,

I changed the code to use the source action label provide and opened bug reports
for the twop remaining issues.

Marking as fixed.
