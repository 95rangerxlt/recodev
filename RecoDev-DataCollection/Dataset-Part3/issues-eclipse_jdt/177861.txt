org.eclipse.jdt.apt.core specifies:
 org.apache.ant;bundle-version="[1.6.5,1.6.6)"

We are hopefully moving to Ant 1.7.0 for Europa pending IP approval.

org.eclipse.jdt.apt.core specifies:
 org.apache.ant;bundle-version="[1.6.5,1.6.6)"

We are hopefully moving to Ant 1.7.0 for Europa pending IP approval.
Plan is to wait until this change takes place, then test with the new ant version and update the bundle requirement.  At this point we know of no reason to expect it will fail.
Created attachment 64035
Proposed fix

This would handle ant.jar the same way it is done in JDT/Core.
This would prevent the kind of failures we got with last nightly build.
(In reply to comment #2)
I don't think that's the right fix. You could also get version independence by just dropping the bundle-version constraint in the manifest.

The jars.extra.classpath in o.e.jdt.core is a hack to allow compiling the antadapter source folder into jdtCompilerAdapter.jar (which is shipped inside the JDT/Core plug-in, but is NOT on the plug-in's classpath).

In contrast, org.eclipse.jdt.apt.core has just a normal dependency on org.apache.ant and e.g. offers the Ant task JdtApt as a normal API. Therefore, I think you cannot remove org.apache.ant from o.e.jdt.apt.core's plug-in dependencies.

The underlying problem is the (IMHO) wrong versioning scheme for bundled external libraries. I know that we have been advised to use the library's version as plug-in version (bug 152588), but this example show again, that this decision fails in practice when clients assume that plug-ins are versioned according to the Eclipse versioning rules.
For now we will stick with [1.6.5,1.8).  (Thanks to Jerome for making this change.)
