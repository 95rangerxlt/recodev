Build ID: I20080617-2000

Steps To Reproduce:
Hey,
 
I have a question about the 
org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget#initializeState() method. In this method, there is a piece of following code: 
    VirtualMachine vm = getVM();
    if (vm != null) {
        try {
             String name = vm.name();
             fSupportsDisableGC = !name.equals("Classic VM"); //$NON-NLS-1$
        } catch (RuntimeException e) {
            internalError(e);
        }
 
I don¡¯t understand why fSupportsDisableGC is set as true if the name of vm is not ¡°Classic VM¡±? We are developing 
a plug-in which have another vm implemented in J2ME which does not support GC. When doing debugging, our vm talks to eclipse vm through socket. I found in this code, the SupportsDisableGC is set as true for our vm, and later on when eclipse debugger asks our vm to disable GC, our vm returns code 99 (not supported). This caused some exception during debugging. I can not provide any steps to reproduce this. :-)
 
Thanks.
 


More information:

Build ID: I20080617-2000

Steps To Reproduce:
Hey,
 
I have a question about the 
org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget#initializeState() method. In this method, there is a piece of following code: 
    VirtualMachine vm = getVM();
    if (vm != null) {
        try {
             String name = vm.name();
             fSupportsDisableGC = !name.equals("Classic VM"); //$NON-NLS-1$
        } catch (RuntimeException e) {
            internalError(e);
        }
 
I don¡¯t understand why fSupportsDisableGC is set as true if the name of vm is not ¡°Classic VM¡±? We are developing 
a plug-in which have another vm implemented in J2ME which does not support GC. When doing debugging, our vm talks to eclipse vm through socket. I found in this code, the SupportsDisableGC is set as true for our vm, and later on when eclipse debugger asks our vm to disable GC, our vm returns code 99 (not supported). This caused some exception during debugging. I can not provide any steps to reproduce this. :-)
 
Thanks.
 


More information:
The reason for this code is bug 33452.
We should probably handle this more gracefully based on the "99" (not implemented) error code. We could catch this result on our first request and disable the feature in the VM for the duration of the debug session. Since there is no "supportsGCDisable()" method on the VirtualMachine, there is no way to tell in advance whether or not the feature is supported.
I've released the fix to HEAD. We'll need someone with a VM that does not support selective GC to verify the fix works for them. I don't have access to such a VM.

Raymond, can you verify? (You'll need to wait for M2, or take the latest code from HEAD).
Created attachment 146900
patch
