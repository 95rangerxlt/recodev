given the following code:
protected Foo myMethod() {
    // ....
    return someExpression;
}
I would like to press some "Quick Assist" short-cut like Ctrl+1, to get an 
option for "Return via new variable" or similar.

The refactored code would look like this:
protected Foo myMethod() {
    // ....
    Foo foo = someExpression;
    return foo;
}
The the variable name would be suggested, but immediately editable (like other 
code assist templates).

I know the benefit is trivial, but I'm getting a lot use from "Split variable 
declaration" and Quick Assist in general, and a few times now presed Ctrl-1 
expecting this feature to be present.

given the following code:
protected Foo myMethod() {
    // ....
    return someExpression;
}
I would like to press some "Quick Assist" short-cut like Ctrl+1, to get an 
option for "Return via new variable" or similar.

The refactored code would look like this:
protected Foo myMethod() {
    // ....
    Foo foo = someExpression;
    return foo;
}
The the variable name would be suggested, but immediately editable (like other 
code assist templates).

I know the benefit is trivial, but I'm getting a lot use from "Split variable 
declaration" and Quick Assist in general, and a few times now presed Ctrl-1 
expecting this feature to be present.
What you request is available through the 'extract new local variable'
refactoring (Alt+Shift+L per default). However, this does not enter linked mode
as you request.

Moving to jdt-ui for comments as this is where quick assist and refactoring live.
The refactorin is also available via quick assist. Martin, what is missing in
the refactoring so that quick assist could enter linked mode here ?
the extract local refactoring doensn't use the ast rewrite, so locations are not
easely trackable.
(In reply to comment #1)
> What you request is available through the 'extract new local variable'
> refactoring (Alt+Shift+L per default). However, this does not enter linked 
mode
> as you request.
> Moving to jdt-ui for comments as this is where quick assist and refactoring 
live.

It was not critical (to me) whether the refactoring entered 'linked mode'.  The 
most important behaviour is provided by 'Extract Local Variable' (Alt+Shift+L) 
as you suggest.  I don't know how I've gone this long without knowing about 
that feature.  That solves my problem.

It totally makes sense to highlight the expression and then 'Extract Local 
Variable', but if you are making any changes in this area, I would still 
suggest that the exact same behaviour be also available by clicking on the 
return keyword, and then selecting 'Return via new local variable' from some 
context menu or shortcut.  Just a suggestion.
*** Bug 133469 has been marked as a duplicate of this bug. ***
*** Bug 151982 has been marked as a duplicate of this bug. ***
The Extract Local Variable QuickAssist could also be enhanced to replace all occurrences of the selected expression when started with Ctrl+Enter (like quick fixes that can fix multiple occurrences of a problem at once).
linked mode added for extract local quick assist for M3 > 20061129

still to be done: linked mode for extract constant
*** Bug 174625 has been marked as a duplicate of this bug. ***
