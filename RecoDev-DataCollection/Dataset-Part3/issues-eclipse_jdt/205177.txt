HEAD as of 20071002_1138

public class A {
	int        a= 1;
	int        b= 2;
	int        c= 3;
	int        d= 4;
}

- append '//' to line that declares b
=> c is also formatted. Expected: only line b formatted

HEAD as of 20071002_1138

public class A {
	int        a= 1;
	int        b= 2;
	int        c= 3;
	int        d= 4;
}

- append '//' to line that declares b
=> c is also formatted. Expected: only line b formatted
Created attachment 79549
test case

I think the problem here is, that we use JavaTokenComparator to calculate the diff. Instead we should use DocEquivalenceComparator, it is specialized to find only the changed lines. It is simpler and faster. It is also used by quick diff. Unfortunately this is all internal, even worse is that it does not implement IRangeComparator from the compare framework but an identical copy of an internal IRangeComparator interface, and even worse org.eclipse.ui.workbench.texteditor does not have a dependency on org.eclipse.compare.

Options:
1. Keep using JavaTokenComparator and try to fix (I was not able to do so)
2. Copy DocEquivalenceComparator and required classes, let the copy implement IRangeComparator from the compare framework
3. Add dependency to compare and use compare framework in workbench.texteditor
4. Add API to workbench.texteditor to some utility class, something like:
ILineRange[] getChangedLines(IDocument oldDocument, IDocument currentDocument);
We should not compare Java structure but simply write our own IRangeComparator that reports changed lines.

Java compare itself works well with the current JavaTokenComparator i.e. does not report the next line as being changed.
Created attachment 79623
fix

Use own line comparator. This makes the code in EditorUtility much faster and much simpler.
fixed > I20071002-1342
