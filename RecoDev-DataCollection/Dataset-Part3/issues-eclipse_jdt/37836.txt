20030519

To activate the push down refactoring I have to select a method. But on the
first page of the wizard I can select more members that are pushed down as well.
So shouldn't the parent type be a valid selection as well? (analog to create
getter/setter, override ect)...

20030519

To activate the push down refactoring I have to select a method. But on the
first page of the wizard I can select more members that are pushed down as well.
So shouldn't the parent type be a valid selection as well? (analog to create
getter/setter, override ect)...
true, bogus requirement
We should fix this for 3.0.
I assume, that this bug report also applies to Pull Up, right? 
 
Currently "Pull Up/Push Down" are not enabled/executable when an IType is selected 
for a couple of reasons: 
 
1) In the method isPullable(): 
      if (member.getElementType() != IJavaElement.METHOD &&  
	  member.getElementType() != IJavaElement.FIELD && 
	  member.getElementType() != IJavaElement.TYPE) 
	  return false; 
   It does already check for IType, but not in isPushable(): 
    
     if (member.getElementType() != IJavaElement.METHOD &&  
	 member.getElementType() != IJavaElement.FIELD) 
	 return false; 
 
  So I added  
	 member.getElementType() != IJavaElement.TYPE) 
  to isPushable(). 
 
2) ... still is Pullable()/isPushable() - check for non-static ITypes 
   in isPullable(): 
     if (member instanceof IType){ 
        if (! JdtFlags.isStatic(member)) 
	    return false; 
     } 
   So there is already some check for IType, but it let's only pass non-static members 
for some reason. I haven't figured out what the reason is and in isPushable() I found 
the following(): 
	 
		if (JdtFlags.isStatic(member)) 
			return false; 
 
   
  Now I am really confused. This one lets only non-static member pass? What for? As I 
am so confused, and the JUnit-Test ran after the removal of both occurences I let it 
removed. Sorry, for my ignorance, but I am more than happy to provide a new patch 
with the condition reintroduced and after a bit of explanation I will also document the 
reasoning in the code. What cases would break with static enabled?  
I have to confess that I am obsessed with removing code ;-) 
 
3) IMember.getDeclaringType(): 
		 
   In haveCommonDeclaringType() is a call to IMember.getDeclaringType() and the 
javadoc of it says: 
 
/** 
 * Returns the type in which this member is declared, or <code>null</code> 
 * if this member is not declared in a type (for example, a top-level type). 
 * This is a handle-only method. 
 *  
 * @return the type in which this member is declared, or <code>null</code> 
 * if this member is not declared in a type (for example, a top-level type) 
 */ 
 
  So it returns "null" for a top-level type. Well, it is a philosophical case, but in my 
philosophy the declaring type itself should be returned in case of the top-level type. It is 
declaring itself, isn't it? Should I file a bug report?  
 
  On the other hand I also found this in canBeAccessFrom(): 
   if (member.getDeclaringType() == null){ //top level 
       if (! (member instanceof IType)) 
	  return false; 
 
  So after all, it seems also to be used to find out if dealing with the top level type. 
Should I include this in the potential bug report (add IMember.isTopLevel())? 
 
  Anyway for the time being I introduced the following helper method in **both** 
classes, as this seems to be the normal way of reuse around this two refactorings 
(more on this later): 
 
        /**  
	 * Decorates IMember.getDeclaringType() by returning 
	 * the top-level type as declaring type instead of <code>null</code>. 
	 *  
	 * @param member 
	 * @return the result of member.getDeclaringType(), but returns the 
	 * member itself in case it is the top-level element. 
	 */ 
	private static IType getDeclaringTypeIncludingTopLevelElement(IMember 
member ) { 
		IType declaringType = member.getDeclaringType(); 
		if (declaringType == null && member.getElementType() == 
IJavaElement.TYPE) 
		  	declaringType = (IType) member; 
	    return declaringType; 
	} 
 
  It was also neccessary to change PullUpRefactoring.getDeclaringType() and 
PushDownRefactoring.getDeclaringClass(), despite the name both doing the same 
thing, accordingly as it would, naturally enough, otherwise cause an NPE during the 
execution of the refactorings. 
 
  Result: 
 
                         HEAD               patched 
                         pull up/push down  pull up/push down 
 
enabled on IType         n/n                y/y 
 
enabled on               n/n                y/y 
inner class 
 
enabled on               y/n(!)             y/y 
on static   
inner class 
 
enabled on               y/n(!)             y/y 
static method (main) 
 
 
  See the attached patch for more details. 
 
The job of both classes seems pretty much symetric to me, but the implementation is 
pretty asymetric. It seems to have started with cut & paste and then has been 
maintained independently. Wouldn't it make sense to introduce 
MoveInHierarchyRefactoring extending Refactoring and let both classes extend it? We 
could pull up a lot of methods. I am willing to give it a go, though it would probably only 
around a dozen methods, which are very clear candidates to me as an outsider. If that 
would be enough for a start, I would prepare another patch (due to my day job, this 
could take a week or so).  
If we do so, the remaining question would be, what about the tests? The am would 
hold true here too, as they are two distinct classes. Unfortunately the tests are not very 
expressive and I fear that I wouldn't be able to figure them out in a reasonable amount 
of time.  
I could see a way of handling this: The orginial tests will run anyway, so we keep them, 
but start a new MoveInHierarchyRefactoringTests and after documenting in the "old" 
classes to not extend them anymore, we  will add further tests in the "new" class.  
 
It's my first try at the refactorings and I was only focussed on the bug report. So I didn't 
take the time to understand the refactoring itself. So I am happy to learn, what I did 
wrong, or at least could do better. I'd appreciate any pointers. 
 
 
JUnit-Tests: org.eclipse.jdt.ui.test.refactoring.AllTests 
HEAD         no errors, one failure: 
             org.eclipse.jdt.ui.tests.refactoring.MoveInnerToTopLevelTest.test18() 
 
patched     no change 
 
 
Created attachment 5437
Patch
thanks, Mariano.
I have a couple of little remarks here:
- as it is now (i.e. with your patch), after i select a type and say 'pull up', 
the wizard page appears in an error condition (no members selected), which is 
not acceptable
- i see no tests in the patch :-) - see PullUpTests and PushDownTests
- i think the real solution would be to modify the isAvailable (and create 
methods) to check (as an || condition) that 1 type is selected and 
isAvailable(type.getMembers)

that way we get the rest for free (no need for the 
getDeclaringTypeIncludingTopLevelElement method)

-it's true that pull up and push down have a lot in common and should maybe be 
superclasses by something more general. wanna go ahead and refactor it? that'd 
be most welcome


Hi Adam, 
 
  it's encouraging that you answered so quickly and also took the time to run the patch. 
 
1) 
>- as it is now (i.e. with your patch), after i select a type and say 'pull up',  
>the wizard page appears in an error condition (no members selected), which is  
>not acceptable 
I've seen that too and felt about the error message as a way to guide the user to the 
next step -> selecting members. 
What would be a good behaviour? Select all members by default? I anticipate the 
following typical use case: Pull up _some_, i.e. a few,  member(s) and not pulling up all 
members, leaving the original class empty. 
 
2) 
>- i see no tests in the patch :-) - see PullUpTests and PushDownTests 
Well, they are well hidden. No, as I said, the tests are not intuitive to me (test0, etc.) 
and it would take a serious amount of time to understand them. So for the time being I 
don't trust the tests anyway. See my last posting, I'd like to introduce a common base 
class for both refactorings and I assume that the tests are not disjunctive too, so it 
makes sense to introduce a common base class for them too. I would contribute tests 
for the _new_ functionality there and add a remark the existing two testclasses to add 
new tests to the common base class where appropriate. Would that work for you? 
 
3) 
>- i think the real solution would be to modify the isAvailable (and create  
>methods) to check (as an || condition) that 1 type is selected and  
>isAvailable(type.getMembers) 
>that way we get the rest for free (no need for the  
>getDeclaringTypeIncludingTopLevelElement method) 
I see, ok I'll try that. So a selection of more than one IType would be invalid too? ok. 
What about the removal of checking for static members? (see my last posting) 
In the patch I also used the new method in a couple of other places, because it would 
otherwise cause an NPE. I'll have a look if that is a misconception added by my patch. 
Usually the members to process should only contain non-ITypes? I'll have a closer look 
at that.  
 
4) 
>-it's true that pull up and push down have a lot in common and should maybe be  
>superclasses by something more general. wanna go ahead and refactor it? that'd  
>be most welcome 
Yes, see 2).  
I am not sure if an abstract class MoveInHierarchy would be the final solution, as it 
could turn out, that it would be more general, but I'd like to start this way and would 
probably do another interation, when I know more about the semantics of the members 
to pull up.  
Probably the pull up/push down actions could also benefit from some kind of common 
class. I'll keep that in mind. 
Created attachment 5454
Patch 2
5) I learned that a prevention for selecting of more than one IType is already in place. 
However I haven't found yet, where this precondition is checked and so I am holding 
back to rely on it? Any pointer? Can I rely on it? 
 
6)  As far as I could tell the PushDownTests were'nt part of any suite (no reference to 
suite()). They also seem to be stale as there are a few broken tests when run against 
HEAD: 
test22(org.eclipse.jdt.ui.tests.refactoring.PushDownTests) 
test23(org.eclipse.jdt.ui.tests.refactoring.PushDownTests) 
test24(org.eclipse.jdt.ui.tests.refactoring.PushDownTests) 
test28(org.eclipse.jdt.ui.tests.refactoring.PushDownTests) 
 
7) >- i think the real solution would be to modify the isAvailable (and create   
   >methods) to check (as an || condition) that 1 type is selected and   
   >isAvailable(type.getMembers)  
   >that way we get the rest for free (no need for the   
   >getDeclaringTypeIncludingTopLevelElement method)  
 
I haven't found anything like "type.getMembers" so I guess you were hinting at 
something I found in getPullableMembersOfDeclaringType()? 
	addAllPullable(getDeclaringType().getFields(), list); 
	addAllPullable(getDeclaringType().getMethods(), list); 
	addAllPullable(getDeclaringType().getTypes(), list); 
 
Please have a look at the new patch, is that is the direction you were talking when 
referring to the "real solution" or did I get you wrong? I broke a couple of tests. See 8) 
for details. 
 
I only applied this to PullUp, but if you say that this approach is ok in terms of a) the 
tests and b) to select all members by default when selecting a type, I'll go for 
PushDown. 
Again, I am still happy to rework it again.  
 
9) Broken tests: 
test39 
testFail25 
testFail26 
testFail27 
testFail28 
 
I am not sure why they are broken, but I doubt that the code is wrong (I am an 
optimist), but that the broken tests reflect the changed behaviour. I had a good look at 
the tests already, but haven't been able to figure them out really. I'll continue with the 
tests when we agree if the behaviour to select all members of a type by default is 
desired. 
 
 
1) if we don't want to select anything, then at least the error message should 
be supressed (disabled 'preview' and 'OK' buttons are fine)

2) whenever we add new funtionality, like making the action work on a type in 
addition to methods/fields we need test cases for that. for now, it's ok to 
keep the 2 testclasses separate and simply add tests

3) "So a selection of more than one IType would be invalid too?"
yes, more than 1 type would be invalid (that is, unless the types selected are 
all member types and they have a common parent)

The static check can probably be removed, unless we come up with a 
counterexample.

5) there's code to check that all selected members have a common parent. so 
selecting two top level types is disabled by that (see 
PullUpRefactoring.isAvailable)

6) darn good find! for some totally bizarre reason these were indead disabled. 
I fixed that (not released yet). Thanks.

i will have a look at the patch now
>>1) if we don't want to select anything, then at least the error message should  
>>be supressed (disabled 'preview' and 'OK' buttons are fine) 
 
I can't really tell what we want. I just wanted to let you know of the consequences. We 
need a decision here. I see the following options and its pros and cons: 
a) Don't select any member by default. Implemented in patch 1. 
pro: Looks natural to me. 
cons:  
- The introduction of getDeclaringTypeIncludingTopLevelElement(). 
- Suppressed message is a bit ugly, as there is no such a thing as sane default 
settings. So the dialog must start in an error mode. To suppress the message means, 
that the user wouldn't see exactly why the buttons preview/next are disabled, although  
there is a message at the top saying that s/he needs to select members. As this is also 
the case in other wizards, like the create new class wizard, which doesn't show an 
error message on startup, but after entering a type name and removing it again it 
shows an error message asking for the type name to be entered. 
 
b) Select all members. Implemented in patch 2. 
pros: 
- Implementation is more elegant with the benefits of not having to check for ITypes in 
succeeding steps. 
- The wizard is initialized in a sane state, so that there is no need for suppressing an 
error message, as  
cons: 
- Especially with classes containing 20+ members, it will be annoying to the user to 
deselect all unused members. _However_ you could argue that if the user just wants to 
select just one or two members, s/he could still do so by selecting them directly and 
launching the wizard without selecting the declaring type.  
 
c) Go for b) and add a button: "Remove All". 
pros: like b) plus the possibilty to correct the behaviour (remove all) and fall back to a) 
with an error message that doesn't need to be suppressed. 
con: a bit more work in terms of implementation and an unnecessary step in terms of 
user experience. 
 
I don't have a real preference. My vote would go for b) or a) though, as they would be 
the quickest things to implement. 
 
ps. I am aware that this discussion eats up your time too - bear with me ;-) 
well, well. I forget to end a sentence in 1) a) cons... It should've read something like 
that: As the new class wizard does also suppress an error message on startup this is 
something known to the user and therefore I believe it would be ok, despite my 
personal dislike of it. 
yup, your're right, selecting all members looks bogus - i just checked.
i will re-look at your patch 1 and into supressing the error message

no probs about the time, it doesn't eat that much of it, don't worry
patch 1 was not good for the following reason:
- fMembersToPullUp is a field that collects all members that will be pulled up,
but the patch made it mean something else in 1 special case (this field should 
retain its current meaning)

i have a fix for this bug (and the wizard page error problem)
and i will release it once we're done with M2
the fix goes somewhere in between your patches 1 and 2

thanks for your cooperation on this, Mariano. it's appreciated.
Glad you solved it. Cheers 
fixed now
