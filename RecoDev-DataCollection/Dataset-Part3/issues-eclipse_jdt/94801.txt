I20050510:

Steps to reproduce:
- Invoke Introduce Factory on the constructor

class TaskUtilities {

	public static TaskUtilities createTaskUtilities() {
		return null;
	}

	public TaskUtilities() {}
}

-> Refactoring inserts second method createTaskUtilities without issueing an 
error

I20050510:

Steps to reproduce:
- Invoke Introduce Factory on the constructor

class TaskUtilities {

	public static TaskUtilities createTaskUtilities() {
		return null;
	}

	public TaskUtilities() {}
}

-> Refactoring inserts second method createTaskUtilities without issueing an 
error
Robert, do you have time to look into this ?
Hi Dirk, the problem is that initialization code in checkInitialConditions()
directly assigns fNewMethodName, bypassing the checking logic in
setNewMethodName(). I should be able to fix this quite trivially.
Great.
Hi Dirk, returning an error-bearing RefactoringStatus from
checkInitialConditions() has no visible effect on the refactoring dialog's
initial state. Specifically, no error message shows to indicate a name clash as
it does when the user sets the method name to one that clashes with an existing
method.

I guess I could let the refactoring keep guessing a method name until it finds
one that doesn't clash, but most likely the user will want to edit it anyway, so
leaving it as a conflicting name with a proper error message seems better to me.

Comments?
Bob,

check initiali condition is only called once when the dialog opens. Check final
conditions is called when the user presses OK or Preview. If you want to check
the name on every keystroke you have to do this in the dialog and call an
appropriate method on the refactoring. If the method you call on the refactoring
returns a refactoring status you can set it directly to the user input page
using the setPageComplete method. The method will then disable all buttons and
will show the message in the status line. 

HTH Dirk
My input page already validates on each keystroke; the problem is that returning
a non-OK RefactoringStatus from checkInitialConditions() (using the same
validation code that the text field validator uses) doesn't have any visible
effect on the dialog box, so the user initially thinks things are ok, even
though checkInitialConditions() returned an error status. If s/he clicks in the
field and, say, adds and deletes a space (a net no-op), the error status is then
properly visibly indicated in the dialog.
Do you set the result return from the validation to your page using
setPageComplete method. Can you provide the code snippet you are using ?
I fixed the problem by placing a call to validate() at the end of
createControl() after retrieving the status from my refactoring (independently
of the call to checkInitialConditions() done by the refactoring infrastructure).

I had assumed that the refactoring infrastructure (the code that calls mine)
would have already used the return status from checkInitialConditions() to call
setPageComplete(), but I guess not.

I'll have a patch for you a bit later on... just need to add the junit tests now.
Created attachment 21901
Patch to validate initial (computed) field values in input page
Created attachment 21902
Testcase for bug fix
The submitted patches are against 3.1M7. I did a quick check to see whether
anything else had changed since then (by diffing against HEAD), and it looked
like nothing had. Hope that's ok.
Bob, thanks for the patch.

We already passed RC1. Since it is not critical for 3.1 it might get deferred
until 3.2.
patch released > 20080425
