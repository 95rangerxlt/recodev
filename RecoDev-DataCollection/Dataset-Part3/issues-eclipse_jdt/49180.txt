Note: This only applies only to typing. Formatter is as expected when invoking
the formatter on the block.

I start typing this expression:

  foo = bar != null ?_

(_ = cursor)

Now if I hit Enter, and continue typing blindly, I get:

  foo = bar != null ?
                     bar : foo;

instead of the expected:

  foo = bar != null ?
    bar : foo;

In the new formatter prefs, "Line Wrapping "tab", I have set the indentation
policy of "Conditionals" to "indent by one".

Note: This only applies only to typing. Formatter is as expected when invoking
the formatter on the block.

I start typing this expression:

  foo = bar != null ?_

(_ = cursor)

Now if I hit Enter, and continue typing blindly, I get:

  foo = bar != null ?
                     bar : foo;

instead of the expected:

  foo = bar != null ?
    bar : foo;

In the new formatter prefs, "Line Wrapping "tab", I have set the indentation
policy of "Conditionals" to "indent by one".
Pasting also screws up indentation, and also for subsequent blocks. For example,
pasting this:

  private int getFrequency(String synonym)
  {
    int freq = 0;
    LuceneReadAccess readAccess = m_catalog.getIndexManager().getReadAccess();
    try
    {
      for (Iterator j = m_catalog.getScopes().iterator(); j.hasNext(); )
      {
        String scope = (String) j.next();
        int termFreq;
        {
          String field = m_filteredIndex ? 
            LuceneCatalog.scopeToField(scope) :
            LuceneCatalog.scopeToUnfilteredFieldName(scope);
          IndexReader reader = readAccess.getReader();
          try
          {
            termFreq = reader.docFreq(new Term(field, synonym));
          }
          catch (IOException e)
          {
            throw new CompositeRuntimeException(e);
          }
        }
        freq += termFreq;
      }
    }
    finally
    {
      readAccess.close();
    }
    return freq;
  }

I get this:

  private int getFrequency(String synonym)
  {
    int freq = 0;
    LuceneReadAccess readAccess = m_catalog.getIndexManager().getReadAccess();
    try
    {
      for (Iterator j = m_catalog.getScopes().iterator(); j.hasNext(); )
      {
        String scope = (String) j.next();
        int termFreq;
        {
          String field = m_filteredIndex ? 
                                          LuceneCatalog.scopeToField(scope) : 
                                           
LuceneCatalog.scopeToUnfilteredFieldName(scope);
                                            IndexReader reader =
readAccess.getReader();
                                            try
                                            {
                                              termFreq = reader.docFreq(new
Term(field, synonym));
                                            }
                                            catch (IOException e)
                                            {
                                              throw new
CompositeRuntimeException(e);
                                            }
        }
        freq += termFreq;
      }
    }
    finally
    {
      readAccess.close();
    }
    return freq;
  }

Move to JDT/Text.
The formatter seems to work as expected when invoked through the format option.
auto-indenting lacks proper conditional support yet.
fixed > 20040107
