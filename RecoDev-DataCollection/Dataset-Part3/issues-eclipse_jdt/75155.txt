3.1 M2

1. open CopyResourceChange rev. 1.11
2. in line 41 remove the //$NON-NLS-1$
3. save
4. open the NLS wizard
==> it does not detect the accessor nor the properties file
It should be smarter (assume some //$NON-NLS-1$ got lost) and detect the correct
values

3.1 M2

1. open CopyResourceChange rev. 1.11
2. in line 41 remove the //$NON-NLS-1$
3. save
4. open the NLS wizard
==> it does not detect the accessor nor the properties file
It should be smarter (assume some //$NON-NLS-1$ got lost) and detect the correct
values
The file only contains one occurrence of the accessor class. I assume that we 
only consider statements tagged as //$NON-NLS... to probe the accessor class 
hence we don't find anything in this case.
Yes, only strings marked with //$NON-NLS are assumed to be already translated.
We currently don't have the abbility to add missing //$NON-NLS for already
translated strings.

We could think about doing that, as well as removing unnecessary tags
Adding //$NON-NLS is of course possible by setting the string to 'internalized'
This bug is more about default initializatzion of the dialog's accessor and
properties settings, e.g. if I have
Accessor.getString I'd expect the NLS wizard to have better defaults independent
of the $NON-NLS-1$ comment.

Also, if I have
  String s1= Accessor.getString("..."); //$NON-NLS-1$
  String s2= "asdfkasldk";
and externalize s2 I'd expect the NLS wizard to have Accessor and properties
file set to the one of s1.

fixed > 20041007

Now I also look at strings not marked with //non-nls when trying to find an
accessor class

The previous comment sould say:
Adding //$NON-NLS is of course possible by setting the string to 'ignored'
The scenario
String s1= Accessor.getString("..."); //$NON-NLS-1$
always worked. We just only looked at strings marked with //$NON-NLS-1$
