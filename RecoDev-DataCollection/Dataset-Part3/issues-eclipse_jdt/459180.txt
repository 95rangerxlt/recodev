In the help [1] I describe how null annotations at a type parameter affect the type variable (usage). From this explanation it is not obvious that this nullness can be overridden at each usage of the type variable, like:

interface I1 <T extends @NonNull Object> {
   @Nullable T maybeGet();
}

interface I2 <@Nullable T> {
   @NonNull T getNonNull();
}

A paragraph should be added to make this fact better known.

Additionally, this sentence from the javadoc of DefaultLocation should be made more prominent:

"Wildcards and the use of type variables are always excluded from {@link NonNullByDefault}."

[1] http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftasks%2Ftask-using_null_type_annotations.htm&cp=1_3_9_1_0_0&anchor=typeVariables

In the help [1] I describe how null annotations at a type parameter affect the type variable (usage). From this explanation it is not obvious that this nullness can be overridden at each usage of the type variable, like:

interface I1 <T extends @NonNull Object> {
   @Nullable T maybeGet();
}

interface I2 <@Nullable T> {
   @NonNull T getNonNull();
}

A paragraph should be added to make this fact better known.

Additionally, this sentence from the javadoc of DefaultLocation should be made more prominent:

"Wildcards and the use of type variables are always excluded from {@link NonNullByDefault}."

[1] http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftasks%2Ftask-using_null_type_annotations.htm&cp=1_3_9_1_0_0&anchor=typeVariables
Resolved via http://git.eclipse.org/c/platform/eclipse.platform.common.git/commit/?id=b4827a74a5317dd013b47255b2880a7d7df4bb51
