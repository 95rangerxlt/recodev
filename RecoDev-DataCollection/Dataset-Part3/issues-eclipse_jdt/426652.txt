On this example:

import static java.util.stream.Collectors.toList;
public class Y {
        Object o = toList();
}

inference never terminates, because some inference variable has neither lower nor upper bounds, and hence no progress is made during resolution.

One could argue, that this rule
 * Otherwise, where αi has proper upper bounds U1, ..., Uk, Ti = glb(U1, ..., Uk).

implicitly includes the case of k=0, where glb() is probably assumed to answer j.l.Object.

On this example:

import static java.util.stream.Collectors.toList;
public class Y {
        Object o = toList();
}

inference never terminates, because some inference variable has neither lower nor upper bounds, and hence no progress is made during resolution.

One could argue, that this rule
 * Otherwise, where αi has proper upper bounds U1, ..., Uk, Ti = glb(U1, ..., Uk).

implicitly includes the case of k=0, where glb() is probably assumed to answer j.l.Object.
Hm, actually I would assume glb() (of empty input) to be the null-type, but let's not deliberately re-introduce this type into inference which would likely lead to bogus class files... inferring an unconstrained inference variable to Object shouldn't hurt anyway.

Additionally, while fixing this issue, I came across a call to CaptureBinding18.initializeBounds - NPE on .wildcard ... I'm fixing this for now by overriding initializeBounds() with an empty implementation, we already do our initialization in setUpperBounds().
Test & fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=b25ae5a7f576e7bd1b9d0730e14ef7742dcae3eb

(Change in inferInvocationType() is unrelated: fixes a CCE I once saw during experiments).
