For the code fragment:

boolean isSaved = false;
FooSet q = getSP(name, value);
FooSet a = getP(m.getR(MT.RType.A));
FooSet b = getP(m.getR(MT.RType.B));
FooSet c = getP(m.getR(MT.RType.C));
			
db.item().addP(id, isSaved, q, a, b, c);

When I select "isSaved" in the last line and hit ALT-SHIFT-R, I get the message
"Can't inline abstract methods".

For the code fragment:

boolean isSaved = false;
FooSet q = getSP(name, value);
FooSet a = getP(m.getR(MT.RType.A));
FooSet b = getP(m.getR(MT.RType.B));
FooSet c = getP(m.getR(MT.RType.C));
			
db.item().addP(id, isSaved, q, a, b, c);

When I select "isSaved" in the last line and hit ALT-SHIFT-R, I get the message
"Can't inline abstract methods".
Sorry, previous report should say, ALT-SHIFT-I.
Please specify which build you are using.
Expression inlining is JDT/UI.
Move to JDT/UI.
I20030129
a small, self-contained test case is:
abstract class A{
	void foo(){
		boolean isFoo= false;
		bar(isFoo);
	}
	abstract void bar(boolean isFred);
}

select isFoo inside the method invocation of bar(isFoo)

the problem is that inline method refactoring tries to be a bit too smart and 
work even though no method invocation or declaration has been selected

no method invocation or declaration can be sitting inside a temp reference or 
declaration, so it's ok to just check if any temp inlining is possible and 
_only then_ check if any method inlining is possible

fixed
