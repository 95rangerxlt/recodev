The plugin org.eclipse.jdt.junit runtime is a special case.

It is exempt from the JARd plugin format.

It requires a special treatment when it comes to adopting a manifest.mf file.

Reason:
Eclipse 3.x supports running 2.x Plugin Junit tests.  If you recall, in 2.1, 
Plugin Junit testing was not part of the sdk.
Therefore, what we do is implicitly append the org.eclipse.jdt.junit.runtime 
and org.eclipse.pde.junit.runtime plugins to the list of the plugins to run 
when running 2.x Junit tests.

The 2.x runtime does not understand JARd plugins, therefore, jdt.junit.runtime 
must NOT be JARd

Also, the 2.x runtime does not understand manifest.mf.  Therefore, the 
plugin.xml for said plugin must remain intact so that it could be read by the 
2.x runtime.  The plugin must still have a manifest.mf so that it could be 
read by the 3.x runtime.

So the plugin.xml for jdt.junit.runtime will contain deprecated/unused 
elements (as per the 3.0 standards) since it has both a full 
plugin.xml/manifest.mf.  To not show deprecation warnings on your plugin.xml, 
the attached patch contains project preferences for the Plugin manifest 
validator.

The plugin org.eclipse.jdt.junit runtime is a special case.

It is exempt from the JARd plugin format.

It requires a special treatment when it comes to adopting a manifest.mf file.

Reason:
Eclipse 3.x supports running 2.x Plugin Junit tests.  If you recall, in 2.1, 
Plugin Junit testing was not part of the sdk.
Therefore, what we do is implicitly append the org.eclipse.jdt.junit.runtime 
and org.eclipse.pde.junit.runtime plugins to the list of the plugins to run 
when running 2.x Junit tests.

The 2.x runtime does not understand JARd plugins, therefore, jdt.junit.runtime 
must NOT be JARd

Also, the 2.x runtime does not understand manifest.mf.  Therefore, the 
plugin.xml for said plugin must remain intact so that it could be read by the 
2.x runtime.  The plugin must still have a manifest.mf so that it could be 
read by the 3.x runtime.

So the plugin.xml for jdt.junit.runtime will contain deprecated/unused 
elements (as per the 3.0 standards) since it has both a full 
plugin.xml/manifest.mf.  To not show deprecation warnings on your plugin.xml, 
the attached patch contains project preferences for the Plugin manifest 
validator.
Created attachment 19665
Patch for the jdt.junit.runtime project
Thanks for the info and the patch.
Fixed in HEAD.
Available in builds > 20050408.
