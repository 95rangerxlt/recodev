Given a class Foo

public class Foo {
  public void foo() {
  }
}

and a class Bar which uses Foo

public class Bar {

  private Foo foo;
  
  public Foo getFoo() {
    return foo;
  }

  public void setFoo(Foo foo) {
    this.foo = foo;
  }

  public void useFoo() {
    foo.foo();
  }
}

if you extract an interface IFoo for Foo, containing the foo() method and 
checking "change references...", only the return type of getFoo() in Bar gets 
changed, though the type of the whole field could be changed to the interface.

This severely limits the usefulness of the refactoring.

Given a class Foo

public class Foo {
  public void foo() {
  }
}

and a class Bar which uses Foo

public class Bar {

  private Foo foo;
  
  public Foo getFoo() {
    return foo;
  }

  public void setFoo(Foo foo) {
    this.foo = foo;
  }

  public void useFoo() {
    foo.foo();
  }
}

if you extract an interface IFoo for Foo, containing the foo() method and 
checking "change references...", only the return type of getFoo() in Bar gets 
changed, though the type of the whole field could be changed to the interface.

This severely limits the usefulness of the refactoring.
this works fine in the latest
will add regression tests
tests added
Gerrit change https://git.eclipse.org/r/41464 was merged to [stable-0.1].
Commit: http://git.eclipse.org/c/tracecompass/org.eclipse.tracecompass.git/commit/?id=f3a4a0dbfb198b8b3c37f6511d0e92b1dc46695e
