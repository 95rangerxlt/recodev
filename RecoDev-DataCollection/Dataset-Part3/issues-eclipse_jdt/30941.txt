20030204

The initialization of the preference default currently contains a 
final Display display= Display.getDefault();
display.syncExec(new Runnable() {
	public void run() {
		Color c= display.getSystemColor(SWT.COLOR_GRAY);
		rgbs[0]= c.getRGB();
		c= display.getSystemColor(SWT.COLOR_LIST_FOREGROUND);
		rgbs[1]= c.getRGB();
		c= display.getSystemColor(SWT.COLOR_LIST_BACKGROUND);
		rgbs[2]= c.getRGB();
	}
});
We should avoid and remove this as this is a candidate for a deadlock.

20030204

The initialization of the preference default currently contains a 
final Display display= Display.getDefault();
display.syncExec(new Runnable() {
	public void run() {
		Color c= display.getSystemColor(SWT.COLOR_GRAY);
		rgbs[0]= c.getRGB();
		c= display.getSystemColor(SWT.COLOR_LIST_FOREGROUND);
		rgbs[1]= c.getRGB();
		c= display.getSystemColor(SWT.COLOR_LIST_BACKGROUND);
		rgbs[2]= c.getRGB();
	}
});
We should avoid and remove this as this is a candidate for a deadlock.
I can remember a case where Martin and I saw a deadlock. It happens when plug-
in activation takes place in a different thread.

Kai, any comments.
We could do a async exec but this could lead to problems: those asking for the
color would get RGB(0,0,0) until the async code has been excecuted.

We should be allowed to get the system colors from any thread or get a new
method like getSystemColorRGB.

Note: JFace PreferenceConverter expects RGBs for setting color preferences.

Moving to SWT for comments.

Sorry, the only methods that can be called from any thread are 
async/syncExec.  Do you know the case where you deadlock?  Why not figure this 
out and fix it?  Until you know the case, other places may deadlock for the 
same reason.

There is a problem that can happen on operating systems that implement a 
single global lock involving stacked event loops.  This problem does not 
happen on Windows so this can't be what you are seeing.
Why is this moved to the UI team? Is there something you think we need to 
change? If we remove these from a syncExec then there will be SWT errors due 
to accessing colours outside of the UI Thread.
I implemented the following fix:

1. Instead of getting RGB via SWT.GRAY I directly use new RGB(192, 192, 192)
   for the highlighting of matching brackets.

2. Because we already specify to use system background and foreground color,
   I no longer initialize the following colors on plug-in startup:
      PreferenceConstants.EDITOR_BACKGROUND_COLOR and
      PreferenceConstants.EDITOR_FOREGROUND_COLOR.

   JDT UI initializes them when a JavaEditorPreferencePage is created.

start verifying
