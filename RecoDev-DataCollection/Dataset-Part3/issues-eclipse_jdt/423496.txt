On the EG list Dan mentioned [1] this spec bug:

  https://bugs.openjdk.java.net/browse/JDK-8028813

He mentions: "We're planning to come up with an extra incorporation rule that will handle cases like this."

This spec bug currently breaks our GenericsRegressionTest.testBug415734(), which I'm disabling for now, to be re-enabled once we have that new rule.

[1] http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2013-December/000450.html

On the EG list Dan mentioned [1] this spec bug:

  https://bugs.openjdk.java.net/browse/JDK-8028813

He mentions: "We're planning to come up with an extra incorporation rule that will handle cases like this."

This spec bug currently breaks our GenericsRegressionTest.testBug415734(), which I'm disabling for now, to be re-enabled once we have that new rule.

[1] http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2013-December/000450.html
I should've mentioned that I adjusted my implementation to adhere to the current spec. That's why we are currently rejecting the example from 
GenericsRegressionTest.testBug415734().
The new rule is: 

"If two bounds have the form α <: S and α <: T, and if for some generic class or interface, G, there exists a supertype (4.10) of S of the form G<S1, ..., Sn> and a supertype of T of the form G<T1, ..., Tn>, then for all i, 1 ≤ i ≤ n, if Si and Ti are types (not wildcards), the constraint ⟨Si = Ti⟩ is implied."

Below "If Ai is a wildcard of the form ? extends T:" this one is new, too:
- "If T is Object, αi <: R implies ⟨Bi θ <: R⟩"

... soon in this theater ...
Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=7ceb7b86e5d2c6d0639c543a0b8998dc4ed1502e
I've restored the previous state of GenericsRegressionTest.testBug413958_2 for levels 1.7- (was failing in those modes) via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=8e450c528250a8d607aa5dc2fb3b5dddfe8b9870
