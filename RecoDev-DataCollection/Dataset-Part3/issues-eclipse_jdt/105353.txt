We need to validate the genereated source folder specified by a user.  We 
should make sure that 

1.  The input is a valid directory name
2.  The input is not an existing source folder for the project. 

We need to call this validation logic from 

- the config ui when the folder is changed
- the generated file manager when the value is read in from the config (to 
cover some case where the config was edited externally and configured 
incorrectly.)

We need to validate the genereated source folder specified by a user.  We 
should make sure that 

1.  The input is a valid directory name
2.  The input is not an existing source folder for the project. 

We need to call this validation logic from 

- the config ui when the folder is changed
- the generated file manager when the value is read in from the config (to 
cover some case where the config was edited externally and configured 
incorrectly.)
"Blank" should be a valid setting; in this case we should default to some 
sensible default value.

Must folders be relative to the project root?  Can they be relative to the 
workspace root (like other IResources)?  Or can they even be absolute (I hope 
not)?

"blank" should not be valid.  The default should be displayed if the default 
is being used.  If the user changes to something invalid, we should display an 
error message and return the value to what it was before it was changed.  The 
intial value should be some default value, and this should be displayed in the 
config ui.

"blank" in the UI implying a default value is confusing.

Forgot your other questions:

Paths should be relative to the project root.  Supporting "absolute" paths are 
your call, as long as they are absolute to the workspace or the project (i.e., 
the source directory must be a child directory of the project root folder.  
For example, "c:\temp\" would be invalid for a project rooted at 
c:\MyProject). 

Workspace-relative paths can be supported, but again, validation must ensure 
that the path is a child of the project. 

Some form of path normalization will need to occur somewhere.  Right now, the 
GeneratedFileManager treats this path as project-relative path.  

Basic validation is in place.  Refinements are needed: better checking of 
fringe cases; checking against existing source dirs; moving validation code out 
of UI and into core; making sure that errors at actual gen src dir creation 
time and write time are properly handled.
Changing sev to "enhancement" since the feature is basically working.
We now use a shared validation routine (exported by AptConfig), that uses the same algorithm as the IFile infrastructure.  Not bulletproof but likely as good as we'll get.
