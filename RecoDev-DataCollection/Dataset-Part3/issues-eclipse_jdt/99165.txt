Convert to enhanced for loop for arrays proposes the name element, whereas the
convert for iterators doesn't.

class X {
	void m(StringBuffer[] arr) {
		for (int i= 0; i < arr.length; i++) {
			foo(arr[i]);
		}
		List<String> l= null;
		for (Iterator<String> iter = l.iterator(); iter.hasNext();) {
			foo(iter.next());
		}
	}
	private void foo(StringBuffer buffer) {
	}
	private void foo(String string) {
	}
}

On the array loop the name proposal contain element, on the iter loop not. We
should be consistent here.

Convert to enhanced for loop for arrays proposes the name element, whereas the
convert for iterators doesn't.

class X {
	void m(StringBuffer[] arr) {
		for (int i= 0; i < arr.length; i++) {
			foo(arr[i]);
		}
		List<String> l= null;
		for (Iterator<String> iter = l.iterator(); iter.hasNext();) {
			foo(iter.next());
		}
	}
	private void foo(StringBuffer buffer) {
	}
	private void foo(String string) {
	}
}

On the array loop the name proposal contain element, on the iter loop not. We
should be consistent here.
seems to be fixed in 3.3
