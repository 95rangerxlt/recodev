After I20120417 is installed on Mac it has an empty list of JREs (Eclipse -> Preferences -> Java -> Installed JREs). 

This means that a person needs to type in location like:

/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home

before Eclipse can be used for debugging of Java-anything.


(This is on Mac 64 bit if it matters).

After I20120417 is installed on Mac it has an empty list of JREs (Eclipse -> Preferences -> Java -> Installed JREs). 

This means that a person needs to type in location like:

/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home

before Eclipse can be used for debugging of Java-anything.


(This is on Mac 64 bit if it matters).
Moving to JDT Debug.  I'm guessing this is related to bug 368483
Oleg, what happens when you press the search button (remove the VM you added and hit the search button)?

We should be finding that location provided it appears in the 'java_home' output.

Can I get you to run 'java_home -X' and attach the output on the bug?
(In reply to comment #2)
> Oleg, what happens when you press the search button (remove the VM you added
> and hit the search button)?

I can't remove it ("Remove" button is disabled, may be because it is the default JRE?) But starting with a fresh workspace, when I click "Search" it shown progress dialog for a couple seconds, and nothing gets added. List remains empty.
(In reply to comment #2)
> We should be finding that location provided it appears in the 'java_home'
> output.
> 
> Can I get you to run 'java_home -X' and attach the output on the bug?

./java_home
/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home

./java_home -X
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>JVMArch</key>
		<string>x86_64</string>
		<key>JVMBundleID</key>
		<string>com.apple.javajdk16</string>
		<key>JVMEnabled</key>
		<true/>
		<key>JVMHomePath</key>
		<string>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</string>
		<key>JVMIsBuiltIn</key>
		<true/>
		<key>JVMName</key>
		<string>Java SE 6</string>
		<key>JVMPlatformVersion</key>
		<string>1.6</string>
		<key>JVMVendor</key>
		<string>Apple Inc.</string>
		<key>JVMVersion</key>
		<string>1.6.0_31-b04-413</string>
	</dict>
	<dict>
		<key>JVMArch</key>
		<string>i386</string>
		<key>JVMBundleID</key>
		<string>com.apple.javajdk16</string>
		<key>JVMEnabled</key>
		<true/>
		<key>JVMHomePath</key>
		<string>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</string>
		<key>JVMIsBuiltIn</key>
		<true/>
		<key>JVMName</key>
		<string>Java SE 6</string>
		<key>JVMPlatformVersion</key>
		<string>1.6</string>
		<key>JVMVendor</key>
		<string>Apple Inc.</string>
		<key>JVMVersion</key>
		<string>1.6.0_31-b04-413</string>
	</dict>
</array>
</plist>
(In reply to comment #4)
> (In reply to comment #2)
> > We should be finding that location provided it appears in the 'java_home'
> > output.
> > 
> > Can I get you to run 'java_home -X' and attach the output on the bug?
> 
> ./java_home
> /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
> 

Thanks Oleg, so it looks like java-home is correctly finding your VMs, but we are obviously not running it or failing to parse it. 

Did you notice any warnings in you log that read like the following: "The java_home executable does not exist"?
Not that one, but I have:
The activator org.eclipse.jdt.internal.launching.macosx.MacOSXLaunchingPlugin for bundle org.eclipse.jdt.launching.macosx is invalid

and

Plug-in org.eclipse.jdt.launching.macosx was unable to load class org.eclipse.jdt.internal.launching.macosx.MacOSXVMInstallType.


ava.lang.ClassNotFoundException: org.eclipse.jdt.internal.launching.macosx.MacOSXVMInstallType
	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:501)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:421)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:412)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	at org.eclipse.osgi.internal.loader.BundleLoader.loadClass(BundleLoader.java:340)
	at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:229)
	at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1212)
	at org.eclipse.core.internal.registry.osgi.RegistryStrategyOSGI.createExecutableExtension(RegistryStrategyOSGI.java:174)
Created attachment 214562
patch Mike made on my machine
The exception from comment #6 is because the jar for jdt.launching.macosx has no class files in it. I confirmed in my workspace that the bundle builds properly (we get all the expected .class files in the output dir), but I cannot export it unless I check the option 'Include class files from the workspace'.

I confirmed there is no class files present in the I20120425-1200 build as well.
upping the severity as the jdt.launching.macosx is completely broken, which breaks JRE support in Eclipse for Mac
Ugh. Looks like a typo in the build.properties was causing the compiler to quit, hence no class files.

Pushed fix to:

http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=531fbfeccefa8f26332b67fdef414c455a884ee8
