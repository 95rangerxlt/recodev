In the normal compiler workflow, data/control flow analysis is not undertaken 
if resolution phase has errors. For lambda expressions, we need information from 
flow analysis right during resolution stage. 

https://bugs.eclipse.org/bugs/show_bug.cgi?id=422801 and https://bugs.eclipse.org/bugs/show_bug.cgi?id=422489

exposed problems in our analyzeCode infrastructure's ability to deal with
handling bad data handed to them. I suspect the problem is pervasive and these
bugs are just a few instances of the systemtic problem.

At the moment, I have disabled shape discovery if there are resolution errors
either in the lambda or its enclosing scopes. This is perfectly OK and will not
have any material effect - other than some spurious *secondary* errors that may
show up during compilation: We may claim a certain method call is ambiguous while
it is not, or that no applicable method is found when such is not the case.

This ER is to build a fall back mechanism using ASTVisitor to discover shape.
While the general problem is not amenable to being solved using ASTVisitor, several
common cases can be solved leaving only pathological cases unanalyzed.

This problem is only for lambdas with block bodies. We already to use heuristics
to some extent: for example if we have seen a return statement without an
expression (during resolve) then we can declare the lambda as being NOT value
compatible - without control flow analysis.

Likewise, if we don't see any loops, any throws etc, we can draw some 
conclusions that could suffice for the vast majority of the cases.

This is not a correctness issue, but could lead to better programmer experience.

In the normal compiler workflow, data/control flow analysis is not undertaken 
if resolution phase has errors. For lambda expressions, we need information from 
flow analysis right during resolution stage. 

https://bugs.eclipse.org/bugs/show_bug.cgi?id=422801 and https://bugs.eclipse.org/bugs/show_bug.cgi?id=422489

exposed problems in our analyzeCode infrastructure's ability to deal with
handling bad data handed to them. I suspect the problem is pervasive and these
bugs are just a few instances of the systemtic problem.

At the moment, I have disabled shape discovery if there are resolution errors
either in the lambda or its enclosing scopes. This is perfectly OK and will not
have any material effect - other than some spurious *secondary* errors that may
show up during compilation: We may claim a certain method call is ambiguous while
it is not, or that no applicable method is found when such is not the case.

This ER is to build a fall back mechanism using ASTVisitor to discover shape.
While the general problem is not amenable to being solved using ASTVisitor, several
common cases can be solved leaving only pathological cases unanalyzed.

This problem is only for lambdas with block bodies. We already to use heuristics
to some extent: for example if we have seen a return statement without an
expression (during resolve) then we can declare the lambda as being NOT value
compatible - without control flow analysis.

Likewise, if we don't see any loops, any throws etc, we can draw some 
conclusions that could suffice for the vast majority of the cases.

This is not a correctness issue, but could lead to better programmer experience.
(In reply to Srikanth Sankaran from comment #0)

> This is perfectly OK and will
> not
> have any material effect - other than some spurious *secondary* errors that
> may
> show up during compilation: We may claim a certain method call is ambiguous
> while
> it is not, or that no applicable method is found when such is not the case.

The other side effect is certain error reporting may be deferred until earlier
errors are fixed.
As test org.eclipse.jdt.core.tests.dom.ASTConverter17Test.test403444() indirectly
shows, errors in "sibling" lambdas because they get propagated/attributed to the 
enclosing method, inhibit shape analysis of other siblings. We need to come up
with a satisfactory solution.
This is implemented by org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyzeShape()
used at the moment only by code assist.

See also: https://bugs.eclipse.org/bugs/show_bug.cgi?id=424290
