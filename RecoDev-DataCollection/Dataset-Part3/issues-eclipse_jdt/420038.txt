BETA_JAVA8:

The following program is tolerated by javac 8b108;

// --
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
 
@Target(ElementType.TYPE_USE)
@interface T {
}

public class X {
	public static void main(String[] args) {
		Class<?> c = int @T [].class; 
	}
} 

I believe oracle compiler is definitely at fault - this issue has been reported
to them  until we hear confirmtion, we should turn our error into warning for now.

BETA_JAVA8:

The following program is tolerated by javac 8b108;

// --
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
 
@Target(ElementType.TYPE_USE)
@interface T {
}

public class X {
	public static void main(String[] args) {
		Class<?> c = int @T [].class; 
	}
} 

I believe oracle compiler is definitely at fault - this issue has been reported
to them  until we hear confirmtion, we should turn our error into warning for now.
See that 

Class<?> c = String @T [].class;  is correctly rejected. So only
primitive arrays appear to be mishandled.

I am testing a fix that will just silently drop the misplaced annotations in
the present scenario. I'll leave this bug open and close it when we are
correctly aligned.

Patch will follow shortly.
"Fix" and changed tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=678bd63c535ed58308236db21b34dad57015766d

Per earlier comment, leaving the bug open until we can settle and align on
correct behavior with javac.
Resolving, the general issue of bug compatibility and reverting to the right
behavior will be handled by https://bugs.eclipse.org/bugs/show_bug.cgi?id=420045
