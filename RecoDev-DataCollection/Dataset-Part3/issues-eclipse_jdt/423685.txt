Consider an example like this:

  class A{/**/}
  class B extends A {/**/}

  class G<T> {
    G<B> gb=null;
    G<? super A> gsa=null;
    G<? super B> l = (true)? gsa : gb;
  }

The conditional expression is a poly expression (appears in an assignment context) and hence should apply this rule from 15.25.3:
"The type of a poly reference conditional expression is the same as its target type."

ECJ, however still seems to use lub computation based on which the assignment is rejected.

Avoiding lub in situations like this is important because lub(capture1,capture2) doesn't produce good results, whereas the new rules are much more permissive.

Consider an example like this:

  class A{/**/}
  class B extends A {/**/}

  class G<T> {
    G<B> gb=null;
    G<? super A> gsa=null;
    G<? super B> l = (true)? gsa : gb;
  }

The conditional expression is a poly expression (appears in an assignment context) and hence should apply this rule from 15.25.3:
"The type of a poly reference conditional expression is the same as its target type."

ECJ, however still seems to use lub computation based on which the assignment is rejected.

Avoiding lub in situations like this is important because lub(capture1,capture2) doesn't produce good results, whereas the new rules are much more permissive.
See also this clarification: http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2013-December/000462.html
*** Bug 425181 has been marked as a duplicate of this bug. ***
Relevant passages from the spec:

"Conditional operator expressions may be poly expressions if they appear in assignment or invocation contexts, unless both operands
produce primitives (or boxed primitives)"

"A reference conditional expression does not have to contain a poly expression 
as an operand in order to be a poly expression. It is a poly expression simply 
by virtue of the context in which it appears."

"A reference conditional expression is a poly expression if it appears in an 
assignment context (5.2) or an invocation context (5.3). Otherwise, it is a 
standalone expression. Where a poly reference conditional expression appears in 
a context of a particular kind with target type T (5), its second and third
operand expressions similarly appear in a context of the same kind with target
type T."

"The type of a poly reference conditional expression is the same as its target type"
Fix and tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=f200f8d976d56839e6f0d721d690d85cc3afbb03
