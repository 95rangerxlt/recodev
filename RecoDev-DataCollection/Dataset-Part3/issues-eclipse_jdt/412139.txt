Links in Javadoc hover/view headers don't resolve fully-qualified types correctly.

Many examples can be found in org.eclipse.jdt.core.dom.ASTConverter, e.g. recordNodes(ASTNode node, org.eclipse.jdt.internal.compiler.ast.ASTNode oldASTNode).

The Javadoc tool generates title attributes like "class or interface in org.eclipse.jdt.internal.compiler.ast" for links to types. We could also generate titles, but we better just use "in <package>" syntax.

Links in Javadoc hover/view headers don't resolve fully-qualified types correctly.

Many examples can be found in org.eclipse.jdt.core.dom.ASTConverter, e.g. recordNodes(ASTNode node, org.eclipse.jdt.internal.compiler.ast.ASTNode oldASTNode).

The Javadoc tool generates title attributes like "class or interface in org.eclipse.jdt.internal.compiler.ast" for links to types. We could also generate titles, but we better just use "in <package>" syntax.
> The Javadoc tool generates title attributes like "class or interface in
> org.eclipse.jdt.internal.compiler.ast" for links to types. We could also
> generate titles, but we better just use "in <package>" syntax.

Usually, the full qualification is not that interesting, so the Javadoc hover should keep showing just the simple name. But even if the links are fixed and lead to the right type, seeing the full name is still tedious (click the link, read the name, go back). Therefore, we should also add a "title" attribute to the <a href="..."> element, so that the qualifier can be seen without following the link.

The Javadoc tool's "class or interface in <qualifier>" is a bit clumsy. A better title text is just "in <qualifier>". The "title" attribute is only to be generated if a qualifier is actually available.
Created attachment 234338
Proposed patch

With this patch, links in Javadoc view/hover resolve fully qualified types correctly. 'title' attribute is generated if the method parameter is qualified, which the user can see while hovering over the parameter link in the Javadoc. Manually tested with different combination of method parameters both in source and binary. Also tested java.util.Map.Entry, my.pack.Map.Entry and my.pack.Outer.Entry.
The variable "qualifiedTypeName" has a wrong name. It doesn't contain a qualified type name.

The lastIndexOf(..) and the string concatenation "Signature.C_DOT + typeName" are unnecessary.

The "createHeaderWithTitleLink" method name sounds strange. It's not a "header with title" or a "title link", but it's a HeaderLinkWithTitle. Or just overload createHeaderLink(..).

The title text message "in {0}" needs to be externalized.

The new link is missing "class='header'". Write the implementation in a way that "class='header'" only appears once in the source code.

Example (in source):
	void foo(Thread.State s) {}
	void foo(Map.Entry<String, Date> e) {}

Why does "State" have an "in Thread" title, but "Entry" doesn't have an "in Map" title? I would expect the second title as well.
Created attachment 234472
Updated Patch

(In reply to comment #3)
> The variable "qualifiedTypeName" has a wrong name.
modified to signatureSimpleName.

> The lastIndexOf(..) and the string concatenation "Signature.C_DOT +
> typeName" are unnecessary.
I have modified the logic to find the package name. When the method is from a binary with parameter type signature: <Ljava.util.Map$Entry;>, then: typeName="Entry"; signatureQualifier="java.util"; signatureSimpleName="Map.Entry";  The title to be generated is "java.util.Map". In this case i have to use indexof and string concatenation to derive the package name. Let me know how to make it better.

> The "createHeaderWithTitleLink" method name 
overloaded createHeaderLink(..).
 
> The title text message "in {0}" needs to be externalized.
Externalized <title='in {0}'>

> The new link is missing "class='header'". Write the implementation in a way
> that "class='header'" only appears once in the source code.
Done

> Example (in source):
> 	void foo(Thread.State s) {}
Done

Markus, please have a look.
(In reply to Manju Mathew from comment #4)
> > The lastIndexOf(..) and the string concatenation "Signature.C_DOT +
> > typeName" are unnecessary.

Such magic indexOf(..) calls are hard to read and can often be broken by devious input. Better go the safe way and only call substring with arguments where you can guarantee that they won't fail.

For the refTypeName, better just use the full typeSig (rather than splitting it up and concatenating it again).

> > The title text message "in {0}" needs to be externalized.
> Externalized <title='in {0}'>

No, avoid externalizing HTML (translators should not have to realize that "title" is not something to translate).

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=19200f37a9b0059f19993e5bc4ae3a9b8d0390c7
