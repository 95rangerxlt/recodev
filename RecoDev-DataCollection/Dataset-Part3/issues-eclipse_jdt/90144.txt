Build 3.1m6

On following testcase:

class SuperX {
    static void notOverridden() {
        return;
    }
}

public class X extends SuperX {
    static void notOverridden() {
        return;
    }
} 

Editor shows an override indicator in front of X#notOverriden() where outliner
does not.

Both should agree. Strictly speaking static methods do not override each other,
however these are somewhat related in the sense as they induce constraints on
each other: e.g. the submethod could not be made non-static.

Build 3.1m6

On following testcase:

class SuperX {
    static void notOverridden() {
        return;
    }
}

public class X extends SuperX {
    static void notOverridden() {
        return;
    }
} 

Editor shows an override indicator in front of X#notOverriden() where outliner
does not.

Both should agree. Strictly speaking static methods do not override each other,
however these are somewhat related in the sense as they induce constraints on
each other: e.g. the submethod could not be made non-static.
Martin, can you comment on this. I always thought that when the editor is open
both the outliner and the editor are using the AST to compute the override
indicator. So they should be in sync.
fixed > 20050405
