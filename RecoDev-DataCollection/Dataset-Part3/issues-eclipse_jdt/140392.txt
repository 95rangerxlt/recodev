3.2 RC3

Bug 139899 has disabled the button, but we should look whether we can support that feature in 3.3.

3.2 RC3

Bug 139899 has disabled the button, but we should look whether we can support that feature in 3.3.
*** Bug 290296 has been marked as a duplicate of this bug. ***
(In reply to bug 290296 comment #0)
> Is it possible to enable this feature for JUnit 4?

In software, everything is possible ;-). But it's a bit of work, since JUnit 4 completely changed the way tests are being executed.

Unfortunately, we currently don't have the resources to look into this, but we could review a good quality patch. See
- JUnit3TestLoader in org.eclipse.jdt.junit.runtime and
- JUnit4TestLoader in org.eclipse.jdt.junit4.runtime
I'd be willing to look at this, but not immediately.  To get this feature into Helios, what kind of time frame would be required?
> I'd be willing to look at this, but not immediately.  To get this feature into
> Helios, what kind of time frame would be required?

As always: The sooner we have it, the bigger the chance. After M6 (i.e. after around March 1st), chances are dwindling rapidly.
*** Bug 192738 has been marked as a duplicate of this bug. ***
Created attachment 150056
Patch to implement this feature

This patch includes implements the feature.

Some information:

1. This patch patches 2 projects: o.e.jdt.junit and o.e.jdt.junit4.runtime
2. The patch to o.e.jdt.junit is simple.  Just patches TestRunnerViewPart to ensure that the button is enabled properly
3. The patch to o.e.jdt.junit4.runtime is slightly more complex.  I created a FailuresFirstSorter, which does the comparing of two tests.  The rest of the patch just ensures that the sorter is used properly.
4. I included a set of tests.  Since I didn't know where they should go, I added a new source folder.
5. My only concern is that the algorithm used for FailuresFirstSorter is n^2 over the number of tests.  This is because I wanted to keep the class stateless.  I don't know what kind of overall impact this will have on performance.
What is the status of this patch? Will anyone be able to look at it and potentially apply it?
Thanks for the patch. I had to rewrite JUnit4TestReference and the subclasses a bit. We use only official API -- org.junit.internal.requests.SortingRequest is a no-go.

Tests for the org.eclipse.jdt.junit* plug-ins are in org.eclipse.jdt.ui.tests. Unfortunately, we don't run JUnit 4 at this time, so I just put it into a new folder 'junit4' so we can add it later.

Released in HEAD.
.
Thanks.  A number of people using the groovy-eclipse plugins have been asking for this.  And now they will have it.
Should this work for Errors also? If so it doesn't seem to be working in 4.3M5 with JUnit 4 (the included 4.10 library). Was there a regression?

It pretty clearly does not run error tests first. I have 3 failures out of 166 tests. If I click on "Rerun Test - Failed First" I see 135 successes before the first error.
(In reply to comment #11)
> Should this work for Errors also? If so it doesn't seem to be working in
> 4.3M5 with JUnit 4 (the included 4.10 library). Was there a regression?
> 
> It pretty clearly does not run error tests first. I have 3 failures out of
> 166 tests. If I click on "Rerun Test - Failed First" I see 135 successes
> before the first error.

2nded using juno 4.22 and junit 4.11
If something doesn't work as expected, please file a new bug with concrete steps to reproduce.

Note that test execution order is not reliable any more with Java 7 and later, see e.g. bug 386453. That could be part of the issue. Other issues could be undocumented design decisions in FailuresFirstSorter and FailuresFirstPrioritizer (IIRC, at least the latter only reorders TestSuites, but not contained individual tests).
