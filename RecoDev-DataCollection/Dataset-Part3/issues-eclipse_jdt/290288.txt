JDT needs to supply breakpoint editors/detail panes for Java breakpoints once the breakpoint view supports pluggable detail panes.

JDT needs to supply breakpoint editors/detail panes for Java breakpoints once the breakpoint view supports pluggable detail panes.
Created attachment 153684
patch

Work in progress for Java breakpoint detail panes. Includes a breakpoint condition editor, method breakpoint and watchpoint detail panes. It extends the funtion of IDetailPane with IDetailPane3 that supports the ISaveable notion. The user sees the view turn "dirty" when a breakpoint is edited and uses Ctrl-S to save changes.
Created attachment 154793
updated patch

With this update, controls such as check boxes and drop downs are applied to the breakpoint immediately, whereas text boxes (conditional expression, hit count) required CTRL-S to save.
Created attachment 154820
updated for HEAD
This is pretty cool. 

What would be even cooler is if there was some way that any breakpoint could take advantage of the UI in the detail panes. For example any breakpoint that implemented an interface like ICondition could get the condition widgetry for free, etc, etc.
Created attachment 154890
adds pane for exception breakpoints
Created attachment 154895
clean up javadoc & API for condition editor
Released to HEAD along with API addition of IDetailPane3, to allow for interaction with saveable detail panes.
Note: I removed the default (text/label) detail pane for breakpoints and breakpoint containers - I don't think it added any value.
Overall I really like the option of editing breakpoint settings in the detail pane.  I also think that for some use cases it's good to have the saveable part workflow available.  

For JDT breakpoint editing, I think the feature could use some polish:

- The dialog controls look a bit out of place inside a view, form controls (with the text area background) would look more consistent.
- The detail panes should have a scroll bar when made too small.
- I would prefer to see all edit options in a single detail pane rather than using separate detail panes because switching detail panes is not obvious when you're in them.  The controls can be made more compact using an expandable composite.
- It's not obvious that the save action needs to be used to save the edits made in the detail pane, especially since some edits require saving and some don't.  If saving is required I would prefer to see a "save" button right in the detail pane.  Or even better, the should be performed when the text area looses focus as in a cell editor.  Currently, changing another setting (like the suspend policy) after changing hit count saves the hit count, changing selection in view saves the hit count, but activating another view does not.
- There is no feedback when an invalid value is entered for hit count.  I think it would be good to bring up a dialog to inform the user that the new value was rejected.  This is not an ideal workflow but cell editors do it so there's a precedent.
