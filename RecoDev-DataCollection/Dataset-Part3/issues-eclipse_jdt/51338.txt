Eclipse is the best IDE for XP - and one of the things it supports best is Test-
Driven Development. However, in Eclipse 3.0, creating a JUnit test is counter 
to the philosophy of TDD and unusable. Although, its really nice to be able to 
bring JUnit to the buildpath, we find no use for having to specify the class 
being tested and have stubs generated. Thats not the way TDD is done.

I can understand that some people might find the test-after approach useful, 
but you could at least support a simple testcase which does not depend on any 
class. Actually, if you don't do that, and just allow importing of JUnit into 
the classpath of any project, that itself would be a big help.

Regards,
Somik

Eclipse is the best IDE for XP - and one of the things it supports best is Test-
Driven Development. However, in Eclipse 3.0, creating a JUnit test is counter 
to the philosophy of TDD and unusable. Although, its really nice to be able to 
bring JUnit to the buildpath, we find no use for having to specify the class 
being tested and have stubs generated. Thats not the way TDD is done.

I can understand that some people might find the test-after approach useful, 
but you could at least support a simple testcase which does not depend on any 
class. Actually, if you don't do that, and just allow importing of JUnit into 
the classpath of any project, that itself would be a big help.

Regards,
Somik
You can always manually add the Junit library to a class path (on the Java Builc
path page). What are you missing?
Hmm.. my reply didn't seem to make it - here goes again.

The manual way is what we do. The repository pattern that has become popular is 
to create a lib directory, put in junit.jar, and add it as a jar (and not 
external jar) so as to maintain the relative link. Then, the lib directory is 
checked in along with the rest of the project into cvs.

What I liked about being able to add JUnit to your path in 3.0, is not needing 
the actual jar in your project. In 2.x, the TestCase feature was fine although 
it didn't have the option to add a jar automatically.

However, 3.0 is embarassing - you cannot go through the wizard if you do not 
have an existing class for which you wish to write a test. This is pretty much 
the premise of test-driven development. You write a test first, and use the 
test to drive you to create any classes you need. Eclipse does this nicely with 
the help of the light bulbs.

I have given a talk about Being Extreme with Eclipse, which was well-received. 
I couldn't demonstrate the JUnit wizard as it is unusable for TDD and would 
have been embarassing. Have you taken feedback from other users? Do people 
actually find this useful?

I am hoping that you will take off the restriction of needing a real class 
altogether from the wizard. We do not want test code stubs to be auto-generated.

I hope I have been able to communicate clearly the issue with the JUnit wizard -
 its presence is not good for Eclipse, it sends out a message to the community 
that the developers of this wizard are not aware of TDD.
<Some portions of my message got trimmed>
Hmm.. my reply didn't seem to make it - here goes again.

The manual way is what we do. The repository pattern that has become popular is 
to create a lib directory, put in junit.jar, and add it as a jar, not external 
jar, so as to maintain the relative link. Then, the lib directory is checked in 
along with the rest of the project into cvs.

What I liked about being able to add JUnit to your path in 3.0, is not needing 
the actual jar in your project. In 2.x, the TestCase feature was fine although 
it didn't have the option to add a jar automatically.

However, 3.0 is embarassing - you cannot go through the wizard if you do not 
have an existing class for which you wish to write a test. This is pretty much 
the premise of test-driven development. You write a test first, and use the 
test to drive you to create any classes you need. Eclipse does this nicely with 
the help of the light bulbs.

I have given a talk about Being Extreme with Eclipse, which was well-received. 
I couldn't demonstrate the JUnit wizard as it is unusable for TDD and would 
have been embarassing. Have you taken feedback from other users? Do people 
actually find this useful?

I am hoping that you will take off the restriction of needing a real class 
altogether from the wizard. We do not want test code stubs to be auto-generated.

I hope I have been able to communicate clearly the issue with the JUnit wizard -
 its presence is not good for Eclipse, it sends out a message to the community 
that the developers of this wizard are not aware of TDD.
Somik - the Class To Test field is optional, so I don't see how this wizard 
violates TDD.

Try this:
1) create a new Java project
2) bring up the new test case wizard
3) enter the name of the test case
4) press finish
The new test case is generated without needing a class to test.

(as an aside we are investigating in showing which fields of a wizard are 
mandatory).
Oh.. just tried it in M5 and it works fine.
I could have sworn I was getting a dialog box saying I hadn't specified a class 
to test (was this enabled recently?)

I am delighted that its optional. I take back my comments about the Wizard - my 
apologies.
I went back to some M3 and I realize I was wrong - I must have accidentally 
typed something in the class edit box and seen the error message (class must 
exist in the project) and gotten confused by that.

My apologies again - I will be giving this talk at a couple of other places 
showing people how powerful Eclipse is. I will be sure to show these wizards.

Here's a request - is it possible to make the JUnit wizard more accessible - 
perhaps a T icon next to C, I ..
no problem.

The New TestCase wizard is available in the toolbar in the new class dropdown. 
However, it wasn't yet available in the New menu. This is now fixed.
