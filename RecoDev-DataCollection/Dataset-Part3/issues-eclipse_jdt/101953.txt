(RC4)

This came up in the newsgroup some time ago, but I can't find a bug.

The junit view will truncate long trace messages, making comparisons of long
assertions impossible within eclipse. If the messages are copied to the
clipboard and then pasted into an editor, the full message is included.

The junit view should never truncate messages.

(RC4)

This came up in the newsgroup some time ago, but I can't find a bug.

The junit view will truncate long trace messages, making comparisons of long
assertions impossible within eclipse. If the messages are copied to the
clipboard and then pasted into an editor, the full message is included.

The junit view should never truncate messages.
Created attachment 24054
Screen shot of junit view with truncation
Here is the full trace output if obtained via the clipboard (the screen shot has
already been attached to this bug):

junit.framework.AssertionFailedError: 
  Unexpected method call
sendOrderEvent(BasicExchangeOrderEvent[exchangeOrderId=sim-bkaplan.20050613.equity.INTC.32,orderId=INTC-1118681624673-0,cancelId=<null>,accountId=sim-acct1,symbol=INTC,openClose=OPEN,longShort=LONG,state=COMPLETE,priceQualifier=MARKET,price=10.010000,quantity=0,remainingQuantity=0,fillQuantity=0,fillPrice=0.000000,route=SIM,timestamp=<null>]):
   
sendOrderEvent(BasicExchangeOrderEvent[exchangeOrderId=sim-bkaplan.20050613.equity.INTC.32,orderId=INTC-1118681624673-0,cancelId=<null>,accountId=sim-acct1,symbol=INTC,openClose=OPEN,longShort=LONG,state=COMPLETE,priceQualifier=MARKET,price=10.010000,quantity=0,remainingQuantity=0,fillQuantity=0,fillPrice=0.000000,route=SIM,timestamp=<null>]):
expected: 0, actual: 1
   
sendOrderEvent(BasicExchangeOrderEvent[exchangeOrderId=sim-bkaplan.20050613.equity.INTC.32,orderId=INTC-1118681624673-0,cancelId=<null>,accountId=sim-acct1,symbol=INTC,openClose=OPEN,longShort=LONG,state=LIVE,priceQualifier=MARKET,price=10.010000,quantity=0,remainingQuantity=100,fillQuantity=0,fillPrice=0.000000,route=SIM,timestamp=<null>]):
expected: 1, actual: 0
	at org.easymock.MockControl$4.invoke(MockControl.java:148)
	at org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:44)
	at $Proxy10.sendOrderEvent(Unknown Source)
	at
org.blackboxtrader.liquidityarbitrage.spi.omnipro.fixgate.FixgateOrderExecutionServiceGatewayApplication.onMessage(FixgateOrderExecutionServiceGatewayApplication.java:137)
	at
org.blackboxtrader.liquidityarbitrage.spi.omnipro.fixgate.FixgateOrderExecutionServiceGatewayApplicationTest.testExecutionReportOrderComplete(FixgateOrderExecutionServiceGatewayApplicationTest.java:130)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at
org.blackboxtrader.testsupport.junit.Log4jSupportTestCase.run(Log4jSupportTestCase.java:132)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)
	at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)
	at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)


David, can you please investigate...
Bug 74647 addressed this problem, but only for the first line of the trace.  The
root cause is in either Windows or SWT: more information at bug 77711.  There
are two possible workarounds until 77711 is resolved:

1) I could change JUnit to wrap any line of longer than 256 characters.  The
downside is that this would mean that the version copied to the clipboard would
also be wrapped.

2) The user could copy to clipboard and paste in the Java Stacktrace Console (or
somewhere else) whenever a line gets too long.  This would maintain the original
trace, with the obvious downside that part of the trace remains hidden.

Barry, what is the best solution for you right now?
Never mind, that was a false dilemma.

We can easily wrap the lines in the view and provide an unwrapped trace for
copying and pasting, which is the best of both worlds.  I'll attach a patch soon.
Created attachment 24221
Patch to junit plug-in

This wraps all lines that are too long to be displayed.  Choosing "Copy Trace"
from the context menu will still copy the original, unwrapped trace.
Created attachment 24222
Patch to the jdt.ui tests to prevent regression
Tobias,

Can you review at your convenience?  Thanks.
Reviewed and released patch by David

Fixed > 20050701
Thanks much!
You are welcome!
*** Bug 93094 has been marked as a duplicate of this bug. ***
