Build ID: 3.2.2 M20070212-1330

Steps To Reproduce:
1. configure Windows XP w/ two monitors
2. hover mouse over a Java variable that is near the right edge of the left monitor.
3. The popup javadoc window will span the two monitors making it imposible to use.


More information:
On a windows system w/ multiple monitors, the system appears to manage the display of popup windows such as tool tips so that the tooltip is fully displayed on a single monitor.  I've tried various combinations of positioning the window and hovering over a tool, or tab, and the tooltip always displays fully in the window containing the control.

In the event that a tool is visible in both monitors, such as when the main window is moved so as to spit a button or tool between two monitors, the tool tip will display fully on the monitor in which the mouse pointer is located.  For example, if you move the Eclipse window such that a an editor tab containing the file name is displayed in both monitors, then hovering the mouse over the tab will cause the file name to be displayed in the monitor that the mouse pointer is located in.

Windows appears to be aware of the coordinates for each monitor and insures that tool tips do not span the two monitors.

However, if you hover the mouse over a java method or class member, the javadocs that pop up will be displayed spanning the two monitors.  

Eclipse should detect multiple monitors and guarantee that popup windows such as these javadocs are fully displayed on a single monitor.

Build ID: 3.2.2 M20070212-1330

Steps To Reproduce:
1. configure Windows XP w/ two monitors
2. hover mouse over a Java variable that is near the right edge of the left monitor.
3. The popup javadoc window will span the two monitors making it imposible to use.


More information:
On a windows system w/ multiple monitors, the system appears to manage the display of popup windows such as tool tips so that the tooltip is fully displayed on a single monitor.  I've tried various combinations of positioning the window and hovering over a tool, or tab, and the tooltip always displays fully in the window containing the control.

In the event that a tool is visible in both monitors, such as when the main window is moved so as to spit a button or tool between two monitors, the tool tip will display fully on the monitor in which the mouse pointer is located.  For example, if you move the Eclipse window such that a an editor tab containing the file name is displayed in both monitors, then hovering the mouse over the tab will cause the file name to be displayed in the monitor that the mouse pointer is located in.

Windows appears to be aware of the coordinates for each monitor and insures that tool tips do not span the two monitors.

However, if you hover the mouse over a java method or class member, the javadocs that pop up will be displayed spanning the two monitors.  

Eclipse should detect multiple monitors and guarantee that popup windows such as these javadocs are fully displayed on a single monitor.
Hi JDT - is this your popup or ours?
We have fixed several bugs related to multi-monitor setup. Can you please check using M6 and reopen if this isn't fixed for you.
3.3 M6 is a significant improvement.  The entire popup is now displayed on a single monitor.  Very nice work.

There is a small nit remaining, but this has to do with the case where the main window is spanning two monitors.  Probably not an important case, but the Eclipse implementation is different in this regard from the standard Windows implementation.

If you locate the editor window such that a variable name spans two monitors, (Yes, I said this was a nit) then hover the mouse over the variable, the popup is always displayed in the left monitor regardless of the mouse position.  Actually, it appears that the popup is displayed in the monitor that contains the left edge of the object (variable name, ...) that the popup pertains to.  

For this case, the normal windows behaviour is to display the popup in the monitor that contains the mouse pointer.

As I said, this is really a nit.  I doubt that anyone would ever span any window over two monitors.  I mention it only for completeness.  

I'll leave it to the Eclipse team to reopen this bug if anyone thinks this merits more work.
