I was using Eclipse 3.2M4 and using JUnit 4.0. I was using their adapter to hook into Eclipse, via RightClicking on the JUnit test file, Selecting Run>JUnit Test.
This behavior went away when I updated to 3.2M5. Now the only way I can run the test is by going to the Run menu, and creating a brand new "Run Profile" for it.

I was using Eclipse 3.2M4 and using JUnit 4.0. I was using their adapter to hook into Eclipse, via RightClicking on the JUnit test file, Selecting Run>JUnit Test.
This behavior went away when I updated to 3.2M5. Now the only way I can run the test is by going to the Run menu, and creating a brand new "Run Profile" for it.
I would like to add my observations here.

I wanted to combine a class under test with its JUnit 4 test in the same class and run it in Eclipse.  The suite method returns a JUnit4TestAdapter, so that the built-in 3.8.1-runner can run it.  In addition, the class has a main method to use the function under test.

Unfortunately, Eclipse does not recognize the suite method if a main method is present.

Environment: Eclipse 3.2M5a with JRE1.5.0_05 on Windows XP Pro 2002 SP2

I tried these combinations:

classes MainAndSuiteAndTest, MainAndSuite with methods main, suite -> Run As... Java Application only

classes Suite and SuperSuite with method suite only: Run As... JUnit Test.

class SuiteAndTest with method suite: Run As... Run... (i.e. new launch configuration)  

I checked that the unrecognized suite methods can be used inside building another suite.


Created attachment 35979
Source code - 3 scenarios

Three scenarios in which the suite method is not recognized. See my note.
Please ignore the three cases above. I suspect that the criterion is:

Only a suite method in class with an import statement for junit.framework.test and an unqualified return type "Test" is recognized. 
If the return type of the suite method is written as a qualified type name as junit.framework.Test, the method is not recognized; there may be a import statement in that compilation unit.

This happened to be implicit in my previous scenarios.


This class is recognized as expected:

package whf.junit4.repro4;
import junit.framework.Test;
public class SuiteImported { 
	public static Test suite() {
		return null;
	}
}


This class is not recognized as a JUnit Test Suite

package whf.junit4.repro4;
public class SuiteQualified { 
	public static junit.framework.Test suite() {
		return null;
	}
}


This class neither:

package whf.junit4.repro4;
import junit.framework.Test;
public class SuiteQualifiedAndImported { 
	public static junit.framework.Test suite() {
		return null;
	}
}


Nice feature, wouldn't know how to recognize that difference intentionally.

The JUnit 4.0 is in the classpath, but not the JUnit 3.8.1 JAR.
Fixed for I20060427-2000.

Launching JUnit4 tests is now supported native (without the adapter). Switch the Test Loader in the launch configuration dialog, or create a new lanuch configuration to use it.

Wolfgang, the comments about the qualified return types of the suite method are a separate issue. Could you please file a new bug report if this is still the case with I20060427-2000 or later?
