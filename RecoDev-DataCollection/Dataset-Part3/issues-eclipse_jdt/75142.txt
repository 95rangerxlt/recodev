Hi, I'm responsible of the Hyades test UI plugins and in charge of this new 
feature (already discuss between Hyades' committers and you).
Can you contact me to discuss on how we can engage this. 
Thanks

Hi, I'm responsible of the Hyades test UI plugins and in charge of this new 
feature (already discuss between Hyades' committers and you).
Can you contact me to discuss on how we can engage this. 
Thanks
Hi - I'm maintaining the JDT JUnit plug-ins. Can you please provide some more 
information about this feature.
Hi Erich,
I guess you are aware of Hyades. It's a framework for test and profiling, 
based on mainly 5 models (build on top of EMF)
 - a trace model (for profiling)
 - a statistical model
 - a log model
 - a test model
 - an execution model
Only the 2 last one are interesting for the feature
A couple of views and editors are availiable for use any file based on one of 
these models. All are extendable. A Hyades specific Launch configuration is 
also availiable to run any Hyades test.
The test model terminology is aligned with the UML2 Testing Profile, which 
could be confusing for a JUnit-adict (a test case in UML2TP is a test method 
in JUnit, and a test suite is a test case or a test suite in JUnit)

What you run in Hyades is a test suite (.testsuite extention) which contains a 
Test behavior (the JUnit java file in our case) and a deployment (the test 
could be executed remotly, using the Remote Agent Controller - RAC). The 
execution must produce .execution file (based on the execution model). An 
execution history viewer can display its content.
 
The feature targets the aligment of the existing JUnit integration on top of 
Hyades, but we do not want modify the current user experience, at least in the 
creation and execution of the test scripts (reporting could be improved)

More technically, this implies:
- For the Test Suite creation:
   o Creation of the .testsuite as the same location than the test script when 
we create the JUnit test case (wizard “JUnit test case”). In the Package 
Explorer, the .testsuite files are filtered. They will be accessible only in 
the Test Explorer.
   o Wizard “JUnit test suite”: ditto (a JUnit test suite is also a Hyades 
test suite which contains only other Hyades test suite).
   o The JUnit launch configuration should be also able to create the Hyades 
test suites (and others artifacts, see later) in case of re-run of existing 
JUnit test (the objective is to avoid an import features: an old JUnit script 
will be executed as it is on top of Hyades)
- Test Suite Editor:
   o Need a specific test suite editor for JUnit with a direct access to the 
test behavior (the test script).  
   o What is suppressed in the current JUnit integration: 
       . the behavior editing (loops, invocations), 
       . the generation from the behavior
- Others test artifacts (deployment, location…)
   o 2 modes of execution:
       . local mode (as it is today): the test is executed on the same machine 
in a new JVM
       . remote mode: the test is executed on a remote machine.
   o By default, there is no deployment. The launch configuration creates 
automatically the necessary deployment and location for executing the test on 
the same machine in order to avoid modification of the user experience
   o The user has the capability to update the deployment in order to  execute 
the test remotely. 
   o There is a need to have a specific deployment editor in order to replace 
some information which are in the current JUnit launch configuration  
- Launch configuration:
   o Creating of a JUnit launch configuration based on the existing one for 
JUnit (not the Hyades one)
   o Possibility to add an Hyades JUnit launch configuration which allow to 
persist the configuration we want to launch.
- Execution:
   o Local execution must be done without the RAC (we don’t want that the user 
must be obliged to install the RAC)
   o Remote execution must be done with the RAC (as it is now)
   o This implies important impact on the runtime & the loader (test execution 
harness) which must be able to capture fragments directly from the test.
   o The runtime must be updated to generate Hyades fragments (reuse of the 
Hyades runtime without fragments relative to the behavior)
- Reporting:
   o Execution viewer could be the basic report and could replace the JUnit 
view, with the addition of what Junit users have today: progress bar + stack
   o The current execution file is automatically opened during execution (same 
user experience of what we have today) 
   o The reporting could be improved with the addition of charts or pies (with 
JScrib) and table.
   o Coverage and performance info could also be added (the JUnit launch 
configuration already exists under the Profiling menu: updating the standard 
one must update this one) 
   o An export could also be implemented

Hi Dominique,

One challenge we have is that the Eclipse platform doesn't have Hyades as a 
pre-requisite (and I don't see that we can change this). This means we have to 
provide some extension points that will allow you to plug-in Hyades specific 
behaviour from a hyades plug-in. 


<req1>
   o Creation of the .testsuite as the same location than the test script when 
we create the JUnit test case (wizard “JUnit test case”). In the Package 
Explorer, the .testsuite files are filtered. They will be accessible only in 
the Test Explorer.
</reg1>
This means you want to do some additional processing when a test case got 
created. This could be provided by a "postprocessing extension point". It 
would pass the generated test case name to some object, which could then 
perform additional steps like creating a .testsuite file etc.

Question: is the expectation that this post processing is always done when 
Hyades is installed. Otherwise there needs to be some UI to enable the Hyades 
support.

You already can contribute a filter to the package explorer to hide 
the .testsuite files.

<req2>
   o Wizard “JUnit test suite”: ditto (a JUnit test suite is also a Hyades 
test suite which contains only other Hyades test suite).
</req2>
same possible solution as for req1

<req3>
   o The JUnit launch configuration should be also able to create the Hyades 
test suites (and others artifacts, see later) in case of re-run of existing 
JUnit test (the objective is to avoid an import features: an old JUnit script 
will be executed as it is on top of Hyades)
</req3>
I'd suggest having a separate Hyades JUnit Launch configuration to address 
this. The launching behaviour of a Hyades test is signficantly different and 
we should not try to merge all this into the existing JUnit launch config. 
Notice, there already is a special launch configuration for running plug-in 
tests (pde junit) which builds on top of the existing JUnit launching support 
(this is currently done using internal API).

<req4>
- Test Suite Editor:
   o Need a specific test suite editor for JUnit with a direct access to the 
test behavior (the test script).  
   o What is suppressed in the current JUnit integration: 
       . the behavior editing (loops, invocations), 
       . the generation from the behavior
</req4>
I assume this will be an editor that is contributed by some Hyades plug-in 
for .testsuite files? This means no changes are required in the existing JUnit 
support.

<req5>
- Launch configuration:
   o Creating of a JUnit launch configuration based on the existing one for 
JUnit (not the Hyades one)
</req5>
This could be supported in the Hyades specific launch config tab, i.e., you 
provide the option to "import"  or reference a vanilla JUnit launch config?

<req6>
   o Possibility to add an Hyades JUnit launch configuration which allow to 
persist the configuration we want to launch.
</req6>
yes, this is what I suggest as a solution for requirement 3 above.

<req7>
- Execution:
   o Local execution must be done without the RAC (we don’t want that the user 
must be obliged to install the RAC)
   o Remote execution must be done with the RAC (as it is now)
   o This implies important impact on the runtime & the loader (test execution 
harness) which must be able to capture fragments directly from the test.
   o The runtime must be updated to generate Hyades fragments (reuse of the 
Hyades runtime without fragments relative to the behavior)
</req7>
I assume that this could all be done in the Hyades specific Launch config type 
and no changes are required in the existing JUnit support.

<req8>
- Reporting:
   o Execution viewer could be the basic report and could replace the JUnit 
view, with the addition of what Junit users have today: progress bar + stack
   o The current execution file is automatically opened during execution (same 
user experience of what we have today) 
   o The reporting could be improved with the addition of charts or pies (with 
JScrib) and table.
   o Coverage and performance info could also be added (the JUnit launch 
configuration already exists under the Profiling menu: updating the standard 
one must update this one) 
   o An export could also be implemented
</req8>
This is all good stuff, but these not require any modifications to the 
existing support, and can be contributed from the Hyades layer.
FYI here a links on articles abut launch configurations:
http://www.eclipse.org/articles/Article-Launch-Framework/launch.html
http://www.eclipse.org/articles/Article-Java-launch/launching-java.html
Erich, I let Julien answer to your questions. Thanks
Erich,
We are currently investigated all the extention points required in order to 
plug JUnit on top of Hyades. It seems to be huge! 
Regarding the fact that Hyades (now TPTP) is a top level project, do you think 
that migrating this plugin in TPTP could be an option ? 
Here are the pros I see doing this:
- TPTP is the testing framework of Eclipse, so it is the natural place to find 
JUnit
- the integration on top of TPTP will be facilitated
- every JUnit user will beneficiate of the enhencements
Cons:
- Eclipse core will ne not enought to run a Junit test; users must be obliged 
to add TPTP
Dominique, can you enumerate the extension point you will need. I'd like to 
understand how many extension points are needed and what the issues are. 

I don't see how we can move the jdt.junit plug-in out of the SDK. JUnit 
support is an integral part of Java tooling these days.
Hi Erich,

The answer below is made assuming that no architectural change occurs (i.e.
jdt.junit is still in SDK, and hyades.junit depends on it).

> This means you want to do some additional processing when a test case got 
> created. This could be provided by a "postprocessing extension point". It 
> would pass the generated test case name to some object, which could then 
> perform additional steps like creating a .testsuite file etc.
This sounds good for the following requirements:
req1: Be able to create a .testsuite file upon TestCase creation
req2: Be able to create a .testsuite file upon TestSuite creation
I'm adding the following requirements that Dominique didn't mention:
<req9>Be able to update the .testsuite upon TestSuite update (Recreate
TestSuite)</req9>

> Question: is the expectation that this post processing is always done when 
> Hyades is installed. Otherwise there needs to be some UI to enable the Hyades 
> support.
Yes. The idea is to provide immediate integration of any Junit test into the
Hyades Framework, thus promoting the use of Hyades.

> I'd suggest having a separate Hyades JUnit Launch configuration to address 
> this. The launching behaviour of a Hyades test is signficantly different and 
> we should not try to merge all this into the existing JUnit launch config. 
This is indeed what we have in mind. Actually we don't need to create a specific
Hyades Junit Launch configuration since there is a generic Hyades launch
configuration that is able to launch any type of Hyades test. The key difference
between the two launch configurations is that in Hyades launch configuration,
you only choose 1) the test to launch and 2) the deployment used for running
this test. The "deployment" file contains any information required for deploying
and running the test. In the case of a Junit test, the deployment would contain
all the information that you choose in other tabs in a Java launch configuration
(e.g. VM arguments, classpath, JRE, environment variables...).

Taking these considerations into account, the implementation of the Hyades Junit
launch configuration would consist in reading the .deployment file and creating
a temporary JDT Junit launch configuration that would launch the test.
This adds another requirement:
<req10> Provide the API for writing Junit-properties to a JDT Junit launch
configuration.</req10>

req3 roughly describes the opposite scenario: when the user launches a JDT Junit
test, we'd like to on-the-fly create a .testsuite and .deployment file, if they
do not already exist. This is a kind of seamless import of existing Junit test
into Hyades. The solution to this problem seems to be similar to the
"postprocessing extension point".

> <req4>...</req4>
> This means no changes are required in the existing JUnit support.
Agreed. This is not a requirement on your side.

<req5>, <req6>
It seems we're on the same page about this topic. Again, these requirements are
on Hyades side.

<req7>, <req8>
This is where things are getting tricky.
As Dominique mentionned, we are proposing to replace the existing runtime and
viewer by Hyades components. The added value of these components are:
- the ability to run tests on a remote machine
- the ability to persist test results
To do so, Hyades has it own runtime. The runtime serializes test results as XML
fragments and send them back to eclipse through the RAC (generic communication
tool for inter-agent communication). These fragments are loaded by Eclipse into
an execution history model, which has its own extensible viewer.
Keeping the current architectural constraints in mind, I propose the following:
<req11>
1) The runtime and infrastructure for viewing results become extensions.
jdt.junit defines the extension point.
2) jdt.junit provides its own extension (the current runtime, communication
mechanism through sockets, and viewer).
3) Hyades provides an additional extension implemented with its own runtime,
using the RAC and the execution history model.
4) The jdt.junit launch configuration offers a UI mechanism to select which
runtime/viewer to use among the available extensions (JDT | Hyades).
</req11>
The drawback of this proposal is that we end up with a coarse-grained 
integration, with two alternate mechanisms, which goes against our initial
purpose of making JDT-Junit and Hyades converge. I have also considered a more
fine-grained integration, but, considering that we don't have the extension
point mechanism available for the runtime, and that it would require too many
interface points between the two plugins, I think this solution is the only
sensible.
Hi Julien,

thanks for the detailed analysis.
The crux are req7 and req8. They illustrate the challenges of following down the
"integration" path. The issue is that the resulting solution will still only be
partially integrated and there are issues both at the UI and the implementation
level. 

Let me therefore step back again and look into alternatives. Currently we have
two separate solutions:
a) plain junit 
b) hyades junit (I haven't seen it yet, so I'd really like to see demo)
I assume that both a) and b) are consistent in itself. However, what is
unpleasant is to have two different ways to do the same things, i.e., running
tests. 

The approach we have explored up to now is trying to merge a) and b) with the
consequences (req7/8) identified above.

What about the following solution. When "hyades junit" is installed then the
user has the option to hide the "plain junit". As a consequence there are no
longer two ways to do the same thing. 

Since Eclipse 3.0 there is a way to do so using activities/cababilities. The
hyades plug-in could define a junit activity. When the activity is disabled then
all the "plain junit" contributions are filtered from the UI.

Bottom line, rather than having a "merged" unhappy solution, we should have two
happy solutions with the option to hide one, when it isn't needed. 
Based on the discussions with Julien and Dominique the plan is to make the JUnit
Wizard Pagess API so that Hyades can reuse them in their wizards.
The following wizard pages are now API: Clients can use them in their own wizards

NewTestCaseWizardPageOne.java
NewTestCaseWizardPageTwo.java
NewTestSuiteWizardPage.java

released > 20050325 (for M6)

moving bug back to erich to decide if that's all what was needed
Marking the PR as fixed. If more API is need it can't happen in 3.1 anyways
since M6 is API freeze. Please open a separate PR if more API is needed.
