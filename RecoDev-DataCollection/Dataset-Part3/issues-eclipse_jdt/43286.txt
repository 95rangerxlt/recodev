There are still some problems with with formatting of javadoc in I20030917:

- empty lines are removed -- this is not (necessarily) good for readability -- 
you might even add <p> automatically here (a new option?)

- format code snippets adds additional "*" -- see test output in options dialog

- function of "Indent Javadoc tag descriptions not obvious

- the following is indented wrong, I believe,

    /**
     * Removes this <code>CQLPane</code>.
     */
    public void remove() {
    }

  as it becomes

    /**
     * Removes this <code>CQLPane</code>. */
    public void remove() {
    }

  This seems to happen every time the last line isn't a @tag line.

The rest really is enhencements:

- new option to put <p> on same line as following paragraph. See example below.

- new option to add empty lines around <ul> and <li> lines. See example below.

- the default comment for inherited methods should be left unaltered

        /* (non-Javadoc)
         * @see com.nettest.mq.util.CollectionChangeListener#collectionChanged
(com.nettest.mq.util.CollectionChangeEvent)
	 */


/**
 * This class is a simple encapsulation of the different
 * models needed to construct the header grid.
 * 
 * <p>The header grid has the following characteristics:
 * 
 * <ul>
 * 
 * <li>It has two levels: one for the hierarchy level and one for the 
attribute.
 * 
 * <li>It allows for resizing and draging of the headers
 * 
 * <li>It allows for editing of the header names (with direct consequence on
 * the hierarchy levels and attributes).
 * 
 * <li>It uses icons for the attributes to show the type, any sorting and any 
filtering.
 * 
 * <li>
 * 
 * </ul> 
 * 
 * <p>Note that the class does not enherit from {@link 
com.eliad.swing.extend.JAdvancedGridHeader}
 * because this later class is <code>final</code>.
 */


Other than that, no comments... :-)

There are still some problems with with formatting of javadoc in I20030917:

- empty lines are removed -- this is not (necessarily) good for readability -- 
you might even add <p> automatically here (a new option?)

- format code snippets adds additional "*" -- see test output in options dialog

- function of "Indent Javadoc tag descriptions not obvious

- the following is indented wrong, I believe,

    /**
     * Removes this <code>CQLPane</code>.
     */
    public void remove() {
    }

  as it becomes

    /**
     * Removes this <code>CQLPane</code>. */
    public void remove() {
    }

  This seems to happen every time the last line isn't a @tag line.

The rest really is enhencements:

- new option to put <p> on same line as following paragraph. See example below.

- new option to add empty lines around <ul> and <li> lines. See example below.

- the default comment for inherited methods should be left unaltered

        /* (non-Javadoc)
         * @see com.nettest.mq.util.CollectionChangeListener#collectionChanged
(com.nettest.mq.util.CollectionChangeEvent)
	 */


/**
 * This class is a simple encapsulation of the different
 * models needed to construct the header grid.
 * 
 * <p>The header grid has the following characteristics:
 * 
 * <ul>
 * 
 * <li>It has two levels: one for the hierarchy level and one for the 
attribute.
 * 
 * <li>It allows for resizing and draging of the headers
 * 
 * <li>It allows for editing of the header names (with direct consequence on
 * the hierarchy levels and attributes).
 * 
 * <li>It uses icons for the attributes to show the type, any sorting and any 
filtering.
 * 
 * <li>
 * 
 * </ul> 
 * 
 * <p>Note that the class does not enherit from {@link 
com.eliad.swing.extend.JAdvancedGridHeader}
 * because this later class is <code>final</code>.
 */


Other than that, no comments... :-)
Please don't add more than one enhancement or bug into one PR since we might
well decide to fix/implement one of them but not all. However if they are all
bundled it will probably not be done ;-)

Problem 4 is bug 43164.

Tobias, please comment/handle problems 1 - 3 and ignore the enhancements since
they should be reported by individual PRs.

>- the default comment for inherited methods should be left unaltered
I disagree with this one: why would you want the comments to be partially
formatted? I want to be able to add specify the default comment on one line and
without caring about formatting.
Regarding the reformating of the inherited comment, then please set the 
default format such that it is correctly formatted.

I'll add individual enhencements :-/
To 1): Empty lines are should not be used to format Javadoc, since HTML and 
therefore Javadoc does not recognize them. For that purpose use 
<p>,<pre>,<br>, ...
The idea to add another preference for auto inserting <p> is worth considering.

To 2): Fixed in newer builds

To 3): Label of these preferences is not yet definitive. Do you have some 
suggestions?

To 4): Fixed in newer builds

To 5): Not so common format. <p> as paragraph tag has also separating 
semantics. <p> on separate line looks nicer for the following comment (not 
quite correct, but widely used):

/**
 * paragraph
 * <p>
 * paragraph
 * <p>
 * paragraph
 */

It is also better visible on a separate line.

To 6): Using so many empty lines makes the comment look inhomogeneous and less 
readable. It is also not clear to me why making an exception with <ul><li>.

To 7): There is no reason to leave comments of inherited methods unformatted. 
To improve the format, the handling of @see tags has been moved from Javadoc 
to the general comment type multi-line. Fixed in newer builds.
Ad 1) Personally I use empty lines for both new paragraphs and just as a 
division of a longer paragraph. I would prefer a mode where empty lines are 
preserved for readability, but lines otherwise are filled as in the current 
build.

Ad 3) I don't yet understand the use of the option. In the sample code on the 
option page, it isn't clear, except that the option seems to add some 
additional indention...

Ad 5) I can only say that I personally perper to have blank lines between my 
paragraphs and list items. I find it easier to read and navigate. Again: One 
mans medicine...

Ad 6) Again, it is a matter of preference. It is not only for the <ul> tags, 
but also for the other lists: <nl> and <dl>. And while we are at it, before 
<pre> and after </pre> (and likeweise for other blocks (<quote>...)

Tobias, regarding 1) in comment 3:
I agree with Tonny regarding the empty lines. Please keep in mind that lots of
us actually read the code and not the resulting Javadoc. Your argument would be
100% correct if our editors would render it as HTML ;-) I often use whitespace
to format Javadoc an HTML for better readability and others do so as well.

Regarding 4.1 / 5: I also agree on the empty lines. We definitely consider 
introducing another preference. Then it is left to the developer whether to 
target condensed HTML code for the Javadoc compiler or well-readable comments 
for human beings. This option would also solve 4.5.

Regarding 4.6: Blocks are now separated by empty lines (<pre>,<quote>,..)

Regarding 4.3: As you mention, this preference adds some additional indentation 
to the description/explaining text of @param, @throws, @serialField, and other 
Javadoc tags which need a parameter. This is done to separate the parameter 
name even more from its description, as the preference to use a new line after 
the parameter already does.

e.g.

@param test This is a test  (with "test" being the parameter)

The preference mentioned above exactly controls the indentation behavior in 
this case:

@param test
         This is a test

<or>

@param test
       This is a test
Sounds good. I'm looking forward to see the next integration build.
Fixed > I20030924:
- Clear blank lines
- Format code snippets
- Indent Javadoc parameter descriptions
- Single line Javadoc comments

Rest are enhancements covered by bug #43290
Further comment on usage of <p>:

When extracting the Javadoc comments into an XML document, the proposed usage of 
<p> doesn't work, as there is no corresponding closing tag. Example:

/**
 * First paragraph<p>
 * Second paragraph
 */

is not a valid HTML/XHTML document. To my mind, there are two reasonable ways to 
write this correctly:

[1] Use XHTML

/**
 * <p>First paragraph</p>
 * <p>Second paragraph</p>
 */

[2] Use <p/>

/**
 * First paragraph<p/>
 * Second paragraph
 */


Both ways don't work well with the Eclipse code formatter. This is what it makes 
out of the examples:

[1]
// After code formatter:
/**
 * <p>
 * First paragraph
 * </p>
 * <p>
 * Second paragraph
 * </p>
 */

Moreover, the tooltip text for the comment contains a useless paragraph right at 
the start, and two consecutive paragraphs between comments.

[2]
// After code formatter:
/**
 * First paragraph<p />Second paragraph
 */

Effectively "<p/>" is not recognized as a paragraph tag.


SUGGESTED SOLUTIONS

a) Handle "<p/>" in the same way as "<p>".
b) (much more complicated) Do not add a newline after "<p>" if a corresponding 
"</p>" follows.
Please file a new bug report. Thanks.
