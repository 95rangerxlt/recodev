'Create as <Object>' where the object could be defined according to fuction
name.  ie 
myHashMap.put(someKey, something)

Ctrl-1 on myHashMap could popup listing, showing:
  create field as HashMap
  create field as TreeMap
  create field as Object

Comments?  

andy
andy@benow.ca

'Create as <Object>' where the object could be defined according to fuction
name.  ie 
myHashMap.put(someKey, something)

Ctrl-1 on myHashMap could popup listing, showing:
  create field as HashMap
  create field as TreeMap
  create field as Object

Comments?  

andy
andy@benow.ca
Moving to JDT/UI for comment.
Martin, we could indeed try to determine the type from a simpleName.
I would love to have such a feature, but there are some problems.

Quick fix would have to find out which type contains a method 'put(Object, Object)'
The search for this example takes over 5 seconds and returns (for my workspace)
500 results.
The search can't be performed when creating the proposals, it takes too long.
That means to suggest
  create field as HashMap
  create field as TreeMap
  create field as Object
would take seconds and also include hundereds of other results.

Dirk suggests to guess the type from the name, but I'm not so convinced of that yet.
What I see what we could do is that instead of using the search look at all type
binidngs existing in the current compilation unit. That means if you use Hashmap
or a subtype of it somewhere else in the file I would find Hashmap.put and could
suggest it.




Perhaps the ide could track the most commonly used classes by a developer within
some sort of 'profile'.  The searching, and results could then be restricted to
those objects which have the put(obj,obj) method and which have been used before
by the developer.  Perhaps the profile could have some sort of MRU sorting, and
ditch classes which have not been used in last 6mo orso.  

There's a couple problems I see with this, initially.  The UI may appear to be
somewhat indeterminant (ie 'it suggested a hashmap last time, but this time it's
not') and it's perhaps a boatload of complexity.  The class/developer Profiles
approach is quite generic and may be useful elsewhere, however.


added for I20040511.

I'm looking at all bindings that are in the CU. So if you already used HashMap
before, it will find it.
