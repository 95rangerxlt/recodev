java.lang.StringIndexOutOfBoundsException: String index out of range: -1
	at java.lang.String.charAt(String.java:444)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.isDifferent(CodeFormatterUtil.java:395)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.commentDifferent(CodeFormatterUtil.java:353)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.emulateNewWithOld(CodeFormatterUtil.java:317)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format2(CodeFormatterUtil.java:187)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format(CodeFormatterUtil.java:101)
	at
org.eclipse.jdt.internal.ui.text.java.JavaFormattingStrategy.format(JavaFormattingStrategy.java:86)
	at
org.eclipse.jface.text.formatter.ContentFormatter2.format(ContentFormatter2.java:806)
	at
org.eclipse.jface.text.formatter.ContentFormatter2.formatMaster(ContentFormatter2.java:661)
	at
org.eclipse.jface.text.formatter.ContentFormatter2.format(ContentFormatter2.java:487)
	at org.eclipse.jface.text.source.SourceViewer.doOperation(SourceViewer.java:668)
	at
org.eclipse.jdt.internal.ui.javaeditor.JavaSourceViewer.doOperation(JavaSourceViewer.java:124)
	at
org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:174)
	at
org.eclipse.ui.texteditor.TextOperationAction$1.run(TextOperationAction.java:122)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:84)
	at org.eclipse.ui.texteditor.TextOperationAction.run(TextOperationAction.java:120)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:842)
	at
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:509)
	at
org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:461)
	at
org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:408)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:847)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2294)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1975)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1506)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1482)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:246)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:139)
	at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:47)
	at
org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:242)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:84)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at org.eclipse.core.internal.boot.OSGiBootLoader.basicRun(OSGiBootLoader.java:239)
	at org.eclipse.core.internal.boot.OSGiBootLoader.run(OSGiBootLoader.java:665)
	at org.eclipse.core.internal.boot.OSGiBootLoader.run(OSGiBootLoader.java:652)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:299)
	at org.eclipse.core.launcher.Main.run(Main.java:767)
	at org.eclipse.core.launcher.Main.main(Main.java:601)


Against 3.0 i20031211
see attached source to format.

java.lang.StringIndexOutOfBoundsException: String index out of range: -1
	at java.lang.String.charAt(String.java:444)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.isDifferent(CodeFormatterUtil.java:395)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.commentDifferent(CodeFormatterUtil.java:353)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.emulateNewWithOld(CodeFormatterUtil.java:317)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format2(CodeFormatterUtil.java:187)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format(CodeFormatterUtil.java:101)
	at
org.eclipse.jdt.internal.ui.text.java.JavaFormattingStrategy.format(JavaFormattingStrategy.java:86)
	at
org.eclipse.jface.text.formatter.ContentFormatter2.format(ContentFormatter2.java:806)
	at
org.eclipse.jface.text.formatter.ContentFormatter2.formatMaster(ContentFormatter2.java:661)
	at
org.eclipse.jface.text.formatter.ContentFormatter2.format(ContentFormatter2.java:487)
	at org.eclipse.jface.text.source.SourceViewer.doOperation(SourceViewer.java:668)
	at
org.eclipse.jdt.internal.ui.javaeditor.JavaSourceViewer.doOperation(JavaSourceViewer.java:124)
	at
org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:174)
	at
org.eclipse.ui.texteditor.TextOperationAction$1.run(TextOperationAction.java:122)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:84)
	at org.eclipse.ui.texteditor.TextOperationAction.run(TextOperationAction.java:120)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:842)
	at
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:509)
	at
org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:461)
	at
org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:408)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:847)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2294)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1975)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1506)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1482)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:246)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:139)
	at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:47)
	at
org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:242)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:84)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at org.eclipse.core.internal.boot.OSGiBootLoader.basicRun(OSGiBootLoader.java:239)
	at org.eclipse.core.internal.boot.OSGiBootLoader.run(OSGiBootLoader.java:665)
	at org.eclipse.core.internal.boot.OSGiBootLoader.run(OSGiBootLoader.java:652)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:299)
	at org.eclipse.core.launcher.Main.run(Main.java:767)
	at org.eclipse.core.launcher.Main.main(Main.java:601)


Against 3.0 i20031211
see attached source to format.
Created attachment 7217
a source file to reformat

(attached as binary to preserve actual content)
Martin, please investigate.
I can't reproduce the problem with your attached code. How did you envoke the 
formatter? Using Source->Format? What was the text selection?

Is it intentionally that the file contains two package statements?

The problem only shows up when the old formatter is enabled.
What?!! It does not contain 2 pakage statements!
Seams like file upload/download is broken on bugzilla...

I do not select any text, I click anywhere, right click, source, format.

here is the code inlined: see also a zip in attachment

-------cut here---------------
/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2001 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.sf.net/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" and
 *    "Apache EHCache" must not be used to endorse or promote products
 *    derived from this software without prior written permission. For
 *    written permission, please contact sf@sf.net.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    "Apache EHCache", nor may "Apache" appear in their name, without
 *    prior written permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.sf.net/>.
 */

package net.sf.ehcache.store;

import net.sf.ehcache.Cache;
import net.sf.ehcache.Element;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.RandomAccessFile;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 * A disk cache implementation.
 *
 * @version $Id: DiskStore.java,v 1.9 2003/11/15 04:36:30 gregluck Exp $
 * @author Adam Murdoch
 * @author Greg Luck
 */
public class DiskStore implements Store {
    private static final Log LOG = LogFactory.getLog(DiskStore.class.getName());

    /** Map of all disk caches. */
    private static Map caches = Collections.synchronizedMap(new HashMap());

    final String name;
    private boolean active;
    private RandomAccessFile file;
    private final Map elements = new HashMap();
    private final Map spool = new HashMap();
    private Thread spoolThread;
    private Thread expiryThread;
    private final ArrayList freeSpace = new ArrayList();
    private long totalSize;
    private int expiryThreadInterval;
    private Cache cache;

    private File dataFile;
    private int status;

//    /**
//     * Creates a Disk Store with defaults.
//     * <p>
//     * The expiry thread will run once every 5 minutes.
//     **/
//    public DiskStore(Cache cache, String diskPath) {
//        this(cache, diskPath, 1);//5 * 60 * 5);
//    }


    /** Creates a cache. */
    public DiskStore(Cache cache, String diskPath, int expiryThreadInterval) {

        status = Store.STATUS_UNINITIALISED;

        this.cache = cache;
        name = cache.getName();
        caches.put(name, this);

        try {
            // Make sure the cache directory exists
            final File diskDir = new File(diskPath);
            if (diskDir.exists() && !diskDir.isDirectory()) {
                throw new Exception(
                        "Store directory \"" + diskDir.getCanonicalPath() + "\"
exists and is not a directory.");
            }
            if (!diskDir.exists() && !diskDir.mkdirs()) {
                throw new Exception("Could not create cache directory \"" +
diskDir.getCanonicalPath() + "\".");
            }

            // Clean up the files, if they exist
            dataFile = new File(diskDir, name + ".data");
            dataFile.delete();

            // Create the indexed file
            file = new RandomAccessFile(dataFile, "rw");

            active = true;

            // Start up the spool thread
            spoolThread = new SpoolThread();
            spoolThread.start();

            // Start up the expiry thread
            expiryThread = new ExpiryThread(expiryThreadInterval);
            expiryThread.start();

            status = Store.STATUS_ALIVE;
        } catch (final Exception e) {
            // Cleanup on error
            dispose();
            LOG.error(name + "Cache: Could not create disk store", e);
        }
    }

    /**
     * Locates a cache, by name.
     */
    public static Store getCache(final String name) {
        return (Store) caches.get(name);
    }

    /** Asserts that the cache is active. */
    private void checkActive() throws Exception {
        if (!active) {
            throw new Exception(name + "Cache: The Disk store is not active.");
        }
    }

    /**
     * Returns the cache type.
     */
    public int getCacheType() {
        return Store.DISK_CACHE;
    }

    /**
     * Returns the cache name this disk cache is spooling for
     */
    public String getName() {
        return name;
    }

    /**
     * Returns the cache status.
     */
    public synchronized int getStatus() {
        return Store.STATUS_ALIVE;
    }

    /**
     * Gets an {@link Element} from the Disk Store.
     * @return The element may not be null but the value may be,
     * as it is softly referenced. This should be checked by callers of this method.
     */
    public synchronized Element get(final Serializable key) throws IOException {
        try {
            checkActive();

            // Check in the spool.  Remove if present
            Element element = (Element) spool.remove(key);
            if (element != null) {
                element.updateAccessStatistics();
                return element;
            }

            // Check if the element is on disk
            final DiskElement diskElement = (DiskElement) elements.get(key);
            if (diskElement == null) {
                // Not on disk
                return null;
            }

            // Load the element
            file.seek(diskElement.position);
            final byte[] buffer = new byte[diskElement.payloadSize];
            file.readFully(buffer);
            final ByteArrayInputStream instr = new ByteArrayInputStream(buffer);
            final ObjectInputStream objstr = new ObjectInputStream(instr);
            element = Element.readFrom(objstr);//(Element) objstr.readObject();
            element.updateAccessStatistics();
            return element;
        } catch (Exception e) {
            LOG.error(name + "Cache: Could not read disk store element for key "
+ key, e);
        }
        return null;
    }


    /**
     * Gets an Array of the keys for all elements in the memory cache
     * @return An Object[]
     */
    public synchronized Object[] getKeyArray() {
        return elements.keySet().toArray();
    }

    /**
     * Returns the current cache size.
     */
    public synchronized int getSize() {
        try {
            checkActive();
            return elements.size() + spool.size();
        } catch (Exception e) {
            LOG.error(name + "Cache: Could not determine size of disk store.", e);
            return 0;
        }
    }

    /**
     * Puts an item to the cache.
     */
    public synchronized void put(final Element entry) throws IOException {
        try {
            checkActive();

            // Spool the entry
            spool.put(entry.getKey(), entry);
            notifyAll();
        } catch (Exception e) {
            LOG.error(name + "Cache: Could not write disk store element for " +
entry.getKey(), e);
        }
    }

    /**
     * Removes an item from the cache.
     */
    public synchronized boolean remove(final Serializable key) throws IOException {
        try {
            checkActive();

            // Remove the entry from the spool
            final Object spoolValue = spool.remove(key);
            if (spoolValue != null) {
                return true;
            }

            // Remove the entry from the file
            final DiskElement element = (DiskElement) elements.remove(key);
            if (element != null) {
                freeBlock(element);
                return true;
            }
        } catch (Exception e) {
            LOG.error(name + "Cache: Could not remove disk store entry for " +
key, e);
        }
        return false;
    }

    /** Marks a block as free. */
    private void freeBlock(final DiskElement element) {
        totalSize -= element.payloadSize;
        element.payloadSize = 0;
        freeSpace.add(element);
    }

    /**
     * Removes all cached items from the cache.
     */
    public synchronized void removeAll() throws IOException {
        try {
            checkActive();

            // Ditch all the elements, and truncate the file
            spool.clear();
            elements.clear();
            freeSpace.clear();
            totalSize = 0;
            file.setLength(0);
        } catch (Exception e) {
            // Clean up
            LOG.error(name + "Cache: Could not rebuild disk store", e);
            dispose();
        }
    }

    /**
     * Prepares for shutdown.
     */
    public synchronized void dispose() {
        // Close the cache
        try {
            elements.clear();
            spool.clear();
            freeSpace.clear();
            if (file != null) {
                file.close();
            }
            dataFile.delete();
        } catch (Exception e) {
            LOG.error(name + "Cache: Could not shut down disk cache", e);
        } finally {
            active = false;
            file = null;
            notifyAll();
        }
    }

    /**
     * Whether there are any elements waiting to be spooled to disk.
     * @return false if there are elements waiting, otherwise true
     */
    public synchronized boolean isSpoolEmpty() {
        return (!active || spool.size() == 0);
    }

    /**
     * Main method for the spool thread.
     *
     * Note that the spool thread locks the cache for the entire time it is
writting elements to the disk.
     * TODO - Give cache lookups preference to writes
     */
    private synchronized void spoolThreadMain() {
        while (true) {
            // Wait for elements in the spool
            while (active && spool.size() == 0) {
                try {
                    wait();
                } catch (InterruptedException e) {
                    // Bail
                    return;
                }
            }
            if (!active) {
                return;
            }

            // Write elements to disk
            try {
                flushSpool();
            } catch (IOException e) {
                LOG.error(name + "Cache: Could not write elements to disk
cache", e);
            }
        }
    }
	
    
    
    static class MyBAOS extends ByteArrayOutputStream {
    	byte[] getBuff() {
    		return super.buf;
    	}
    	
    	int getCount() {
    		return super.count;
    	}
    }
    
    
    /**
     * Flushes all spooled elements to disk.
     * Note that the cache is locked for the entire time that the spool is being
flushed.
     */
    private synchronized void flushSpool() throws IOException {
        try {
            // Write elements to the DB
            for (Iterator iterator = spool.values().iterator();
iterator.hasNext();) {
                final Element element = (Element) iterator.next();
                final Serializable key = element.getKey();

                // Remove the old entry, if any
                final DiskElement oldBlock = (DiskElement) elements.remove(key);
                if (oldBlock != null) {
                    freeBlock(oldBlock);
                }

                // Serialise the entry
                // TODO - use a custom OutputStream
                
                //-----------------
                
//                final ByteArrayOutputStream outstr = new ByteArrayOutputStream();
//                final ObjectOutputStream objstr = new ObjectOutputStream(outstr);
//                objstr.writeObject(element);
//                objstr.close();
//                final byte[] buffer = outstr.toByteArray();
//                // Check for a free block
//                DiskElement diskElement = findFreeBlock(buffer.length);
//                if (diskElement == null) {
//                    diskElement = new DiskElement();
//                    diskElement.position = file.length();
//                    diskElement.blockSize = buffer.length;
//                }
//
//                // TODO - cleanup block on failure
//                // Write the record
//                file.seek(diskElement.position);
//                file.write(buffer);
//                if (cache.isEternal()) {
//                    // Never expires
//                    diskElement.expiryTime = Long.MAX_VALUE;
//                } else {
//                    // Calculate expiry time
//                    long timeToLive = element.getCreationTime() +
cache.getTimeToLiveSeconds() * 1000;
//                    long timeToIdle = element.getLastAccessTime() +
cache.getTimeToIdleSeconds() * 1000;
//                    diskElement.expiryTime = Math.max(timeToLive, timeToIdle);
//                }
//
//                // Add to index, update stats
//                diskElement.payloadSize = buffer.length;
//                totalSize += buffer.length;
//                elements.put(key, diskElement);
                
                
                final MyBAOS outstr = new MyBAOS();
                final ObjectOutputStream objstr = new ObjectOutputStream(outstr);
                element.writeTo(objstr);//objstr.writeObject(element);
                objstr.close();
                final byte[] _buffer = outstr.getBuff();//.toByteArray();
		final int cnt = outstr.getCount();
		
                // Check for a free block
                DiskElement diskElement = findFreeBlock(cnt);
                if (diskElement == null) {
                    diskElement = new DiskElement();
                    diskElement.position = file.length();
                    diskElement.blockSize = cnt;
                }

                // TODO - cleanup block on failure
                // Write the record
                file.seek(diskElement.position);
                file.write(_buffer, 0, cnt);
                
                if (cache.isEternal()) {
                    // Never expires
                    diskElement.expiryTime = Long.MAX_VALUE;
                } else {
                    // Calculate expiry time
                    long timeToLive = element.getCreationTime() +
cache.getTimeToLiveSeconds() * 1000;
                    long timeToIdle = element.getLastAccessTime() +
cache.getTimeToIdleSeconds() * 1000;
                    diskElement.expiryTime = Math.max(timeToLive, timeToIdle);
                }

                // Add to index, update stats
                diskElement.payloadSize = cnt;
                totalSize += cnt;
                elements.put(key, diskElement);
                
                //-----------------
                
            }
        } finally {
            // Clear the spool.  Do this regardless of whether the writes failed
- just ditch the elements
            spool.clear();
        }

        if (LOG.isDebugEnabled()) {
            LOG.debug(name + "Disk Store: " + " elements = " + elements.size() +
", free blocks = " + freeSpace.size()
                    + ", used = "
                    + totalSize
                    + " bytes, total = "
                    + file.length()
                    + " bytes.");
        }
    }

    /**
     * The main method for the expiry thread.
     */
    private void expiryThreadMain(final int expiryInterval) {
        try {
            while (true) {
                // Sleep for the specified time (the time is in seconds)
                Thread.sleep(expiryInterval * 1000);

                // Clean up the elements
                expireElements();
            }
        } catch (InterruptedException e) {
            // Bail on interruption
            if (LOG.isWarnEnabled()) {
                LOG.warn(name + "Cache: Expiry thread interrupted on Disk Store.");
            }
        }
    }

    /**
     * Removes expired elements.
     * Note that the cache is locked for the entire time that elements are being
expired.
     */
    private synchronized void expireElements() {
        final long now = System.currentTimeMillis();

        // Clean up the spool
        for (Iterator iterator = spool.values().iterator(); iterator.hasNext();) {
            final Element element = (Element) iterator.next();
            if (cache.isExpired(element)) {
                // An expired element
                if (LOG.isDebugEnabled()) {
                    LOG.debug(name + "Cache: Removing expired spool element " +
element.getKey() + " from Disk Store");
                }
                iterator.remove();
            }
        }

        // Clean up disk elements
        for (Iterator iterator = elements.entrySet().iterator();
iterator.hasNext();) {
            final Map.Entry entry = (Map.Entry) iterator.next();
            final DiskElement element = (DiskElement) entry.getValue();
            if (now >= element.expiryTime) {
                // An expired element
                if (LOG.isDebugEnabled()) {
                    LOG.debug(name + "Cache: Removing expired spool element " +
entry.getKey() + " from Disk Store");
                }
                iterator.remove();
                freeBlock(element);
            }
        }
    }

    /** Allocates a free block. */
    private DiskElement findFreeBlock(final int length) {
        for (int i = 0; i < freeSpace.size(); i++) {
            final DiskElement element = (DiskElement) freeSpace.get(i);
            if (element.blockSize >= length) {
                freeSpace.remove(i);
                return element;
            }
        }
        return null;
    }

    /**
     * Returns a {@link String} representation of the {@link DiskStore}
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("[ dataFile = ").append(dataFile.getAbsolutePath())
                .append(", active=").append(active)
                .append(", totalSize=").append(totalSize)
                .append(", status=").append(status)
                .append(", expiryThreadInterval = ").append(expiryThreadInterval)
                .append(" ]");
        return sb.toString();
    }

    /**
     * A reference to an on-disk elements.
     */
    private static class DiskElement {
        long position;
        int payloadSize;
        int blockSize;
        long expiryTime;
    }

    /**
     * A background thread that writes objects to the file.
     */
    private class SpoolThread extends Thread {
        public SpoolThread() {
            super("Store " + name + " Spool Thread");
            setDaemon(true);
        }

        /**
         * Main thread method.
         */
        public void run() {
            spoolThreadMain();
        }
    }

    /**
     * A background thread that removes expired objects.
     */
    private class ExpiryThread extends Thread {
        private final int expiryInterval;

        public ExpiryThread(final int expiryInterval) {
            super("Store " + name + " Expiry Thread");
            this.expiryInterval = expiryInterval;
            setDaemon(true);
        }

        /**
         * Main thread method.
         */
        public void run() {
            expiryThreadMain(expiryInterval);
        }


    }
}

Created attachment 7224
DiskStore.zip
Thanks a lot for the file. Unfortunatly I still can't reproduce it. What are 
your code formatter settings?
Maybe  the bug has already been fixed, that's possible too.
with both inlined and zip files? Anyway.

settings: (I use the old formatter, not the new one.)

newlines tab:
-just the last one is enabled (insert new line in empty block)

line length tab:
-code=200
-comment=80

style tab:
-enable only last one (insert tabs for indent, not space)
-8 spaces per indentation

comment tab:
-do not format comment
-(incase this is ignored, of the 8 checkboxes, all set except 1st and 4rd)

Ok, got it! Fixed > 20031219

Thanks a lot for your help!
Using 3.0M6: not fixed.


java.lang.StringIndexOutOfBoundsException: String index out of range: -1
	at java.lang.String.charAt(String.java:444)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.isDifferent(CodeFormatterUtil.java:395)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.commentDifferent(CodeFormatterUtil.java:353)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.emulateNewWithOld(CodeFormatterUtil.java:317)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format2(CodeFormatterUtil.java:187)
	at
org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format(CodeFormatterUtil.java:101)
	at
org.eclipse.jdt.internal.ui.text.java.JavaFormattingStrategy.format(JavaFormattingStrategy.java:93)
	at
org.eclipse.jface.text.formatter.ContentFormatter2.format(ContentFormatter2.java:806)
	at
org.eclipse.jface.text.formatter.ContentFormatter2.formatMaster(ContentFormatter2.java:661)
	at
org.eclipse.jface.text.formatter.ContentFormatter2.format(ContentFormatter2.java:487)
	at org.eclipse.jface.text.source.SourceViewer.doOperation(SourceViewer.java:668)
	at
org.eclipse.jdt.internal.ui.javaeditor.JavaSourceViewer.doOperation(JavaSourceViewer.java:124)
	at
org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:187)
	at
org.eclipse.ui.texteditor.TextOperationAction$1.run(TextOperationAction.java:122)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:84)
	at org.eclipse.ui.texteditor.TextOperationAction.run(TextOperationAction.java:120)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:842)
	at
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:509)
	at
org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:461)
	at
org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:408)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:847)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2311)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1992)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1506)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1482)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:246)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:139)
	at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:47)
	at
org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:226)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:279)
	at org.eclipse.core.launcher.Main.run(Main.java:742)
	at org.eclipse.core.launcher.Main.main(Main.java:581)

This got fixed for the first integration build after M6 (note, the target 
milestone is set to M7).
