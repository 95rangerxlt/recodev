Binding.isValidBinding() correctly returns false for missing simple types, e.g., the superclass of C in "class C extends Zork".

However, it returns true for missing parameterized types, e.g., the superclass of C in "class C extends Zork<Fnord>".  The binding in this case is a ParameterizedTypeBinding, rather than a MissingTypeBinding.  ParameterizedTypeBinding gets its implementation of problemId() from Binding, which always reports no error.

This is causing the compiler.apt.tests case Negative5 to fail, on the types that have parameterized supertypes.

Binding.isValidBinding() correctly returns false for missing simple types, e.g., the superclass of C in "class C extends Zork".

However, it returns true for missing parameterized types, e.g., the superclass of C in "class C extends Zork<Fnord>".  The binding in this case is a ParameterizedTypeBinding, rather than a MissingTypeBinding.  ParameterizedTypeBinding gets its implementation of problemId() from Binding, which always reports no error.

This is causing the compiler.apt.tests case Negative5 to fail, on the types that have parameterized supertypes.
Array types are likely doing the same...
The type itself is formed of invalid types, but I don't think we should propagate to all containing types.

Can you check the tagbits instead ?
(type.tagbits & TagBits.HasMissingType) != 0
Reassigning to APT.  I can implement the suggested code in APT and get the result I need.
Fixed for 3.4M6, using Philippe's suggested code.
