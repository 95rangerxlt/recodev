Build ID: M20070212-1330

Steps To Reproduce:
1. Open the project contained in the jar file.
2. Select I1 and I2 in class BugMoveMember via the PackageExplorer and refactor -> Move. Type "NewType" as destination.
3. Class NewType become un-compilable because of import problems and uncorred extends for inner interface I2.


More information:
The probleme is located in "isMovedMember(IBinding binding)" in class MoveStaticMemberAnalyzer.
A possible solution is :
	protected boolean isMovedMember(IBinding binding) {
		if (binding == null)
			return false;
		for (IBinding element : fMembers) {
			// Bug
			if (binding.getKind() == IBinding.TYPE) {				
				ITypeBinding tBinding = (ITypeBinding) binding;
				ITypeBinding raw = tBinding.getErasure();
				if (raw.isEqualTo(element)) {
					return true;
				}				
			}
			//
			if (Bindings.equals(element, binding))
				return true;
		}
		return false;
	}

Build ID: M20070212-1330

Steps To Reproduce:
1. Open the project contained in the jar file.
2. Select I1 and I2 in class BugMoveMember via the PackageExplorer and refactor -> Move. Type "NewType" as destination.
3. Class NewType become un-compilable because of import problems and uncorred extends for inner interface I2.


More information:
The probleme is located in "isMovedMember(IBinding binding)" in class MoveStaticMemberAnalyzer.
A possible solution is :
	protected boolean isMovedMember(IBinding binding) {
		if (binding == null)
			return false;
		for (IBinding element : fMembers) {
			// Bug
			if (binding.getKind() == IBinding.TYPE) {				
				ITypeBinding tBinding = (ITypeBinding) binding;
				ITypeBinding raw = tBinding.getErasure();
				if (raw.isEqualTo(element)) {
					return true;
				}				
			}
			//
			if (Bindings.equals(element, binding))
				return true;
		}
		return false;
	}
Created attachment 72159
The solution needed to reproduce the bug
fixed > 20070307

Thanks for the reproducable example and finding the problem!
