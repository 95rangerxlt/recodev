I20041019

- textually change the class name in some CU
-> "public type must be defined in its own file" error
- invoke Rename Compilation Unit QuickFix
-> error dialog appears "File cannot be edited: Resource tree is locked for
modifications."

The QuickFix appears to work though.

I20041019

- textually change the class name in some CU
-> "public type must be defined in its own file" error
- invoke Rename Compilation Unit QuickFix
-> error dialog appears "File cannot be edited: Resource tree is locked for
modifications."

The QuickFix appears to work though.
It happens when you apply the quick fix on an unsaved CU.
This used to work, Dirk, has there been any changes in the
RenameCompilationUnitChange. The files used to be saved before.

Kai, maybe you have to look at this. It seems that the editor tries to run a
workbench runnable out of the resource delta listener.
Thrown exception:
org.eclipse.core.internal.resources.ResourceException: The resource tree is
locked for modifications.

CompilationUnitDocumentProvider(TextFileDocumentProvider).executeOperation(TextFileDocumentProvider$DocumentProviderOperation,
IProgressMonitor) line: 440
CompilationUnitDocumentProvider(TextFileDocumentProvider).validateState(Object,
Object) line: 994
CompilationUnitEditor(AbstractTextEditor).validateState(IEditorInput) line: 3429
AbstractTextEditor$7.run() line: 389
AbstractTextEditor$ElementStateListener.execute(Runnable) line: 427
AbstractTextEditor$ElementStateListener.elementMoved(Object, Object) line: 397
TextFileDocumentProvider$FileBufferListener.underlyingFileMoved(IFileBuffer,
IPath) line: 304
TextFileBufferManager.fireUnderlyingFileMoved(IFileBuffer, IPath) line: 330
ResourceTextFileBuffer(ResourceFileBuffer).handleFileMoved(IPath) line: 431
ResourceFileBuffer$3.execute() line: 153
ResourceFileBuffer$3(ResourceFileBuffer$SafeFileChange).run() line: 78
UISynchronizationContext.run(Runnable) line: 34
TextFileBufferManager.execute(Runnable, boolean) line: 288
ResourceFileBuffer$FileSynchronizer.resourceChanged(IResourceChangeEvent) line: 170
NotificationManager$2.run() line: 283
InternalPlatform.run(ISafeRunnable) line: 616
Platform.run(ISafeRunnable) line: 747
NotificationManager.notify(ResourceChangeListenerList$ListenerEntry[],
IResourceChangeEvent, boolean) line: 277
NotificationManager.broadcastChanges(ElementTree, int, boolean) line: 151
Workspace.broadcastChanges(int, boolean) line: 172
Workspace.endOperation(ISchedulingRule, boolean, IProgressMonitor) line: 904
Workspace.run(IWorkspaceRunnable, ISchedulingRule, int, IProgressMonitor) line: 1686
RenameResourceElementsOperation(JavaModelOperation).runOperation(IProgressMonitor)
line: 744
JavaModel.rename(IJavaElement[], IJavaElement[], String[], boolean,
IProgressMonitor) line: 302
CompilationUnit.rename(String, boolean, IProgressMonitor) line: 1118
RenameCompilationUnitChange.doRename(IProgressMonitor) line: 64

No changes to RenameCompilationUnitChange. The file is still saved.
Once again this is a case where we want to execute something right after the 
current operation is finished - and we want to do this at a layer where we 
don't know any UI. ...
In order to circumvent the problem, the element state listener inside 
AbstractTextEditor has been changed. Element state change events can arrive in 
any thread. As the editor may only be touched in the UI thread, the element 
state listener creates runnables which it executes in the UI thread. So far, 
the runnable were executed directly when the current thread was the UI thread. 
Now, when inside a runnable validateState is called, the runnable is posted 
even when the current thread is the UI thread. validateState may touch the 
workspace, thus when posting, the runnable is executed after the currently 
running operation has finished. It seems wierd to put the fix at the level of 
AbstractTextEditor which is independent from core resources. Anyway, it's the 
most local change that revents this problem from happening. 

Build > I20041130.
The fix causes bug 82462.
