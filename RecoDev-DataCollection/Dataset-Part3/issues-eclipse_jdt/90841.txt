build i0405

I got the following exception in my log file. I believe I did a ctrl-shift-u to
turn off "mark occurances" (didn't realize that wasn't the right key binding) so
then I hit the icon and now I get that message everytime I hit the "mark
occurances" icon.

It looks like JavaEditor.EclipsePreferencesAdaptor holds onto the preference
node but this node has been removed. Nodes aren't handles, they are the real
objects and shouldn't be cached like this.

!ENTRY org.eclipse.ui.workbench 4 2 2005-04-08 14:43:57.926
!MESSAGE Problems occurred when invoking code from plug-in:
"org.eclipse.ui.workbench".
!STACK 0
java.lang.IllegalStateException: Preference node "org.eclipse.jdt.core" has been
removed.
	at
org.eclipse.core.internal.preferences.EclipsePreferences.checkRemoved(EclipsePreferences.java:146)
	at
org.eclipse.core.internal.preferences.EclipsePreferences.internalGet(EclipsePreferences.java:501)
	at
org.eclipse.core.internal.preferences.EclipsePreferences.get(EclipsePreferences.java:362)
	at
org.eclipse.jdt.internal.ui.javaeditor.JavaEditor$EclipsePreferencesAdapter.contains(JavaEditor.java:362)
	at
org.eclipse.ui.texteditor.ChainedPreferenceStore.getVisibleStore(ChainedPreferenceStore.java:528)
	at
org.eclipse.ui.texteditor.ChainedPreferenceStore.handlePropertyChangeEvent(ChainedPreferenceStore.java:412)
	at
org.eclipse.ui.texteditor.ChainedPreferenceStore.access$0(ChainedPreferenceStore.java:407)
	at
org.eclipse.ui.texteditor.ChainedPreferenceStore$PropertyChangeListener.propertyChange(ChainedPreferenceStore.java:68)
	at
org.eclipse.ui.preferences.ScopedPreferenceStore$3.run(ScopedPreferenceStore.java:339)
	at
org.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1021)
	at org.eclipse.core.runtime.Platform.run(Platform.java:757)
	at
org.eclipse.ui.preferences.ScopedPreferenceStore.firePropertyChangeEvent(ScopedPreferenceStore.java:336)
	at
org.eclipse.ui.preferences.ScopedPreferenceStore.setValue(ScopedPreferenceStore.java:736)
	at
org.eclipse.jdt.internal.ui.javaeditor.ToggleMarkOccurrencesAction.run(ToggleMarkOccurrencesAction.java:54)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:996)
	at org.eclipse.ui.actions.RetargetAction.runWithEvent(RetargetAction.java:216)
	at org.eclipse.ui.internal.WWinPluginAction.runWithEvent(WWinPluginAction.java:228)
	at
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:538)
	at
org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:488)
	at
org.eclipse.jface.action.ActionContributionItem$6.handleEvent(ActionContributionItem.java:441)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:842)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2894)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2527)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1570)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1534)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:306)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)
	at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:103)
	at
org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:228)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:156)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)
	at java.lang.reflect.Method.invoke(Method.java:391)
	at org.eclipse.core.launcher.Main.invokeFramework(Main.java:315)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:268)
	at org.eclipse.core.launcher.Main.run(Main.java:947)
	at org.eclipse.core.launcher.Main.main(Main.java:931)

build i0405

I got the following exception in my log file. I believe I did a ctrl-shift-u to
turn off "mark occurances" (didn't realize that wasn't the right key binding) so
then I hit the icon and now I get that message everytime I hit the "mark
occurances" icon.

It looks like JavaEditor.EclipsePreferencesAdaptor holds onto the preference
node but this node has been removed. Nodes aren't handles, they are the real
objects and shouldn't be cached like this.

!ENTRY org.eclipse.ui.workbench 4 2 2005-04-08 14:43:57.926
!MESSAGE Problems occurred when invoking code from plug-in:
"org.eclipse.ui.workbench".
!STACK 0
java.lang.IllegalStateException: Preference node "org.eclipse.jdt.core" has been
removed.
	at
org.eclipse.core.internal.preferences.EclipsePreferences.checkRemoved(EclipsePreferences.java:146)
	at
org.eclipse.core.internal.preferences.EclipsePreferences.internalGet(EclipsePreferences.java:501)
	at
org.eclipse.core.internal.preferences.EclipsePreferences.get(EclipsePreferences.java:362)
	at
org.eclipse.jdt.internal.ui.javaeditor.JavaEditor$EclipsePreferencesAdapter.contains(JavaEditor.java:362)
	at
org.eclipse.ui.texteditor.ChainedPreferenceStore.getVisibleStore(ChainedPreferenceStore.java:528)
	at
org.eclipse.ui.texteditor.ChainedPreferenceStore.handlePropertyChangeEvent(ChainedPreferenceStore.java:412)
	at
org.eclipse.ui.texteditor.ChainedPreferenceStore.access$0(ChainedPreferenceStore.java:407)
	at
org.eclipse.ui.texteditor.ChainedPreferenceStore$PropertyChangeListener.propertyChange(ChainedPreferenceStore.java:68)
	at
org.eclipse.ui.preferences.ScopedPreferenceStore$3.run(ScopedPreferenceStore.java:339)
	at
org.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1021)
	at org.eclipse.core.runtime.Platform.run(Platform.java:757)
	at
org.eclipse.ui.preferences.ScopedPreferenceStore.firePropertyChangeEvent(ScopedPreferenceStore.java:336)
	at
org.eclipse.ui.preferences.ScopedPreferenceStore.setValue(ScopedPreferenceStore.java:736)
	at
org.eclipse.jdt.internal.ui.javaeditor.ToggleMarkOccurrencesAction.run(ToggleMarkOccurrencesAction.java:54)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:996)
	at org.eclipse.ui.actions.RetargetAction.runWithEvent(RetargetAction.java:216)
	at org.eclipse.ui.internal.WWinPluginAction.runWithEvent(WWinPluginAction.java:228)
	at
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:538)
	at
org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:488)
	at
org.eclipse.jface.action.ActionContributionItem$6.handleEvent(ActionContributionItem.java:441)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:842)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2894)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2527)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1570)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1534)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:306)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)
	at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:103)
	at
org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:228)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:156)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)
	at java.lang.reflect.Method.invoke(Method.java:391)
	at org.eclipse.core.launcher.Main.invokeFramework(Main.java:315)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:268)
	at org.eclipse.core.launcher.Main.run(Main.java:947)
	at org.eclipse.core.launcher.Main.main(Main.java:931)
do you have a reproducible scenario for this?

The one I found was when removing a project. The editor can't even deregister
the preference change listener. It seems that EclipsePreferences is a bit too
restrictive here.

Having the preference change listener registered, I don't see how I wouldn't
keep a reference on it. DJ, what do you recommend?

ProjectPreferences(EclipsePreferences).checkRemoved() line: 146
ProjectPreferences(EclipsePreferences).removePreferenceChangeListener(IEclipsePreferences$IPreferenceChangeListener)
line: 912
JavaEditor$EclipsePreferencesAdapter.removePropertyChangeListener(IPropertyChangeListener)
line: 355
ChainedPreferenceStore$PropertyChangeListener.unregister() line: 82
ChainedPreferenceStore.unregisterChildListeners() line: 552
ChainedPreferenceStore.removePropertyChangeListener(IPropertyChangeListener)
line: 137
CompilationUnitEditor(AbstractTextEditor).dispose() line: 3105

No reproducable test case, sorry.

I am working on creating preference nodes that act like handles and forward the
method calls to the real nodes but its not ready yet.

In my code I have a helper method something like:
   IEclipsePreferences getPreferences() {
      return new InstanceScope().getNode("org.eclipse.core.resources");
   }

The listeners are a problem. To deregister I have to access the class again, to
I keep a reference. To not deregister when I find out that the project doesn't
exist anymore feels wrong.

Can you have a look at the case in comment 1. Wouldn't it be better to not throw
a 'IllegalStateException' when removing a listener? The preference store is
probably a resource change listener on the project removal, and it seems it is
before the Java editor that also reacts on that. 


There were previous problems with this case (bug 89262) where after a node was
removed, it was impossible to remove the listener. I have since updated the spec
to say that the listeners will be removed automatically when a node is removed.
(IEclipsePreferences#removeNode)

I tried to follow the patterns of the JDK APIs for the #remove*Listener method
so that's why an exception is thrown in this case. (java.util.prefs.Preferences)

Changing this behaviour would be an API change and would require permission from
the PMC.

You can also do something like:
   if (node.nodeExists(""))
      node.removeListner(listener);

*** Bug 91240 has been marked as a duplicate of this bug. ***
fixed > 20050413

Using now the indirection context.getNode(...) all the time. Even the project is
not existing, the node still allows access and removing of listeners.

This is obviously using a weakness in the preferences model. I filed bug 91269.


