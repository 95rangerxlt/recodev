This program crashes at runtime when compiling and running it from within eclipse.
Compiling and running it with jdk8 b127 from the command line works fine.

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
package crash;

import java.util.function.Function;

class Crash {
	
	public static void main(String[] args) {
		test(1, Crash::intToSome);
	}

	static <T> Some test(T value, Function<T, Some> f) {
		return (value == null) ? new Nothing() : f.apply(value);
	}

	static SomeInt intToSome(int i) {
		return new SomeInt();
	}
	
	static abstract class Some {}
	static class SomeInt extends Some {}
	static class Nothing extends Some {}
	
	// NOTE: on the other hand this works fine:
	//static interface Some {}
	//static class SomeInt implements Some {}
	//static class Nothing implements Some {}
	
}
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception in thread "main" java.lang.VerifyError: Instruction type does not match stack map
Exception Details:
  Location:
    crash/Crash.test(Ljava/lang/Object;Ljava/util/function/Function;)Lcrash/Crash$Some; @21: areturn
  Reason:
    Type 'java/lang/Object' (current frame, stack[0]) is not assignable to 'crash/Crash$Some' (stack map, stack[0])
  Current Frame:
    bci: @21
    flags: { }
    locals: { 'java/lang/Object', 'java/util/function/Function' }
    stack: { 'java/lang/Object' }
  Stackmap Frame:
    bci: @21
    flags: { }
    locals: { 'java/lang/Object', 'java/util/function/Function' }
    stack: { 'crash/Crash$Some' }
  Bytecode:
    0000000: 2ac7 000d bb00 2259 b700 24a7 000a 2b2a
    0000010: b900 2502 00b0                         
  Stackmap Table:
    same_frame(@14)
    same_locals_1_stack_item_frame(@21,Object[#50])

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2688)
	at java.lang.Class.getMethod0(Class.java:2937)
	at java.lang.Class.getMethod(Class.java:1771)
	at sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)

This program crashes at runtime when compiling and running it from within eclipse.
Compiling and running it with jdk8 b127 from the command line works fine.

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
package crash;

import java.util.function.Function;

class Crash {
	
	public static void main(String[] args) {
		test(1, Crash::intToSome);
	}

	static <T> Some test(T value, Function<T, Some> f) {
		return (value == null) ? new Nothing() : f.apply(value);
	}

	static SomeInt intToSome(int i) {
		return new SomeInt();
	}
	
	static abstract class Some {}
	static class SomeInt extends Some {}
	static class Nothing extends Some {}
	
	// NOTE: on the other hand this works fine:
	//static interface Some {}
	//static class SomeInt implements Some {}
	//static class Nothing implements Some {}
	
}
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception in thread "main" java.lang.VerifyError: Instruction type does not match stack map
Exception Details:
  Location:
    crash/Crash.test(Ljava/lang/Object;Ljava/util/function/Function;)Lcrash/Crash$Some; @21: areturn
  Reason:
    Type 'java/lang/Object' (current frame, stack[0]) is not assignable to 'crash/Crash$Some' (stack map, stack[0])
  Current Frame:
    bci: @21
    flags: { }
    locals: { 'java/lang/Object', 'java/util/function/Function' }
    stack: { 'java/lang/Object' }
  Stackmap Frame:
    bci: @21
    flags: { }
    locals: { 'java/lang/Object', 'java/util/function/Function' }
    stack: { 'crash/Crash$Some' }
  Bytecode:
    0000000: 2ac7 000d bb00 2259 b700 24a7 000a 2b2a
    0000010: b900 2502 00b0                         
  Stackmap Table:
    same_frame(@14)
    same_locals_1_stack_item_frame(@21,Object[#50])

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2688)
	at java.lang.Class.getMethod0(Class.java:2937)
	at java.lang.Class.getMethod(Class.java:1771)
	at sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)
Workarounds:

1) Add a cast
	static <T> Some test(T value, Function<T, Some> f) {
		return (value == null) ? new Nothing() : (Some) f.apply(value);
	}

2) Use if-statement instead of ternary operator
	static <T> Some test(T value, Function<T, Some> f) {
		if (value == null) {
			return new Nothing();
		} else {
			return f.apply(value);
		}
	}
Comparing bytecodes I see:

- javac emits a checkcast where ecj doesn't

- ecj emits the some byte code independent whether Some is a class or an
  interface -- so verification in the JVM seems to differ for these cases?

I can easily believe that recent changes in resolving ternary expressions
missed to also check for the need to insert a cast. It's probably an
interaction between simpler type checking for ternaries and a generic
invocation (apply), whose erasure returns Object.
Thanks Daniel, I'll follow up.
Thank you, Srikanth.
Created attachment 239552
Proposed patch

For poly conditional expressions, we are failing to notice disparity
between compile time type and runtime type.

I will hold on to this patch till late Monday since EAR3 bits do not have
their own staging area. This will allow beta testers to still grab the 
announced version.
Created attachment 239553
Revised patch

Revised patch with additional test for interface case and potential NPE 
elimination
Created attachment 239554
Proposed patch

More tests, more clean up.
The following snippet looks like it fails because of the same bug. Snippet:

public class Test
{
   public static void main(String[] args)
   {
      match(getLast("a"), null);
   }

   public static <T> T getLast(T... array) { return null; } // same with T[]
   public static void match(boolean b, Object foo) { }
   public static <A> void match(Object o, A foo) { }
}

Error:

Exception in thread "main" java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    Test.main([Ljava/lang/String;)V @3: invokevirtual
  Reason:
    Type 'java/lang/String' (current frame, stack[1]) is not assignable to '[Ljava/lang/String;'
  Current Frame:
    bci: @3
    flags: { }
    locals: { '[Ljava/lang/String;' }
    stack: { '[Ljava/lang/String;', 'java/lang/String' }
  Bytecode:
    0000000: 2a12 10b6 0012 01b8 0016 b1            

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2688)
	at java.lang.Class.getMethod0(Class.java:2937)
	at java.lang.Class.getMethod(Class.java:1771)
	at sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)

This broke in one of the daily updates this week. I did regular updates last week, and this week only on Friday. So I unfortunately can't say which update caused the regression.

It would be great if the 1.8 update channel kept older versions so people can downgrade again if necessary (going back to 1.7 is most likely not feasible anymore and having a second Eclipse to first test the daily 1.8 updates seems like an overkill).
(In reply to Marco Trudel from comment #8)
> The following snippet looks like it fails because of the same bug. Snippet:

No, the present bug is purely about conditional expressions.
I have raised https://bugs.eclipse.org/bugs/show_bug.cgi?id=427218 and
added you to CC list. Thanks!
Fix and test released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=f447e8419317d96ca676850de75b170e4276d1fc

The "current" bundles carry the timestamp: 1.0.0.v20140203-0104_BETA_JAVA8,
This is likely (some) Canada time, so 24 hours from then updates should be
available.
That was really fast, thank you Srikanth!
