Steps to reproduce:
Create a skeleton class and a subclass with a single protected field & an
associated accessor method that has package-level access (the default with no
keyword). These 2 classes should be in different packages. 
Now use the refactoring wizard to pull up the field & its accessor method. Go
with the defaults supplied by the wizard. 

Expected results:
Both the field & its accessor should be moved from the subclass to the
superclass and the access-level of the method should be changed to public. While
one's 1st inclination might be to change it to protected, this will cause a loss
of functionality if classes withing the subclasses package were previously
calling this method. 

Actual results:
In addition to using protected as the access modifier for the method after it is
moved, the keyword is placed before the Javadoc, which looks decidedly strange,
despite not causing a compile error.

Steps to reproduce:
Create a skeleton class and a subclass with a single protected field & an
associated accessor method that has package-level access (the default with no
keyword). These 2 classes should be in different packages. 
Now use the refactoring wizard to pull up the field & its accessor method. Go
with the defaults supplied by the wizard. 

Expected results:
Both the field & its accessor should be moved from the subclass to the
superclass and the access-level of the method should be changed to public. While
one's 1st inclination might be to change it to protected, this will cause a loss
of functionality if classes withing the subclasses package were previously
calling this method. 

Actual results:
In addition to using protected as the access modifier for the method after it is
moved, the keyword is placed before the Javadoc, which looks decidedly strange,
despite not causing a compile error.
i guess you mean that:

1. you have:
package p;
public class A{
}

package p1;

import p.A;
public class A1 extends A{
	/** field javadoc*/
	protected int f;

	/** method javadoc*/	
	int getF() {
		return f;
	}
}

2. you pull up field and method and get:
package p;

public class A{
	/** field javadoc*/
	protected int f;

	protected /** method javadoc*/	
	int getF() {
		return f;
	}
}
package p1;

import p.A;

public class A1 extends A{
}

and not the expected:
package p;

public class A{
	/** field javadoc*/
	protected int f;

	/** method javadoc*/	
	public int getF() {
		return f;
	}
}
package p1;

import p.A;

public class A1 extends A{
}

Indeed, that is precisely what I mean. 
*** Bug 21229 has been marked as a duplicate of this bug. ***
'protected' before the comment does look bogus
let's fix it for m5
'protected' is now placed correctly
will not change the visibility to 'public' for now - unless people protest
(some explanation is in bug 25528)
