(1) have two different CUs (B.java, C.java)

public abstract class B {
	
	@Test
	void m() {
		System.out.println("B.m()");
	}
}

public class C extends B {

}

JUnit 4 test finder misses C. However, running org.junit.JUnitCore.runClasses(C.class) executes C's inherited method.

The strange thing is, that JUnitCore.runClasses misses C's inherited methods if B is defined as innertype of C. Points to a JUnit bug...

(1) have two different CUs (B.java, C.java)

public abstract class B {
	
	@Test
	void m() {
		System.out.println("B.m()");
	}
}

public class C extends B {

}

JUnit 4 test finder misses C. However, running org.junit.JUnitCore.runClasses(C.class) executes C's inherited method.

The strange thing is, that JUnitCore.runClasses misses C's inherited methods if B is defined as innertype of C. Points to a JUnit bug...
N20060511-0010
Only a problem with JUnit 4 runner.
Similar JUnit 3 test works in 3.1.2 and in 3.2 with JUnit 3 and JUnit 4 runner.

----------

package inherit;
public class InheritTest extends DeclaringTest {
}

----------

package inherit;
import junit.framework.TestCase;
public class DeclaringTest extends TestCase {
	public void testOne() throws Exception {
		
	}
	public void testTwo() throws Exception {
		fail("too bad");
	}
}
See https://sourceforge.net/tracker/?func=detail&atid=115278&aid=1486545&group_id=15278
for the JUnit bug.
setting to remind.
Reopen, our bug is to not search for tests in the hierarchy.
Should go up the superclass hierarchy tofind @Test methods. This example currently produces "No Tests found [..]", unless test "enabler" is uncommented:

package inherit;

import org.junit.Test;

public class InheritTest extends DeclaringTest {
//	@Test
//	public void enabler() { }
}

---

package inherit;

import static org.junit.Assert.*;
import org.junit.Ignore;
import org.junit.Test;

public class DeclaringTest {
	@Test
	public void testOne() throws Exception { }
	
	@Ignore @Test
	public void testTwo() throws Exception {
		fail("too bad");
	}
}
fixed in M2
