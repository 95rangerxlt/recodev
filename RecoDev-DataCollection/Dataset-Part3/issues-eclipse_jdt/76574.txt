How to reduce the behavior:
===========================

1) Have a _public_ inner class in a public java interface. The class does _not_ 
contain the public modifier explicitly, but implicitly the class is public.
2) Select the class name
3) Refactor via "Move Member Type to New File"

What results:
=============

Everything works fine, except the extracted class should be public but isn't.

Example:
========

public interface Foo {
    class Bar {
    }
}

leads to extracted class:

class Bar {
}

instead of to

public Bar {
}

Further testing:
================

I tried it with a public class explicitly marked public. This works fine.

Sebastian

How to reduce the behavior:
===========================

1) Have a _public_ inner class in a public java interface. The class does _not_ 
contain the public modifier explicitly, but implicitly the class is public.
2) Select the class name
3) Refactor via "Move Member Type to New File"

What results:
=============

Everything works fine, except the extracted class should be public but isn't.

Example:
========

public interface Foo {
    class Bar {
    }
}

leads to extracted class:

class Bar {
}

instead of to

public Bar {
}

Further testing:
================

I tried it with a public class explicitly marked public. This works fine.

Sebastian
Fixed > 20041027
