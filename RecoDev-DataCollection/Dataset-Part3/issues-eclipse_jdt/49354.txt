I have a fully documented Javadoc interface and an implementing class wihch does
not Javadoc the methods from the interface. This is on purpose, in order to
inherit the Javadocs. When Javadoc is run, the Javadocs from the interface are
inherited. But, in eclipse, I get a no Javadoc on public method warning.

Perhaps there could be an additional setting "Check for implemented interface
methods" in the "Missing Javadoc comments" section.

Version 3.0.m6.

I have a fully documented Javadoc interface and an implementing class wihch does
not Javadoc the methods from the interface. This is on purpose, in order to
inherit the Javadocs. When Javadoc is run, the Javadocs from the interface are
inherited. But, in eclipse, I get a no Javadoc on public method warning.

Perhaps there could be an additional setting "Check for implemented interface
methods" in the "Missing Javadoc comments" section.

Version 3.0.m6.
Either I haven't well understood your problem or you missed existing 
option "Check overriding methods" in "Missing Javadoc comments".
You'll find it in Javadoc tab of compiler option...

I thin that if you uncheck this option, then warning should disappear on your 
public method which implements the interface.

I am looking for the distinction between implementing an interface method vs.
overriding a superclass method. In my mind, the "Check overriding methods"
option should only apply to methods overriding a superclass method, not to
methods implementing an interface. 

I think that either the label should mention the fact that the setting also
applies to interface methods or an additional setting should be used.

I can have cases where I have a class hierarchy that implements interfaces. What
I'd like to be able to say is: I am going leave out Javadoc interface method
impls to inherit all of the interface Javadoc but I want to Javadoc all of the
other methods.

(I am reopening the ticket, but I am not sure if it is proper etiquette for me
to do so).
We cannot distinguish implemented methods from interfaces and abstract classes.
In following example:
public interface IX {
  abstract void bar();
}
public asbtract class AX {
  abstract void foo();
}
public class X extends AX {
  void bar() {}
  void foo() {}
}
both bar and foo methods are considered as "implemented"...
That's one of the reasons why we think is not really appropriate to 
distinguish  implemented and overridden methods.

So, put this bug to jdt-ui component in order to change the label in Javadoc 
tag of Compiler preferences.



changed the string on the prefpage to 'Check overriding and implementing methods'.
> 20030119

Gary, file a new feature request (against jdt.core) if you want two separate
options.
