The Java 6 APT API Filer.getResource() is implemented in the IDE by
IdeFilerImpl.getResource(), but the implementation is just an
UnsupportedOperationException("Not yet implemented").  We should implement this
correctly.

The spec says "The locations StandardLocation.CLASS_OUTPUT and StandardLocation.SOURCE_OUTPUT must be supported."  This should be tested against javac's actual behavior, since it doesn't seem to make much sense (ie, the content of those locations is a moving target during a build).  It would seem to make much more sense to support input, rather than output, locations; I suspect this is just a typo in the spec, perhaps copied and pasted from the createResource() method.  I would think we should support StandardLocation.CLASS_PATH, SOURCE_PATH, and possibly PLATFORM_CLASS_PATH.

The Java 6 APT API Filer.getResource() is implemented in the IDE by
IdeFilerImpl.getResource(), but the implementation is just an
UnsupportedOperationException("Not yet implemented").  We should implement this
correctly.

The spec says "The locations StandardLocation.CLASS_OUTPUT and StandardLocation.SOURCE_OUTPUT must be supported."  This should be tested against javac's actual behavior, since it doesn't seem to make much sense (ie, the content of those locations is a moving target during a build).  It would seem to make much more sense to support input, rather than output, locations; I suspect this is just a typo in the spec, perhaps copied and pasted from the createResource() method.  I would think we should support StandardLocation.CLASS_PATH, SOURCE_PATH, and possibly PLATFORM_CLASS_PATH.
It appears that SOURCE_OUTPUT and CLASS_OUTPUT are indeed the only supported locations for javac, so we'll do the same, even though that renders the API almost useless: in particular, at least for javac, it is illegal to getResource() a file that was created by the Filer, even during a previous round or by a different processor.  So the only files that can be opened are ones that were pre-existing in the OUTPUT folders before the build.  That's how the spec reads, and that's what javac does, so... whatever.
