The save action 'Remove unnecessary $NLS-TAGS$' has removed all my neccessary tags of a file more than once. This now stops me from using the otherwise great feature. Here is an example how to reproduce the issue:

1) Enable the save action.

2) Start with the following code and save it.
   public class Test {
	String bla= "";  //$NON-NLS-1$
   }

3) Change the keyword 'void' and save the file:
   public class Test {
        void
	String bla= "";  //$NON-NLS-1$
   }

4) The tag is removed :-(.
   public class Test {
        void
	String bla= "";  
   }

The save action 'Remove unnecessary $NLS-TAGS$' has removed all my neccessary tags of a file more than once. This now stops me from using the otherwise great feature. Here is an example how to reproduce the issue:

1) Enable the save action.

2) Start with the following code and save it.
   public class Test {
	String bla= "";  //$NON-NLS-1$
   }

3) Change the keyword 'void' and save the file:
   public class Test {
        void
	String bla= "";  //$NON-NLS-1$
   }

4) The tag is removed :-(.
   public class Test {
        void
	String bla= "";  
   }
The detection is compiler based and due to the syntax error there is no string and hence a warning is produced that the NON-NLS tag is not needed. The warning then triggers the removal.

The compiler should be smarter and not generate the warning in case of syntax errors.
I'll get this investigated...
Created attachment 144525
The fix and test case

This fix basically suppresses the warning for "unnecessary NON-NLS tag" when there's a syntax error on the line where the tag is/may be required. It doesnt change the usual behaviour of deletion of unnecessary NON-NLS tag.

There could be another approach as well- to suppress the warning in every case, even when it is explicit that the NON-NLS tag is redundant, and wait instead for the user to correct the compile error and also fix the tag himself. Ex: 

void int abc; //$NON-NLS-1$

We could leave the tag as such and wait for the user to make the line syntactically correct. With the above patch though, a warning in this case won't be suppressed and the NON-NLS tag will be removed. Is the second approach better?
I'm confused by the previous comment. The compiler never touches/deletes the tag.
(In reply to comment #4)
> I'm confused by the previous comment. The compiler never touches/deletes the
> tag.
> 

Ya. The compiler detects the syntax error and raises a warning which leads to the removal of the NON-NLS tag. The above patch suppresses this warning only in cases such as that given in comment # 1 ie. In cases where the tag is surely not needed viz. 'void int abc;//$NON-NLS-1$' , the warning isn't suppressed and the tag is thus removed. I meant to ask- should we suppress the warning in the second case also?
Comment on attachment 144525
The fix and test case

caught some issues..reworking the patch.
@Dani, let me reframe my question. So should we be more conservative and suppress the "unnecessary NON-NLS tag" warning on any line that has a syntax error? (Regardless of what the error is)
(In reply to comment #6)
> (From update of attachment 144525 [details])
> caught some issues..reworking the patch.
> @Dani, let me reframe my question. So should we be more conservative and
> suppress the "unnecessary NON-NLS tag" warning on any line that has a syntax
> error? (Regardless of what the error is)

I think you meant to ask, "Should we be more conservative and
suppress the "unnecessary NON-NLS tag" warning on ANY line in
a compilation unit that has ANY compilation error ?"

IMO, when the concerned save action is enabled, if the compiler
were to issue an incorrect unnecessary NON-NLS tag, this results
in "data loss" - So I personally would vote for being ultra
conservative and turning off this diagnostic in the presence of
_other_ errors.

If such behavior results in some truly unnecessary tags from being
removed by the save action, that is only a temporary situation
and will be remedied when the error condition is remedied and
saved, so shouldn't be a big deal ?




My standpoint is: never ever issue a false warning that could lead to data loss afterwards. If any doubt then don't warn.
Created attachment 144938
Revised Patch

Added a check for Syntax errors before reporting NLS problems. (Following the conservative approach.)
Also tweaked some old test cases which were exhibiting the old behaviour with regard to reporting NLS/Non-extarnlised string problems. Added a new test case ExternaliseStringLiteralsTest#test024.
This is an improvement. However the best solution would be to warn for unnecessary NON-NLS tags before the syntax errors and skip the check after the syntax error.
I need to check if the syntax error position is known.
Created attachment 145032
Proposed fix + regression tests

Ayushman, what do you think of this patch?
I could remove the hasSyntaxError field in the CompilationUnitResult and only use the position to get the same functionality, but I prefer not to touch existing public field even if this is inside internal code.
I'll check if we can further optimize it based on the fact that the string literals are sorted.
Created attachment 145125
Modified patch

@Olivier
I think this approach is also good. Optimised the reportNLSProblems() method and changed the initial value of firstSyntaxError to reduce the no. of comparisons. Also sorting the NLSTags now, so that the first few tags with no matching string literals can be straightaway reported as "useless" if there's no syntax error.
I prefer this behavior than the one that simply disables the nls check as soon as there is a syntax error.
Daniel, do you have a preference over the two strategies ?
>I prefer this behavior than the one that simply disables the nls check as soon
>as there is a syntax error.
>Daniel, do you have a preference over the two strategies ?
I definitely don't want to disable NLS warnings as soon as there's any syntax error. This would be bad. Look at this:


   public class Test {
	   void foo2() {
		   x
	   }
        void foo() {
        	String bla= "";  
        	String bla2= "";  //$NON-NLS-1$
        }
   }

The fix would no longer report the non-NLS-ed string in completely valid method foo(). This heuristic should at least be better scoped. Both patches are wrong regarding this.
We don't control NLS tags per methods. They are collected for the whole unit.
The best solution for now is to keep the detection before the first syntax error regardless where it occurs.
>We don't control NLS tags per methods.
Right, but can't you check when doing the NLS tag checking whether the enclosing member has syntax errors?
This is what I tried to explain.
We don't know what is the enclosing element. We just go through the whole list of NLS tags without any context.
So making a good detection before the first syntax error is (I am afraid) the best we can do without completely changing the way we manage NLS tags. To be honest I don't want to invest more time with NLS detection.

>We don't know what is the enclosing element. We just go through the whole list
>of NLS tags without any context.
So you don't even know the source range? Sounds strange to me.
Basically we don't remember the range where the syntax error is found. Doing this would require much more work and resources are tight.
I'm just worried that my NLS tag warnings toggle while writing code. Sounds like an unwanted regression to me.
Let me try what behavior we actually get using the last patch while typing. I don't think it is a regression. I'd rather say it is an improvement over the actual behavior.
(In reply to comment #16)
> The fix would no longer report the non-NLS-ed string in completely valid method
> foo(). This heuristic should at least be better scoped. Both patches are wrong
> regarding this.
Right, but the fix prevents code from being removed when it should not. So in this sense this is an improvement. Changing the NLS detection to be done per method is completely out of scope.
So if we want to fix this bug, we either:
1) disable nls checking when there is syntax errors (this basically means disabling nls checking while typing)
2) disable it post the syntax errors. At least the beginning of the unit is properly checked.

Doing more than that would require a time investment that I don't think we should do right now.
Although we do record the line numbers and the positions where NLS tags occur, we dont have the information about the method ranges in the scope where we report NLS problems. Our only check point there is the position of a syntax error. I concur with Olivier that we'll have to change the way NLS problems are reported if we want to include information about the method in which they occur, which is not a trivial task. Also, I think a syntax error is a transient condition that the user will anyway go ahead and fix, after which all the NLS errors will be reported. Dani, if you think the behaviour you pointed out is absolutely critical, I'll invest some more time and see if a solution can be found. 
(In reply to comment #25)

...

> Also, I think a syntax error is a transient
> condition that the user will anyway go ahead and fix, after which all the NLS
> errors will be reported. 

FWIW, the diagnostics for unused private fields, methods, types etc
is completely suppressed today if there is any syntax error anywhere
in the unit. So this patch looks like it is going some distance more
than the state of the art with respect to other warnings that also
trigger some other save actions.





>FWIW, the diagnostics for unused private fields, methods, types etc
>is completely suppressed today if there is any syntax error anywhere
>in the unit.
Right for types but not for locals and I consider strings inside a method more local than global.

Anyway, the currently proposed solutions are -1 for me. If we can't solve this at the core level then we'll do it on the ui side (i.e. quick fix/clean up) where we have more context.
(In reply to comment #27)

> Anyway, the currently proposed solutions are -1 for me. If we can't solve this
> at the core level then we'll do it on the ui side (i.e. quick fix/clean up)
> where we have more context.

I think it will help if you will take a moment to explain why
you think this is important to you - Why isn't this  a very
temporary, very transient state ? After all, a user is going to
fix the syntax error more or less immediately and resave the file
at which time the warnings would get issued appropriately thereby
triggering the save actions - Perhaps you have a use case in mind
that we are completely overlooking ?


>After all, a user is going to
>fix the syntax error more or less immediately
The problem is that  when typing in a method I see noise/flickering in other methods because the state of the warnings is toggled there. We want to reduce UI noise/distraction whenever possible.
(In reply to comment #29)
> >After all, a user is going to
> >fix the syntax error more or less immediately
> The problem is that  when typing in a method I see noise/flickering in other
> methods because the state of the warnings is toggled there. We want to reduce
> UI noise/distraction whenever possible.

Thanks, now I better understand your point. Ayush, can you
analyze what it would take ?


Note that I agree with Olivier: we shouldn't invest too much into this if it's not straightforward. It's easy for ui to workaround this.
To have this kind of functionality in the absence of any stored info/mapping between methods and NLS tags, we will have to record the ranges of all the methods. Then for each NLS tag for which we are about to raise the warning, we will have to find out if it occurs inside a method which has other errors or not (ascertaining this will again require comparing every error position with the range of a method). This check will prove to be very expensive,esp. if the no. of methods in a single compilation unit is very large. As for the UI noise, its in the hands of the user to turn off the NLS warnings (Preferences>Errors/Warnings) if he cant live with the fluctuations. (Because in any case a user who's trying to write some other method even in the presence of NLS errors in some existing method is 'ignoring' those errors outright. )
> As for the UI noise,
>its in the hands of the user to turn off the NLS warnings
>(Preferences>Errors/Warnings) if he cant live with the fluctuations.
That's not an option.

Given the current state of the core infrastructure I suggest you move the bug back to JDT UI.
Dani, do you want the bug moved to UI after releasing one of the above patches or as it is?
>Dani, do you want the bug moved to UI after releasing one of the above patches
>or as it is?
See comment 27.
OK, TODOs in UI:
- The clean up should only touch cases where the surrounding member does not contain syntax errors
- The quick fix should should still show up in case of syntax errors, but multi-fix should not be supported in such places and a multi-fix that has been started in an error-free location should not touch NLS problems in locations with syntax errors:

public class Test {
    int C= 0;   //$NON-NLS-1$ // offer quick fix and multi-fix for C and D
    int D= 0;   //$NON-NLS-1$ // offer quick fix and multi-fix for C and D
    
    void
    String bla= "";  //$NON-NLS-1$  // offer quick fix but *no* multi-fix
}
Fixed in HEAD. CleanUp and multi-fixes are not available any more, as soon as the affected file contains syntax errors.
