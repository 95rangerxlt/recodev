+++ This bug was initially created as a clone of Bug #198508 +++

As per bug 198504 comment 4

public class Test {
	public void foo(int a) {
		
	}
	public void bar() {
		f//content assist, select 'foo' and press semicolon
	}
}

This does not work for me; the selection is ignored and the text replaced with 'f;'

Note that if 'foo' takes no arguments, it does work.

+++ This bug was initially created as a clone of Bug #198508 +++

As per bug 198504 comment 4

public class Test {
	public void foo(int a) {
		
	}
	public void bar() {
		f//content assist, select 'foo' and press semicolon
	}
}

This does not work for me; the selection is ignored and the text replaced with 'f;'

Note that if 'foo' takes no arguments, it does work.
NB I meant bug 198508 comment 4, obviously ...
OK, got the pattern: it currently only works for fields, local variables and void methods with no parameters.
As a matter of interest, why is the subject 'only void methods'? I can imagine where it would be useful with non-void methods too:

String foo = f//content assist

In fact, I'd go as far as saying that regardless of whether there's a pattern such as whether the value is already assigned, you should support the ';' extension too. That way, individual developers can decide to press 'enter' (if they're going to do something with their value) or ';' (if they're not). There's still cases when you want to invoke a method returning a value even when you don't do anything with it.

As an example, consider the kind of API that allows you to chain method calls:

x.append("a").append("b").append("c")

In this case, it's perfectly natural to do

x.append("a");

and completely ignore the return result.

I can't see any benefit of only limiting it to 'void' methods; if something works sometimes but not others then either you'll get bug reports about it or people will just not use it believing it flaky. Thus, I suggest that it's used as a generic completion operation.

BTW what happens if there's a ; after the completion insertion point? In other words, in the 'x.append()' example, would you get a new ';' after each time? It might be nice if the ; only put a ; on the end if the character immediately after the proposal was not a ;
Right now I also can't imagine why it shouldn't work for all methods. Maybe the developer at the time when this was added only implemented the trivial case.
*** Bug 242362 has been marked as a duplicate of this bug. ***
In Eclipse Preferences -> Java -> Editor -> Typing : select the option "Automatically insert at correct position" for Semicolons. Apply this preference and the semicolon will be added at the correct position.

Let me know if this was the feature you were expecting.
(In reply to comment #6)
> In Eclipse Preferences -> Java -> Editor -> Typing : select the option
> "Automatically insert at correct position" for Semicolons. Apply this
> preference and the semicolon will be added at the correct position.
> 
> Let me know if this was the feature you were expecting.

Manju, that preference is not related to the reported case from comment 0, which still fails in 4.3 M6. This bug report is about not inserting the selected proposal when ';' is pressed. Looks like it was only implement for 0-arg methods.
Created attachment 229140
Fix.

Thanks Dani.
=> ';' was not part of the trigger to select methods with parameters and hence we had the bug.

=> Found another issue while testing, that is:
Enable smart insert option Eclipse Preferences -> Java -> Editor -> Typing : select the option "Automatically insert at correct position" for Semicolons.

public boolean foo3(int i){return true;}

1. foo3<ctrl+space> => foo3(|i|)
2. type ; => foo3(i);
3. type backspace => foo3(;)
The cursor position was not updated after inserting ; at step 2. Fixed this.

=> For non-void methods with parameters, after inserting the method using ; as trigger, the method is insert as below:
foo3(|i|);
The method is in link mode and user type ; then a redundant ; is added at the end of the method. Dani, should this be handled? Happens only when smart insert for semicolon is enabled and in this particular case the exit character is ')'.
(In reply to comment #8)
> Created attachment 229140 [details] [diff]
> Fix.

I tested the fix, but the problem is, that the caret (green vertical bar) is before the semicolon afterwards. It should be behind the semicolon.

 
> => Found another issue while testing, that is:
> Enable smart insert option Eclipse Preferences -> Java -> Editor -> Typing :
> select the option "Automatically insert at correct position" for Semicolons.
> 
> public boolean foo3(int i){return true;}
> 
> 1. foo3<ctrl+space> => foo3(|i|)
> 2. type ; => foo3(i);
> 3. type backspace => foo3(;)
> The cursor position was not updated after inserting ; at step 2. Fixed this.

Please file a new bug for this, as it is nor related to this bug here.
Created attachment 229220
Fix.

In this fix, semicolon is added as part of method selection trigger for methods with parameters.
When in link mode, typing ; will exit from the link mode and hence redundant semicolons are not added.
If smart insert of semicolon is enabled, then took care to avoid inserting redundant semicolons.
Dani, kindly review the fix.
The fix almost works, but it has an issue when there are no further characters in the file and auto-insertion of semicolons is enabled:

package a.b;

public class T {

	public Object foo3(int i) {
		f<END OF FILE>

- if I select 'finalize' and then press ';' nothing happens
- if I select 'foo'  and then press ';' an exception occurs 1]

Some offset/length computations are not 100% correct.


[1] java version "1.6.0_34-ea"
Java(TM) SE Runtime Environment (build 1.6.0_34-ea-b01)
Java HotSpot(TM) Client VM (build 20.9-b01, mixed mode)
Configuration location:
    file:/C:/eclipse/workspaces/HEAD/.metadata/.plugins/org.eclipse.pde.core/eoe (Sun)/
Configuration file:
    file:/C:/eclipse/workspaces/HEAD/.metadata/.plugins/org.eclipse.pde.core/eoe (Sun)/config.ini loaded
Install location:
    file:/C:/eclipse/drops/eclipse-SDK-I20130326-0800-win32/
Framework located:
    file:/C:/eclipse/workspaces/HEAD/org.eclipse.osgi/
Framework classpath:
    file:/C:/eclipse/workspaces/HEAD/org.eclipse.osgi/org.eclipse.osgi_3.9.0.v20130318-1847.jar
    file:/C:/eclipse/workspaces/HEAD/org.eclipse.osgi/
Splash location:
    C:\eclipse\workspaces\HEAD\Git\eclipse.platform\platform\org.eclipse.platform\splash.bmp
Debug options:
    file:/C:/eclipse/workspaces/HEAD/.metadata/.plugins/org.eclipse.pde.core/eoe (Sun)/.options loaded
Time to load bundles: 37
Starting application: 2953
osgi> Application Started: 12078
!SESSION 2013-04-03 11:33:30.166 -----------------------------------------------
eclipse.buildId=4.3.0.I20130326-0800
java.version=1.6.0_34-ea
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=de_CH
Framework arguments:  -product org.eclipse.sdk.ide -keyring c:\eclipse\.keyring
Command-line arguments:  -product org.eclipse.sdk.ide -data C:\eclipse\workspaces\HEAD/../eoe -dev file:C:/eclipse/workspaces/HEAD/.metadata/.plugins/org.eclipse.pde.core/eoe (Sun)/dev.properties -debug C:\eclipse\workspaces\HEAD\.metadata\.plugins\org.eclipse.pde.core\eoe (Sun)/.options -os win32 -ws win32 -arch x86 -console -consolelog -clean -keyring c:\eclipse\.keyring

!ENTRY org.eclipse.egit.ui 2 0 2013-04-03 11:33:43.565
!MESSAGE Warning: EGit couldn't detect the installation path "gitPrefix" of native Git. Hence EGit can't respect system level
Git settings which might be configured in ${gitPrefix}/etc/gitconfig under the native Git installation directory.
The most important of these settings is core.autocrlf. Git for Windows by default sets this parameter to true in
this system level configuration. The Git installation location can be configured on the
Team > Git > Configuration preference page's 'System Settings' tab.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.egit.ui 2 0 2013-04-03 11:33:43.568
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\meg'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.ui 4 10001 2013-04-03 11:34:32.511
!MESSAGE Internal Error
!STACK 0
org.eclipse.jface.text.BadLocationException
	at org.eclipse.jface.text.AbstractDocument.addPosition(AbstractDocument.java:355)
	at org.eclipse.core.internal.filebuffers.SynchronizableDocument.addPosition(SynchronizableDocument.java:236)
	at org.eclipse.jdt.internal.ui.text.java.ParameterGuessingProposal.apply(ParameterGuessingProposal.java:142)
	at org.eclipse.jdt.internal.ui.text.java.AbstractJavaCompletionProposal.apply(AbstractJavaCompletionProposal.java:493)
	at org.eclipse.jdt.internal.ui.text.java.LazyJavaCompletionProposal.apply(LazyJavaCompletionProposal.java:488)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.insertProposal(CompletionProposalPopup.java:940)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.verifyKey(CompletionProposalPopup.java:1339)
	at org.eclipse.jface.text.contentassist.ContentAssistant$InternalListener.verifyKey(ContentAssistant.java:808)
	at org.eclipse.jface.text.TextViewer$VerifyKeyListenersManager.verifyKey(TextViewer.java:491)
	at org.eclipse.swt.custom.StyledTextListener.handleEvent(StyledTextListener.java:65)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1057)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1081)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:778)
	at org.eclipse.swt.custom.StyledText.handleKeyDown(StyledText.java:5940)
	at org.eclipse.swt.custom.StyledText$7.handleEvent(StyledText.java:5636)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1057)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1081)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1108)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1104)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1525)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4723)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:344)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4611)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4977)
	at org.eclipse.swt.internal.win32.OS.CallWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.CallWindowProc(OS.java:2440)
	at org.eclipse.swt.internal.BidiUtil.windowProc(BidiUtil.java:639)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2546)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1108)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:992)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:137)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:598)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:555)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1426)
Created attachment 229342
Patch.

Thanks Dani for finding the glitch.
The exception was thrown when checking the document for an existing semicolon. The offset given was exceeding the document length in this case.
Comment on attachment 229342
Patch.

The patch does not apply on 'master' and seems incomplete.
Created attachment 229367
Patch.

There was some mix up in my workspace. Attaching a new patch for review.
Thanks Manju.

I committed your fix with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=4a050305939c6d797c481566c3915e524c770989 but added a space after each "//". Please consider this in your next patches.
