in the example below, if you convert to nested and tick the static option then the resulting code doesn't compile and doesn't look quite right:

------------------

public interface A
{
   <T> void a();
   
   <T> void b();
}


class Z
{
   void m()
   {
      A a = new A()
      { //convert to nested here
         public <T> void b()
         {
         }
      
         public <T> void a()
         {
         }
      };
   }
}

---------------------------------------
Result:
--------------------------------------

public interface A
{
   <T> void a();
   
   <T> void b();
}


class Z
{
   private static final class AZ<T, T> implements A//This line is wrong
   {
      public <T> void b()
      {
      }

      public <T> void a()
      {
      }
   }

   void m()
   {
      A a = new AZ<T, T>();//This line is wrong
   }
}

in the example below, if you convert to nested and tick the static option then the resulting code doesn't compile and doesn't look quite right:

------------------

public interface A
{
   <T> void a();
   
   <T> void b();
}


class Z
{
   void m()
   {
      A a = new A()
      { //convert to nested here
         public <T> void b()
         {
         }
      
         public <T> void a()
         {
         }
      };
   }
}

---------------------------------------
Result:
--------------------------------------

public interface A
{
   <T> void a();
   
   <T> void b();
}


class Z
{
   private static final class AZ<T, T> implements A//This line is wrong
   {
      public <T> void b()
      {
      }

      public <T> void a()
      {
      }
   }

   void m()
   {
      A a = new AZ<T, T>();//This line is wrong
   }
}
It seems that the result is OK in

Eclipse Java EE IDE for Web Developers.
Version: Juno Service Release 1
Build id: 20120920-0800
Works for me using 4.3 M3.
It definitely doesn't work for me.
I have build I20121031-2000 (Which as far as I can tell is 4.3M3).
The result is identical to the way I reported it 6 years ago!
Please can you double check?
(In reply to comment #3)
> It definitely doesn't work for me.
> I have build I20121031-2000 (Which as far as I can tell is 4.3M3).
> The result is identical to the way I reported it 6 years ago!
> Please can you double check?

Maybe you have other settings or missed something, but two unrelated persons just stated that it works. If you disagree, please provide more detailed steps starting off a new workspace.
I followed the instructions in my initial report.
I just did it using a new Workspace as well just to be sure.
The problem only manifests itself if you tick the "Declare the nested type as 'static'." 
Can you please double check that you did indeed tick that option?
If you aren't able to recreate it can you tell me the result you get in your test?
OK, I see the difference now. I used the Quick Fix which does work, but the refactoring does not.
Phew... Thank you very much Dani.
Sorry for the false alarm, I made the same mistake (overlooked "tick the static option")
Since I was responsible for the false alarm :), let me contribute by providing somewhat smaller example (based on the original example)

public interface A {
    <T> void a();
}

class Z {
    void m() {
        // Convert A to nested class and tick static option
        new A() {
            public <T> void a() {
            }
        };
    }
}
Thank you Milos,
I should point out that in your simpler example there is only 1 compiler error in the result.
In my original example there are 2 compiler errors (as indicated in the original bug report). 
I suspect that the fix will involve addressing both of these cases.
Created attachment 234012
fix

Turned out to be a simple fix in the end.
The fix looks good. 
However, since it includes ASTVisitor, it would be good if Markus also looks at it once. Markus, kindly have a look.

Nikolay, please take care of the general guidelines also:
- Add your credentials to the copyright headers
- Make sure the copyright date is updated to 2013
- You could refer http://wiki.eclipse.org/JDT_UI/How_to_Contribute to configure your workspace with JDT UI specific Save Actions and follow the Coding Conventions mentioned there.
- Post this in the bug report as a comment: "This contribution complies with http://www.eclipse.org/legal/CoO.php"
(In reply to comment #12)
> The fix looks good. 
> However, since it includes ASTVisitor, it would be good if Markus also looks
> at it once. Markus, kindly have a look.

Markus is away and pretty busy, so, I suggest once you're happy with the patch, you commit it. Markus usually looks at the incoming changes anyway.
Created attachment 234160
unit test, fix and code review comments incorporated

This contribution complies with http://www.eclipse.org/legal/CoO.php
Thanks for the final patch.
Released with:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=0c58d519f5cc31186a022586f37aa20eb6acb273
Reverted the fix as it should go in 4.4 M2.
I would release it again once 4.4 M1 is complete.

http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=5ae94d8f9c8594071b4c1cc47c20944bc0319aa2
Released with:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=bc01471bb9bd65a3c133006714462002a4c84c6c
The fix worked for the specific example, but it still failed if
a) the method type variable was actually referenced inside the anonymous
b) the anonymous contained e.g. a class type parameter declaration

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=08e00e51edbf22976edeb8f1fdd14303c8039f1d
