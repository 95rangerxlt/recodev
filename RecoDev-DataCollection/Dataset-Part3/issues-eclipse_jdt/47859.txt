'Smart Indent' requires more work to correct its errors, than it saves.

I am used since Turbo Pascal 3 to selected text accurately and controlling 
which end-of-line I am selecting (typically before the line); such that the 
text will paste correctly at the target location.

The 'Smart Indent' feature frequently overrides my correct pasting and 
indentation and makes this incorrect.

Notable problems include:

1) statement continuation lines, originally indented 4 spaces, are indented far 
right to match their opening brackets. My original indentation was correct and 
absolutely preferable.

2) copy and paste of method declaration line immediately before existing 
(typically to add both an extra 'defaultable' parameter and keep a backwards-
compatible declaration) indents the original declaration.
  - closure of method bracket does not correct faulty indentation.
  - it is not acceptable for a tool to make erroneous decisions in a permanent 
manner, based on tentative user input (eg the fact that I was half-way thru 
adding a new method).

3) sometimes I see indentation of odd numbers of characters. this requires 
extensive time and workaround - typically delete pasted section, add arbitrary 
line of code as indentation anchor, repaste - to correct.

4) Smart Insert setting is per-file, preventing me from effectively getting rid 
of it.

5) Standard Insert mode is insufficiently functional to be usable. All that is 
needed is insert-to-continuation level on newline.

6) Significant indentation processing is only required when cutting and pasting 
code between different structural locations (depths). This is a minority of 
code editing; whereas the majority involves editing and partial formation of 1-
deep structural elements, without there being definite changes in code 
structural depth. Hence (PROVED) it is inappropriate for indentation of 
existing code to be affected on an automatic basic. We've got the Source | 
Format Code command at our bloody Ctrl-Shift-F fingertips if and when we need 
it.

Frankly I would be a lot happier without this so-called Smart feature. Because 
I have 14 years of cutting & pasting correctly, and when the 'smart' features 
are doing more than a basic cut and paste most of the time they are creating 
errors.

I would suggest that the only automatic indentation feature of use to me is 
indent continuation on newline.

Secondly I would like Standard Insert mode to be functional enough for standard 
editing use. This would have indent-level-continuation on end of line, and 
would be selectable (defaultable?) for the entire Workspace. So I need not be 
troubled by further appearances of the Smart Indent feature again.

Concluding, seems I've written a bit of a damning indictment of the feature in 
question. I like to be positive and constructive about things but my decision 
is that this unwanted automation can be proved to be unfounded and in 
disagreement with actual editing requirements, as to the informational basis on 
which it makes changes and the permanency (requiring the human to correct them) 
of these changes.

Sorry about the algorithmic effort that went in here,
But you can't make definitive decisions to override humans based on tentative 
informations,
Get rid of it.

Regards,
Thomas

'Smart Indent' requires more work to correct its errors, than it saves.

I am used since Turbo Pascal 3 to selected text accurately and controlling 
which end-of-line I am selecting (typically before the line); such that the 
text will paste correctly at the target location.

The 'Smart Indent' feature frequently overrides my correct pasting and 
indentation and makes this incorrect.

Notable problems include:

1) statement continuation lines, originally indented 4 spaces, are indented far 
right to match their opening brackets. My original indentation was correct and 
absolutely preferable.

2) copy and paste of method declaration line immediately before existing 
(typically to add both an extra 'defaultable' parameter and keep a backwards-
compatible declaration) indents the original declaration.
  - closure of method bracket does not correct faulty indentation.
  - it is not acceptable for a tool to make erroneous decisions in a permanent 
manner, based on tentative user input (eg the fact that I was half-way thru 
adding a new method).

3) sometimes I see indentation of odd numbers of characters. this requires 
extensive time and workaround - typically delete pasted section, add arbitrary 
line of code as indentation anchor, repaste - to correct.

4) Smart Insert setting is per-file, preventing me from effectively getting rid 
of it.

5) Standard Insert mode is insufficiently functional to be usable. All that is 
needed is insert-to-continuation level on newline.

6) Significant indentation processing is only required when cutting and pasting 
code between different structural locations (depths). This is a minority of 
code editing; whereas the majority involves editing and partial formation of 1-
deep structural elements, without there being definite changes in code 
structural depth. Hence (PROVED) it is inappropriate for indentation of 
existing code to be affected on an automatic basic. We've got the Source | 
Format Code command at our bloody Ctrl-Shift-F fingertips if and when we need 
it.

Frankly I would be a lot happier without this so-called Smart feature. Because 
I have 14 years of cutting & pasting correctly, and when the 'smart' features 
are doing more than a basic cut and paste most of the time they are creating 
errors.

I would suggest that the only automatic indentation feature of use to me is 
indent continuation on newline.

Secondly I would like Standard Insert mode to be functional enough for standard 
editing use. This would have indent-level-continuation on end of line, and 
would be selectable (defaultable?) for the entire Workspace. So I need not be 
troubled by further appearances of the Smart Indent feature again.

Concluding, seems I've written a bit of a damning indictment of the feature in 
question. I like to be positive and constructive about things but my decision 
is that this unwanted automation can be proved to be unfounded and in 
disagreement with actual editing requirements, as to the informational basis on 
which it makes changes and the permanency (requiring the human to correct them) 
of these changes.

Sorry about the algorithmic effort that went in here,
But you can't make definitive decisions to override humans based on tentative 
informations,
Get rid of it.

Regards,
Thomas
I'm going to raise the priority because I spend all day correcting this.
Thanks for your comprehensive analysis... :-)

- I quite agree that the feature is not yet usable due to the points you mentioned.

- Note that you can selectively turn the feature off in the preferences:
Java->Editor->Typing: "Pasting for correct indentation" to harvest your fourteen
years of cutting & pasting but without disabling everything else.

- Bugzilla says about the priority: "This field is utilized by the
programmers/engineers to prioritize their work to be done." Resetting to P3, you
can adjust the severity to reflect the importance to you.


Thanks for your comprehensive analysis... :-)

- I quite agree that the feature is not yet usable due to the points you mentioned.

- Note that you can selectively turn the feature off in the preferences:
Java->Editor->Typing: "Pasting for correct indentation" to harvest your fourteen
years of cutting & pasting but without disabling everything else.

- Bugzilla says about the priority: "This field is utilized by the
programmers/engineers to prioritize their work to be done." Resetting to P3, you
can adjust the severity to reflect the importance to you.
oops, bugzilla smart feature inserted comment twice.
Thanks for your assistance, Tom, I've done the 'pasting for correct identation' 
and that does help. 

Regards and thanks again for your work on a great product.

- fixed some of the outstanding issues (closing brace alignment, continuation)
- workaround shown to disable smart pasting
- there will always be cases where doing the exactly right thing with carefully
selecting and pasting will be more effective, however, smart paste covers the
90% case.

-> closing as fixed / won't fix other issues

fixed > 20031209
Thanks for your help. I'll be interested to try out the syntax/ editing 
improvements but will probably wait until the Milestone (6) is released.

One more thing that's important to me, is that my fingers will instinctively 
correct indenting which appears incorrect to me. In some situations the tool 
would fight with my corrections, repeatedly reversing them. I'd hope the tool 
now can detect direct human override and determine not to interfere in these 
cases. Can you confirm this is now the case?

Regards. Thomas
