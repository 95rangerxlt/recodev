From the newsgroup:
I have implemented an IClasspathContainer that mimics the behaviour of a
'lib' folder, i.e. it adds jars to the project classpath that are placed
in designated folder. In the Java Perspective, Package Explorer view I had
hoped to use the standard import wizard to import jars into the designated
folder by right-clicking the classpath container icon, however this is not
currently possible, for two reasons:

1. The Import Wizard expects the selection passed to it, to be either an
IResource or to be Iadapatable and return an IResource obeject.

2. The Pacakage Explorer visually represents an IClasspathContainer using
the org.eclipse.jdt.internal.ui.packageview.ClassPathContainer object,
which does implement IAdaptable but does not return an IResource object.

Can I suggest a simple change to ClassPathContainer.getAdapter() to return
the IResource object of the underlying IClassspathContainer as follows:

public Object getAdapter(Class adapter) {
if (adapter == IWorkbenchAdapter.class) {
return this;
}
else if ((adapter == IResource.class) && this.fContainer instanceof
IAdaptable) {
return this.fContainer.getAdapter(IResource.class);
} else {
return null;
}
}

From the newsgroup:
I have implemented an IClasspathContainer that mimics the behaviour of a
'lib' folder, i.e. it adds jars to the project classpath that are placed
in designated folder. In the Java Perspective, Package Explorer view I had
hoped to use the standard import wizard to import jars into the designated
folder by right-clicking the classpath container icon, however this is not
currently possible, for two reasons:

1. The Import Wizard expects the selection passed to it, to be either an
IResource or to be Iadapatable and return an IResource obeject.

2. The Pacakage Explorer visually represents an IClasspathContainer using
the org.eclipse.jdt.internal.ui.packageview.ClassPathContainer object,
which does implement IAdaptable but does not return an IResource object.

Can I suggest a simple change to ClassPathContainer.getAdapter() to return
the IResource object of the underlying IClassspathContainer as follows:

public Object getAdapter(Class adapter) {
if (adapter == IWorkbenchAdapter.class) {
return this;
}
else if ((adapter == IResource.class) && this.fContainer instanceof
IAdaptable) {
return this.fContainer.getAdapter(IResource.class);
} else {
return null;
}
}
released the change
