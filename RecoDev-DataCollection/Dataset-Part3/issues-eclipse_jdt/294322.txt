User-Agent:       Mozilla/5.0 (X11; U; Linux x86_64; de; rv:1.9.0.14) Gecko/2009091008 Firefox/3.0.6 (Debian-3.0.6-3)
Build Identifier: 20090619-0625

When exporting a "Runnable JAR File" from an Eclipse project which itself contains JAR files, a class loader is included in the runnable JAR.
This JAR-in-JAR class loader seems to have problems loading classes from JAR-files with filenames containing special characters like '+'. When running such a runnable JAR, an InvocationTargetException caused by NoClassDefFoundError is thrown.



Reproducible: Always

Steps to Reproduce:
1. Export a Runnable JAR File from an Eclipse project which references a JAR library.
2. Select option "Package required libraries into generated JAR" in the Export dialog.
3. Execute the runnable JAR.

User-Agent:       Mozilla/5.0 (X11; U; Linux x86_64; de; rv:1.9.0.14) Gecko/2009091008 Firefox/3.0.6 (Debian-3.0.6-3)
Build Identifier: 20090619-0625

When exporting a "Runnable JAR File" from an Eclipse project which itself contains JAR files, a class loader is included in the runnable JAR.
This JAR-in-JAR class loader seems to have problems loading classes from JAR-files with filenames containing special characters like '+'. When running such a runnable JAR, an InvocationTargetException caused by NoClassDefFoundError is thrown.



Reproducible: Always

Steps to Reproduce:
1. Export a Runnable JAR File from an Eclipse project which references a JAR library.
2. Select option "Package required libraries into generated JAR" in the Export dialog.
3. Execute the runnable JAR.
Created attachment 151418
Runnable JAR file containg a JAR library with a special character in the filename (hello+world.jar)

The following exception is thrown when executing this Runnable JAR file:
Exception in thread "main" java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader.main(JarRsrcLoader.java:56)
Caused by: java.lang.NoClassDefFoundError: jarinjar/HelloWorld
	at CallJarInJar.main(CallJarInJar.java:5)
	... 5 more
Caused by: java.lang.ClassNotFoundException: jarinjar.HelloWorld
	at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)
	... 6 more
Created attachment 151419
Runnable JAR file containing the same JAR library with a sane filename (hello_world.jar)

Executing this Runnable JAR file produces the expected output:
Hello, world!
Created attachment 151420
 Runnable JAR file containg a JAR library (hello+world.jar) and an URL-encoded filename in the Manifest-file

When URL-encoding the filename of the included JAR library in the file META-INF/MANIFEST.MF, the runnable jar file produces the expected output:
Hello, World!

Thus one just has to URL-encoded the value of the "Rsrc-Class-Path" entry in the Manifest file to fix the bug:

Rsrc-Class-Path: ./ hello%2Bworld.jar
instead of
Rsrc-Class-Path: ./ hello+world.jar


Regards,
Robert Hanussek
Fixed in HEAD of FatJarRsrcUrlManifestProvider.java.
