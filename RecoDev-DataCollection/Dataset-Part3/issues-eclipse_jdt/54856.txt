The 'Refresh' action in the context menu of the call hierarchy should only
refresh the selected method(s).

Right now, the whole hierarchy is refreshed. This is unfortunate, e.g. if the
user cancelled a tree expansion and later changes her mind and wants to see
what's below that node all the same.

The 'Refresh' action in the context menu of the call hierarchy should only
refresh the selected method(s).

Right now, the whole hierarchy is refreshed. This is unfortunate, e.g. if the
user cancelled a tree expansion and later changes her mind and wants to see
what's below that node all the same.
Hi Markus,

Does that go for the keyboard shortcut (F5)? Does it make sense that this one
only  refreshes the currently selected method?

Is there a need for a "Refresh view" menu entry which refreshes the whole view
(like in the CVS Repositories view)?
Yes, I meant that for F5 and the context menu action. I don't think that a
"Refresh View" action is necessary. The call hierarchy tree always has only one
root item, so it is easy to refresh the whole view by refreshing the first item.

The Resource Navigator and the Package Explorer also refresh the current
selection on File > Refresh or via the context menu.
Raksha, could you please have a look?

> I don't think that a
> "Refresh View" action is necessary. The call hierarchy tree always has only one
> root item, so it is easy to refresh the whole view by refreshing the first item.

This has changed in the mean time. We should keep the button in the view toolbar but rename it to "Refresh View" and take the key binding away (don't set the action definition ID / command ID).
Created attachment 148424
Patch
(In reply to comment #3)
> Raksha, could you please have a look?
> 
> > I don't think that a
> > "Refresh View" action is necessary. The call hierarchy tree always has only one
> > root item, so it is easy to refresh the whole view by refreshing the first item.
> 
> This has changed in the mean time. We should keep the button in the view
> toolbar but rename it to "Refresh View" and take the key binding away (don't
> set the action definition ID / command ID).

I have removed the key binding for the toolbar action and separated the classes 'RefreshViewAction' and the context menu action 'RefreshSingleElementAction'. Markus, could you pls take a look if its okay?
Did you actually try this? When I open a call hierarchy, then remove a caller that is shown in the tree, and then use Refresh from the context menu, the old caller is still shown.

The keybindings are only looking good, but the binding for the single refresh does not actually works. It only works for F5 due to the legacy workaround in CallHierarchyViewPart#handleKeyEvent(KeyEvent). If you rebind the Refresh command to a different key, then that key does not work. I guess you just have to call setGlobalActionHandler for the single refresh action.
Hint: You probably need similar code to what we already have in ExpandWithConstructorsAction#run() to force a re-calculation.
Created attachment 149223
P
(In reply to comment #6)
> Did you actually try this? When I open a call hierarchy, then remove a caller
> that is shown in the tree, and then use Refresh from the context menu, the old
> caller is still shown.
> 


Fixed. The refresh was not updating the structural changes since it was picking them up from the cache in MethodWrapper. It works fine if we clear the cache before refresh. It would be cheaper to clear cache entirely because, removing only the selected elements from the cache would also require removing their children from the cache, which have to be computed freshly. Instead we could clear out the cache and compute the children only once.

> The keybindings are only looking good, but the binding for the single refresh
> does not actually works. It only works for F5 due to the legacy workaround in
> CallHierarchyViewPart#handleKeyEvent(KeyEvent). If you rebind the Refresh
> command to a different key, then that key does not work. I guess you just have
> to call setGlobalActionHandler for the single refresh action.


I have removed the workaround in CallHierarchyViewPart, and set the action handler directly to the action.

> Hint: You probably need similar code to what we already have in
> ExpandWithConstructorsAction#run() to force a re-calculation.

Nope. The ExpandWithConstructorsAction#run only returns additional children when checked, but when the [callers] node is expanded, it still shows the old callers list.
- The commandID and key handling looks good.

- The parameter of MethodWrapper#removeFromCache(MethodWrapper) doesn't make sense. Please remove it, and also remove "before refresh" from the method's Javadoc. The method does not do a refresh, and it could also be used in other scenarios.

- You said "It *would be* cheaper to clear cache entirely". But doesn't your code do exactly that? So it *is* cheaper, not *would be*, right?
But I think that's too brute-force. Consider a scenario where you have a somewhat big hierarchy, and you need to refresh one element. Does that really mean you have to lose the cache for all other elements that would be so much quicker to calculate if the cache was still available? I would just remove the refreshed elements from the cache. If the user needs a complete refresh, she should use Refresh View.

- RefreshSingleElementAction also refreshes multiple elements. Please remove the word "Single".

- When I select multiple expanded instances of the same method in the Caller Hierarchy and then refresh them, I get an NPE. A simple solution could be to collect the elements to expand in a list and only expand them afterwards, in a second loop.

- It also happened to me that an element didn't refresh at all any more, because an earlier invocation of MethodWrapper#removeFromCache(..) cleared the cache, and thus further invocations didn't find the key any more and hence didn't reset fElements to null. 'fElements= null;' needs to be executed every time.

- Please format the code according to the project standards (e.g. spaces in 'if' statements). If you're unsure, use the formatter.
Created attachment 149403
Patch with review changes.
(In reply to comment #10)
 
> - You said "It *would be* cheaper to clear cache entirely". But doesn't your
> code do exactly that? So it *is* cheaper, not *would be*, right?
> But I think that's too brute-force. Consider a scenario where you have a
> somewhat big hierarchy, and you need to refresh one element. Does that really
> mean you have to lose the cache for all other elements that would be so much
> quicker to calculate if the cache was still available? I would just remove the
> refreshed elements from the cache. If the user needs a complete refresh, she
> should use Refresh View.
> 
 
Yeah the ealier patch did wipe out the cache entirely. I suggested so because in the scenario where you make structural changes to the *child* of a node but refresh its *parent* node, and then expand the child, the child still shows the old children. The structural changes are picked up for a node only if *the same* node is refreshed. And to remove the child node also from the cache, we need to compute it first. Rather than that,  I tried to remove the cache and then do the computation freshly for whichever node is expanded from then on... It wont be a full refresh in any case. The call hierarchy would still remain as it is, only further expansions are computed freshly and added to the cache everytime.
Looks good now. If you agree with the 3 little tweaks below, then please fix them and release to HEAD.

- MethodWrapper#removeFromCache(): The "if (fMethodCache.containsKey(key))" is unnecessary, since Map#remove(..) already handles the case where the key is not in the map. Just leave "fMethodCache.remove(key);" there.

- RefreshElementAction#run():
  - The variable "list" should have a speaking name, e.g. "toExpand".
  - Why do we need the special case for the root element? It works fine for me without the "if (element.getParent() == null) {..}", and if there are multiple root nodes, "fPart.refresh()" refreshes more than what the user selected. Please remove this or explain.
(In reply to comment #13)

Made the tweaks and released to HEAD.
.
