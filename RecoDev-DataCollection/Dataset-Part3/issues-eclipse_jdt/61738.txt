Calling editor.getViewer().setUndoManager() will cause a leak in the existing 
undo manager. The problem is that there is no way to get the existing undo 
manager to call disconnect on it. Calling connect adds the undo manager as a 
listener to the viewer. Since it is hanging off the viewer, it can't get 
garbage collected. It seems odd that the previous undoManager is not 
disconnected in the setUndoManager() method. It also seems odd that the new 
undo manager is not automatically connected.

Calling editor.getViewer().setUndoManager() will cause a leak in the existing 
undo manager. The problem is that there is no way to get the existing undo 
manager to call disconnect on it. Calling connect adds the undo manager as a 
listener to the viewer. Since it is hanging off the viewer, it can't get 
garbage collected. It seems odd that the previous undoManager is not 
disconnected in the setUndoManager() method. It also seems odd that the new 
undo manager is not automatically connected.
Removing target milestone, no further action for 3.0.
Does this mean it will not be fixed?
No. WONTFIX means we don't fix it.
This is a bug in SourceViewer: each time when it is newly configured (e.g. upon
editor reuse), the old undo manager stays around holding on to its document and
handling events (e.g. key and mouse events from the viewer to which it is still
connected). I've fixed this in the SourceViewer.

>The problem is that there is no way to get the existing undo 
>manager to call disconnect on it.
It is the clients (i.e. the one who calls setUndoManager(...)) responsibly to 
unconfigure the undo manager when he no longer uses the ITextViewer. This can be
done by calling IUndoManager.disconnect() and then
ITextViewer.setUndoManager(null) (or the other way around).

