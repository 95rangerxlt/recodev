extract method could replace more than 1 occurence of extracted code

in the simplest case - if extracting 1 expression, it could replace all 
occurences in the current method

int m(int p){
   int i= /*[*/m(m(1))/*]*/;
   int j= m(m(1)) + m(m(1));
   return p+1;
}
could be refactored to:

int m(int p){
   int i= three();
   int j= three() + three();
   return p+1;
}

in a more compilacted case, it could find occurences of code in the same cu
(but then, you must compare bindings - identified 'i' may mean different things 
in different methods)
and, it's not matching 1 node then - you must match a sequence of nodes possibly

i'd be happy with the simple case (although it's possible to achieve the same 
goal by using 'extract temp' and 'inline temp')

extract method could replace more than 1 occurence of extracted code

in the simplest case - if extracting 1 expression, it could replace all 
occurences in the current method

int m(int p){
   int i= /*[*/m(m(1))/*]*/;
   int j= m(m(1)) + m(m(1));
   return p+1;
}
could be refactored to:

int m(int p){
   int i= three();
   int j= three() + three();
   return p+1;
}

in a more compilacted case, it could find occurences of code in the same cu
(but then, you must compare bindings - identified 'i' may mean different things 
in different methods)
and, it's not matching 1 node then - you must match a sequence of nodes possibly

i'd be happy with the simple case (although it's possible to achieve the same 
goal by using 'extract temp' and 'inline temp')
would be interesting extending the scope beyond a single method.
[refactoring]

Consider for 2.1
*** Bug 23088 has been marked as a duplicate of this bug. ***
Chaning state from assigned later to resolved later. Assigned later got 
introduced by the last bug conversion and is not a supported Eclipse bug state.
It looks like this was addressed in M2. I suggest that people that voted for 
this vote for something else now. 
Correct, got addressed for M2.
Fixed
