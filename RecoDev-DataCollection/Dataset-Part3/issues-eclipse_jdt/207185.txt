Build ID: 20070202_0030 (WSDCi)

Steps To Reproduce:
1. Source:   	String a = new String("s");
2. Select "s" and Shift-Alt-L
3. Suggested name is "string"

I'd like for the suggested name to be "original" since the signature for the constructor is

    public String(String original) {

Currently it is apparently constructed from the default name for the type.  (bools are named b).


More information:
The reason for this is, that if you do this step often on calls with complex signatures, you can let the source be self explanatory since you don't have to look at the source of the called code to see the names of the parameters.

Often in the style of "new Something(true, false, false, true)".

Here would

bool useCache = true;
bool invalidateSomething = false;
bool emailSysop = false;
bool crashAfterwards = true;
new Something(useCache, invalidateSomething, emailSysop, crashAfterwards)

be much easier to understand on its own.

Build ID: 20070202_0030 (WSDCi)

Steps To Reproduce:
1. Source:   	String a = new String("s");
2. Select "s" and Shift-Alt-L
3. Suggested name is "string"

I'd like for the suggested name to be "original" since the signature for the constructor is

    public String(String original) {

Currently it is apparently constructed from the default name for the type.  (bools are named b).


More information:
The reason for this is, that if you do this step often on calls with complex signatures, you can let the source be self explanatory since you don't have to look at the source of the called code to see the names of the parameters.

Often in the style of "new Something(true, false, false, true)".

Here would

bool useCache = true;
bool invalidateSomething = false;
bool emailSysop = false;
bool crashAfterwards = true;
new Something(useCache, invalidateSomething, emailSysop, crashAfterwards)

be much easier to understand on its own.
We have this already in Eclipse 3.3. Use code assist in the 'Extract local' dialog, or use the 'Extract Local' quick assist (Ctrl + 1) to see all proposals.

One of them is the name of the parameter if the extracted expression is a method argument.
The question is if you should be shown as the default proposals. When implementing the feature and trying it out, we decided to give the proposals derived from the type priority.

ooking at this again, it would be better to gove it more relevance. fixed in 3.4 (I20071024).
fixed
*** Bug 64302 has been marked as a duplicate of this bug. ***
