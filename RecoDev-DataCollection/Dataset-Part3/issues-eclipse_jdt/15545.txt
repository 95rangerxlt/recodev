Build M5

The override methods dialog only includes the nearest declaration of each 
method which can be overridden. This is very confusing!

For instance, I have an Eclipse editor which I'm working on. I wanted to 
override dispose() so I brought up the Override Methods dialog. I know that 
dispose() is declared on WorkbenchPart, so I went right there, but I couldn't 
find the method. It turns out that one of my superclasses had already 
overridden it. But I had several superclasses and each had many methods, so I 
actually had to dismiss the dialog and do a search to find out where the 
method was implemented just so that I could go back to the dialog and find it! 
This was an unnecessary and frustrating hunt!

Steps to repeat:

1) Create the following classes:

public class A {
	public void foo() {}
}

public class B extends A {
	public void foo() {}
}

public class C extends B {

}

2) Select C in the Packages view

3) Select C in the Outline View and choose 'Override methods...'

4) The superclass A doesn't even appear on the list. I should be able to 
select foo() in either A or B and get the same result.

Build M5

The override methods dialog only includes the nearest declaration of each 
method which can be overridden. This is very confusing!

For instance, I have an Eclipse editor which I'm working on. I wanted to 
override dispose() so I brought up the Override Methods dialog. I know that 
dispose() is declared on WorkbenchPart, so I went right there, but I couldn't 
find the method. It turns out that one of my superclasses had already 
overridden it. But I had several superclasses and each had many methods, so I 
actually had to dismiss the dialog and do a search to find out where the 
method was implemented just so that I could go back to the dialog and find it! 
This was an unnecessary and frustrating hunt!

Steps to repeat:

1) Create the following classes:

public class A {
	public void foo() {}
}

public class B extends A {
	public void foo() {}
}

public class C extends B {

}

2) Select C in the Packages view

3) Select C in the Outline View and choose 'Override methods...'

4) The superclass A doesn't even appear on the list. I should be able to 
select foo() in either A or B and get the same result.
A flat list with all the methods from all base classes would avoid this problem.

Here is another scenario in favor of a flat list, i.e., show all methods from 
all inherited classes. I wanted to override getTitle in my ViewPart. I didn't 
know where the method is declared, so I had to hunt up the hierarchy starting 
at ViewPart to find the method in WorkbenchPart.

The grouping by classes is good when you know where the method is declared 
(hence we should not do the additional filtering)

The flat list is good when you know you want to override a method but you do 
not know where the method is defined.

For 2.0 we should change the filtering behaviour and time permitting we should 
also offer a flat method list.
the advantage of filtering duplicate is to make the tree smaller and more 
usable.

A flat list might help finding a specific method but it will contain lots of 
unitresting methods (e.g. from Object) and -my opinion- will be more confusing 
than now.

I suggest to leave the dialog as is.

*** This bug has been marked as a duplicate of 8383 ***
the flat list suggested by erich is implemented in 20020521
the flat list suggested by erich is implemented in 20020521
