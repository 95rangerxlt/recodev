Build Identifier: 3.5.1

If I select a string that is the value for an annotation, "Extract constant..." is available on the Refactor menu, but not on the Shift-Alt-T quick menu.

This is inconsistent, as it is on that menu for string constants outside of annotations.

Reproducible: Always

Steps to Reproduce:
1. Select a string constant within  @Annotation("string constant")
2. Press Shift-Alt-T
3. Menu item is not available

Build Identifier: 3.5.1

If I select a string that is the value for an annotation, "Extract constant..." is available on the Refactor menu, but not on the Shift-Alt-T quick menu.

This is inconsistent, as it is on that menu for string constants outside of annotations.

Reproducible: Always

Steps to Reproduce:
1. Select a string constant within  @Annotation("string constant")
2. Press Shift-Alt-T
3. Menu item is not available
Created attachment 172111
Patch

Added another case for Annotation declarations in RefactoringAvailabilityTester.isExtractConstantAvailable(final JavaTextSelection selection) which checks for SingleMemberAnnotations. Markus, could you pls check if the fix is Ok?
You're on the right track, but you also need to allow NormalAnnotations, e.g. for this:

import java.util.ArrayList;
//@SuppressWarnings("all")
//@SuppressWarnings({"all", "rawtypes"})
//@SuppressWarnings(value= "all")
@SuppressWarnings(value= {"all", "rawtypes"})
public class Try extends ArrayList {
}

More changes:
- resolveInAnnotationDeclaration() should be called resolveInAnnotation(). We don't use the term "annotation declaration". Either it's an annotation, or it's an annotation type (the latter can also be called a. t. declaration).
- fInAnnotationsRequested and fInAnnotations should be singular
- Javadoc that talks about "matches the type" should be "is of type", or simply "is an annotation type".
- "if if" => "if"
- "any node in its hierarchy" is ambiguous (type hierarchy or containment hierarchy?, are children also part of the hierarchy?). Use "any of its ancestors".
- since this is a general utility method that can also be used in other situations (e.g. bug 317224), you should allow all 3 kinds of Annotation nodes.
Created attachment 172190
Patch_v2

Added the other 2 annotation types as well and made the other suggested changes. Markus, could you pls check?
(In reply to comment #3)
Looks good, but I would replace the check in resolveInAnnotation with "node instanceof Annotation". That's currently equivalent to testing for all 3 kinds, but it's shorter and it continues to work when another subtype of Annotation is added in the future.
(In reply to comment #4)
> (In reply to comment #3)
> Looks good, but I would replace the check in resolveInAnnotation with "node
> instanceof Annotation". That's currently equivalent to testing for all 3 kinds,
> but it's shorter and it continues to work when another subtype of Annotation is
> added in the future.

Done. Released the patch with the above change.
