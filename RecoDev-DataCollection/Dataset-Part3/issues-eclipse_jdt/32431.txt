Currently, the default protection level of an extracted method is 'public'.  
This is a 'worst practice' of object-oriented programming, since it would 
violate encapsulation by introducing a method into the class' public API.

The default selection should be 'private'.  Or at least be settable.

Currently, the default protection level of an extracted method is 'public'.  
This is a 'worst practice' of object-oriented programming, since it would 
violate encapsulation by introducing a method into the class' public API.

The default selection should be 'private'.  Or at least be settable.
Selectable would be the best IMO (not as a preference, but on a per usage 
basis).
The visibility of the method is derived from the visibility of the method you 
are extracting from. The visibility is selectable in the dialog.
It already is selectable on a per-usage basis.  But the default selected radio button is "public" not "private".  It should be "private".


Yes, and I am suggesting that even when extracting a method from a public method , the extracted method should be private.



Think about it: if I have a method

public Foo loadFoo() {

  File secretFile = new File("secret/location/of/foo.txt");

  return new Foo(secretFile);

}



and I extract the first line, as

public File getSecretFile() { ... }



then it violates encapsulation!  I don't want to pollute my API with references to secret methods.   The default should be private, always, with an explicit  step needed to expand the protection level.



(Or to put it another way, the current function is being too clever.)




Fixed for RC2.
