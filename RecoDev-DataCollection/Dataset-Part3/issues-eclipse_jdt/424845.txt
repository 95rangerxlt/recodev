When using Java 8 compliance settings, the following code results in the compiler error "The method sort(List<T>, Comparator<? super T>) in the type Collections is not applicable for the arguments (List<Object>, Ordering<Object>)". Java 7 compliance settings work (Ordering and Function classes are from Google Guava):

List<Object> list = new ArrayList<>();
Function<Object, String> function = new Function<Object, String>() {
  public String apply(Object arg0) {
  return arg0.toString();
  }
};
Ordering<Comparable> natural = Ordering.natural();
Collections.sort(list, natural.onResultOf(function));

As a Workaround, extract the expression "natural.onResultOf(function)" to a variable:

Ordering<Object> onResultOf = natural.onResultOf(function);
Collections.sort(list, onResultOf);

Version of used JDT patches:
1.0.0.v20140103-0106_BETA_JAVA8

When using Java 8 compliance settings, the following code results in the compiler error "The method sort(List<T>, Comparator<? super T>) in the type Collections is not applicable for the arguments (List<Object>, Ordering<Object>)". Java 7 compliance settings work (Ordering and Function classes are from Google Guava):

List<Object> list = new ArrayList<>();
Function<Object, String> function = new Function<Object, String>() {
  public String apply(Object arg0) {
  return arg0.toString();
  }
};
Ordering<Comparable> natural = Ordering.natural();
Collections.sort(list, natural.onResultOf(function));

As a Workaround, extract the expression "natural.onResultOf(function)" to a variable:

Ordering<Object> onResultOf = natural.onResultOf(function);
Collections.sort(list, onResultOf);

Version of used JDT patches:
1.0.0.v20140103-0106_BETA_JAVA8
Created attachment 238763
Sample without need for Guava

I stripped out guava and copied the needed declarations. The code is pretty useless now, but compiles fine with 1.7 settings.
Thanks for the test.

Fix has been released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=57e4d4c87d35c6ae3978a396ec1884b0ad8efb22
