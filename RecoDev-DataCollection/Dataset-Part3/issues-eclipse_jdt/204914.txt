similar to bug 85382

similar to bug 85382
How do you suggest to retrieve the value when the selection source is not the current editor (e.g., the Package Explorer)? Using the SharedASTProvider with NO_WAIT will not be sufficient here.
Right, you need to wait for the AST (WAIT_YES) but make sure it is
1. done inside the background thread that currently computes the input
2. AST creatin gets cancelled when a new selection drives a new input computation
(In reply to comment #2)
> 2. AST creatin gets cancelled when a new selection drives a new input
> computation
Using a progress monitor?
yep.

To summarize what I found so far, there are two scenarios:
1. There is a Java editor open, and its selection change has triggered the JavadocView update. We can use the text selection just like in the JavaHover case.
2. The selection source is not a Java editor. In such case the Java element is retrieved from a structured selection, possibly through an adaptor. In this case, do you mean parsing the field parent's source? (what if it doesn't have source or it doesn't match?)

I found another method to find the value in such case:

ASTParser p = ASTParser.newParser(AST.JLS3);
p.setProject(field.getJavaProject());
IBinding[] createBindings= p.createBindings(new IJavaElement[]{field}, monitor);
IVariableBinding bd= (IVariableBinding)createBindings[0];
Object o = bd.getConstantValue();

It seems to work, what do you think?

To correct, scenario 1: I'll need to "extend" the selection to match the whole identifier.
Yes, there are two different cases:
1) if selection is a text selection from a JavaEditor then get the AST of its
   input Java element from the shared ast provider with WAIT_YES.
2) otherwise get the AST of the field's type root (IField.getTypeRoot()) via 
   shared ast provider with WAIT_YES.
   I have no clue why you would need an adapter here. This element is currently
   already computed.

The drawback of you second method is that for the common case where the user selects something in a view that is already shown in the editor you'll compute the AST even though it's already present in the shared AST provider.

NOTE: this has to be performed in the background and hence you will need to
1. set the description without the value
2. compute the new label
3. update the description

Ok, then for the second case I will first check the shared AST with WAIT_NO (will be good for the selection that comes from outline view).

For the second case, I really see no need to create the full AST. The createBindings() method is really fast (for a field in java.lang.Double it took only few milliseconds compared to almost a second of creating the full AST).

This way I can proabably avoid the "late" update of the description with the constant value.
That sounds good.
Created attachment 79984
Patch #1

A "proof-of-concept" implementation.

The code reuses the methods of JavadocHover. They should probably move to some shared class, right?

JavaWordFinder.findWord is used to find the whole word for the AST lookup. Is it consistent with the method used to resolve the field in the first place?

I also opened bug 205860 as possible blocker.
- don't mix Javadoc hover and view for now (copy the code and flag it as such).
- word finder: you don't need that as the AST node finder also finds the node
  if the offset is inside. Just pass in the text selection range
- don't hard code the compact assignement: use the formatter prefs as done in
  the Javadoc hover

Created attachment 80300
Patch #2

Patch #2. 
(I had to modify the code that I copied from JavadocHover).
Please copy the methods as is, e.g. formatWithHexValue has Javadoc but when you copy it you remove parts of it. This makes it easier later to detect the copied code.

The existing formatting has to be respected e.g. no brackets if there's just one statement.

I get several compile warnings regarding Javadoc with your patch, e.g. in getConstantValueFromActiveEditor.

Also, we should only display the constant value in the Javadoc view. In the Declaration view it looks redundant and would introduce inconsistency with the Source hover. Do this by adding the abstract method computeDescription(...). This also makes the doSetInput(...) method nicer and more reusable as it will take the input and the description. For the Declaration view the computed description will be: JavaElementLabels.getElementLabel(inputElement, flags).
(In reply to comment #13)
> Please copy the methods as is, e.g. formatWithHexValue has Javadoc but when you
> copy it you remove parts of it. This makes it easier later to detect the copied
> code.

I need to modify the methods from the JavadocHover class (e.g., they only work with text selection source). How do you suggest I should approach it?

> The existing formatting has to be respected e.g. no brackets if there's just
> one statement.
> I get several compile warnings regarding Javadoc with your patch, e.g. in
> getConstantValueFromActiveEditor.

ok

> Also, we should only display the constant value in the Javadoc view. In the
> Declaration view it looks redundant and would introduce inconsistency with the
> Source hover. Do this by adding the abstract method computeDescription(...).
> This also makes the doSetInput(...) method nicer and more reusable as it will
> take the input and the description. For the Declaration view the computed
> description will be: JavaElementLabels.getElementLabel(inputElement, flags).

ok
>I need to modify the methods from the JavadocHover class (e.g., they only work
>with text selection source). How do you suggest I should approach it?
That's OK but don't go and delete the Javadoc - adjust it to your changes if it no longer applies.
Do you still plan to provide a final patch?
(In reply to comment #16)
> Do you still plan to provide a final patch?

yes, will complete and submit it asap. (I had few intense work weeks...)
what's the deadline for inclusion in m4?

(In reply to comment #13)
> The existing formatting has to be respected e.g. no brackets if there's just
> one statement.

I had the impression that the standard is to use braces. See diff of JavadocHover  1.42 and 1.43 and then 1.43 and 1.44

>what's the deadline for inclusion in m4?
Friday Dec. 7 but I'll be away starting Dec. 5, so it would be good to have it either this week or next Tuesday. If I get it later I cannot promise that it will make it into M4.

>I had the impression that the standard is to use braces.
It depends who writes the code ;-) We did not want to force developers into one or the other standard but I prefer no superfluous braces. But that's really a minor issue.
Created attachment 84258
Patch 3

Moved most of the new code to the JavadocView class and added the 
computeDescription() method. I left the original implementation in the AbstractInfoView class (it's shared between the javadoc and the source view).
(PS1 The tooltip is still computed in the doSetInput() method)
(PS2 I'm not very happy with the computeDescription() method receiving that much (4) parameters, but I didn't have a better idea)

I documented all the methods I copied from the JavadocHover class and the changes I made to them.

The patch is for build I20071120-1300
Genady, thanks for the patch. I've committed it to HEAD with some little modifications:
- removed unnecessary local copy of the progress monitor
- added cancelation of the progress monitor on dispose()
- externalized the hex string. Marking this as non-nls was not OK, as
  this needs to be externalized
- moved the "copy" comments inside Javadoc using XXX tag
- added your credentials to the header
- added missing @since tags

(In reply to comment #20)
> Genady, thanks for the patch. I've committed it to HEAD with some little
> modifications:
> - removed unnecessary local copy of the progress monitor
> - added cancelation of the progress monitor on dispose()
> - externalized the hex string. Marking this as non-nls was not OK, as
>   this needs to be externalized
> - moved the "copy" comments inside Javadoc using XXX tag
> - added your credentials to the header
> - added missing @since tags

Thanks for the final touch!

I think it's good to copy the progress monitor, because it is possible that before the "info computer" thread starts running, *its* progress monitor will be replaced with a new progress monitor (a user selecting a new field very quickly). In such situation the "obsolete" thread can miss the fact that its progress monitor was cancelled and use the progress monitor of the new operation. Probably no harm will be caused because of the final change counter check, but probably few cpu cycles can be saved.
Makes sense. I'll change that.
Looking forward to your next patch ;-)
