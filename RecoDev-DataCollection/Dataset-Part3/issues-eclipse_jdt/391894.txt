BETA_JAVA8:

    ArrayCreation node needs to be modified so it can capture the
annotations.

BETA_JAVA8:

    ArrayCreation node needs to be modified so it can capture the
annotations.
Looks like the DimensionType we came up with for bug 391890 may not cover ArrayCreation entirely.

Currently, ArrayCreation has a list property (DIMENSIONS_PROPERTY) which is of type Expression. My initial idea was to introduce a AST8-only property, let's say ANNOTATABLE_DIMENSIONS_PROPERTY, which will be of type DimensionType. But that would mean DimensionType has to include an Expression, but only when it appears as part of an ArrayCreation. But I am not sure if this is a great idea, because just looking at the DimensionType won't tell us whether an expression is supported or not, unless we add another flag for that purpose.

Srikanth/Markus, what do you think?
On a closer look, we may not need a Dimension Info to capture the annotations or the extra dimensions at all. Looks like this detail is already captured in ArrayCreation#arrayType. The arrayType being annotatable already, we can simply populate the ArrayType#annotations and let the ArrayCreation#dimensions to store the dimension expression.

I will do bit more testing to confirm this working and post a patch soon.
Created attachment 226464
Proposed fix with test

This also means that DimensionInfo need not capture the expression.

Srikanth, if you are fine with this patch, I will also post a patch for removing expression field from DimensionInfo's Javadoc.
I was afraid that using the annotations of the ArrayType would violate the guarantees given in ASTParser#setKind(int):

 * Source ranges nest properly: the source range for a child is always
 * within the source range of its parent, and the source ranges of sibling
 * nodes never overlap.

However, this is already violated by the current AST for ArrayCreation nodes with non-empty dimensions, since an ArrayType node includes the "[]" and the dimension expression. That makes the ArrayCreation's children overlap.
BTW: The grammar in the Javadoc of ArrayType conceals the dimension expression.

The AST for the expression "new @AnnS String @Ann1 [1] @Ann2 [2]" will be:
ArrayCreation:              ------------------------------------
  type: ArrayType:              --------------------------------
    componentType: ArrayType:   ----------------------
      componentType: SimpleType:------------
      annotations:                           -----
    annotations:                                       -----
  dimensions: NumberLiteral                         -         -

=> The addition of annotations doesn't make the overlap worse, so I think we can just live on with this problem. However, the order of the properties of ArrayType should correspond to the source order (annotations *after* componentType).

Since the other applications of DimensionInfo don't need an expression, DimensionInfo#expression can be removed.

In hindsight, the name DimensionInfo looks a bit weird. Can we rename this to ExtraDimension? And the 3 new getExtraDimensionInfos() methods from bug 391895 should be called extraDimensionInfos(), since this is a live list.

We still need the ExtraDimension node type, since e.g. SingleVariableDeclaration#extraDimensions() must be a List<? extends ASTNode> (can't be a List<Annotation[]>).
(In reply to comment #3)
> Created attachment 226464 [details]
> Proposed fix with test
> 
> This also means that DimensionInfo need not capture the expression.
> 
> Srikanth, if you are fine with this patch, I will also post a patch for
> removing expression field from DimensionInfo's Javadoc.

Patch looks good. Please proceed and remove expression field from DimensionInfo,
suitably renamed as suggested by Markus below.

This requires careful adjustment of Javadoc in many places, the last round
from DimensionType to DimensionInfo left many javadoc references in a bad
state.
(In reply to comment #5)
> (In reply to comment #3)
> > Created attachment 226464 [details]
> > Proposed fix with test
> > 
> > This also means that DimensionInfo need not capture the expression.
> > 
> > Srikanth, if you are fine with this patch, I will also post a patch for
> > removing expression field from DimensionInfo's Javadoc.
> 
> Patch looks good. 

Jay, please add a test for array creation with initializers also. These
go through a different code path in the compiler and is worth testing
separately.
(In reply to comment #5)
> Patch looks good. Please proceed and remove expression field from
> DimensionInfo,
> suitably renamed as suggested by Markus below.

Removed expression via a separate commit as mentioned in bug 391895, comment #33.
Will post a new patch for array creation with additional tests.
Created attachment 226488
With new tests

While going through the fix, I was wondering if we should anticipate and handle the cases where we would have incorrect size of elements in the annotations array in the following methods:

org.eclipse.jdt.core.dom.ASTConverter.annotateType(Type, Annotation[][])

I can't construct a case where this happens, though. Srikanth, what's your take?
(In reply to comment #8)
> Created attachment 226488 [details]
> With new tests
> 
> While going through the fix, I was wondering if we should anticipate and
> handle the cases where we would have incorrect size of elements in the
> annotations array in the following methods:
> 
> org.eclipse.jdt.core.dom.ASTConverter.annotateType(Type, Annotation[][])
> 
> I can't construct a case where this happens, though. Srikanth, what's your
> take?

This can't happen unless there is a bug in the compiler. So I won't worry
about it at this point.
Srikanth, I wasn't sure if your go ahead was only for removing expression from ExtraDimension or for this patch as well. Please mark the review flag if you are fine with the patch added in comment #8.
(1) I think this code in ASTConverter:

		if (expression.annotationsOnDimensions != null && this.ast.apiLevel >= AST.JLS8) {
			annotateType(arrayType, expression.annotationsOnDimensions);
		}

will short circuit the setting of ASTMalformed flag in JLS4- with type
annotations on array creation nodes ? 

(2) We could add a test that runs in JLS4 mode with annotations on
array creation and verify that malformed is set.

(3) The tests seem to check for source range alone. We should add
a test that verifies that on each dimesion the annotations are as
expected.

Please make these changes and release. Thanks.
(In reply to comment #11)
> Please make these changes and release. Thanks.

Released with the changes via commit:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=245ac5a64fa1b2c3e6c4d54ba7019a89566be0e5
