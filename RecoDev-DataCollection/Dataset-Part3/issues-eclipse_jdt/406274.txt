Consider the below interface
package p1;

public interface I1 {	
	 default int defaultMethod(){
		 return 10;
	 }	
}

Invoke 'Refactor-> Extract Interface...' on I1. Select #defaultMethod to be part of the new interface. Click 'OK' button. In the newly created interface the method is created as abstract and in the original interface the method is removed. So basically the method implementation is lost after refactoring.

Consider the below interface
package p1;

public interface I1 {	
	 default int defaultMethod(){
		 return 10;
	 }	
}

Invoke 'Refactor-> Extract Interface...' on I1. Select #defaultMethod to be part of the new interface. Click 'OK' button. In the newly created interface the method is created as abstract and in the original interface the method is removed. So basically the method implementation is lost after refactoring.
In the current implementation of 'Extract Interface', the criteria for a method to be extract-able is:
case IJavaElement.METHOD:
     return JdtFlags.isPublic(member) && !JdtFlags.isStatic(member) && !((IMethod) member).isConstructor();

Can we allow default methods be part of extract-able interface methods?

While checking the current implementation, I came across this method JdtFlags#isAbstract(member). I passed a static method and it returned 'true'. Looked in to this method, if the member is a method and if the declaring type is an interface then it says the method is abstract. This is wrong with Java8. I did not find an existing bug in 1.8 which is taking care of it. If not, then shall i update that method  as part of this bug fix?
> Can we allow default methods be part of extract-able interface methods?

Yes.

> JdtFlags#isAbstract(member). I passed a static method and it returned 'true'.

Yes, that needs to be fixed. Make sure that the fix is also correct if the member has source level < 1.8. Remember that it needs to work for source methods (where IMethod#getFlags() only returns explicit flags) and for binary methods (where it returns implicit flags as well).

Please make a pass over all methods in JdtFlags and adjust them for JSR 308. This can be done as part of this bug. Then open a new bug to check all references to the methods you changed (maybe some other clients need adjustments now).
Created attachment 232526
Patch with testcases.

With this patch, 'Extract Interface' refactoring allows to extract default methods also from interfaces. The default method body is preserved in the extracted interface. If 'Extract Interface' is invoked from a class, then the method will be extracted as abstract just as it was earlier.

Added few testcases for the above scenario.

Since I did not use JDTFlags for this patch, the updated JDTFlags will be uploaded as a separate patch.

@Noopur can you take a look at the patch?
I overlooked one condition:
public interface I {
	public static final int count = 10;
	public default void defaultMethod() {		
		System.out.println(count);			
	}
}
When 'Extract Interface' is invoked on 'I' and if user selects only the default method, then after refactoring we end up with compiler error as the field 'count ' is not accessible. Should this field be made part of the newly extracted interface during refactoring to avoid compiler error?
Since it is bad to leave user with a compiler error after refactoring, i suggest we should take care of including the field also during refactoring.
 
Even worse case:
public interface I1 {
	public static final int count = 10;
}
public interface I2 extends I1 {
	public default void defaultMethod() {		
		System.out.println(count);			
	}
}
Created attachment 233884
Proposed patch+testcases after updating JDTFlags

(In reply to comment #2)
> > JdtFlags#isAbstract(member). I passed a static method and it returned 'true'.
> 
> Yes, that needs to be fixed. Make sure that the fix is also correct if the
> member has source level < 1.8. Remember that it needs to work for source
> methods (where IMethod#getFlags() only returns explicit flags) and for
> binary methods (where it returns implicit flags as well).
> 
> Please make a pass over all methods in JdtFlags and adjust them for JSR 308.
> This can be done as part of this bug. Then open a new bug to check all
> references to the methods you changed (maybe some other clients need
> adjustments now).
As mentioned in the above comment JDTFlags is modified. Added two new methods to identify whether a method is default. Attaching the testcases.
Markus, kindly review the patch for the changes in JDTFlags.
Noopur, can you please review comment 5?
(In reply to comment #4)
> I overlooked one condition:
> public interface I {
> 	public static final int count = 10;
> 	public default void defaultMethod() {		
> 		System.out.println(count);			
> 	}
> }
> When 'Extract Interface' is invoked on 'I' and if user selects only the
> default method, then after refactoring we end up with compiler error as the
> field 'count ' is not accessible. Should this field be made part of the
> newly extracted interface during refactoring to avoid compiler error?
> Since it is bad to leave user with a compiler error after refactoring, i
> suggest we should take care of including the field also during refactoring.
>  
> Even worse case:
> public interface I1 {
> 	public static final int count = 10;
> }
> public interface I2 extends I1 {
> 	public default void defaultMethod() {		
> 		System.out.println(count);			
> 	}
> }

Had a discussion with Markus regarding the above point. It is decided that Extract Interface should create an abstract method in the interface and leave the default method in the selected interface. In a later version, we can then add a UI that looks similar to Pull Up, where the user can select which implementations to move and which methods to declare abstract in the interface.
Created attachment 233968
Patch with testcases for Extract Interface involving default methods

As discussed, here is the patch for the Extract Interface when default methods are involved. As per this patch, the default implementation remain in the current interface and the method is marked as abstract in the new interface. Thus the actual implementation is not lost.

Markus, please review.
Created attachment 233977
Test data for the JDTFlags tests

Attaching the test data zip for the patch in comment 5.
(In reply to comment #6)
> Noopur, can you please review comment 5?

- The condition added for 1.8 in JdtFlags#isStatic(IMember member) will cause the method to return 'false' in >= 1.8 for an enum nested in an interface.
interface I {
	enum E {}
}

- For the case where an enum is nested in a class, the existing impl returns false, which is a bug. We should handle it here.
class C {
	enum E {}
}

- Tests can be added for the cases of 'enum constants', 'nested enum in an interface' and 'nested enum in a class' for #isStatic(..).

- Tests can be added for methods taking IMethodBinding as parameter i.e. isDefaultMethod(IMethodBinding), isAbstract(IMethodBinding), isStatic(IMethodBinding).

- The existing impl of JdtFlags#isAbstract(IMethodBinding member) has unnecessary check for 'isInterfaceOrAnnotationMember(member)' which can be removed.
Thanks Noopur! Incorporated all your review comments.
Removed #isStrictfp() as the method was not correctly implemented and also it is not used anywhere.
Modified #isFinal() to include the condition stated in JLS 7: "An enum type is implicitly final unless it contains at least one enum constant that has a class body."
Released the fix as: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?h=BETA_JAVA8&id=9b6dd388609e3db2651daf863440f6280055d31c
Added isStatic(BodyDeclaration) in JdtFlags.java and updated the test cases accordingly:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?h=BETA_JAVA8&id=9f7bf1712cbc2d04a595b924f1ddb319a292361b
(In reply to comment #12)

#isDefaultMethod(IMethodBinding):
- parameter name should be 'method'
- member.getModifiers() should be extracted into a local variable
- should return false for foo() in "class C { void foo(){} }"

#isDefaultMethod(IMember):
- why it the parameter not IMethod?

#isEnumTypeFinal(IMember):
- shouldn't the "&&" in the first condition be an "||"? Easier to understand after applying quick fixes to switch the infix around and pull the negation up:

    if (!(member.getElementType() == IJavaElement.TYPE && isEnum(member)))
        return false;
Comment 13 was for comment 11. This is for comment 12:

#isStatic(BodyDeclaration):

- if (bodyDeclaration.getNodeType() != ASTNode.METHOD_DECLARATION &&
          isInterfaceOrAnnotationMember(bodyDeclaration))
      return true;

  => Looks wrong: What if bodyDeclaration is an AnnotationTypeMemberDeclaration?

- if (bodyDeclaration instanceof EnumDeclaration ...

  => Looks incomplete: What if parent is an EnumDeclaration? Better use "instanceof AbstractTypeDeclaration" etc.
(In reply to comment #13)
Thanks Markus. Incorporated the review comments. Released the fix as: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?h=BETA_JAVA8&id=8347634ab8f8c99021cfbd82ba6b5b149d7df22b
(In reply to comment #14)
Thanks Markus. Updated JdtFlags#isStatic(BodyDeclaration) and associated methods.
Also, added tests for the same.
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?h=BETA_JAVA8&id=5806dfa2c156de6f156f69d1feb051ca43f3f2e1
(In reply to Manju Mathew from comment #8)
> Created attachment 233968 [details] [diff]
> Patch with testcases for Extract Interface involving default methods
> 
> As discussed, here is the patch for the Extract Interface when default
> methods are involved. As per this patch, the default implementation remain
> in the current interface and the method is marked as abstract in the new
> interface. Thus the actual implementation is not lost.

The fix looks fine. Some comments:
- update copyright year n remove early draft declaration in all files.
- caller of ExtractInterfaceProcessor#removeDefaultMethods already throws JavaModelException, so you don't need to catch it.
- return statement in #removeDefaultMethods can be written as:
return methods.toArray(new IMethod[methods.size()]);
- you can also combine #removeDefaultMethods in #getExtractedMethods with a comment for default methods.
- ExtractInterfaceTests18 can extend ExtractInterfaceTests like other 1.8 refactoring test classes.
- In ExtractInterfaceTests18, test methods can be re-ordered to keep #testExtractInterfaceFromInterface1 and #testExtractInterfaceFromInterface2 one after the other.
- The test resources folder can be renamed as "ExtractInterface18" instead of "Refactoring18" to keep it next to "ExtractInterface" folder.
- Check if tests for testExtractInterfaceFromAbstractClass and testExtractInterfaceFromClass are required as these should already be present in "ExtractInterface" tests. Otherwise, move them to ExtractInterfaceTests  and "ExtractInterface" folder as these are not 1.8 specific.
(In reply to Noopur Gupta from comment #17)

> The fix looks fine. Some comments:
> - Check if tests for testExtractInterfaceFromAbstractClass and
> testExtractInterfaceFromClass are required as these should already be
> present in "ExtractInterface" tests. Otherwise, move them to
> ExtractInterfaceTests  and "ExtractInterface" folder as these are not 1.8
> specific.
Thanks Noopur. Since Java 8 allows static methods in interface testExtractInterfaceFromAbstractClass and testExtractInterfaceFromClass are guard tests to ensure that static methods are not extracted to  interface during Extract Interface refactoring in Java 8.
Updated with review comments and released the fix with: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=42f8ee398a55c72dbc68d19c23a33f4f5b1672d9
.
Question: if a person is extracting an interface from an interface, technically a super interface is being made, right? I would imagine default methods shouldn't be assumed to be wanted in all cases. Wouldn't it make more sense if this was a checkbox option during the refactoring?
(In reply to Paul Benedict from comment #20)
> Question: if a person is extracting an interface from an interface,
> technically a super interface is being made, right?
Right.

> I would imagine default
> methods shouldn't be assumed to be wanted in all cases. Wouldn't it make
> more sense if this was a checkbox option during the refactoring?
When this refactoring is invoked, user is prompted with a dialog where all the abstract and default members are listed, user can choose what needs to be part of the super interface.
