The problem is like this:

let's say first there was an interface to be implemented by clients
 
interface IHasInt {
   int getInt();
}

Later you want the implementors to be able to provide a BigInteger, without breaking old implementors and without the need to implement the old method for new implementors (And the caller wants to be able to distinguish old and new implementations). So you define

interface IHasIntAsBigInteger extends IHasInt {
	default int getInt() {
		return getIntAsBigInteger().intValue();
	}
	
	getIntAsBigInteger();
}

If a class implements IHasIntAsBigInteger and the dev applies "add unimplemented methods". Stubs for both methods are created, which is bad. Propably due to the fact that both methods occur abstract somewhere in the interface hierarchy, not eliminating those with a default occurance.

The problem is like this:

let's say first there was an interface to be implemented by clients
 
interface IHasInt {
   int getInt();
}

Later you want the implementors to be able to provide a BigInteger, without breaking old implementors and without the need to implement the old method for new implementors (And the caller wants to be able to distinguish old and new implementations). So you define

interface IHasIntAsBigInteger extends IHasInt {
	default int getInt() {
		return getIntAsBigInteger().intValue();
	}
	
	getIntAsBigInteger();
}

If a class implements IHasIntAsBigInteger and the dev applies "add unimplemented methods". Stubs for both methods are created, which is bad. Propably due to the fact that both methods occur abstract somewhere in the interface hierarchy, not eliminating those with a default occurance.
Moving to UI for investigation.
Code snippet to reproduce the issue:

import java.math.BigInteger;

interface IHasInt {
	int getInt();
}

interface IHasIntAsBigInteger extends IHasInt {
	default int getInt() {
		return getIntAsBigInteger().intValue();
	}

	BigInteger getIntAsBigInteger();
}

class C implements IHasIntAsBigInteger {
}

"Source > Override/Implement Methods" selects only #getIntAsBigInteger which is correct.
Ok, "Source > Override/Implement Methods" seems to work correct.

But "QuickFix add unimplemented methods" does not. 
Tested with Version: Mars Release (4.5.0) Build id: 20150621-1200
New Gerrit change created: https://git.eclipse.org/r/55202
Gerrit change https://git.eclipse.org/r/55202 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=fc2cd778fa525c5e5c56a38bb1f8161df3eb659e
(In reply to Eclipse Genie from comment #5)
> Gerrit change https://git.eclipse.org/r/55202 was merged to [master].
> Commit:
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=fc2cd778fa525c5e5c56a38bb1f8161df3eb659e
> 

Fixed in master.
Thanks!

In that case it would be really cool to declare the default implementation as final.
(If someone uses the new interface, the default for the old method should not be overridden)

Eclipse says that this is not allowed, but I don't see a technical problem in this. 

Would it be really a problem or is this usage of default methods just not considered?
(In reply to Harald Brunner from comment #7)
> Thanks!
> 
> In that case it would be really cool to declare the default implementation
> as final.
> (If someone uses the new interface, the default for the old method should
> not be overridden)
> 
> Eclipse says that this is not allowed, but I don't see a technical problem
> in this. 
> 
> Would it be really a problem or is this usage of default methods just not
> considered?

"final default" methods are not allowed in Java 8: http://stackoverflow.com/questions/23453287/why-is-final-not-allowed-in-java-8-interface-methods
