I20031216

I was editing StyledText.java (a huge file).
On saving StyledText.java I got the "Spinning Beachball of Death" (a Mac mechanism to show that 
the event loop is blocked). Since I thought of a deadlock I did a full thread dump (see attachement).
It revealed that Eclipse wasn't hung but was processing a big backlog of Occurrences Marker 
threads.
It seems that for large files old Occurrences Marker threads continue to execute even if they are 
made obsolete by newer threads. This will bring Eclipse to a crawl.
A fix would be to make it possible to abort a AST.parseCompilationUnit(...).

I20031216

I was editing StyledText.java (a huge file).
On saving StyledText.java I got the "Spinning Beachball of Death" (a Mac mechanism to show that 
the event loop is blocked). Since I thought of a deadlock I did a full thread dump (see attachement).
It revealed that Eclipse wasn't hung but was processing a big backlog of Occurrences Marker 
threads.
It seems that for large files old Occurrences Marker threads continue to execute even if they are 
made obsolete by newer threads. This will bring Eclipse to a crawl.
A fix would be to make it possible to abort a AST.parseCompilationUnit(...).
Created attachment 7208
full thread dump
We intend to share 1 (read one) ast for several operations. Martin already
started on this one.

Another improvement would be to allow AST construction to be aborted.
*** Bug 48895 has been marked as a duplicate of this bug. ***
What I don't get is - why does just moving the cursor around start the AST 
threads?  The sharing is nice and all, but it seems like the fact that just 
cursor movement and mouse clicks start the threads is a real problem.  The 
thread should only start on conditions where the contents changed.  At least 
for my editing (bug 48895) avoiding AST altogether for simple movement would be 
huge.

Outside of "only change when needed" would be doing a timer-queue-whatever kind 
of approach where another keypress (or, well, another change event) within X 
milliseconds (settable would be nice, maybe a default of 500 ms) would reset 
the timer back to 0 and only when the timer hits X does it start the AST 
action.  This would be another big potential gain, at least from what I can 
tell in my own monitoring of my Progress pane, since I see so many AST's 
created during the typing of a line when I'd rather just have one done when I 
stop typing for a second or two.
Why do you think that threads are only useful when things change? To know if a
which quick fixes are available for example depends on the selection. Also, to
mark occurrences the AST is needed. Of course we could do this in the same
thread but then..... 
You can disable all those features (e.g. mark occurrences and show quick fix
light bulb). If you still see the AST being built after disabling those features
then please file a corresponding bug report.

We now compute a single AST which is reused and converted the implementation to
be job based.
