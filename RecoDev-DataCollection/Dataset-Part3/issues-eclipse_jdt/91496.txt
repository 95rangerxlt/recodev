There does not seem to be a way for plugins to provide custom completions to the 
default Java editor in Eclipse.

This would be very usefull, especially with respect to annotations since the 
value for annotations-attributes would often depend on a non-java core specific 
plugin/feature/framework.

A way for plugins to be able to add their IContentAssistProcessor into the 
JavaSourceViewerConfiguration would be emmensly usefull!

There does not seem to be a way for plugins to provide custom completions to the 
default Java editor in Eclipse.

This would be very usefull, especially with respect to annotations since the 
value for annotations-attributes would often depend on a non-java core specific 
plugin/feature/framework.

A way for plugins to be able to add their IContentAssistProcessor into the 
JavaSourceViewerConfiguration would be emmensly usefull!
Is this something we might see in M7 so we can have plugin supplied extensions 
in 3.1 and not have to wait for 3.2 ?

not for 3.1 - API freeze is long past.
So no one can extend eclipse to provide code completion for annotation 
attributes. Sadly for EJB3/JDK 1.5 users.
On the plan for 3.2.

A prototype has been checked into the "content_assist_participants" branch of
the following plug-ins:

o.e.jdt.ui
o.e.ui.workbench.texteditor
o.e.jface.text

The following features are supported:
- contribution of ICompletionProposalComputers per partition type (e.g. Java,
Javadoc, string literals...) to the Java editor
- conversion of the existing infrastructure to use the extension point:
  - java completion
  - javadoc proposals
  - template proposals
  - spelling correction proposals
- addition of an additional computer for "Hippie style" word completions
- preference page that allows to specify which computers are included in the
standard content assist command
- commands that allow to invoke every computer separately (e.g. only template
proposals)

These are still open issues:
- Ranking of proposals across contribution boundaries (see also bug 106000 for a
discussion of this problem)
- Filtering of redundant proposals
- Whether to make the JavaContentAssistInvocationContext API
Sounds *great*. Any chance we can get a notification here when its in the I/M-
build of 3.2 ?

(In reply to comment #5)
> Sounds *great*. Any chance we can get a notification here when its in the I/M-
> build of 3.2 ?

This bug will be marked as FIXED then...


Released to HEAD > 20050909

Ranking and filtering is still open and subject to change.

Marking as fixed. The interested parties are asked to provide feedback and
discuss the solution in this PR.

Please file bugs as separate PRs.
Just as a heads up to implementors of ICompletionProposalComputer:

In order to fix bug 117493, we added the "getErrorMessage()" API from IContentAssistProcessor back to ICompletionProposalComputer. This change is in > 20051208 and in 3.2 M4.
*** Bug 64431 has been marked as a duplicate of this bug. ***
