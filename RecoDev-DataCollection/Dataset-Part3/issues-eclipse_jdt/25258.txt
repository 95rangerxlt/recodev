I have a case where an abstract class implements an interface using a more 
specific set of exceptions on a method.  When I then try to subclass that 
abstract class, and specify "implement inherited abstract methods", the 
resulting class has compiler errors.  I think this is because this operation 
looks at the signature of the interface instead of that of the abstract class.

1. Import the attached source files
2. Select the class named Registry
3. Select New->Class from the context menu
4. In the dialog, select "Inherited abstract methods" and "copy constructors".
5. Type in a new name for the subclass, such as "MyRegistry"
6. Click Finish.

Notice that MyRegistry has compiler errors.  Again, it would probably be best 
if the inherited abstract methods were copied from the superclass and not from 
the interface.

I have a case where an abstract class implements an interface using a more 
specific set of exceptions on a method.  When I then try to subclass that 
abstract class, and specify "implement inherited abstract methods", the 
resulting class has compiler errors.  I think this is because this operation 
looks at the signature of the interface instead of that of the abstract class.

1. Import the attached source files
2. Select the class named Registry
3. Select New->Class from the context menu
4. In the dialog, select "Inherited abstract methods" and "copy constructors".
5. Type in a new name for the subclass, such as "MyRegistry"
6. Click Finish.

Notice that MyRegistry has compiler errors.  Again, it would probably be best 
if the inherited abstract methods were copied from the superclass and not from 
the interface.
Created attachment 2262
Source code for testcase
*** Bug 20760 has been marked as a duplicate of this bug. ***
*** Bug 10430 has been marked as a duplicate of this bug. ***
fixed in 20031209

