From "Grenady" on Eclipse Corner:

package packagea;
public class classa {
	int counter = 3;
	private class korna99 {
		public int getInt2() {
			return ++counter+12;
		}
	}
	public int produceInt() {
		return new korna99().getInt2();
	}
}

package packageb;
import packagea.*;
public class classb {
	public void consumeI2nt(classa obj) {
		System.out.println(obj.produceInt());
	}
}

The bug is that if the name of Korna99 is changed, classb gets compiled, even though it has no reference to that type.

NOTES:

From "Grenady" on Eclipse Corner:

package packagea;
public class classa {
	int counter = 3;
	private class korna99 {
		public int getInt2() {
			return ++counter+12;
		}
	}
	public int produceInt() {
		return new korna99().getInt2();
	}
}

package packageb;
import packagea.*;
public class classb {
	public void consumeI2nt(classa obj) {
		System.out.println(obj.produceInt());
	}
}

The bug is that if the name of Korna99 is changed, classb gets compiled, even though it has no reference to that type.

NOTES:
classb is dependent on the structure of classa which has changed because its 
member class was renamed.

The new builder does not remember fine grain dependencies to reduce the memory 
footprint
