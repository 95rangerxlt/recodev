void f1(){
	String j= /*[*/"text"/*]*/;
}

it creates:

void f1(){
	String j= ss();
}
private void ss() {
	"text";
}

which does not compile

void f1(){
	String j= /*[*/"text"/*]*/;
}

it creates:

void f1(){
	String j= ss();
}
private void ss() {
	"text";
}

which does not compile
I disagree that the severity is major. this isn't a common scenario to run into.
I think he has overcomplicated it.  In the simple form, it may be more common. 
I ran into it today.  And I think any refactoring that generates code that
doesn't compile is a bad thing. Build: 20020214

void f1(){
	String j= "text";
}

it creates:

void f1(){
	String j= ss();
}
private void ss() {
	"text";
}
the /*[*/ /*]*/
braces were used only to show the selection
:)
so it's exactly the same test case
May be some clarification for /*[*/.../*]*/. We use this syntax in our test 
cases to denote the selection in a position independent way. That is the reason 
why we use it in PRs too.
Fixed in build > 20020307.
