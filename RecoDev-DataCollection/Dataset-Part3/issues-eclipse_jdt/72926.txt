This method logWarning in the class A in package P1 is to be in-lined:

public class A {

    public static Logger LOG = Logger.getLogger(AppInterfaceServer.class,
            ServerSettingsConstants.DefaultServerMessagesFileName);

    public void logWarning(String msg) {
        LOG.warn(msg);
    }
}

There in one call site in class B in package P2 which is:

    public void abort(String toReturn) {
        // TODO: Someday figure out how to abort a request done via RMI.
        AppInterfaceServer.getCurrent().logWarning("AbortRequest not supported
with RMI");
        return;
    }

After the refactoring it is:

    public void abort(String toReturn) {
        AppInterfaceServer r = AppInterfaceServer.getCurrent();
        LOG.warn("AbortRequest not supported with RMI");
        return;
    }

The comment is GONE and the method does not compile since LOG is not defined in B.

So it looks like in-lining is quite literal. Either inlining should force a
preview and give a warning or it should be smarter and create:

    public void abort(String toReturn) {
        AppInterfaceServer.getCurrent().LOG.warn("AbortRequest not supported
with RMI");
    }

Or better yet:

    public void abort(String toReturn) {
        AppInterfaceServer.LOG.warn("AbortRequest not supported with RMI");
    }

Version 3.1.M1. Thanks.

This method logWarning in the class A in package P1 is to be in-lined:

public class A {

    public static Logger LOG = Logger.getLogger(AppInterfaceServer.class,
            ServerSettingsConstants.DefaultServerMessagesFileName);

    public void logWarning(String msg) {
        LOG.warn(msg);
    }
}

There in one call site in class B in package P2 which is:

    public void abort(String toReturn) {
        // TODO: Someday figure out how to abort a request done via RMI.
        AppInterfaceServer.getCurrent().logWarning("AbortRequest not supported
with RMI");
        return;
    }

After the refactoring it is:

    public void abort(String toReturn) {
        AppInterfaceServer r = AppInterfaceServer.getCurrent();
        LOG.warn("AbortRequest not supported with RMI");
        return;
    }

The comment is GONE and the method does not compile since LOG is not defined in B.

So it looks like in-lining is quite literal. Either inlining should force a
preview and give a warning or it should be smarter and create:

    public void abort(String toReturn) {
        AppInterfaceServer.getCurrent().LOG.warn("AbortRequest not supported
with RMI");
    }

Or better yet:

    public void abort(String toReturn) {
        AppInterfaceServer.LOG.warn("AbortRequest not supported with RMI");
    }

Version 3.1.M1. Thanks.
Moving to JDT UI for comments.
The comment problem is already covered by bug 40243.

The rest is cleary a bug and has to be investigated.
Here is a smaller example. Inlining foo produces field.bar() instead of 
a.field.bar(). The problem is that field isn't recognized as a implicit 
references inside the type.

public class A {
	A field;
	void foo() {
		field.bar();
	}
	
	void bar() {
	}
	
	void ref(A a) {
		a.foo();
	}
}

This got addressed in the 3.1 cycle. Inlining log in the example below

public class A {
	static A Logger;
	void log() {
		Logger.bar();
	}
	void bar() {
	}
	void ref(A a) {
		// TODO: Someday figure out how to abort a request done via RMI.		
		a.log();
	}
}

correctly produces:

public class A {
	static A Logger;
	void bar() {
	}
	void ref(A a) {
		// TODO: Someday figure out how to abort a request done via RMI.		
		A.Logger.bar();
	}
}



