Build ID: M20071023-1652

Steps To Reproduce:
1. define volatile private field
2. do not write any code that sets the field
3. use clean-up with "Add final modifier to private fields" option
4. volatile keyword is now replaced with final keyword


More information:
Volatile field may be modified by JNI code, thus I think it's not correct to apply the clean up rule in this case.

Build ID: M20071023-1652

Steps To Reproduce:
1. define volatile private field
2. do not write any code that sets the field
3. use clean-up with "Add final modifier to private fields" option
4. volatile keyword is now replaced with final keyword


More information:
Volatile field may be modified by JNI code, thus I think it's not correct to apply the clean up rule in this case.
Move to JDT/UI
This works as designed, see bug 145028

Can you explain the thing you said about the JNI code? Isn't it, theoretically, possible that any field is set through reflection? We should therefore never make a field final.
(In reply to comment #2)
In my case, I need a variable that is changed only by native code (pointer to C structure, obtained from server), and it doesn't make sense to set it from Java code.

I agree that Eclipse can never be sure if the field is updated or not, but IMHO,  marking the field as "volatile" pretty much indicates that I know how I will use that field. Thus, I think that removing the "volatile" keyword is quite intrusive behavior.
(In reply to comment #3)
> I agree that Eclipse can never be sure if the field is updated or not, but
> IMHO,  marking the field as "volatile" pretty much indicates that I know how I
> will use that field. Thus, I think that removing the "volatile" keyword is
> quite intrusive behavior.

Agreed.


fixed > I20080222-1622
