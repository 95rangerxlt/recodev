Consider these Off/On tags in use:

Case 1, off/on tags, a test case and a description of the problem:
/*Q*
/*E*

package a; 
public class Bug { 
int a      =  -     1  +    42; 
 
/*Q*/ 
int b      =  -     1  +    42; 
/*E*/ 
 
char                       x; 
 
//*Q*/ 
int c      =  -     1  +    42; 
//*E*/ 
 
char                       y; 
///*Q*/ 
int d      =  -     1  +    42; 
///*E*/ 
 
char                       y2; 
}

The lines with int b and int d lines are correct and not formatted, but line with int c is formatted and not correct.

Case 2, off/on tags, a test case and a description of the problem:
/*Q*/
//e//

package a; 
public class Bug { 
int a      =  -     1  +    42; 
 
/*Q*/ 
int b      =  -     1  +    42; 
//e// 
 
char                       x; 
 
//*Q*/ 
int c      =  -     1  +    42; 
///e// 
 
char                       y; 
///*Q*/ 
int d      =  -     1  +    42; 
////e// 
 
char                       y2; 
}

The lines with int a and char y2 are correctly formatted. The lines with int b, int c, int d are correct and not formatted. The lines with char x and char y are not formatted and not correct.

Tested with Eclipse SDK Version: Luna (4.4) Build id: I20140325-0830

Consider these Off/On tags in use:

Case 1, off/on tags, a test case and a description of the problem:
/*Q*
/*E*

package a; 
public class Bug { 
int a      =  -     1  +    42; 
 
/*Q*/ 
int b      =  -     1  +    42; 
/*E*/ 
 
char                       x; 
 
//*Q*/ 
int c      =  -     1  +    42; 
//*E*/ 
 
char                       y; 
///*Q*/ 
int d      =  -     1  +    42; 
///*E*/ 
 
char                       y2; 
}

The lines with int b and int d lines are correct and not formatted, but line with int c is formatted and not correct.

Case 2, off/on tags, a test case and a description of the problem:
/*Q*/
//e//

package a; 
public class Bug { 
int a      =  -     1  +    42; 
 
/*Q*/ 
int b      =  -     1  +    42; 
//e// 
 
char                       x; 
 
//*Q*/ 
int c      =  -     1  +    42; 
///e// 
 
char                       y; 
///*Q*/ 
int d      =  -     1  +    42; 
////e// 
 
char                       y2; 
}

The lines with int a and char y2 are correctly formatted. The lines with int b, int c, int d are correct and not formatted. The lines with char x and char y are not formatted and not correct.

Tested with Eclipse SDK Version: Luna (4.4) Build id: I20140325-0830
The Javadoc for DefaultCodeFormatterConstants.FORMATTER_DISABLING_TAG  says that "8. The tag can include line or block comments start/end tokens." In the first example given below the user has used part of the block comment in the format tag and used it in a block comment. Reassigning to core on the expected behavior in this case.
I was going to see if I could fix this but now I'm not sure I follow. I understand "tag can include line or block comments start/end tokens" to explicitly affirm that a tag can contain any number of any of line comment start tokens, line comment end tokens, block comment start tokens and block comment end tokens. I don't know which part of which case this should make be expected. Please clarify.
To be honest, I don't think the tags proposed in comment 0 are practically relevant use cases. I don't think anybody from the JDT team has free time to spend on this issue, so don't expect guidance from us.
Thank you, your answer has allowed me to progress without further hindrance and I have pushed a patch to Gerrit for review here https://git.eclipse.org/r/24223 which includes the test cases from comment 0 and a few more. There seems to be something wrong with Gerrit as it can't build org.eclipse.jdt.annotation but the tests were green when I ran them locally and the formatter works correctly in my installation.
Tests are now green in Gerrit too.
With the new formatter in use in Mars these test cases are now formatted correctly. Thanks Mateusz Matela!
