The closing bracket hover after an "else if" should include all preceding ifs.

Example:

		if (i == 1) {
			int i1;
			int i2;
			int i3;
			int i4;
		} else if (i == 2) {
			new I1();
			new I2();
			new I3();
			new I4();
		} else {         // hover on "}" only shows one if, not both
			test1();
			test2();
			test3();
			test4();
		}                // hover on "}" shows all ifs  


After bug 377141, the hover on the "}" of an "else" branch now shows all preceding "if" expressions. The same should be implemented for the "}" of an "else if" branch in the same "if" (... "else if")+ (... "else")? structure.

The closing bracket hover after an "else if" should include all preceding ifs.

Example:

		if (i == 1) {
			int i1;
			int i2;
			int i3;
			int i4;
		} else if (i == 2) {
			new I1();
			new I2();
			new I3();
			new I4();
		} else {         // hover on "}" only shows one if, not both
			test1();
			test2();
			test3();
			test4();
		}                // hover on "}" shows all ifs  


After bug 377141, the hover on the "}" of an "else" branch now shows all preceding "if" expressions. The same should be implemented for the "}" of an "else if" branch in the same "if" (... "else if")+ (... "else")? structure.
Created attachment 238578
Patch

Attached a patch for the required behavior.

Replaced :
	while (parent.getParent() instanceof IfStatement) {
		parent= parent.getParent();
	}

with :
while (parent.getLocationInParent() == IfStatement.ELSE_STATEMENT_PROPERTY) {
	parent= parent.getParent();
}

in order to fix the bug where the first 'if' in the structure should be "if (i == 10)" instead of "if (i > 0)" in the following example when we hover over '}' as mentioned in the comments:

public class Snippet {
	private void foo(int i) {
		if (i > 0)
			if (i == 10) {
				System.out.println();

			} else if (i == 20) {

			} else { // hover on '}'

			} // hover on '}'
	}
}

Dani, please review.
Ping!
1. In #getBracketHoverInfo, after <if (parent instanceof IfStatement)> there is an if and else..if, both does the same action sets isElsePart= true. Is it for readability that the conditions are separated? If not the preceding "if (isElsePart) { " would not be needed. i.e. the code would look like:
if ((parentIfStmt.getElseStatement() != null && ASTNodes.getInclusiveEnd(parentIfStmt.getElseStatement()) == offset) // if [else if]* else
						|| (parentIfStmt.getLocationInParent() == IfStatement.ELSE_STATEMENT_PROPERTY && ASTNodes.getInclusiveEnd(parentIfStmt.getThenStatement()) == offset)) { // if [else if]+ else?
					isElsePart= true;
					while (parent.getLocationInParent() == IfStatement.ELSE_STATEMENT_PROPERTY) {
						parent= parent.getParent();
					}
2. In #getBracketHoverInfo, the check for ifNode != null looks unnecessary as currentStatement is derived from ifNode and if "ifNode" is null an NPE would be thrown at LNo:294 itself.
3. In #getBracketHoverInfo, previously there was a check for ifNode.getElseStatement() != null, with this patch the check is removed, would it cause a NPE in LNo: 358
4. In #getBracketHoverInfo, LNo: 302, checks for ifNode.getElseStatement() != null, but inside the if condition ifNode.getThenStatement() is used. Is the check "ifNode.getElseStatement() != null" required?

Otherwise the changes looks fine.
This change is local enough so that we can still put it into M7.
(In reply to Manju Mathew from comment #3)
> 1. In #getBracketHoverInfo, after <if (parent instanceof IfStatement)> there
> is an if and else..if, both does the same action sets isElsePart= true. Is
> it for readability that the conditions are separated? 
The separate conditions were for readability, but I changed the code as suggested by you since even there we can have the comments for understanding the conditions.

> 2. In #getBracketHoverInfo, the check for ifNode != null looks unnecessary
> as currentStatement is derived from ifNode and if "ifNode" is null an NPE
> would be thrown at LNo:294 itself.
The check is in a while loop and we are setting 'ifNode' to null when 'else' is reached in the loop. Hence, the null check is required.

> 3. In #getBracketHoverInfo, previously there was a check for
> ifNode.getElseStatement() != null, with this patch the check is removed,
> would it cause a NPE in LNo: 358
Earlier that check was to see if any statement is left for processing (as mentioned in the javadoc). Now, that check is replaced by "currentStatement != bracketNode" as we need not proceed till the last statement in the 'if' chain, but should continue only until we reach the hovered '}' else / else if node. 
If we have not reached the 'bracketNode', then the else stmt of 'ifNode' will not be null. Can you give an example where it could be null?

> 4. In #getBracketHoverInfo, LNo: 302, checks for ifNode.getElseStatement()
> != null, but inside the if condition ifNode.getThenStatement() is used. Is
> the check "ifNode.getElseStatement() != null" required?
The "ifNode.getElseStatement() != null" check is required to check whether 'line3' should be updated as 'line3' holds the line number for the next 'else', which is calculated using the end offset of "ifNode.getThenStatement()".

Manju, I have released the patch in master branch so that it can also be tested.
Please have a look at the updated code and test it so that any issue can be reported early.
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=3d41dd513ce1a5fff1d3e169e367e4531b1f403a
