In 3.1.

Consider code:

public class Foo {	
	private static final int SEVEN = 7;
	private static final int FIVE = 5;

	public static void main(String[] args) {		
		Runnable runnable = new Runnable() {
			public void run() {
				System.out.println("The answer is " + (FIVE * SEVEN));
			}		
		};
		runnable.run();
	}
}

Select the anonymous Runnable, and execute Convert Anonymous Class to Nested. 
The result:

public class Foo {	
	private static class Twelve implements Runnable {
		private final int fFive;

		private final int fSeven;

		private Twelve(int five, int seven) {
			super();
			fFive = five;
			fSeven = seven;
		}

		public void run() {
			System.out.println("The answer is " + (fFive * fSeven));
		}
	}

	private static final int SEVEN = 7;
	private static final int FIVE = 5;

	public static void main(String[] args) {		
		Runnable runnable = new Twelve(FIVE, SEVEN);
		runnable.run();
	}
}

I never want this behavior--I want the constants to be used as constants.

In 3.1.

Consider code:

public class Foo {	
	private static final int SEVEN = 7;
	private static final int FIVE = 5;

	public static void main(String[] args) {		
		Runnable runnable = new Runnable() {
			public void run() {
				System.out.println("The answer is " + (FIVE * SEVEN));
			}		
		};
		runnable.run();
	}
}

Select the anonymous Runnable, and execute Convert Anonymous Class to Nested. 
The result:

public class Foo {	
	private static class Twelve implements Runnable {
		private final int fFive;

		private final int fSeven;

		private Twelve(int five, int seven) {
			super();
			fFive = five;
			fSeven = seven;
		}

		public void run() {
			System.out.println("The answer is " + (fFive * fSeven));
		}
	}

	private static final int SEVEN = 7;
	private static final int FIVE = 5;

	public static void main(String[] args) {		
		Runnable runnable = new Twelve(FIVE, SEVEN);
		runnable.run();
	}
}

I never want this behavior--I want the constants to be used as constants.
Tobias, can you please check what the result was in 3.0.2 ?
This is also the case in 3.0, 3.0.2.

We might think about putting some effort into the Convert Anonymous (and Move 
Member Type...) refactorings for 3.2. There are quite a few bugs open for 
those (code style, unnecessary code, missing cases, generics problems)
We should definitelly improve this during the 3.2 time frame.
Created attachment 34165
Fix

Here's a fix with test case.

The special case for enum constants has been fixed with bug 99681, but the general problem occurs for all final fields.
Fixed in HEAD > 20060206
