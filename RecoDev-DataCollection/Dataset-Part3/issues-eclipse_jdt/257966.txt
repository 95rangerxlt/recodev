HEAD

NLSKeyHyperlink leaks type binding via AccessorClassReference. I had an editor open on ReorgPolicyFactory, and in a memory dump, I found a NLSKeyHyperlink which retained about 10MB of memory, all via AccessorClassReference.fBinding. I verified that the type binding was not referenced from anywhere else.

I guess the memory would eventually be freed when I closed the editor or maybe when I opened another link, but 10MB is still too much to give away.

Traceback:

org.eclipse.jdt.internal.ui.javaeditor.NLSKeyHyperlink
  [0] of org.eclipse.jface.text.hyperlink.IHyperlink[2]
    fInformation of org.eclipse.jface.text.hyperlink.MultipleHyperlinkPresenter$MultipleHyperlinkHoverManager
      fManager of org.eclipse.jface.text.hyperlink.MultipleHyperlinkPresenter
        fHyperlinkPresenter of org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer
          fViewer of org.eclipse.jdt.internal.ui.text.JavaReconciler
            this$0 of org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread [JNI Global, Stack Local, Thread]

HEAD

NLSKeyHyperlink leaks type binding via AccessorClassReference. I had an editor open on ReorgPolicyFactory, and in a memory dump, I found a NLSKeyHyperlink which retained about 10MB of memory, all via AccessorClassReference.fBinding. I verified that the type binding was not referenced from anywhere else.

I guess the memory would eventually be freed when I closed the editor or maybe when I opened another link, but 10MB is still too much to give away.

Traceback:

org.eclipse.jdt.internal.ui.javaeditor.NLSKeyHyperlink
  [0] of org.eclipse.jface.text.hyperlink.IHyperlink[2]
    fInformation of org.eclipse.jface.text.hyperlink.MultipleHyperlinkPresenter$MultipleHyperlinkHoverManager
      fManager of org.eclipse.jface.text.hyperlink.MultipleHyperlinkPresenter
        fHyperlinkPresenter of org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer
          fViewer of org.eclipse.jdt.internal.ui.text.JavaReconciler
            this$0 of org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread [JNI Global, Stack Local, Thread]
Possible fix is to set fSubjectArea and fInformation to 'null' in
org.eclipse.jface.text.AbstractInformationControlManager.hideInformationControl()

Markus, please think about it as discussed.
Created attachment 120081
Fix
(In reply to comment #1)
> Possible fix is to set fSubjectArea and fInformation to 'null' in
> AbstractInformationControlManager.hideInformationControl()

Looks good, released to HEAD.
