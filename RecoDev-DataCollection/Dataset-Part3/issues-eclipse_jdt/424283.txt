This might sound a bogus request but is something that really happens as part of OracleJDK where you have source code that look like this:

/**
     * Called when there is an external request to close this {@code Window}.
     * The installed event handler can prevent window closing by consuming the
     * received event.
     */
    private ObjectProperty<EventHandler<WindowEvent>> onCloseRequest;
    public final void setOnCloseRequest(EventHandler<WindowEvent> value) {
        onCloseRequestProperty().set(value);
    }
    public final EventHandler<WindowEvent> getOnCloseRequest() {
        return (onCloseRequest != null) ? onCloseRequest.get() : null;
    }
    public final ObjectProperty<EventHandler<WindowEvent>>
            onCloseRequestProperty() {

and generated JavaDoc like this:

http://docs.oracle.com/javafx/2/api/javafx/stage/Window.html#setOnCloseRequest%28javafx.event.EventHandler%29 which is implemented through https://bugs.openjdk.java.net/browse/JDK-7112427

i'm not sure how to solve this. 

Possible solutions:
* teach JDT the property API - if no docs found search for a variable with the same name
* if no javadoc is found on the method - fall back to the HTML-JavaDoc

This might sound a bogus request but is something that really happens as part of OracleJDK where you have source code that look like this:

/**
     * Called when there is an external request to close this {@code Window}.
     * The installed event handler can prevent window closing by consuming the
     * received event.
     */
    private ObjectProperty<EventHandler<WindowEvent>> onCloseRequest;
    public final void setOnCloseRequest(EventHandler<WindowEvent> value) {
        onCloseRequestProperty().set(value);
    }
    public final EventHandler<WindowEvent> getOnCloseRequest() {
        return (onCloseRequest != null) ? onCloseRequest.get() : null;
    }
    public final ObjectProperty<EventHandler<WindowEvent>>
            onCloseRequestProperty() {

and generated JavaDoc like this:

http://docs.oracle.com/javafx/2/api/javafx/stage/Window.html#setOnCloseRequest%28javafx.event.EventHandler%29 which is implemented through https://bugs.openjdk.java.net/browse/JDK-7112427

i'm not sure how to solve this. 

Possible solutions:
* teach JDT the property API - if no docs found search for a variable with the same name
* if no javadoc is found on the method - fall back to the HTML-JavaDoc
Just to clarify: you're missing Javadoc for onCloseRequest? The methods are working fine?
No none of them real API methods show javadoc - please note that there are:
* onCloseRequest - holds the javadoc (althought it is private)
* setOnCloseRequest, getOnCloseRequest and onCloseRequestProperty 

The pattern you'll see in Java code more and more as more people start to write JavaFX code. My request is that I'd like to see the same javadoc no matter if I hover over setOnCloseRequest, ... - that's why I've shown the link into the HTML-JavaDoc generated where setOnCloseRequest magically holds the doc from the private field.
Looks like they used a non-standard tool to generate these docs.

You should file a bug for the Javadoc tool and request that the spec be updated to include this support:
http://download.java.net/jdk8/docs/technotes/tools/windows/javadoc.html

Then we can implement the spec.
(In reply to Markus Keller from comment #3)
> Looks like they used a non-standard tool to generate these docs.
> 
> You should file a bug for the Javadoc tool and request that the spec be
> updated to include this support:
> http://download.java.net/jdk8/docs/technotes/tools/windows/javadoc.html
> 
> Then we can implement the spec.

it looks like they don't - at least this is all the bug where this got implemented is a JDK bug and the commit is in jdk8 http://hg.openjdk.java.net/jdk8/jdk8/langtools/rev/ccbe7ffdd867
(In reply to Thomas Schindl from comment #4)
> (In reply to Markus Keller from comment #3)
> > Looks like they used a non-standard tool to generate these docs.
> > 
> > You should file a bug for the Javadoc tool and request that the spec be
> > updated to include this support:
> > http://download.java.net/jdk8/docs/technotes/tools/windows/javadoc.html
> > 
> > Then we can implement the spec.
> 
> it looks like they don't - at least this is all the bug where this got
> implemented is a JDK bug and the commit is in jdk8
> http://hg.openjdk.java.net/jdk8/jdk8/langtools/rev/ccbe7ffdd867

Looking at the source there's a new option one can pass to javadoc tool named "-javafx"!
Created attachment 238841
proposed implementation

Markus can you take a look at this patch
It would be really nice if we could support this freaking JavaFX javadoc although it is not speced anywhere but like I said the javadoc tool already has switch
BTW I created the patch against master, should I have created it against BETA8?
Markus/Dani would it possible to get a target milestone? Can I expect this to get into Luna or even the JDT8 release for Kepler?
(In reply to Thomas Schindl from comment #9)
> Markus/Dani would it possible to get a target milestone? Can I expect this
> to get into Luna or even the JDT8 release for Kepler?

Markus is currently completely busy with Java 8. He can take a look during M7, but not promise that this will make it into 4.4.

Patch against 'master' is fine, as per M7, we'll have the two things merged.
The feature is still undocumented. The Javadoc tool's -javafx switch only seems to control whether the "Property description:" part is inserted. The property blurb is always inserted now.

Formatted and simplified the code, fixed the messages, and released with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=ed2e616ae4f0b80cd89a8b7a510bc098bfab9dba

If we ever add support for other Javadoc options (e.g. -tag, see bug 39699), then the -javafx flag can also be added on that configuration page.
Thank you very much - this puts Eclipse in front of other IDEs!
filed a follow up bug 434269
