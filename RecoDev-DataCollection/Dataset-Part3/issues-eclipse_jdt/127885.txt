JDT compilation technology will be opened to enable pluggable participation.Compilation takes place in various stages, such as building and editor reconciling. A participant will be able to introspect the Java code using DOM/AST API, perform semantic analysis, issue some markers and possibly generate new source files. [JDT Core, JDT UI, JDT Text]

JDT compilation technology will be opened to enable pluggable participation.Compilation takes place in various stages, such as building and editor reconciling. A participant will be able to introspect the Java code using DOM/AST API, perform semantic analysis, issue some markers and possibly generate new source files. [JDT Core, JDT UI, JDT Text]
Can someone link up any of the work done to meet this plan item?
Why is this bug still open? Is more work going to be done for R3.2?

Added support for participating in reconcile (see compilationParticipant extension point as well as CompilationParticipant and ReconcileContext classes.) Note that this support is still work in progress and it is subject to change. Ability to participate in building will be added later.
Added support for compilation participant to perform during builds.
    * Added API CategorizedProblem#getExtraMarkerAttributeNames() and getExtraMarkerAttributeValues() to allow to specify extra attributes in problem markers.
    * Added 'managedMarker' sequence on 'compilationParticipant' extension point to declare marker types that are persisted by the Java builder.

Compilation participant reporting problems using BuildContext#recordNewProblems(...) now need to declare the problems marker type as being managed for this problems to be persisted as markers by the Java builder. Declaring a managed marker type is done using the 'managedMarker' sequence in the 'compilationParticipant' extension point.
(bug 128219)
Also see bug 137634, bug 134345, bug 122316, bug 115658
From migration guide 3.2:

Compilation participant extension point
A new extension point (org.eclipse.jdt.core.compilationParticipant) allows plugins that are dependent on org.eclipse.jdt.core to participate in the Java build process, as well as in the reconciling of Java editors.

By implementing org.eclipse.jdt.core.compiler.CompilationParticipant and extending this extension point, one can be notified when a build is starting, when a clean is starting, or when a working copy (in a Java editor) is being reconciled. During these notifcations, types can be added, changed or removed, build markers can be created, or errors can be reported to the Java editor.

