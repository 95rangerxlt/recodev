Try this:
Set up a JUnit test that fails.
Run the JUnit test.
Click on the failed test in the upper half of the JUnit view ("Failures").
The stack trace for the failed test appears in the lower half of the JUnit view.
Double click a line in the stack trace.

Expected behaviour:
An editor containing the source line clicked in the stack trace should have
opened.  The cursor should be on the indicated line.

Current behaviour:
Nothing happens.

Try this:
Set up a JUnit test that fails.
Run the JUnit test.
Click on the failed test in the upper half of the JUnit view ("Failures").
The stack trace for the failed test appears in the lower half of the JUnit view.
Double click a line in the stack trace.

Expected behaviour:
An editor containing the source line clicked in the stack trace should have
opened.  The cursor should be on the indicated line.

Current behaviour:
Nothing happens.
Which build are you using. Do you have anything in the log.
I'm using 3.0GA, build 200406251208.  No, there isn't anything in the .log-file.

Does this work for you?

This works for me under Windows XP using the following test case:

public class Testing extends TestCase {
	public void testOne() {
		Assert.fail();
	}
}

The same test case works for me under Linux GTK as well.

The editor opens and the statement causing the assertion failure is 
higlighted. Do you have steps to reproduce this ?
I can provoke this using your example test case as well.

Just to make sure there's no mis-understanding here, can you confirm that you
are clicking on stack frames in the stack trace in the lower / right pane rather
than clicking in the upper / left test-case-failures pane?

Starting with an empty data-dir I can reproduce this thusly:
Start Eclipse.
On the Welcome page, click "Workbench".
File->New->Project...
Create a Java project.
Name the project "test" and click Finish.
Say "yes" to the question about switching to the Java perspective.
Right click the "test" project in the Package Explorer.
New->JUnit Test Case.
Say "yes" to adding junit.jar to the build path.
Name the new class "Test".  Click Finish.
Add the following method:

public void testOne() {
  Assert.fail();
}

Make sure the imports are complete so that the file builds OK.
Save the file.
Go to the start of the file (to make sure the result from clicking on the stack
trace is obvious).
Run->Run As->JUnit test
The JUnit pane appears.  The failed test is marked in the upper pane.
Double click the line "at Test.testOne()V(Test.java:18)" line in the stack trace.

Nothing happens.  The cursor doesn't move.

Double click the line "at
java.lang.reflect.Method.invoke(Ljava.lang.Object;[Ljava.lang.Object;I)Ljava.lang.Object;(Unknown
Source)".

Nothing happens.  There's no complaint about that the source code isn't available.

This seems to be a problem with the "encoding" of the stack trace. The line 
looks like this in my example:

at Testing.testOne(Testing.java:6)

which VM are you using ?

I'm running JRockit 1.4.2_04.

If I run a program with new Exception().printStackTrace() in it I get this from
JRockit:

java.lang.Exception
        at PrintStackTrace.printStackTrace()V(PrintStackTrace.java:17)
        at PrintStackTrace.callMe()V(PrintStackTrace.java:12)
        at PrintStackTrace.main([Ljava.lang.String;)V(PrintStackTrace.java:22)

If I run the same program with SUN's 1.4.1 VM, I get this:

java.lang.Exception
        at PrintStackTrace.printStackTrace(PrintStackTrace.java:17)
        at PrintStackTrace.callMe(PrintStackTrace.java:12)
        at PrintStackTrace.main(PrintStackTrace.java:22)

So the reason is JRockit is printing the method descriptors in addition to the
method name in the stack traces.

Note to self (or whoever else is interested):

The code to change is in
"http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.jdt.junit/src/org/eclipse/jdt/internal/junit/ui/FailureTrace.java?rev=HEAD&content-type=text/vnd.viewcvs-markup",
in method createOpenEditorAction(String).

Created attachment 14699
Stack trace parser that works for both JRockit and SUN stack traces

Look for the last starting parentheses rather than the first ones.  Works for
both JRockit and SUN using these two test cases:

	at PrintStackTrace.printStackTrace(PrintStackTrace.java:17)
	at PrintStackTrace.printStackTrace()V(PrintStackTrace.java:17)
patch released - thanks
John,

I had to revert the patch you provided due to the fact that you didn't agreed on
providing your contribution under the EPL.
I opened bug 85951 for reimplementing the function under EPL.
Drik,

If the three lines I wrote are even copyrightable, I hereby declare them to be
in the public domain, and you can do with them whatever you like, including
re-releasing them under any license you see fit.

Have fun.

I have reapplied the patch.
