class A {
	class Inner{}
	void f(){
		Inner[] t;
		//<<INSERT FOR(ARRAY) TEMPLATE HERE
	}
}

the created for loop is:

for (int i = 0; i < t.length; i++) {
	A.Inner a.Inner = t[i];
}

class A {
	class Inner{}
	void f(){
		Inner[] t;
		//<<INSERT FOR(ARRAY) TEMPLATE HERE
	}
}

the created for loop is:

for (int i = 0; i < t.length; i++) {
	A.Inner a.Inner = t[i];
}
pushing down to core:

CodeAssist should return inner types w/o enclosing type, if the context
matches the enclosing type.

Agreed, it should not need to qualify in this case.
My previous comment is wrong. There are 2 problems:

1) A.Inner
Any type in completion requestor API is fully qualified however the completion 
name for type references is reduced in case the type does not need to be 
qualified. Given you do not use the type reference API, but simply the variable 
one, then you do not get the reduction for free. I do not think we want to 
change our API which is consistent throughout the completion ones.

Now, in the variable guess algorithm, you could have recorded all the possible 
type names which have a reduced form, and then correlate these with the 
variable type names you are about to insert.

2) a.Inner
The code for computing the variable name from the type name should consider 
innertypes (see TemplateCollector.typeToVariable). 


I have an addition to make:

The template does not work correctly when using an array of type 
class. The generated code is as follows:

Class[] interfazes = 
imp.getClass().getInterfaces();
  for (int i = 0; i < interfazes.length; i++) {
  Class class = 
interfazes[i];
}

Suggestion:
Variable names have to be checked whether they are 
reserved key words. If yes then a different name has to be chosen by the user or the template 
generator.


fixed >= 20020806
1. Followed Philippe's suggestion to resolve to simple Type name where possible.
2. fixed as well.
3. array element names are checked against Java keywords
