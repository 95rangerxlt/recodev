AptPlugin keeps a WeakHashMap<IJavaProject, AptProject> so that it can implement getAptProject(IJavaProject jp).

However, AptProject has an IJavaProject field.  So, the weak reference to IJavaProject in the map key doesn't do anything, because the map value has the key strongly referenced.  (See the javadoc on WeakHashMap.)

The result is that AptPlugin never lets go of any project it gets involved in.  Not a huge problem, because projects don't often come and go from a workspace in the course of a session, but we should clean this up at some point.  The right solution is for AptProject to have a WeakReference to its IJavaProject.  (This should be safe, because we would not expect an AptProject to ever be the sole reference to an IJavaProject.)

AptPlugin keeps a WeakHashMap<IJavaProject, AptProject> so that it can implement getAptProject(IJavaProject jp).

However, AptProject has an IJavaProject field.  So, the weak reference to IJavaProject in the map key doesn't do anything, because the map value has the key strongly referenced.  (See the javadoc on WeakHashMap.)

The result is that AptPlugin never lets go of any project it gets involved in.  Not a huge problem, because projects don't often come and go from a workspace in the course of a session, but we should clean this up at some point.  The right solution is for AptProject to have a WeakReference to its IJavaProject.  (This should be safe, because we would not expect an AptProject to ever be the sole reference to an IJavaProject.)
It's true that the JavaProject never is let go of.  But it turns out that's irrelevant anyway, because a JP is a lightweight object that is unrelated to the Project.  What we care about is that the AptProject should be removed when the Project is deleted; and that is taken care of by an explicit resource change listener on project deletion.  (Project deletion is a workspace-level concept that has nothing to do with whether a given Project object is no longer reachable.)  So actually, the "memory leak" is the only thing making this work - if it weren't for that, the JavaProject would quickly go out of scope and we'd lose the AptProject.

The right fix is to turn the WeakHashMap into a regular HashMap.  This does not interfere with project deletion.

Fix is checked into HEAD, needs to be integrated into 3.2.1.
Merged into 3.2.1 and released.
