Greetings from WebSphere Studio Struts Tooling:

Please make JD tooling generate imports for classes in the default
package, so that I can convince WS Web Tooling to do the same.
Scenario:

* Use New>Java>Interface, generate I1 to the default package

* Use New>Java>Class, generate C1 to package com, adding I1

* C1 opens in editor: minus Javadoc and spacing, it is

> package com;
> public class C1 implements I1 {
> }

  Line 2 is marked. Tasks view says:

> I1 cannot be resolved or is not a valid superinterface

* Adding the import removes the error:

> package com;
> import I1;
> public class C1 implements I1 {
> }

Similar behavior results if one generates a class C0 into the default
package and attempts to extend it in a class in another package.

Please correct. Why I care: 

Thomas L Roche <tlroche@us.ibm.com> 10/28/2002 10:35 PM
>>> I have a defect on me (30958, in ED family) that boils down to
>>> this: if the user generates an Action class in some non-default
>>> package that references an ActionForm in the default package, no
>>> import statement is generated for the ActionForm class, causing
>>> run-time error. (Manually adding the import, e.g. "import
>>> TestBean;", fixes the error.)

>>> I asked Raj about this: he demonstrated that he was following the
>>> lead of the JDT. Consider the following case:

>>> * Use New>Java>Interface, generate I1 to the default package

>>> * Use New>Java>Class, generate C1 to package com, adding I1

>>> A similar error results. 

George DeCandio <decandio@us.ibm.com> 10/28/2002 11:29 PM
>> This seems like it is a JDT problem. I would report a bugzilla
>> defect against the JDT and defer this one (referencing the bugzilla
>> defect). This is a very corner case since default packages are
>> rarely used in practice. We do not want to work around this problem
>> and would prefer to piggy back off the JDT behavior.

Gary Johnston <gjohnsto@us.ibm.com> 10/29/2002 08:13 AM
> Agreed.

Greetings from WebSphere Studio Struts Tooling:

Please make JD tooling generate imports for classes in the default
package, so that I can convince WS Web Tooling to do the same.
Scenario:

* Use New>Java>Interface, generate I1 to the default package

* Use New>Java>Class, generate C1 to package com, adding I1

* C1 opens in editor: minus Javadoc and spacing, it is

> package com;
> public class C1 implements I1 {
> }

  Line 2 is marked. Tasks view says:

> I1 cannot be resolved or is not a valid superinterface

* Adding the import removes the error:

> package com;
> import I1;
> public class C1 implements I1 {
> }

Similar behavior results if one generates a class C0 into the default
package and attempts to extend it in a class in another package.

Please correct. Why I care: 

Thomas L Roche <tlroche@us.ibm.com> 10/28/2002 10:35 PM
>>> I have a defect on me (30958, in ED family) that boils down to
>>> this: if the user generates an Action class in some non-default
>>> package that references an ActionForm in the default package, no
>>> import statement is generated for the ActionForm class, causing
>>> run-time error. (Manually adding the import, e.g. "import
>>> TestBean;", fixes the error.)

>>> I asked Raj about this: he demonstrated that he was following the
>>> lead of the JDT. Consider the following case:

>>> * Use New>Java>Interface, generate I1 to the default package

>>> * Use New>Java>Class, generate C1 to package com, adding I1

>>> A similar error results. 

George DeCandio <decandio@us.ibm.com> 10/28/2002 11:29 PM
>> This seems like it is a JDT problem. I would report a bugzilla
>> defect against the JDT and defer this one (referencing the bugzilla
>> defect). This is a very corner case since default packages are
>> rarely used in practice. We do not want to work around this problem
>> and would prefer to piggy back off the JDT behavior.

Gary Johnston <gjohnsto@us.ibm.com> 10/29/2002 08:13 AM
> Agreed.
FYI, importing types from default package is forbidden in Java 1.4.
Philippe Mulet  2002-10-31 17:41
> FYI, importing types from default package is forbidden in Java 1.4.

Yes, but we (WS*) must support 1.3.x.

For < 1.4: The import must be added depending on the compiler settings
For >= 1.4: The wizard should either warn about or not allow references from
non-default to default packages (needs to be considered for the superclasses and
interfaces).
support for imports in default package > 20021120
no need for an extra option. in jdk1.4 you will simply get a compilation error 
on the imports, so you will move your classes.

