Attached test case says it all, but basically the "current" JDKs BinaryOperator<T> which extends BiFunction<T,T,T> without adding methods, gives an error since the single abstract method cannot be found during code generation, possibly since the superinterfaces aren't searched for the most specific match.

Attached test case says it all, but basically the "current" JDKs BinaryOperator<T> which extends BiFunction<T,T,T> without adding methods, gives an error since the single abstract method cannot be found during code generation, possibly since the superinterfaces aren't searched for the most specific match.
Created attachment 229940
Patch showing the error
Thanks, I'll take a look. I think this used to work at some point, one
of my code changes must have broken it.
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=89326fe08eb871063f0f302034a5879455c90920.

The patch also includes a fix for similar problem with raw types.

However, since bridge methods are not emitted as of now, code
generation will still produce incorrect results: Raised https://bugs.eclipse.org/bugs/show_bug.cgi?id=406181 for this.
