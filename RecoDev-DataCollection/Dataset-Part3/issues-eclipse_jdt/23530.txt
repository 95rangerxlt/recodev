I had a data member like this:

   class MyClass {
      String whyNot;

and plain vanilla code like this for a constructor:

      /**
       * @param whyNot The reason for why not.
       */
      MyClass(String whyNot) {this.whyNot = whyNot;}


Now I did a refactor/rename on the data member, changing "whyNot" to "reason".
I asked javadoc references to be changed also.

As far as the constructor was concerned, this resulted in something like

     /**
      * @param reason The reason for why not.
      */
     MyClass(String whyNot) {this.reason = whyNot;}


I can see that Eclipse will not be able to change the parameter name
in one swoop together with the data member name.  They just happen
to be identical by a convention that I happen to follow.  Fine.

But if it doesn't change the constructor parameter name, it should not
change the @param either, as it clearly is not a javadoc reference to that
data member.

I had a data member like this:

   class MyClass {
      String whyNot;

and plain vanilla code like this for a constructor:

      /**
       * @param whyNot The reason for why not.
       */
      MyClass(String whyNot) {this.whyNot = whyNot;}


Now I did a refactor/rename on the data member, changing "whyNot" to "reason".
I asked javadoc references to be changed also.

As far as the constructor was concerned, this resulted in something like

     /**
      * @param reason The reason for why not.
      */
     MyClass(String whyNot) {this.reason = whyNot;}


I can see that Eclipse will not be able to change the parameter name
in one swoop together with the data member name.  They just happen
to be identical by a convention that I happen to follow.  Fine.

But if it doesn't change the constructor parameter name, it should not
change the @param either, as it clearly is not a javadoc reference to that
data member.
javadoc updating is purely textual - moving to LATER for now
until we have a real solution
reopen to mark as dup
no action before bug 36887 is fixed
Reopening...
Got addressed for 3.0.
