Steps to reproduce:
1. See the instructions in code below
2. The resulting code does not compile ("The type AbstractStringBuilder is not visible")

class GeneralizeDeclaredTypeBug6 {
    void f() {
        // Invoke "Generalize Declared Type" on "StringBuffer"
        // and select "AbstractStringBuffer" as new type
        StringBuffer b;
    }
}

Result:

class GeneralizeDeclaredTypeBug6 {
    void f() {
        AbstractStringBuilder b;
    }
}

(Thanks to Yilong Li for helping with the bug report.)

Steps to reproduce:
1. See the instructions in code below
2. The resulting code does not compile ("The type AbstractStringBuilder is not visible")

class GeneralizeDeclaredTypeBug6 {
    void f() {
        // Invoke "Generalize Declared Type" on "StringBuffer"
        // and select "AbstractStringBuffer" as new type
        StringBuffer b;
    }
}

Result:

class GeneralizeDeclaredTypeBug6 {
    void f() {
        AbstractStringBuilder b;
    }
}

(Thanks to Yilong Li for helping with the bug report.)
(In reply to comment #0)
> 2. The resulting code does not compile ("The type AbstractStringBuilder is
> not visible")

>         // Invoke "Generalize Declared Type" on "StringBuffer"
>         // and select "AbstractStringBuffer" as new type

Something not right here - AbstractStringBuilder or AbstractStringBuffer ? In any case, I cannot even find of these types. (For me StringBuffer is this one - http://docs.oracle.com/javase/6/docs/api/java/lang/StringBuffer.html)

Milos, can you please double check the bug report.
Hi Deepak,

You are absolutely right, it should be "AbstractStringBuilder".

I checked the source of java.lang.StringBuffer:
public final class StringBuffer
    extends AbstractStringBuilder
    implements java.io.Serializable, CharSequence

Thanks for considering the report.
(In reply to comment #2)
> You are absolutely right, it should be "AbstractStringBuilder".
Ok.
 
> I checked the source of java.lang.StringBuffer:
> public final class StringBuffer
>     extends AbstractStringBuilder
>     implements java.io.Serializable, CharSequence

Which version of Java has this class? What I have is this -http://docs.oracle.com/javase/6/docs/api/java/lang/StringBuffer.html
java version "1.6.0_33"
Java(TM) SE Runtime Environment (build 1.6.0_33-b04)
Java HotSpot(TM) 64-Bit Server VM (build 20.8-b03, mixed mode)

Download from (Linux x64): http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html#jdk-6u33-oth-JPR

(one has to accept the license, so I could not put the link here)
chmod +x jdk-6u33-linux-x64.bin
./jdk-6u33-linux-x64.bin
cd jdk1.6.0_33/
unzip src.zip
find -name "StringBuffer.java"
cat ./java/lang/StringBuffer.java | head -n 68 | tail -n 3
(The output of the last command is what I showed in the previous comment)

Hope that helps,
Thanks
Issue is reproducible using Build id : I20130227-2000 tested on a linux machine with Java version 1.6.0_18. The refactoring results in compiler error.
Created attachment 236439
Fix and Test

Basically testing if the given type is accessible from a CU based on the access modifier and package declaration. I tried to use the existing isVisible methods in ScopeAnalyzer and JavaModelUtil but none of them were exactly suited. 

This contribution complies with http://www.eclipse.org/legal/CoO.php
(In reply to Samrat Dhillon from comment #6)
> I tried to use the existing isVisible methods in ScopeAnalyzer and
> JavaModelUtil but none of them were exactly suited. 
 
JavaModelUtil#isVisibleInHierarchy(), will take care of the type visibility factor.
I have released the fix with: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=19f69167a681328469ec6270386a18c6f16d55d3

The test case looks good and is released with: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=37875276e50f54b11a88a642d6b19aabf00fa008
