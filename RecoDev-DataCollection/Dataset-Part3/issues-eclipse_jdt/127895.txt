While editing code, all Java tools need to manipulate incomplete sources, containing many syntax errors. Though the structure of the units is usually well extracted (as demonstrated in outline view), power tooling is requring more than just structural information; many advanced functionalities are requiring a detailed DOM AST to conduct syntax colouring, action enabling, problem highlighting, formatting, etc... New strategies will be explored to recover statements and expressions from incomplete programs and still enable creating detailed DOM AST carrying resolved binding information. All tooling will need to be calibrated to properly handle detailed recovered DOM AST. [JDT Core, JDT UI]

While editing code, all Java tools need to manipulate incomplete sources, containing many syntax errors. Though the structure of the units is usually well extracted (as demonstrated in outline view), power tooling is requring more than just structural information; many advanced functionalities are requiring a detailed DOM AST to conduct syntax colouring, action enabling, problem highlighting, formatting, etc... New strategies will be explored to recover statements and expressions from incomplete programs and still enable creating detailed DOM AST carrying resolved binding information. All tooling will need to be calibrated to properly handle detailed recovered DOM AST. [JDT Core, JDT UI]
Statement recovery got implemented during 3.2 cycle; and provide fine grain information in presence of syntax errors.

More tuning will occur in subsequent releases, but the base feature is in now.
