// --
abstract class Y { 
    public abstract void foo(Object[] x);
    public abstract void goo(Object[] x);
}

interface I {
   default public <T> void foo(T... x) {};
   public abstract void goo(Object ... x);
}

public abstract class X extends Y implements I { 
}

triggers an incorrect name clash error.

// --
abstract class Y { 
    public abstract void foo(Object[] x);
    public abstract void goo(Object[] x);
}

interface I {
   default public <T> void foo(T... x) {};
   public abstract void goo(Object ... x);
}

public abstract class X extends Y implements I { 
}

triggers an incorrect name clash error.
This is a better test that shows the difference in treatment between
abstract and default methods:

abstract class Y { 
    public abstract void foo(Object[] x);
    public abstract void goo(Object[] x);
}

interface I {
   default public <T> void foo(T... x) {};
   public abstract <T> void goo(T ... x);
}

public abstract class X extends Y implements I { 
}
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=93b912e3753e060958c1b01615e164e0662ca645
