test case: 
public class Test {
    public void test(Object asdf) {
        if (asdf == null) asdf = null;
        if (asdf == null) asdf = null;
        if (asdf == null) asdf = null;
        if (asdf == null) asdf = null;
        if (asdf == null) asdf = null;
        if (asdf == null) asdf = null;
    }
} 

Use Alt-Shift-R refactoring to change the name of asdf variable. Type quickly and you'll notice the editor quickly falls behind your typing.

While investigating this we found that RenameInformationPopup calls updatePopupLocation every time a textChanged or keyPressed event occurs. This means a lot of calls to pack the shell, then update the region and change the shell's height to be one pixel taller.

Resizing the shell less would really improve perfomance here on all platforms.

test case: 
public class Test {
    public void test(Object asdf) {
        if (asdf == null) asdf = null;
        if (asdf == null) asdf = null;
        if (asdf == null) asdf = null;
        if (asdf == null) asdf = null;
        if (asdf == null) asdf = null;
        if (asdf == null) asdf = null;
    }
} 

Use Alt-Shift-R refactoring to change the name of asdf variable. Type quickly and you'll notice the editor quickly falls behind your typing.

While investigating this we found that RenameInformationPopup calls updatePopupLocation every time a textChanged or keyPressed event occurs. This means a lot of calls to pack the shell, then update the region and change the shell's height to be one pixel taller.

Resizing the shell less would really improve perfomance here on all platforms.
Fixed in HEAD. What a difference a bit of tracing can make! Thanks for spotting and reporting this blooper.

After I added a cache to avoid unnecessary calls to pack(), the next hot spot was a lot of calls to Shell#setLocation(..), many of which actually didn't change the location at all.

When I added a guard for !loc.equals(shell.getLocation) before actually setting the new location, it became incredibly snappy.

When wrote that code, I probably assumed that setLocation(..) would be cheap if the location does not change (same as Label#setText(..)). But I guess the difference is that the check in Label is really just a cheap String#equals(..), whereas the detection in Shell#setBounds(..) would always need another OS call to fetch the current location.
*** Bug 185050 has been marked as a duplicate of this bug. ***
