With the final version of Java 1.4.2 it has become possible to launch the Java VM in the first thread.
This is a requirement when running an SWT event loop on Mac OS X.
Until Eclipse 3.0 we were using "java_swt" to launch the Java VM in the first thread.

In order to eliminate java_swt we need to address the following issues (in that order):

SWT:
- java_swt calls CPSEnableForegroundOperation in order to make SWT
  applications responsive to mouse clicks. This call must be moved 
  into the initialization code in Display.java (see attachement).
  
- if a Java VM is launched directly from a command line or from an
  application bundle, it correctly sets the application name and icon
  in the Dock. However, if it is launched from another process ("eclipse.exe") 
  name and icon default to a generic name ("java") and icon.
  I've fixed that in java_swt by explicitely setting an icon and a name
  on the corresponding Dock item. When eliminating java_swt this code
  must be moved into the initialization code in Display.java as well
  (see attachement).
  (One potential obstacle here is that Display.java doesn't have easy access
  to the Eclipse icon ("eclips.icns") that lives in the application bundle
  and that the format of that icon isn't something SWT understands).

- In the info.plist file of Eclipse launcher the "-vm" argument:
  	<string>-vm</string><string>$APP_PACKAGE/Contents/MacOS/java_swt</string>
  can be deleted if we add the following VM argument:
  	<string>-XstartOnFirstThread</string>

JDT:
- we can remove the code from the jdt.launching that replaces calls to /usr/bin/java
  with "java_swt".
  
- the Mac application exporter no longer needs special support (and UI) for SWT.
  

Update SWT Readme:

- launching SWT apps from the command line with /usr/bin/java is now possible 
  if the flag -XstartOnFirstThread is specified.
  
- strangly enough application bundles just work without any additional flags
  after the "java_swt" has been replaced by a "JavaApplicationStub"

SWT:

- we can remove java_swt both from the platform.launcher and the binary from the SWT carbon 
fragment.

With the final version of Java 1.4.2 it has become possible to launch the Java VM in the first thread.
This is a requirement when running an SWT event loop on Mac OS X.
Until Eclipse 3.0 we were using "java_swt" to launch the Java VM in the first thread.

In order to eliminate java_swt we need to address the following issues (in that order):

SWT:
- java_swt calls CPSEnableForegroundOperation in order to make SWT
  applications responsive to mouse clicks. This call must be moved 
  into the initialization code in Display.java (see attachement).
  
- if a Java VM is launched directly from a command line or from an
  application bundle, it correctly sets the application name and icon
  in the Dock. However, if it is launched from another process ("eclipse.exe") 
  name and icon default to a generic name ("java") and icon.
  I've fixed that in java_swt by explicitely setting an icon and a name
  on the corresponding Dock item. When eliminating java_swt this code
  must be moved into the initialization code in Display.java as well
  (see attachement).
  (One potential obstacle here is that Display.java doesn't have easy access
  to the Eclipse icon ("eclips.icns") that lives in the application bundle
  and that the format of that icon isn't something SWT understands).

- In the info.plist file of Eclipse launcher the "-vm" argument:
  	<string>-vm</string><string>$APP_PACKAGE/Contents/MacOS/java_swt</string>
  can be deleted if we add the following VM argument:
  	<string>-XstartOnFirstThread</string>

JDT:
- we can remove the code from the jdt.launching that replaces calls to /usr/bin/java
  with "java_swt".
  
- the Mac application exporter no longer needs special support (and UI) for SWT.
  

Update SWT Readme:

- launching SWT apps from the command line with /usr/bin/java is now possible 
  if the flag -XstartOnFirstThread is specified.
  
- strangly enough application bundles just work without any additional flags
  after the "java_swt" has been replaced by a "JavaApplicationStub"

SWT:

- we can remove java_swt both from the platform.launcher and the binary from the SWT carbon 
fragment.
Created attachment 13996
required code to turn SWT app into foreground app
Created attachment 13997
Code to set Dock name
Created attachment 13998
Code to set Dock icon
Are we dropping Jaguar support or is the new VM also available there?
We've already dropped Jaguar support for 3.0 (because of the Browser widget).
I have released the changes in SWT. There is still work to be done in order to properly handle the Dock 
icon. We might need new API to set a APP icon in Display or something like that, but for now the dock 
icon is going to be the icon of the shell.

Moving to JDT to have their part of the fix done.
Silenio, since you've already removed the java_swt from the Eclipse.app, we are now requiring that 
everyone upgrades to the latest JVM. In addition launching in tonights build won't work for SWT 
applications because I didn't had a chance to update our parts... 
I thought that was the request. I updated the swt readme to say that SWT needs 
1.4.2_05. Do you think we should continue shipping java_swt or is it enough to 
put it back until next integration build (so that JDT has time to update)?
Well, I thought more of doing one step after another  (see my "in that order" from above :-) over the 
next couple of I-builds.

But I don't mind keeping java_swt removed and I'll try to fix the JDT side tonight.
I think that requiring 1.4.2_05 shouldn't be a problem since we are already requiring Panther, and 
1.4.2_05 is the official Java version fo it.

Any vetoes?
I untersdand now :-). The binary "java_swt" is back until jdt is done (the source should not be 
necessary).
Silenio, would it make sense to implement Display. setAppName as below?
With it, Eclipse for the first time in its existence on MacOS would show the correct name in the Dock :-)

public static void setAppName (String name) {
	APP_NAME = name;
	if (APP_NAME != null) {
		int [] psn = new int [2];
		if (OS.GetCurrentProcess (psn) == OS.noErr) {
			byte[] buffer = new byte[APP_NAME.length () + 1];
			for (int i = 0; i < buffer.length - 1; i++) {
				buffer[i] = (byte) APP_NAME.charAt (i);
			}
			OS.CPSSetProcessName (psn, buffer);
		}
	}
}
 
fixed first half of org.eclipse.jdt.launching.macosx:

a call to /usr/bin/java is only replaced by java_swt if a path for java_swt has been provided as the 
property "org.eclipse.swtlauncher".
This property is only defined if Eclipse was itself launched via java_swt.
Isn't this happening already with latest? I released similar code...
I assume you refer to Display.setAppName?

Display.setAppName has only an effect if it is called before the Display is initialized.
It just remembers the APP_NAME.
Calling it later has no effect.
That is how it works on Motif/GTK. The appName (setAppName()) is used to open 
the X resources database, which is done when the display is created. I am 
assuming this is enough on Mac too, because Eclipse must be calling setAppName
() before it creates the Display.
This does not seem to be the case.
Setting the dock icon only has an effect if the call to
   OS.CPSSetProcessName (psn, buffer);
comes before the call to
   OS.CPSEnableForegroundOperation (psn, 0x03, 0x3C, 0x2C, 0x1103);

That this actually works becomes only visible if the SWT application is launched with "/usr/bin/java", 
which we don't do if we are launching from within Eclipse. In the latter case we use an absolute path 
like "/System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/Home/bin/java" and then the 
Dock name doesn't change and stays "java".

However, since the fix will work for any standalone SWT application (like Eclipse itself), I think it is 
worthwhile to apply. 

I'm investigating why it does not work with "/System/Library/Frameworks/JavaVM.framework/Versions/
1.4.2/Home/bin/java".

OOPS: the first sentence in the last comment should have read:

Setting the dock *name* only has an effect if the call to... 
I made the change to calll CPSSetProcessName() before CPSEnableFroregroundOperation().

The difference you mentioned might be related to how the links were done:

Silenio-Quartis-Computer:~/Desktop/eclipse/workspace ssq$ ls -ld /System/Library/Frameworks/
JavaVM.framework/Home/bin/java
lrwxr-xr-x  1 root  wheel  19 19 Aug 15:19 /System/Library/Frameworks/JavaVM.framework/Home/
bin/java -> ../../Commands/java
Silenio-Quartis-Computer:~/Desktop/eclipse/workspace ssq$ ls -ld /usr/bin/java
lrwxr-xr-x  1 root  wheel  57 19 Aug 15:19 /usr/bin/java -> /System/Library/Frameworks/
JavaVM.framework/Commands/java
So what does a Mac user who is currently running 1.4.1 have to do?  The 1.4.1 VM terminates when 
launched with -XstartOnFirstThread, they need to upgrade their Mac install? 
Just running "Software Update" should offer to upgrade the Java VM to 1.4.2 (if you have MacOS 10.3).

That we require 10.3 and 1.4.2 is mentioned on the Eclipse download clickthrough:
   "Eclipse 3.1 requires Mac OS X 10.3 (Panther) or higher and Java 1.4.2_04 or higher."
Is there any easy way to support both the old and the new?
Yes. It's just a bit ugly.
The problem is that Info.plist is a static file.
For 1.4.1 we need to pass our good old "java_swt" via the "vm" command line argument to eclipse.exe.
For 1.4.2 the -XstartOnFirstThread must be specified.

Two options:
- we do all this behind the scenes in eclipse.exe (neither option would be visible in Info.plist)
- we pass both the "-vm" argument and the -XstartOnFirstThread to eclipse.exe and either ignore one 
or the other internally.


We (SWT) would prefer not to keep java_swt around, but if you think otherwise 
let us know what has to be done.
Silenio, yes, I'd prefer not to keep java_swt around.
And this requires that users upgrade to Apple's "official Java version for Panther" (1.4.2).

My comment #23 was just an answer to Steve's question.
Personally I do not intend to revive java_swt...

OK, you can close this PR as far as SWT is concerned.
The End (of java_swt).
Yay!
So now let's address the remaining issues :-)
E.g. bug #75148
This doesn't seem to be widely publicised.  I just downloaded the standalone SWT files and built a Hello World application to test it out - you can imagine my surprise when running it with /usr/bin/java but without -XstartOnFirstThread caused all sorts of errors, including not responding when switched to with apple-tab, the text jumping all over the available area and segmentation faults.  It took some fairly determined searching to find this bug report, and I wonder if it could be mentioned in a readme or something.  Presumably anyone who downloads the standalone SWT will be using it without Eclipse and needs to set -XstartOnFirstThread themselves somehow.
I hear you.  See http://www.eclipse.org/swt/macosx/

We also need to update the FAQ.  VI, can you think of any other places we should mention it?
