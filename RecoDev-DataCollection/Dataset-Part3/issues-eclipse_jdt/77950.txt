I200411042000

References in Javadocs should be updated when a method is moved. Given:

package p;

class C {
	public void caller() {
		method(new Other());
	}
	
	/**
	 * Doku
	 * @see #caller()
	 */
	public void method(Other arg) {
		arg.toString();
	}
}

class Other {
	
}

- Move method(..) to parameter arg
=> The MethodRef #caller() must be qualified by C or p.C

- From original code, move method(..) to parameter arg, creating a delegate
=> The MethodRef #caller() in the new method's Javadoc must be qualified by C or
p.C. Should also think about whether the javadoc should really be duplicated.

I200411042000

References in Javadocs should be updated when a method is moved. Given:

package p;

class C {
	public void caller() {
		method(new Other());
	}
	
	/**
	 * Doku
	 * @see #caller()
	 */
	public void method(Other arg) {
		arg.toString();
	}
}

class Other {
	
}

- Move method(..) to parameter arg
=> The MethodRef #caller() must be qualified by C or p.C

- From original code, move method(..) to parameter arg, creating a delegate
=> The MethodRef #caller() in the new method's Javadoc must be qualified by C or
p.C. Should also think about whether the javadoc should really be duplicated.
Agree
Note that we have to update 2 directions:

A) Comment 0: references in moved method's javadoc to other elements (visit
Javadoc node and adapt IDocElements)

B) References to moved method in javadoc of other elements (found by the search
engine), e.g. this example, where qualification and argument list of
#method(Other) needs to be adapted:
	/**
	 * @see #method(Other)
	 */
	public void caller() {
		method(new Other());
	}

Direction B) is again a bit tricky when a delegate method stay there: should
references to moved method in javadocs be updated? IMO they shouldn't.
The search engine is currently only used when NOT creating a delegator. In 
this case, updating the javadoc is "for free", otherwise not
Cool, then we will only update javadoc references when no delegator stays.
In this case the method comment of the moved method will contain unchanged 
references to the delegator method, which is still wrong
Nope, the method comment of the moved method is case A) of comment 2.
No need to search there, just an ASTVisitor with 4 cases:
1.) Reference to moved method -> adapt qualifier & arguments
2.) Reference to (child of) originating type -> adapt qualifier
3.) Reference to imported type in originating cu (including types in originating
type's package) -> adapt qualifier
4.) Anything else: stays.

However, I still don't know whether it's a good idea to duplicate the javadoc
when a delegator stays. Maybe the javadoc of the delegator should just become:
/**
 * @see p.C#method()
 */
If user chooses to deprecate the delegator (original method), empty javadoc 
and insert @deprecated Use p.Other#method(), otherwise empty and insert @see 
p.C#method()
Sounds good. In order to get a real reference, the deprecation tag should read:
 * @deprecated Use {@link p.Other#method()}.

Don't forget to NLS the message ("Use {0}." with MessageFormat).
Fixed > 20041119
