suppose I have:
class Foo()
{
    public final static int CONSTANT = 0;
    private final int blankFinalInt;
    
    Foo()
    {
        blankFinalInt = 1;
    }
}

and I ask to generate getters and setters, eclipse propose to generate getters 
and setter for both fields.

1. There is clearly no way to set the constant, and since its a public constant 
(and in upper case), it will be used directly (Foo.CONSTANT), so there is also 
no reason to generate a getter.

2. As before, a final variable cannot be set, so there is no reason to propose 
a setter. since its private, none static and can actually be different between 
instances, it does make sense to propose a getter.

A. Eclipse should not propose to generate setters for final variables.
B. There should be an option to turn off the proposal to generate constants 
getters (and I think it should be off by defaukt)

suppose I have:
class Foo()
{
    public final static int CONSTANT = 0;
    private final int blankFinalInt;
    
    Foo()
    {
        blankFinalInt = 1;
    }
}

and I ask to generate getters and setters, eclipse propose to generate getters 
and setter for both fields.

1. There is clearly no way to set the constant, and since its a public constant 
(and in upper case), it will be used directly (Foo.CONSTANT), so there is also 
no reason to generate a getter.

2. As before, a final variable cannot be set, so there is no reason to propose 
a setter. since its private, none static and can actually be different between 
instances, it does make sense to propose a getter.

A. Eclipse should not propose to generate setters for final variables.
B. There should be an option to turn off the proposal to generate constants 
getters (and I think it should be off by defaukt)
setters should not be generated for fields marked as 'final'
a possible 'fix' would be to suggest to remove the final from a variable the 
user want to set.
but I am not sure its an appropriate action.
Generate Getter/Setter prompts the user whether it is OK to only generate the 
getter in the case of a final variable. So it works properly for final 
variables.

We could filter out the setter from the checkbox tree but for consistency with 
other actions (like override methods) we do not do any filtering but prompt the 
user. This is more flexible since the user can decide to generate the setter 
and then change the field to be non-final.


thats all very nice, but did you actually tried to generate a setter for a 
final field?
I get a warning asking me if I want to generate a GETTER (instead of a setter), 
and when I say yes nothing happens.
seems to be a bug
The message in the dialog needs to be changed.
It was 'Field xy is final, ok to only create getter?'.
This didn't make sense if no getter was selected.
-> Changed to
'ok to skip creation of the setter?'

> 20020911

