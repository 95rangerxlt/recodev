Testpass on  20030716 + I20030716.from20030717_1019

1. Have this code
interface T {
	public abstract int foo();
}

public class NewTest implements T {
	public int foo() {
		return 0;
	}
	
}

class Tester {
	void bar() {
		NewTest t= null;
		int i= t.foo();
		t.hashCode();
	}
}

2. Select NewTest in class Tester, choose "Use Supertype Where Possible"
3. Select "T" as supertype to use, press "OK"
4. Dialog says "no possible updates found"

- I think it should replace "Newtest t= null" with "T t= null"
- Note that it does exactly that when the reference to "foo" is commented out,
but the reference to "hashCode" left as is.$


- Similar limitation when T is not defined yet, and the "Extract Interface"
refactoring is chosen with the option to replace references with Interface where
possible: the reference to NewTest does not get replaced.

Testpass on  20030716 + I20030716.from20030717_1019

1. Have this code
interface T {
	public abstract int foo();
}

public class NewTest implements T {
	public int foo() {
		return 0;
	}
	
}

class Tester {
	void bar() {
		NewTest t= null;
		int i= t.foo();
		t.hashCode();
	}
}

2. Select NewTest in class Tester, choose "Use Supertype Where Possible"
3. Select "T" as supertype to use, press "OK"
4. Dialog says "no possible updates found"

- I think it should replace "Newtest t= null" with "T t= null"
- Note that it does exactly that when the reference to "foo" is commented out,
but the reference to "hashCode" left as is.$


- Similar limitation when T is not defined yet, and the "Extract Interface"
refactoring is chosen with the option to replace references with Interface where
possible: the reference to NewTest does not get replaced.
strange, works for me. in both cases.
worksforme
tests added for both refactorings
Still does not work for me in 200308060800
can you provide more details? are these classes in 1, 2 or 3 files? how are the 
files called? are there other classes with the same name somewhere else?
can you zip the project for me and attach it here?
Created attachment 5743
project showing the described behaviour

guess just reopening was pretty lame, eh...

ok, here we go. The attached project contains one Java source file containing
the three classes (perhaps that is part of the problem - I haven't tried what
happens if they reside in a separate file each).
reproduced. it's because of the default package - it works fine in a named 
package
fixed
