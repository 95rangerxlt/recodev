M5: The following
	
	boolean badFunction(int i) {
		return i > 0 ? true : null;
	}

gives no diagnostic. Whereas

	
	boolean badFunction(int i) {
		return null;
	}

gives a cannot convert null to boolean.

M5: The following
	
	boolean badFunction(int i) {
		return i > 0 ? true : null;
	}

gives no diagnostic. Whereas

	
	boolean badFunction(int i) {
		return null;
	}

gives a cannot convert null to boolean.
Please consult JLS7 15.25. There are a complex set of rule governing the
type of the conditional expression. I believe this is a well formed program - 
but I didn't verify just now. See that this code compiles fine with javac 
too.
I'm not complaining about the validity of the Java compilation.

Given the new Bye-Bye NPE enthusiasm, I would expect to see a potential NPE warning.
(In reply to comment #2)
> I'm not complaining about the validity of the Java compilation.
> 
> Given the new Bye-Bye NPE enthusiasm, I would expect to see a potential NPE
> warning.

I see. Thanks. I'll assign this to Stephan so he can follow up. It is not new
enthusiasm for him. One would think it is his life's mission :)
After recent changes in this field this should now be easy to fix.
Thanks for reporting.
As expected implementation of this diagnostic is now straight-forward.

So, what should be the message here? I currently have:

  Potential null pointer access: This expression of type Boolean may be null but requires auto-unboxing


Also for some existing diagnostics I'd now like to emphasize the unboxing part to help understanding.
Consider this:

  Integer i = b ? Integer.MIN_VALUE : null;
  if (i == 1) foo();

Currently we say:

  Potential null pointer access: The variable i may be null at this location

but I'd think users would be better helped by the above kind of message, i.e.:

  Potential null pointer access: This expression of type Integer may be null but requires auto-unboxing

Note that the highlight range still points to "i", so saying "variable i" carries little information.

OIOW, I'm proposing to drop information about the kind of expression (variable, message send ...) in favor of uniformly mentioning the unboxing.
Alternatively, we could maintain the existing style and only change the prefix, e.g.:

  Potential null pointer access by auto-unboxing: The variable i may be null at this location
  
Which would then multiply to the different kinds of message suffixes.

Anybody want to share their preference?
(In reply to comment #5)
>   Potential null pointer access by auto-unboxing: The variable i may be null
> at this location

I prefer this because I thing it will group better when you see a whole host of errors alphabetically sorted in the Problem View. In this context "i" is not redundant.
Created attachment 227212
patch under test

(In reply to comment #6)
> (In reply to comment #5)
> >   Potential null pointer access by auto-unboxing: The variable i may be null
> > at this location
> 
> I prefer this because I thing it will group better when you see a whole host of
> errors alphabetically sorted in the Problem View. In this context "i" is not
> redundant.

Good point to mention the Problems View.

Anyway, since we already have a host of tests checking the unboxing situation, I'm uploading my patch under test for further illustration.
(In reply to comment #5)
>   Potential null pointer access by auto-unboxing: The variable i may be null
> at this location

Sounds good to me.
The "Potential null pointer access: This expression of type Boolean may be null but requires auto-unboxing" from the patch sounds good to me.

But note that there are more cases with missing problems in that area:

	boolean badFunction3(int i) {
		//expected an "unnecessary cast" and a potential null problem:
		return i > 0 ? true : (Boolean) null;
	}
	boolean badFunction4(int i) {
		if (i > 0)
			return true;
		else
			// wrong "unnecessary cast", expected a null problem:
			return (Boolean) null;
	}
	boolean badFunction5(int i) {
		// expected a potential null problem:
		return i > 0 ? true : getBoolean();
	}
	boolean badFunction6(int i) {
		if (i > 0)
			return true;
		else
			return getBoolean();
	}
	
	private @Nullable Boolean getBoolean() {
		return null;
	}
(In reply to comment #9)
> The "Potential null pointer access: This expression of type Boolean may be null
> but requires auto-unboxing" from the patch sounds good to me.
> 
> But note that there are more cases with missing problems in that area:

Thanks!

I included some of these in my solution, and filed bug 403147 for completeness in these regards.

Tests are green, patch has been released for 4.3 M6 via commit 42a66623ce2a3ec71a2f28506ffd67d2c8d2cf8c.
*** Bug 364326 has been marked as a duplicate of this bug. ***
