3.3 RC3.

Binary compatibility breakage: run(Object) got removed from AptBuilder which is public API and it no longer inherits from IPlatformRunnable which is another breakage.

3.3 RC3.

Binary compatibility breakage: run(Object) got removed from AptBuilder which is public API and it no longer inherits from IPlatformRunnable which is another breakage.
AptBuilder is the run class used for the application declared in plugin.xml and not used elsewhere. I would
1. copy current AptBuilder to an internal package and update plugin.xml
2. restore the API AptBuilder from 3.2
3. deprecate it the API
As long as the application cannot be instantiated, I don't see why this is a breakage.
run(Object) is used by the Eclipse runtime. The runtime is also responsible to instantiate the application.
The class is in an API package and does not contain the disclaimer that it is not to be instantiated by clients. Neither do the implemented interfaces contain such a disclaimer.
I think we can't fix the binary compatibility with 3.2 without breaking binary compatibility with 3.3 milestone releases.  It seems that maybe the best thing would be just to add disclaimers?  It seems a bit unlikely that anyone has actually extended this class.

If we must preserve binary compatibility with 3.2, the alternative would be to revert the changes (thus breaking 3.3 milestone compatibility) and just add an @SuppressWarnings() for the deprecation.

I don't think we need a new internal class; the only reason we changed to IApplication was to avoid the deprecated API warning, I think.

This binary-compatibility checker is a Good Thing, and I hope that in 3.4 it will get run before each milestone release.
>If we must preserve binary compatibility with 3.2, the alternative would be to
>revert the changes (thus breaking 3.3 milestone compatibility) 
Walter, that was discussed in the call and it was decided to do this but with PMC approval. All others that introduced this (e.g. removed a method) do the same thing.

>I don't think we need a new internal class
You don't need it but next time when you want to simply change the code to get rid of some deprecation you'll run into the same problem again.
Created attachment 70366
Proposed patch

This patch restores the original API version of AptBuilder, deprecates it, and, suppresses the deprecation warning on IPlatformRunnable; and adds a new internal version of AptBuilder (using the new IApplication API), and changes plugin.xml to reference the internal class.
Requesting comment on this patch.

Personally I am -1 but I will do whatever the leads and PMC feel is appropriate.  I think this is more code churn than we should perform at this point, and I don't think this particular binary breakage will cause anyone any problems.  The gist of the discussion is in comments #2 and #3.

Please vote and/or discuss.
While technically this bug reveals "API breakage", no one in the wild is likely extending AptBuilder, as it's there solely as an entry point for headless build.
The javadoc should be updated to reflect the intended behavior:
- cannot be instantiated
- cannot be subclassed

Same resolution as bug 191290
Just to clarify, the only intended purpose of this class is as a command line entry point? It was never intended to be extended, instantiated, or referenced programmatically by clients?  If so, this sounds very much like org.eclipse.core.launcher.Main, which is also in a public package, and which we also heavily refactored in 3.3.  Given how late we are in the release, and that it has been in its current form since before the API freeze, I think it's too much churn to revert the class to its old state now. My suggestion is to just add the disclaimer to the class javadoc.  Philippe, what do you think?

In case it's useful, here is the disclaimer that we ended up adding to the Main class. Similar wording would likely be appropriate here:

 * <b>Note:</b> This class should not be referenced programmatically by
 * other Java code. This class exists only for the purpose of launching Eclipse
 * from the command line. To launch Eclipse programmatically, use 
 * org.eclipse.core.runtime.adaptor.EclipseStarter. The fields and methods
 * on this class are not API.


+1 on John's suggestion, comment #10 above. This seems like the correct fix for our current situation.
(In reply to comment #4)
> I think we can't fix the binary compatibility with 3.2 without breaking binary
> compatibility with 3.3 milestone releases.  It seems that maybe the best thing
> would be just to add disclaimers?  It seems a bit unlikely that anyone has
> actually extended this class.

I agree that it is unlikely that anyone has extended the class, but why can't you fix this in a binary compatible way?  You would have to make AptBuilder implement both IApplication and IPlatformRunnable, and let the implementation of start() call the (old) run() method.  To me, this seems to be a fix that would maintain compatibility.  I would also add the words suggested by John to the Javadoc.
+1 for John suggestion.
-1 to also implements deprecated interface.
Created attachment 70405
Proposed patch, take 2

Here is a patch that just updates the javadoc, with text similar to what John proposes.

I am +1 for this solution.  Since it's night-time in Europe I'll wait till tomorrow to count votes.
Instead of:
 * This class should not be referenced programmatically by other
 * Java code. This class exists only for the purpose of launching
 * Eclipse from the command line.  The fields and methods on this
 * class are not API.

I would put:
 * This class should not be referenced programmatically by other
 * Java code. This class exists only for the purpose of running the
 * AptBuilder from the command line.  The fields and methods on this
 * class are not API.
Created attachment 70467
patch, take 3

Updated version of take 2, with Olivier's suggestion incorporated
Patch in comment #16 looks good to me.
+1 for "patch, take 3".
Fixed for RC4, with the patch in comment #16.  Thanks, everyone.
