Compiling the following code 

---
import java.util.ArrayList;

public class ForLoopBug {
	public static void main(String[] argv) {
		for (long l : new ArrayList<Long>()) {}
	}
}
---

With  "Preserve unused (never read) local variables" turned OFF (in the "Java Compiler" properties) leads to invalid bytecode:

---
public class ForLoopBug extends java.lang.Object
 ...
 
public static void main(java.lang.String[]);
  Code:
   Stack=2, Locals=2, Args_size=1
   0:   aconst_null
   1:   invokeinterface #12,  1; //InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
   6:   astore_1
   7:   goto    23
   10:  aload_1
   11:  invokeinterface #18,  1; //InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
   16:  checkcast       #24; //class java/lang/Long
   19:  invokevirtual   #26; //Method java/lang/Long.longValue:()J
   22:  pop
   23:  aload_1
   24:  invokeinterface #30,  1; //InterfaceMethod java/util/Iterator.hasNext:()Z
   29:  ifne    10
   32:  return
  StackMapTable: number_of_entries = 2
   frame_type = 252 /* append */
     offset_delta = 10
     locals = [ class java/util/Iterator ]
   frame_type = 12 /* same */
}
---

invokevirtual at pc=19 pushes a long onto the stack (using two stack entries) but the pop at cp=22 removes just a single entry from the stack. This is also reported by the JVM bytecode verifier when the JVM tries to load that class:

---
java.lang.VerifyError: (class: ForLoopBug, method: main signature: ([Ljava/lang/String;)V) Attempt to split long or double on the stack
Exception in thread "main" 
---

Compiling the following code 

---
import java.util.ArrayList;

public class ForLoopBug {
	public static void main(String[] argv) {
		for (long l : new ArrayList<Long>()) {}
	}
}
---

With  "Preserve unused (never read) local variables" turned OFF (in the "Java Compiler" properties) leads to invalid bytecode:

---
public class ForLoopBug extends java.lang.Object
 ...
 
public static void main(java.lang.String[]);
  Code:
   Stack=2, Locals=2, Args_size=1
   0:   aconst_null
   1:   invokeinterface #12,  1; //InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
   6:   astore_1
   7:   goto    23
   10:  aload_1
   11:  invokeinterface #18,  1; //InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
   16:  checkcast       #24; //class java/lang/Long
   19:  invokevirtual   #26; //Method java/lang/Long.longValue:()J
   22:  pop
   23:  aload_1
   24:  invokeinterface #30,  1; //InterfaceMethod java/util/Iterator.hasNext:()Z
   29:  ifne    10
   32:  return
  StackMapTable: number_of_entries = 2
   frame_type = 252 /* append */
     offset_delta = 10
     locals = [ class java/util/Iterator ]
   frame_type = 12 /* same */
}
---

invokevirtual at pc=19 pushes a long onto the stack (using two stack entries) but the pop at cp=22 removes just a single entry from the stack. This is also reported by the JVM bytecode verifier when the JVM tries to load that class:

---
java.lang.VerifyError: (class: ForLoopBug, method: main signature: ([Ljava/lang/String;)V) Attempt to split long or double on the stack
Exception in thread "main" 
---
I am not able to reproduce this on top of my (Java 8) branch. What is
the build id you are using ? Can you try a recent build ? 4.3 M5 ?
Created attachment 227648
4.3 screenshot with bug
Just tested with

Eclipse SDK

Version: 4.3.0
Build id: I20130204-1400

and the bug is still there (see attachment in comment #2).
Thanks for the information, Jesper, would you like to take a shot at this ?
JVM spec 7 has the specification for stack map table. If you want to work
on this, please treat this as higher priority than any of the other half a
dozen bugs I assigned you today.

If you don't have time, let me know, I'll take it back. TIA.
Created attachment 227663
Test and patch

Easy enough to fix, given such a good report - thank you Simon.

Seems like only "foreach" has this problem, normal assignment is handled properly, in the method SingleNameReference.generateAssignment, line 357.
I've looked at other uses of CodeStream.pop, but not found anything similarly suspect.
+1. Patch looks good.
Should be backported to all streams that handle foreach loop.
(In reply to comment #6)
> +1. Patch looks good.
> Should be backported to all streams that handle foreach loop.

I guess that's master, R3_8_maintenance and BETA_JAVA8 (which merges in bulk), right?
(In reply to comment #7)
> I guess that's master, R3_8_maintenance and BETA_JAVA8 (which merges in
> bulk), right?
At least. We should also backport to 3.6 + Java 7 and probably R3_7_maintenance. I am not sure about the different steam names, but it should be easy to find them.
Thanks for your fix.
(In reply to comment #6)
> +1. Patch looks good.

Thanks Olivier! (By way of mutual introduction, Olivier is a long time
contributor to and past component lead of JDT/Core and Jesper has started contributing to JDT/Core in the last couple of months and has provided
several fixes)

Test and fix released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=d50236df9926d94803c8204bb857934d9e16640c

Jay, could you release this on other streams as needed ? Thanks.
Released in master for 4.3 M6
I have marked it for verification in M6.

Dani, this affects for each loop in 3.6 J7 and 3.8.2+ and needs your go. Thanks!
Excellent response time! You are doing an outstanding job. Thank you very much folks. Simon
.
Verified that 'pop2' is happening in the generated bytecode.

Verified for M6 build eclipse-SDK-I20130310-2000
Looks like some dependency issues and there is a failing test with this patch on R3_8_maintenance. No such problem on R3_6_maintenance_Java7, though.

Jesper, I think it would be easier if you can recreate the patch for R3_8_maintenance and attach it here. Thanks!
Created attachment 228707
Patch suitable for 3_8_maintenance

I only found problems in the copyright notices?

Tests were green on 1.6 and 1.7.
(In reply to comment #16)
> I only found problems in the copyright notices?
> 
> Tests were green on 1.6 and 1.7.

Strange. I didn't have any conflicts other than the copyright one too, but a particular test was failing consistently. Unfortunately my eclipse crashed since then and I don't have the name of the failing test. Will see what happens with this patch.
(In reply to comment #17)
> (In reply to comment #16)
> > I only found problems in the copyright notices?
> >
> > Tests were green on 1.6 and 1.7.
> 
> Strange. I didn't have any conflicts other than the copyright one too, but a
> particular test was failing consistently. Unfortunately my eclipse crashed since
> then and I don't have the name of the failing test. Will see what happens with
> this patch.

I ran the tests under 1.8 (b76 in one case), which gave errors like this one (ForeachStatementTest.test40):

2. ERROR in X.java (at line 34)\r\n
	HashSet<Object> set = new HashSet<Object>() {\r\n
	                          ^^^^^^^^^^^^^^^^^\n
Duplicate methods named stream with the parameters () and () are inherited from the types Set<Object> and Collection<Object>\n
This is reasonable since the test relies on the JRE libraries but cannot parse the new default methods correctly.
JDT has a warning against this as such, but in the UI, not the compiler.

Could that have been it?
(In reply to comment #18)

> I ran the tests under 1.8 (b76 in one case), which gave errors like this one
> (ForeachStatementTest.test40):
> 
> 2. ERROR in X.java (at line 34)\r\n
> 	HashSet<Object> set = new HashSet<Object>() {\r\n
> 	                          ^^^^^^^^^^^^^^^^^\n
> Duplicate methods named stream with the parameters () and () are inherited
> from the types Set<Object> and Collection<Object>\n
> This is reasonable since the test relies on the JRE libraries but cannot
> parse the new default methods correctly.
> JDT has a warning against this as such, but in the UI, not the compiler.
> 
> Could that have been it?

If so, just a note that JDK8 should not be used for any testing outside of
the BETA_JAVA8 branch as it will lead to many such failures. The test suites
are suitably massaged only on BETA_JAVA8 branch.
The test I mentioned is passing with the Oracle's JRE (7).  I will release it for R3_8x after running the full suite once.

Fix has already been released for R3_6_maintenance_Java7 here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_6_maintenance_Java7&id=f591383ad338970b85573d00380d5e9b88c2c500
For the record, the failing test is : PolymorphicSignatureTest#test0002()
Does PolymorphicSignatureTest#test0002() pass without the patch, but fails with??
There isn't a single for() statement in the test?
(In reply to comment #21)
> For the record, the failing test is : PolymorphicSignatureTest#test0002()

Jay, Could you be hitting this : https://bugs.eclipse.org/bugs/show_bug.cgi?id=386816. This was fixed on master but never backported.
(In reply to comment #22)
> Does PolymorphicSignatureTest#test0002() pass without the patch, but fails
> with??
> There isn't a single for() statement in the test?

It fails with that JRE with or without the fix. But it passes with any other JRE.

Anyway, I have released the fix for R3_8_maintenance here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_8_maintenance&id=18898f0d612eb2e52a6adfb84babe3548ca0ae34
(In reply to comment #23)
> (In reply to comment #21)
> > For the record, the failing test is : PolymorphicSignatureTest#test0002()
> 
> Jay, Could you be hitting this :
> https://bugs.eclipse.org/bugs/show_bug.cgi?id=386816. This was fixed on
> master but never backported.

Indeed. Thanks for digging that up!
