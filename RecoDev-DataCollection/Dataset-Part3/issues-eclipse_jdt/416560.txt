Created attachment 235166
Screenshot

package misc.test;

interface FI {
	int foo(int s1, int s2);
}

class Test {
	FI fi= /*a*/ (int n1, int n2) -> n1 * n2;
}
--------------------------
Steps:
1. To get the JLS8 AST, set org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.SHARED_AST_LEVEL to AST.JLS8.
2. Add a breakpoint in org.eclipse.jdt.internal.core.CompilationUnit.reconcile(int astLevel, int reconcileFlags, WorkingCopyOwner workingCopyOwner, IProgressMonitor monitor).
3. Paste the above example in package explorer of the runtime workbench.
4. Edit the file and check the AST created in #reconcile(..) for the lambda parameter "int n1". 
The startPosition and length are wrong as shown in the attached screenshot.
(Example: length is 13 instead of 6. It includes the comment /*a*/ also along with "int n1")

Created attachment 235166
Screenshot

package misc.test;

interface FI {
	int foo(int s1, int s2);
}

class Test {
	FI fi= /*a*/ (int n1, int n2) -> n1 * n2;
}
--------------------------
Steps:
1. To get the JLS8 AST, set org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.SHARED_AST_LEVEL to AST.JLS8.
2. Add a breakpoint in org.eclipse.jdt.internal.core.CompilationUnit.reconcile(int astLevel, int reconcileFlags, WorkingCopyOwner workingCopyOwner, IProgressMonitor monitor).
3. Paste the above example in package explorer of the runtime workbench.
4. Edit the file and check the AST created in #reconcile(..) for the lambda parameter "int n1". 
The startPosition and length are wrong as shown in the attached screenshot.
(Example: length is 13 instead of 6. It includes the comment /*a*/ also along with "int n1")
The problem is not 100% reproducible. For me, it usually doesn't happen right after opening the editor and waiting for the first reconcile operation. It happens more often after I've actually edited the file, e.g. by changing /*a*/ to /*b*/.

To see the bad source range without digging into jdt.core internals, run this code after the call to unit.reconcile(..) in org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy#reconcile(ICompilationUnit, boolean):

AbstractTypeDeclaration test= (AbstractTypeDeclaration) ast.types().get(1);
FieldDeclaration fi= (FieldDeclaration) test.bodyDeclarations().get(0);
VariableDeclarationFragment vdf= (VariableDeclarationFragment) fi.fragments().get(0);
LambdaExpression lambda= (LambdaExpression) vdf.getInitializer();
SingleVariableDeclaration n1= (SingleVariableDeclaration) lambda.parameters().get(0);
ISourceRange range= SourceRangeFactory.create(n1);
System.out.println(range);

BTW: The org.eclipse.jdt.core/debug/dom/ast tracing option also detects this problem.
I am seeing very occasional and sporadic problems in the reconciler
while using 4.3.1 + BETA_JAVA8 to develop JDT/Core for Java8. So there
are no lambda constructs per se.

Also see https://bugs.eclipse.org/bugs/show_bug.cgi?id=419829 and
https://bugs.eclipse.org/bugs/show_bug.cgi?id=421902.

The last one is consistently reproducible, I'll take a look later this week.
*** Bug 424164 has been marked as a duplicate of this bug. ***
Manoj, please make sure that a test is added for the test case from
https://bugs.eclipse.org/bugs/show_bug.cgi?id=424164
Created attachment 238946
JDT Core Test cases to reproduce the issue

Includes the case mentioned in bug 424164
Created attachment 238960
Proposed Patch

Though issue manifests in dom, the root cause found to be at the parser level where the comments get into the parameters. Proposed solution sets the endstatement position at BeginLambda and uses the existing infra structure to flush the comments before modifierStart is written (and then gets into the node.declarationSourceStart later) in SourceElementParser.checkComment()
What would explain why this shows up only during/after reconcile operation
and is also not consistently reproducible ?
(1) I think the diagnosis for the incorrect source range is correct, but not
quite certain the fix is correct. Updating endStatementPosition to be just
ahead of the lambda's header may involve side effects that we cannot predict.
It does not signal statement end by any stretch of imagination.

I think this is a variant of https://bugs.eclipse.org/bugs/show_bug.cgi?id=80904
and I adopted a similar fix.

(2) This bugzilla addresses a real problem, but I think this issue is not the 
same as the reconciler related problems. bug 424164 has been incorrectly closed 
as duplicate of the present one (mea culpa). Rather than reopening that bug, I'll widen the scope of https://bugs.eclipse.org/bugs/show_bug.cgi?id=419829
Fix and tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=d4ec2cadb3e7536bb815d2a43adb7b51f267f01a
