Build ID:  M20060921-0945

Consider the code snippet
	
 void a(boolean x) {
   if( x )
     System.out.println("in a: x is true");
 }
	
 void b(boolean x, boolean y) {
   if( y )
     a(x);
   else
     System.out.println("in b: y is false");
 }

When I use the "inline" refactorization on a(boolean) I end up with

 void b(boolean x, boolean y) {
   if( y )
     if( x )
       System.out.println("in a: x is true");
   else
     System.out.println("in b: y is false");
 }

which has the wrong semantics; it parses as

 void b(boolean x, boolean y) {
   if( y ) {
     if( x )
       System.out.println("in a: x is true");
     else
       System.out.println("in b: y is false");
   }
 }

The refactorization should insert a level of braces in such cases to prevent the else being captured.

Build ID:  M20060921-0945

Consider the code snippet
	
 void a(boolean x) {
   if( x )
     System.out.println("in a: x is true");
 }
	
 void b(boolean x, boolean y) {
   if( y )
     a(x);
   else
     System.out.println("in b: y is false");
 }

When I use the "inline" refactorization on a(boolean) I end up with

 void b(boolean x, boolean y) {
   if( y )
     if( x )
       System.out.println("in a: x is true");
   else
     System.out.println("in b: y is false");
 }

which has the wrong semantics; it parses as

 void b(boolean x, boolean y) {
   if( y ) {
     if( x )
       System.out.println("in a: x is true");
     else
       System.out.println("in b: y is false");
   }
 }

The refactorization should insert a level of braces in such cases to prevent the else being captured.
Nasty dangling else! Fixed in HEAD.
