We are seeing sporadic APT test failures in the automated releng tests.  This bug report is to track the failures.  There is no indication that anything is actually wrong with APT; this appears to be a test framework problem.

The failing test is testDeletedParentFile, and the stack trace of the failure follows.  The interesting thing is that the failure is just in an IFile.delete() operation, nothing at all to do with APT itself.  Note that the failing method is actually from the JDT Core test utilities.


assertion failed: Core exception in testing environment: Could not delete 'C:\buildtest\N20080402-2000\eclipse-testing\test-eclipse\eclipse\apt_folder\org.eclipse.jdt.apt.tests.AptBuilderTestsProject\src\p1\A1.java'.

org.eclipse.core.runtime.AssertionFailedException: assertion failed: Core exception in testing environment: Could not delete 'C:\buildtest\N20080402-2000\eclipse-testing\test-eclipse\eclipse\apt_folder\org.eclipse.jdt.apt.tests.AptBuilderTestsProject\src\p1\A1.java'.

at org.eclipse.core.runtime.Assert.isTrue(Assert.java:109)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.handleCoreException(TestingEnvironment.java:730)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.handle(TestingEnvironment.java:699)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.removeFile(TestingEnvironment.java:969)
at org.eclipse.jdt.apt.tests.AptBuilderTests.testDeletedParentFile(AptBuilderTests.java:493)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:354)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:206)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:35)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:31)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:574)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:195)
at org.eclipse.equinox.internal.app.MainApplicationLauncher.run(MainApplicationLauncher.java:32)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:375)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:175)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:549)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:504)
at org.eclipse.equinox.launcher.Main.run(Main.java:1236)
at org.eclipse.equinox.launcher.Main.main(Main.java:1212)
at org.eclipse.core.launcher.Main.main(Main.java:30)

We are seeing sporadic APT test failures in the automated releng tests.  This bug report is to track the failures.  There is no indication that anything is actually wrong with APT; this appears to be a test framework problem.

The failing test is testDeletedParentFile, and the stack trace of the failure follows.  The interesting thing is that the failure is just in an IFile.delete() operation, nothing at all to do with APT itself.  Note that the failing method is actually from the JDT Core test utilities.


assertion failed: Core exception in testing environment: Could not delete 'C:\buildtest\N20080402-2000\eclipse-testing\test-eclipse\eclipse\apt_folder\org.eclipse.jdt.apt.tests.AptBuilderTestsProject\src\p1\A1.java'.

org.eclipse.core.runtime.AssertionFailedException: assertion failed: Core exception in testing environment: Could not delete 'C:\buildtest\N20080402-2000\eclipse-testing\test-eclipse\eclipse\apt_folder\org.eclipse.jdt.apt.tests.AptBuilderTestsProject\src\p1\A1.java'.

at org.eclipse.core.runtime.Assert.isTrue(Assert.java:109)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.handleCoreException(TestingEnvironment.java:730)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.handle(TestingEnvironment.java:699)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.removeFile(TestingEnvironment.java:969)
at org.eclipse.jdt.apt.tests.AptBuilderTests.testDeletedParentFile(AptBuilderTests.java:493)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:354)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:206)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:35)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:31)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:574)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:195)
at org.eclipse.equinox.internal.app.MainApplicationLauncher.run(MainApplicationLauncher.java:32)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:375)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:175)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:549)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:504)
at org.eclipse.equinox.launcher.Main.run(Main.java:1236)
at org.eclipse.equinox.launcher.Main.main(Main.java:1212)
at org.eclipse.core.launcher.Main.main(Main.java:30)
I remember that JDT/UI's refactoring tests also had such problems, and it was
indeed the Java search indexer. The fix was do perform a dummy search to
synchronize with the indexer before we delete stuff:

public static void performDummySearch(IJavaElement element) throws Exception{
    new SearchEngine().searchAllTypeNames(
        null, 
        SearchPattern.R_EXACT_MATCH, 
        "XXXXXXXXX".toCharArray(), // make sure we search a concrete name. This is faster according to Kent 
        SearchPattern.R_EXACT_MATCH, 
        IJavaSearchConstants.CLASS, 
        SearchEngine.createJavaSearchScope(new IJavaElement[]{element}), 
        new Requestor(), 
        IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, 
        null);
}
Walter,

You can also use one of the delete(File) method written in the
org.eclipse.jdt.core.tests.util.Util class (if you have access to this test
plugin). I wrote this method when we had timing issues with file deletion while running JDT/Core tests on a Vista box.

It waits until the file is really deleted (and put some trace in the console
while waiting). If it's just a test timing issue (which may happen while
running our tests and creating/deleting files very quickly), then it would make
your test ever green and avoid this erratic failures :-)

HTH
Thanks, Markus and Frederic.  I think I can use the org.eclipse.jdt.core.tests.util.Util methods.

I wonder if org.eclipse.jdt.core.tests.builder.TestingEnvironment.removeFile(), which we are using at present, should be modified to call the Util methods as well?
(In reply to comment #3)
> Thanks, Markus and Frederic.  I think I can use the
> org.eclipse.jdt.core.tests.util.Util methods.
> 
> I wonder if org.eclipse.jdt.core.tests.builder.TestingEnvironment.removeFile(),
> which we are using at present, should be modified to call the Util methods as
> well?
> 

On Windows the Java File.delete() method should never be directly used as it's not reliable (this is pretty well known).  I have had to write my own method to handle this with various loops and timeouts and checking (I have not looked at the Eclipse one, but it's probably good).  Therefore, everything should be converted to something other than File.delete().

I've changed all the deletes in the APT test code to use the Util methods.  I'll mark this bug as FIXED and reopen it if the problem recurs.

I'll leave it up to Frederic and Markus as to whether the JDT Core team is interested in fixing TestEnvironment the same way.
