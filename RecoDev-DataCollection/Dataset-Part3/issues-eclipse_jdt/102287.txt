I often end up manually applying the refactoring Replace Method with Method
Object from Martin Fowler's book (summary at
http://www.refactoring.com/catalog/replaceMethodWithMethodObject.html, although
my suggested usage is a little different: he creates fields for all temps in the
method, whereas I generally only create fields for a subset of the method's
parameters)  It would be great to have this implemented automatically in
Eclipse.  Here's my outline.

Given a method and its caller:

public String foo(int x, int y, int z) {
  return String.format("%s, %s, %s", x, y, z);
}

public String bar() {
  return foo(1, 2, 3);
}

Select the method declaration, and select Refactor > Replace Method with Method
Object.  A dialog opens, asking the name of the new class (default to the method
name capitalized), and the name of the computation method (default to
"compute").  It also gives you a "create field" check box for each parameter,
defaulted to checked.

Let's say that we choose the default class name Foo and computation method name
"compute".  For x and y, we leave "create field" checked, but we uncheck it for
z.  Then, we click Finish.  The result (accessibility left out):

static class Foo {
  int x;
  int y;

  Foo(int x, int y) {
    this.x = x;
    this.y = y;
  }

  String compute(int z) {
    return String.format("%s, %s, %s", x, y, z);
  }
}

public String bar() {
  return new Foo(1, 2).compute(3);
}

One final note: this refactoring should be able to make use of a lot of the
machinery from Convert Anonymous to Nested.  As a matter of fact, I often take
advantage of that fact when applying it manually.  I'll use this intermediate step:

public String foo(int x, int y, int z) {
  return new Object() {
    String compute(int z) {
      return String.format("%s, %s, %s", x, y, z);
    }
  }.compute(z);
}

I often end up manually applying the refactoring Replace Method with Method
Object from Martin Fowler's book (summary at
http://www.refactoring.com/catalog/replaceMethodWithMethodObject.html, although
my suggested usage is a little different: he creates fields for all temps in the
method, whereas I generally only create fields for a subset of the method's
parameters)  It would be great to have this implemented automatically in
Eclipse.  Here's my outline.

Given a method and its caller:

public String foo(int x, int y, int z) {
  return String.format("%s, %s, %s", x, y, z);
}

public String bar() {
  return foo(1, 2, 3);
}

Select the method declaration, and select Refactor > Replace Method with Method
Object.  A dialog opens, asking the name of the new class (default to the method
name capitalized), and the name of the computation method (default to
"compute").  It also gives you a "create field" check box for each parameter,
defaulted to checked.

Let's say that we choose the default class name Foo and computation method name
"compute".  For x and y, we leave "create field" checked, but we uncheck it for
z.  Then, we click Finish.  The result (accessibility left out):

static class Foo {
  int x;
  int y;

  Foo(int x, int y) {
    this.x = x;
    this.y = y;
  }

  String compute(int z) {
    return String.format("%s, %s, %s", x, y, z);
  }
}

public String bar() {
  return new Foo(1, 2).compute(3);
}

One final note: this refactoring should be able to make use of a lot of the
machinery from Convert Anonymous to Nested.  As a matter of fact, I often take
advantage of that fact when applying it manually.  I'll use this intermediate step:

public String foo(int x, int y, int z) {
  return new Object() {
    String compute(int z) {
      return String.format("%s, %s, %s", x, y, z);
    }
  }.compute(z);
}
After further reflection, it turns out that what I describe in the summary has
less to do with "Replace Method with Method Object", and more to do with
"Introduce Parameter Object":
http://www.refactoring.com/catalog/introduceParameterObject.html

So, for what I've described in comment 0, one would first create a Parameter
Object for x and y, and then move the foo method to that new class.
What does [2] mean?  Just curious.
I find I use the Introduce Parameter Object refactoring more and more in my code
and would love to see this automated. Right now it just seems tedious, since the
new Parameter Object is just fields with getters and setters. ... But the
anonymous to inner class refactoring does do a lot of the work to help get that
going a bit.

I just did this on a utility JUnit method that takes some params and runs a
test, and now my calling code looks like this:

new IMethodFormattingTester("myMethod", "S,i", (new String[] {"QString;","I"}),
"MyClass").doTest();

What would be additionally nice is a way to refactor that to:

IMethodFormattingTester tester = new IMethodFormattingTester();
tester.setMethodName = "myMethod";
tester.setExpectedParams = "S,i";
tester.setParams = (new String[] {"QString;","I"});
tester.setClassName = "MyClass";
tester.doTest();

... as that allows me to have default values for the class fields so I don't
always have to set them all.
(In reply to comment #3)
> What would be additionally nice is a way to refactor that to:
> 
> IMethodFormattingTester tester = new IMethodFormattingTester();
> tester.setMethodName = "myMethod";
> tester.setExpectedParams = "S,i";
> tester.setParams = (new String[] {"QString;","I"});
> tester.setClassName = "MyClass";
> tester.doTest();

That would be nice--I recommend creating a second PR for this suggestion, to
keep this one focused.
(In reply to comment #4)

> That would be nice--I recommend creating a second PR for this suggestion, to
> keep this one focused.

Done: https://bugs.eclipse.org/bugs/show_bug.cgi?id=105324
Created attachment 64857
first patch from Karsten
Created attachment 64871
With JUnits and minor corrections
Created attachment 64877
GUI Redesign
Implemented in 3.3M7
