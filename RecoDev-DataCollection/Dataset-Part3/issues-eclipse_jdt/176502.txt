Build ID: I20070222-0951

Steps To Reproduce:
Put the following code in a Java file (has dependencies on EMF):

package com.castortech.iris;

import java.util.Iterator;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.Diagnostician;

public class BugTest {
  public static void main(String[] args) {
    Resource resource = null;
    for (Iterator j = resource.getContents().iterator(); j.hasNext();) {
      EObject eObject = (EObject)j.next();
      Diagnostician.INSTANCE.validate(eObject);
    }
  }
}

Choose source->Clean Up, and make sure the profile has "Remove unused imports" selected.

The refactoring will incorrectly try to remove the imports for EObject and Diagnostician.

More information:
Note that while trying to minimize the example reproducing the bug, I was unable to get rid of the dependency on EMF. Replacing resource.getContents() with a java.util.List, for example, makes the bug go away.

Build ID: I20070222-0951

Steps To Reproduce:
Put the following code in a Java file (has dependencies on EMF):

package com.castortech.iris;

import java.util.Iterator;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.Diagnostician;

public class BugTest {
  public static void main(String[] args) {
    Resource resource = null;
    for (Iterator j = resource.getContents().iterator(); j.hasNext();) {
      EObject eObject = (EObject)j.next();
      Diagnostician.INSTANCE.validate(eObject);
    }
  }
}

Choose source->Clean Up, and make sure the profile has "Remove unused imports" selected.

The refactoring will incorrectly try to remove the imports for EObject and Diagnostician.

More information:
Note that while trying to minimize the example reproducing the bug, I was unable to get rid of the dependency on EMF. Replacing resource.getContents() with a java.util.List, for example, makes the bug go away.
Here's an example which doesn't depend on EMF. It looks like it might have something to do with mixing a generified List with a non-generic Iterator:


import java.io.BufferedReader;
import java.util.Iterator;
import java.util.List;

public class BugTest {
  protected void getLabelFeature(List<Object> l) {
    for (Iterator i = l.iterator(); i.hasNext(); ) {
      if (this.getClass() != BufferedReader.class) {
      }
    }
  }
}
(In reply to comment #1)
> Here's an example which doesn't depend on EMF. It looks like it might have
> something to do with mixing a generified List with a non-generic Iterator:
> 
> 
> import java.io.BufferedReader;
> import java.util.Iterator;
> import java.util.List;
> 
> public class BugTest {
>   protected void getLabelFeature(List<Object> l) {
>     for (Iterator i = l.iterator(); i.hasNext(); ) {
>       if (this.getClass() != BufferedReader.class) {
>       }
>     }
>   }
> }
> 

Oops, I forgot to mention: For the clean-up settings, you need to specify "Remove unused imports" AND also "Convert for loops to enhanced". The refactoring will correctly remove the import for Iterator, but incorrectly remove the import for BufferedReader.
Move to JDT/UI
Olivier? The import for BufferedReader is removed for you too? Seams to have nothing to do with remove unused imports. Enable convert loop clean up as only clean up and BufferedReader import is removed.

The loop converter has a bad omen;-)
Created attachment 64168
fix

Damn, even the tests are wrong...
Created attachment 64169
tests
fixed > I20070417-0800
