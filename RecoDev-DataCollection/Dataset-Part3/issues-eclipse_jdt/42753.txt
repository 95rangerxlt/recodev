The are no compiliation errors or warnings in the project. 

Happens in M3 and M2.

The are no compiliation errors or warnings in the project. 

Happens in M3 and M2.
Created attachment 6034
Shows the bogus error requester
Øyvind, is it possible for you to provide the source of the method to be 
inlined.
>Øyvind, is it possible for you to provide the source of the method to 
>be inlined.

I managed to create a smaller reproduceable case.

Any help?





public class Box
{

	public static void main(String[] args)
	{
	}

	public Object getSerialNumber()
	{
		return null;
	}
}



import java.util.LinkedList;

public class Silly
{

	private Box[] boxListOrder;


	/** load boxlist order if we are an app that saves that sort of thing. 
*/
	protected void loadBoxListOrder() 
	{
		java.util.List list = new LinkedList();
	
		loadIt(list);	
		
	}
	
	
	private void loadIt(java.util.List list) 
	{
		String[] matches = loadBoxListOrderPrefs();
		
		if (matches!=null)
		{
			Box[] boxListOrder = new Box[list.size()];
		
			int foundCount = 0;
			LoadPrefs : 
			for (int m=0; m<matches.length; m++)
			{
				for (int i = 0; i < list.size(); i++)
				{
					Box box = ((Box) list.get(i));
					if (matches[m].equals
(box.getSerialNumber()))
					{
						boxListOrder[foundCount] = box;
						foundCount++;
						if (foundCount >= list.size())
						{
							break LoadPrefs;
						}
						break;
					}
				}
			}
			this.boxListOrder=boxListOrder;
		}
	}


	/**
	 * @return
	 */
	private String[] loadBoxListOrderPrefs()
	{
		// TODO Auto-generated method stub
		return null;
	}
}

Created attachment 6300
patch and unit test

The problem was with the LoadPrefs label. Labels are represented in AST as
instances of SimpleName class and there are no bindings associated with labels.
Class SourceAnalyzer verifies that method being inlined has no compilation
errors. This verification checked that every SimpleName object has a binding.

The patch is attached along with unit test.
Fixed released for M4. Thanks Dmitry !
