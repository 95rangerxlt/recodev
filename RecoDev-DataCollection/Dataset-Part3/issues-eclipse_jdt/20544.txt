if (value == null)<<ENTER_KEY>>
should cause the indent level to increase.  then I could type:

if (value == null)
      return;

if (value == null)<<ENTER_KEY>>
should cause the indent level to increase.  then I could type:

if (value == null)
      return;
Post 2.0
Reopening for 2.1 consideration
I am against this proposal, at least in this simple form. I usually format non-
simple if statements like

if(value == null)
{
    // do something
}

Simply indenting after <<ENTER_KEY>> would lead to

if(value == null)
    {

at least, if pressing "{" does not undo the indent.
fixed > 20030901
I think this caused a regression.  Given:
shortcutBar.getControl().setBackground(new Color(null, 
CTabFolder.borderInsideRGB));

All on one line, type ENTER in front of the "new" keyword.  Previously, this 
would cause the "new..." to be indented one TAB more than the previous line.  
In M4, it receives 2 TABS of indentation.

I don't believe this is a new format preference, because auto-format removes 
the second TAB.
The smart indent stuff is not yet using the formatter. This will be fixed once
the formatter is used.

right now, the auto indenter does its own thing without respecting any prefs,
based on the most common settings (which is double indenting continued
expressions)... will move to using the new formatter.
fixed > 20031124
Still not working properly.  Given:
for (int i=0; i < string.length; i++)
	if (isPreceeding(string[i], d, c))
		return true;<<CARET>>

Typing ENTER should result in indentation which matches the "for" statement.  
Instead, it matches the "if".
I don't agree, since it's possible that you want to add an 'else' statement to
the  'if' above. If you type in anything but 'else' on the new line and hit
Ctrl+I (Correct Indent), it will switch back and align with the 'for' in the
above example.
Using jdt.ui plug-in source as a reference, I guess you will be right 20% of 
the time ;-).  The majority of if statements are else-less.
hmm, you're probably right about the 20% guess. The intention behind the current
behaviiour is to stay with the innermost language construct.

- Visual Studio (6 anyway) does this: it indents with the 'for' (in the given
example) and automatically indents the line once you finish typing 'else'. Not
sure whehter I would like this though.
*** Bug 78214 has been marked as a duplicate of this bug. ***
I think this should be reopened - it's possible to produce correct indentation
from this input, e.g. vim will align the next line on the 'for' and re-indent it
when 'else' is typed.   Right now it produces incorrect indentation, which
definitely seems like a bug.
reopening.  The autoindent strategy could definitely special case the 
character "e" typed immediately after whitespace+"els".
by popular request... :-)
fixed for 'else' and 'case' labels (opposite thing there: when typing statements
after a case label, they are indented dep. on preferences. But when you type a
new case label, you want it indented less than the statements...).

The indentation happens on typing the last 'e' of 'else' (or 'case',
respectively), which means that you get a wrong indentation when typing in a
method call to your elsevier() method:

while (condition)
  if (condition)
    break;
->elsevier()
