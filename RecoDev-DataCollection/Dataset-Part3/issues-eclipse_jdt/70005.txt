3.0

it sometimes takes two tries to get the getter and setter methods
This happens when the cu isn't reconciled so the avaiable fields are not found.

1. enter a new field 'foo'
2. start with getF, code assist > no getter proposal

3.0

it sometimes takes two tries to get the getter and setter methods
This happens when the cu isn't reconciled so the avaiable fields are not found.

1. enter a new field 'foo'
2. start with getF, code assist > no getter proposal
Created attachment 13237
proposed fix
suggest to fix in 3.0.1. I run into this quite often. It is irritating if the
proposals aren't there.

fix released in HEAD (3.1) > 20040714
fix verified
The code of the fix is OK. However, this still doesn't work reliable due to 
the fact that ICompilationUnit#getElementAt doesn't return the enclosing 
element in all cases.

Steps to reproduce: 

- create a new CU
- enter a field Object value;
- press return 
- enter getV and press code assist.

The call fCompilationUnit.getElementAt(fCodeAssistOffset); in ResultCollector 
(line 339) returns null.

Philippe, can you please comment on why this call return null although the 
cursor is clearly inside a type.
Smells like a bug. Are you sure the buffer passed to us contains the proper 
source ?
The problem described in comment #4 only happens if the compilation unit is 
empty when you start entering the field and getV. If an additional member is 
present getElementAt returns result.
After discussing it with Dani we decided to not put this fix in. The reason is 
the reconcile in the UI thread which (even in cases where I am not interested 
in getter setter proposals) can be blocked for a noticable amount of time when 
code assist is requested between to methods in large files.

IMO the getter and setter must be proposed by core since core already as 
a "reconciled" particial ast for the CU and knows about the additional fields.
I have backed out the changes from HEAD as well.
Code assist knew all the fields but didn't report them because the name prefix
did not match. Filed bug 84321 as feature request
*** Bug 101989 has been marked as a duplicate of this bug. ***
I just posted a dupe to this (bug 101989, looking at the stub method code assist
in this case).  What would the onlookers think about a UI in which all the code
assists available without a reconcile came up immediately, but with some sort of
visual indication that if the user waits for the reconcile to complete,
additional proposals may become available?

Right now, I have to guess how long to wait for an invisible background task to
complete before I can be sure that all proposals are being offered to me, and
that doesn't have a tight feel to it for me.
I'm hoping to get the necessary context (all fields in the current type) with
bug 110181.
fixed with the new API from jdt.core (bug 202470) > 20080409

Dani, I had to fix a test in org.eclipse.jdt.text.tests, and did this on the BM under your name. Sorry.
>Dani, I had to fix a test in org.eclipse.jdt.text.tests, and did this on the BM
>under your name. Sorry.
Please don't do that, unless it is urgent - which it wasn't in this case.

That the tests failed are due to a bug in your real code. The collector is API and now all clients that use it will be broken like the tests.

I've reverted the tests to its original state. Please make sure the real code doen't break them i.e. has old behavior when CompletionContext.isExtended() returns 'false'.
added code to test if context is extended > 20080410
