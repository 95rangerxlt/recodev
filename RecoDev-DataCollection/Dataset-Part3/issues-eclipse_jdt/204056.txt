In 3.2, if you disable annotation processing from the UI, generated files are deleted and the persisted file dependency information is removed.

In 3.3 this no longer works.  (It does work from the API, just not from the UI.)

The problem is that the "processing enabled" setting in 3.3 is stored both in APT prefs, as it was in 3.2, and also in JDT prefs.  The UI code first sets the old APT pref, then it notifies the APT code that the preference changed, then it sets the new JDT pref.  But the code that handles the preference change notification is looking at the new pref; so at the time it's called, nothing has changed.

To repro:

1. Create a project that has a Java 5 processor that generates a type.
2. Build.  Note that the type is generated.
3. From the UI, disable annotation processing.  Rebuild.

Expected: generated types folder should have been removed.  Actual: it remains.

In 3.2, if you disable annotation processing from the UI, generated files are deleted and the persisted file dependency information is removed.

In 3.3 this no longer works.  (It does work from the API, just not from the UI.)

The problem is that the "processing enabled" setting in 3.3 is stored both in APT prefs, as it was in 3.2, and also in JDT prefs.  The UI code first sets the old APT pref, then it notifies the APT code that the preference changed, then it sets the new JDT pref.  But the code that handles the preference change notification is looking at the new pref; so at the time it's called, nothing has changed.

To repro:

1. Create a project that has a Java 5 processor that generates a type.
2. Build.  Note that the type is generated.
3. From the UI, disable annotation processing.  Rebuild.

Expected: generated types folder should have been removed.  Actual: it remains.
Created attachment 78804
Proposed patch

Proposed patch fixes the notification order in the UI code.  Note that only the UI code is changed, no core (API) code.
Jess, please review for inclusion in 3.3.2
+1 for inclusion in 3.3.2.
Released for 3.4M2 and 3.3.2.
