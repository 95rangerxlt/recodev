If I rename the mul() method to mulx() in following code:
public class Test02 {
	private static class Multiplier {
		private final long mMul;
 		public Multiplier(long iMul) {
 			this.mMul = iMul;
		}
		public Long mul(Long iItem) {
			return iItem * mMul;
		}
	}
	private static void test(UnaryOperator<Long> iFn) {
	}
	public static void main(String[] args) {
		UnaryOperator<Long> mul = (new Multiplier(3))::mul; 
		test((new Multiplier(3))::mul);
	}
}
it renames the 'Multiplier' constructor in both (new Multiplier(3))::mul occurrences. The result is (new mulx(3))::mul
But preview during renaming looks good, i.e. all occurrences of method name are found well just final renaming fails.

Used Eclipse 4.3.2 with Eclipse JDT (Java Development Tools) Patch with Java 8 support (for Kepler SR2) 1.0.0.v20140317-1956

If I rename the mul() method to mulx() in following code:
public class Test02 {
	private static class Multiplier {
		private final long mMul;
 		public Multiplier(long iMul) {
 			this.mMul = iMul;
		}
		public Long mul(Long iItem) {
			return iItem * mMul;
		}
	}
	private static void test(UnaryOperator<Long> iFn) {
	}
	public static void main(String[] args) {
		UnaryOperator<Long> mul = (new Multiplier(3))::mul; 
		test((new Multiplier(3))::mul);
	}
}
it renames the 'Multiplier' constructor in both (new Multiplier(3))::mul occurrences. The result is (new mulx(3))::mul
But preview during renaming looks good, i.e. all occurrences of method name are found well just final renaming fails.

Used Eclipse 4.3.2 with Eclipse JDT (Java Development Tools) Patch with Java 8 support (for Kepler SR2) 1.0.0.v20140317-1956
Assigning to ui for further analysis.
It is renamed properly only with the quick assist "Rename in file".
With all other means of renaming, it gives incorrect result.
Replace the main method in comment #0 with the following (to include type variables after "::") -

public static <T, V> void main(String[] args) {
	UnaryOperator<Long> mul = (new Multiplier(3))::<T, V> mul; 
	test((new Multiplier(3))::<T, V>mul);
}

The search match that we get from JDT Core for "mul" is: 
"new Multiplier(3))::<T, V> mul"

1. It has missing '(' at the beginning.
2. It includes the qualifier, :: and type args also - As a result, MethodOccurenceCollector#acceptSearchMatch fails.
We could scan the search match to get the method reference identifier but that would have to be done for each MethodReferenceMatch in any rename method refactoring as SearchMatch#getElement() also does not tell if it is a java 8 method reference expression.

Markus, should we try to scan the match or should only the method reference identifier be returned by the search (like what we get in case of a qualified method invocation)?
We should reserve scanning for cases where there's no other solution. Here, the better solution is to align the source range of the MethodReferenceMatch in JDT Core. Filed bug 433011 for that.
I also verified that the fix to bug 433011 addresses this one. This can be closed (perhaps with a test?) now.
Released the test here:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=21769c794d05e5bf0fb988319ab98c49bcc919bf
ChangeSignatureTests18#testMethodReference0() revealed a case where we already relied on the longer source range.

I didn't find other potential problems, and I fixed this case with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=b46cc4101698a1f81d51a141dd72819337672240
