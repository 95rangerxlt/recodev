Build: 3.2 RC2

1) Checked out org.eclipse.equinox.common from repository
2) Applied two refactorings (rename method and add parameter, script attached).
3) Exported the plugin as a JAR file, including the refactoring script.
4) Unzipped resulting JAR file to get the script file on disk
5) Deleted project from workspace
6) Checked out the following projects from HEAD:

  org.eclipse.equinox.common
  org.eclipse.core.jobs
  org.eclipse.core.filesystem
  org.eclipse.core.resources
  org.eclipse.core.runtime

7) Refactor > Apply Script.
8) Selected the script generated by the export in step 3)

-> two "Internal Errors" occur and the script cannot be applied. I will attach the log.

Build: 3.2 RC2

1) Checked out org.eclipse.equinox.common from repository
2) Applied two refactorings (rename method and add parameter, script attached).
3) Exported the plugin as a JAR file, including the refactoring script.
4) Unzipped resulting JAR file to get the script file on disk
5) Deleted project from workspace
6) Checked out the following projects from HEAD:

  org.eclipse.equinox.common
  org.eclipse.core.jobs
  org.eclipse.core.filesystem
  org.eclipse.core.resources
  org.eclipse.core.runtime

7) Refactor > Apply Script.
8) Selected the script generated by the export in step 3)

-> two "Internal Errors" occur and the script cannot be applied. I will attach the log.
Created attachment 40051
Refactoring script
Created attachment 40053
Error log
I am not able to reproduce the two internal errors using the given steps. It also seems to me that the JAR export is not necessary.

Could you retry with the following steps:

1) Check out org.eclipse.equinox.common from HEAD
2) Perform following refactorings:
 - Rename IPath.append to appendix
 - Change signature of IPath.isUNC: add new boolean parameter
3) Create refactoring script (Refactor->Create Script...), select the two refactorings
4) Replace org.eclipse.equinox.common from HEAD, check out following projects from HEAD:
  org.eclipse.core.jobs
  org.eclipse.core.filesystem
  org.eclipse.core.resources
  org.eclipse.core.runtime
5) Apply refactoring script from step 3)
Following the steps in comment #3, but without replacing org.eclipse.equinox.common from HEAD in step 4), reproduces the internal errors for me. Here are simpler steps:

1) Checkout org.eclipse.equinox.common from HEAD
2) Perform the two refactorings
3) Refactor > Create Script > choose the two refactorings
4) Refactor > Apply Script > select the script from 3)
5) Keep hitting Next in the refactoring wizard.

Have you rolled back the equinox project before applying the script?
If not, the refactoring script obviously does not find the input elements on which it has been recorded anymore.
The error occurs when I do not roll back the change in equinox (sorry, this was a mistake in my original steps).

I would not expect it to be successful when applying the script, but I would not expect a wizard that says "A fatal error has occurred", and "Internal Errors" in the log.  Maybe the behaviour is correct but the way it is displayed to the user makes it look like a serious error has occurred.
For what it's worth, the real use case I was trying to achieve is:

1) refactor project A
2) checkout project B that has a dependency on A
3) apply the refactoring from 1) to project B (even though refactored A is still in my workspace)
Fixed in HEAD > 20060615
(In reply to comment #8)
> Fixed in HEAD > 20060615
> 

Can you expand on what was fixed?  I looked at the latest integration build and it looks like the message has changed but John's expectations (comment 7) are still not achievable.  It seems like John's use case is what developers are looking to this functionality to provide.
The thing which has been fixed is the internal error which was displayed when trying to apply the refactorings script. This has been replaced by a message telling that the refactoring cannot be executed due to some missing input.

The scenario in comment 7 cannot be handled as described, as the refactoring infrastructure has been designed to work on consistent workspaces only. A workaround however is to refactor project A, save all refactorings to a script, roll back all refactorings on A, checkout B and finally apply the refactoring script.
(In reply to comment #10)
> The scenario in comment 7 cannot be handled as described, as the refactoring
> infrastructure has been designed to work on consistent workspaces only. A
> workaround however is to refactor project A, save all refactorings to a script,
> roll back all refactorings on A, checkout B and finally apply the refactoring
> script.

Thanks.  I've logged enhancement request 151582 for this.

