See if the behavior of program captured in 
NullAnnotationTest.test_nonnull_parameter_015 and
NullAnnotationTest.test_nonnull_parameter_016 should change once/when
JSR308 is effective.


See https://bugs.eclipse.org/bugs/show_bug.cgi?id=365983 for background.

See if the behavior of program captured in 
NullAnnotationTest.test_nonnull_parameter_015 and
NullAnnotationTest.test_nonnull_parameter_016 should change once/when
JSR308 is effective.


See https://bugs.eclipse.org/bugs/show_bug.cgi?id=365983 for background.
Stephan, please follow up. Request to prioritize this below bug 380501.
Thanks in advance.
Yep, this will be a wonderful project in its own right, with more to come beyond varargs (arrays in general and type parameters ...)
I've generalized the bug title because both use cases follow the same rules:

  (@NonNull Object ... objects)

  @NonNull Object[] objects;

Indeed the semantics we chose for declaration annotations in these positions will require a refactoring in order to express the same semantics with JSR 308:

  (Object @NonNull... objects)
  
  Object @NonNull[] objects;

Implementing the new semantics for Java 8 is a straight-forward task. The difficult part is: can we support a smooth migration strategy from on style to the other?


I'm raising this question at this point in time to double-check whether a third option exists not listed below, that might require any changes to be made in time for Kepler. If no such option is found, the discussion can safely be postponed until SR1.

--- Details: ----

In order to discuss migration paths, we need to consider how the annotation
library is changed:
1. @NonNull and @Nullable change their @Target specification from
     @Target({ FIELD, METHOD, PARAMETER, LOCAL_VARIABLE })
   to
     @Target(TYPE_USE)
2. the new library has to be marked using either of these strategies:
   a. increase the bundle version to 2.0.0 (incompatible change), or,
   b. create new annotations in a new package, e.g.:
        org.eclipse.jdt.annotation.type.NonNull
        org.eclipse.jdt.annotation.type.Nullable
      this would allow us to ship a library with both versions inside,
      or to ship two distinct bundles, either should work fine.
   (In all cases the new bundle will specify a BREE of J2SE-1.8)

I don't see a need to discuss (1), but regarding (2.a) vs. (2.b) I'm not quite sure which is better.

Ideally we would support a situation, where old style usage can be recognized as such, flagged with a warning, and a quick fix is offered for updating the source corresponding to the new semantics.

Unfortunately, (2.a) doesn't support this, because each project can only refer to one set of annotations. 
When referring to version 1.x, we can flag a warning against annotations on an array or a var args element, but we cannot offer a quick fix, because the refactored code would be illegal without also switching to the new set of annotations.
Using version 2.x of the library we can no longer claim that all annotations in the dubious position should be migrated, they could as well be intentionally placed already using the new semantics of type annotations. I.e., raising a warning would be of little value.
-> In this setting all we can do is to provide a one-shot "migration script" that would explicitly update all dubious occurrences in a bulk operation per project. This places responsibility on the user to make sure the migration script is invoked exactly once per project, because the tool cannot know.

Option (2.b) introduces the burden to update all import statements for null annotations. By this price we buy the opportunity to explicitly manage the migration. Within the same project setup we can distinguish which annotations have been migrated, and which haven't.


In personal communication Michael Ernst suggested (so I understood) to already define the Java 7 semantics of these annotations with JSR 308 in mind, in order to establish compatibility of same-looking source code. This was voted down already in bug 365983. Does the above discussion change the picture of that discussion in bug 365983? I'm not pushing in that direction, just want to mention the alternatives which I see.

In all this it's only arrays and var args that introduce ambiguity. For all other occurrences the migration will be a no-op because old and new interpretation will be identical.
The immediate change for BETA_JAVA8 is that 2 tests have to be changed like

	((this.complianceLevel < ClassFileConstants.JDK1_8)
	 ? "    void foo(@NonNull Object ... o) {\n"
	 : "    void foo(Object @NonNull... o) {\n") +

This is to say: to test the same functionality, different test input must
be used.

The affected tests are in NullAnnotationTest:
 - test_nonnull_parameter_015()
 - test_nonnull_parameter_016()

Correspondingly, the error message uses different syntax referring to the same
type:
   ".. required @NonNull Object[]"
vs.
   ".. required Object @NonNull[]"
both to be read as: a non-null array of (unspecified) Object


The actual semantic change will follow in bug 392099 which is making good
progress.
With bug 392099 nearing completion, I think it is safe to say that clients
will need to migrate their code when moving to Java 8 with type annotations.

All var args declaration of this shape:

   @NonNull T ... arg

need to be changed to

   T @NonNull... arg

or the semantics will implicitly be changed.

Once bug 392099 is resolved I'll file a bug against JDT/UI to request some
migration support. My current feeling is: this migration should be an explicit
one-time action, where we don't even try to keep track, if the migration has
already been applied, leaving the responsibility entirely to the users.
Since we will be changing one legal form into another legal form I don't see
how we could analyse which locations still need migration and which are already
good.

Setting keyword 'noteworthy' since we'll need to announce this need for
migration.
(In reply to comment #5)
> Once bug 392099 is resolved I'll file a bug against JDT/UI to request some
> migration support.

This is now bug 415180.

The new interpretation of (TYPE_USE) null annotations on var args is now
available via bug 392099.
