I encountered this problem when I closed and reopened a Type Hierarchy view, but the scenario is not well reproducible because the E4 workbench is very unreliable (bug 430306).

Easier steps in the JavaElement View:

package jsr335.funint6;
import java.util.function.IntConsumer;
class Test {
    void foo() {
        IntConsumer c = (i) -> { };
    }
}

- set input to 'i' and then follow > PARENT > PARENT to get the LambdaExpression
- show Properties and copy the handleIdentifier. Mine is this:
=zz1.8/src<jsr335.funint6{Test.java[Test~foo)Lambda\(IntConsumer\)"Ljava.util.function.IntConsumer;!125!134!130
- open JavaElement View's view menu and run "Create from Handle..."
- try to re-create the copied handleIdentifier
=> fails when trying to access the children of the LambdaExpression element

The problem is that LambdaExpression is not prepared to be restored from a handle memento, since that doesn't restore its lambdaMethod field.

org.eclipse.jdt.internal.core.Member#getHandleFromMemento(..) does this:

LambdaExpression expression = new LambdaExpression(this, name, interphase, sourceStart, sourceEnd, arrowPosition);
if (!memento.hasMoreTokens() || (token = memento.nextToken()) != MementoTokenizer.LAMBDA_METHOD) 
	return expression;

The end of the called LambdaExpression constructor has a comment
// Method is in the process of being fabricated, will be attached shortly.
, but the lambdaMethod field is never initialized when the plain LambdaExpression is returned.

I guess the solution has to be that a LambdaExpression always stores the lambda method as well, but we have a different formatting for the LambdaExpression's handleIdentifier (e.g. an additional JEM_LAMBDA_EXPRESSION appended).

!ENTRY org.eclipse.e4.ui.workbench 4 0 2014-03-13 16:19:33.484
!MESSAGE 
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.JavaElement.getChildrenOfType(JavaElement.java:226)
	at org.eclipse.jdt.internal.core.SourceType.getMethods(SourceType.java:418)
	at org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabelComposer.isLambdaType(JavaElementLabelComposer.java:1099)
	at org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabelComposer.appendTypeLabel(JavaElementLabelComposer.java:987)
	at org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabelComposer.appendElementLabel(JavaElementLabelComposer.java:287)
	at org.eclipse.jdt.ui.JavaElementLabels.getElementLabel(JavaElementLabels.java:518)
	at org.eclipse.jdt.ui.JavaElementLabels.getElementLabel(JavaElementLabels.java:491)
	at org.eclipse.jdt.internal.ui.typehierarchy.HistoryAction.getShortLabel(HistoryAction.java:111)
	at org.eclipse.jdt.internal.ui.typehierarchy.HistoryAction.getElementLabel(HistoryAction.java:93)
	at org.eclipse.jdt.internal.ui.typehierarchy.TypeHierarchyViewPart.restoreState(TypeHierarchyViewPart.java:1697)
	at org.eclipse.jdt.internal.ui.typehierarchy.TypeHierarchyViewPart.createPartControl(TypeHierarchyViewPart.java:1006)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.createPartControl(CompatibilityPart.java:142)
...

I encountered this problem when I closed and reopened a Type Hierarchy view, but the scenario is not well reproducible because the E4 workbench is very unreliable (bug 430306).

Easier steps in the JavaElement View:

package jsr335.funint6;
import java.util.function.IntConsumer;
class Test {
    void foo() {
        IntConsumer c = (i) -> { };
    }
}

- set input to 'i' and then follow > PARENT > PARENT to get the LambdaExpression
- show Properties and copy the handleIdentifier. Mine is this:
=zz1.8/src<jsr335.funint6{Test.java[Test~foo)Lambda\(IntConsumer\)"Ljava.util.function.IntConsumer;!125!134!130
- open JavaElement View's view menu and run "Create from Handle..."
- try to re-create the copied handleIdentifier
=> fails when trying to access the children of the LambdaExpression element

The problem is that LambdaExpression is not prepared to be restored from a handle memento, since that doesn't restore its lambdaMethod field.

org.eclipse.jdt.internal.core.Member#getHandleFromMemento(..) does this:

LambdaExpression expression = new LambdaExpression(this, name, interphase, sourceStart, sourceEnd, arrowPosition);
if (!memento.hasMoreTokens() || (token = memento.nextToken()) != MementoTokenizer.LAMBDA_METHOD) 
	return expression;

The end of the called LambdaExpression constructor has a comment
// Method is in the process of being fabricated, will be attached shortly.
, but the lambdaMethod field is never initialized when the plain LambdaExpression is returned.

I guess the solution has to be that a LambdaExpression always stores the lambda method as well, but we have a different formatting for the LambdaExpression's handleIdentifier (e.g. an additional JEM_LAMBDA_EXPRESSION appended).

!ENTRY org.eclipse.e4.ui.workbench 4 0 2014-03-13 16:19:33.484
!MESSAGE 
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.JavaElement.getChildrenOfType(JavaElement.java:226)
	at org.eclipse.jdt.internal.core.SourceType.getMethods(SourceType.java:418)
	at org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabelComposer.isLambdaType(JavaElementLabelComposer.java:1099)
	at org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabelComposer.appendTypeLabel(JavaElementLabelComposer.java:987)
	at org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabelComposer.appendElementLabel(JavaElementLabelComposer.java:287)
	at org.eclipse.jdt.ui.JavaElementLabels.getElementLabel(JavaElementLabels.java:518)
	at org.eclipse.jdt.ui.JavaElementLabels.getElementLabel(JavaElementLabels.java:491)
	at org.eclipse.jdt.internal.ui.typehierarchy.HistoryAction.getShortLabel(HistoryAction.java:111)
	at org.eclipse.jdt.internal.ui.typehierarchy.HistoryAction.getElementLabel(HistoryAction.java:93)
	at org.eclipse.jdt.internal.ui.typehierarchy.TypeHierarchyViewPart.restoreState(TypeHierarchyViewPart.java:1697)
	at org.eclipse.jdt.internal.ui.typehierarchy.TypeHierarchyViewPart.createPartControl(TypeHierarchyViewPart.java:1006)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.createPartControl(CompatibilityPart.java:142)
...
(In reply to Markus Keller from comment #0)

> The problem is that LambdaExpression is not prepared to be restored from a
> handle memento, since that doesn't restore its lambdaMethod field.

[...]

> I guess the solution has to be that a LambdaExpression always stores the
> lambda method as well,

yes, 

 but we have a different formatting for the
> LambdaExpression's handleIdentifier (e.g. an additional
> JEM_LAMBDA_EXPRESSION appended).

Not sure I understand this comment.

I think this line is missing at the end of 
LambdaExpression.getHandleMemento(StringBuffer, boolean)


this.lambdaMethod.getHandleMemento(buff, false);
Please take a look, Thanks.
(In reply to Srikanth Sankaran from comment #1)

> I think this line is missing at the end of 
> LambdaExpression.getHandleMemento(StringBuffer, boolean)
> 
> 
> this.lambdaMethod.getHandleMemento(buff, false);

It may not be as simple as that, need to think about it.
(In reply to Srikanth Sankaran from comment #3)
> (In reply to Srikanth Sankaran from comment #1)
> 
> > I think this line is missing at the end of 
> > LambdaExpression.getHandleMemento(StringBuffer, boolean)
> > 
> > 
> > this.lambdaMethod.getHandleMemento(buff, false);
> 
> It may not be as simple as that, need to think about it.

I think both LambdaExpression and LambdaMethod need to provide methods

public void getHandleMemento(StringBuffer buff, boolean serializeParent,
                                                         serializeChild);

informing each other when they avoid serializing the other (to avoid
infinite recursion)
Created attachment 240872
Starting point

This shows how lambda can be serialized - the deserialization part is not
done. 

Untested, Jay take a look - this could be a starting point for the fix.
(In reply to Srikanth Sankaran from comment #5)
> Created attachment 240872 [details]
> Starting point
> 
> This shows how lambda can be serialized - the deserialization part is not
> done. 
> 
> Untested, Jay take a look - this could be a starting point for the fix.

This patch is on top of the changes made for https://bugs.eclipse.org/bugs/show_bug.cgi?id=430136

if you want to look at only the changes made for this bug, look
in LambdaExpression.getHandleMemento(StringBuffer, boolean, boolean) and
its callers.
(In reply to Srikanth Sankaran from comment #5)
> Created attachment 240872 [details]
> Starting point
> 
> This shows how lambda can be serialized - the deserialization part is not
> done. 

Deserialization is tricky - the memento should additionally encode whether
it is the memento for the parent or the child or else we won't know what
to return when deserializing - if this part is not clear, we can discuss
tomorrow.
Created attachment 240886
Fuller patch

Jay, please take a look at this patch.

This passes RunOnlyAssistModelTests and MementoTests.

I am running all tests now.

    - Code needs to be reviewed.
    - All modified tests need to be reviewed.
    - We need two more tests
        - one with nested lambda expressions to make sure that the
          inner one can be reconstructed from memento both as method and
          as type.
       - Another with say a local variable inside the the lambda as the
         focus items and we are able to reconstruct that and verify that
         its parent comes out as the lambda expression
(In reply to Srikanth Sankaran from comment #8)

Just to reiterate a point that has been made elsewhere - a lambda method
will not answer any nested types/lambdas as children.

Traversing upwards from a focus element will always any number of intervening
lambdas.

Traversing downwards from a lambda type will find the lambda method as child.
Traversing downwards from a lambda method will find the parameters and nothing
else.

Any changes to this scheme can be considered after GA.
(In reply to Srikanth Sankaran from comment #8)

> This passes RunOnlyAssistModelTests and MementoTests.
> 
> I am running all tests now.

All JDT/Core tests are green.

Jay, I didn't test the feature itself beyond writing a junit - please verify.
Markus, when select an element and alt + Enter (or right lick -> properties), when the properties view appears, it's blank. Doing it again populates the properties. Is it by design or do you see some issues there?
(In reply to Jayaprakash Arthanareeswaran from comment #11)
> when the properties view appears, it's blank.

Not by design. E4 bug 411704.
Created attachment 240901
Updated patch

Updated the patch with support to recreate the LocalVarialble inside the lambda as well. Tests are updated as well.

Srikanth, the rest of the changes look good to me. Please review the delta, so I can release the fix. The delta is local to LambdaExpression#getHandleFromMemento, inside the switch.
No, I don't think that is the correct approach. When we write a test with
nested lambdas as suggested in comment#8, it won't work. I'll shortly
share a patch.
I suspect the switch should read:

switch (memento.nextToken().charAt(0)) {
			case JEM_LAMBDA_METHOD:
				if (!memento.hasMoreTokens())
					return this.lambdaMethod;
				return this.lambdaMethod.getHandleFromMemento(memento, workingCopyOwner);
			case JEM_LAMBDA_EXPRESSION:
			default:
				return this;	
		}

i.e don't check for local variable's case explicitly. That way it should
work for nested children of any type be they lambda, class or local variable.


So , I would say the proof of the pudding is this test case where the element
being serialized and then deserialized is a local variable inside a lambda
which is inside a lambda which is inside a method inside a type.

If with the amendment suggested above this works as can be verified by a 
junit (or with suitable other changes it works, ) please go ahead and
release and resolve - Thanks Jay !
Thanks for the patch, Srikanth. Pushed the changes via commit:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=fd6aadcfaa6ea7e0174e1c47fdc6ce06626c6eea
