Place the following files in respective packages:
////////////////////////////////
package p4a;

@FunctionalInterface
public interface FI1<R> {
    public R foo1();
}

////////////////////////////////
package p4a;

@FunctionalInterface
public interface FI2 {
    public void foo2();
}
////////////////////////////////
package p4b;

import p4a.FI1;
import p4a.FI2;

public class Test {
	{
		FI1 fi1 = new FI1<FI2>() {
            @Override
            public FI2 foo1() {
                return new FI2() {
                    @Override
                    public void foo2() {}
                };
            }
        };
	}
}
////////////////////////////////

Apply clean-up on Test.java to use lambda where possible.
The result is:
////////////////////////////////
package p4b;

import p4a.FI1;

public class Test {
	{
		FI1 fi1 = () -> new FI2() {
		    @Override
		    public void foo2() {}
		};
	}
}
////////////////////////////////

The issues are:
- Only the outer anonymous class is converted to lambda
- Import statement for FI2 is removed.
- Hovering on FI2 in the resultant code does not provide the quick fix to import FI2.

Place the following files in respective packages:
////////////////////////////////
package p4a;

@FunctionalInterface
public interface FI1<R> {
    public R foo1();
}

////////////////////////////////
package p4a;

@FunctionalInterface
public interface FI2 {
    public void foo2();
}
////////////////////////////////
package p4b;

import p4a.FI1;
import p4a.FI2;

public class Test {
	{
		FI1 fi1 = new FI1<FI2>() {
            @Override
            public FI2 foo1() {
                return new FI2() {
                    @Override
                    public void foo2() {}
                };
            }
        };
	}
}
////////////////////////////////

Apply clean-up on Test.java to use lambda where possible.
The result is:
////////////////////////////////
package p4b;

import p4a.FI1;

public class Test {
	{
		FI1 fi1 = () -> new FI2() {
		    @Override
		    public void foo2() {}
		};
	}
}
////////////////////////////////

The issues are:
- Only the outer anonymous class is converted to lambda
- Import statement for FI2 is removed.
- Hovering on FI2 in the resultant code does not provide the quick fix to import FI2.
ASTRewrite in LambdaExpressionsFix.CreateLambdaOperation#rewriteAST contains both the events to convert both the anonymous classes to lambda (as in other nested anonymous cases where the target type is not raw). Also, the importRemover is updated correctly to remove FI2 import and hence it is removed from the result.
However, ASTRewrite converts only the outer anonymous class to lambda (the first event), which results in the issues mentioned in comment #0.
The quick fix to import FI2 should still be present.

Also note that if we use the quick assist to convert to lambda, after converting the outer anonymous class, we don't get the quick assist for inner anonymous class as the target type for inner anonymous class changes to 'Object' which is not a FI. Is this expected?

If we convert the inner anonymous class first and then the outer one using quick assist, we get compile error, which is bug 425412.
Raw types are discouraged, and it's OK if we don't treat them perfectly in 1.8 code.

(In reply to Noopur Gupta from comment #1)
> Also note that if we use the quick assist to convert to lambda, after
> converting the outer anonymous class, we don't get the quick assist for
> inner anonymous class as the target type for inner anonymous class changes
> to 'Object' which is not a FI. Is this expected?

Yes, there's nothing to convert without a FI.

(In reply to Noopur Gupta from comment #0)
> - Only the outer anonymous class is converted to lambda
Probably happens because we use

	lambdaExpression.setBody(rewrite.createCopyTarget(lambdaBody));

where lambdaBody is the expression of the outer anonymous' return statement. Then we try to replace the same node when converting the inner anonymous. It works fine if you add a second statement to the inner anonymous' method body.

We probably need some smartness to detect and resolve this conflict. E.g. a map from original lambdaBody to replacement node, and before we try to use rewrite.replace(..), we look up whether we actually have to replace a replacement node from a previous step.
(In reply to Noopur Gupta from comment #0)
> - Hovering on FI2 in the resultant code does not provide the quick fix to
> import FI2.

Can you please file a bug for JDT Core for this? Our org.eclipse.jdt.internal.ui.text.correction.SimilarElementsRequestor#findSimilarElement(ICompilationUnit, Name, int) does get an anonymous class completion proposal with the caret after the first "new FI2" here, but not after the second one inside the lambda:

		new FI2() {};
		FI1 fi1 = () -> new FI2() {
		    @Override
		    public void foo2() {}
		};
Examples from JavaFX source code where this issue occurs on applying the cleanup:

- com.sun.javafx.collections.ElementObservableListDecorator<E>
- com.sun.javafx.collections.ObservableListWrapper<E>
(In reply to Markus Keller from comment #3)
> (In reply to Noopur Gupta from comment #0)
> > - Hovering on FI2 in the resultant code does not provide the quick fix to
> > import FI2.
> 
> Can you please file a bug for JDT Core for this? 
Filed bug 435281.
(In reply to Markus Keller from comment #2)
> works fine if you add a second statement to the inner anonymous' method body.

It works if we add another statement to the *outer* anonymous' method body.

However, the conversion results in a compile error which is same as mentioned in comment #1 and will be fixed with bug 425412.

Also, see bug 436834 comment #1, where the reverse conversion works only if the body of outer lambda is converted to a block.
Created attachment 245601
Fix + Test

The patch checks the list of classInstanceCreation nodes to be converted to lambda and if there is going to be a clash then it retains the lambda body as block itself (instead of the short form lambda body) to prevent the problem.

Markus, please have a look.
*** Bug 436834 has been marked as a duplicate of this bug. ***
Created attachment 245799
Fix+Test

The patch fixes the current bug and bug 436834.
Also, updated the conflicting variable names fix and test accordingly.
Released with: 
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=d348277af54dfc97eb2ad63fe235b14c3420ca80
