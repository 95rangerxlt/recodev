Build ID: M20080911-1700

Steps To Reproduce:
Type some code like this:

NavigableSet<?> set = ...
for (Iterator<?> it = set.descendingIterator(); it.hasNext();) {
  Object element = it.next();
  System.out.println(element);
}

Run the "Convert for loops to enhanced" code cleanup.

You get:

for (Object element : set) {
  System.out.println(element);
}

But this iterates through the elements of set in ascending order, when the original code went in descending order.

More information:
Probably the code that detects whether enhanced for-loop conversion is possible should verify that the Iterator is being obtained through a call to Iterable.iterator() and not some other method like NavigableSet.descendingIterator().

Build ID: M20080911-1700

Steps To Reproduce:
Type some code like this:

NavigableSet<?> set = ...
for (Iterator<?> it = set.descendingIterator(); it.hasNext();) {
  Object element = it.next();
  System.out.println(element);
}

Run the "Convert for loops to enhanced" code cleanup.

You get:

for (Object element : set) {
  System.out.println(element);
}

But this iterates through the elements of set in ascending order, when the original code went in descending order.

More information:
Probably the code that detects whether enhanced for-loop conversion is possible should verify that the Iterator is being obtained through a call to Iterable.iterator() and not some other method like NavigableSet.descendingIterator().
Move to JDT/UI
Sorry but we won't fix those cases.
Your WONTFIX response boggles my mind.  The Code Cleanup is changing the semantics of the code, and you won't fix it.  Now I wonder whether I should be using Code Cleanup at all, if it's considered acceptable for it to alter the meaning of my code.  At the very least, I can never enable the "enhanced for-loop conversion" again, since it breaks code.  Where's your integrity?
Yes, we could check the name but this would result in blocking all other clients which have methods (like getMyIterator()) that return the correct iterator. If you can provide code that correctly makes the check please be my guest.
(In reply to comment #4)
> Yes, we could check the name but this would result in blocking all other
> clients which have methods (like getMyIterator()) that return the correct
> iterator. If you can provide code that correctly makes the check please be my
> guest.
> 

From the Java Language Specification, Third Edition, section 14.14.2:

> If the type of Expression is a subtype of Iterable, then let I be the type of
> the expression Expression.iterator(). The enhanced for statement is equivalent
> to a basic for statement of the form:
> 
> for (I #i = Expression.iterator(); #i.hasNext(); ) {
> 
>         VariableModifiersopt Type Identifier = #i.next();
>    Statement
> }

http://java.sun.com/docs/books/jls/third_edition/html/statements.html#14.14.2

Therefore, obtaining an iterator by calling any method other than Iterable.iterator() cannot be expressed using enhanced for-loop syntax, by definition.
Ah, you're right. We wanted to be too clever to handle more cases.
Fixed in HEAD.
Available in builds > N20090115-2000.
