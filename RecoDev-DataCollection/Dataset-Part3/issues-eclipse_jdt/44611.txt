The "Extract Interface" refactoring sometimes produces dummy declarations
of local variables. This seems to happen in the presence of multiply nested
loops, and there appears to be some nondeterminism involved.

In the following program, try extracting the second nested for loop into
a method fff()

import java.util.*;

public class Bug {

	private static Vector currentClasses;
	private static Vector currentMethods;
	private static Vector processedMethods;
	
	public static void f(){
		
	while (true){	
		
		for (int i = 0; i < currentClasses.size(); i++) {
				String T = (String) currentClasses.elementAt(i);
			}
		
		for (Iterator it = currentMethods.iterator(); it.hasNext();) {
				 Dummy m = (Dummy) it.next();
				 m.x();
				 m.y();
				 processedMethods.add(m);
		}
	}
	}

	static class Dummy {
		void x(){}
		void y(){} 
	}
}

This is refactored to:

import java.util.*;

public class Bug {

	private static Vector currentClasses;
	private static Vector currentMethods;
	private static Vector processedMethods;
	
	public static void f(){
		
	while (true){	
		
		for (int i = 0; i < currentClasses.size(); i++) {
				String T = (String) currentClasses.elementAt(i);
			}
		
		Dummy m;
		fff();
	}
	}

	private static void fff() {
		for (Iterator it = currentMethods.iterator(); it.hasNext();) {
				 Dummy m = (Dummy) it.next();
				 m.x();
				 m.y();
				 processedMethods.add(m);
		}
	}

	static class Dummy {
		void x(){}
		void y(){} 
	}
}

Note the redundant declaration of local variable m.

Have fun :-)
  -Frank

The "Extract Interface" refactoring sometimes produces dummy declarations
of local variables. This seems to happen in the presence of multiply nested
loops, and there appears to be some nondeterminism involved.

In the following program, try extracting the second nested for loop into
a method fff()

import java.util.*;

public class Bug {

	private static Vector currentClasses;
	private static Vector currentMethods;
	private static Vector processedMethods;
	
	public static void f(){
		
	while (true){	
		
		for (int i = 0; i < currentClasses.size(); i++) {
				String T = (String) currentClasses.elementAt(i);
			}
		
		for (Iterator it = currentMethods.iterator(); it.hasNext();) {
				 Dummy m = (Dummy) it.next();
				 m.x();
				 m.y();
				 processedMethods.add(m);
		}
	}
	}

	static class Dummy {
		void x(){}
		void y(){} 
	}
}

This is refactored to:

import java.util.*;

public class Bug {

	private static Vector currentClasses;
	private static Vector currentMethods;
	private static Vector processedMethods;
	
	public static void f(){
		
	while (true){	
		
		for (int i = 0; i < currentClasses.size(); i++) {
				String T = (String) currentClasses.elementAt(i);
			}
		
		Dummy m;
		fff();
	}
	}

	private static void fff() {
		for (Iterator it = currentMethods.iterator(); it.hasNext();) {
				 Dummy m = (Dummy) it.next();
				 m.x();
				 m.y();
				 processedMethods.add(m);
		}
	}

	static class Dummy {
		void x(){}
		void y(){} 
	}
}

Note the redundant declaration of local variable m.

Have fun :-)
  -Frank
i think you mean 'extract method', correct? :)
The problem comes from the flow analysis and the fact the loop reentrance has 
to be considered in this case. Have to further investigate. 
Fixed for M5.
