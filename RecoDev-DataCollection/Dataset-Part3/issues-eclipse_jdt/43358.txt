20030916

When I add a javadoc reference to toString() for a class and then format
I get a flattened version.

The javadoc generated by content assist reads:

  /* (non-Javadoc)
   * @see java.lang.Object#toString()
   */

Whereas formatted it becomes 

/* (non-Javadoc) @see java.lang.Object#toString() */

20030916

When I add a javadoc reference to toString() for a class and then format
I get a flattened version.

The javadoc generated by content assist reads:

  /* (non-Javadoc)
   * @see java.lang.Object#toString()
   */

Whereas formatted it becomes 

/* (non-Javadoc) @see java.lang.Object#toString() */
Java editor uses a different formatter for the javadoc comment.
Move to JDT/UI for comment.
Tobias, you already have a similar PR. Please close as duplicate if it also
handles the described case.
No, this one is new. The problem we are facing here are the code generation 
templates. Unfortunately there is no nice general solution to this problem:

- Checking each multi-line comment for a potential expanded code template is 
expensive and inexact, or even infeasible.

- Making this template a special case does not work either, since other users 
may altered the template. By the way, without the unnecessary (non-Javadoc), 
the comment gets formatted correctly.

Possible solutions are:

- Format multi-line comments with Javadoc tags like Javadoc comments. This 
would result in a blank line before the @see tag, if the preference to 
separate the Javadoc tag block is enabled. This solution would also cover 
comment templates for classes.

- Introducing a tag variable for the code templates like ${todo}. This tag 
could be freely defined and positioned anywhere in the comment. The formatter 
is then able to skip those comments with this tag inside. The disadvantage is 
that the tag possibly introduces a nameclash.

Any opinion on this?
Disabling the preference "Empty line before Javadoc tag block" now formats 
this template correctly.

The mechanism to recognize Javadoc tags has been moved to multi-line comments 
as well to better support the code generation templates.
Fixed I20031007
Verified
