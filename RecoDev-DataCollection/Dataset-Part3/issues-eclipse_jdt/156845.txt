From bug 155435:

- have the CU below
- invoke content assist at the caret (|)
< expected: the CompletionContext::getExpectedTypesKeys() returns a parameterized type binding for java.util.Stack. binding.getTypeArguments() returns an array of size one and a binding for the local type L.

> actual: The type binding for the type argument is p.T instead of L

-------- T.java -----------
package p;
import java.util.Stack;
public class T {
  void m() {
    final class L {
    }
    final Stack<L> stack = new |
    }
}
---------------------------

From bug 155435:

- have the CU below
- invoke content assist at the caret (|)
< expected: the CompletionContext::getExpectedTypesKeys() returns a parameterized type binding for java.util.Stack. binding.getTypeArguments() returns an array of size one and a binding for the local type L.

> actual: The type binding for the type argument is p.T instead of L

-------- T.java -----------
package p;
import java.util.Stack;
public class T {
  void m() {
    final class L {
    }
    final Stack<L> stack = new |
    }
}
---------------------------
The description of the problem in comment 0 isn't fully exact.

CompletionContext#getExpectedTypesKeys() doesn't return a binding but a binding key and this key is correct (Ljava/util/Stack<Lp/T$85$L;>;).
Then LazyGenericTypeProposal#getExpectedType() use this key to create a binding.
To create this binding an ASTParser is used and the statement recovery of this parser is not enabled.
As the method which contains the class 'L' also contains a syntax error then the AST of the class 'L' isn't created and the ASTParser fails to create the binding.

To fix this bug the statement recovery should be enabled in LazyGenericTypeProposal#getExpectedType().

Moving to JDT/Text.


Thanks David for tracking this down.
