PR 1GLEVO4

CASE 1: 
1) Create two Java projects  Project1  and Project2
2) Make the .classpath file for  Project1 read-only  (RMB on .classpath file, 
choose Properties, check read only)
3) Update Project1's Java Build Path to include Project2  (RMB on Project1, 
choose Properties, choose Java Build Path, choose Projects tab)
4) To the user it looks like this has occurred without problem (it's still in 
Project1's Java Build Path, and calls to the JavaModel return the correct 
information)
but since the .classpath file is read-only, this change has never occured).  At 
this point we believe the user should have been told that the
file could not be updated.
5) Bring down the workbench and bring it back up, and it is no longer in  
Project1's Java Build Path.


CASE 2: 
Here is another scenario (which I have not verified, but it seems right): 

The programmer creates a new project called ABC and does not chose to use the 
default directory. Instead, he 
points to the directory in Clearcase containing the existing project files.

As part of the Java project create, it creates a new .classpath file. It does 
not look to see if there is an 
existing .classpath file (where in this case there is and its read-only). 
Because we are talking about a 
Clearcase controlled directory, the project create process results in a private 
read-write copy of the .classpath 
file being created. So now the newly created project sees a virgin .classpath 
file, not the one that was already there.

PROPOSED SOLUTION:   If an existing .classpath file is detected, ask if it 
should be used before creating a new one.

This is from a critical customer

PR 1GLEVO4

CASE 1: 
1) Create two Java projects  Project1  and Project2
2) Make the .classpath file for  Project1 read-only  (RMB on .classpath file, 
choose Properties, check read only)
3) Update Project1's Java Build Path to include Project2  (RMB on Project1, 
choose Properties, choose Java Build Path, choose Projects tab)
4) To the user it looks like this has occurred without problem (it's still in 
Project1's Java Build Path, and calls to the JavaModel return the correct 
information)
but since the .classpath file is read-only, this change has never occured).  At 
this point we believe the user should have been told that the
file could not be updated.
5) Bring down the workbench and bring it back up, and it is no longer in  
Project1's Java Build Path.


CASE 2: 
Here is another scenario (which I have not verified, but it seems right): 

The programmer creates a new project called ABC and does not chose to use the 
default directory. Instead, he 
points to the directory in Clearcase containing the existing project files.

As part of the Java project create, it creates a new .classpath file. It does 
not look to see if there is an 
existing .classpath file (where in this case there is and its read-only). 
Because we are talking about a 
Clearcase controlled directory, the project create process results in a private 
read-write copy of the .classpath 
file being created. So now the newly created project sees a virgin .classpath 
file, not the one that was already there.

PROPOSED SOLUTION:   If an existing .classpath file is detected, ask if it 
should be used before creating a new one.

This is from a critical customer
tested on build 2002-01-29 on Win98.

Case 1:
Works ok. An exception is thrown saying that the current classpath file is read-
only.

Case 2:
The existing classpath file is automatically overwritten.
Steps:
- create directory c:\temp\zzz
- create file c:\temp\zzz\.classpath (r/w, and with random contents)
- create Java project in Eclipse and point the content area to c:\temp\zzz
- open .classpath file and note that it contains the eclipse classpath and not 
the original contents.

Moving to JDT/Core for comment.
Sorry, moving to JUI since that is where the original PR resides.
Can JDT core check when it configures the nature whether a .classpath file 
already exists? When there is a .classpath file then it should be reused.

We cannot do this at project creation in the wizard easily. 
Actually, a project configuration does not cause to read its classpath in, 
however when opening it, we will go and read its classpath from the file 
system, which is exactly what you need here.

However the UI code never reads the project previous classpath, and simply 
assign a new one (note: IJavaProject.getRawClasspath() should be able to 
perform even if the project doesn't exist yet, by reading the .classpath file 
if it exists...).

The UI wizard (BuildPathsBlock) should be creating a project, configuring it, 
then ask it to read its classpath (it will answer a default one if none is 
available at this point).

The read classpath should be used to initialize the wizard path from this point 
on.

Back to UI

*** Bug 8817 has been marked as a duplicate of this bug. ***
Actually the faulty code is: NewJavaProjectWizardPage, it should initialize the 
BuildPathsBlock with the classpath read from the newly created project handle.
IJavaProject.getRawClasspath specifies that it throws an JavaModelException if 
the element does not exist.
I think this makes sense, as the project description (specifying the project 
location) can't be set before creating the project. The project location is 
needed to find the .classpath file.

To access the information in the .classpath file before the project is created, 
I would need a public readClasspathFile(IPath projectLocation) : IClasspathEntry
[] method
I'm not sure if this is the right way to go. Shouldn't we go for a 'import 
project' functionallity to load existing projects to the workspace?


The spec was incorrect, if the project isn't opened, then it will hunt for 
the .classpath file content directly, and if none, then it will suppy an empty 
classpath (default). It is a handle operation.

The buildpath wizard should always default to the Java project's raw classpath.

We could argue that if the .classpath file isn't found it shouldn't answer a 
default classpath maybe so that UI would know to provide its defaults ?
fixed with the new capability wizards.
When creating a project on a location that already contains a .classpath file, 
this classpath is taken. If no .classpath file exists, the default class path 
(as specified in the Java preference) is set.

> 20020328
