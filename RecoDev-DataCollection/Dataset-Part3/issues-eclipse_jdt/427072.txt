We don't compile this code anymore:

// --
interface I {
    Object m(X t);
}
interface J extends I {
}
class X {
    int foo()  { return 0; }
    int test() {
        return foo(X::foo);
    }
    int foo(I i) {return 0;}
    int foo(J j) { return 1;}
}

We don't compile this code anymore:

// --
interface I {
    Object m(X t);
}
interface J extends I {
}
class X {
    int foo()  { return 0; }
    int test() {
        return foo(X::foo);
    }
    int foo(I i) {return 0;}
    int foo(J j) { return 1;}
}
I have this under control, know the problem, have a fix. Will take over.
Thanks.
When you testing the fix, please consider this slightly different test case as well:

    int foo1()  { return 0; }
    int foo2()  { return 0; }
    int test(boolean b) {
        return foo(b ? X::foo1 : X::foo2);
    }

Note the ternary in this code.
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=e6d1c8eac73b65997182b9feaba7e190099afd1a.

Note to self: Write junits for even obviously correctly functioning code,
not just for where we need to discriminate based on the new spec :(
