Eclipse build id 200403261517 (3.0M8 I think) on Windows 2000SP4, JDK 1.4.2_04.
Using vmarg parameters: -Xms64M -Xmx640M (1,7Ghz Celeron with 512MB physical 
RAM)

I noticed that in some cases the compare dialog in the junit view shows after a 
large pause and use a lot of memory. I try to create a reproducable test case:

public class JUnitCompareTest extends TestCase
{
    private String getString1()
    {
        return "123456789012345678901234567890";
    }

    private String getString2()
    {
        return "098765432109876543210987654321";
    }

    public void testCompare1() throws Exception
    {
        assertEquals(getString1(), getString2());
    }

    public void testCompare50() throws Exception
    {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 50; i++)
        {
            buf.append(getString1());
            buf.append("\r\n");
        }
        String s1 = buf.toString();
        buf = new StringBuffer();
        for (int i = 0; i < 50; i++)
        {
            buf.append(getString2());
            buf.append("\r\n");
        }
        String s2 = buf.toString();        
        
        assertEquals(s1, s2);
    }

    public void testCompare100() throws Exception
    {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 100; i++)
        {
            buf.append(getString1());
            buf.append("\r\n");
        }
        String s1 = buf.toString();
        buf = new StringBuffer();
        for (int i = 0; i < 100; i++)
        {
            buf.append(getString2());
            buf.append("\r\n");
        }
        String s2 = buf.toString();        
        
        assertEquals(s1, s2);
    }

    public void testCompare150() throws Exception
    {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 150; i++)
        {
            buf.append(getString1());
            buf.append("\r\n");
        }
        String s1 = buf.toString();
        buf = new StringBuffer();
        for (int i = 0; i < 150; i++)
        {
            buf.append(getString2());
            buf.append("\r\n");
        }
        String s2 = buf.toString();        
        
        assertEquals(s1, s2);
    }
}

Using this test case in the above mentioned configuration I got the following 
data (data is from "VM size" in the Windows Task Manager which is roughly 
correct but I think it illustrates the problem well). The first value is the VM 
size before showing the compare dialog, the second value is the VM size after 
the dialog displays, and the third value is the 'display time'.

Get popup for testCompare1():   158912 -> 159408 ( < 1s)
Get popup for testCompare50():  159376 -> 202908 ( ~ 3s)
Get popup for testCompare100(): 173352 -> 440496 ( ~ 10s)
Get popup for testCompare150(): 156476 -> 731304 (kill Eclipse after 5 minute)

I suspect the problem is with there are many differences to create (because a 
150-line difference where there will be 2 diff/line shows up < 1s). It would be 
nice to have an option to not creates these diffs only shows the text with only 
the colors for indicating the differences.

Regards,
Csaba

Eclipse build id 200403261517 (3.0M8 I think) on Windows 2000SP4, JDK 1.4.2_04.
Using vmarg parameters: -Xms64M -Xmx640M (1,7Ghz Celeron with 512MB physical 
RAM)

I noticed that in some cases the compare dialog in the junit view shows after a 
large pause and use a lot of memory. I try to create a reproducable test case:

public class JUnitCompareTest extends TestCase
{
    private String getString1()
    {
        return "123456789012345678901234567890";
    }

    private String getString2()
    {
        return "098765432109876543210987654321";
    }

    public void testCompare1() throws Exception
    {
        assertEquals(getString1(), getString2());
    }

    public void testCompare50() throws Exception
    {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 50; i++)
        {
            buf.append(getString1());
            buf.append("\r\n");
        }
        String s1 = buf.toString();
        buf = new StringBuffer();
        for (int i = 0; i < 50; i++)
        {
            buf.append(getString2());
            buf.append("\r\n");
        }
        String s2 = buf.toString();        
        
        assertEquals(s1, s2);
    }

    public void testCompare100() throws Exception
    {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 100; i++)
        {
            buf.append(getString1());
            buf.append("\r\n");
        }
        String s1 = buf.toString();
        buf = new StringBuffer();
        for (int i = 0; i < 100; i++)
        {
            buf.append(getString2());
            buf.append("\r\n");
        }
        String s2 = buf.toString();        
        
        assertEquals(s1, s2);
    }

    public void testCompare150() throws Exception
    {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 150; i++)
        {
            buf.append(getString1());
            buf.append("\r\n");
        }
        String s1 = buf.toString();
        buf = new StringBuffer();
        for (int i = 0; i < 150; i++)
        {
            buf.append(getString2());
            buf.append("\r\n");
        }
        String s2 = buf.toString();        
        
        assertEquals(s1, s2);
    }
}

Using this test case in the above mentioned configuration I got the following 
data (data is from "VM size" in the Windows Task Manager which is roughly 
correct but I think it illustrates the problem well). The first value is the VM 
size before showing the compare dialog, the second value is the VM size after 
the dialog displays, and the third value is the 'display time'.

Get popup for testCompare1():   158912 -> 159408 ( < 1s)
Get popup for testCompare50():  159376 -> 202908 ( ~ 3s)
Get popup for testCompare100(): 173352 -> 440496 ( ~ 10s)
Get popup for testCompare150(): 156476 -> 731304 (kill Eclipse after 5 minute)

I suspect the problem is with there are many differences to create (because a 
150-line difference where there will be 2 diff/line shows up < 1s). It would be 
nice to have an option to not creates these diffs only shows the text with only 
the colors for indicating the differences.

Regards,
Csaba
The compare dialog is using character level comparison and the algorithm is 
O(nd) [d = number of differences]. 

Possible solution: only use character level diffs for short strings, otherwise 
use word level diffs.

The other solution is to diff on demand as you have suggested, but this isn't 
supported by the compare infrastructure (and will not be added for 3.0)
implemented solution to use character level diff for strings < 100 ortherwise 
use a token based diff.

With this change the compare dialog opens immediatly even for the test150().
