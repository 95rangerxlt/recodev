Currently, Java Editor has a spell check feature through

org.eclipse.jdt.internal.ui.text.spelling.engine.DefaultSpellChecker
org.eclipse.jdt.internal.ui.text.spelling.SpellCheckEngine

Since we have another spell check engine, we would like to use this
engine for JavaEditor as well. So we need a mechanism to replace
the built-in Spell Check engine with our own spell check engine.

.

Currently, Java Editor has a spell check feature through

org.eclipse.jdt.internal.ui.text.spelling.engine.DefaultSpellChecker
org.eclipse.jdt.internal.ui.text.spelling.SpellCheckEngine

Since we have another spell check engine, we would like to use this
engine for JavaEditor as well. So we need a mechanism to replace
the built-in Spell Check engine with our own spell check engine.

.
We plan to push down spell checking and make it available for other editors as
well. This will be the time to open it up. There's no plan on simply open up the
current internal JDT Text spell checking.

What's the API of your engine i.e. what does it support? I assume it also has a
preference page, right? Does the engine simply check words or is it aware of the
Java code e.g. can it detect (and ignore) Java symbols?

I can give you where you can get api reference, function refernece, etc.
This information can't be put here because it's confidential information.
You can send me a note if you need to know it.
.
A Spelling API under construction is available in 3.1M4, please provide your
feedback in this problem report. From the buildnotes:

- added Spelling API to org.eclipse.ui.workbench.texteditor plug-in:
	- The API is still under construction, provide feedback in
	  https://bugs.eclipse.org/bugs/show_bug.cgi?id=77353.
	- New package: org.eclipse.ui.texteditor.spelling
	- New extension-point:
	  org.eclipse.ui.workbench.texteditor.spellingEngine
	- A spelling client can spell-check a document by calling
	  SpellingService#check(IDocument document, IRegion[] regions, SpellingContext
context, ISpellingProblemCollector collector, IProgressMonitor monitor).
	  The supplied SpellingContext allows the spelling engine to determine
	  settings specific to this check. Each spelling error is reported to
	  the supplied ISpellingProblemCollector as SpellingProblem.
	  For example, see
org.eclipse.jdt.internal.ui.text.spelling.JavaSpellingReconcileStrategy
	  and
org.eclipse.jdt.internal.ui.text.spelling.JavaSpellingReconcileStrategy.SpellingProblemCollector.
	- The org.eclipse.ui.editors plug-in provides access to a system-wide
	  instance of SpellingService with
	  org.eclipse.ui.editors.text.EditorsUI#getSpellingService()
	  and registers a preference page for configuring the SpellingService's
	  and the spelling engines' preferences. The SpellingService's
	  preferences are whether spelling is enabled and which spelling engine
	  is used. (The spelling preference page shows a combo box for chosing
	  the used engine only if more than one engine is present.)
	  See org.eclipse.ui.texteditor.spelling.SpellingService and
	  the General > Editors > All Text Editors > Spelling preference page.
	- A spelling engine implementer must implement ISpellingEngine and
	  extend the org.eclipse.ui.workbench.texteditor.spellingEngine
	  extension-point. The implementation of
	  ISpellingEngine#check(IDocument document, IRegion[] regions, SpellingContext
context, ISpellingProblemCollector collector, IProgressMonitor monitor)
	  reports any spelling errors to the given ISpellingProblemCollector as
	  SpellingProblem. Note that the engine must not call
	  ISpellingProblemCollector#beginReporting() or
	  ISpellingProblemCollector#endReporting() as this is done by the
	  spelling infrastructure.
	  For example, see
	  org.eclipse.jdt.internal.ui.text.spelling.DefaultSpellingEngine
	  and org.eclipse.jdt.internal.ui.text.spelling.JavaSpellingProblem.
	- A spelling engine implementer can implement ISpellingPreferenceBlock
	  and specify the implementing class with the extension.
	  An ISpellingPreferenceBlock provides a UI for preferences specific to
	  the spelling engine. If the user-supplied preference values are not
	  valid, the preference block should notify the IPreferenceStatusMonitor
	  it received on
	  ISpellingPreferenceBlock#initialize(IPreferenceStatusMonitor), such
	  that the containing preference page can provide corresponding
	  indication to the user. For example, see
	  org.eclipse.jdt.internal.ui.preferences.SpellingPreferenceBlock and
	  the General > Editors > All Text Editors > Spelling preference page.
	- Extension specification example from the org.eclipse.jdt.ui plug-in's
	  plugin.xml:
<extension point="org.eclipse.ui.workbench.texteditor.spellingEngine">
    <engine
        preferencesClass=
            "org.eclipse.jdt.internal.ui.preferences.SpellingPreferenceBlock"
        label="%defaultSpellingEngine.label"
        class="org.eclipse.jdt.internal.ui.text.spelling.DefaultSpellingEngine"
        default="true"
        id="org.eclipse.jdt.internal.ui.text.spelling.DefaultSpellingEngine">
    </engine>
</extension>

Regarding the requested feedback: please not that the API will be frozen with
3.1 M6.
(In reply to comment #4)
> Regarding the requested feedback: please not that the API will be frozen with
> 3.1 M6.
The API seems robost, but it seems like a lot of work to take an existing
spelling engine and use it in a custom editor. I'd like to use the default
TextSpellingEngine in my multi-page editor, except that I only want it applied
to certain partitions, as defined by RuleBasedPartitionScanner scanner. It does
not seem like this is doable without re-writing a lot of code.
True. Unfortunately support to build spell checking into text editors had to be
deferred after 3.1.
