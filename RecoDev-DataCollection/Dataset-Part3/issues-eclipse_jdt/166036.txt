Using 3.3M3, I create an IClasspathAttribute with JavaCore.newClasspathAttribute() and then add a jar file to a project's build path with this attribute. The .classpath then looks like this:

<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="src" path="src"/>
	<classpathentry kind="con" path="org.eclipse.ajdt.core.ASPECTJRT_CONTAINER"/>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
	<classpathentry kind="lib" path="out.jar">
		<attributes>
			<attribute name="org.eclipse.ajdt.aspectpath" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="output" path="bin"/>
</classpath>

But if I then make some change to the build page via the properties pages, such as add another jar file to the classpath, when the .classpath is updated, the attribute disappears:

<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="src" path="src"/>
	<classpathentry kind="con" path="org.eclipse.ajdt.core.ASPECTJRT_CONTAINER"/>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
	<classpathentry kind="lib" path="out.jar"/>
	<classpathentry kind="lib" path="out2.jar"/>
	<classpathentry kind="output" path="bin"/>
</classpath>

This problem has also been mentioned in the jdt newsgroup recently, but I couldn't find an existing bug for it.

Using 3.3M3, I create an IClasspathAttribute with JavaCore.newClasspathAttribute() and then add a jar file to a project's build path with this attribute. The .classpath then looks like this:

<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="src" path="src"/>
	<classpathentry kind="con" path="org.eclipse.ajdt.core.ASPECTJRT_CONTAINER"/>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
	<classpathentry kind="lib" path="out.jar">
		<attributes>
			<attribute name="org.eclipse.ajdt.aspectpath" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="output" path="bin"/>
</classpath>

But if I then make some change to the build page via the properties pages, such as add another jar file to the classpath, when the .classpath is updated, the attribute disappears:

<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="src" path="src"/>
	<classpathentry kind="con" path="org.eclipse.ajdt.core.ASPECTJRT_CONTAINER"/>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
	<classpathentry kind="lib" path="out.jar"/>
	<classpathentry kind="lib" path="out2.jar"/>
	<classpathentry kind="output" path="bin"/>
</classpath>

This problem has also been mentioned in the jdt newsgroup recently, but I couldn't find an existing bug for it.
I think the problem is when JDT/UI is updating the classpath, it is not preserving custom attributes. In org.eclipse.jdt.internal.ui.wizards.buildpaths.CPListElement the createFromExisting() method creates a CPListElment from a IClasspathEntry to form the new build path. This method iterates over the attributes and then calls elem.setAttribute() which in turn calls findAttributeElement() but this method only handles known attributes, which are instances of CPListElementAttribute. Other attributes are therefore lost at this point.
*** Bug 166218 has been marked as a duplicate of this bug. ***
fixed > 20061205

At the same time I added a new extension point that allows you to define how custom classpath attributes are rendered and configured in the build path dialog.
What I think is still an open question: How do custom attributes get added to a classpath entry.

Matt and Rafael, do you need support for that on the build path page?

(In reply to comment #3)
> At the same time I added a new extension point that allows you to define how
> custom classpath attributes are rendered and configured in the build path
> dialog.

Martin, what is going to happend if this extension point is not available?
Are those attributes going to be shown, maybe read only?

> What I think is still an open question: How do custom attributes get added to a
> classpath entry.
> Matt and Rafael, do you need support for that on the build path page?

I can't say for Matt and Rafael, but I can think of some use for that in my own plugins. 
Also, in some simple cases this would allow to get away without using custom configuration pages in the project properties dialog.
(In reply to comment #3)
> At the same time I added a new extension point that allows you to define how
> custom classpath attributes are rendered and configured in the build path
> dialog.

By the way, while we are on the topic, can this extension point used to replace or override existing editing dialogs? 

For example, I have custom mechanism for resolving sources and javadoc locations based on Maven metadata. So, I would like to disable existing source and javadoc editing dialogs or replace them with a wizard that would instead edit the Maven metadata.
With my latest change, all custom attributes are shown and if no classpathAttributeConfiguration is available (the new extension point) tyey are shown as 'name: value' with a default image and not modifiable.
As these unformatted custom entries look rather ugly, the alternative is to filter such attributes and I'm tempted to do so.

I haven't planed to allow the existing selection dialogs to be replaced, and I haven't seen such a request yet (until just now :-)). The question is, is everything done with replaced selection dialogs? Or do you waht to preventy certain other entries (classpath variables), need custom classpath validation, ect. My guess is you do, so either we provide a fully customizable build path dialog or you have your own implementation. We don't have the time planed for the first.

I just changed the code to filter out classpath attributes as long as no classpathAttributeConfiguration is available (in I20061205)
Re: comment 3: "What I think is still an open question: How do custom attributes get added to a classpath entry. (...) do you need support for that on the build path page?"

Martin, I currently apply the changes to the classpath in an ad-hoc way, using an action that shows on Java projects. For now, we could live without a UI for manipulating the attributes. That would be cool though.
Martin, thanks for the fix and the new extension point. I agree that filtering out the attributes is the best default. We're looking at using attributes to indicate which classpath entries are also on the AspectJ aspect-path and in-path (for binary weaving of aspects). We currently have our own property pages for the configuration of this, but we will look at using this new extension point.

