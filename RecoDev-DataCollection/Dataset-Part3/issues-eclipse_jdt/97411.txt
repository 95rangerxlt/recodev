I20050527-1300

public class Try {
	private static final class Color {
		private Color(String name) {}
	}
	void usage() {
		Color c= new Color("ultrared");
	}
}

Applying "Move Member Type to New File" to Color gives a warning that the
visibility of type Color will be changed to default. However, the visibility of
the private constructor is not changed, which leads to a compile error.

Interestingly, there's not warning at all if Color is not "static".

Such examples can easily be reproduced by converting an anonymous class to a
nested class (e.g. new TestCase() {...} in TestSuite#warning(String)).

I20050527-1300

public class Try {
	private static final class Color {
		private Color(String name) {}
	}
	void usage() {
		Color c= new Color("ultrared");
	}
}

Applying "Move Member Type to New File" to Color gives a warning that the
visibility of type Color will be changed to default. However, the visibility of
the private constructor is not changed, which leads to a compile error.

Interestingly, there's not warning at all if Color is not "static".

Such examples can easily be reproduced by converting an anonymous class to a
nested class (e.g. new TestCase() {...} in TestSuite#warning(String)).
Annoying but not critical. In the past we didn't do visibility updating at all.
Postpone > 3.1
Fixed in HEAD > 20051018
Verified in I20051031-2000.
Reopening.

The fix in I20051031-2000 seems to think that every method is a constructor (see
the wrong warning messages) and that all methods should be made package-private.

The correct solution would be to make all members that are accessed from outside
the moved type package-private. The others should stay untouched.

An example showing the problems introduced by the fix:

public class Try {
    private static final class Color {
        private Color(String name) {
            this();
        }
        private Color() {}
        private void foo() {}
        private void bar() {}
        private static void staticMethod() {}
        private int fBar;
    }
    void usage() {
        Color c= new Color("ultrared");
        c.foo();
        int i= c.fBar;
    }
}
*** Bug 120642 has been marked as a duplicate of this bug. ***
Created attachment 31812
Fix

Code for handling these issues has been added to MemberVisibilityAdjustor; patch removes code from MoveInnerToTop.
Created attachment 32754
Updated to current HEAD
Fixed in HEAD > 20060110
