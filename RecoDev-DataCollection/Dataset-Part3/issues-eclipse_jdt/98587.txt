This is a request to enable Eclipse to export/save refactoring and changes made
to a shared library and apply changes later to projects that depend on the
shared library. For example, in our development environment,  we have multiple
projects using a common shared Java library. There are times that names of
classes and methods of the shared library are renamed to reflect more accurately
of their functions. When the names are changed in the shared library, not all
the project sources code are available or want to be changed at that time. It
would be nice to be able to capture the refactoring procedure, and supply them
to various projects that use the shared library so that they can refactor at
their own convenient time.

Eclipse seems to be able to undo refactoring changes. That means that the
refactoring steps have been captured in stack. The critical stack could be
exported, and a new capability could be added to read the changes and apply them.

This is a request to enable Eclipse to export/save refactoring and changes made
to a shared library and apply changes later to projects that depend on the
shared library. For example, in our development environment,  we have multiple
projects using a common shared Java library. There are times that names of
classes and methods of the shared library are renamed to reflect more accurately
of their functions. When the names are changed in the shared library, not all
the project sources code are available or want to be changed at that time. It
would be nice to be able to capture the refactoring procedure, and supply them
to various projects that use the shared library so that they can refactor at
their own convenient time.

Eclipse seems to be able to undo refactoring changes. That means that the
refactoring steps have been captured in stack. The critical stack could be
exported, and a new capability could be added to read the changes and apply them.
I think this feature now exists since 3.2 M5 (JAR file export with refactoring).
Move to JDT/UI to confirm and close this bug

Yes, that's a new feature of M6
