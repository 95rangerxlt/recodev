Build ID:  I20080617-2000

Steps To Reproduce:
In an annotation processor I've put the following code:

	@Override
	public synchronized void init(ProcessingEnvironment processingEnv) {
		super.init(processingEnv);
		
		System.out.println("Using processor");
		try {
			FileObject resource = processingEnv.getFiler().getResource(StandardLocation.CLASS_OUTPUT, "", "example.txt");
			CharSequence charContent = resource.getCharContent(true);
			System.out.println(charContent);
		} 
		catch (IOException e) {
			e.printStackTrace();
		}
	}

Instead of displaying the file content, I get an UnsupportedOperationException: Not yet implemented at line 55 of IdeInputFileObject. 

The text file does exist, and javac works just fine.

More information:

Build ID:  I20080617-2000

Steps To Reproduce:
In an annotation processor I've put the following code:

	@Override
	public synchronized void init(ProcessingEnvironment processingEnv) {
		super.init(processingEnv);
		
		System.out.println("Using processor");
		try {
			FileObject resource = processingEnv.getFiler().getResource(StandardLocation.CLASS_OUTPUT, "", "example.txt");
			CharSequence charContent = resource.getCharContent(true);
			System.out.println(charContent);
		} 
		catch (IOException e) {
			e.printStackTrace();
		}
	}

Instead of displaying the file content, I get an UnsupportedOperationException: Not yet implemented at line 55 of IdeInputFileObject. 

The text file does exist, and javac works just fine.

More information:
Created attachment 112330
Patch using openReader to read the file and convert it to a CharSequence

I've tested the code by launching an Eclipse Application and use my annotation processor. It worked without problems. However, I couldn't get the test bundles to compile. Probably I didn't get all dependencies right.
Thanks, Roel, the patch is much appreciated.  I will try to check that out tonight or this weekend and get it into 3.5 if it seems correct.
The patch is not quite correct, I think: it assumes "\n" for a newline when it should probably use System.getProperty("line.separator"), and it always appends a newline on the end of the last line, when the file may not actually end with a newline.

I'll try my hand at an improved version, and also at a test case, unless you get to it first.
Ah, you are so right about the line separator. I'll look into a better version right now.

One other thing. In my initial implementation, it seemed like a good idea to return the toString of the StringBuilder. Since StringBuilder implements CharSequence, it is not strictly needed. My thought was that you would probably want to return an unmoddifiable CharSequence. But since the content could be quite large, I am now reconsidering that choice.



Created attachment 112399
New patch using openReader to read the file and convert it to a CharSequence

A better implementation :-)
Created attachment 112400
Test program using the same algoritm as the patch

I've run this program both on Linux and on Windows.
I still couldn't run the unit tests. I'll keep trying.

Any chance that this could be backported to 3.4?
The cutoff for 3.4.1 has passed but it is still possible to get it into 3.4.2, which will be released early next year.

I have not yet reviewed the new patch but will do so ASAP - thanks very much for providing that.  To get the test bundles to compile, you need the following in your workspace:

  org.eclipse.jdt.core.tests.builder
  org.eclipse.jdt.core.tests.compiler
  org.eclipse.jdt.core.tests.model
  org.eclipse.test.performance

These are available from the CVS repository at dev.eclipse.org, path /cvsroot/eclipse, userid "anonymous", protocol "pserver".  If you add tests you may need to locally rebuild certain jar files containing test resources - look for a .jardesc in the root directory of the APT test project you're modifying.
Fixed in HEAD - this will not make it into 3.5M2, but it will be in the first integration build following that.

The version I checked in is slightly different than the patch - mainly, I set the buffer size to 8192, to avoid duplicate array copies inside the BufferedReader.  I've also checked in tests for this, including a test that verifies proper handling of files larger than the buffer size.

Leaving bug open pending back-port to 3.4.2.
Requesting PMC approval to backport this fix to 3.4.2.

The fix affects only calls to FileObject.getCharContent() when running Java 6 annotation processors in the IDE.  Previously this call would always throw an UnsupportedOperationException("Not yet implemented"); now it succeeds.  The fix touches only the one method that used to be unimplemented.

There were a number of JSR269 methods left unimplemented in the IDE in 3.4, in order to focus effort on consistency with javac behavior in the command line implementation.  Where the fix is possible and safe, and requested by users, I think it is appropriate to back-port these changes into the 3.4.x maintenance stream.
+1 for 3.4.2.
I would still like Olivier to check the final patch.

Walter - you may want to give some credits to Roel for the patch, if so, please work with him to have him contribute the final patch, and set the iplog flag on the attachment itself, so it will be automatically included during our next IP review.
On patch itself. How is the encoding handled ?
Also see: JDT/Core: Util#getResourceContentsAsCharArray(...)
Feels to me that it should do the very same, or access it somehow (we could offer it as an API).

To clarify comment 11. My vote reflects this is an important issue, and it should get addressed in 3.4.2 in principle. 
I am not sure yet on the quality of the patch, but this doesn't change the importance of getting it fixed.
What I would have in mind would be along these lines:

/**
 * @see javax.tools.FileObject#getCharContent(boolean)
 */
@Override
public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
	try {
		char[] chars = Util.getResourceContentsAsCharArray(this._file);
		return new String(chars);
	} catch(CoreException e) {
		throw new IOException(e);
	}
}
My implementation used the openReader method, since it was alreday implemented. But both in that method and in the Util#getResourceContentsAsCharArray() I cannot find any code to handle the ignoreEncodingErrors flag. Are they always ignored in Eclipse? If not, should the handling, and the flag, be added to Util#getResourceContentsAsCharArray() as well?
It is true that ignoreEncodingErrors is currently being ignored, both in this method and in openReader() which it is based on.  That would be a good thing to fix, and Philippe's suggestion for fixing it seems like a good one.  If it looks like opening a can of worms, perhaps we can capture it as a separate bug report.

I'll post the currently proposed patch for 3.4.2 here, so Olivier can review.
Created attachment 112561
Proposed patch for 3.4.x

The javadoc for FileObject.getCharContent() says in part:

    * Any byte that cannot be decoded will be replaced by the default
    * translation character.  In addition, a diagnostic may be
    * reported unless {@code ignoreEncodingErrors} is true.

It appears ignoreEncodingErrors only affects the output of diagnostics.  I don't think we ever report diagnostics around encoding errors (I'm not even sure where they would appear) so I believe our present code is consistent with the API.  As usual the specification is opaque.

Given that, I suggest that implementing ignoreEncodingErrors (and presumably outputting the encoding errors to the log or creating a warning marker somewhere) is a feature enhancement request, and not important enough to justify the effort.  I propose we wait until someone asks for it.

This leaves open the question of whether we should use Util#getResourceContentsAsCharArray(), as Philippe suggests, or just wrap openReader(), as Roel proposed.  It looks to me like the Util method does a better job of allocating a correctly-sized array based on file length, so it is probably a bit more efficient.  However, to access it we would need to add o.e.jdt.apt.pluggable.core to the 'x-friends' list in o.e.jdt.core's manifest, for package o.e.jdt.internal.core.util.  (We are already on the x-friends list for other related packages.)

Is that permissible for 3.4.x?  If so, Philippe's technique is probably slightly better.  If not, I think we should use the patch that I've attached here.
Created attachment 113226
Patch to JDT Core, to give access to apt

Here's a patch to JDT core that adds apt.pluggable as an x-friend for the jdt.internal.core.util package.

If JDT Core will commit this, then I'll commit the APT patch based on Philippe's code, which I am about to add to this report.  The JDT routine catches some corner cases which the APT code does not get, and it is a bit more efficient, so this solution is preferred.
Created attachment 113227
Patch for APT based on Philippe's code
Walter - could you enter a bug against JDT/Core for granting access to internal package ?
(In reply to comment #20)
> Walter - could you enter a bug against JDT/Core for granting access to internal
> package ?

Entered bug 248243
Checked into 3.4.x maintenance stream.  Olivier, I will wait for your approval before I tag, though.
Also changed HEAD to use this method.
It looks ok, but we don't handle the ignoreEncodingErrors flag.
I wonder if we should not go for the implementation in org.eclipse.jdt.internal.compiler.apt.util.Util.getCharContents(FileObject, boolean, byte[], String) instead.

This is located in the compiler.apt project.

So I would say that this is an improvement, but maybe it still remains incomplete. The API is not really clear on how the diagnostic should be reported in case the flag is false.
The current code in  org.eclipse.jdt.internal.compiler.apt.util.Util.getCharContents simply dumps the error in the System.err console. Not ideal. This might also require more work.

Just my 2 cents.
