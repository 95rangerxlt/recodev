Build id: I20060125-0800

Test case:

public class X {
	public void foo(X2 p) {
		X3 l;
		if ((l = p.m).m == 0) {
			l.toString();
		}
	}
}

public class X2 {
	public X3 m;
}

public class X3 {
	int m;
}

public class Y {
	public X x;
}

public class Z {
	void foo() {
		Y y = new Y();
		X2 x2 = new X2();
		y.x.foo(x2); // (a)
	}

}

perform inline on foo for line (a) and you get the following, which does not compile:

public class Z {
	void foo() {
		Y y = new Y();
		X2 x2 = new X2();
		X3 l;
		if ((l = x2.m).y.x.m == 0) {
			l.toString();
		} // (a)
	}

}

This is a test case that I have simplified from real code. May have been able to strip it a bit more but stopped after this effort - apologies. Also note that in the original code, names where significantly longer and much more varied (what I mean is that the duplicate m name has probably nothing to do with the problem).

Build id: I20060125-0800

Test case:

public class X {
	public void foo(X2 p) {
		X3 l;
		if ((l = p.m).m == 0) {
			l.toString();
		}
	}
}

public class X2 {
	public X3 m;
}

public class X3 {
	int m;
}

public class Y {
	public X x;
}

public class Z {
	void foo() {
		Y y = new Y();
		X2 x2 = new X2();
		y.x.foo(x2); // (a)
	}

}

perform inline on foo for line (a) and you get the following, which does not compile:

public class Z {
	void foo() {
		Y y = new Y();
		X2 x2 = new X2();
		X3 l;
		if ((l = x2.m).y.x.m == 0) {
			l.toString();
		} // (a)
	}

}

This is a test case that I have simplified from real code. May have been able to strip it a bit more but stopped after this effort - apologies. Also note that in the original code, names where significantly longer and much more varied (what I mean is that the duplicate m name has probably nothing to do with the problem).
This is a simpler example. Inline doesn;t like the parenthized expression for a field access.
class Y {
	public void bar(Z p) {
		if ((p).m == null) {
		}
	}
}

class Z {
	Y f;
	Object m;

	void foo(Z z) {
		f.bar(z); // (a)
	}
}
This was a problem in 3.2 but it works correctly since 3.3.
