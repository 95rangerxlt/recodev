BETA_JAVA8:

The following program when run produces strange messages about
Exception in thread "main" java.lang.NoClassDefFoundError:  notional 
	at X.f(X.java:13)
	at X.main(X.java:9)
Caused by: java.lang.ClassNotFoundException:  notional 

This is because code generation is not in place for intersection casts.

// -- 
interface I {
}

interface J {
	
}
public class X implements I, J {
	public static void main( String [] args) {
		f(new X());
	}
	
	static void f(Object o) {
		X x = (X & I & J) o;
	}
}

BETA_JAVA8:

The following program when run produces strange messages about
Exception in thread "main" java.lang.NoClassDefFoundError:  notional 
	at X.f(X.java:13)
	at X.main(X.java:9)
Caused by: java.lang.ClassNotFoundException:  notional 

This is because code generation is not in place for intersection casts.

// -- 
interface I {
}

interface J {
	
}
public class X implements I, J {
	public static void main( String [] args) {
		f(new X());
	}
	
	static void f(Object o) {
		X x = (X & I & J) o;
	}
}
Fix and test released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=06dea349a5876369dde1ba5c7bc9bc2244a1f242


Note: Javac just cheats by emitting a checkcast for the leftmost type.
As a result, there are programs where a class cast exception could be
missing.

This results in:
Exception in thread "main" java.lang.IncompatibleClassChangeError: Class X does not implement the requested interface I
        at X.main(X.java:9)

for a program such as:

// ---
interface I {
   void foo();
}
interface J {
}
public class X implements J {
    public static void main( String [] args) {
	I i = (J & I) new X();
        i.foo();
    }
}

For tagging of lambdas this should be a non-issue though,
