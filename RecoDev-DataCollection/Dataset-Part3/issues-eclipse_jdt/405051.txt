When the search engine is primed (as part of calling JavaCore.initializeAfterLoad(IProgressMonitor)) then it populates the index manager based on the information returned from IndexManager#computeIndexLocation(IPath containerPath).  If the underlying index is a pre-built index but it has been deleted from the file-system, then the index is re-created in the workspace metadata and not in the location specified by the INDEX_LOCATION_ATTRIBUTE_NAME classpath attribute.  This is because search has no concept of the classpath containers - it simply knows a list of project and the corresponding archive files.

In JavaCore.initializeAfterLoad(IProgressMonitor) the call to refresh external archives (which populates the index manager with the correct classpath attribute information) happens after the search occurs.  Since the index has already been built from the search call then it ends up being used.

There are two ways to fix this:

1) In JavaCore.initializeAfterLoad(IProgressMonitor), move the call to refresh the archives to happen BEFORE the search engine is primed.

2) In IndexManager#computeIndexLocation(IPath containerPath, final URL newIndexURL) added via bug 395897, if the existing URL is different from the new URL then the index needs to be rebuilt after it is removed.

I think fix 1 makes more sense as, ideally, you want to know the latest archive state before a search is done.  This approach also ensures that the indexer manager is doing less work

When the search engine is primed (as part of calling JavaCore.initializeAfterLoad(IProgressMonitor)) then it populates the index manager based on the information returned from IndexManager#computeIndexLocation(IPath containerPath).  If the underlying index is a pre-built index but it has been deleted from the file-system, then the index is re-created in the workspace metadata and not in the location specified by the INDEX_LOCATION_ATTRIBUTE_NAME classpath attribute.  This is because search has no concept of the classpath containers - it simply knows a list of project and the corresponding archive files.

In JavaCore.initializeAfterLoad(IProgressMonitor) the call to refresh external archives (which populates the index manager with the correct classpath attribute information) happens after the search occurs.  Since the index has already been built from the search call then it ends up being used.

There are two ways to fix this:

1) In JavaCore.initializeAfterLoad(IProgressMonitor), move the call to refresh the archives to happen BEFORE the search engine is primed.

2) In IndexManager#computeIndexLocation(IPath containerPath, final URL newIndexURL) added via bug 395897, if the existing URL is different from the new URL then the index needs to be rebuilt after it is removed.

I think fix 1 makes more sense as, ideally, you want to know the latest archive state before a search is done.  This approach also ensures that the indexer manager is doing less work
The use case for this is when the indexes supplied for a pre-built index scenario do not exist on disk (i.e. they were accidently removed).  In this case, the indexes are not reconstructed in the right place.

I can supply a patch for either approach depending on what is determined to be the right solution.
(In reply to comment #0)
> 1) In JavaCore.initializeAfterLoad(IProgressMonitor), move the call to
> refresh the archives to happen BEFORE the search engine is primed.

I prefer this. You meant the dummy searchAllTypeNames call inside JavaCore.initializeAfterLoad to be run after model.refreshExternalArchives(..) call, right?

Initially I was concerned that one might invoke the indexing even before initializeAfterLoad() is called, let's say by using "Open Type". But looks like they are being blocked by initializeAfterLoad(). So, at first glance, looks to be safe.
Created attachment 229838
possible patch

patch for the proposed solution.
I've verified that the JavaSearchBugsTests and JavaIndexTests all pass with the proposed patch.  Are there any other tests I could run to ensure no regressions with this change?

If possible (and tests pass), can this be added to the 4.2.2+ release?
The fix looks reasonable, but we should first run with the fix for a while before putting it into 4.2.2+.
Comment on attachment 229838
possible patch

Fix looks good. I also ran all Text and JDT UI tests against it.
(In reply to comment #6)
> Comment on attachment 229838 [details]
> possible patch
> 
> Fix looks good. I also ran all Text and JDT UI tests against it.

Thanks Dani. I have pushed the patch via commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_8_maintenance&id=f4a5bcc41639be426386e8268eb2fd9be1e10531

The projects have been tagged and map files updated.
Fix has been put in master as well. But will wait and see how it plays out before applying in Kepler SR1.
We missed this one for SR1. Dani, can we release this for Kepler SR2?
Pushed the fix for Kepler SR2 via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_3_maintenance&id=40bd4fb780cd76f29e884eddc861fb9be2844fff
