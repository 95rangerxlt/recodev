AST/DOM support for extended dimensions are being added via bug 391895.
This bug is to track the AST rewrite part for the extended dimensions for SingleVariableDeclaration and VariableDeclarationFragment.

AST/DOM support for extended dimensions are being added via bug 391895.
This bug is to track the AST rewrite part for the extended dimensions for SingleVariableDeclaration and VariableDeclarationFragment.
Created attachment 226115
WIP

Only the the ast rewrite flattener part. Originally part of fix for bug 391895 but being moved here.
Created attachment 226689
Updated patch

Patch with tests.
Created attachment 226893
Updated patch

In the previous patch, I had to make some changes around thrown exception types to stop my tests from failing. Now that fix for bug 395658 covers that, I had removed that changes from this patch.

The patch also includes tests.

Markus, the tests I have added are specifically written for JLS8. Please let me know what you said in bug 395658, comment #12 applies for these too. Also let me know if we write things in a different way to accommodate what you suggested there.
(In reply to comment #3)
I didn't test the patch, but a cursory look didn't reveal problems in the implementations.

After bug 395658 comment 18/19 is done, the tests don't need the createAST8(..) method any more, but should use the infrastructure to only run for JLS8 and later.
(In reply to comment #4)
> After bug 395658 comment 18/19 is done, the tests don't need the
> createAST8(..) method any more, but should use the infrastructure to only
> run for JLS8 and later.

Markus, I have updated the updated proposed framework changes to bug 395658. I intend release only the fix first for this bug, which is required for all tests to be passing with the new framework in place. Once framework is in place, I will alter the new tests accordingly and release.
(In reply to comment #4)
> (In reply to comment #3)
> I didn't test the patch, but a cursory look didn't reveal problems in the
> implementations.

Thanks, Markus. Apart from the unit tests, I also tested a bit with code refactoring. I couldn't test the annotations rewrite part, but I can confirm most scenarios around extended dimensions are working as expected, such as method signature change, parameter change/shuffling, rename of method/variable/fragment etc.

Only existing issue I came across is, there doesn't seem to be a way to alter just the extended dimensions. Any change to the dimensions moves all the extended dimensions to the type. For e.g.

int[] i [][]; becomes int[][][] i;

and public int [] foo() [][]{ return null;}
becomes public int[][] foo(){ return null;}
Yes, Change Method Signature moves all extra dimensions to the parameter type. We didn't want to complicate the UI just to support an obsolete notation.
Created attachment 227269
Updated tests

I have tweaked the tests to include changes to throws section of a method declaration with extended dimensions.

And I have released the fix alone via the following commit. The commit includes few refactoring changes since the last patch.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=073c195d4829bd3ee6e06c1d3c0bfc4a1c7046ee
I have released the tests also into BETA_JAVA:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=694668a21861591196de0e8883d136f0c4cf5c1d

I have also hooked the ASTRewritingTest into RunAllJava8Tests.
