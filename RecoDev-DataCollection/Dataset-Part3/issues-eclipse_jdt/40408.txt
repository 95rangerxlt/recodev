20030716
class A {
	void f(){
		int i= 0;
		int u= i;
	}
}

extract the reference to 'i' from the declaration of 'u'
you get:
package p;

class A {
	void f(){
		int m(i)= 0;
		int m(u)= m(i);
	}

	private int m(int i) {
		return i;
	}
}

which is not valid Java syntax

20030716
class A {
	void f(){
		int i= 0;
		int u= i;
	}
}

extract the reference to 'i' from the declaration of 'u'
you get:
package p;

class A {
	void f(){
		int m(i)= 0;
		int m(u)= m(i);
	}

	private int m(int i) {
		return i;
	}
}

which is not valid Java syntax
another case (i don't know if they're related)
package p;
class A {
	int i;
	void f(){
		i= 0;
	}
}

extract the 'i' from the assignment
you get
class A {
	int m();
	void f(){
		m()= 0;
	}
	private int m() {
		return i;
	}
}

which also breaks syntax rules
this case causes the same (easy to come up with)
class A {
	void f(){	
		int i= i;
	}
}
(ignore compile errors and try extracting the second 'i')
Fixed the cases where declaration are replaced for M2. Why extract method is 
enabled on the left hand side if an assignment is strange. Have to investigate 
for M3
one more for the collection
void f(){
	int y= 0;
	int x= y= y;
}

extract y in the assignment
you get int x= m(y)= m(y); which does not compile
Fixed.
