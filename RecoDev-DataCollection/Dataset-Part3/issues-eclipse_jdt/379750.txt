This is the request to merge in the pom.xml files from the CBI forks to the
JDT repos.

eclipse.jdt.core.binaries.git
eclipse.jdt.core.git
eclipse.jdt.debug.git
eclipse.jdt.git
eclipse.jdt.ui.git


PW

This is the request to merge in the pom.xml files from the CBI forks to the
JDT repos.

eclipse.jdt.core.binaries.git
eclipse.jdt.core.git
eclipse.jdt.debug.git
eclipse.jdt.git
eclipse.jdt.ui.git


PW
CBI commits for review


eclipse.jdt.git:
4f96b9fff477bf2c7b9e877809d6f2d4528fc256
http://git.eclipse.org/c/cbi/eclipse.jdt.git/commit/?h=cbipoms&id=4f96b9fff477bf2c7b9e877809d6f2d4528fc256


eclipse.jdt.core:
4bbc1064473de4200f556314113ceb65bccf3de0
http://git.eclipse.org/c/cbi/eclipse.jdt.core.git/commit/?h=cbipoms&id=4bbc1064473de4200f556314113ceb65bccf3de0


eclipse.jdt.core.binaries:
ba323d0f10eb562700440888b8ad9fea638d545e
http://git.eclipse.org/c/cbi/eclipse.jdt.core.binaries.git/commit/?h=cbipoms&id=ba323d0f10eb562700440888b8ad9fea638d545e


eclipse.jdt.debug:
e26c177afe6d44bdf70f69801b3b3fcf0f846330
http://git.eclipse.org/c/cbi/eclipse.jdt.debug.git/commit/?h=cbipoms&id=e26c177afe6d44bdf70f69801b3b3fcf0f846330


eclipse.jdt.ui:
84ad5847e0bbe055756ecfa69b6ff128ffceb7e8
http://git.eclipse.org/c/cbi/eclipse.jdt.ui.git/commit/?h=cbipoms&id=84ad5847e0bbe055756ecfa69b6ff128ffceb7e8
Looks like these pom files entail some unnecessary maintenance cost:

The bundle version number is specified in the MANIFEST.MF, and now you duplicate it into the poms. This would better be generated on-the-fly by the build process that needs it.

Then I don't quite understand the eclipse.jdt.ui.git/pom.xml file:
- Where are the groupId, artifactId, and versionId coming from? Are they related to the JDT feature? Where is their meaning and the evolution path documented?
- The <modules> list needs to be sorted. It also looks redundant, since the same information is again in the <parent> elements of the referenced modules.

I don't think these files should be released to our repos unless there's tooling that avoids manual maintenance work (or that at least finds inconsistencies and offers quick fixes for them).
(In reply to comment #2)
> Looks like these pom files entail some unnecessary maintenance cost:

They are necessary maintenance costs, just like we have to maintain the build.properties files.

> Then I don't quite understand the eclipse.jdt.ui.git/pom.xml file:
> - Where are the groupId, artifactId, and versionId coming from? Are they
> related to the JDT feature? Where is their meaning and the evolution path
> documented?

Thanh, Igor?  


> - The <modules> list needs to be sorted. It also looks redundant, since the
> same information is again in the <parent> elements of the referenced modules.

The modules list is a document order build instruction ... do you mean you expect them to be built in a different order?  I'm not sure about the redundant specification.

> 
> I don't think these files should be released to our repos unless there's
> tooling that avoids manual maintenance work (or that at least finds
> inconsistencies and offers quick fixes for them).


They were working on a script to update the pom versions (which must match the manifest version) in bug 374438 but it looks like there's already a tycho command:

mvn org.eclipse.tycho:tycho-versions-plugin:update-pom

PW
(In reply to comment #3)
> (In reply to comment #2)
> > Looks like these pom files entail some unnecessary maintenance cost:
> 
> They are necessary maintenance costs, just like we have to maintain the
> build.properties files.
> 
> > Then I don't quite understand the eclipse.jdt.ui.git/pom.xml file:
> > - Where are the groupId, artifactId, and versionId coming from? Are they
> > related to the JDT feature? Where is their meaning and the evolution path
> > documented?
> 
> Thanh, Igor?  
> 
> 

I am not sure I fully understand the question, but maven artifact coordinates are generally four-tuple -- mandatory groupId, artifactId and version and optional classifier. groupId can be any string, I chose it to match project id, i.e. eclipse.jdt.ui in this case, but feel free to change (make sure to update all pom.xml files). Tycho requires artifactId to match Eclipse/OSGi id of the project, i.e. bundle symbolic name, and versions to match between pom.xml and eclipse/osgi artifacts. This is enforced by the tooling so you get build failure if pom.xml and eclipse/osgi metadata get out of sync. From my experience this does not happen too often and as Paul mentioned there is way to update pom.xml when it does.
(In reply to comment #3)
> They are necessary maintenance costs, just like we have to maintain the
> build.properties files.

No, the build.properties files are created once and can then be forgotten until the PDE builder tells me there's something to fix.

In contrast, the duplicated version numbers in the pom files are just crying for inconsistencies. This is not a sustainable solution. According to http://www.eclipse.org/tycho/ , Tycho should implement a "manifest-first approach". That's the way to go. The versions should be replaced by something like ${project.version}, or even better, the pom files should be generated on-the-fly.

Likewise, OSGi already defines the plug-in dependencies, so there's no need to release duplicated information in the <modules> list.

And BTW: Replacing one evil (build.properties) by another evil (pom.xml) is not really bringing us forward. The goal is to get rid of all duplicated configuration metadata and directly use the existing configuration files.

This is especially important since dependencies and plug-in versions are *not* changed often. Nobody will remember all the files to update, and relying on broken builds to (maybe) find the inconsistencies is not a good plan.
(In reply to comment #1)
> eclipse.jdt.core:
> 4bbc1064473de4200f556314113ceb65bccf3de0

> eclipse.jdt.core.binaries:
> ba323d0f10eb562700440888b8ad9fea638d545e

Since I am in a different time zone, I have pushed these changes + an additional change to the pom file, which is
here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=cc731b4c327187c913d720fd4ddaedf4adaa5284

Will revisit if required depending on the outcome of the ongoing discussion.
(In reply to comment #5)
> And BTW: Replacing one evil (build.properties) by another evil (pom.xml) is not
> really bringing us forward. The goal is to get rid of all duplicated
> configuration metadata and directly use the existing configuration files.
> 

This is *not* the goal of tycho or the CBI platform build.  It was never to reduce duplication metadata ...

> This is especially important since dependencies and plug-in versions are *not*
> changed often. Nobody will remember all the files to update, and relying on
> broken builds to (maybe) find the inconsistencies is not a good plan.

It will fail the build, with a specific message that the versions are inconsistent.  Then tycho provides a tool that will fix it without making people guess.

PW
(In reply to comment #5)
> This is especially important since dependencies and plug-in versions are *not*
> changed often. Nobody will remember all the files to update, and relying on
> broken builds to (maybe) find the inconsistencies is not a good plan.

Dependencies are already calculated based on bundle manifest (or feature.xml, etc), there is no duplication there.
(In reply to comment #1)
> CBI commits for review
> 
> 
> eclipse.jdt.git:
> 4f96b9fff477bf2c7b9e877809d6f2d4528fc256
> http://git.eclipse.org/c/cbi/eclipse.jdt.git/commit/?h=cbipoms&id=4f96b9fff477bf2c7b9e877809d6f2d4528fc256

Pushed with http://git.eclipse.org/c/jdt/eclipse.jdt.git/commit/?id=fe5ed315b37d0d29872bc6e15b9e22ac64499dc7

 
> eclipse.jdt.ui:
> 84ad5847e0bbe055756ecfa69b6ff128ffceb7e8
> http://git.eclipse.org/c/cbi/eclipse.jdt.ui.git/commit/?h=cbipoms&id=84ad5847e0bbe055756ecfa69b6ff128ffceb7e8

Pushed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=0c5556878d7be0198cba7c01eb4d76e83a08b5dc
Moving to JDT Debug for the last piece:

eclipse.jdt.debug:
e26c177afe6d44bdf70f69801b3b3fcf0f846330
http://git.eclipse.org/c/cbi/eclipse.jdt.debug.git/commit/?h=cbipoms&id=e26c177afe6d44bdf70f69801b3b3fcf0f846330
(In reply to comment #10)
> Moving to JDT Debug for the last piece:
> 
> eclipse.jdt.debug:
> e26c177afe6d44bdf70f69801b3b3fcf0f846330
> http://git.eclipse.org/c/cbi/eclipse.jdt.debug.git/commit/?h=cbipoms&id=e26c177afe6d44bdf70f69801b3b3fcf0f846330

Pushed to:

http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=cd4c28da3614d84c726c58b63c440cb02de6e3c3
Follow-ups to the redundancy problem in pom.xml files: Bug 387802, bug 386114.
