For some reason, I can't inline a constructor's call to 'this'. However, by
adding 'void' to the constructor, and changing 'this' to 'ClassName' I can
inline it as a method.

It seems strange to disallow inlining of constructors when they are calls to
this classes constructor, though I can see the purpose of not allowing (in the
general case) constructors to be inlined.

For some reason, I can't inline a constructor's call to 'this'. However, by
adding 'void' to the constructor, and changing 'this' to 'ClassName' I can
inline it as a method.

It seems strange to disallow inlining of constructors when they are calls to
this classes constructor, though I can see the purpose of not allowing (in the
general case) constructors to be inlined.
Created attachment 6474
patch and unit test

Added support for constructor invocations. It is also possible to inline
constructor declaration if it is not used for creating class instances.
Nice work.

Released patch to HEAD.
Inlining constructor now works under 3.0M8

However, if the 'inline all method invocations' and 'delete the invocation' method is selected, the 
constructor is not deleted.

There's an exception that is generated in the log when this happens.

public class Sample {
  public Sample() {
    System.out.println("To be inlined");
  }
  public Sample(String msg) {
    this();
    System.out.println(msg);
  }
}

Selecting 'this', doing an inline and delete original method does the inline OK but does not remove the 
default constructor (though it is not used elsewhere).
Created attachment 9076
Exception stack trace caused during inlining with deleting original method
Should have said: saw this on Mac OS X.3.3 using Eclipse 3.0M8.
I will take a look into the problem.
Created attachment 9106
Patch fixing the problem with constructor declaration inlining
Released fix for I20040413.
