Our new guy on platform-ui, Doug, was lamenting upon his arrival that Eclipse 
code doesn't use certain coding standards like hungarian notation. esp. 'g_' 
and 'm_' for class and instance variables. 

Then I had this idea: Why can't class and instance variables have separate 
syntax coloring?

Another use case is a practice I often use:

void setSomeValue(int someValue) {
    this.someValue = someValue;
}

In a setter, I always use the same for the parameter as the instance variable. 
Some people frown upon this practice as prone to clerical errors, but it is 
widely used, and from code readability/formatting perspective, I personally 
think it is a cleaner practice than having the developer always come up with a 
new name for the parameter, like 'newSomeValue' or 'someValue2', because the 
naming rules aren't consistent.

Though you already have 'this.' to guide you in this use case, having syntax 
coloring for class and instance variables would help eliminate clerical errors 
here. 

To go further with this request, syntax coloring to distinguish data types or 
classes of data types (primitive v. object) would also be a feature I would 
regularly make use of.

Our new guy on platform-ui, Doug, was lamenting upon his arrival that Eclipse 
code doesn't use certain coding standards like hungarian notation. esp. 'g_' 
and 'm_' for class and instance variables. 

Then I had this idea: Why can't class and instance variables have separate 
syntax coloring?

Another use case is a practice I often use:

void setSomeValue(int someValue) {
    this.someValue = someValue;
}

In a setter, I always use the same for the parameter as the instance variable. 
Some people frown upon this practice as prone to clerical errors, but it is 
widely used, and from code readability/formatting perspective, I personally 
think it is a cleaner practice than having the developer always come up with a 
new name for the parameter, like 'newSomeValue' or 'someValue2', because the 
naming rules aren't consistent.

Though you already have 'this.' to guide you in this use case, having syntax 
coloring for class and instance variables would help eliminate clerical errors 
here. 

To go further with this request, syntax coloring to distinguish data types or 
classes of data types (primitive v. object) would also be a feature I would 
regularly make use of.
Interesting thought, but to clarify, it's "c_staticVariable", "m_variable" 
and "STATIC_FINAL_VARIABLE".  ;)  There's even more crazy things you can get 
into if you go down this route:

+ Warnings if your STATIC_FINAL_VARIABLES aren't written like that.
+ Use icons, not colouring.  Overlay decorator icons on the text that display 
all the facts about a variable: member, static, final, synchronized, 
transient, volatile, etc.
+ Options specify "properties" (a la Java Beans).  These are 
displayed "collapsed" at the top of the class, with bigger icons showing if 
they are readable or writable.  Using preferences to specify templates, you 
can have the setters and getters automatically defined (e.g., just check the 
readable box next to the property).  By "expanding" the properties, you would 
see the actual implementations.  Properties could also have more sophisticated 
aspects, such as multiple (indicating a collection), null allowed, immutable, 
etc.

Carrying on with this last crazy hallucination, you could specify a property 
as "synchronized", and then the Java editor would transparently ensure that 
*all* access to the property is synchronized.


But these should really have gone in a separate bug.  You can ignore me now.
ok picasso, it's got to still look like code you know, not an abstract 
painting. :) (still, you can always mock something up in photoshop and show us 
what it might look like.)

I have already used this functonality provided by a plug-in in JBuilder.
It's frustrating now for me to cope without it in Eclipse.

There are plenty of people that apply variables naming standards, especially to
differenciate local variables from instance variables, be prefixing or suffixing
them by underscores (fer example the well known Doug's Lea concurrent library).

Coloring improves readability, especially when you try to understand the code
written by somebody else.  And you do not need anymore to force people to apply
heavy naming conventions.

By analogy, I would suggest to add a feature allowing to display in the code
INTERFACE names in italic (as we do in UML).  That would avoid the need for
naming conventions in interfaces as well.

Most people do not realize how this little thing can improve their life.

If you need to prioritize, and choose only one, my preference goes to a color
for instance variables (in dark red by default).  

Think naming conventions and let the machine work for you.

*** Bug 47436 has been marked as a duplicate of this bug. ***
I suggested this too and was told it was suggested prior (Bug 47436).

I would suggest here that not only the color can be changed but also the font 
family, font size and font style and font weight. Netbeans provides such 
support.
I think it is a strange convention to name Interfaces like Eclipse does, using 
names like IWindow. This is really ugly in my eyes.

The Sun convention is a perfect example how to name Interfaces: no prefixes 
and no suffixes.

I have another cool idea which I will post as a feature request.
I think in Eclipse M7, it is still not possible to color instance variables. 
I've seen that method names can be colored, but not instance variables. To me 
it is more important to color instance variables than method names. Will 
Eclipse 3.0 Final include coloring of instance variables?
Available in builds > 20040423 (see preference page Java->Editor->Semantic
Highlighting; will be integrated with the current Syntax Highlighting preference
page).

Please change to FIXED.
.
