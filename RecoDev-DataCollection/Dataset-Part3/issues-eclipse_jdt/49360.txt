It seems that for a huge number of tests (I'm using a lot of test suites
generated from external test data) Eclipse's JUnit view slows down the execution
of the whole suite. I believe that because of showing an execution status for
these test in the test hierarchy, as well as status in the status line. I
believe that view can be implemented in a better way, to do not slow down the
execution of unit tests.

It seems that for a huge number of tests (I'm using a lot of test suites
generated from external test data) Eclipse's JUnit view slows down the execution
of the whole suite. I believe that because of showing an execution status for
these test in the test hierarchy, as well as status in the status line. I
believe that view can be implemented in a better way, to do not slow down the
execution of unit tests.
The showing of the execution status (and revealing the test) can be disabled 
using the scroll lock control. 

If this doesn't help then please be more specific and provide some numbers 
(e.g. running junit tests using the test runner, running tests using the 
Eclipse JUnit).
Erich, scroll lock helps a bit. In my test suite with 4050 test cases it wuns
for 8.9 seconds with scrolling and for ~5.5 seconds without scrolling. However
if I run the same test from Ant it take only ~0.3 seconds. 

I would suggest to update execution status on the status bar not for every
change  but only once in a second. That will save a lot of time on UI updates
that doesn't actually makes any difference for the user.
this is now done with a UIJob.

the other overhead comes from creating a proxy test hierarchy inside eclipse.
