Search for references to the functional interface type of a lambda with an (illegal!) 'this' parameter throws AIIOBE.

Search for references to type "Function" here:

	Function<String, String> f1= (String s, Function this) -> s;
	Function<String, String> f2= (Function this, String s) -> s;

The line numbers in the stacktrace may not be accurate, since I had some pending changes in my workspace. The AIOOBE happens in line
	String signature = manager.intern(new String(lambdaExpression.descriptor.parameters[i].signature()));

I think the "length" variable should be set to min(lambdaExpression.descriptor.parameters.length,lambdaExpression.arguments.length). Note that "length" is currently written twice.

!ENTRY org.eclipse.core.jobs 4 2 2014-03-08 14:06:23.938
!MESSAGE An internal error occurred during: "Java Search".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: 1
	at org.eclipse.jdt.internal.core.LambdaMethod.make(LambdaMethod.java:62)
	at org.eclipse.jdt.internal.core.LambdaExpression.<init>(LambdaExpression.java:49)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.createHandle(MatchLocator.java:457)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching(MatchLocator.java:2226)
	at org.eclipse.jdt.internal.core.search.matching.MemberDeclarationVisitor.visit(MemberDeclarationVisitor.java:216)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:637)
	at org.eclipse.jdt.internal.compiler.ast.FieldDeclaration.traverse(FieldDeclaration.java:343)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching(MatchLocator.java:2612)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching(MatchLocator.java:2845)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching(MatchLocator.java:2572)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.process(MatchLocator.java:1755)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1164)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1205)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1322)
	at org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:122)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches(BasicSearchEngine.java:232)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.search(BasicSearchEngine.java:516)
	at org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:584)
	at org.eclipse.jdt.internal.ui.search.JavaSearchQuery.run(JavaSearchQuery.java:144)
	at org.eclipse.search2.internal.ui.InternalSearchUI$InternalSearchJob.run(InternalSearchUI.java:91)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

Search for references to the functional interface type of a lambda with an (illegal!) 'this' parameter throws AIIOBE.

Search for references to type "Function" here:

	Function<String, String> f1= (String s, Function this) -> s;
	Function<String, String> f2= (Function this, String s) -> s;

The line numbers in the stacktrace may not be accurate, since I had some pending changes in my workspace. The AIOOBE happens in line
	String signature = manager.intern(new String(lambdaExpression.descriptor.parameters[i].signature()));

I think the "length" variable should be set to min(lambdaExpression.descriptor.parameters.length,lambdaExpression.arguments.length). Note that "length" is currently written twice.

!ENTRY org.eclipse.core.jobs 4 2 2014-03-08 14:06:23.938
!MESSAGE An internal error occurred during: "Java Search".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: 1
	at org.eclipse.jdt.internal.core.LambdaMethod.make(LambdaMethod.java:62)
	at org.eclipse.jdt.internal.core.LambdaExpression.<init>(LambdaExpression.java:49)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.createHandle(MatchLocator.java:457)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching(MatchLocator.java:2226)
	at org.eclipse.jdt.internal.core.search.matching.MemberDeclarationVisitor.visit(MemberDeclarationVisitor.java:216)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:637)
	at org.eclipse.jdt.internal.compiler.ast.FieldDeclaration.traverse(FieldDeclaration.java:343)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching(MatchLocator.java:2612)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching(MatchLocator.java:2845)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.reportMatching(MatchLocator.java:2572)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.process(MatchLocator.java:1755)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1164)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1205)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1322)
	at org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:122)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches(BasicSearchEngine.java:232)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.search(BasicSearchEngine.java:516)
	at org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:584)
	at org.eclipse.jdt.internal.ui.search.JavaSearchQuery.run(JavaSearchQuery.java:144)
	at org.eclipse.search2.internal.ui.InternalSearchUI$InternalSearchJob.run(InternalSearchUI.java:91)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)
Thanks Markus, I'll follow up.
Actually just saving:

public class X {
	
	public static void main(String[] args) {
		Function<String, String> f1= (String s, Function this) -> s;
		Function<String, String> f2= (Function this, String s) -> s;
	}
	
}

triggers an NPE, I'll include a fix for this too here.
(In reply to Markus Keller from comment #0)
> Search for references to the functional interface type of a lambda with an
> (illegal!) 'this' parameter throws AIIOBE.
> 
> Search for references to type "Function" here:
> 
> 	Function<String, String> f1= (String s, Function this) -> s;
> 	Function<String, String> f2= (Function this, String s) -> s;

Markus, can you post the full test case you tried ? 

I am having trouble with just this snippet in reproducing.
(In reply to Srikanth Sankaran from comment #2)
> Actually just saving:
> 
> public class X {
> 	
> 	public static void main(String[] args) {
> 		Function<String, String> f1= (String s, Function this) -> s;
> 		Function<String, String> f2= (Function this, String s) -> s;
> 	}
> 	
> }
> 
> triggers an NPE, I'll include a fix for this too here.

Totally unrelated root cause, so I opened https://bugs.eclipse.org/bugs/show_bug.cgi?id=429935
(In reply to Srikanth Sankaran from comment #3)

> Markus, can you post the full test case you tried ? 
> 
> I am having trouble with just this snippet in reproducing.

Simple enough: 

// --
import java.util.function.*;
public class X {
	public static void main(String[] args) {
		Function<String, String> f1= (String s, Function this) -> s;
		Function<String, String> f2= (Function this, String s) -> s;
	} 
}
Fix and tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=8d4ab5644565c055b67fa7745388cbe96026e76a

Amendments here: 
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=d40d65cc310f8b80e4964046fc88b861b3de2b63

With this fix, we will not create a Java model element for a lambda expression
that is not well formed.

Wellformedness includes:

    - Having a target type that is a functional interface type.
    - Lambda arity should match sam arity
    - For explicitly typed lambdas, the parameters at the lambda site should
      match the sam from the interface.

    - Errors in body do not influence wellformedness.

A lambda expression relies heavily on its descriptor to derive its own traits.
Broken lambdas are problematic to handle - I am not sure how many places would
require to be adjusted and it is too risky at the moment.

As a result, if a subelement of a broken lambda happens to be the focus element,
its parent will be the parent of the broken lambda expression.

This may or may not jell well with the overall of scheme of things. Markus,
if it is very important to clients to see even broken lambdas, please open
a fresh defect - we will look at it for 4.4 - Thanks.
I haven't debugged the corresponding tests, but I'd suggest trying the following:

instead

  if (!(expectedParameterType instanceof InferenceVariable)) {

you may want to write

  if (expectedParameterType.isProperType(true)) {

This would be the canonical way of checking if *any* inference variable is involved *somewhere* in 'expectedParameterType'.

(See that InferenceVariable directly answers 'false').


Does this make sense / work for the case at hand?
(In reply to Stephan Herrmann from comment #7)

> you may want to write
> 
>   if (expectedParameterType.isProperType(true)) {
> 
> This would be the canonical way of checking if *any* inference variable is
> involved *somewhere* in 'expectedParameterType'.

Perfect, thanks for catching this:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=a8cbebd170009b62a902461aed94df473d2c0d4a
Cleaning stale review flag to +1 :)
