Currently Eclipse Java code editor makes it extremely hard or impossible to 
configure indentation size independently from tab size, since the two are used 
interchangeably. 

Indentation is always a certain number of spaces and never a tab character (or 
tab forward). Hence the preference to replace indentation with TABs should be 
removed. The two are completely independent. 

The above definition however “overloads” the TAB key, and what the tab key 
does must be figured out from the context. When users hit TAB key do they mean 
to indent, or to tab forward (i.e. insert tab char or depending on preferences 
replace it with equivalent number of spaces)? The answer to this question is 
fairly straight forward, and can always be figured out from the context. 

One useful heuristics that works is to assume when the user hits TAB the first 
time that they mean to indent, hence the default action is “insert x number of 
spaces” where x is the users preference for indentation size. If the user hits 
TAB again, we proceed as follows: “we remove the indent spaces we inserted 
before and insert TAB char or equivalent number of spaces if the users chose 
to insert spaces instead of TAB chars”.

The editor could go a step further and smart indent on behalf of the user. For 
example: each time a user opens an if block

    if (true) {

the editor should know from context that after the user hits enter after the 
brace above that next thing they want to do is indent, so it could do it for 
them.

Another extremely useful smart indentation technique an editor could employ is 
to automatically format completed constructs and pasted code. For example, 
each time a user closes a block with a brace }, the editor (and we already 
have facilities to figure out where the matching opening brace is) should find 
the matching opening brace and auto format the code in between the two. The 
affected code could be briefly colored differently, bolded, faded etc, to let 
the user know that something has changed.

Currently Eclipse Java code editor makes it extremely hard or impossible to 
configure indentation size independently from tab size, since the two are used 
interchangeably. 

Indentation is always a certain number of spaces and never a tab character (or 
tab forward). Hence the preference to replace indentation with TABs should be 
removed. The two are completely independent. 

The above definition however “overloads” the TAB key, and what the tab key 
does must be figured out from the context. When users hit TAB key do they mean 
to indent, or to tab forward (i.e. insert tab char or depending on preferences 
replace it with equivalent number of spaces)? The answer to this question is 
fairly straight forward, and can always be figured out from the context. 

One useful heuristics that works is to assume when the user hits TAB the first 
time that they mean to indent, hence the default action is “insert x number of 
spaces” where x is the users preference for indentation size. If the user hits 
TAB again, we proceed as follows: “we remove the indent spaces we inserted 
before and insert TAB char or equivalent number of spaces if the users chose 
to insert spaces instead of TAB chars”.

The editor could go a step further and smart indent on behalf of the user. For 
example: each time a user opens an if block

    if (true) {

the editor should know from context that after the user hits enter after the 
brace above that next thing they want to do is indent, so it could do it for 
them.

Another extremely useful smart indentation technique an editor could employ is 
to automatically format completed constructs and pasted code. For example, 
each time a user closes a block with a brace }, the editor (and we already 
have facilities to figure out where the matching opening brace is) should find 
the matching opening brace and auto format the code in between the two. The 
affected code could be briefly colored differently, bolded, faded etc, to let 
the user know that something has changed.
Which build are you using?

>Currently Eclipse Java code editor makes it extremely hard or impossible to 
>configure indentation size independently from tab size, since the two are used 
>interchangeably. 
Which is/was the use case where it was impossible for you to configure that stuff?

Tom please comment. Move back or close if not appropriate.
I'm using Eclipse Platform Version: 2.1.2, Build id: 200311030802.
My settings are as follows: In Java Editor Appereance Tab, I have 
set "Displayed tab width:" to be 8. 
In Java Editor Typing tab, I have "Insert space for tabs" unchecked. 

In Code Formatter Style tab I have "Insert tab for indentation, not spaces" 
unchecked. Finally, number of spaces representing an indentation level is 4.

The expected behaviour is that my indents will be 4 spaces, and my tabs will 
be kept as tab characters. However, if I'm in the block
    if (bla) {
    ~

and the caret is where ~ is above, if I hit TAB key, the editor inserts tab 
char and moves forward 8 characters. I would expect that editor should know 
that my intention is to indent and not tab forward and insert 4 spaces here.





> I'm using Eclipse Platform Version: 2.1.2, Build id: 200311030802.

adjusted build. Much of what you request can be done with the recent versions of
the 3.0 stream.

> I would expect that editor should know 
> that my intention is to indent and not tab forward and insert 4 spaces here.

It does so on 3.0 and with the Java->Work in Progress->Smart Tab feature turned
on in the preferences.
