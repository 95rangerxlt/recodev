Here is the code snippet before applying inline refactoring:

public class A {
	public static int i;

	public static int getI() {         // APPLY INLINE HERE
		return i;
	}
}

public enum B {
	m(A.getI());
	
	B(int j){		
	}
}

Applying inline refactoring to getI() cannot update A.getI() that is a parameter of enum constructor call:

public class A {
	public static int i;
}

public enum B {
	m(A.getI());             // ERROR
	
	B(int j){		
	}
}

Here is the code snippet before applying inline refactoring:

public class A {
	public static int i;

	public static int getI() {         // APPLY INLINE HERE
		return i;
	}
}

public enum B {
	m(A.getI());
	
	B(int j){		
	}
}

Applying inline refactoring to getI() cannot update A.getI() that is a parameter of enum constructor call:

public class A {
	public static int i;
}

public enum B {
	m(A.getI());             // ERROR
	
	B(int j){		
	}
}
Reproducible using Eclipse Build id: I20130820-0800.

As per the initial investigation in-lining with in an EnumConstantDeclaration having a MethodInvocation argument is not handled. We will require modification in TargetProvider, where we need a #visit(EnumConstantDeclaration).
Created attachment 235023
Patch with testcases.

Modified the InvocationFinder ASTVisitor to consider EnumConstantDeclaration. Added a testcase for the reported scenario.

Dani, kindly let me know whether the approach is right.
Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=54ea4fdbda3ed1872331fd567678081492644323
