Now that bug 427169 works nicely (thanks!) "wouldn't it be cool" if the next level of conversion be supported, too:

from
  people.map(Person::getLastName)
to
  people.map(p -> p.getLastName())

This direction shouldn't require too much analysis (just needs a new name 'p').

The opposite direction would be even cooler, but for that you'd need to analyse which lambdas are amenable to this conversion. That could be tricky.

I believe such quick assists would be highly educational for J8 newbies :)

Now that bug 427169 works nicely (thanks!) "wouldn't it be cool" if the next level of conversion be supported, too:

from
  people.map(Person::getLastName)
to
  people.map(p -> p.getLastName())

This direction shouldn't require too much analysis (just needs a new name 'p').

The opposite direction would be even cooler, but for that you'd need to analyse which lambdas are amenable to this conversion. That could be tricky.

I believe such quick assists would be highly educational for J8 newbies :)
The suggested quick assists would be helpful.
The first one can be targeted for GA and the second one also, if time permits.
(In reply to Stephan Herrmann from comment #0)
> The opposite direction would be even cooler, but for that you'd need to
> analyse which lambdas are amenable to this conversion. That could be tricky.

Filed bug 439601 for the opposite direction.
This bug will address conversion from method reference to lambda.
The following code contains some examples of method references of different types. Each method reference (except the ones that are invalid) has the corresponding expected lambda expression form in the next statement. 
Markus, please have a look and let me know if this is correct.

import java.util.HashSet;
import java.util.function.*;

public class CL<T> {
	static <F> String staticMethod() {
		return "s";
	}
	
	<F> String method1() {
		return "a";
	}

	<F> String method1(CL<T> ie) {
		return "b";
	}

	public void bar() {	
		Supplier<String> v1 = (new CL<Integer>())::method1;
		v1 = () -> (new CL<Integer>()).method1();

		Supplier<String> v2 = this::method1;
		v2 = () -> this.method1();

		Function<CL<Integer>, String> v3 = CL<Integer>::method1;
		v3 = t -> t.method1();
		
		Function<CL<Integer>, String> v4 = (new CL<Integer>())::method1;
		v4 = t -> (new CL<Integer>()).method1(t);
	
		Function<CL<Integer>, String> v5 = CL::method1;
		v5 = t -> t.method1();
		
		Function<CL<Integer>, String> v6 = CL::<Float> method1;
		v6 = t -> t.<Float> method1();
		
		// invalid - error should specify "parameterized qualifier on static method reference"
		Supplier<String> p1 = CL<String>::staticMethod;
		
		Supplier<String> p2 = CL::<Float>staticMethod;
		p2= () -> CL.<Float>staticMethod();
	}
	
	{
		Function<String, MyHashSet<Integer>> m1 = MyHashSet::new;
		m1 = t -> new MyHashSet<>(t);
		
		Supplier<MyHashSet<Integer>> m2 = MyHashSet::new;
		m2 = () -> new MyHashSet<>();
	}
}

class Sub extends CL<Integer> {
	{
		Supplier<String> s1 = super::method1;
		s1 = () -> super.method1();
		
		Supplier<String> s2 = Sub.super::method1;
		s2 = () ->  Sub.super.method1();
				
		Function<CL<Integer>, String> s3 = super::method1;
		s3 = t -> super.method1(t);
		
		Supplier<String> s4 = super::staticMethod; // invalid
		// s4 = () -> super.staticMethod();
		
		Supplier<String> s5 = (new Sub())::staticMethod; // invalid
		// s5 = () -> (new Sub()).staticMethod();
	}
}

class MyHashSet<T> extends HashSet<T> {
	public MyHashSet(String s) {}
	public MyHashSet() {}
}
For the MethodReferences assigned to v3, v5, and v6, ECJ correctly reports errors (that are missed by javac). The quick assist should not touch the erroneous references.

> 		// invalid - error should specify "parameterized qualifier on static method reference"
>		Supplier<String> p1 = CL<String>::staticMethod;

Yes, please file a bug for a better error message.

The others look good to me.
(In reply to Markus Keller from comment #4)
> For the MethodReferences assigned to v3, v5, and v6, ECJ correctly reports
> errors (that are missed by javac).
I thought these are same as the issue reported in bug 439515, which would be fixed with it in ECJ.

> > // invalid - error should specify "parameterized qualifier on static method reference"
> >		Supplier<String> p1 = CL<String>::staticMethod;
> 
> Yes, please file a bug for a better error message.
Filed bug 440727.
Created attachment 245517
Patch

The attached patch provides a quick assist to convert method reference to lambda expression. 

Pending:
- Lambda parameter names can conflict with names in enclosing scope: I will handle that in a separate bug or in an updated version of this patch.
- Test cases: I will upload the tests in a separate patch.

Markus, please have a look at the patch and the question in the TODO comment.
Created attachment 245537
Patch - tests

Attached the tests cases.
Created attachment 245587
Patch

Updated patch and tests to include the fix for lambda parameter names conflicting with names in enclosing scope.
(In reply to Noopur Gupta from comment #5)
> (In reply to Markus Keller from comment #4)
> > For the MethodReferences assigned to v3, v5, and v6, ECJ correctly reports
> > errors (that are missed by javac).
> I thought these are same as the issue reported in bug 439515, which would be
> fixed with it in ECJ.

Yes, I got that wrong. Will review the patch in M2.
Created attachment 246878
Combined patch with changes from bug 439601

Combined patch with changes from bug 439601 based on current master.
Created attachment 247917
Combined patch with changes from bug 439601

Updated tests and fix based on current master.
Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=fd1973006b8d69c372d0b6fa2cbd79fe8d6cc3fe

Notable changes to the combined patch:

* QuickAssistProcessor:

> // TODO: Can methodReference be TypeMethodReference here ... ?

Yes, but I think only in pathological examples like this, where the type annotation doesn't make sense at all (bug in JLS8):

    LongSupplier foo() {
        return @Great System::currentTimeMillis;
    }

The rest of the code in that branch had a few problems:
- createCopyTarget(expr) fails if expr is a new node
- ast.newName(typeBinding.getQualifiedName() is not good. Use ImportRewrite.

* ImportRewrites have to be set on the proposal:
proposal.setImportRewrite(importRewrite);
(In reply to Markus Keller from comment #12)
> Fixed with
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/
> ?id=fd1973006b8d69c372d0b6fa2cbd79fe8d6cc3fe

Cool, thanks Noopur, thanks Markus!
