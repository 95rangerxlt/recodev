This problem is happening in WSAD 5.1.1 which is based upon Eclipse 2.1.2.  I 
believe the problem is with the Eclipse jar file export.

In WSAD when a project has SQLJ support, several additional builders are added 
to the project.  One of the builders. the SQLJ PostProcess builder, updates the 
linemap in the generated .class file that corresponds to a .sqlj file, so 
the .sqlj file can be used as the source file for debugging instead of the 
generated .java file.  It appears that Eclipse has problems exporting 
the .class after it has been modified.  Since the .class file executes 
correctly, I don't know what problem Eclipse is having.  

In the SQLJ preferences, if you uncheck the selection to enable debugging from 
SQLJ file (so the class file is not modified), and rebuild the project - then 
the export appears to work correctly.

This problem is happening in WSAD 5.1.1 which is based upon Eclipse 2.1.2.  I 
believe the problem is with the Eclipse jar file export.

In WSAD when a project has SQLJ support, several additional builders are added 
to the project.  One of the builders. the SQLJ PostProcess builder, updates the 
linemap in the generated .class file that corresponds to a .sqlj file, so 
the .sqlj file can be used as the source file for debugging instead of the 
generated .java file.  It appears that Eclipse has problems exporting 
the .class after it has been modified.  Since the .class file executes 
correctly, I don't know what problem Eclipse is having.  

In the SQLJ preferences, if you uncheck the selection to enable debugging from 
SQLJ file (so the class file is not modified), and rebuild the project - then 
the export appears to work correctly.
The issue is that the JAR exporter only supports .class files generated 
from .java files. The class files for sqlj are derived from .sqlj files.

When exporting generated class files then .sqlj files are treated as 
resources. This means they show up in the JAR file uncompiled.

The immediate workaround is to use the Ant JAR task for exporting in this set-
up.


Dani please estimate the effort needed to generalize the current 
implementation to cover .class files derived from non-java files. I wonder 
whether it is sufficient to remove the isJavaFile() check in 
JarFileExportOperation.filesOnClassPath().

I'll attach the JARs created by the JAR exporter for the scenarios mentioned 
by Brian.
Created attachment 8274
Export with SQLJDebugDisabled
Created attachment 8275
Debug Enabled
Created attachment 8301
class file produced with sqlj debug enabled

class file produced with sqlj debug enabled.
The Java file (.java) is also generated but not into the output folder but into
a source folder. I would assume that even if SQLJ debugging is disabled it would
not work when you only select the .sqlj but not the corresponding - generated -
*.java file for export.

The correct  way to fix this is to provide an extension point which computes the
class files for a given source file type (e.g. *java or *.sqlj). We also have to
add code that protects from adding the same class file twice because the
generated Java file and the sqlj source file might compute the same class file.

The minimal fix for 3.0 is to export all class files of selected folders. We
will also investigate on computing the source file(s) out of the debug strata
information.
Darin,

do you have code that would allow us to detect the original SQLJ file for the
generated class file or some other generated file(s)? For both cases (debugging
on or off) I would assume that according to JSR045 the source file attribute of
the generated class file is the corresponding .java file and not the SQLJ file -
is that correct?

JSR045 provides debug attributes for each source level (called statum). Thus, 
you can retrieve the source file name for any stratum - Java or JSQL. The code 
for this is in our JDI client. Luc can probably point you in the right 
direction.
>JSR045 provides debug attributes for each source level (called statum)
That gives a yes to my question - right?

Brian, does WSAD follow JSR045?

Daniel - I do not know for sure, but I would think that if the Eclipse debugger 
does then so should WSAD (as it uses the Eclipse debugger).
Could you get that information? Otherwise we might invest time to fix this bug
without helping the user.

NOTE: The compiler is responsible for putting the debug attributes into the 
classfiles - the debugger just has code to interpret/read them.
Brian the question is: Does the compiler generate the class file according to
JSR-045 or if not, how can we get the source files for a given class file.
I don't think the compiler does anything relative to the JSR-45. I know the
debug team has done some work.
Please let us know what needs to be done on the compiler side.
Note: I could also release a workaround to fix this: if a folder is checked then
export the corresponding source folder without checking each class file.
However, this will fail if the user checks single source (SQLJ) files to be
exported.

I'm not up on all the compiler workings, bug I beleive it is the SQLJ compiler 
or JSP compiler that does the work for JSR045 - i.e. it sticks the debug 
attributes in, no the Java compiler.
Daniel - The compiler does *not* generate the .class file according to JSR-045
Just to add a bit more detail to Brian's last update, specifically the SQLJ 
compiler doesn't conform to JSR-045.
Fix has been released to HEAD and R2_1_maintenance branch.


Daniel,

Could you please provide steps to reproduce using 3.3M6?
I'd like to check that the new API on JavaCore works fine if used in this specific case.
Martin,

Does the new API impact this test case ? The new API clearly mentions that only .class files created by the Java builder are returned.
>Could you please provide steps to reproduce using 3.3M6?
There are no steps, unless you install WSAD. I doubt that the new API would cover that case as the class files are generated by WSAD's SQLJ compiler.
At least I'd like to be sure it doesn't break it.
Martin, any thoughts?
>At least I'd like to be sure it doesn't break it.
The new code won't help them i.e. they will still have to use the 'Export all output folders for checked projects' option that we added for them. I just verified that Martin's code changes do not affect this preference.
I don't think the new API can help us with this bug, but that wasn't really intended. The new API was most needed for bug 170310.
