package p;
public class A {
	protected void m(){}
}


package p;
public class B {
	public void n(q.C c, A a) {
		a.m();
	}
}

package q;
public class C {

}

When p.B.n(q.C, A) is moved to q.C, Eclipse move-refactoring pops up a warning message:

"The visibility of method `p.A.m()' will be changed to public."

When I click the `continue' button to finish the refactoring, p.A.m() is still `protected' (no changes).

That is an error.

package p;
public class A {
	protected void m(){}
}


package p;
public class B {
	public void n(q.C c, A a) {
		a.m();
	}
}

package q;
public class C {

}

When p.B.n(q.C, A) is moved to q.C, Eclipse move-refactoring pops up a warning message:

"The visibility of method `p.A.m()' will be changed to public."

When I click the `continue' button to finish the refactoring, p.A.m() is still `protected' (no changes).

That is an error.
Reproducible using Eclipse build: I20130605-2000. It is the same behavior in Eclipse 3.8.1 also. The refactoring results in compiler error as the visibility of the method is not modified after the refactoring operation.
Created attachment 232727
Patch with testcases.

The CompilationUnitRewrite instance which was used to change the access modifier was not included as part of the TextChangeManager. This resulted in the in-complete refactoring.
With this patch the files that require method visibility modification is also added as part of the TextChangeManager. Added a testcase for this scenario.
(In reply to comment #2)
> Created attachment 232727 [details] [diff]
> Patch with testcases.

Storing the newly created rewrites in #getCompilationUnitRewrite makes. I don't think we neeed #getRewrites since
1. the client can already populate it upfront/before setting it
2. the client owns the map and already has access to it
Thanks Dani. As you said the only change required was in #getCompilationUnitRewrite. Updated the code and released the fix as: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=8426c3bdd4e7c31d2c4a99dad8e963770d5f004e
