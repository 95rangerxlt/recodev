According to Lambda specification
"Any local variable used but not declared in a lambda body must be definitely assigned  before the lambda body."
http://cr.openjdk.java.net/~dlsmith/jsr335-0.6.1/B.html

Eclipse 4.3 permits assigning a local variable before a lambda expression within the lambda expression.

public class Sample{

interface Int {
		void setInt(int[] i);

	}
public static void main(String[] args) {
 

int j;
		

		Int int1 = (int... i) -> {
			j=10;
		};

}

}

According to Lambda specification
"Any local variable used but not declared in a lambda body must be definitely assigned  before the lambda body."
http://cr.openjdk.java.net/~dlsmith/jsr335-0.6.1/B.html

Eclipse 4.3 permits assigning a local variable before a lambda expression within the lambda expression.

public class Sample{

interface Int {
		void setInt(int[] i);

	}
public static void main(String[] args) {
 

int j;
		

		Int int1 = (int... i) -> {
			j=10;
		};

}

}
Jesper, please take a look.
(In reply to comment #0)
> According to Lambda specification
> "Any local variable used but not declared in a lambda body must be
> definitely assigned  before the lambda body."
> http://cr.openjdk.java.net/~dlsmith/jsr335-0.6.1/B.html
> 
> Eclipse 4.3 permits assigning a local variable declared before a lambda expression
> within the lambda expression.
> 
> public class Sample{
> 
> interface Int {
> 		void setInt(int[] i);
> 
> 	}
> public static void main(String[] args) {
>  
> 
> int j;
> 		
> 
> 		Int int1 = (int... i) -> {
> 			j=10;
> 		};
> 
> }
> 
> }
Jesper, OK to assign this to Anirban so you can focus on JEP118 + 120 ?
I'll assume the absence of objection implies consent. Anirban, please take this forward.
(In reply to comment #4)
> I'll assume the absence of objection implies consent. Anirban, please take
> this forward.

Certainly, I've  been vacationing, and back to JEP118/120 work now
(In reply to comment #5)
> (In reply to comment #4)
> > I'll assume the absence of objection implies consent. Anirban, please take
> > this forward.
> 
> Certainly, I've  been vacationing, and back to JEP118/120 work now

Excellent, welcome back ! My plan is to leave your plate uncluttered so that
you are able to make progress on 118/120 without context switches.
Hello,

After running the previous testcase in javac, I see the following error:

Sample.java:14: error: local variables referenced from a lambda expression must
be final or effectively final
                        j=10;
                        ^
1 error



Eclipse IDE does not give the error, hence, discrepancy, needs to be fixed.


But, the point to be noted is, there might be one of the two possible cases possible:

* if the variable (in this case j) is not initialized and, inside the lambda expression the L-value is used, the error reported is "variable should be effectively final".

* if the variable (in this case j) is not initialized and, inside the lambda expression the R-value is used, then the error reported will be "variable might not have been initialized".


So, in either case, there does not seem to be a situation where an error of type : "unitialized variable being used in lambda expression" being reported.

Is there any situation that I'm missing?

Thanks
Anirban
(In reply to comment #7)

> But, the point to be noted is, there might be one of the two possible cases
> possible:
> 
> * if the variable (in this case j) is not initialized and, inside the lambda
> expression the L-value is used, the error reported is "variable should be
> effectively final".
> 
> * if the variable (in this case j) is not initialized and, inside the lambda
> expression the R-value is used, then the error reported will be "variable
> might not have been initialized".
> 
> 
> So, in either case, there does not seem to be a situation where an error of
> type : "unitialized variable being used in lambda expression" being reported.
> 
> Is there any situation that I'm missing?

Anirban, I am not sure what is the question here. How is ""unitialized variable being used in lambda expression" different from the second bullet viz "variable
> might not have been initialized" ???
Created attachment 234733
Patch for the fix

Patch for the fix
Released the fix with the following changes:

(1) Added one more test for anonymous classes.
(2) Changed:

	boolean bVal;
	if ((bVal = flowInfo.isPotentiallyAssigned(localBinding)) || (!bVal && (this.bits & ASTNode.IsCapturedOuterLocal) != 0)) {

to be:

if (flowInfo.isPotentiallyAssigned(localBinding) || (this.bits & ASTNode.IsCapturedOuterLocal) != 0) {

Since Java uses short circuiting for || and && evaluation, the use of bVal
does not make sense.

Thanks Anirban.
