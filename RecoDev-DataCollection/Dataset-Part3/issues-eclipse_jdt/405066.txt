BETA_JAVA8:

This ER will be used to implement the infrastructure support for generating
code for lambda expressions and method references.

Among other things:

We need to add capability to generate:

 - ConstantPool sections for MethodHandles, MethodType, InvokeDynamic 
 - Attribute section for BootStrapMethods
 - Adding of InnerClass reference for MethodHandles.Lookup

The patch at https://bugs.eclipse.org/bugs/show_bug.cgi?id=400875 has
support for these. The infrastructure portion needs to be separated out,
reviewed and released.

BETA_JAVA8:

This ER will be used to implement the infrastructure support for generating
code for lambda expressions and method references.

Among other things:

We need to add capability to generate:

 - ConstantPool sections for MethodHandles, MethodType, InvokeDynamic 
 - Attribute section for BootStrapMethods
 - Adding of InnerClass reference for MethodHandles.Lookup

The patch at https://bugs.eclipse.org/bugs/show_bug.cgi?id=400875 has
support for these. The infrastructure portion needs to be separated out,
reviewed and released.
(In reply to comment #0)

> The patch at https://bugs.eclipse.org/bugs/show_bug.cgi?id=400875 has
> support for these. The infrastructure portion needs to be separated out,
> reviewed and released.

I am doing this now. I'll a post a patch shortly.
Created attachment 229476
Jesper work for infrastructure changes

Here are changes I made:

(1) Added JCP disclaimer and updated copyright on all files.
(2) ClassFileConstants.java: Renamed MethodHandleRefKindInvokeNewSpecial
to be MethodHandleRefKindNewInvokeSpecial to be consistent with JVMS 4.4.8
(3) Opcodes.java: Inserted the new opcode in its proper place so as to
maintain the monotonically ascending sequence.
(4) Scope.java: we need to build some resilience for handling misconfigured
JREs. It looks like getJavaLangInvokeMethodHandlesLookup could return null ?
Will raise a follow up defect for this.
(5) TypeConstants.java: Deleted the new field JAVA_LANG_INVOKE_METHODHANDLES_LOOKUP  as it is unused. Rearranged the new
fields to minimize diffs.
(6) FunctionalExpression.java: Renamed the method getInstantiatedMethodType()
to be signature(), since that is after all what it is returning and that
signature is used in turn to materialize a MethodType.

Yet to be reviewed:

ClassFile.java
CodeStream.java
ConstantPool.java
(In reply to comment #2)

> Yet to be reviewed:
> 
> ClassFile.java
> CodeStream.java
> ConstantPool.java

Continuing review:

(7) CodeStream.java: invokeDynamic is missing bounds check and growing of
code stream byte array.

(8) ClassFile.java: Fixed a couple of compiler warnings in the original patch.

(9) ClassFile.java: renamed functionalBootstrapMethods to be bootstrapMethods,
Likewise, recordBootStrapMethod to recordBootstrapMethod and generateBootStrapMethods to generateBootstrapMethods 

(10) ClassFile.java: Changed bootstrapMethods from a being captured in a linked
list to an ArrayList. We don't seem to use LinkedList's at all the in the 
compiler and this can keep the footprint smaller for the batch compiler.

(11) ClassFile.java: changed ! this.bootstrapMethods.isEmpty() into
!this.bootstrapMethods.isEmpty() to be consistent with rest of code base.

(12) ClassFile.java: Changed formatting of this.bootstrapMethods.size()-1 to be
this.bootstrapMethods.size() - 1 to be consistent with rest of code base.

(13) ClassFile.java: Replaced occurrence of
(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
with ConstantPool.JAVA_LANG_INVOKE_LAMBDAMETAFACTORY_METAFACTORY_SIGNATURE

(14) ConstantPool.java: Eliminated a couple of unused fields.

(15) Changed "signature" to "descriptor" in various places.

Implementation released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=ea1fe8ed052821b2b1ca5a7ad0079411db5ede64

Thanks Jesper.
I have a question regarding SourceTypeBinding.addSyntheticMethod(LambdaExpression).

I can't clearly associate which bug brought that method so I hope this is a good
place to discuss it.

Why do you store an array of accessor methods? Was this code copied from similar
situations where we indeed need e.g. a pair of get/set accessors?
Seeing the allocation of an array of length 1 makes me feel I'm missing some point.

Hidden design or bug?
Next is a design question:

Why is outerLocalVariables a field of LambdaExpression?
In previous code SyntheticArgumentBinding are stored in bindings (NestedTypeBinding) or scope (MethodScope) but never in ast nodes.

I'm not sure about motivation for the existing design (ability to discard information that is only connected to the scope _might_ play a role), but I guess every deviation from existing design should have a good reason behind. Could you please explain? Thanks.
(In reply to comment #4)

> Why do you store an array of accessor methods? Was this code copied from
> similar
> situations where we indeed need e.g. a pair of get/set accessors?
> Seeing the allocation of an array of length 1 makes me feel I'm missing some
> point.

Sorry for the delay in responding to this. 
> 
> Hidden design or bug?

I would say it is an attempt to play along with the existing infrastructure
and co-exist harmoniously.

See that STB#syntheticMethods() does a 

while (methodArrayIterator.hasNext()) {
		SyntheticMethodBinding[] methodAccessors = (SyntheticMethodBinding[]) methodArrayIterator.next();

OIOW, there is a presumption that the values element of the hashmap is an
array of SMBs.

For prior art see:

addSyntheticEnumMethod: which allocates an array of two entries, but uses
only one element of it - so we are actually doing better by allocating just
a single cell array where we know it would suffice.

Also addSyntheticMethodForSwitchEnum, addSyntheticMethodForEnumInitialization
addSyntheticBridgeMethod (both overloaded versions) - these all use only one
cell of the array, but still opt for the array to co-exist and to avoid a CCE.
(In reply to comment #5)
> Next is a design question:
> 
> Why is outerLocalVariables a field of LambdaExpression?
> In previous code SyntheticArgumentBinding are stored in bindings
> (NestedTypeBinding) or scope (MethodScope) but never in ast nodes.

I haven't (re)looked into how captured locals are tracked for local classes,
but it looks most natural that a lambda's state would include information
of what outer local it accesses. Yes, technically this decoration could happen 
on the MethodBinding, but given we don't have a special kind for lambdas we
would increase memory pressure - I admit that is a post facto defense and a
weak one at that.

Looking at the uses of this variable, it looks quite natural that it belongs
in the AST node - all uses are from the AST node and it is a private field.
(In reply to comment #6)
> (In reply to comment #4)
> 
> > Why do you store an array of accessor methods? Was this code copied from
> > similar
> > situations where we indeed need e.g. a pair of get/set accessors?
> > Seeing the allocation of an array of length 1 makes me feel I'm missing some
> > point.
> 
> Sorry for the delay in responding to this. 
> > 
> > Hidden design or bug?
> 
> I would say it is an attempt to play along with the existing infrastructure
> and co-exist harmoniously.
> 
> See that STB#syntheticMethods() does a 
> 
> while (methodArrayIterator.hasNext()) {
> 		SyntheticMethodBinding[] methodAccessors = (SyntheticMethodBinding[])
> methodArrayIterator.next();

You're right, this snippet makes the underlying assumption explicit.
I was confused by seeing single elements in the FIELD_EMUL slot of the
same structure.

I could still argue that an explicit instanceof is probably cheaper than
creating 1-elem arrays, but at this point it's probably not very relevant
after all. The code is consistent for all METHOD_EMUL and that's good.
