This class document should be updated to clearly state that it cannot be subclassed.
The component.xml file for jdt/ui contains:
  <type name="PreferenceConstants" subclass="false" instantiate="false"/>

This should be reflected in the documentation.

This class document should be updated to clearly state that it cannot be subclassed.
The component.xml file for jdt/ui contains:
  <type name="PreferenceConstants" subclass="false" instantiate="false"/>

This should be reflected in the documentation.
Best would be to make that class final but it's too late for that now. I've added a Javadoc comment.

Olivier, do you have a pointer to a document that describes what to put into component.xml? E.g. I'd like to see a document that describes:
- do we need to put subclass="false" for a final class (I think Jeem once said no
  as this is redundant)
- do we need to put instantiate="false" for a class that has a private
  constructor or is this redundant as well?
- does implement="false" for interfaces imply subclass="false"
- what does an entry like <type name="IMarkerActionFilter"/> mean? Everything
  true or false?
  
Note that the class has a private constructor. It has never been possible to instantiate or subclass this type.

But I still think its good to have the comment in the Javadoc, to make the intend of the class clear to readers of the Javadoc.

Same for the component.xml. As far as I know, the current convention has been to only spec what isn't yet enforced by Java anyways. E.g instantiating an abstract class has never been possible, so somtimes this constraint isn't spec'ed in component.xml.
But again, I think it's good to be as explicit as possible.
