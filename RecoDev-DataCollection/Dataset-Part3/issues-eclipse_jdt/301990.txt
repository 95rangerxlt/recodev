HEAD

Bug 283950 shows examples where content assist automatically adds type arguments. There are also other cases where we insert them but the user does not want them (e.g. when prototyping code where raw types are good enough for the moment).

Currently, it's quite cumbersome to delete the arguments, the '<', and the '>'. The problem could be alleviated a bit if it would be easier to remove the arguments when this happens.

Example:
- have "Map|"
- content assist at | gives "Map<K, V>" with "K" selected
- backspace gives "Map<|, V>"
- second backspace gives "Map|, V>"

Proposal:
The second backspace should work similar to what happens today if I type "(" or and then press backspace: In that case, the auto-inserted ")" is removed automatically.
For parameterized types, the analogon would be to remove the whole arguments list on the second backspace, i.e. make it just leave "Map".

HEAD

Bug 283950 shows examples where content assist automatically adds type arguments. There are also other cases where we insert them but the user does not want them (e.g. when prototyping code where raw types are good enough for the moment).

Currently, it's quite cumbersome to delete the arguments, the '<', and the '>'. The problem could be alleviated a bit if it would be easier to remove the arguments when this happens.

Example:
- have "Map|"
- content assist at | gives "Map<K, V>" with "K" selected
- backspace gives "Map<|, V>"
- second backspace gives "Map|, V>"

Proposal:
The second backspace should work similar to what happens today if I type "(" or and then press backspace: In that case, the auto-inserted ")" is removed automatically.
For parameterized types, the analogon would be to remove the whole arguments list on the second backspace, i.e. make it just leave "Map".
3.6 if time allows.
*** Bug 336043 has been marked as a duplicate of this bug. ***
*** Bug 283950 has been marked as a duplicate of this bug. ***
*** Bug 356282 has been marked as a duplicate of this bug. ***
Markus and I discussed this recently and we came to the conclusion that we don't want to encourage that style of coding. These days one should use generics.
We discussed that we don't intend to make life easier for people who want to use raw types. But this bug is mainly about the problems mentioned in the dups, e.g. bug 283950. These have nothing to do with raw types, but they are about static methods in parameterized types.

I just used Map as example because it has two type parameters. AtomicReferenceFieldUpdater is a better example from the JRE. If you try to call its static method, then you always have to manually delete the inserted type arguments.
Created attachment 227178
Patch

Attached patch has the following behavior:

For parameterized types, where ambiguous type arguments along with '<' and '>' are inserted by content assist, deleting the '<' while the linked mode is being left, will delete the entire text up to '>'.

This is done by adding the positions for opening and closing brackets to the document and performing a post notification replace operation if '<' is deleted when the linked mode is left.

This will behave as the proposal in comment #0 when the formatter profile does not specify a whitespace after opening the angle bracket (Map<K, V>) i.e. the first backspace will delete the first type arg and the second backspace will delete the entire text up to '>'.

If a whitespace is specified after opening the angle bracket via the formatter profile (Map< K, V >), the first type arg will be highlighted and the user can move to the '<' using the left arrow key to keep the linked mode active and then deleting the '<' will delete the entire text up to '>'.

Dani, please check the patch and see if the behavior is fine.
Comment on attachment 227178
Patch

The patch is close to final. The biggest issue, is, that the added positions are not removed again. They should be removed in a 'finally' block.

I would not add the linking listener, onlyAppendArguments or !(document instanceof IDocumentExtension).

Since you already query the preferences, you could also deal with the extra space: just delete everything when deleting the space and the '<' is on the left of the current offset.
(In reply to comment #8)
> I would not add the linking listener, onlyAppendArguments or !(document
> instanceof IDocumentExtension).

I would not add the linking listener IF
(In reply to comment #8)
> Since you already query the preferences, you could also deal with the extra
> space: just delete everything when deleting the space and the '<' is on the
> left of the current offset.

On deleting the space, if we delete everything starting from '<' to '>, the expected behavior is to place the caret immediately after the text i.e. at the offset where '<' was present.

But since the event started at the offset where 'space' was present, due to the code in StyledText.modifyContent(...) where the caret position is always updated to the offset after the new text starting from the event's start offset, the caret is placed at the offset where 'space' was present instead of the offset where '<' was present. 
Also, since the caret updation in the above code happens after the text replacement and the post notification's replace, even if we set the caret to the required position in the post notification's perform method, it is overridden with the above mentioned code.

Hence, it is not possible to place the caret at the correct position which doesn't look good and causes problem if it was placed at the position of line delimiter and content-assist is invoked on that.

The other way to deal with space is to delete everything starting from 'space' to '>', leaving '<' as it is, where the caret will be placed after '<'.

Dani, please share your views on how to proceed.
Created attachment 229057
Incomplete Patch - Handling space after '<'

(In reply to comment #10)
> (In reply to comment #8)
> > Since you already query the preferences, you could also deal with the extra
> > space: just delete everything when deleting the space and the '<' is on the
> > left of the current offset.
> 
> On deleting the space, if we delete everything starting from '<' to '>, the
> expected behavior is to place the caret immediately after the text i.e. at
> the offset where '<' was present.
> 
> But since the event started at the offset where 'space' was present, due to
> the code in StyledText.modifyContent(...) where the caret position is always
> updated to the offset after the new text starting from the event's start
> offset, the caret is placed at the offset where 'space' was present instead
> of the offset where '<' was present. 
> Also, since the caret updation in the above code happens after the text
> replacement and the post notification's replace, even if we set the caret to
> the required position in the post notification's perform method, it is
> overridden with the above mentioned code.
> 
> Hence, it is not possible to place the caret at the correct position which
> doesn't look good and causes problem if it was placed at the position of
> line delimiter and content-assist is invoked on that.
> 
> The other way to deal with space is to delete everything starting from
> 'space' to '>', leaving '<' as it is, where the caret will be placed after
> '<'.
> 
> Dani, please share your views on how to proceed.

Attached the code that has the above mentioned issue of setting the caret position, so that it is easy to check.

It can be executed with "Map|;" as the example. 
After invoking content assist and deleting the space, the caret is placed after ';'.

Also, use "Map|" as example and after deleting the space, invoke content assist once again at the position where caret is now placed. 
We can see that the caret was placed at the position of line delimiter and hence it causes problem on invoking content-assist.
Created attachment 229058
Patch

(In reply to comment #8)
> The patch is close to final. The biggest issue, is, that the added positions
> are not removed again. They should be removed in a 'finally' block.
Done.

> I would not add the linking listener IF, onlyAppendArguments or !(document
> instanceof IDocumentExtension).
Moved all the related code under the above condition.
(In reply to comment #12)

We would also have to (re-)set the caret, but that would need much more work and change the code so that we can access the text widget. That's not worth it, especially, since the behavior itself feels a bit wrong.


(In reply to comment #12)
> Created attachment 229058 [details] [diff]
> Patch
> 
> (In reply to comment #8)
> > The patch is close to final. The biggest issue, is, that the added positions
> > are not removed again. They should be removed in a 'finally' block.
> Done.
> 
> > I would not add the linking listener IF, onlyAppendArguments or !(document
> > instanceof IDocumentExtension).
> Moved all the related code under the above condition.

Thanks Noopur. Committed that patch with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=d6fc5be30a671d5a752514e033eb20332d7e4373
*** Bug 469324 has been marked as a duplicate of this bug. ***
