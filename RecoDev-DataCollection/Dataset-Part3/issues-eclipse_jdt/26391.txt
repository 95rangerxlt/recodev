Sometimes two packages contain classes of the same name.  When both packages 
are imported using *, this can lead to a compile-time error of "ambiguous 
type".  The way to resolve this is to import the class you want explicitly, as 
follows:

import java.awt.*;
import java.util.*;
import java.util.List;

public class OptimizeImportsBug {
    List list;     // this means "java.util.List", due to the explicit import
    Frame frame;
}

Eclipse's "optimize imports" does not respect this sort of disambiguating 
import.  If you set Preferences:Java:Organize Imports:Number of qualified 
imports to "1", and apply "Optimize Imports," the above code will turn into 

import java.awt.*;
import java.util.*;

public class OptimizeImportsBug {
    List list;     // this no longer means "java.util.List"!
    Frame frame;
}

and the file will fail to compile.  Clearly, "optimize imports" should not 
introduce compile errors!

This sort of bug is particularly insidious, since it is not often clear which 
class was intended, and it is possible to accidentally choose the wrong one, 
but still get it to compile, leading to type coercion problems in other parts 
of the program.

The proper solution is for Optimize Imports to scan the file for potentially 
ambiguous types before removing explicit singleton import statements.

(BTW, I needed a reference to Frame, otherwise the entire "import java.awt.*" 
would have been optimized away, and the bug would not be demonstrated.)

Sometimes two packages contain classes of the same name.  When both packages 
are imported using *, this can lead to a compile-time error of "ambiguous 
type".  The way to resolve this is to import the class you want explicitly, as 
follows:

import java.awt.*;
import java.util.*;
import java.util.List;

public class OptimizeImportsBug {
    List list;     // this means "java.util.List", due to the explicit import
    Frame frame;
}

Eclipse's "optimize imports" does not respect this sort of disambiguating 
import.  If you set Preferences:Java:Organize Imports:Number of qualified 
imports to "1", and apply "Optimize Imports," the above code will turn into 

import java.awt.*;
import java.util.*;

public class OptimizeImportsBug {
    List list;     // this no longer means "java.util.List"!
    Frame frame;
}

and the file will fail to compile.  Clearly, "optimize imports" should not 
introduce compile errors!

This sort of bug is particularly insidious, since it is not often clear which 
class was intended, and it is possible to accidentally choose the wrong one, 
but still get it to compile, leading to type coercion problems in other parts 
of the program.

The proper solution is for Optimize Imports to scan the file for potentially 
ambiguous types before removing explicit singleton import statements.

(BTW, I needed a reference to Frame, otherwise the entire "import java.awt.*" 
would have been optimized away, and the bug would not be demonstrated.)
Organize imports is a JDT/UI.
Move to JDT/UI.
fixed > 20021120
