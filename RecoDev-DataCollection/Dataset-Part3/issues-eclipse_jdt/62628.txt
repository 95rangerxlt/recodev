Version: 2.1.3. Build: 200403101828

The rename refactoring does not take mutiple source directories into account
when renaming members with default (package) access.

Here is an example. 
1. Create two source folders: src and test.
2. Add the two classes (files) below: mypackage.ClassA and mypackage.ClassB. 

--- File: src/mypackage/ClassA.java
package mypackage;

public class ClassA {
	int value;
	void method() {
	}
}
---


--- File: test/mypackage/ClassB.java
package mypackage;

public class ClassB {
	public void foo(ClassA a) {
		a.value = 7;
		a.method();
	}
}
---

3. Place the carret on the field value in ClassA and select rename. Enter a new
name and press preview. The expected result are two changes: the field is
renamed and the only reference in ClassB.foo(ClassA) is renamed. However, the
reference in ClassB is left untouched. Press cancel.

Step 3 can be repeated for methods (ClassA.mehthod()) and classes (ClassA). All
renames show that if the renamed element is declared with default (package)
access then references within the same package but in a different source folder
are forgotten and not renamed.



* Work-around:
1. Declare the element public.
2. Rename the element.
3. Declare the element package.

In some cases step 1 results in compilation errors, for example, when declaring
an overridden package method as public, results in compilation errors ("Cannot
reduce the visibility of the inherited method from ClassA"). It seems that
effect of these errors can be ignored when executing the rename.

Version: 2.1.3. Build: 200403101828

The rename refactoring does not take mutiple source directories into account
when renaming members with default (package) access.

Here is an example. 
1. Create two source folders: src and test.
2. Add the two classes (files) below: mypackage.ClassA and mypackage.ClassB. 

--- File: src/mypackage/ClassA.java
package mypackage;

public class ClassA {
	int value;
	void method() {
	}
}
---


--- File: test/mypackage/ClassB.java
package mypackage;

public class ClassB {
	public void foo(ClassA a) {
		a.value = 7;
		a.method();
	}
}
---

3. Place the carret on the field value in ClassA and select rename. Enter a new
name and press preview. The expected result are two changes: the field is
renamed and the only reference in ClassB.foo(ClassA) is renamed. However, the
reference in ClassB is left untouched. Press cancel.

Step 3 can be repeated for methods (ClassA.mehthod()) and classes (ClassA). All
renames show that if the renamed element is declared with default (package)
access then references within the same package but in a different source folder
are forgotten and not renamed.



* Work-around:
1. Declare the element public.
2. Rename the element.
3. Declare the element package.

In some cases step 1 results in compilation errors, for example, when declaring
an overridden package method as public, results in compilation errors ("Cannot
reduce the visibility of the inherited method from ClassA"). It seems that
effect of these errors can be ignored when executing the rename.
This got fix for 3.0.
