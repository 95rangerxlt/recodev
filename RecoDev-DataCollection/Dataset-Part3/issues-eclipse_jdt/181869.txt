If an annotation is defined with an enum value type, or enum array value type, and an instance of the annotation is incorrectly given an annotation value instead, processing it results in an IllegalArgumentException.

  enum Enum { A, B }
  @interface Anno { Enum[] value(); }

  @Anno(@Anno)
  class X {}

processed with:

  Declaration d = _env.getTypeDeclaration("X");
  Anno anno = d.getAnnotation(Anno.class);
  Enum[] enumval = anno.value();

produces:


java.lang.IllegalArgumentException: [LEnum; is not an interface
	at java.lang.reflect.Proxy.getProxyClass(Proxy.java:362)
	at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:581)
	at org.eclipse.jdt.apt.core.internal.env.AnnotationInvocationHandler._getReflectionValue(AnnotationInvocationHandler.java:218)
	at org.eclipse.jdt.apt.core.internal.env.AnnotationInvocationHandler.getReflectionValueWithTypeConversion(AnnotationInvocationHandler.java:117)
	at org.eclipse.jdt.apt.core.internal.env.AnnotationInvocationHandler.invoke(AnnotationInvocationHandler.java:109)
	at $Proxy0.value(Unknown Source)
	at org.example.processor.internal.Processor.process(Processor.java:57)
[...]

There is a similar situation when the value is a Class object rather than an annotation:

java.lang.IllegalStateException: sourceValue is a type binding.
	at org.eclipse.jdt.apt.core.internal.env.AnnotationInvocationHandler._getReflectionValue(AnnotationInvocationHandler.java:203)
	at org.eclipse.jdt.apt.core.internal.env.AnnotationInvocationHandler.getReflectionValueWithTypeConversion(AnnotationInvocationHandler.java:117)
	at org.eclipse.jdt.apt.core.internal.env.AnnotationInvocationHandler.invoke(AnnotationInvocationHandler.java:109)
	at $Proxy0.value(Unknown Source)
	at org.example.processor.internal.Processor.process(Processor.java:55)

Note that both situations involve incorrect source code; but we should not be throwing an exception, we should be returning null from the anno.value() call.

If an annotation is defined with an enum value type, or enum array value type, and an instance of the annotation is incorrectly given an annotation value instead, processing it results in an IllegalArgumentException.

  enum Enum { A, B }
  @interface Anno { Enum[] value(); }

  @Anno(@Anno)
  class X {}

processed with:

  Declaration d = _env.getTypeDeclaration("X");
  Anno anno = d.getAnnotation(Anno.class);
  Enum[] enumval = anno.value();

produces:


java.lang.IllegalArgumentException: [LEnum; is not an interface
	at java.lang.reflect.Proxy.getProxyClass(Proxy.java:362)
	at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:581)
	at org.eclipse.jdt.apt.core.internal.env.AnnotationInvocationHandler._getReflectionValue(AnnotationInvocationHandler.java:218)
	at org.eclipse.jdt.apt.core.internal.env.AnnotationInvocationHandler.getReflectionValueWithTypeConversion(AnnotationInvocationHandler.java:117)
	at org.eclipse.jdt.apt.core.internal.env.AnnotationInvocationHandler.invoke(AnnotationInvocationHandler.java:109)
	at $Proxy0.value(Unknown Source)
	at org.example.processor.internal.Processor.process(Processor.java:57)
[...]

There is a similar situation when the value is a Class object rather than an annotation:

java.lang.IllegalStateException: sourceValue is a type binding.
	at org.eclipse.jdt.apt.core.internal.env.AnnotationInvocationHandler._getReflectionValue(AnnotationInvocationHandler.java:203)
	at org.eclipse.jdt.apt.core.internal.env.AnnotationInvocationHandler.getReflectionValueWithTypeConversion(AnnotationInvocationHandler.java:117)
	at org.eclipse.jdt.apt.core.internal.env.AnnotationInvocationHandler.invoke(AnnotationInvocationHandler.java:109)
	at $Proxy0.value(Unknown Source)
	at org.example.processor.internal.Processor.process(Processor.java:55)

Note that both situations involve incorrect source code; but we should not be throwing an exception, we should be returning null from the anno.value() call.
Created attachment 66788
proposed patch

Proposed patch returns null from method invocation handler when actual value is annotation binding and expected type is anything other than annotation type.
+1 Looks good.
Fixed for RC1.  We now return null in this scenario, which is analogous to what we would do if the value were some other non-array object.  Test case added to ExceptionHandlingTests.
