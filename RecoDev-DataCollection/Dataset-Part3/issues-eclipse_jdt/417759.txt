BETA_JAVA8:

Following program causes the compiler to cause an NPE:

// --
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

import org.eclipse.jdt.annotation.NonNull;

@Target(ElementType.TYPE_USE)
@interface TypeAnnotation {
	
}
public class X<T> {
   class Y {}
	void foo(@NonNull X<@NonNull ?> l) { 
	}	
	public static void main(String[] args) {
		X<String> s = new X<>();
                s.foo(s); 
	}
}

BETA_JAVA8:

Following program causes the compiler to cause an NPE:

// --
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

import org.eclipse.jdt.annotation.NonNull;

@Target(ElementType.TYPE_USE)
@interface TypeAnnotation {
	
}
public class X<T> {
   class Y {}
	void foo(@NonNull X<@NonNull ?> l) { 
	}	
	public static void main(String[] args) {
		X<String> s = new X<>();
                s.foo(s); 
	}
}
My bad, beginner's mistake actually, thanks for catching!

Test & fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=a51f0328f1978f4c547fe994573879b0bcceba88

I left a TODO in the code because we still need to decide a few things about where and when we will accept and interpret null annotations, notably, what happens if a wildcard / a type variable has multiple null-annotated bounds?
This would not be very useful, but the exact rules have yet to be defined. I'll address those issues via bug 392238.
