BETA_JAVA8:

We need a DOM/AST node type that corresponds to the compiler AST node
ReferenceExpression. The interesting properties are Name/Type/Primary,
Method name, whether constructor reference or not.

BETA_JAVA8:

We need a DOM/AST node type that corresponds to the compiler AST node
ReferenceExpression. The interesting properties are Name/Type/Primary,
Method name, whether constructor reference or not.
Manoj, please follow up, TIA.
(In reply to comment #0)
> BETA_JAVA8:
> 
> We need a DOM/AST node type that corresponds to the compiler AST node
> ReferenceExpression. The interesting properties are Name/Type/Primary,
> Method name, whether constructor reference or not.

There have been some changes on the compiler side, we now internally
represent the different forms of LHS of :: using a single abstraction
Expression. On the compiler AST side, TypeReference is an Expression,
so is SuperReference and narurally primaries are too.

Not so on the DOM side. So our options are to create multiple node types
or to represent LHS as ASTNode. I would prefer the latter with clear
documentation and throws of exceptions on constraint violations.

Markus, what would you prefer from a client's side ? TIA.

The fields from the compiler AST that would be of interest are:

        public Expression lhs;
	public TypeReference [] typeArguments;
	public char [] selector;

See that selector is set to "<init>" for constructor references. This
is fine for the compiler AST, but may need some cleaner approach for
DOM/AST.
Markus: I am proceeding with the LHS being ASTNode as discussed in comment 2. Let me know if you have any thoughts.
Created attachment 229309
Proposed Patch - WIP

This a function patch in WIP stage. Code cleanup, throwing unsupported exceptions, test cases etc pending in general.

Markus, Srikanth: Any comments regarding the node structure in general? 

Specifically, the case of new as in lhs :: new is represented as Name with the typeBinding as void (since this would point to the constructor - see method binding of the same node). This I believe is not fully correct as this is new and would be a ClassInstanceCreation. However, representing new as a classInstanceCreation may be an overkill. So one option is to create another node, NewReference (extends Expression), and have the typeBinding of NewReference point to the class Type.
Created attachment 229310
Proposed Patch - WIP - Naive for ASTViewer

This patch can be applied to ui for viewing the ReferenceExpression
(This patch is not intended to be committed - just for use for debug/viewing)
- The nodes should be called MethodReference and SuperMethodReference (name from the grammar; same pattern as in [Super]MethodInvocation).

- The term "selector" is not used in the DOM AST. Use "Identifier" and "name", like in MethodInvocation.

- All code and Javadoc that can be copied or adapted from [Super]MethodInvocation.java should be the same as in the existing class. Compare the source files and remove all unnecessary differences.

- We generally don't use abbreviations in API names. Use "expression", not "lhs".

- For the last two cases in the grammar (with the 'new' token), we need a separate AST node type. ClassInstanceCreation can't be used, since it has a mandatory type and an arguments list. Candidates for the new node name are 
NewReference or CreationReference. I prefer CreationReference, since it uses the same terminology as the existing nodes that contain the 'new' token.

- We should also split up MethodReference into:
a) MethodReference with property "expression" of type Expression
b) UnboundMethodReference with property "type" of type Type

These cases are sufficiently different that they deserve separate AST nodes. The name "UnboundMethodReference" tells that in contrast to [Super]MethodReference, the method reference does _not_ bind a target expression (aka "receiver"). I'm not completely happy with this node name, so if you have a better suggestion, please speak up.
Alternative: "ExpressionMethodReference" for (a) and "MethodReference" for (b).
(b) could also be called "TypeMethodReference", but I find TypeMethod confusing.
Created attachment 230074
Proposed Patch

Note: 
0)As per the discussions, ReferenceExpression would be represented in four formats - CreationReference, ExpressionMethodReference, SuperMethodReference and TypeMethodReference.

1) There is a single space additional in the source range for new (CreationReference). The issue appears due to an additional value in ReferenceExpression.sourceEnd and hence will be addressed separately from this bug.

2)ASTConverter functions for ReferenceExpression can be implemeneted via polymorphic functions similar to convert, but the decision to stick to the if statements due to a)style of "code" around and b)unused parameters would be around for different types of ReferenceExpression.
(In reply to comment #7)
> Created attachment 230074 [details]
> Proposed Patch

Comments on the patch:

1. Some more description on the new AST node would be helpful, perhaps some references from the Language Spec and elaboration on what the node represents etc. would help anyone who uses the API. This applies all new nodes.

2. NaiveASTFlattener - Looks like the code processing the type arguments can be extracted to separate method to avoid some code duplication.

3. ASTConverter#retrieveInitAndSetPositions - the -1 and the subsequent +1 can be avoided.
(In reply to comment #8)
> Comments on the patch:
> 
Jay: Thanks for the review comments.

Markus: Could you please review so that I can post a patch incorporating both of your comments together.
The general node structure looks good and is in line with other AST node types. It's unfortunate that we need 4 new nodes, but having nodes of type ASTNode is worse.

The new node classes need the usual polish:
- compare with a similar node type and remove all unnecessary differences
  - e.g. getNodeType0() and subtreeMatch0(..) should be final

- add "(added in JLS4 API)" to first sentence

- Javadoc of SuperMethodReference#typeArguments: bad formatting; sentence that doesn't start with capital letter; wrong "(see constructor)"

- TypeMethodReference#TYPE_PROPERTY:
  - Javadoc is wrong
  - no cycle risk here
- TypeMethodReference#setType(Type)
  - no "or clears"
  - @param: lowercase "type"

- ExpressionMethodReference#setExpression(Expression)
  - no "or clears"

- CreationReference
  - 'expression' cannot be null. Fix field initialization and field/getter/setter Javadocs. Should be lazily initialized, like ClassInstanceCreation#type.

- ASTMatcher#match(TypeMethodReference, Object) has name and typeArguments swapped

- NaiveASTFlattener: Do we need all the spaces in the string literals around "new" and "::"? I think these can all be removed.

- Javadoc of ASTConverter#retrieveInitAndSetPositions(..): 1-3 problems per line

- ASTConverter#convert(ReferenceExpression):
  - name.toString() is for debugging purposes only. Use name.getIdentifier(). There's a second occurrence of name.toString() that should also be fixed.
  - remove tabs at end of lines


(In reply to comment #8)
> 1. Some more description on the new AST node would be helpful, perhaps some
> references from the Language Spec and elaboration on what the node
> represents etc. would help anyone who uses the API. This applies all new
> nodes.

At this point, there's no spec to refer to. References to the JSR would soon be out of date. IMO, the grammar is good enough for now. All I'd add is @see references to the other method reference nodes.

We can add JLS references once a stable JLS8 preview is available (for all nodes).
When I parse this class as AST.JLS4 and then try to resolve the type binding of the malformed NullLiteral (shouldn't that also be RECOVERED?), then I get the CCE below.

package jsr335;
import java.util.ArrayList;
public class MethodReferenceBug {
    {
        System.out.println("".equals(ArrayList::new ));
    }
}

java.lang.ClassCastException: org.eclipse.jdt.internal.compiler.ast.ReferenceExpression cannot be cast to org.eclipse.jdt.internal.compiler.ast.Literal
	at org.eclipse.jdt.core.dom.DefaultBindingResolver.resolveExpressionType(DefaultBindingResolver.java:739)
	at org.eclipse.jdt.core.dom.Expression.resolveTypeBinding(Expression.java:117)
	at org.eclipse.jdt.internal.ui.text.correction.QuickAssistProcessor.getInvertEqualsProposal(QuickAssistProcessor.java:2093)
	at org.eclipse.jdt.internal.ui.text.correction.QuickAssistProcessor.getAssists(QuickAssistProcessor.java:249)
Created attachment 232079
Proposed Patch

Markus: Have reworked to incorporate the comments (including Jay's). Planning to release it by Monday in case you have no further comments.

Jay: Please take a quick look at the reworked patch.
(In reply to comment #10)
> - add "(added in JLS4 API)" to first sentence

I really meant it like that. It should look the same as all other new node types. Apart from the usual consistency argument, the goal is also that this shows up on the package summary page:
http://help.eclipse.org/juno/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/dom/package-summary.html


> All I'd add is @see references to the other method reference nodes.

Looking at the 4 new nodes again, I realized that these should have a common superclass MethodReference, which should:
- declare the "typeArguments" property, and the typeArguments() and getTypeArgumentsProperty() methods
- declare the resolveMethodBinding() method
- have @see tags that point to all 4 subclasses

See e.g. VariableDeclaration and its subclasses for how to properly implement such an abstract superclass.
Created attachment 232151
Proposed Patch

Markus:
Reworked as per comment #13
 - Added a super class MethodReference with
   - typeArguments factory property method.
   - just one avatar of resolveMethod()
 - Formatting modifications.

Please let me know if you have further comments on the above. Planning to commit this version if there are no further comments.
I have no comments other than what I and Markus already mentioned. +1 if they have been taken care of.
Comment 11 was a real issue with the same cause as bug 403444. Fixed by extracting method ASTConverter#createFakeNullLiteral(FunctionalExpression) and adding a warning about this problem there.

Javadocs still didn't use proper English grammar (punctuation, capitalization):

- MethodReference: Javadoc should start with:
* Abstract base class of all AST node types that represent a method reference
* expression (added in JLS8 API).

The " (added in JLS8 API)" should be at the end of the first sentence. I also made the mistake to write JLS4 instead of JLS8.

- MethodReference#typeArguments: The full stop should be at the end of the sentence.
- MethodReference#internalTypeArgumentsFactory(..): Javadoc: *element* type
- MethodReference#internalTypeArguments2Property(): Remove "2" in name

- BindingResolver#resolveMethod(MethodReference): contains 3 double-spaces in front of "method reference"

Fixed these problems and released as http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=80351fb8a54757084b1b27c49cb8b0584bf78834

Manoj, please review again.


(In reply to comment #7)
> 1) There is a single space additional in the source range for new
> (CreationReference). The issue appears due to an additional value in
> ReferenceExpression.sourceEnd and hence will be addressed separately from
> this bug.

Please open a new bug for this or add a reference to an existing bug.
(In reply to comment #16)
> Comment 11 was a real issue with the same cause as bug 403444. Fixed by
> extracting method ASTConverter#createFakeNullLiteral(FunctionalExpression)
> and adding a warning about this problem there.

 I believe Srikanth is looking into this bug 410114

> The " (added in JLS8 API)" should be at the end of the first sentence. I
> also made the mistake to write JLS4 instead of JLS8.

I should have caught/thought...


> - BindingResolver#resolveMethod(MethodReference): contains 3 double-spaces
> in front of "method reference"
> 
> Fixed these problems and released as
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
> ?id=80351fb8a54757084b1b27c49cb8b0584bf78834
> 
> Manoj, please review again.

Thanks for the quick tat and the commit. Will review again.
> 
> 
> (In reply to comment #7)
> > 1) There is a single space additional in the source range for new
> > (CreationReference). The issue appears due to an additional value in
> > ReferenceExpression.sourceEnd and hence will be addressed separately from
> > this bug.
> 
> Please open a new bug for this or add a reference to an existing bug.
This is referenced in bug 384667#comment 6
*** Bug 410033 has been marked as a duplicate of this bug. ***
ExpressionMethodReference#expression and TypeMethodReference#type were not properly initialized.

The AST#new*() APIs typically don't take arguments. I've removed the arguments for the newly-added methods.

The structure of CreationExpression was wrong. The node in front of the "::" must be a Type, not an Expression. In ASTConverter#convert(ReferenceExpression), I also removed the 

    if (!name.getIdentifier().equals("<init>")) { //$NON-NLS-1$
        NullLiteral nullLiteral = new NullLiteral(this.ast);
        ...

, since I didn't find a scenario where this was used. If it ever needs to come back, then it should use the createFakeNullLiteral() method (and adhere to its Javadoc).

Fixed along with a few Javadoc and test fixes:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=f9b5a54e0afa9af686e707bcc0c484de0728c860
(In reply to comment #19)

> The AST#new*() APIs typically don't take arguments. I've removed the
> arguments for the newly-added methods.
> 
Some of the new APIs take arguments - Ref: newQualifiedType(Type,name). I followed the above convention with the arguments to ensure that the nodes will have valid values once created.  Is it better (Maybe from the client side perspective) to have these available without arguments during creation?
