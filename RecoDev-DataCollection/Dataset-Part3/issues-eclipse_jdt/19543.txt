Eclipse should allow the user to specify how all parts of Java source are 
displayed. For example, literals and methods should be differentiated. 
Currently there are relatively few such selectors. Other products that have 
more extensive syntax highlighting include:
JEdit 3.2.2 - 13 different "styles" or selectors
Netbeans 3.3.1

The benefits fit in well with Eclipse's superior cognitive support. The density 
of method calls or literal usage can be important visual indicators of 
complexity. Thanks.

Eclipse should allow the user to specify how all parts of Java source are 
displayed. For example, literals and methods should be differentiated. 
Currently there are relatively few such selectors. Other products that have 
more extensive syntax highlighting include:
JEdit 3.2.2 - 13 different "styles" or selectors
Netbeans 3.3.1

The benefits fit in well with Eclipse's superior cognitive support. The density 
of method calls or literal usage can be important visual indicators of 
complexity. Thanks.
not for 2.0 - defer
Reopening for 2.1 consideration
*** Bug 21150 has been marked as a duplicate of this bug. ***
Related to #11332.
*** Bug 25375 has been marked as a duplicate of this bug. ***
*** Bug 26531 has been marked as a duplicate of this bug. ***
*** Bug 22249 has been marked as a duplicate of this bug. ***
*** Bug 30176 has been marked as a duplicate of this bug. ***
*** Bug 31826 has been marked as a duplicate of this bug. ***
*** Bug 6714 has been marked as a duplicate of this bug. ***
*** Bug 11332 has been marked as a duplicate of this bug. ***
What is the current status of this bug? I see 10 duplicate bugs. There is no
target milestone, although I see some enhancements of syntax highlighting in
E3.0 M3 (method names are highlighted). 
What about local variables, static variables, etc.?
Is this bug (enhancement) included in E 3.0, or is it (again) deferred? 

Thanks for answering.

PS: I looked the other day at IntelliJ - I was impressed by the their syntax
highlighting.
Agreed; this is something I would like to see.  I was just going to open this
same defect...   One highlighting option that would be incredibly useful would
be to able to highlight fields in a different color.  This would allow you to
easily differentiate when a field variable is being used versus a local
variable, which would be nice.

Certainly, finer granularity would be nice if it is possible.  Some good examples:

1) supertype fields/methods - to be able to see if you are referencing something
from the current class or its parent
2) method parameters
3) local methods, external methods
4) local variables
4) static methods, static fields 
*** Bug 36789 has been marked as a duplicate of this bug. ***
From bug 36789:

Whenever there is a need for a non-standard naming convention (especially one 
that vaguely resembles hungarian notation...) the problem could probably be 
better solved by color coding in the editor.

Enable the editor to differentiate between different types of types 
(interfaces, abstract and concrete classes, possibly also inner classes) by 
color.
This bug needs to be upgraded for 3.0.  Even though the syntax highlighting is
better in 3.0, there is still very poor syntax highlighting in Eclipse.  It does
not come anywhere close to matching the highlighting of vim or Emacs.  Although
this may seem like a simple issue, one of the biggest issues in getting a user
to convert to a new tool is whether or not it is visual appealing.  Also, syntax
highlighting is one of the quickest ways to notice you just typed bad code.  
This has been sitting around for way too long; this bug is in the Top 25 in
terms of vote getters -- it needs to be addressed.  Any feedback from
developers/committers would be appreciated.
Feedback from developers(1): 
Personally, my interest in this is to be able to more quickly and safely in 
method bodies be able to distinguish between method vs. class scoped variables, 
between final vs. non final variables, and between static and non static 
members in general. Sure, I look forward to trying out whatever becomes 
available, but the above is what I would find truely useful.
I often want to see all exit points of a method, so I would like to be able to 
highlight "return" and "throw" statements.
Marcus: Good point. But then you also need a visually cue on every method call
that can throw an exception that is not caught in the current method.
I liked the idea of high-lighting returns though.
3.0 M5 has an experimental feature for treating the keyword "return" like a 
method name when applying syntax highlighting. The intent behind this was to 
experiment with emphasizing method calls inside a method body and to show the 
exit points. Set the following property (VM argument) 
-Dorg.eclipse.jdt.internal.ui.text.java.colorReturnAsMethodName=true
to enable it. We haven't included "throw" as in most cases a method throws a 
newly created exception whose constructor call is already treated as a method 
call. We have not yet "officially" included this feature as we are thinking 
about providing user defined word rules.
Yeah? :-) Well it pretty much drowns amongst the vast number of emphasized 
method names present in the method body. 
    50% of the text in my method bodies are typically method names. What's the 
point with emphasizing all thoses anyway?  Just emphasizing the name of the 
declared method (the token before the parameterlist) may possibly make more 
sense.
*** Bug 50305 has been marked as a duplicate of this bug. ***
*** Bug 50305 has been marked as a duplicate of this bug. ***
The Microsoft Whidbey release of Visual Studio .NET will enhance the concept 
of editing a code template by displaying the active field with a blue 
background and the inactive fields with a yellow background.  I think this 
makes it easier to use a code template because all of the fields are 
highlighted which makes it more obvious that you are editing a code template. 

They currently show an example of this concept with figures 4 and 10 of the 
following link:

http://msdn.microsoft.com/vstudio/productinfo/roadmap.aspx#language

The property "org.eclipse.jdt.internal.ui.text.java.colorReturnAsMethodName"
mentioned in comment 22 has been removed: syntax coloring for the 'return'
keyword can now be configured on the Java > Editor > Syntax preference page.
Some, but not all, of the highlightings mentioned in this bug have been
introduced in builds > 20040423 (see preference page Java->Editor->Semantic
Highlighting; will be integrated with the current Syntax Highlighting preference
page).

This is great progress.  The only addition I would recommend is the ability to
change the highlighting for individual keywords.
Available in 3.0 as 'advanced highlighting' on the Java editor syntax preference
page. Please open new feature requests for additional highlightings.

Syntax highlighting still sucks. I mean, just open any Java document and look at it! All I see is purple, and there is no way to distinguish different types of most keywords. It is a horrid combination of dark purple, blue, and black, and we need better control over these colors so that Eclipse can compete with other Java editors - in my opinion, the syntax highlighting/coloring is the most important part of a Java editor, with code completion in a close second. This bug is DEFINITELY not resolved, someone please reopen it.
