Currently we have this:

public final String str = "aaaaaaa" +
		"aaaaaa";

... instead of:

public final String str = "aaaaaaa"
		+ "aaaaaa";


(see 'The Elements of Java Style', item 6)

Currently we have this:

public final String str = "aaaaaaa" +
		"aaaaaa";

... instead of:

public final String str = "aaaaaaa"
		+ "aaaaaa";


(see 'The Elements of Java Style', item 6)
Agree. Code formatter also puts operator on new line.

*** Bug 51024 has been marked as a duplicate of this bug. ***
This is still an annoyance and I could image it would be easy to fix.  Any
intentions to look at this at some time?
Currently no plans to work on this but high quality patches are always welcome.
(In reply to comment #4)
> Currently no plans to work on this but high quality patches are always welcome.

I would like to look at the code at least to figure out what the fix would take.
 Any hint in which package I could search for the right source?
org.eclipse.jdt.internal.ui.text.java.JavaStringAutoIndentStrategy
*** Bug 127006 has been marked as a duplicate of this bug. ***
*** Bug 205615 has been marked as a duplicate of this bug. ***
Bug 205615 seems to be slightly different and deals with tabs/spaces problem. Pointer to JavaStringAutoIndentStrategy is nice. Perhaps if you can add a name of matching test it would be great.

Then I can try to reuse code from JavaIndenter.createReusingIndent(StringBuffer buffer, int additional) in JavaStringAutoIndentStrategy.javaStringIndentAfterNewLine that always adds "\t\t" regardless of preference settings. 
*** Bug 301689 has been marked as a duplicate of this bug. ***
Created attachment 162807
Potential fix for this bug.
(In reply to comment #11)
> Created an attachment (id=162807) [details]
> Potential fix for this bug.

I might be reading it wrong, but it doesn't seem to address issue described in comment #1
(In reply to comment #12)
> (In reply to comment #11)
> > Created an attachment (id=162807) [details] [details]
> > Potential fix for this bug.
> 
> I might be reading it wrong, but it doesn't seem to address issue described in
> comment #1

Yes, you are correct. I should have noted that my patch only addresses the tabs vs. spaces problem from bug 205615. I was going for a quick fix without integrating with the code formatter.

I will look at adding a bit more code to use the FORMATTER_WRAP_BEFORE_BINARY_OPERATOR preference here as well so the original bug report is addressed.
Created attachment 162822
Updated patch

Updated the patch to fix the original operator placement issue as well as tabs vs. spaces. Also made it honor project specific preferences.
Kelly, the attached patch seems to be for git and hence I can't apply it into my workspace. Can you provide a CVS patch?
Created attachment 164092
Updated patch

Create a patch against the CVS sources.
Thanks for the CVS patch. In the meantime I learned how to apply the git patch (works  if it there is one common root element), so if you want you can stick to the git patch format if you prefer.

The patch works and looks good but needs some polish:
- You can use the CodeFormatterUtil which is more accurate in getting the
  tab/indent values and it also reduces the amount of new code.

- Adjust your copyright notice info to match our template:
Kelly Campbell <kellyc@google.com> - [typing] String literal splitting should use formatter preferences - http://bugs.eclipse.org/48433

- Add your copyright notice info to JavaSourceViewerConfiguration and update
  the copyright year to 2010.


Looking forward to the final patch!
*** Bug 125028 has been marked as a duplicate of this bug. ***
Unlike the 'org.eclipse.jdt.text.tests.JavaAutoIndentStrategyTest' (in project '/org.eclipse.jdt.text.tests') we unfortunately don't have tests for the JavaStringAutoIndentStrategy. A small set of tests would be appreciated ;-)
Are you still planning to provide an updated patch?
(In reply to comment #20)
> Are you still planning to provide an updated patch?

I'm looking at this today. It looks like the DefaultCodeFormatter doesn't support the FORMATTER_USE_TABS_ONLY_FOR_LEADING_INDENTATIONS option which my patch does.
ping ;-)
ping ;-)
*** Bug 370510 has been marked as a duplicate of this bug. ***
Kelly and Dani, thanks for issues processing, may be I could help with patch please attach lates patch for me to continue, and specify what is necessary to do.
(In reply to comment #25)
> please attach lates patch for me to continue, and specify what is necessary to
> do.

For the latest available patch see comment 16.
I have updated Kelly Campbell's latest patch from comment 16 with the feedback from Dani Megert in comment 17.

I have not added any tests at this time but would be happy to consider this if you are still particularly keen. It is trivial to manually test that this change fixes the bug.

I have committed the changes to a fork of the eclipse.jdt.ui mirror on Github: https://github.com/mchr3k/eclipse.jdt.ui/commit/95232869e0ac7b5df8b6ba8b388571c4ecf18a19
I've created a Github pull request for my changes: https://github.com/eclipse/eclipse.jdt.ui/pull/1
(In reply to comment #28)
> I've created a Github pull request for my changes:
> https://github.com/eclipse/eclipse.jdt.ui/pull/1

Can you please attach a Git patch here. Thanks.
Created attachment 223709
Patch
Comment on attachment 223709
Patch

I had to modify the patch to apply it since it was not in unified format. The easiest would be to create the patch out of Eclipse (via EGit).

With the patch, it now indents too far. You can see this by simply formatting after splitting the string.
I'll take a look at fixing the indentation. 

Can you link to some detailed instructions about how to create a correctly formatted patch? I want to make sure I get it right next time! 

If suitable instructions don't already exist it might be a useful thing for someone to create to link first time contributors like myself to so that we can create a patch correctly.
(In reply to comment #32)
> I'll take a look at fixing the indentation. 
> 
> Can you link to some detailed instructions about how to create a correctly
> formatted patch? I want to make sure I get it right next time! 
> 
> If suitable instructions don't already exist it might be a useful thing for
> someone to create to link first time contributors like myself to so that we
> can create a patch correctly.

http://wiki.eclipse.org/Platform-releng/Git_Workflows
That's great - thanks!
I've just been testing this and I can't find any cases where it doesn't work. 

Can you provide more details about the case which you think is being handled incorrectly?
(In reply to comment #35)
> I've just been testing this and I can't find any cases where it doesn't
> work. 
> 
> Can you provide more details about the case which you think is being handled
> incorrectly?

With your patch installed:
1. start new workspace
2. paste this into the 'Package Explorer':
public final String str = "abcd";
3. place caret after b
4. press 'Enter'
   ==> indent is too 4 instead of 2
4 spaces or 4 tabs? If you use the autoformatter does it get corrected to a different indent? For precision can you paste a before/after of the exact string in your file along with an example of what you think the correct result is?
(In reply to comment #37)
> 4 spaces or 4 tabs?
Follow the steps and see yourself ;-)

>   ==> indent is too 4 instead of 2
indent is 4 tabs instead of 2

You can verify the wrong indent by using the formatter which would remove 2 tabs. In order to do this you'll need to change one formatter option:
Line Wrapping tab: [x] Never join already wrapped lines
Created attachment 223909
Fix commit 1
Created attachment 223910
Fix commit 2
I've added two new patches to reflect the two commits that make up my revised fix. I couldn't see a quick way of making a single patch from my multiple commits.

If you apply both of these patches you should find that the case you reported as not working is now fixed.
(In reply to comment #41)
> I've added two new patches to reflect the two commits that make up my
> revised fix. I couldn't see a quick way of making a single patch from my
> multiple commits.

See bug 368621.

Some of the choices:
1. Reset to 'master' and then apply each patch and make a single patch and
   attach it.
2. Create a branch from the second commit and then do a soft reset of the
   first commit. You can then commit and amend the previous commit. This will
   fold them into one.



> I've added two new patches to reflect the two commits that make up my
> revised fix. I couldn't see a quick way of making a single patch from my
> multiple commits.
> 
> If you apply both of these patches you should find that the case you
> reported as not working is now fixed.

Good! But unfortunately, it's a little bit more complicated: there's also a code formatter indentation policy, which can be set to indent by one or to align by column (near the bottom). See org.eclipse.jdt.core.formatter.DefaultCodeFormatterConstants.getIndentStyle(String) for details.

Just to be clear: I know the indentation also doesn't work in the current code but now that you're at it, we can make it right :-).

Some other minor things:
- We don't list each year in the copyright but only lowest and highest
  ==> e.g. 2010, 2012
- We list each contribution on a single line (no wrapping).
- The "real" code would look nicer if there would be a helper for each core
  preference check, e.g. #isWrappingBeforeBinaryOperator().
Created attachment 224026
Fixed patch
I've applied all of your feedback and I have improved the code to handle INDENT_BY_ONE and INDENT_DEFAULT. However, I can't see an obvious way to actually implement support for INDENT_ON_COLUMN.
By the way I squashed my commits by:

1) View the last few commit IDs: 
  git log --pretty=oneline -5
2) Create a branch from the commit before my changes: 
  git branch 48433 d357df
3) Checkout the new branch:
  git checkout 48433
4) merge and squash commits from the main branch I originally committed to:
  git merge --squash master
5) Commit all the changes into the new branch
(In reply to comment #44)
> I've applied all of your feedback and I have improved the code to handle
> INDENT_BY_ONE and INDENT_DEFAULT.

Thanks, it's much better now! There are still issues that we already had before (like when using spaces to indent).

> However, I can't see an obvious way to
> actually implement support for INDENT_ON_COLUMN.

Yes, this would need a bit more work and is also not working when using 'Correct Indentation' (see bug 375844). Filed bug 395257 to track that.


The main request of this bug has been fixed and the remaining issues can be solved via the other bug.

BTW: Adding some new tests would be nice (see comment 19).


Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=86895898564a54ad26b9fe82ed17b0776296bc86
and
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=23587bde5da010939e3eca80d59da2e88f85657b

I had to make two commits in order for the IP log to contain both contributors.
Excellent - I'm really glad to see this fix accepted :) I'll see if I can find some time to add some tests.

> Thanks, it's much better now! There are still issues that we already had before (like when using spaces to indent).

What do you mean by "when using spaces to indent"? The only remaining issue I am aware of is that INDENT_ON_COLUMN isn't respected.
(In reply to comment #47)
> What do you mean by "when using spaces to indent"? The only remaining issue
> I am aware of is that INDENT_ON_COLUMN isn't respected.

e.g. if the formatter is set to only use spaces, then it will not do this but instead add a tab then spaces.
The insertion of tabs rather than spaces was actually the key issue which got me interested in this issue and my patch should have fixed this.
(In reply to comment #49)
> The insertion of tabs rather than spaces was actually the key issue which
> got me interested in this issue and my patch should have fixed this.

Should but did not, at least if the indentation is set to spaces only. Just try it out ;-).
I have just tested it and it appears to work for me.

Formatter options:
* Indentation tab
** Tab Policy: Spaces only
** Indentation size: 4
** Tab size: 4

Paste the following fragment into Package Explorer:

public final String str = "abcd";

Move cursor to after the 'a', press enter. Only spaces are used to indent the new line.
(In reply to comment #51)

You're right, it works if there were spaces before in the file. But if tabs were used to do the indentation, then the result is:
1Tab + 8 Space

Now, looking at other typing behavior, we can argue that this is correct, even though the formatter will replace the tab with spaces.

So, I agree the we the indentation stuff works fine now, except for the column INDENT_ON_COLUMN.
Sorry about this but I'm confused now. 

Would you mind explaining in more detail the tab vs space case which still isn't working? I think my fix should always be able to tell whether to use spaces or tabs so if there is a case where it gets this wrong I would like to consider fixing it.
(In reply to comment #53)
> Sorry about this but I'm confused now. 
> 
> Would you mind explaining in more detail the tab vs space case which still
> isn't working? I think my fix should always be able to tell whether to use
> spaces or tabs so if there is a case where it gets this wrong I would like
> to consider fixing it.

We can consider the mixed case as being correct, since also just adding a newline will use a tab and not spaces in the following example: Follow the steps from comment 36 but after step 1 first set the formatter's 'Tab policy' to 'Spaces only'. Then you'll see the tab.
(In reply to comment #54)
> Follow the
> steps from comment 36 but after step 1 first set the formatter's 'Tab
> policy' to 'Spaces only'. Then you'll see the tab.

You must change the preference after step 2, not 1, otherwise you will have spaces in the file already.
Aha! I see what you mean now :)

I agree that this is correct based on the principle that the formatter would replace tabs with spaces.
*** Bug 407575 has been marked as a duplicate of this bug. ***
