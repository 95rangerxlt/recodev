The order of parameters in a moved method differs from the order of arguments in the invocations of this method if a new parameter (for the source object) was introduced. Example:

BEFORE:

package moveMethod.orderOfParameters.before;

public class Source {
	Target target = new Target();
	public void firstMethodToMove(String param) {
		secondMethodToMove(param);
	}
	public void secondMethodToMove(String param) {
		methodToStay();
	}
	public void methodToStay() { };
}

package moveMethod.orderOfParameters.before;

public class Target { }

RESULT:

package moveMethod.orderOfParameters.result;

public class Source {
	Target target = new Target();
	public void methodToStay() { };
}

package moveMethod.orderOfParameters.result;

public class Target {
	public void firstMethodToMove(Source source, String param) {
		// Order of parameters wrong:
		source.target.secondMethodToMove(param, source);
	}
	public void secondMethodToMove(Source source, String param) {
		source.methodToStay();
	}
}

The order of parameters in a moved method differs from the order of arguments in the invocations of this method if a new parameter (for the source object) was introduced. Example:

BEFORE:

package moveMethod.orderOfParameters.before;

public class Source {
	Target target = new Target();
	public void firstMethodToMove(String param) {
		secondMethodToMove(param);
	}
	public void secondMethodToMove(String param) {
		methodToStay();
	}
	public void methodToStay() { };
}

package moveMethod.orderOfParameters.before;

public class Target { }

RESULT:

package moveMethod.orderOfParameters.result;

public class Source {
	Target target = new Target();
	public void methodToStay() { };
}

package moveMethod.orderOfParameters.result;

public class Target {
	public void firstMethodToMove(Source source, String param) {
		// Order of parameters wrong:
		source.target.secondMethodToMove(param, source);
	}
	public void secondMethodToMove(Source source, String param) {
		source.methodToStay();
	}
}
In addition "source.target" in "Target.firstMethodToMove(..)" is unnecessary. Given the context source.target == this.
fixed > 20080422.

Note, the 'source.target' is still there. We can only move one method a time. So when making the second move, we can't make any assumptions about the 'source' anymore on which 'firstMethodToMove' has been called (you could have changed the code and assigned a new instance to source).
