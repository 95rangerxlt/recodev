Since there is public API for "RenameSupport", I was wondering why there isn't 
similar "MoveSupport" (or is there...) to kick off Java move/refactoring.

Since there is public API for "RenameSupport", I was wondering why there isn't 
similar "MoveSupport" (or is there...) to kick off Java move/refactoring.
There isn't a public move support sinc no one asked for it ;-). Since API is 
froozen for 3.0 this has to wait until > 3.0 
Phillip, I would like to postpone this > 3.1. API freeze is M6 and we have items
with higher priority.
Postponing > 3.1.
I would also like to formally request the MoveSupport feature.

I see that there are changes in this area in the latest I build (JavaMoveProcessor.create(...) is gone).  

Is this planned for 3.2M5?
No, nothing is planned here for 3.2 M5. 
I would like to request for the MoveSupport feature for the following reason:
I'm writing a free plugin to enhance junit-support within eclipse (moreunit.sourceforge.net). If a user performs a move refactoring of a class or method I'd like to move the corresponding testcase or testmethod, too.
Because of the missing MoveSupport I can't implement this feature.
Vera, their is already support to do what you want. The refactoring framework allows participating in certain kind of refactorings including move. All you have to do is to register a move participant for Java types and method with the framework. Whenever a move is triggered then your pariticpant will be able to add additional changes to the refactoring. Have a look at the extension points in ltk.refactoring.core.
Hi Dirk,
I have already registered rename and move participants.
Everytime the user performs a rename I'm searching for corresponding tests and show a dialog if the user wants to rename the tests either. In this case I'm using RenameSupport to start the rename refactoring of the tests programmatically.
When participating move refactoring I don't know how to start the move refactoring of corresponding tests programmatically.
OK now I understand your scenario better. However the way you use rename support and want to use a move support IS NOT supported by the framework and might result in loss of changes. In general refactorings aren't implemented in a way so that they can be nested during exection.

According to the spec of participants the changes must not overlap with the changes of the processor. In your case their could be a Java file having a reference to the type and its test case. Using the rename support for the test case will result in overriding the changes of the rename of the type for the file which references both types.
I have read the refactoring proposal and realized that compositions of refactorings are not supported by the framework.
But the way I have implemented the participant is not really a composition I thought, because the result of the first refactoring is not of interest for my programmatically started refactoring. 
Perhaps I do missunderstand the definition of overlapping changes, because I thought, if the user starts a rename of a method, the rename I perform with in my plugin will always be a rename of a different method, and as a consequence there can't be a conflict.

If the way I have implemented my refactoring is bad, how can this be done in a good way?

Another reason we need move support: WebTools JSP editing is currently extremely limited. Move doesn't work for example. Most refactorings don't work. 
The WTP project claims that this is because the APIs inside the JDT that are required to do these things are not public. 
see https://bugs.eclipse.org/bugs/show_bug.cgi?id=128874
We will tackle this in 3.3.
*** Bug 132746 has been marked as a duplicate of this bug. ***
Are you using the refactorings headless (eg. with no user interface)?
There is already a preview of the new API to execute refactorings headless based on refactoring descriptors. Currently implemented refactorings are all rename refactorings. The move refactorings will follow in the next milestone, along with all other refactorings.

Could you please review the existing preliminary API (in package 'org.eclipse.jdt.core.refactoring.descriptors' in plugin 'org.eclipse.jdt.core.manipulation') and give some feedback? Is this kind of API sufficient for your needs? Are you interested in UI as well?
Hi Tobias,
I've taken a look at the new API and it seems that it will be sufficient for my needs. Are there any documents or examples about refactoring via descriptors?
I am not interested in UI as I only want to start rename and move refactorings (of classes and methods) programmatically.
Vera, thanks for the feedback. At the moment, there is no public documentation yet. For the usage of the new API, I suggest to have a look at our test plugin org.eclipse.jdt.ui.tests.refactoring and searching for references to the RenameJavaElementDescriptor.
Hi Tobias,
the test plugin is a good example for refactorings via descriptors. I am looking forward to see the move implementation in the next milestone.
*** Bug 126353 has been marked as a duplicate of this bug. ***
Created attachment 60261
Patch for Move refactoring API
The proposed patch introduces new API and thus requires PMC approval.

Philippe, do you approve this?
+1
patch released > 20070319
I tried to use the new API but I do have problems with the move refactoring.
If I use 

RefactoringCore.getRefactoringContribution(IJavaRefactorings.RENAME_METHOD).createDescriptor()

I get an instance of org.eclipse.jdt.core.refactoring.descriptors.RenameJavaElementDescriptor
which is fine, but if I try to use IJavaRefactorings.MOVE or IJavaRefactorings.MOVE_METHOD the descriptor is null?

So it seems to me that this bug is not yet fixed or do I get something wrong?

The bug is in our code when 'null' is returned on refactoringContribution.createDescriptor().
This got fixed in 3.4 M1 and I also released a fix for 3.3.2
See bug 205706.

If you need this working in 3.3 or 3.3.1, instantiate the MoveDescriptor yourself (This is only a workaround as the spec doesn't support this, but this is safe to do). 
