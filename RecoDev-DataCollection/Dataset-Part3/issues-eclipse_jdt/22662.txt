When adding a container to the buildpath of a project, it would be nice to have
more context in the page. At least the classpath of the project that the
container will be added to. This way one can handle inter container dependencies
(fe this library can be used in combination with this base library, etc)

When adding a container to the buildpath of a project, it would be nice to have
more context in the page. At least the classpath of the project that the
container will be added to. This way one can handle inter container dependencies
(fe this library can be used in combination with this base library, etc)
One of the solutions might be that the actual container object in the library 
tab is expandable so that one can see the resolved entries for the container 
without selecting 'Edit' button and opening the wizard. This means that the 
Tree widget would need to be used instead of the Table for the list of 
libraries. But it may be an interesting option because instead of taking the 
rest of the classpath into the container wizard page, we are showing the 
resolved container entiries in the main tab, where they can be properly 
rendered, source attached etc.
that's a good idea.
ok, trying to catch all the requests + more:

Please give comments if this is what you need:
Will introduce IClasspathContainerPageExtension that offers
- init(IJavaProject curProject, IClasspathEntry[] currEntries)

Plugins that contribute a IClasspathContainerPage can optionally also implement 
IClasspathContainerPageExtension to get the extra information.

- init is called before setSelection
- currProject is the project currently configured, but might not yet exist. 
- currEntries are the classpath entries currently selected by the user. 
  Must not exist, can contain errors (overlapping ect), temporary.
  Can be used to give better user feedback (warn about conflicts) when
  configuring a classpath container

I'm currently collecting ideas about the source attachment problem. It seems as 
this is best solved with a new contribution point.

Please let me know if the proposal is helpful and if there are more 
requirements.

dejan & frank: do you still need the extra method?
*** Bug 23310 has been marked as a duplicate of this bug. ***
relased > 20021010

/*******************************************************************************
 * Copyright (c) 2002 International Business Machines Corp. and others.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Common Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/
package org.eclipse.jdt.ui.wizards;

import org.eclipse.jdt.core.IClasspathEntry;
import org.eclipse.jdt.core.IJavaProject;

/**
 * Classpath container pages that implement 
<code>IClasspathContainerPage</code> can 
 * optionally implement <code>IClasspathContainerPageExtension</code> to get 
additional
 * information about the context when the page is opened. Method 
<code>initialize()</code>
 * is called before  <code>IClasspathContainerPage.setSelection</code>.
 *
 * @since 2.1
 */
public interface IClasspathContainerPageExtension {
	
	/**
	 * Method <code>initialize()</code> is called before  
<code>IClasspathContainerPage.setSelection</code>
	 * to give additional information about the context the classpath 
container entry is configured in. This information
	 * only reflects the underlying dialogs current selection state. The 
user still can make changes after the
	 * the classpath container pages has been closed or decide to cancel 
the operation.
	 * @param project The project the new or modified entry is added to. 
The project does not have to exist.
	 * @param currentEntries The class path entries currently selected to 
be set as the projects classpath. This can also
	 * include the entry to be edited.
	 */
	public void initialize(IJavaProject project, IClasspathEntry[] 
currentEntries);

}
