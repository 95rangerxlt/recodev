The variable replacement in templates does not work properly if code formatting
is deactivated in the template preferences and a second (or later) occurence of
a variable is at the beginning of a line.

For example, try this:

1. Define a template with the following pattern:

StringBuffer ${buffer} = new StringBuffer();
${buffer}.append(1);
${buffer}.append(2);
String str = ${buffer}.toString();

2. Turn off "Use code formatter" in the template preferences.

3. Activate the template at a cursor position with indentation level 2 (any
number >= 1 will do)

4. Enter a text for the buffer variable.

Observation: buffer is replaced by your text in the forth line, but not in the
second and the third.

5. Press Tab

Observation: The leading whitespaces and "buff" in the second line are selected.

6. Enter some characters again.

Observation: The entered text also replaces the leading whitespaces and "buff"
in the third line.

It seems like that in the line 2 and 3 the variable name is internally changed
by appending the leading two tabs and cutting off the last two characters.


I observed this bug in 2.1.0 (Build 200303272130) and in 3.0M2 (Build 200307181617)

The variable replacement in templates does not work properly if code formatting
is deactivated in the template preferences and a second (or later) occurence of
a variable is at the beginning of a line.

For example, try this:

1. Define a template with the following pattern:

StringBuffer ${buffer} = new StringBuffer();
${buffer}.append(1);
${buffer}.append(2);
String str = ${buffer}.toString();

2. Turn off "Use code formatter" in the template preferences.

3. Activate the template at a cursor position with indentation level 2 (any
number >= 1 will do)

4. Enter a text for the buffer variable.

Observation: buffer is replaced by your text in the forth line, but not in the
second and the third.

5. Press Tab

Observation: The leading whitespaces and "buff" in the second line are selected.

6. Enter some characters again.

Observation: The entered text also replaces the leading whitespaces and "buff"
in the third line.

It seems like that in the line 2 and 3 the variable name is internally changed
by appending the leading two tabs and cutting off the last two characters.


I observed this bug in 2.1.0 (Build 200303272130) and in 3.0M2 (Build 200307181617)
Confirm bug in I20030916.
Nothing in .log


linked mode is not set up correctly. In the new linked infrastructure, you get this:


org.eclipse.jface.text.BadLocationException
at java.lang.Throwable.<init>(Throwable.java)
at org.eclipse.jface.text.BadLocationException.<init>(BadLocationException.java:25)
at
org.eclipse.jdt.internal.ui.text.link.LinkedPositionGroup.enforceEqualContent(LinkedPositionGroup.java:267)
at
org.eclipse.jdt.internal.ui.text.link.LinkedPositionGroup.addPosition(LinkedPositionGroup.java:249)
at
org.eclipse.jdt.internal.ui.text.link.LinkedPositionGroup.createPosition(LinkedPositionGroup.java:106)
at
org.eclipse.jdt.internal.ui.text.link.LinkedPositionGroup.createPosition(LinkedPositionGroup.java:88)
at
org.eclipse.jdt.internal.ui.text.template.TemplateProposal.apply(TemplateProposal.java:157)
at
org.eclipse.jface.text.contentassist.CompletionProposalPopup.insertProposal(CompletionProposalPopup.java:370)
at
org.eclipse.jface.text.contentassist.CompletionProposalPopup.selectProposalWithMask(CompletionProposalPopup.java:339)
at
org.eclipse.jface.text.contentassist.CompletionProposalPopup.verifyKey(CompletionProposalPopup.java:639)
at
org.eclipse.jface.text.contentassist.ContentAssistant$InternalListener.verifyKey(ContentAssistant.java)
at
org.eclipse.jface.text.TextViewer$VerifyKeyListenersManager.verifyKey(TextViewer.java)
at org.eclipse.swt.custom.StyledTextListener.handleEvent(StyledTextListener.java)
at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java)
at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java)
at org.eclipse.swt.custom.StyledText.handleKeyDown(StyledText.java:5321)
at org.eclipse.swt.custom.StyledText$7.handleEvent(StyledText.java)
at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java)
at org.eclipse.swt.widgets.Control.sendKeyEvent(Control.java:2239)
at org.eclipse.swt.widgets.Control.gtk_key_press_event(Control.java)
at org.eclipse.swt.widgets.Composite.gtk_key_press_event(Composite.java)
at org.eclipse.swt.widgets.Widget.windowProc(Widget.java)
at org.eclipse.swt.widgets.Display.windowProc(Display.java)
at org.eclipse.swt.internal.gtk.OS.gtk_main_do_event(Native Method)
at org.eclipse.swt.widgets.Display.eventProc(Display.java)
at org.eclipse.swt.internal.gtk.OS.gtk_main_iteration(Native Method)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java)
at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1550)
at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1526)
at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:265)
at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:139)
at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:47)
at
org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:257)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:104)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)
at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:41)
at java.lang.reflect.Method.invoke(Method.java:386)
at org.eclipse.core.launcher.Main.basicRun(Main.java:279)
at org.eclipse.core.launcher.Main.run(Main.java:742)
at org.eclipse.core.launcher.Main.main(Main.java:581)

see also bug 67965
appears to be fixed > 20060120 - please reopen if you disagree.
