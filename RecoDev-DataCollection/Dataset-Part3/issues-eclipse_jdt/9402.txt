There is no option to add a filter which can be applied to the Packages view.

Editing an plugin manifest file and restarting the IDE to add filter patterns 
is a bit unintuitive :)

There is no option to add a filter which can be applied to the Packages view.

Editing an plugin manifest file and restarting the IDE to add filter patterns 
is a bit unintuitive :)
The pattern filter is intended to filter out system files. Do you have a 
scenario where you want to use pattern filters for user files? Notice, that the 
packages view already supports filtering with working sets. If this is critical 
then I opt for support for a pattern based definition of a working set. 
The only real case I've come across is that some people have found the JARs 
list distracting, and in my case, the CVS directories when my project 
references a pre-existing external source directory (using 1.0 VCM support is 
not an option atm).
For me a workable fix would be to rename "Filters..." to "System Filters..." 
or "Filter Patterns..." so its clear how its different from "Filter Working 
Set...".
After additional use, I think customization of patterns is definitely something 
which would prove handy. For example, filtering out Java packages which one is 
not working on, or selectively switching on/off displaying of all non-Java 
elements in package view.

I believe a pattern-based working set may be useful, but it should be used in 
conjunction with the current selection based mechanism.

A feasible solution could be to have working sets would consist of one's 
selections (made manually), and patterns which are applied after the 
selections. The patterns would be visible only to working sets, and would be 
selectable on a per-working set basis, so each working set could have a 
different set of patterns, but these patterns are shared across working sets 
and not specific to a working set. These patterns should also be customizable.

Make sense? Comments?
Having pattern filters is very use full when it comes to serverside 
development. There are so many files that you never edit and are most of the 
time generated. For example I don't want to see my *Home.java files in ejb. So 
I think the filtering mecahnism could have include set and an exclude set 
(similar to ANT) on top of working set, so with in a working set I can just say 
that I want to see only Beans, or Action classes or some thing else that ends 
with a specific name.
to be considered as part of the improved filtering work
*** Bug 9220 has been marked as a duplicate of this bug. ***
*** Bug 11150 has been marked as a duplicate of this bug. ***
I support idea of having UI customizable filters,
(especially for existing CVS directories).
Additional inconvinience I found is nessesity to 
add newly created files to filter. Any new file
(created externally or from within eclipse-NEW menu)
is NOT visible in filtered resources perspective.

Thanks,

AlexV
Alex, what do you mean with "filtered resources perspective". Are you talking
about the Navigator with working set on the window?


I'm not sure if this belongs as part of this bug report or another one, but...
These new filters need to be preserved by the respective views in which they 
are enabled. For example, we've written our own custom filter for the Packages 
view and added an action to the view menu to activate it. However, the Packages 
view doesn't save the fact that this filter has been added to the viewer and 
thus shutting down and restarting the workbench loses the filter. If you look 
at PackageExplorerPart.saveFilterState(...) you can see that it only deals with 
the library filter of which it has intimate knowledge.
Stef, what you state is not true for the current build. All pattern filters are
persited and it works for me. There are two methods doing this:
- savePatternFilterState
- restoreFilters

>I'm not sure if this belongs as part of this bug report...
Please open a separate bug describing your problem if this does not work for
your pattern filters.

No, it's not a pattern filter. Just like LibraryFilter isn't.
Our filter is more complicated than simple pattern matching. It filters out 
bundle projects which is determined by having a particular entry in the META-
INF/MANIFEST.MF file.
I thought at one point Erich mentioned the Workbench would be providing 
something to save view state, but maybe I misunderstood him or he was referring 
to just simple pattern filters.
So it sounds like I need to open a separate PR for this, but should I open it 
against the Workbench UI? Seems like this is probably a generic viewer menu 
state problem.
What's the API / XML that you use to add that filter?

No XML. It has to be done in code. And there's no API at this time though Erich 
had indicated that access to the viewer would become part of the 
IPackagesViewPart interface.
Currently I gain access to the AbstractTreeViewer (ProblemTreeViewer) by 
getting the ISelectionProvider via the IViewPart passed to my action class on 
init(...). From there, it's just a simple addFilter(...) call.
I had discussed this with Erich way back when on the newsgroup (before I became 
enlightened by the use of Bugzilla).

There's no such API on IPackagesViewPart. You'll have to ping erich again. What
I intend to do is to allow to plug-in filters via xml. Current plan is to allow
those filters to be enabled/disabled. If time permits also customizable filters
will be allowed.


I assume you'll do something to maintain a filter's state within the viewer 
across workbench launches, correct? But I guess this would probably only happen 
if the filter were actually added via XML as opposed to programmatically?
Yes - only those that will follow the XML and the corresponding API.

Implemented two things
1. Pattern can be suupplied by the user
2. Plug-in providers can extend the views with custom filters

This applies to all Java Browsing views as well.

