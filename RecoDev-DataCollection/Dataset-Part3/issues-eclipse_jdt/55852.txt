1. Moving a package to another package uses the project of the destination
package as actual destination.
2. Packages are presented in the dialog when invoking Move from a menu.
3. The mouse pointer indicates an invalid destination when dragging a package
over another package in the *same* project, but does not if the destination
package is in another project (the actual destination is still the enclosing
project).

Reporting in one PR as I'm not sure what is intended.

1. Moving a package to another package uses the project of the destination
package as actual destination.
2. Packages are presented in the dialog when invoking Move from a menu.
3. The mouse pointer indicates an invalid destination when dragging a package
over another package in the *same* project, but does not if the destination
package is in another project (the actual destination is still the enclosing
project).

Reporting in one PR as I'm not sure what is intended.
Changed summary as I understand it differently now. Please disregard comment 1.

Observed when moving different kinds of elements, with drag-and-drop and when
invoking through menu. The actual destination will be the valid parent.

Christof, I don't fully understand this. Can you please drop by.
With drag and drop:

- For example, it is possible to drag and drop a CU A on another CU B in a
different package. The package is valid destination of the Move and the CU B is
a child of that destination but not a valid destination. In this case the
operation will use the package of CU B as actual destination. What I think is
incorrect is that CU B is a valid DnD target.

- Same behaviour when using a method as DnD target instead of a CU B as in the
previous example

- Same behaviour when draging and droping a method from one CU C on a method on
another CU D. Again, a parent of the DnD target method is a valid destination an
will be used as actual Move destination.

- The same is true when invoking Move on a CU from the menu, you can choose a
method which will be accepted as valid.

- Or: "Move a class E to a class F, making it an inner class" *appears* to be
possible when selecting the target class, but the result will be that class E is
moved into the package of class F
Christof, we did some improvements of the dialog for 3.0 (only show valid 
targets). Additionally we made more clear when we are moving textual changes.

Regtarding the fact that elements of the same type are valid destinations. 
This is on purpose to allow quick copying of elements. For example you can 
copy a method simple by pressing Ctrl+C Ctrl+V.

No further action planned for 3.0
