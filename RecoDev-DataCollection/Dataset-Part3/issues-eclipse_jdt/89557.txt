I20050329-2000

- new class wizard, class Test, 
- complete superclass to AbstractList
- enter <E> as the type parameterization
- press 'finish'

> expected: the type signature of the created type reads

public class Test extends AbstractList<E> 

< actual: it reads

public class Test extends AbstractList

If the entered parameter type can be resolved, everything works as expected -
however, if the type cannot be resolved, it should be taken as type variable
that will later be declared by the user. The alternative would be that the user
can enter the type variable into the name field ('Test<E>') and then reference
it in the supertype field.

I20050329-2000

- new class wizard, class Test, 
- complete superclass to AbstractList
- enter <E> as the type parameterization
- press 'finish'

> expected: the type signature of the created type reads

public class Test extends AbstractList<E> 

< actual: it reads

public class Test extends AbstractList

If the entered parameter type can be resolved, everything works as expected -
however, if the type cannot be resolved, it should be taken as type variable
that will later be declared by the user. The alternative would be that the user
can enter the type variable into the name field ('Test<E>') and then reference
it in the supertype field.
Markus, how hard is it to add support to enter Test<E>. We should only support
the feature if we can add this support.
It would be easy to support this. But we have to be careful about what is
returned by NewTypeWizardPage's API method getTypeName(). It currently returns
the contents of the type name field, and I'm not sure how 'compatible' we should
stay with what was valid there in 3.0 (just an unqualified type name).
Fixed with fixes for bug 72175 and bug 90082.
