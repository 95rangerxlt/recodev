(1) In the following program, foo is not tagged as can be static, while goo
is. Both can be static: 

// ---
public class X  {
	int f;
	int foo() {
		int f = 0;
		return f;
	}
	int goo() {
		return 0;
	}
}

// ---

Problem stems from the fact we do a look up for any existing f, to
report hiding diagnostics. That look up is confused with a real
field access. 

(2) See that in the following program we don't suggest that foo could
be static when in fact it could be:

// ---- 
public class X  {
	int f;
	void foo() {
		class Y {
			int p;
			{
				class Z {
					int f = p;
				}
			}
		};
	}
}

Basically the analysis as is implemented is broken and I don't see
any quick fixes. We can take solace that we are not meant to report 
every possible candidate, but what we report should be correct.

(1) In the following program, foo is not tagged as can be static, while goo
is. Both can be static: 

// ---
public class X  {
	int f;
	int foo() {
		int f = 0;
		return f;
	}
	int goo() {
		return 0;
	}
}

// ---

Problem stems from the fact we do a look up for any existing f, to
report hiding diagnostics. That look up is confused with a real
field access. 

(2) See that in the following program we don't suggest that foo could
be static when in fact it could be:

// ---- 
public class X  {
	int f;
	void foo() {
		class Y {
			int p;
			{
				class Z {
					int f = p;
				}
			}
		};
	}
}

Basically the analysis as is implemented is broken and I don't see
any quick fixes. We can take solace that we are not meant to report 
every possible candidate, but what we report should be correct.
The situation was not as hopeless as comment#0 made it sound. The fix
for https://bugs.eclipse.org/bugs/show_bug.cgi?id=406392 addressed all
the issues known with the method can be declared static analysis. 

Tests from comment#0 released here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=5e051a21e3e28c6b61cdf2be33e4ed5e75bc3f11

Fix available only on the Java 8 branch.
