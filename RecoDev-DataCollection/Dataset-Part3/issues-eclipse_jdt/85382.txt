 

 
I have the following code line:

nbrCdtyCodesX = resultData.getProperty(AxsWHSwebKeyHolder.KEY_NBRCDTYCODEL);

and if I hover the mouse over the KEY_NBRCDTYCODEL I get a tooltip showing the
definition of it (see attached image). As this particular variable is a static
final String defined as

public static final String KEY_NBRCDTYCODEL = "NBRCDTYCODEL";

I would like to see the value of it in the tooltip. 
Created attachment 17984
screen dump of tooltip for constant
It show up if you hold the CTRL key down to hover (code hover)
However I agree that it would be convenient when the normal hover could show
constant valued (IField.getConstant())


Good Javadoc of a constant field has the value in the Javadoc in addition, you
can press Ctrl while hovering to see the value.
(In reply to comment #4)
> Good Javadoc of a constant field has the value in the Javadoc in addition, you
> can press Ctrl while hovering to see the value.

So you say that in order to be good documentation you should retype the constant
value as a comment?  I disagree with that - if _that_ would be good javadoc,
then it should be automatically extracted.

I just find this weird - in some cases it is possible for the hover to show the
contents.  Is there a rule?
>I just find this weird - in some cases it is possible for the hover to show the
>contents.
Note sure what you mean. Can you give an example?



*** Bug 109063 has been marked as a duplicate of this bug. ***
*** Bug 188055 has been marked as a duplicate of this bug. ***
*** Bug 202264 has been marked as a duplicate of this bug. ***
(In reply to comment #4)
> Good Javadoc of a constant field has the value in the Javadoc in addition, you
> can press Ctrl while hovering to see the value.

Even many Eclipse classes don't include the values in the javadoc comments.
See IJavaElement, IJavaSearchConstants, IJavaPartitions.

It's a small nice enhancement, why not add it?
>It's a small nice enhancement, why not add it?
Right, why not submit a patch if you really want it ;-)
(In reply to comment #11)
> >It's a small nice enhancement, why not add it?
> Right, why not submit a patch if you really want it ;-)

I'll try to do my best :)
Created attachment 77940
First try

First patch attempt. Since getConstant() only returns constants for very simple literal values it doesn't work for all the cases.

I think the solution to that could be by displaying the initializer source code. It is much nicer to see that a constant equals to 1 << 52 than its decimal representation. However I found no easy API way to access the initializer source.
(In reply to comment #13)
> Created an attachment (id=77940) [details]
> First try
> 
> First patch attempt. Since getConstant() only returns constants for very simple
> literal values it doesn't work for all the cases.
> 
> I think the solution to that could be by displaying the initializer source
> code. It is much nicer to see that a constant equals to 1 << 52 than its
> decimal representation. However I found no easy API way to access the
> initializer source.
> 

Since I originally reported this bug I have found that the "Definition" view gives me this information when I put the cursor on the constant in the source.

Perhaps you can see how they do it?  I still prefer the hover as the definition view is slightly cumbersome to use with other views (like console and Team history) - the hover would save screen real estate.
(In reply to comment #13)
> Created an attachment (id=77940) [details]
> First try
> 
> First patch attempt. Since getConstant() only returns constants for very simple
> literal values it doesn't work for all the cases.
> 
> I think the solution to that could be by displaying the initializer source
> code. It is much nicer to see that a constant equals to 1 << 52 than its
> decimal representation. However I found no easy API way to access the
> initializer source.
> 

Since I originally reported this bug I have found that the "Definition" view gives me this information when I put the cursor on the constant in the source.

Perhaps you can see how they do it?  I still prefer the hover as the definition view is slightly cumbersome to use with other views (like console and Team history) - the hover would save screen real estate.
> I have found that the "Definition" view
There is no such view in the Eclipse SDK. Either you meant the 'Declaration' view or use some add-on plug-in. If it's the 'Declaration' view then you can press the 'Shift' key and then hover over the constant to get the same information in the hover.
I prefer seeing just the value and not the entire declaration.
The entire declaration can include multiple fields, which is usually not what the user expects.

I don't know whether this feature is worth proposing a new API for IField.
Without the new API it seems that the only option to reach the initializer's source is by using the AST parser, which is not very efficient.

I haven't checked whether I can easily access the attached source of a binary class, but that's something I'd find very useful for this enhancement.
>I don't know whether this feature is worth proposing a new API for IField.
The AST is meant for that. I doubt that JDT Core will start to duplicate this on IField.

>First patch attempt. Since getConstant() only returns constants for very simple
>literal values it doesn't work for all the cases.
We won't implement a "works sometimes" solution.

A more realistic approach might be to put it directly into the JavadocHover where you know it's not running in the UI thread and where you can get the AST for the active editor (see SharedASTProvider) and extract the const value from the AST. 
Created attachment 78392
Patch #2

Second try, following Daniel's suggestions. 
I still need to do some more testing, polishing, cleanup and refactoring.
Your patch creates the AST of the type where the field is declared. That's expensive and an overkill: the AST of the CU in the editor already has that information. You need to find the AST node that's at the hover location and then look whether this boils down to a IVariableBinding. If so, you can get the constant value from it directly.

You can use '=' directly as this is the standard assignment syntax.

Also, once we have this working in the hover we have to put the same code into the Javadoc view description.
Ah, and don't put in fall back code that reads the source.
Hint: use NodeFinder.perform(ASTNode, int, int) to find the SimpleName node (the reference to the constant) and then resolve the binding.
Daniel, Markus,

Thanks, I now see what you're suggesting. I implemented a prototype and it works well. However it requires a small refactoring to provide the region information through the call stack.

New patch is coming soon.


The implementation of getHoverInfo() supports the situation when more
than one element is selected. How can it happen?
>The implementation of getHoverInfo() supports the situation when more
>than one element is selected. How can it happen?
If you have e.g. type 'A' in package p1 and p2. When you then hover over an A reference that 's not yet imported you get the hover for both. Same if you press F3 or Ctrl+Click: you get a dialog that let's you choose.

Ok, but it looks like it doesn't apply to fields.
So if I have a reference to MyClass.MyConst and MyClass is ambiguous, the
codeassist fails. To be on the safe side, I will compare the resolved
binding with the IField.
Created attachment 79272
Patch #3

Patch that uses the current editor's AST to resolve
the constant value. It required an API change to deliver the hover region context to where it's needed.
I can't find an API change except the addition of JavaElementLabels.EQUALS_STRING which should be removed from the patch (see comment 20).
Created attachment 79274
Patch #4

I meant just the small refactoring of the AbstractJavaEditorTextHover hierarchy classes. The equals constant is gone.
>small refactoring of the AbstractJavaEditorTextHover hierarchy
That's all *.internal.* packages and hence no API and easy to change.
I'm aware of the concept. Yet as a contributer who tries to break as few things as possible with this little contribution, I consider it sort of API that I should use and try to avoid changing.
*** Bug 60214 has been marked as a duplicate of this bug. ***
Committed modified patch (some code reorg, formatting and added your
credentials).

Now we should also updated the Javadoc view with this feature. Can you take a
look at that? This will be a bit more complicated because the const value would
have to appear in the view description (if 1 element selected). Please continue
in a new bug if you decide to do this.

Thanks again for the patch.
I created bug 204914
