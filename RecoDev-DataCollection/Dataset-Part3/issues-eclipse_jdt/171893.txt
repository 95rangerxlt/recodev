A common use pattern for APT is, given one type, to search for another type or file in the same package.  Processor writers commonly use an idiom like typeA.getPackage().getQualifiedName() to find the package name, and then append the desired classname to that and call env.getTypeDeclaration() or explicitly convert the package name to a path and search for a file.

However, getPackage() is an extremely expensive call, because it creates an entire PackageDeclaration, which requires JDT to open the package element, which in turn requires reading the entire package in from jar.

It would be nice to implement some sort of lazy evaluation scheme for our implementation of PackageDeclaration, in which "easy" questions like getQualifiedName() could be answered without actually creating the package binding.

A common use pattern for APT is, given one type, to search for another type or file in the same package.  Processor writers commonly use an idiom like typeA.getPackage().getQualifiedName() to find the package name, and then append the desired classname to that and call env.getTypeDeclaration() or explicitly convert the package name to a path and search for a file.

However, getPackage() is an extremely expensive call, because it creates an entire PackageDeclaration, which requires JDT to open the package element, which in turn requires reading the entire package in from jar.

It would be nice to implement some sort of lazy evaluation scheme for our implementation of PackageDeclaration, in which "easy" questions like getQualifiedName() could be answered without actually creating the package binding.
I've just finished tracking down a hundred fold performance degradation which was due to two calls to TypeDeclaration.getPackage(). A fix in this area would be a Good Thing. In the mean-time, I'd suggest marking the method as deprecated so that people get a heads up that they are likely to massively impact their processor's performance. If they want the package name they can split it out of the TypeDeclaration.getQualifiedName().
We can't deprecate it - it's part of the Sun API, not our code.  Believe me, I would in a heartbeat.  I could deprecate the method in the implementation class, but no one would see that.

Here's a code snippet that should do the same thing only much faster.  Obviously this is not a great fix for the underlying problem, but at least it's a workaround in the near term.

	/**
	 * One way to get a type's package name is to call
	 * {@link TypeDeclaration#getPackage} and then
	 * {@link PackageDeclaration#getQualifiedName}. However, creating a
	 * <code>PackageDeclaration</code> is very expensive, so the
	 * <code>getPackage</code> call is expensive. It is more efficient to do
	 * it by parsing the type's name; this is a helper routine to encapsulate
	 * that task.
	 * 
	 * @param decl
	 *            the type whose package is being queried. May be a nested or
	 *            top-level type.
	 * @return the qualified name of the package, delimited with '.', or the
	 *         empty string if the declaration is in the default package.
	 */
	public static String getPackageName(TypeDeclaration decl) {
		TypeDeclaration parent;
		while ((parent = decl.getDeclaringType()) != null) {
			decl = parent;
		}
		String topClass = decl.getQualifiedName();
		int lastDot = topClass.lastIndexOf('.');
		if (lastDot < 1) {
			return "";
		}
		return topClass.substring(0, lastDot);
	}

Created attachment 66792
Proposed patch

Proposed patch lazily initializes the _pkgFragments field of PackageDeclarationImpl.  This is the only field that is expensive to compute, and most of the methods of this type, including getQualifiedName(), do not even refer to it.  We have to initialize it only in order to iterate the contents of the package, as in PackageDeclaration.getClasses().
Jess (and anyone else watching this bug), please review.
+1 Small change, big perf win.
Fixed for RC1.
Also fixed in the 3.2 maintenance branch.
