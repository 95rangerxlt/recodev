20020716
select a class from package explorer (from a closed file)
_even before_ the dialog comes up, the editor opens
this is undesired - i'm left with an editor open if i press 'cancel' right away

these actions should be able to work without opening editors

20020716
select a class from package explorer (from a closed file)
_even before_ the dialog comes up, the editor opens
this is undesired - i'm left with an editor open if i press 'cancel' right away

these actions should be able to work without opening editors
Opening the editor is consistent with other source actions. After the changes 
has been made the editor is left in dirty state. If we change this we should 
be consistent in the source action world.

However I fully agree that the editor should only be opened after pressing OK.

Martin, any comments.
The editor should not be opened until Ok ahs been pressed. The Getter/Setter and
Delegate method do this correctly, other source generation actions have to be
fixed as well.
Created attachment 6005
proposed fix.
Review comments:

- JavaSourceSelectionDispatchAction is in a API package. I opt to remove this
  class. Introducing it means we have to maintain the class as an API class
  and I don't see an added value over a static utility class.

- static final fields should be named using upper case letters. So fDialogTitle
  should be DIALOG_TITLE.
Created attachment 6040
proposed fix.

+ Moved to org.eclipse.jdt.internal.ui.actions in the patch. Is this ok or do
you still suggest an alternative?
+ Fixed DIALOG_TITLE naming.
This is not possible. Doing so results in a hierarchy where a subclass is 
public but its superclass isn't.
Created attachment 6052
proposed fix.

+ Removed JavaSourceSelectionDispatchAction
Hooray for the Push-Down refactoring.
Ran and passed the jdt ui tests.

It would be nice to have some generic mechanism for registering whether or not
a source action was available on a given cu type. It would be less expensive
and we could probably remove a goodly amount of code duplication. Something to
consider...
Martin, can you please double check the fix. You know the code better than I 
do.
The patch unfortunatly got outdated. I guess it was because of the patch for 
bug 42767.
The code duplication for getWorkingCopyFields and getWorkingCopyMethods looks 
not so nice. Not all of these methods are really used everywhere (always make 
the method private and enabled the 'unused members' option!)
I would suggest to add a method JavaModelUtil.toWorkingCopy(IMember[] member) 
so we avoid the code duplications.
Maybe it would also make sense to have dialog.getElementPosition() return an 
IMethod), so JavaModelUtil.toWorkingCopy could be used.

BTW, change throws JavaModelException, CoreException to 'throws CoreException'

I was able to release the fix for the 'DIALOG_TITLE'

Randy, can you have a look?


I had originally removed the code duplication by creating by subclassing 
SelectionDispatchAction, but maintaining that as API without planning had 
little value. If we also added some behavior to a new Action relating to the 
canEnable() methods, it would have more value. Some thought should be put into 
that. I'll look at both having getElementPosition return an IMethod and/or 
creating a new utility method, and submit a patch based on that (one without 
any collisions hopefully). BTW, I think the method was marked public because I 
used the push-down refactoring... is there a visibility change possible with 
that refactoring?
Created attachment 6166
proposed fix.

+ Removes unused methods and changes visibility to private.

Hopefully no conflicts with HEAD.
patch released > 20030922
