Created attachment 83122
Refactoring script to move com.example.MoveMe between projects

Build ID: I20070625-1500

Steps To Reproduce:
1. Set-up two projects, "From", and "To".  Create a new package "com.examples" in both projects.  Create new Java class com.example.MoveMe in "From". 

2. Drag "MoveMe" from project From's com.example to project To's com.example.  Move dialog appears, click "OK".

3. "Refactor->Create Script".  Create script "refactoring.xml" with all "From" project refactorings ("Move compilation unit").

4. "Edit -> Undo Move" to move MoveMe back into From.

5. "Refactor -> Apply Script".  Click "Finish" in Refactoring wizard.

6. Wizard page with Found Problems:  "A file or folder cannot be moved to its own parent."

Expected result: Refactoring applies, resulting in 
MoveMe.java in "To" project's com.example package.

More information:  
This appears to be because the destination project is not stored in the refactoring script XML (see attached).   The "From" project is stored in the "project" attribute of the <refactoring> element.  However, the "To" project is not stored.

Created attachment 83122
Refactoring script to move com.example.MoveMe between projects

Build ID: I20070625-1500

Steps To Reproduce:
1. Set-up two projects, "From", and "To".  Create a new package "com.examples" in both projects.  Create new Java class com.example.MoveMe in "From". 

2. Drag "MoveMe" from project From's com.example to project To's com.example.  Move dialog appears, click "OK".

3. "Refactor->Create Script".  Create script "refactoring.xml" with all "From" project refactorings ("Move compilation unit").

4. "Edit -> Undo Move" to move MoveMe back into From.

5. "Refactor -> Apply Script".  Click "Finish" in Refactoring wizard.

6. Wizard page with Found Problems:  "A file or folder cannot be moved to its own parent."

Expected result: Refactoring applies, resulting in 
MoveMe.java in "To" project's com.example package.

More information:  
This appears to be because the destination project is not stored in the refactoring script XML (see attached).   The "From" project is stored in the "project" attribute of the <refactoring> element.  However, the "To" project is not stored.
Did some initial analysis on this.  The issue appears to be in MoveResourcesRefactoringContribution#retrieveArgumentMap and #createDescriptor(String id, String project, String description, String comment, Map arguments, int flags).

In #retrieveArgumentMap, the line

  map.put(ATTRIBUTE_DESTINATION, ResourceProcessors.resourcePathToHandle(project, destinationPath));

uses the "From" project to create the destination path (although the project is never actually stored in the destination attribute).  


In #createDescriptor/6, the stored destination is restored using the "From" project:
  IPath destPath= ResourceProcessors.handleToResourcePath(project, destination);



This could be fixed in at least two ways:
  1) Store the destination path in a separate attribute, i.e., "destinationProject", or 
  2) Store destination project within destination attribute.


I am willing to help fix this bug.  Unless there is a preference on a solution, I will try my hand at using #1.
If source and destination are on the same project, I think it's good to not store the project name. That way, the script still works when users rename the project.

When the destination project is not the same as the source project, it makes sense to add the destination project to the script.

You're welcome to try a patch in that direction. Idea #1 is a good one!
I have not checked, but i think we've already done something to handle such situtations in HEAD.

The general idea is that the source project is stored as the descriptor's project. All attributes (including "From" and "To" resource paths or Java element handles) should compare their project to the descriptor's project and only include their project iff it is not the same as the descriptor's project.

This policy allows to rename a project without affecting descriptors stored for the renamed project. A new property should not be necessary (this also saves us from backwards compatibility issues). So, idea #1 is NOT a good one.

See also the Javadoc in the two JavaRefactoringDescriptorUtil classes, which should have been added to ResourceProcessors as well.
Created attachment 100436
Possible fix

Found this (untested) patch in my workspace. Martin, you can try it out, or move the bug to 3.5.
I tested the example in comment 0 with HEAD 3.4 (without the patch) and it seems to work. So maybe this got already fixed by the work you did early 3.4 (bug 199016, I guess)

Mark as fixed for 3.4. I played through the given scenario and other moves and it seems to work.
