In Kepler there's a new feature, that also completes the trailing semicolon for method calls without parameters. That's nice. The caret jumps behind the trailing semicolon. Then for a short moment the enter key is blocked. That's not nice, because I used the enter key for code completion and now want to proceed to the next line.

Could you remove the enter key from blocked keys for this feature?

In Kepler there's a new feature, that also completes the trailing semicolon for method calls without parameters. That's nice. The caret jumps behind the trailing semicolon. Then for a short moment the enter key is blocked. That's not nice, because I used the enter key for code completion and now want to proceed to the next line.

Could you remove the enter key from blocked keys for this feature?
Test Case:
1. paste this:
	void a() {
		HashMap m;
		m.e
	}
2. press Ctrl+Space after "m.e"
3. press ';'
   ==> green vertical line indicates linked mode
4. press 'Enter'
   ==> linked mode is left, new line is not added


Probably a regression from fixing bug 198748. Manju, please investigate.
My Steps 3. and forth would be:

3. press ENTER
   ==> Code is completed and caret jumps behind the also completed semicolon.
4. press ENTER again to break the line and to proceed to the next line.
   ==> nothing happens, if you do this within half a second or so. After this half second everything is normal again.
Created attachment 234385
Proposed patch

With this fix, after method completion(trigger can be either ';' as mentioned in comment #1 or 'Enter' as mentioned in comment #2), user press 'Enter' and if the caret is positioned after a semicolon, then a new line is added and we exit from link mode.
Dani, please have a look.
Shouldn't the finished auto completion actually exit linked mode?
(In reply to comment #4)
> Shouldn't the finished auto completion actually exit linked mode?

The implementation is generic for methods with and without parameters. The linked mode is valid if the method is with parameters.
The code completion also adds another semicolon sometimes, even if there is already one. I cannot reproduce it consistently.

And in even more inconsistent cases it leaves one of the characters from the completed words and pushes it behind the completed phrase (probably the parentheses). This might look like this:

document.doSomething()|o

where | is the caret.
(In reply to comment #6)
> The code completion also adds another semicolon sometimes, even if there is
> already one. I cannot reproduce it consistently.
> 
> And in even more inconsistent cases it leaves one of the characters from the
> completed words and pushes it behind the completed phrase (probably the
> parentheses). This might look like this:
> 
> document.doSomething()|o
> 
> where | is the caret.

Please don't (ab)use this bug. If you can reproduce an additional problem, then please report it in its own bug.
The fix looks good. Two small issues:
- the comment in the code is now wrong
- fDocument.getChar(offset - 1) should be extracted to a local variable
Thanks Dani.
Updated the comment in code and extracted 'fDocument.getChar(offset - 1)' to a local variable. Released the fix as:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=dd6840893f31388648711918dc88408ad36f7191
