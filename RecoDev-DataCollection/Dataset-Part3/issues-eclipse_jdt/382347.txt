BETA_JAVA8

The following program should be rejected since a class is not allowed
to inherit a default method whose signature is override equivalent with
another method inherited by it. It is not rejected at the moment.

// ----

interface I {
  void foo() default {}
}

interface J {
  void foo();
}

abstract class X implements I, J {
}

Please also test the interface case where similar prohibitions hold.

BETA_JAVA8

The following program should be rejected since a class is not allowed
to inherit a default method whose signature is override equivalent with
another method inherited by it. It is not rejected at the moment.

// ----

interface I {
  void foo() default {}
}

interface J {
  void foo();
}

abstract class X implements I, J {
}

Please also test the interface case where similar prohibitions hold.
Starting to work on this I'm wondering why the spec says (9.4.1):

"It is a compile-time error if an interface I inherits a default method whose signature is override-equivalent with another method inherited by I."

Why "override-equivalent", not plain "equal signatures"? If signatures are not equal we already get the error re clash: equal erasures but not overriding.

I can only see test cases for the new error where different inherited methods have the *same* signature, how could I create a test for the new error with signatures that are not the same, but override-equivalent?
Created attachment 220639
WIP: tests & fix

I should've shared my current state, so here it is.

It's the added tests 3 & 4 that got my puzzled (see previous comment).
I've pushed the current patch via commit 705390b3d4e931310269932c3d040a1bf61dd26b to facilitate work in bug 388739 on top of this patch.

Leaving this bug open as a reminder that we *might* want more tests here.
(In reply to comment #1)

Sorry for the delay in responding to this:

> Starting to work on this I'm wondering why the spec says (9.4.1):
> 
> "It is a compile-time error if an interface I inherits a default method
> whose signature is override-equivalent with another method inherited by I."
> 
> Why "override-equivalent", not plain "equal signatures"? If signatures are
> not equal we already get the error re clash: equal erasures but not
> overriding.

I don't think there is any mystery/hidden nuance/subtlety here. It is just
a statement of fact and if that ends up restating something that was already
the case, that is just due to the choice of words.

> I can only see test cases for the new error where different inherited
> methods have the *same* signature, how could I create a test for the new
> error with signatures that are not the same, but override-equivalent?

I don't think you can.

(In reply to comment #3)
> Leaving this bug open as a reminder that we *might* want more tests here.

I would close it as is if there aren't going to be additional "interesting"
tests that offer some additional coverage.
I've pushed copyright updates via commit 8a3b59860042c242d4e16ee3f50746d591d948f0.

Closing as advised.
During work on bug 388800 and bug 388954 I found a test case where this analysis is over-eager:

  public abstract class StringList implements Collection<String> { }
  
Currently yields:

  The default method isEmpty() inherited from Iterable<String> conflicts with another method inherited from Collection<String>

Several test cases in GenericTypeTest are affected by this problem.

Needs further investigation.
(In reply to comment #6)
> During work on bug 388800 and bug 388954 I found a test case where this
> analysis is over-eager:
> 
>   public abstract class StringList implements Collection<String> { }
>   
> Currently yields:
> 
>   The default method isEmpty() inherited from Iterable<String> conflicts
> with another method inherited from Collection<String>
> 
> Several test cases in GenericTypeTest are affected by this problem.
> 
> Needs further investigation.

With the fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=390761,
I am getting 0 errors against JDK8b56. I think this error you cite should
be covered by the same fix and so this can be closed.
Closing this bug as the issue stands resolved.
On cleaning up my workspace with stale WIP for this bug I
- released two more (simple) tests (commit 8c030d505f30b0cafedd9f4204a10256b97739b1)
  both are now green indeed.
- filed bug 391376 as a follow-up
