20021126

If you set the Java Editor font the text editor font in the workbench 
preference store is also set. This does not appear to affect the font registry 
(i.e. the correct font is used in text editors) but it will show up as changed 
in the preference page.

STEPS
1) Open a text editor
2) Set the Java editor font
3) Text editor does not change
4) Open the fonts preference page
5) The text font will have the value of your java editor font.

One solution for this is to switch to the new font propogation support. See 
Bug 27402.

20021126

If you set the Java Editor font the text editor font in the workbench 
preference store is also set. This does not appear to affect the font registry 
(i.e. the correct font is used in text editors) but it will show up as changed 
in the preference page.

STEPS
1) Open a text editor
2) Set the Java editor font
3) Text editor does not change
4) Open the fonts preference page
5) The text font will have the value of your java editor font.

One solution for this is to switch to the new font propogation support. See 
Bug 27402.
Can not reproduce in I20021217 using the following steps:
1. start fresh workspace
2. create Java project "JUnit"
3. in the Package Explorer disable ".* files" filter
4. open .project (will open in text editor)
5. set the Java editor font to something special (e.g. FrankRuehl):
     Window->Java->Editor->Text Font (press Change...)
==> text editor font does not change
6. open the fonts preference page:
     Window->Preferences->Workbench->Fonts: Text Font
==> text font is still the original font

Please reopen if you can reproduce with newest build.

Note:
1) the behavior I see might have been caused by bug 28630
2) you can leave it closed since I'm working to fix bug 27402


Now I am getting opposite behaviour - it slams the font of any open editor but 
not the preference store. Either way I'll leave it closed as requested.
20030306

This has not been completely cleared up as the JavaPlugin is slamming the 
JFace text font on a property change still.

There is a property change listener in the startup() method of the JavaPlugIn 
which appears to be backwards - it is taking the editor font and slamming the 
text font - I think you want it the other way around

Current:
PreferenceConverter.setValue(getPreferenceStore(), JFaceResources.TEXT_FONT, 
JFaceResources.getFont(PreferenceConstants.EDITOR_TEXT_FONT).getFontData());
	}

Should read:

PreferenceConverter.setValue(getPreferenceStore(), 
PreferenceConstants.EDITOR_TEXT_FONT
, JFaceResources.getFont(JFaceResources.TEXT_FONT).getFontData());

*** Bug 31522 has been marked as a duplicate of this bug. ***
The code does the right thing: it sets the 2.0 text font key in the Java plug-in
preference store to the value of the Java editor font. The text editor uses the
EditorsPluging preference store and not the JavaPlugin store (as does the Java
editor). If this key is missing from the EditorPlugins store then
JFaceResources.getTextFont() will be used for the text editor.

The problem is caused by the org.eclipse.jface.preference.PreferenceConverter
which magically manipulates the JFace font registry as a side effect of setting
a preference in a preference store:
	/**
	 * Sets the current value of the preference with the given name
	 * in the given preference store.
	 *
	 * @param store the preference store
	 * @param name the name of the preference
	 * @param value the new current value of the preference
	 */
	public static void setValue(
		IPreferenceStore store,
		String name,
		FontData[] value) {
		FontData[] oldValue = getFontDataArray(store, name);
		// see if the font has changed
		if (!Arrays.equals(oldValue, value)) {
			store.putValue(name, getStoredRepresentation(value));

                        ****************************************************
			JFaceResources.getFontRegistry().put(name, value);
                        ****************************************************

			store.firePropertyChangeEvent(name, oldValue, value);
		}
	}
Moving to Platform UI

*** Bug 21027 has been marked as a duplicate of this bug. ***
Looks like the best solution will be to deprecate the old API and implement a 
new one - it's a bit of a strange case but Dani is right about the API 
contract not mentioning a relation to the JFace FontRegistry.
Renaming the PR to reflect the issue at hand.
*** Bug 31067 has been marked as a duplicate of this bug. ***
*** Bug 31156 has been marked as a duplicate of this bug. ***
Just checked what we shipped in 2.0 and although it was not mentioned in the 
contract we did set the value in the JFace preference store - changing it now 
would be changing the existing behaviour of that method and cause potential 
problems for otehr users of the API.

Dani is right about the API contract and we should specify what is going on 
but the behaviour hasn't changed since 2.0 so we shouldn't change this method.


I don't think that any of the people who call this method actually do it because
they want to set/modify the JFace font registry directly.

In my opinion it is wrong to fix an obvious bug by changing the API. Code is not
stronger than API - in fact it is the other way around. The API specs what the
caller can expect.

*** Bug 31614 has been marked as a duplicate of this bug. ***
While I agree with the general sentiment of Dani's comment #13, I am concerned 
about breaking existing code at this stage.

If we want to remove the code that updates the font registry as a side effect, 
we need to understand who currently relies on this side effect and fix these 
occurrences.  We can only do this for the SDK, not other products build on 
Eclipse 2.0.

If we truly believe that nobody relies on this side effect, then we can change 
it.  If not, we need to be go with an uglier but more pragmatic solution.  

The options I see are:
1. Remove the side effect if we truly believe nobody relies on it.
2. Document the side effect and add new API that doesn't have the side effect.
3. Change JDT's font key for the Java Editor Font so that it doesn't collide 
with the plain text font.




If we go with (1), we need to let people know in the platform-ui-dev mailing 
list.  WSAD and other products based on Eclipse 2.0 may be relying on this side 
effect.  Also note that WSAD is going out on Eclipse 2.1 as a patch release, so 
they might not uncover any reliance on this side effect in testing.

Upon discussion with Nick we have decided to go with 2 as the current 
behaviour has been in so long that we are afraid of breaking other users of 
the current API especially as listeners to font changes tend to access the 
values of fonts for the registry.

I will add new API, clarify the existing API and then reassign this back.
OK.
FYI: 3. is not an option for the following reasons:
- a preference store can be set to the editor framework. The key for the font
was the same in 2.0 for the Java and the text editor but the value was read from
different stores
- the font handling has already changed in 2.1 since we switched to the new font
extension point. We need to keep the old key for backward compatibility.

I have added new API putValue and updated the setValue API to make it clearer 
that PropertyChangeEvents and updates to the FontRegistry occur.

Here was the change required to JavaPlugin. I just tested with it and it 
clears up the problem

PreferenceConverter.putValue(getPreferenceStore(), JFaceResources.TEXT_FONT, 
JFaceResources.getFont(PreferenceConstants.EDITOR_TEXT_FONT).getFontData());
		fFontPropertyChangeListener= new IPropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent event) {
				if (PreferenceConstants.EDITOR_TEXT_FONT.equals
(event.getProperty()))
					PreferenceConverter.putValue
(getPreferenceStore(), JFaceResources.TEXT_FONT, JFaceResources.getFont
(PreferenceConstants.EDITOR_TEXT_FONT).getFontData());
	}

Moving back to Dani to finish up on his end.
Adapted JDT UI code.
Available in builds >= I20030213

Couldn't we signal the "problem" of the setValue method to clients by
deprecating it? Optionally, if you think we need this side-effect a new
(non-deprecated) set-method could be added as well.
The problem with deprecation was consistency of the API - we use setValue for 
all of the other types so it would be strange to use a different one for 
fonts - this is initially what we wanted to do and replace it with two new 
methods but we thought it would be too confusing and inconsistent.
*** Bug 31938 has been marked as a duplicate of this bug. ***
