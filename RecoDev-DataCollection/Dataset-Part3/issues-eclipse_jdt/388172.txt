When running a testng test in debug mode, I got the error and exception shown below. The test would hang every time. 

After deleting all of my breakpoints, the test began working correctly again.

---
An internal error occurred during: "JDI Event Dispatch".

java.lang.ArrayIndexOutOfBoundsException: -4
	at org.eclipse.jdi.internal.MethodImpl.javaStratumLocationsOfLines(MethodImpl.java:867)
	at org.eclipse.jdi.internal.ReferenceTypeImpl.locationsOfLine(ReferenceTypeImpl.java:1966)
	at org.eclipse.jdi.internal.ReferenceTypeImpl.locationsOfLine(ReferenceTypeImpl.java:1594)
	at org.eclipse.jdi.internal.ReferenceTypeImpl.locationsOfLine(ReferenceTypeImpl.java:1079)
	at org.eclipse.jdt.internal.debug.core.breakpoints.JavaLineBreakpoint.determineLocations(JavaLineBreakpoint.java:355)
	at org.eclipse.jdt.internal.debug.core.breakpoints.JavaLineBreakpoint.newRequests(JavaLineBreakpoint.java:294)
	at org.eclipse.jdt.internal.debug.core.breakpoints.JavaBreakpoint.createRequest(JavaBreakpoint.java:486)
	at org.eclipse.jdt.internal.debug.core.breakpoints.JavaBreakpoint.handleClassPrepareEvent(JavaBreakpoint.java:374)
	at org.eclipse.jdt.internal.debug.core.breakpoints.JavaBreakpoint.handleEvent(JavaBreakpoint.java:290)
	at org.eclipse.jdt.internal.debug.core.EventDispatcher.dispatch(EventDispatcher.java:152)
	at org.eclipse.jdt.internal.debug.core.EventDispatcher.access$0(EventDispatcher.java:100)
	at org.eclipse.jdt.internal.debug.core.EventDispatcher$1.run(EventDispatcher.java:249)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

---
eclipse.buildId=I20120608-1400
java.version=1.6.0_33
java.vendor=Apple Inc.
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=en_US
Framework arguments:  -showlocation
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -clean -showlocation

When running a testng test in debug mode, I got the error and exception shown below. The test would hang every time. 

After deleting all of my breakpoints, the test began working correctly again.

---
An internal error occurred during: "JDI Event Dispatch".

java.lang.ArrayIndexOutOfBoundsException: -4
	at org.eclipse.jdi.internal.MethodImpl.javaStratumLocationsOfLines(MethodImpl.java:867)
	at org.eclipse.jdi.internal.ReferenceTypeImpl.locationsOfLine(ReferenceTypeImpl.java:1966)
	at org.eclipse.jdi.internal.ReferenceTypeImpl.locationsOfLine(ReferenceTypeImpl.java:1594)
	at org.eclipse.jdi.internal.ReferenceTypeImpl.locationsOfLine(ReferenceTypeImpl.java:1079)
	at org.eclipse.jdt.internal.debug.core.breakpoints.JavaLineBreakpoint.determineLocations(JavaLineBreakpoint.java:355)
	at org.eclipse.jdt.internal.debug.core.breakpoints.JavaLineBreakpoint.newRequests(JavaLineBreakpoint.java:294)
	at org.eclipse.jdt.internal.debug.core.breakpoints.JavaBreakpoint.createRequest(JavaBreakpoint.java:486)
	at org.eclipse.jdt.internal.debug.core.breakpoints.JavaBreakpoint.handleClassPrepareEvent(JavaBreakpoint.java:374)
	at org.eclipse.jdt.internal.debug.core.breakpoints.JavaBreakpoint.handleEvent(JavaBreakpoint.java:290)
	at org.eclipse.jdt.internal.debug.core.EventDispatcher.dispatch(EventDispatcher.java:152)
	at org.eclipse.jdt.internal.debug.core.EventDispatcher.access$0(EventDispatcher.java:100)
	at org.eclipse.jdt.internal.debug.core.EventDispatcher$1.run(EventDispatcher.java:249)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

---
eclipse.buildId=I20120608-1400
java.version=1.6.0_33
java.vendor=Apple Inc.
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=en_US
Framework arguments:  -showlocation
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -clean -showlocation
Can you provide the test and some steps to reproduce? 

Just looking at the exception does not make any sense why a stratum location would be trying to find line -3 (we offset by -1, in code, which would give the AIOOBE of -4).
I could not reproduce the failure, but I did add a check after we search for the line location to ensure we don't try to look up a negative index.

It would still be good to have an example to reproduce, as it appears the class was redefined (or some other cause) and the line locations were not updated - currently we just toss out the cached ReferenceType (if it is cached) which gets rid of all methods and their line locations.

For some more light reading about line locations and their lifecycle see: http://docs.oracle.com/javase/6/docs/platform/jpda/jdwp/jdwp-protocol.html#JDWP_Method_LineTable

pushed fix to:

http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=5e9bd7ffe561bdf772122ddcb5fc7ba0a3e97056
Thanks for the fix, much appreciated!

Unfortunately I don't have a test case. After deleting all the breakpoints, the problem went away (and I hadn't backed up the set of breakpoints). And I don't have a checkpoint of the source files at that point either.
