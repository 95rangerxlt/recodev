if you externalize strings on the following code:
---------------------------------------------------
package p;

public class A
{
   public static void main(String[] args)
   {
      System.out.println("hello world!");
   }
}
------------------------------------------------------

then this is the "Message.java" that gets created:
--------------------------------------------------------
package p;

import java.util.MissingResourceException;
import java.util.ResourceBundle;

public class Messages
{
   private static final String         BUNDLE_NAME     = "p.messages";         
               //$NON-NLS-1$
   private static final ResourceBundle RESOURCE_BUNDLE =
ResourceBundle.getBundle(BUNDLE_NAME);

   private Messages()
   {
   }

   public static String getString(String key)
   {
      throw new UnsupportedOperationException();
   }
}
---------------------------------------------------

as you can see getString() is wrong. It seems to be set by the "Method Body"
Code Template. Which I specify using -pluginCustomization command line parameter.

if you externalize strings on the following code:
---------------------------------------------------
package p;

public class A
{
   public static void main(String[] args)
   {
      System.out.println("hello world!");
   }
}
------------------------------------------------------

then this is the "Message.java" that gets created:
--------------------------------------------------------
package p;

import java.util.MissingResourceException;
import java.util.ResourceBundle;

public class Messages
{
   private static final String         BUNDLE_NAME     = "p.messages";         
               //$NON-NLS-1$
   private static final ResourceBundle RESOURCE_BUNDLE =
ResourceBundle.getBundle(BUNDLE_NAME);

   private Messages()
   {
   }

   public static String getString(String key)
   {
      throw new UnsupportedOperationException();
   }
}
---------------------------------------------------

as you can see getString() is wrong. It seems to be set by the "Method Body"
Code Template. Which I specify using -pluginCustomization command line parameter.
Eclipise 3.1RC3 JDK 5.0_03
Please provide the template, otherwise there's not much we can do. Was there
something in .log?

Verified that the scenario works when running out of the box.
Created attachment 23617
the templates used
there was nothing in the .log
.
.
Your template sets the method body to be just:
throw new UnsupportedOperationException();

and hence the result is expected.

We won't change this.
This greatly deminishes the usefulness of code templates. The way it is
functiononing now there isn't anything useful you can do with the code templates
and everybody will be using the default. This effectively makes code templates a
non-features.

My 2 cents
I can't follow your comment.
The reason I had it set to "throw new UnsupportedOperationException()" is
because that is the method body I want when doing things like overide/implement
method from superclass, or when using the quickfix "Create method". However it
seems that "method body" code template is also used for "generate delegate
methods", "generate getter and setter" and "externalize strings". The latter
three to me don't seem like something you would want to customize in the same
manner as the first two.
The first two examples the IDE has no idea what the method body should look like. 
The latter three the IDE has an exact idea of what the method body should look
like. However in the implemnation of eclipse it seems to be using the same
template for both these circumstances. This effectively means that you should
only ever have that template set to the default value or if you use things like
"generate getter and setter" you will then have to go in after the ide and sort
things out.

I hope this is clearer!
I see what you mean now. You'd basically suggest to have two kinds of method
body templates: one for the empty generated method and one for the method body
of generated code.

Moving to JDT UI for comment since they own the code templates.
Here is the state for RC3

- there are separate templates for getter and setter generation
- delegate method doen't use the method template any longer. This got fixed
  for RC1/RC2.

- the externalize string wizard is indeed using the new method template.

Added a separate template so late in the cycle is feature work and nothing we
can do. 

Dani, the only thing I can think off is not using the template for 3.1.
Given that it worked like this since day one we won't change this so late in the
game but for 3.2 we will either provide a separate template for the NLS wizard
or no longer use a template.
fixed > I20060307-1315

Don't use a template, there's no need for one.
