I want to add tab's and extra codechecks to the clean up wizard. This is not possible at this point I can not find a extentioni point to use or any other normal way to do this. Plz make this possible thx.

I want to add tab's and extra codechecks to the clean up wizard. This is not possible at this point I can not find a extentioni point to use or any other normal way to do this. Plz make this possible thx.
Code cleanup is a JDT/UI feature.
(In reply to comment #1)
> Code cleanup is a JDT/UI feature.
> 

thx but that did not realy help me any further
Making the clean up wizard extensible is of course a bigger issue.
As a first thing, are there any specific clean ups that you want us top add? To you want to contribute your clean ups to our code?
See also bug 154109. This will require substantial changes in the clean up infrastructure during the 3.3 cycle.
(In reply to comment #3)
> Making the clean up wizard extensible is of course a bigger issue.
> As a first thing, are there any specific clean ups that you want us top add? To
> you want to contribute your clean ups to our code?
> 
We want to extend the clean up wizard with our own clean up. Will there be an extention point in the 3.3 release? thx for the replies.
Probably not, as we won't have the manpower to do this. But we will have a look at how much work it is.
*** Bug 169599 has been marked as a duplicate of this bug. ***
Created attachment 77577
clean up clean up

Clean up clean up code, first step towards fixing this bug.
Created attachment 77982
clean up IFix
Created attachment 77985
splitting off IMultiFix from ICleanUp
Created attachment 78183
introduce CleanUpTarget

Allows to use refactoring infrastructure for multi fix -> remove duplicated code
Created attachment 79270
specify default settings

Allow clean up to specify its default settings
Created attachment 79291
CleanUpTabPageDescriptor and interfaces
TODO:

Must make API:
 - ICleanUp, IFix, ICleanUpTabPage, IModifyDialogTabPage, CompilationUnitChange
Must implement:
 Define extension point for ICleanUp and ICleanUpTabPage and read in CleanUpRegistry

There is more which can be made API, like abstract implementations of interfaces (which I would make API). IFixes can also be used in the quick fix infrastructure, see FixCorrectionProposal, IProposableFix, ILinkedFix, IMultiFix, but I would not make this API.

I think it's between 1 and 2 days of work.
Removing blocked bug: it is a duplicate of this bug.
Dani, will you review a patch if I provide one for 3.5? Another question is if the non UI part of this should live in jdt.core.manipulation?
>Dani, will you review a patch if I provide one for 3.5?
Yes.

>Another question is if the non UI part of this should live in 
>jdt.core.manipulation?
I'd probably hold off with that and make it self-contained in JDT UI for now. I'd also refrain from making too much API at the beginning.

Markus, do you agree?
(In reply to comment #18)
> Markus, do you agree?

We currently don't have any refactoring-related API in JDT/UI, except for the org.eclipse.jdt.ui.refactoring package. I would like to avoid making CompilationUnitChange API, but if there's really no other way, then it should go to jdt.core.manipulation.

Since clean ups can be run on Save, it is important that we measure the performance of contributed clean ups and disable them if they take too long (like in content assist).
Created attachment 114869
fix

Almost there. Todo:
- Move classes to API packages
- implement partial order sorting for clean ups

Dani? Markus? A clean up can specify after which clean up it should be executed. I think we've done that partial order thing before with other extension points? If so I could copy that code. But I can't find it.
org.eclipse.ui.workbench.texteditor.rulerColumns extension point does this. This class reads it in:
org.eclipse.ui.texteditor.rulers.RulerColumnDescriptor
> If so I could copy that code. But I can't find it.
No copy no copy - reuse ;-)
(In reply to comment #22)
> > If so I could copy that code. But I can't find it.
> No copy no copy - reuse ;-)

Yes, great idea! Does that mean that you are willing to make org.eclipse.ui.internal.texteditor.rulers.DAG API?
I've reviewed the patch and discussed with Benno:
- we start with exactly one 'runAfter' constraint and will add more complex 
  constraints if requested
- sorting will be done in JDT UI but in case of more complex constraints we could
  offer API through in org.eclipse.ui.texteditor.ConfigurationElementSorter
- Markus will make CompilationUnitChange API (in core.manipulation)
- we move the API classes into org.eclipse.jdt.ui.cleanup
- naming:
  - use cleanUp not cleanup
  - use better name for tabpage, e.g. configUI (just configuration is to generic)
- better surface that it there are two kinds: normal?, onSave (could 1 and 2)
- specify in extension point that to which kind a configUI is
  ==> makes sure we don't show inactive/unavailable configUI pages
- configUI pages need to be sorted (alphabetical for now)

Created attachment 115029
fix

(In reply to comment #24)
> I've reviewed the patch and discussed with Benno:
> - we start with exactly one 'runAfter' constraint and will add more complex 
>   constraints if requested
OK, sounds good.
> - sorting will be done in JDT UI but in case of more complex constraints we
> could
>   offer API through in org.eclipse.ui.texteditor.ConfigurationElementSorter
NOT DONE!
> - Markus will make CompilationUnitChange API (in core.manipulation)
OK
> - we move the API classes into org.eclipse.jdt.ui.cleanup
DONE (results in a log of changes)
> - naming:
>   - use cleanUp not cleanup
DONE
>   - use better name for tabpage, e.g. configUI (just configuration is to
> generic)
DONE
> - better surface that it there are two kinds: normal?, onSave (could 1 and 2)
DONE
> - specify in extension point that to which kind a configUI is
>   ==> makes sure we don't show inactive/unavailable configUI pages
DONE
> - configUI pages need to be sorted (alphabetical for now)
DONE
It would be cool if as much as possible can be in jdt.core.manipulation.
I only had a quick look at the patch, but things like ICleanUp, IFix and probably the corresponding extension point could all be used in a headless way, no?

(In reply to comment #26)
> It would be cool if as much as possible can be in jdt.core.manipulation.
> I only had a quick look at the patch, but things like ICleanUp, IFix and
> probably the corresponding extension point could all be used in a headless way,
> no?

Yes, but this is to Markus to decide. I think what we can not do is pull down our implementations of clean ups/fixes to core manipulation. There is more attached to this implementations: all the quick fix/multi fix stuff which we do not make API.
Thanks Benno!

I cleaned up the extension point, renamed and refactored some code and also added the sorting algo.

Fixed in HEAD.
Available in builds > N20081015-2000.


> could all be used in a headless way,
As Benno said, the problem is that it would drag too many things with it (quick fix, multi-fix, (refactoring) execution code, helper utils etc.) in order to make any sense (be usable) in core.manipulation. We would then either have to provide tons of new API or JDT UI would have to use internal code from core manipulation. This is out of scope given the resources we have but if someone volunteers to push down all of this then (s)he'd be more than welcome.
Ok, you're right, our clean up implementations will have to stay in JDT UI. But we should still put the APIs and extension points to core manipulation.
Same like we have with refactorings. So you can invoke a refactoring from a core plug-in, even if the implementation is actually in UI.
The whole code to invoke it is in JDT UI. This would have to go down as well in order to be useful to anyone and we would have to split the extension point.
