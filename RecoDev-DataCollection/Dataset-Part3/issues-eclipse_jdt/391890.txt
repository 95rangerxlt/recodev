Created attachment 222286
Work in progress - patch v0.3

BETA_JAVA8:

    This bug will cover the work for enhancing the entire Type hierarchy and
TypeParameter nodes.

Created attachment 222286
Work in progress - patch v0.3

BETA_JAVA8:

    This bug will cover the work for enhancing the entire Type hierarchy and
TypeParameter nodes.
Created attachment 222440
Work in progress - Patch v0.4

Same patch as before, but this one returns empty lists instead of null.
Created attachment 222610
Work in progress - Patch v0.75

Mostly there - Missing in ASTRewrite work & some tests
Fix and tests released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=c3894f02481a65e7c5a6b2e211e3716b20cd9dd8

Pending steps:

    - One more round of code review by Srikanth.
    - Code review by Markus.
    - ASTRewrite portion of the changes have not been tested well and
need closer scrutiny.
    - Tests need to be written for ASTRewrite, ASTMatcher ans AST structural
verification (TypeAnnotationConverterTest compares parse trees textually)
    - Cycle risk assessments need to be double checked.
I have a question - Why is it JLS8 and not JLS5? For JLS7, we have kept the sequence and can't we do the same for consistency sake?
(In reply to comment #4)
> I have a question - Why is it JLS8 and not JLS5? For JLS7, we have kept the
> sequence and can't we do the same for consistency sake?

There is really no JLS4 in real terms. The JLS revision for Java SE7 is
called JLS7. However we continued to use JLS4 because it was already
published API by that time.

I think the right thing to do is synch up and not use JLS5 which is going
to perpetuate confusion.
(In reply to comment #5)
> There is really no JLS4 in real terms. The JLS revision for Java SE7 is
> called JLS7. However we continued to use JLS4 because it was already
> published API by that time.
> 
> I think the right thing to do is synch up and not use JLS5 which is going
> to perpetuate confusion.

I thought the sequence (JL3, JLS4 etc.) was intentional. Thanks for explaining.
In the Javadocs, the grammar notation is to have literal characters in <b></b>, and the rest of the EBNF in plain text. E.g. it should be
   {Annotation} <b>byte</b>
not
   <b>{Annotation} byte</b>

The Type#annotations field doesn't need the "protected" modifier.

The Type#annotations() API is problematic, since it is also available on subtypes of Type that don't offer an ANNOTATIONS_PROPERTY (ParameterizedType, UnionType). After staring at the code for a while, I think the right solution is to have this hierarchy:
Type
+ AnnotatedType
  + ArrayType
  + PrimitiveType
  + QualifiedType
  + SimpleType
  + WildcardType
+ ParameterizedType
+ UnionType

):

Name#annotations() and the property descriptor should be removed again (recent grammar change).

The memSize/treeSize implementations are hard to read. As a long-term solution, I would deprecate ASTNode#subtreeBytes(), since it's not really useful for anybody. For now, I think the least error-prone solution is to implement both memSize() and treeSize() in nodes that affect their return value, and then use super.*Size() + <size of fields> rather than referring to superclass fields.

The source ranges of the ASTNodes are often wrong. In the ASTView, the first double-click on a node selects the source range, and further double-clicks select the extended source range. Example:
	@Readonly Map.@NonNull Entry<String, @NonNull Integer> e;

I've just pushed BETA_JAVA8 of the jdt.ui repo with an ASTView that supports JLS8. The node tree is defined by the structural property descriptors, so it it will adapt if you make changes to the AST. Only resolve*() methods need to be added manually, if new ones become available.
(In reply to comment #7)
> ):

That was a copy editing error. Unfortunately, it looks even worse when quoted ;-)
(In reply to comment #7)
> I've just pushed BETA_JAVA8 of the jdt.ui repo with an ASTView that supports
> JLS8.

Thanks, Markus! Does this mean I don't have to worry about hacking the ASTProvider#SHARED_AST_LEVEL. Or do we still have to set it to AST8?
> Thanks, Markus! Does this mean I don't have to worry about hacking the
> ASTProvider#SHARED_AST_LEVEL. Or do we still have to set it to AST8?

I've only updated the ASTView, but I haven't branched the jdt.ui project yet.

The problem with just switching ASTProvider#SHARED_AST_LEVEL to JLS8 is that you will get loads of exceptions when you use any JDT UI functionality that relies on the the JLS4 AST but hasn't been updated to JLS8. Depending on the cu contents, this can happen in each and every reconcile (e.g. if semantic highlighting or mark occurrences doesn't get what it expects).

I think we should concentrate on finishing the AST first. The ASTView shows all interesting information for that. Once that's done and we start with ASTRewrite, then we can switch the SHARED_AST_LEVEL.
(In reply to comment #7)

Review issue#1
> In the Javadocs, the grammar notation is to have literal characters in
> <b></b>, and the rest of the EBNF in plain text. E.g. it should be
>    {Annotation} <b>byte</b>
> not
>    <b>{Annotation} byte</b>

Jay, please go through the javadoc changes in the original commit to
address this concern.

issue#2:
> The Type#annotations field doesn't need the "protected" modifier.

Agreed.

issue#3:
> The Type#annotations() API is problematic, since it is also available on
> subtypes of Type that don't offer an ANNOTATIONS_PROPERTY
> (ParameterizedType, UnionType). After staring at the code for a while, I
> think the right solution is to have this hierarchy:
> Type
> + AnnotatedType

+1. Jay, let us call it AnnotatableType instead of AnnotatedType.

issue#4:

> Name#annotations() and the property descriptor should be removed again
> (recent grammar change).

Agreed.

> The memSize/treeSize implementations are hard to read. As a long-term
> solution, I would deprecate ASTNode#subtreeBytes(), since it's not really
> useful for anybody. For now, I think the least error-prone solution is to
> implement both memSize() and treeSize() in nodes that affect their return
> value, and then use super.*Size() + <size of fields> rather than referring
> to superclass fields.

Jay, please raise a separate follow up bug and address it at low priority 
relative to other open issues. The present computations are correct, though
arguably can use some simplification. 

> The source ranges of the ASTNodes are often wrong. In the ASTView, the first
> double-click on a node selects the source range, and further double-clicks
> select the extended source range. Example:
> 	@Readonly Map.@NonNull Entry<String, @NonNull Integer> e;

Needs to be looked into.
(In reply to comment #11)
> (In reply to comment #7)
> > The memSize/treeSize implementations are hard to read. As a long-term
> > solution, I would deprecate ASTNode#subtreeBytes(), since it's not really
> > useful for anybody. For now, I think the least error-prone solution is to
> > implement both memSize() and treeSize() in nodes that affect their return
> > value, and then use super.*Size() + <size of fields> rather than referring
> > to superclass fields.
> 
> Jay, please raise a separate follow up bug and address it at low priority 
> relative to other open issues. The present computations are correct, though
> arguably can use some simplification. 

Raised bug 395660 to track this.
Created attachment 224653
With review suggestions

* Fixes the Javadoc
* Fixes source ranges for annotations and names
* Introduces the new subtype AnnotatableType
(In reply to comment #11)
> issue#4:
> > Name#annotations() and the property descriptor should be removed again
> > (recent grammar change).
> 
> Agreed.

Bug 395886 will cover this.
Created attachment 224705
Minor document change
Created attachment 225267
Updated patch

The previous patch needed to be adjusted for the work released as part of bug 391898. The patch also includes a new method Type#isAnnotatable() and copyright year updates.
Review comments:

AnnotatableType.java:

(1) New warning: "Tag '@noinstantiate' is unsupported on an abstract class"

(2) Fix typo: exending -> extending
Fixed the review comments and released in BETA_JAVA8 via commit:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=01023454337af8ada2f5699e5de8fcd7a8d40840
