Currently there are bugs in the code.  The constant has changed and we should 
check for null when getting the key (even though JavaCore initializes the value 
to "").

More difficult:
The UI for manipulating the setting of this option in the JavaOptions does not 
take into consideration anyone setting a filter via code 
(JavaBuilderPreferencePage).  Is this an intended limitation?

Currently there are bugs in the code.  The constant has changed and we should 
check for null when getting the key (even though JavaCore initializes the value 
to "").

More difficult:
The UI for manipulating the setting of this option in the JavaOptions does not 
take into consideration anyone setting a filter via code 
(JavaBuilderPreferencePage).  Is this an intended limitation?
Can you comment Martin?
This is tricky. It's jdt.ui that is responsible for persisting the settings.
It also offers a preference page with a 'default' button, changing back all 
settings received by 'JavaCore.getDefaultOptions()'.

It seems to me that if other components also want to manipulate the setting, 
and don't want to know about jdt.ui (and the time it is loaded), persistence 
must go to jdt.core.

Or jdt.ui keeps the resposibility and have to offer API. 
Is there a possibility of JDT core using the new plugin preferences mechanism 
and jdt ui just putting a UI mechanism for manipulating the preference?
oh, you are right, that's now possible.
We should do it like that. Philippe?
Agreed.
Done, JavaCore options are now persisted through its plugin preferences.
Fixed
Changed Compiler/Builder & CodeFormatter Prefpage to not persisting settings 
anymore.
>20020502
