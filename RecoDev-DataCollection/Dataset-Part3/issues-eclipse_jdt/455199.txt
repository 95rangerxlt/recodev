Example class:
class NoDebuggingCase {
	def void call(NoDebuggingAcceptor inner) {
		println(inner) //<-- set breakpoint here
	}

	interface NoDebuggingAcceptor {
		def void accept(String typeImport)
	}
}

When debugging the "call" method from e.g. junit test no display or inspect informations are available:

@Test
	def void testCase() {

var c = new NoDebuggingCase()
		c.call(new NoDebuggingCase.NoDebuggingAcceptor() {

			override accept(String typeImport) {
				throw new UnsupportedOperationException("TODO: auto-generated method stub")
			}

		})
}

Example class:
class NoDebuggingCase {
	def void call(NoDebuggingAcceptor inner) {
		println(inner) //<-- set breakpoint here
	}

	interface NoDebuggingAcceptor {
		def void accept(String typeImport)
	}
}

When debugging the "call" method from e.g. junit test no display or inspect informations are available:

@Test
	def void testCase() {

var c = new NoDebuggingCase()
		c.call(new NoDebuggingCase.NoDebuggingAcceptor() {

			override accept(String typeImport) {
				throw new UnsupportedOperationException("TODO: auto-generated method stub")
			}

		})
}
I also noticed, that one can easy get the editor (where the testCase() method is in) in a broken state.
1. Make the editor with the test class dirty.
2. Remove or Comment out the NoDebuggingAcceptor, remove the NoDebuggingAcceptor inner parameter
3. Save changes
4. go to the test class editor again and let im show the call method signature (e.g CA)
The editor still shows the old signature of NoDebuggingCase#call()

Two get the editor "fresh" again I had to re-open it. During the step 2 - an error is logged:

1077438 [Worker-19] ERROR org.eclipse.xtext.ui.editor.model.XtextDocument  - Error in IXtextModelListener
java.lang.ClassCastException: org.eclipse.xtext.common.types.impl.JvmConstructorImplCustom cannot be cast to org.eclipse.xtext.common.types.JvmDeclaredType
	at org.eclipse.xtext.xtype.impl.XImportDeclarationImpl.getImportedType(XImportDeclarationImpl.java:254)
	at org.eclipse.xtext.xtype.impl.XImportDeclarationImpl.eGet(XImportDeclarationImpl.java:374)
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eGet(BasicEObjectImpl.java:1011)
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eGet(BasicEObjectImpl.java:1003)
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eGet(BasicEObjectImpl.java:998)
	at org.eclipse.xtext.EcoreUtil2.getAllReferencedObjects(EcoreUtil2.java:437)
	at org.eclipse.xtext.xbase.ui.highlighting.XbaseHighlightingCalculator.computeReferencedJvmTypeHighlighting(XbaseHighlightingCalculator.java:133)
	at org.eclipse.xtext.xbase.ui.highlighting.XbaseHighlightingCalculator.highlightElement(XbaseHighlightingCalculator.java:124)
	at org.eclipse.xtend.ide.highlighting.XtendHighlightingCalculator.highlightElement(XtendHighlightingCalculator.java:162)
	at org.eclipse.xtext.ui.editor.syntaxcoloring.DefaultSemanticHighlightingCalculator.highlightElementRecursively(DefaultSemanticHighlightingCalculator.java:83)
	at org.eclipse.xtext.ui.editor.syntaxcoloring.DefaultSemanticHighlightingCalculator.searchAndHighlightElements(DefaultSemanticHighlightingCalculator.java:76)
	at org.eclipse.xtext.ui.editor.syntaxcoloring.DefaultSemanticHighlightingCalculator.doProvideHighlightingFor(DefaultSemanticHighlightingCalculator.java:67)
	at org.eclipse.xtext.xbase.ui.highlighting.XbaseHighlightingCalculator.doProvideHighlightingFor(XbaseHighlightingCalculator.java:107)
	at org.eclipse.xtend.ide.highlighting.XtendHighlightingCalculator.doProvideHighlightingFor(XtendHighlightingCalculator.java:120)
	at org.eclipse.xtext.xbase.ui.highlighting.XbaseHighlightingCalculator.provideHighlightingFor(XbaseHighlightingCalculator.java:97)
	at org.eclipse.xtext.ui.editor.syntaxcoloring.MergingHighlightedPositionAcceptor.provideHighlightingFor(MergingHighlightedPositionAcceptor.java:53)
	at org.eclipse.xtext.ui.editor.syntaxcoloring.HighlightingReconciler.reconcilePositions(HighlightingReconciler.java:142)
	at org.eclipse.xtext.ui.editor.syntaxcoloring.HighlightingReconciler.modelChanged(HighlightingReconciler.java:386)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.notifyModelListeners(XtextDocument.java:206)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:435)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:153)
	at org.eclipse.xtext.ui.editor.DirtyStateEditorSupport$UpdateEditorStateJob.unloadAffectedResourcesAndReparseDocument(DirtyStateEditorSupport.java:181)
	at org.eclipse.xtext.ui.editor.DirtyStateEditorSupport$UpdateEditorStateJob.run(DirtyStateEditorSupport.java:159)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)
For the second part of the ticket the ca seams to be fixed with https://git.eclipse.org/r/#/c/39137/ but the linking is still broken when inner classes are involved. I opened another ticket for that. https://bugs.eclipse.org/bugs/show_bug.cgi?id=457123
println(inner) //<-- set breakpoint here

If you select inner and use display or inspect shortcut an error dialog pop ups: "Evaluation must contain either an expression or a block..."
Created attachment 249889
Fix to JDT Debug that respects nested interfaces

This seems to be a JDT debug issue.

If you have a debug session, JDT tries to resolve the sources for a given type. If there is a SMAP involved the source may not be java.
So JDT tries to create the source from the binary informations through the org.eclipse.jdt.internal.debug.eval.ast.engine.BinaryBasedSourceGenerator.
This works in all cases except nested interfaces.
This has different reasons but the main reason is that there is a guard that checks if a buffer is null and only then the nested interface is generated. This buffer is always null when generating nested types.

I created a patch to JDT with a minimal change that should not break the rest of the code.
Created attachment 249890
Fix to JDT Debug that respects nested interfaces

I would like to move this bug to JDT Debug.
(In reply to Holger Schill from comment #5)
> Created attachment 249890 [details]
> Fix to JDT Debug that respects nested interfaces
> 
> I would like to move this bug to JDT Debug.

Thank you for the patch Holger!

You are on the right track, but the snippet your fix builds does not allow display / inspect on methods / fields of a nested interface.

If we change your snippet slightly: 
class NoDebuggingCase {
  def void call(NoDebuggingAcceptor inner) {
    println(inner)
    inner.accept("foo") //<-- bp here, display on 'inner.accept("foo")'        
  }

  interface NoDebuggingAcceptor {
    def void accept(String typeImport)
  }
}

The snippet your patch generates is missing the accept member:

static interface NoDebuggingAcceptor {}

Instead we need to make sure we include the members of the nested type (and any nested types in the nested type, etc)

If you update your fix slightly to fall through and compute members, it works for me (testing using the xtext examples). For example:

<snip>
else if (referenceType instanceof InterfaceType) {
  if (buffer != null) {
    source.append("abstract class "); //$NON-NLS-1$
    source.append(getSimpleName(typeName)).append(
    "___ implements "); //$NON-NLS-1$
    source.append(typeName.replace('$', '.')).append(" {\n"); //$NON-NLS-1$
    fCodeSnippetPosition += source.length();
    source.append(buffer).append("}\n"); //$NON-NLS-1$
    return source;
  }
  source.append("interface "); //$NON-NLS-1$
  source.append(getSimpleName(typeName));
}
<snip>

will yield a snippet like:

static interface NoDebuggingAcceptor {
  abstract public void accept(java.lang.String arg0);
}

and allow display / inspect on nested members.
Michael, are you still waiting for input from Holger? Given your last comment, I suspect you have a fix in place? Is that something for Mars?
(In reply to Sebastian Zarnekow from comment #7)
> Michael, are you still waiting for input from Holger? 

Yes, I was giving Holger a chance to update his fix (if he wanted to)

> Given your last comment, I suspect you have a fix in place? Is that something for Mars?

I have not made my own fix, so much as pointed out how Holger would have to update his fix to work as intended and not cause any regressions. 

I will give him a little longer to respond, and then I will push in a fix for M6.
Created attachment 250495
Fix to JDT Debug that respects nested interfaces

Reworked patch
Michael, is there a chance to make the fix available for the next milestone?
(In reply to Sebastian Zarnekow from comment #10)
> Michael, is there a chance to make the fix available for the next milestone?

Pushed fix to:

http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=c6b937bdfa1be5199c3444d38a5ba9931974b76a

Thanks again.
Holger / Dennis ,
Can you verify the resolution of the bug in the build ?
