There are still some refactorings that require the user to fully select an 
identifier (cannot remember which ones, but Kai observed this as well). 

Pleaes make a pass over all refactoring and ensure that they also work on 
empty selections.

There are still some refactorings that require the user to fully select an 
identifier (cannot remember which ones, but Kai observed this as well). 

Pleaes make a pass over all refactoring and ensure that they also work on 
empty selections.
For some of them it is not to easy. Especially extract local, constant and 
method. For example fort e().f(). What do you do when extracting a local from 
an empty selection inside "e().f()". If we come up with something we should be 
consistent here.
My main frustration is with inline method:
	public void bar() {
		foo();
	}
	private void foo() {
	}
You can set the caret inside foo() in the method declaration or the invokation 
and you get the error message:
"Select a method declaration, method invokation, etc..."

This is easy to fix and I have a PR for that already. Will look into it for 
M3. For the extract case we have to find some understandable story. May be 
only the expression that contains the caret.
I fixed the inline method case for M3. I am postponing the extract cases. I 
still don't have an idea what the right solution is. IMO it is ok that when 
extract something you have to select it and it is not enough to place the 
cursor somewhere.

Erich, comments ?
I agree for extract local the user has to select an expression. OK to close.
Marking as fixed for M3.
