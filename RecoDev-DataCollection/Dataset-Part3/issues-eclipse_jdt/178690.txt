In the past we've advised processor authors to avoid expensive operations during reconcile by responding to the "phase" option in AnnotationProcessorEnvironment.getOptions().  Type generation, via Filer.createSourceFile(), is often expensive, so there are probably processors now that do not generate types during reconcile.

However, in Eclipse 3.2 and previously, we ignored attempts to generate types during reconcile anyhow.  In Eclipse 3.3 we have added this functionality.

In 3.3, if a processor generates a file during build, and then does not generate it during reconcile, we conclude that it must have stopped generating it because something changed; and we remove it from the typesystem.  So the strategy of not generating during reconcile will cause problems.

One solution might be for processors that want to optimize in this way to let the tool know what they're doing.  The only available API for processors to talk to the tool is AnnotationProcessorFactory.supportedOptions(), in Java 5 processing, or Processor.getSupportedOptions(), for Java 6.  We see a 2x2 grid of possibilities:

A. Processor can say "no generation at all during reconcile."  Behavior would be like 3.2, no attempt to generate, modify, or delete types at reconcile time.

B. Processor can say "no deletion during reconcile."  It would still be able to generate, or modify generated types, but we would never actually *remove* a type unless it was deleted during build.

1. Processor indicates its preference by responding "-Aphase" from its AnnotationProcessorFactory.supportedOptions() implementation, or "phase" in Java 6.  (The -A stems from a bug in Sun JDK 5.)

2. Instead of "-Aphase", something more explicit like "-AnoReconcileTypeGeneration".

We will seek user input as to which (if any) of these options seems appropriate.

In the past we've advised processor authors to avoid expensive operations during reconcile by responding to the "phase" option in AnnotationProcessorEnvironment.getOptions().  Type generation, via Filer.createSourceFile(), is often expensive, so there are probably processors now that do not generate types during reconcile.

However, in Eclipse 3.2 and previously, we ignored attempts to generate types during reconcile anyhow.  In Eclipse 3.3 we have added this functionality.

In 3.3, if a processor generates a file during build, and then does not generate it during reconcile, we conclude that it must have stopped generating it because something changed; and we remove it from the typesystem.  So the strategy of not generating during reconcile will cause problems.

One solution might be for processors that want to optimize in this way to let the tool know what they're doing.  The only available API for processors to talk to the tool is AnnotationProcessorFactory.supportedOptions(), in Java 5 processing, or Processor.getSupportedOptions(), for Java 6.  We see a 2x2 grid of possibilities:

A. Processor can say "no generation at all during reconcile."  Behavior would be like 3.2, no attempt to generate, modify, or delete types at reconcile time.

B. Processor can say "no deletion during reconcile."  It would still be able to generate, or modify generated types, but we would never actually *remove* a type unless it was deleted during build.

1. Processor indicates its preference by responding "-Aphase" from its AnnotationProcessorFactory.supportedOptions() implementation, or "phase" in Java 6.  (The -A stems from a bug in Sun JDK 5.)

2. Instead of "-Aphase", something more explicit like "-AnoReconcileTypeGeneration".

We will seek user input as to which (if any) of these options seems appropriate.
The Apache Beehive annotation processors utilize AnnotationProcessorEnvironment.getOptions() to detect the current processing "phase". As mentioned in the bug, to improve performance the processors avoid expensive operations like use of PackageDeclaration methods during the reconcile phase.

Would be great to maintain similar behavior in 3.3... so maybe go with option A, where a processor can indicate the preference for "no generation at all during reconcile."

On further discussion, it seems problematic to rely on the processors to do the optimization.  This works for processors written intentionally for Eclipse, but not for processors written to run against javac.  We want the Eclipse IDE to be able to perform well with arbitrary processors.

So, it seems better to have a project-scope option "enable type generation during reconcile".  If disabled, behavior would be like 3.2.  Default would be disabled.

Adding this option means adding a new preference constant, adding a method to the AptConfig class, and adding a checkbox to the project GUI.  These are all non-breaking changes.

Risk is low: the feature was only added in 3.3M5, so we do not think anyone could be relying on it yet, so disabling it by default should not be a problem.  In fact, this is probably less risky than leaving it enabled would be.
This is actually a critical bug, as without it, processors who have optimized their type generation for IDE use will delete their types on every reconcile.
Ok.  In order to fix it without API change, we will go with option A2.  Type generation during reconcile will be disabled unless processor factories reply to supportedOptions() with a collection that includes the string "enableTypeGenerationInEditor".  Note that it is not necessary to actually specify this option in the processor options to get type generation to occur: that is, we will treat the option as always being present, but only act upon it if the processor claims to support it.
Changing sev to major (not critical; the workaround of disabling all reconcile-time processing still is available) and priority to P2.
Fixed
