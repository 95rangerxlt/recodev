BETA_JAVA8:

This ER will be used to implement track support for serializeable lambdas.

BETA_JAVA8:

This ER will be used to implement track support for serializeable lambdas.
Andy, this is another where we could use some help. The subject has serializability and lambdas have seen so much discussion and many things
have changed back and forth. We need to understand where things stand
at the spec and RI level and start from there. Thanks.
Once this is implemented, please see if https://bugs.eclipse.org/bugs/show_bug.cgi?id=424211 is a duplicate. Very likely.
Created attachment 238410
work in progress

Initial work-in-progress patch that causes the compiler to generate the $deserializeLambda$ method when a class contains serializable lambdas. More notes to follow
Changes in the patch and what is/isnt done:

- when a lambda expression is resolved, we mark whether it is serializable. TODO Intersection casts are not yet handled here.

- The altMetafactory bootstrap method entries are generated for serialized lambdas (as opposed to the regular meta factory). TODO marker interfaces not yet handled which also need to use the altMetafactory - I suspect this is possibly a problem for our non serialized lambdas too, that are using intersection casts, since the altMetafactory call is the one where you can express marker interfaces.

- New $deserializedLambda$ method created that handles deserialization of a SerializedLambda object. Very complex code gen compared to the typical bridge/synthetic methods.  Ours is deliberately the same as what javac creates (b118/b120).  With two big switch statements and then a lot of checking of lambda fields before finally calling invokedynamic on the altMetafactory.

- New tests in SerializableLambdaTest. Note 2 of the tests fail but I *think* this is a JVM thing as the same code fails for javac.  Both failing tests are capturing the instance containing the lambda (e.g. referencing/capturing an instance field)

- Lots of supporting constants and helpers added here and there to support code generation.

more todos

- the names generated for lambdas by javac are more sophisticated than ours. There is an article in one of the mailing lists about their new scheme that we should also use (based on hashing captured information and containing methods for the lambda).

This patch is not in finished state but if anyone wants to look at it or try it, feedback welcome.
Created attachment 238522
Latest version of the patch to support serialized lambdas

This is a new version of the patch. There are more testcases and it includes more fixes:

- intersection casts for lambdas are now supported correctly. We no longer assume that the first entry in an intersection cast is the SAM type, we work out which one it is (if there is one!). Using intersection casts (regardless of whether the lambda is serializable) requires the use of altMetaFactory for lambda construction, since that can be passed additional marker interfaces - this is all now working too.

Path walk through:

- SerializableLambdaTest
new tests for serializing lambdas. Note two tests are commented out (the test methods have an x prefix) - these are valid tests but fail with what looks like a JVM issue because the same code fails in the same way when compile with javac. The tests verify the structure of the new $deserializeLambda$ generated method, the structure of bootstrap attributes and the lambda generated names.

- RunOnlyJava8Tests
new serializable lambda tests added

- ClassFile
New SyntheticMethodBinding variant for the $deserializeLambda$ method.
Bootstrap method generation altered to use metafactory/altmetafactory - also preserves marker interfaces from intersection casts.
Due to the complexity of the code in $deserializeLambda$ (branching) in order to keep the stack map computation code happy the local variable bindings are setup for synthetic bindings.

- FunctionalExpression
keeps track of the bootstrap method supporting it.

- LambdaExpression
New boolean indicating serializable and some code to determine it during resolution.
New getMarkerInterfaces() that, for intersectioncast lambdas, determines the subset of cast types that are not the SAM and not Serializable (since the latter is handled by a bitflag).

- ClassFileConstants
Added new bitflag values to support the options to altMetafactory

- CodeStream
New complex code for generating the body of $deserializeLambda$, intended to produce similar bytecode to javac.

- ConstantPool
New constants to support the new code generation.

- IntersectionCastTypeBinding
Added getSAMType helper - right place for this?

- Scope
Added some helper methods to support code generation.

- SourceTypeBinding
Recording info about $deserializeLambda$ synthetic method

- SyntheticMethodBinding
Constructor for $deserializeLambda$ synthetic.

- TypeConstants
New entries to support code generation.

----
What is not done?
This patch works as-is. The remaining work would be to alter the name generation policy for our lambdas. The names we have are a little fragile, especially for (de)serialization since they make it relatively easy to deserialize something as the wrong thing. A new naming scheme would include a hash of the context around the lambda: the enclosing method/signature where applicable, the captured variables and, when assignment occurs, the name of the variable to which it is assigned.  I propose we tackle this in another issue.
Created attachment 238804
Modified Patch which can be integrated into latest code

Test results for SerializableLambdaTest are green.

---------------------------------------------------------------------

I have changed the copyright of all the files to 2014  and few indentation issues.

---------------------------------------------------------------------

The compilation results in two erros:

Description	Resource	Path	Location	Type
StringBuilder cannot be resolved to a type	SerializableLambdaTest.java	/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression	line 1141	Java Problem
StringBuilder cannot be resolved to a type	SerializableLambdaTest.java	/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression	line 1141	Java Problem

Have modified StringBuilder to StringBuffer.
Thanks for the implementation Andy, Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=a55be3089b1474701c6009071b6792ce21fce5bc.

Will test some more and raise follow up defects for any issues found.
*** Bug 424211 has been marked as a duplicate of this bug. ***
