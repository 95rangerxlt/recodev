BETA_JAVA8:

The following program triggers an incorrect error message: The target type of 
this expression is not a functional interface: more than one of the intersecting 
interfaces are functional

The intersection should collapse to the most specific type when there is a
supertype - subtype relationship between two constituents.

// --
import java.io.Serializable;
interface I {
	void foo();
}
interface J extends I {
	void foo();
}
interface K {
}
public class X {
	public static void main(String[] args) {
		I i = (I & Serializable) () -> {};
		i = (I & J & K) () -> {};
		i = (J & I & K) () -> {};  
	}
}

BETA_JAVA8:

The following program triggers an incorrect error message: The target type of 
this expression is not a functional interface: more than one of the intersecting 
interfaces are functional

The intersection should collapse to the most specific type when there is a
supertype - subtype relationship between two constituents.

// --
import java.io.Serializable;
interface I {
	void foo();
}
interface J extends I {
	void foo();
}
interface K {
}
public class X {
	public static void main(String[] args) {
		I i = (I & Serializable) () -> {};
		i = (I & J & K) () -> {};
		i = (J & I & K) () -> {};  
	}
}
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=fb41fdb7e255d6e5b46ffe2a413c2cecddfaeeea

it is still possible to elicit the incorrect message by constructing some
perverse cases (we basically have to keep scanning the intersecting types
until there are no ripples), but given 8b111 is broken even on simpler cases,
we will cross the bridge when we get to it.

See that javac incorrectly compiles this code:

// -- 
import java.io.Serializable;
interface I {
	void foo();
}
interface J extends I {
	void foo();
}
interface K {
}
interface L {
	void foo();
}
public class X {
	public static void main(String[] args) {
		I i = (I & Serializable) () -> {};
		i = (I & J & K) () -> {};
		i = (J & I & K) () -> {};  
		i = (J & I & K & L) () -> {};   // Javac 8b111 compiles this incorrectly.
	}
}
(In reply to Srikanth Sankaran from comment #1)
> Fix and tests released here:
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
> ?h=BETA_JAVA8&id=fb41fdb7e255d6e5b46ffe2a413c2cecddfaeeea

Correct commit id: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=e63b9746075cfa36f9c16fdf188f3c8e6604903a
Do you want to spin off another ticket for comment #1 so the "ripple" scan can be remembered?
(In reply to Paul Benedict from comment #3)
> Do you want to spin off another ticket for comment #1 so the "ripple" scan
> can be remembered?

I don't think we will ever hit in real life, but by all means please raise
a bug. TIA.
