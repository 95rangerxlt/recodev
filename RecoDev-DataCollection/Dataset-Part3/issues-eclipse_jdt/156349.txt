Taking the example code from #36481, quickfix now fails differently on eclipse 3.2.0:

given two types with same name, 

  package a;
  public class A { 
  }

  package b;
  public class A {
	public void doSomething(a.A obj) {
		newMethod(obj); // this should be quickfixed
	}
  }

the generated method has the signature
private void newMethod(A obj), but should have 
private void newMethod(a.A obj). 

Differing from #36481, the class b.A now has a generated "import a.A", which is unused and the call to newMethod(obj) that was used to quickfix is flagged as invalid (The method newMethod(A) in the type A is not applicable for the arguments (A))

As in the mentioned old entry the usage seems esoteric but results from generated code calling to nongenerated code with same classnames in different package by convention.

Taking the example code from #36481, quickfix now fails differently on eclipse 3.2.0:

given two types with same name, 

  package a;
  public class A { 
  }

  package b;
  public class A {
	public void doSomething(a.A obj) {
		newMethod(obj); // this should be quickfixed
	}
  }

the generated method has the signature
private void newMethod(A obj), but should have 
private void newMethod(a.A obj). 

Differing from #36481, the class b.A now has a generated "import a.A", which is unused and the call to newMethod(obj) that was used to quickfix is flagged as invalid (The method newMethod(A) in the type A is not applicable for the arguments (A))

As in the mentioned old entry the usage seems esoteric but results from generated code calling to nongenerated code with same classnames in different package by convention.
this behaviour still exists on 3.3 europa
no longer reproducible on 4.3

Correct result:

package b;

public class A {
	public void doSomething(a.A obj) {
		newMethod(obj);
	}

	private void newMethod(a.A obj) {
		// TODO Auto-generated method stub
		
	}
}
