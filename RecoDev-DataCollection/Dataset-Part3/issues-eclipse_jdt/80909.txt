I200412081200, probably introduced with rev. 1.53 of ReorgPolicyFactory.
I thought we had a testcase for this, but obviously we don't (or a wrong one).

class Source {
	int field1; 
	int field2;
	int field3;
	void method1() {}
	void method2() {}
}
class Target {
	int targetField;
}

Select all members of Source in the Outline and drag them onto targetField.
Expected: Members are inserted into Target in the original order.
Was: Members order is reversed.
Works correctly when dropping onto the type Target.

The easiest fix is probably to reverse the for-loop over javaElements in
ReorgPolicyFactory.CopySubCuElementsPolicy#createChange(..) and
ReorgPolicyFactory.MoveSubCuElementsPolicy#createChange(..).

I200412081200, probably introduced with rev. 1.53 of ReorgPolicyFactory.
I thought we had a testcase for this, but obviously we don't (or a wrong one).

class Source {
	int field1; 
	int field2;
	int field3;
	void method1() {}
	void method2() {}
}
class Target {
	int targetField;
}

Select all members of Source in the Outline and drag them onto targetField.
Expected: Members are inserted into Target in the original order.
Was: Members order is reversed.
Works correctly when dropping onto the type Target.

The easiest fix is probably to reverse the for-loop over javaElements in
ReorgPolicyFactory.CopySubCuElementsPolicy#createChange(..) and
ReorgPolicyFactory.MoveSubCuElementsPolicy#createChange(..).
Fixed > 20050209
