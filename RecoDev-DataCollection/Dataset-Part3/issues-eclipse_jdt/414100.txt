interface A_test109 {
	int i = foo(); // Error
	default int foo() {}
}

The quick fix: "Change modifier of 'foo()' to 'static'" in the above example for compilation error: "Cannot make a static reference to the non-static method foo() from the type A_test109", produces the following result:

interface A_test109 {
	int i = foo();
	default static int foo() {}
}

The 'default' modifier should be replaced with 'static'.

interface A_test109 {
	int i = foo(); // Error
	default int foo() {}
}

The quick fix: "Change modifier of 'foo()' to 'static'" in the above example for compilation error: "Cannot make a static reference to the non-static method foo() from the type A_test109", produces the following result:

interface A_test109 {
	int i = foo();
	default static int foo() {}
}

The 'default' modifier should be replaced with 'static'.
Similar issue also occurs if we have an abstract method instead of the default method:

interface A_test109 {
	int j = bar(); // Error
	abstract int bar();
}

The quick fix: "Change modifier of 'bar()' to 'static'" should remove the 'abstract' modifier and add the 'static' modifier.

interface A_test109 {
	int j = bar(); 
	static int bar(); // Error - "Add body" or "Add 'abstract' modifier"
}

However, the resulting code as above will still have compile error as the static method doesn't have a body. 

Markus, is the behavior fine or should we also add body along with changing the modifier of an abstract method to 'static'? Or, should the quick fix "Change modifier of 'bar()' to 'static'" be disabled when the method is abstract?
Created attachment 237553
Patch + Tests

The patch is created from the branch mmathew/BETA_JAVA8 for the commit:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?h=mmathew/BETA_JAVA8&id=21df9190aa5e9530d2a503fa445e3d93ebbac93c

Adding body along with changing the modifier of an abstract method to 'static'.
Markus, please review.
Created attachment 241508
Fix + Tests

Updated patch. Based on master.
The changes looks good.
Thanks Manju. Released in master with:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=2f356671aec51199c146f230451f6f99cd357d11
(In reply to Noopur Gupta from comment #2)
> Adding body along with changing the modifier of an abstract method to
> 'static'.

This is dangerous: The quick fix name doesn't tell that it also adds a default implementation, and the user may miss that the method body needs attention. It's already disputable that ModifierChangeCorrectionProposal now adds a body as a side effect, but it at least has to use the code template that inserts
// TODO Auto-generated method stub


Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=4970f29936c4d612a6dfc00fe1194524532e0ce6

The commit also includes various fixes for related problems in this snippet:

interface Intf {
    int CONST= 1;
    static void foo() { }
    static int bar();
    default int bad();
}

public abstract class Clazz {
    public static int CONST= 2;
    public static void foo() { }
    public abstract void bar();
    
    void test(Clazz c, Intf i) {
        Clazz.bar();
        c.foo();
        i.foo();
        System.out.println(c.CONST);
        System.out.println(i.CONST);
    }
}
For the following example, the quick fix overwrites the method body:
interface Test {
	int i= foo(); // [1] Apply: Change modifier of 'foo()' to 'static'
	abstract int foo() {
		return 100;
	}
}

Added a check and updated tests:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=5e7780f22022c57e8344d7fc36b1397ff3cf5b0b
