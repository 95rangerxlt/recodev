This code:

for (int ruleId : ruleIds) {
	grid.compute().affinityRun(cache.name(), ruleId,
		() -> log.info("Processing rule #{} {}", ruleId, cache.get(ruleId)) );
}

will generate compiler error: Unhandled exception type GridException

with 1 quick fix: Surround with try/catch.

However, when surround with try/catch quick fix is selected, it becomes:

try {
	grid.compute().affinityRun(cache.name(), ruleId,
		() -> log.info("Processing rule #{} {}", ruleId, cache.get(ruleId)) );
} catch (GridException e1) {
	throw new RuntimeException("Cannot compute", e1);
}

which won't work (i.e. the code still won't compile), as quick fix is surrounding the outer method affinityRun(), which doesn't throw checked Exception, while the inner lambda still throw GridException.

What JDT should do is convert the lambda into a Runnable (as it's inferred from the context), then surround the Runnable's method body with try/catch.

This code:

for (int ruleId : ruleIds) {
	grid.compute().affinityRun(cache.name(), ruleId,
		() -> log.info("Processing rule #{} {}", ruleId, cache.get(ruleId)) );
}

will generate compiler error: Unhandled exception type GridException

with 1 quick fix: Surround with try/catch.

However, when surround with try/catch quick fix is selected, it becomes:

try {
	grid.compute().affinityRun(cache.name(), ruleId,
		() -> log.info("Processing rule #{} {}", ruleId, cache.get(ruleId)) );
} catch (GridException e1) {
	throw new RuntimeException("Cannot compute", e1);
}

which won't work (i.e. the code still won't compile), as quick fix is surrounding the outer method affinityRun(), which doesn't throw checked Exception, while the inner lambda still throw GridException.

What JDT should do is convert the lambda into a Runnable (as it's inferred from the context), then surround the Runnable's method body with try/catch.
I am having the same issue, here is a SSCCE:

public class TestEclipse {
    private static Transformer TRANSFORMER = new Transformer();

    public void test() {
        try {
            Optional.ofNullable("10").map(TRANSFORMER::transform).ifPresent(System.out::print);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
    }

    private static class Transformer {
        Long transform(String number) throws MalformedURLException {
            return Long.valueOf(number);
        }
    }

    public static void main(String[] args) {
        new TestSonar().test();
    }
}
Standalone example:

import java.nio.file.*;
import java.util.stream.Stream;

public class LambdaException {
    void foo(Stream<Path> files) {
        files.forEach(f -> Files.delete(f));
    }
}

After converting the lambda body to block ...

        files.forEach(f -> {
            Files.delete(f);
        });

..., the "Surround with try/catch" Quick Fix surrounds the right statement, but it uses type Exception instead of IOException. For an equivalent statement outside of a lambda body, it correctly uses IOException:

        Files.delete(files.iterator().next());
*** Bug 433426 has been marked as a duplicate of this bug. ***
*** Bug 458708 has been marked as a duplicate of this bug. ***
*** Bug 464451 has been marked as a duplicate of this bug. ***
*** Bug 472373 has been marked as a duplicate of this bug. ***
New Gerrit change created: https://git.eclipse.org/r/56860

WARNING: this patchset contains 1471 new lines of code and may require a Contribution Questionnaire (CQ) if the author is not a committer on the project. Please see:https://wiki.eclipse.org/Project_Management_Infrastructure/Creating_A_Contribution_Questionnaire
Gerrit change https://git.eclipse.org/r/56860 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=1666ecb6f9bef6be89e7a6b9ea30816d5311a1c3
(In reply to Eclipse Genie from comment #8)
> Gerrit change https://git.eclipse.org/r/56860 was merged to [master].
> Commit:
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=1666ecb6f9bef6be89e7a6b9ea30816d5311a1c3
> 

With the fix, when a try-catch needs to be added in lambda expression's body, it is converted to a block body first. Similarly, method reference is first converted to the corresponding lambda expression with block body and the expression in the body is surrounded with try-catch.

Fixed in master.
