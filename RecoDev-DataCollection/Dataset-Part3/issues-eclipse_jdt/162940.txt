The "Filter Super Invocation" search filter (bug 157814) has a suboptimal name, since it is too similar to super method invocation, i.e. super.*() calls.

One proposal was "Filter Overridden", see bug 157814 comment 8. Another was "Filter Supertype Method". Currently, the filter has this description: "Filters references to methods that are declared in a supertype. Calling these methods may or may not invoke the search target at run time."

Also note that the filter is only visible in the UI for method reference searches, so "Filter Overridden" is maybe less confusing than it sounds without context.

The "Filter Super Invocation" search filter (bug 157814) has a suboptimal name, since it is too similar to super method invocation, i.e. super.*() calls.

One proposal was "Filter Overridden", see bug 157814 comment 8. Another was "Filter Supertype Method". Currently, the filter has this description: "Filters references to methods that are declared in a supertype. Calling these methods may or may not invoke the search target at run time."

Also note that the filter is only visible in the UI for method reference searches, so "Filter Overridden" is maybe less confusing than it sounds without context.
I like "Filter Supertype Method"
I still think 'Filter Super Invocation' is a good suggestion. 

Other idea was: 'Calls to Overridden Methods'
This is a long name but we might want to remove the 'Filter...' prefix anyways, to be consistent with other filter menus like in the package explorer.

>I still think 'Filter Super Invocation' is a good suggestion. 
I also found this strange when I did the M3 test pass - that's why Martin put me on the cc-list.
To me a super invocation, means "super.foo()" (using bytecode invokesuper).
To me as well, that's why I think we have to change it. I like "Filter Overridden"
I think 'Filter Overridden' is problematic in the context of the existing filter actions:
'Filter Javadoc'
'Filter Deprecated'

'Filter Potential'

The first 2 filters work on the location of the reference, the last on the kind of match.

As said, I want to remove the 'Filter' prefix. So we could rename things to
'In Javadoc'
'In Imports'
'Potential Matches'
'References To Overridden' or 'References To Declaration'

Would 'Virtual Matches' make sense?


What's virtual ? Too close to potential...

"Filter Supertype Method" ?
"Filter Supertype Match" ?
Looking at filter description, what about:
"Declared in Supertype" ?

"Supertype Method" sounds also good (if "Filter" is removed)...

I do not like "Filter Overridden" as user may think that this will also filter sub-types invocations which is not the case... IMO, this term is ambiguous as you will never be 100% sure what is overridden: the pattern or the found match!?

I also have a question: would it be possible to make this filter invalid (grayed) or removed from the menu when another search than method reference is done?

"virtual" is C++-speak; unclear in Java.
I agree that "Filter Overridden" or "Overridden Methods" could be misunderstood. Similar problem with "Filter Supertype Methods".

I like "References to Overridden", "References to Overridden Methods" or "References to Supertype Methods" an the other shortenings. "Declared in Supertype" would also be OK for me.

> [..] would it be possible to make this filter invalid (grayed) or removed
> from the menu when another search than method reference is done?
This is already the case. Filters only appear in the menu for searches where they are applicable.


(In reply to comment #9)
> > [..] would it be possible to make this filter invalid (grayed) or removed
> > from the menu when another search than method reference is done?
> This is already the case. Filters only appear in the menu for searches where
> they are applicable.
> 
Great :-)

The "References to ..." approach sounds good.
Released the propsed changes from comment 6 with "References to Overridden".
