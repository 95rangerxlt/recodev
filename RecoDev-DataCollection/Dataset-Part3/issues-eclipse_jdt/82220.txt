1. getInverseLocalVariableProposals:
  For local boolean variable that initialized at place of definitation and has
no assignments it allows to inverse initialization expression and all places
when variable is used. Then, it enters in linked mode to change variable name.

  Activation: on name in variable definition fragment.

	public void inverseLocalVariableTest(int a) {
		boolean b = a > 5;
		if (b) {
			System.out.println("Hello b!");
		}
		int c = !b ? 1 : 2;
	}

into:

	public void inverseLocalVariableTest(int a) {
		boolean b = a <= 5;
		if (!b) {
			System.out.println("Hello b!");
		}
		int c = b ? 1 : 2;
	}


2. getPushNegationDownProposals:
  If there is negation before parenthesized expression, it is possible to push
negation into parenthesis.

  Activation: on negation before parenthasis or parentesis after negation.

	public void pushNegationDownTest(int i, int j, int k, int m, int n) {
		boolean b = (i > 1) || !(j < 2 || k < 3);
	}

into:

	public void pushNegationDownTest(int i, int j, int k, int m, int n) {
		boolean b = (i > 1) || j >= 2 && k >= 3;
	}

3. getPullNegationUpProposals:
  Select any boolean expression and pull negation before parentesis.

	public void pullNegationUpTest(int i, int j, int k, int m, int n) {
		boolean b = i > 1 || j >= 2 && k >= 3 || m > 4 || n > 5;
	}

into:

	public void pullNegationUpTest(int i, int j, int k, int m, int n) {
		boolean b = i > 1 || !(j < 2 || k < 3) || m > 4 || n > 5;
	}


4. getJoinIfListInIfElseIfProposals:
  Sometimes sequence of 'if' statements has such conditions, that only one 'if'
statement's 'then' block will be executed, so it is possible (and desirable,
because increases code readability) to join 'if' sequence into one if-else-if
statement.

  Activation: select list of 'if' statements.

	public void joinIfListInIfElseIf(int a) {
		if (a == 1)
			System.out.println("a == 1");
		if (a == 2)
			System.out.println("a == 2");
		if (a == 3)
			System.out.println("a == 3");
	}

into:

	public void joinIfListInIfElseIf(int a) {
		if (a == 1) {
			System.out.println("a == 1");
		} else if (a == 2) {
			System.out.println("a == 2");
		} else if (a == 3) {
			System.out.println("a == 3");
		}
	}


5. getConvertSwitchToIfProposals:
  Activation: on 'switch' statement.

	private static final int B = 3;
	public void convertSwitchToIfTest(int a) {
		switch (a) {
			case 1 :
				System.out.println("1");
				break;
		}
		switch (a) {
			case 1 :
			case 2 :
				System.out.println("1,2");
				System.out.println("second statement");
				break;
			default :
				System.out.println("default");
				break;
			case B :
				System.out.println("3");
				break;
		}
	}


into:

	private static final int B = 3;
	public void convertSwitchToIfTest(int a) {
		switch (a) {
			case 1 :
				System.out.println("1");
				break;
		}
		if (a == 1 || a == 2) {
			System.out.println("1,2");
			System.out.println("second statement");
		} else if (a == B) {
			System.out.println("3");
		} else {
			System.out.println("default");
		}
	}

1. getInverseLocalVariableProposals:
  For local boolean variable that initialized at place of definitation and has
no assignments it allows to inverse initialization expression and all places
when variable is used. Then, it enters in linked mode to change variable name.

  Activation: on name in variable definition fragment.

	public void inverseLocalVariableTest(int a) {
		boolean b = a > 5;
		if (b) {
			System.out.println("Hello b!");
		}
		int c = !b ? 1 : 2;
	}

into:

	public void inverseLocalVariableTest(int a) {
		boolean b = a <= 5;
		if (!b) {
			System.out.println("Hello b!");
		}
		int c = b ? 1 : 2;
	}


2. getPushNegationDownProposals:
  If there is negation before parenthesized expression, it is possible to push
negation into parenthesis.

  Activation: on negation before parenthasis or parentesis after negation.

	public void pushNegationDownTest(int i, int j, int k, int m, int n) {
		boolean b = (i > 1) || !(j < 2 || k < 3);
	}

into:

	public void pushNegationDownTest(int i, int j, int k, int m, int n) {
		boolean b = (i > 1) || j >= 2 && k >= 3;
	}

3. getPullNegationUpProposals:
  Select any boolean expression and pull negation before parentesis.

	public void pullNegationUpTest(int i, int j, int k, int m, int n) {
		boolean b = i > 1 || j >= 2 && k >= 3 || m > 4 || n > 5;
	}

into:

	public void pullNegationUpTest(int i, int j, int k, int m, int n) {
		boolean b = i > 1 || !(j < 2 || k < 3) || m > 4 || n > 5;
	}


4. getJoinIfListInIfElseIfProposals:
  Sometimes sequence of 'if' statements has such conditions, that only one 'if'
statement's 'then' block will be executed, so it is possible (and desirable,
because increases code readability) to join 'if' sequence into one if-else-if
statement.

  Activation: select list of 'if' statements.

	public void joinIfListInIfElseIf(int a) {
		if (a == 1)
			System.out.println("a == 1");
		if (a == 2)
			System.out.println("a == 2");
		if (a == 3)
			System.out.println("a == 3");
	}

into:

	public void joinIfListInIfElseIf(int a) {
		if (a == 1) {
			System.out.println("a == 1");
		} else if (a == 2) {
			System.out.println("a == 2");
		} else if (a == 3) {
			System.out.println("a == 3");
		}
	}


5. getConvertSwitchToIfProposals:
  Activation: on 'switch' statement.

	private static final int B = 3;
	public void convertSwitchToIfTest(int a) {
		switch (a) {
			case 1 :
				System.out.println("1");
				break;
		}
		switch (a) {
			case 1 :
			case 2 :
				System.out.println("1,2");
				System.out.println("second statement");
				break;
			default :
				System.out.println("default");
				break;
			case B :
				System.out.println("3");
				break;
		}
	}


into:

	private static final int B = 3;
	public void convertSwitchToIfTest(int a) {
		switch (a) {
			case 1 :
				System.out.println("1");
				break;
		}
		if (a == 1 || a == 2) {
			System.out.println("1,2");
			System.out.println("second statement");
		} else if (a == B) {
			System.out.println("3");
		} else {
			System.out.println("default");
		}
	}
Created attachment 16934
Patch for AdvancedQuickAssistProcessor.java

New quick assists
Thanks a lot Konstantin. I released the patch with the following fixes:
> 20050107
- getInverseLocalVariableProposals, getPullNegationUpProposals : type binding
can be null: avoided NPE is case of missing binding

I keep the bug open:
- Need test cases!
- Update help page on Quick assist

Some ideas: 
getInverseLocalVariableProposals:
- For finding all references to a field, you can use the existing class
'LinkedNodeFinder'. Using that you can easely also find all write accesses by
looking at the location of the node.
- Initializer should be necessarly required
- Quick assist could suggest a name change: 'x' -> 'notX'
Created attachment 17025
Changes for getInverseLocalVariableProposals
patch released > 20050110
  You are too fast for me! :-)


1. Aha, LinkedNodeFinder is good idea.

2. Initializer is already required:

	// check that variable has initialization at place of definition
	VariableDeclarationFragment vdf= (VariableDeclarationFragment)
covering.getParent();
	if (vdf.getInitializer() == null) {
		return false;
	}

3. I don't know how to change current name using proposal, but now I think that
I can do this just during inversing variable accesses (already implemented, but
after sending latest patch). I hoped that I will able to replace patch with new
one, but now I see that you already used it... I will wait until you will commit
and create new patch. Of course, if you still think that this is good.

Sorry ;-) Normally I'm not that fast, but the patch came just at the right
moment, where I started going through all my bugs...

For point 2. I forgot to put the question marks.
Is the 'initializer not null' really required? I was thinking of code like
  boolean res;
  res= foo();

I guess you could even allow multiple assignments, just negate all right hand
side expressions.

Point 3. was just an idea, not too important, but could be nice. It's of course
a langage problem, so we have to allow the translaters to translate the 'not' as
well.


  Ok, now it will allow to inverse any local variable even if it has
assignments. It will inverse initialization in VariableDefinitionFragment (if
present) and right hand expressions in assignments.

  I also leave "not" string as required externalization.
Created attachment 17027
Changes for getInverseLocalVariableProposals
released path ? 20050110
added acheck that the binding is really a variable biding and replaced the check
for local with !binding.isField

Discovered a bug with
boolean b= false;
b |= !b;
-> Exception thrown

I suspect the bug is that !b is changed to b, but this change is lost as the
infix operation replaces the whole right side.

  !isField() means also that it can be method parameter, not sure that this is good.

  I've fixed bug with assignment. Problem is really that we try to replace two
times - first when inverse right hand side of assignment and second - when
inverse part of original right hand side. Now it is check that for assignment
that right expression has references on our variable and skip inverse.

  I've moved also adding proposals out of loop, in other case we have duplicates
in list (at least in M4).
Created attachment 17041
Changes for getInverseLocalVariableProposals
released your patch > 20050111

I thought negating parameters should be fine (It's up to the user to decide if
that makes sense)

I don't the fix to just check it the variable is on the right side as well
works. Maybe in case of 'b |= !b' it does, but probably not anymore in 'b |= b && c'

I think the problem would go away if the inverse methods (more specifically
getInversedBooleanExpression) is aware that it also has to negate and rename a
variable. So maybe it would make sense to implement the inverse algorithm in a
visitor so certain rules (invert SimpleName) can be modified by overriding.

I added some tests, some of them fail. Can you have a look?
AdvancedQuickAssistTest.testInverseVariable1/2/2b/3/4

I realize that these latest problems are coming from my extended wishes (allow
assingments to the variable ect, allow parameters).
If you prefer to keep things simple, feel free to go back to the non-extended
code. I think, however, that code like 'boolean res; res |= foo(); ...' is common 
  I can not start test cases, I see foloowing error on console, when I try to
start them:

"Error:  " java.lang.IllegalArgumentException: No ClassLoader found for
testplugin: org.eclipse.jdt.ui.tests

  But I've looked on them and tested manually, so I found following bugs:

1. Expression inverse method did not support '&' and '|' operators for boolean
arguments (test 2b). Should work now.

2. I've missed that assignment has operators and they also should be inversed
when we inverse variable (test 4). Should work now.

  I've changed expression inversing method to add provider that allows variables
renaming. This is enough for many cases, but when inversing variable is used,
for example in method invocation, we will miss it. So, I've added check, that in
this case we will not return quick assist.

  In reallity I don't think that assignment using variable itself is useful. I
can understand that some people need declare variable and then assign value, may
be using several 'if' statements; then this variable is used in other 'if'
statements. But change it, especially using itself - does not look common and
easy to understand.

  Nevertheless, new patch supports this.
Created attachment 17077
Changes for getInverseLocalVariableProposals
*** Bug 68743 has been marked as a duplicate of this bug. ***
I forgot to mention that I released the patch right after you posted it
getConvertSwitchToIfProposals:

The proposal should also be offered if a switchcase ends with a return. Consider
this code snippet:

switch (i) {
	case 3:
		return;

	case 4:
		System.out.println(4);
		break;
}

This could be transformed in the same way, but the quick assist is not offered.

Conversely, the following snippet does not get properly transformed:

switch (i) {
	case 3:
		if (true)
			break;
		break;
}

In this case, the conditional break is not converted. It becomes:

if (i == 3) {
	if (true)
		break;
}


I guess solving these problems require quite some flow analysis...
  Aha, 'return' statement is interesting case. I think that it can be handled
like  'break', i.e. quick assist will understand that this is end of this 'case'
end will use it as body.

  About flow analysis. I don't think that this is possible in general case. I
could just check that if I can find 'return' in 'case', or 'break' on top
control level (i.e. not inside of inner loop or switch), and don't suggest quick
assist in this case.

  Bad news is that I can make such changes only this evening, I don't have
sources in office. You found quite a few problems in my quick assist and M5 is
tomorrow. :-(

Only critical fixes can go in M5, so don't worry. :-)
Created attachment 18343
Patch for AdvancedQuickAssistProcessor.java

Fixes for bugs:

1. https://bugs.eclipse.org/bugs/show_bug.cgi?id=85391
  Now it will check, that if variable name already starts with "not" (or what
is configured in resource bundle), then it will remove this start substring in
proposed variable name.

2. https://bugs.eclipse.org/bugs/show_bug.cgi?id=85396
  Now it will allow "join if sequence in if-else-if" only if there are more
than one 'if' statement selected.

3. https://bugs.eclipse.org/bugs/show_bug.cgi?id=85401
  Now "join if sequence in if-else-if" Quick Fix will convert 'then' statement
in block only if it is 'if' statement without 'else' statement.

4. https://bugs.eclipse.org/bugs/show_bug.cgi?id=85405
  Now "switch to ...." will use label depending on count of 'case' statements
and existance of 'default' block. I hope that this covers most cases. ;-)

5. https://bugs.eclipse.org/bugs/show_bug.cgi?id=85403 and
https://bugs.eclipse.org/bugs/show_bug.cgi?id=82220#c17
  Now quick assist will check that there is "stop" statement, i.e. 'break' or
'return' as last executable statement. For example this can be converted,
because 'break' always executed in both case blocks:
		switch (a) {
			case 1 :
				System.out.println("1");
				{
					System.out.println("11");
					System.out.println("12");
					break;
				}
			case 4 :
				System.out.println(4);
				break;
		}

into:

		if (a == 1) {
			System.out.println("1");
			{
				System.out.println("11");
				System.out.println("12");
			}
		} else if (a == 4) {
			System.out.println(4);
		}

and this can be converted:

		switch (a) {
			case 3 :
				System.out.println(3);
				return;
			case 4 :
				System.out.println(4);
				break;
		}

into:

		if (a == 3) {
			System.out.println(3);
			return;
		} else if (a == 4) {
			System.out.println(4);
		}


But this can not be converted, because we don't know, that 'break' will be
executed:
		switch (a) {
			case 1 :
				System.out.println("z");
				{
					System.out.println("1");
					if (true)
						break;
				}
			case 4 :
				System.out.println(4);
				break;
		}
patch released, bugs marked as fixed > 20050229
Thanks a lot!

We urgently need the test cases. Can you give it another try to get the tests
plugin running? Maybe some plugins required by org.eclipse.jdt.ui.tests are
missing? 
Created attachment 18368
Patch for AdvancedQuickAssistProcessor.java

I found problem in "if {if-then-else}" case.
Created attachment 18369
Test cases for new quick assists

I found, that as in previous time, problem is related with performance plugin
import. Sorry, I forgot about this. Now I can run tests, so I've added handful
of them for new quick assists.

I found small problem in code formatting after quick assist
(testJoinIfListInIfElseIf), see line "System.out.println(-3); else if (a ==
4)". There is no newline before "else".
patches released > 20040314. Thanks a lot!
Marking bug as fixed! Thanks again, Konstantin!
 
