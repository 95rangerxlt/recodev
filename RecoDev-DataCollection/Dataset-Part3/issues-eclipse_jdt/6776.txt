Setting java properties for a Junit test does not work for the Junit plugin. 
Looking at the source code it seems that program arguments are set, but a call
to setVMArguments is missing:
public class JUnitLauncher extends JUnitBaseLauncherDelegate {
    /*
     * @see JUnitBaseLauncherDelegate#configureVM(IType[], int)
     */
    protected VMRunnerConfiguration configureVM(IType[] testTypes, int port)
throws CoreException {
        String[] classPath= createClassPath(testTypes[0]);   
        VMRunnerConfiguration vmConfig= new
VMRunnerConfiguration("org.eclipse.jdt.internal.junit.runner.RemoteTestRunner",
classPath);
    
        String [] args= new String[] {
            "-port", Integer.toString(port),
        //    "-debugging",            
            "-classNames"
        };
       
        String[] classNames= new String[testTypes.length];
        for (int i= 0; i < classNames.length; i++) {
            classNames[i]= testTypes[i].getFullyQualifiedName();
        }
        String[] programArguments= new String[args.length + classNames.length];
        System.arraycopy(args, 0, programArguments, 0, args.length);
        System.arraycopy(classNames, 0, programArguments, args.length,
classNames.length);
        vmConfig.setProgramArguments(programArguments);
        return vmConfig;
    }

Setting java properties for a Junit test does not work for the Junit plugin. 
Looking at the source code it seems that program arguments are set, but a call
to setVMArguments is missing:
public class JUnitLauncher extends JUnitBaseLauncherDelegate {
    /*
     * @see JUnitBaseLauncherDelegate#configureVM(IType[], int)
     */
    protected VMRunnerConfiguration configureVM(IType[] testTypes, int port)
throws CoreException {
        String[] classPath= createClassPath(testTypes[0]);   
        VMRunnerConfiguration vmConfig= new
VMRunnerConfiguration("org.eclipse.jdt.internal.junit.runner.RemoteTestRunner",
classPath);
    
        String [] args= new String[] {
            "-port", Integer.toString(port),
        //    "-debugging",            
            "-classNames"
        };
       
        String[] classNames= new String[testTypes.length];
        for (int i= 0; i < classNames.length; i++) {
            classNames[i]= testTypes[i].getFullyQualifiedName();
        }
        String[] programArguments= new String[args.length + classNames.length];
        System.arraycopy(args, 0, programArguments, 0, args.length);
        System.arraycopy(classNames, 0, programArguments, args.length,
classNames.length);
        vmConfig.setProgramArguments(programArguments);
        return vmConfig;
    }
Version 1.0.1 doesn't even allow to set the arguments. 
Launching will soon be based on so called launch configurations and when we 
move JUnit launching to launch configs we will address this.

Notice, that 1.0 didn't support either, so this isn't a regression.
JUnit is now supporting launch configurations. Until launch configs are 
official, use SHIFT click on the running man or debug button to get to the 
available launch configs.
