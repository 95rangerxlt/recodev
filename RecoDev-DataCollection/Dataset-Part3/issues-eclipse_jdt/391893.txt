BETA_JAVA8:

See https://bugs.eclipse.org/bugs/show_bug.cgi?id=383908#c2 and
https://bugs.eclipse.org/bugs/show_bug.cgi?id=383908#c3.

The AST node MethodDeclaration should expose and provide facilities
for manipulating the receiver.

BETA_JAVA8:

See https://bugs.eclipse.org/bugs/show_bug.cgi?id=383908#c2 and
https://bugs.eclipse.org/bugs/show_bug.cgi?id=383908#c3.

The AST node MethodDeclaration should expose and provide facilities
for manipulating the receiver.
Jay, you can study the changes that are being done for bug 391890 (work in
progress) and  use that as the boiler plate for the present one.
Created attachment 222705
Fix without test

Patch also includes the ASTConverter part, which I added so that I could test it with the IDE.

New tests to follow. All existing tests pass.
(In reply to comment #2)
> Created attachment 222705 [details]
> Fix without test
> 
> Patch also includes the ASTConverter part, which I added so that I could
> test it with the IDE.
> 
> New tests to follow. All existing tests pass.

Note: The patch currently doesn't consider receiver in the ASTMatcher. Should it be considered?
(In reply to comment #3)
> (In reply to comment #2)
> > Created attachment 222705 [details]
> > Fix without test
> > 
> > Patch also includes the ASTConverter part, which I added so that I could
> > test it with the IDE.
> > 
> > New tests to follow. All existing tests pass.
> 
> Note: The patch currently doesn't consider receiver in the ASTMatcher.
> Should it be considered?

Yes it should.
(In reply to comment #4)
> (In reply to comment #3)
> > (In reply to comment #2)
> > > Created attachment 222705 [details]
> > > Fix without test
> > > 
> > > Patch also includes the ASTConverter part, which I added so that I could
> > > test it with the IDE.
> > > 
> > > New tests to follow. All existing tests pass.
> > 
> > Note: The patch currently doesn't consider receiver in the ASTMatcher.
> > Should it be considered?
> 
> Yes it should.

While you fix and repost a patch, you could also clean up the following:

    - RECEIVER_PROPERTY: Typo: reciver
    - propertyList = new ArrayList(); : You can directly encode the right size
of the array list as we know it.
    - propertyDescriptors() you can get rid of the explicit case for JLS8.
    - clone0: Should do a deep copy and not a shallow copy !
(see how name of method declaration gets cloned)
    - accept0 - Children should be visited in the normal left to right reading
order.
    - setReceiver(SingleVariableDeclaration rec) - I would actually
call the parameter receiver itself instead of rec.
    - NaiveASTFlattener: Please extract "node.getReceiver()" into a local.
    - ASTRewriteFlattener: if (apiLevel > AST.JLS8) ==> >= AST.JLS8
    - ASTNode receiver = getChildNode(node, MethodDeclaration.RECEIVER_PROPERTY);  can be replaced with the more type
rigorous:
    SingleVariableDeclaration receiver = node.getReceiver(); ??
(In reply to comment #5)
> While you fix and repost a patch, you could also clean up the following:
 ...
> MethodDeclaration.RECEIVER_PROPERTY);  can be replaced with the more type
> rigorous:
>     SingleVariableDeclaration receiver = node.getReceiver(); ??

Agree with all but the last one. I think the getChildNode() returns the new value if any stored in the event. Do you think the new value would have already been set on the method declaration?
(In reply to comment #6)
> (In reply to comment #5)
> > While you fix and repost a patch, you could also clean up the following:
>  ...
> > MethodDeclaration.RECEIVER_PROPERTY);  can be replaced with the more type
> > rigorous:
> >     SingleVariableDeclaration receiver = node.getReceiver(); ??
> 
> Agree with all but the last one. I think the getChildNode() returns the new
> value if any stored in the event. Do you think the new value would have
> already been set on the method declaration?

I think you raise a valid point, so please ignore this last one. Thanks!
Created attachment 222855
Updated patch with tests

This patch includes the suggestions from Srikanth on the earlier patch plus the following:
1. The earlier patch had overlooked several rewrite scenarios. ASTRewriteAnalyzer is the only one that has changed significantly from the previous patch.
2. Modified SimpleName#setIdentifier() to allow 'this' as identifier in AST8 level. Not 100% sure if these changes are enough for all scenarios.
3. Includes the tests, most being in ASTRewritingMethodDeclTest

Couple of notes on the patch.
1. I was tempted to include the receiver in the parameter node list temporarily so that the existing code can take care of rewriting, thus ensuring space, separators etc. But then most of existing methods require property being passed and that means lot of refactoring. So, I gave up and came up with a separate method to rewrite receiver. But this also means lot of new logic to be written and the rewriteReceiver method needs to be closely verified.
2. Currently the rewrite leaves out the existing space in the following two cases when the receiver is removed:
    (i) Space or comments after the receiver if there are no parameters following.
    (ii) Space after the comma (the comma does get removed)

Srikanth, can you please review. I might be adding more tests, BTW.
Created attachment 224220
Previous patch minus AST rewrite

Srikanth, this is essentially the same patch as the previous, but the AST rewrite part has been moved out to bug 395612.
Created attachment 225414
Latest patch

Previous patch adjusted after recent changes
Review comments:

MethodDeclaration:

(1) Please get rid of the warning : Javadoc: Parameter rec is not declared

(2) ASTConverter.java: Should the new code block that handles receiver end
with:

if (thrownExceptionsLength == 0) {
				methodHeaderEnd = receiver.getStartPosition() + receiver.getLength();
			}

??

Otherwise, the patch looks good.
I don't think the receiver property should be a SingleVariableDeclaration. In the jsr308 grammar (July 3, 2012), it is written as:

 Type [Identifier .] this

So except for Type, no property of SingleVariableDeclaration is used correctly.
SimpleName is explicitly defined as "an identifier other than a keyword [..]". and the Identifier is not reflected in the AST.

A better solution for the DOM AST is a RECEIVER_TYPE_PROPERTY with element type "Type", and a another property OUTER_TYPE_NAME with element type "SimpleName". If the receiverType is set to null, this means the "this" parameter is not present and the value of outerType is not used.
(In reply to comment #12)

> A better solution for the DOM AST is a RECEIVER_TYPE_PROPERTY with element
> type "Type", and a another property OUTER_TYPE_NAME with element type
> "SimpleName".

I think it should be a Name and not SimpleName.
> > another property OUTER_TYPE_NAME with element type "SimpleName".
> 
> I think it should be a Name and not SimpleName.

The current grammar only allows an identifier. This is only used for the 'this' parameter of a constructor of an inner class. The identifier must be equal to the name of the outer AbstractTypeDeclaration, which is also a SimpleName. I don't think the added flexibility of Name would buy us anything here.
(In reply to comment #14)
> > > another property OUTER_TYPE_NAME with element type "SimpleName".
> > 
> > I think it should be a Name and not SimpleName.
> 
> The current grammar only allows an identifier.

Indeed. At the time I implemented the ECJ grammar/parser changes I was
somehow under the impression that OuterMost.Inner.this was allowed.
Perhaps this was the case at some point and was changed later, I don't
remember.

The ECJ grammar at the moment reads:

VariableDeclaratorIdOrThis ::= 'this'
VariableDeclaratorIdOrThis ::= UnannotatableName '.' 'this'

UnannotatableName -> SimpleName
UnannotatableName ::= UnannotatableName '.' SimpleName

Jay, raise a follow up bug for this grammar fix that is needed. The second
rule needs to change to be 
VariableDeclaratorIdOrThis ::= SimpleName '.' 'this'
(In reply to comment #15)
> Jay, raise a follow up bug for this grammar fix that is needed.

Bug 398158 will address this.
Created attachment 225616
Updated patch

Patch includes changes suggested by Markus. But still a WIP. Will need adjustments after fix for bug 398158.
Created attachment 225965
Updated patch

Patch updated after the changes to the compiler AST. Couple of notes about the patch:

1. We were storing the annotations on receiver in two places in the compiler AST - as AMD#receiverAnnotations and Receiver#annotations. I have removed the former and fixed code that uses that.

2. I also discovered that in SimpleType and perhaps other sub classes of AnnotatableType, new annotations property may have to be shifted above name and such.
(In reply to comment #18)
> 2. I also discovered that in SimpleType and perhaps other sub classes of
> AnnotatableType, new annotations property may have to be shifted above name
> and such.

I meant to say that I will fix that in a separate commit.
Comments:

(1) I think the change in SimpleName should be backed out. For the receiver,
the name is always 'this' and so need not be captured. A client should expect
to be able set only the qualifying name and if a client tries to set 'this'
as the name, we should throw an exception as the previous code anyway did.

(2) Should we set receiver = null if the code is malformed and of the form:
foo(int this) in AMD.

(3) Is org.eclipse.jdt.core.dom.MethodDeclaration.getReceiver() better named
getReceiverType() ? Also javadoc needs massaging to say type. Like setReceiver
should be setReceiverType. May javadoc also needs massage,

(4) org.eclipse.jdt.internal.core.dom.NaiveASTFlattener.visit(MethodDeclaration):
receiver is better named receiverType

(5) javadoc of org.eclipse.jdt.core.dom.MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY looks mangled in merge ?

(6) javadoc of org.eclipse.jdt.core.dom.MethodDeclaration.receiverQualifier reads
funny. May be we should say qualifying name if any of the explicit 'this'
parameter. Also the javadoc of getReceiverQualifier

(7) org.eclipse.jdt.core.dom.ASTMatcher.match(MethodDeclaration, Object)
should also compare qualifying name of this ? 

(8) AMD.resolve could check for receiver.annotations == null and avoid
a lot of code.

(9) org.eclipse.jdt.core.dom.ASTConverter.convertAndSetReceiver(AbstractMethodDeclaration, MethodDeclaration): internalSetIdentifier call needs to be removed.

(10) Same method: for (int i = 0; i < length; i++) {
			type.annotations().add(convert(annotations[0]));
		} 

???

(11) ASTNode.MALFORMED should be set in DOM/AST if receiver encountered
below JLS8 ? 

(12) Tests should include multiple annotations at some places.
Created attachment 226014
Updated patch

Patch includes all changes except (9). The call internalSetIdentifier is required as it only set the qualifier and not 'this'.

It also includes one more change related to resolving bindings. The changes are local to ASTConverter and DefaultBindingResolver.

Srikanth, could you please look at the patch once again, esp. the binding resolution changes? Thanks!
(In reply to comment #21)
> Created attachment 226014 [details]
> Updated patch
> 
> Patch includes all changes except (9). The call internalSetIdentifier is
> required as it only set the qualifier and not 'this'.

OK, thanks.

> Srikanth, could you please look at the patch once again, esp. the binding
> resolution changes? Thanks!

I looked through the incremental changes and they look fine to me.

Sorry for not giving these comments earlier:

There are a bunch of typos and misnomers in

+		AnnotatableType receiver = method.getReceiverType();
+		assertEquals("Not a single variable Declaration", ASTNode.SIMPLE_TYPE, receiver.getNodeType());
+		assertEquals("Incorrect receiver type", "@Marker @Marker2 X", ((SimpleType) receiver).toString());
+		assertEquals("Incorrect annotations on receiver", 2, ((SimpleType) receiver).annotations().size());
+		assertNull("Invalid receiver qualfier", method.getReceiverQualifier());

Likewise in the next block too. Please fix these and release. Thanks.
Released with the suggested test changes. The commit's here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=eba08540864c5a072bab6eda44e20e08ad2dd7a0
