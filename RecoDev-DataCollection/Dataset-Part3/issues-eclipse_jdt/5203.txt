A user on EC reported that when indexing his project containing 2.000 files,
we ended up processing 40.000 files.

His setup has a lot of symbolic links to denote the same files over and over, 
but none of these are actually located on the classpath (but the original
2000 files).

The code for indexing the project visits the entire project, and does not 
restrain itself to package fragment roots. Therefore it ends up processing
the entire set of .java files in the project.

A user on EC reported that when indexing his project containing 2.000 files,
we ended up processing 40.000 files.

His setup has a lot of symbolic links to denote the same files over and over, 
but none of these are actually located on the classpath (but the original
2000 files).

The code for indexing the project visits the entire project, and does not 
restrain itself to package fragment roots. Therefore it ends up processing
the entire set of .java files in the project.
See ProjectResourceCopier to see how to traverse the resource tree.
Fixed IndexAllProject to visit only source folders (and not the entire project 
as it used to do).

Also fixed DeltaProcessor to not update the index for .java files that are 
outside the classpath.
