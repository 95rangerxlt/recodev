I20081202-1812

On following unit, 'b1' is flagged as dead code:

class BB {
	void foo(boolean b1, boolean b2) {
		if ((false && b1) && b2) {
		}
	}
}

after applying quickfix (remove), it becomes:

class BB {
	void foo(boolean b1, boolean b2) {
		if ((false) && b2) {
		}
	}
}

I20081202-1812

On following unit, 'b1' is flagged as dead code:

class BB {
	void foo(boolean b1, boolean b2) {
		if ((false && b1) && b2) {
		}
	}
}

after applying quickfix (remove), it becomes:

class BB {
	void foo(boolean b1, boolean b2) {
		if ((false) && b2) {
		}
	}
}
other scenario:
class BB {
	void foo(boolean b1, boolean b2) {
		if ((b1 && false) && b2) {
		}
	}
}
I'm working at getting a fix proposal for this one.
Hope to have more to share soon !
Created attachment 243165
patch

The patch comes with tests.
Please add an explicit CoO sign-off comment here.
http://wiki.eclipse.org/Development_Resources/Contributing_via_Git#via_Bugzilla
(In reply to Manju Mathew from comment #4)
> Please add an explicit CoO sign-off comment here.

This contribution complies with http://www.eclipse.org/legal/CoO.php
Created attachment 243880
Patch proposal v2

Compared to previous patch proposal this one brings updated copyright header as described in:
https://wiki.eclipse.org/JDT_UI/How_to_Contribute#Coding_Conventions
Yves, while creating the patch, make sure to choose "Workspace" as the format in the "Create Patch" wizard final page and also use *.patch as the file extension.

Here are my review comments:
=> When the expression is surrounded with multiple parentheses, then the quick fix does not remove all the unnecessary parentheses. Consider the below code snippet:
if(((false && b1))){}
Applying the quick fix gives:
if((false)){}
The utility methods from NecessaryParenthesesChecker.java can come handy.

=> Consider the below condition:
if (false && b1 && b2) {}
The dead code is reported for 'b1' and on applying the quick fix we get:
if (b2) {}
The 'false' is also removed along with 'b1'. The bug seems to be introduced in 4.4 as the same works in Kepler SR1, it would be good to get it resolved along with this bug. Feel free to create a new bug if you think it is better addressed that way.

When you upload a new patch, don't forget to mark the old patch as obsolete.
Created attachment 244458
Patch proposal v3

There is 10 new tests coming with this patch:

testRemoveDeadCodeAfterIf2 ((false && b1) && b2) ==> (false && b2)
testRemoveDeadCodeAfterIf6 ((((false && b1) && b2))) ==> (((false && b2)))
testRemoveDeadCodeAfterIf7 ((((false && b1))) && b2) ==> (false && b2)

testRemoveDeadCodeAfterIf8 ((((false && b1)))) ==> (false)

testRemoveDeadCodeAfterIf9 (false && b1 && b2) ==> (false && b2)
testRemoveDeadCodeAfterIf10 (((false && b1 && b2))) ==> (false && b2)

testRemoveDeadCodeAfterIf3 ((b1 && false) && b2) ==> (b1 && false)
testRemoveDeadCodeAfterIf4 ((((b1 && false))) && b2) ==> (b1 && false)
testRemoveDeadCodeAfterIf5 ((((b1 && false) && b2))) ==> (b1 && false)

It solves cases originally reported as well as the one added during Manju's first review.

However my approach doesn't allow to get a test #6 where all extra parenthesis are removed: I'd like to discuss it.
The patch navigates from parenthesized expression to parenthesized expression to detect extra parenthesis which are later discarded.
In case #6 it fails because the ancestor of (false && b1) is the InfixExpression (false && b1) && b2 which is not parenthesized.
Is all the approach ruined by this case ?
(In reply to Yves Joan from comment #8)
> Created attachment 244458 [details] [diff]
> Patch proposal v3
> 
> testRemoveDeadCodeAfterIf6 ((((false && b1) && b2))) ==> (((false && b2)))
> However my approach doesn't allow to get a test #6 where all extra
> parenthesis are removed: I'd like to discuss it.
> The patch navigates from parenthesized expression to parenthesized
> expression to detect extra parenthesis which are later discarded.
> In case #6 it fails because the ancestor of (false && b1) is the
> InfixExpression (false && b1) && b2 which is not parenthesized.
> Is all the approach ruined by this case ?
If we enable Preferences > Save Actions > Remove unnecessary parentheses then on Save, all the unwanted parentheses are removed. But there the approach is different. For the case in #6, the expression we are dealing with is (false && b1) and on removing b1, the unnecessary parentheses that belongs to the expression is removed with the current patch.

@Markus: Should we deal with case #6 or can we leave it for Save Action to handle it?
(In reply to Yves Joan from comment #8)
> The patch navigates from parenthesized expression to parenthesized
> expression to detect extra parenthesis which are later discarded.
> In case #6 it fails because the ancestor of (false && b1) is the
> InfixExpression (false && b1) && b2 which is not parenthesized.
> Is all the approach ruined by this case ?
> [..]
> testRemoveDeadCodeAfterIf6 ((((false && b1) && b2))) ==> (((false && b2)))

No, that's actually good. The quick fix is invoked on the error for b1, so it's only supposed to clean up parentheses left over from the removal of the infix expression and not all parentheses in the world.

testRemoveDeadCodeAfterIf4,5, etc. are also on the edge of doing too much, but you can argue that if we start removing extra parentheses, then we can also finish the touched stack of adjacent parentheses.

(In reply to Manju Mathew from comment #7)
> => Consider the below condition:
> if (false && b1 && b2) {}
> The dead code is reported for 'b1' and on applying the quick fix we get:
> if (b2) {}
> The 'false' is also removed along with 'b1'. The bug seems to be introduced
> in 4.4 as the same works in Kepler SR1, it would be good to get it resolved
> along with this bug.

I think the fix for bug 418924 made this problem appear. Nowadays, we could just replace the whole else-branch with this simple statement:

	rewrite.remove(infixExpression.getRightOperand(), null);

However, this would still turn the first of the extended operands into dead code. A better fix is to remove all following operands.


I found other situations where the one-argument canRemoveParentheses(..) is not enough and misses to remove parentheses, e.g.:

if ((true || b1) && false) { }

We're not interested in whether the parentheses around '(true || b1)' can be removed (they can't be), but we're interested in whether the parentheses around 'b1' are necessary on the left side of the &&. We need to use NecessaryParenthesesChecker#needsParentheses(..) with the final replacement and target nodes.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=5b301745c7685ceba258e9a30d4566be657a6063 and released Yves' tests (Thanks!) as http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=994f748f6a4131bab86a49e6750836b3fb135cc6
