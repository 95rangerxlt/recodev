I have been successfully using the org.eclipse.jdt.ui.javaCompletionProposalComputer extension point in a plugin (lets call it plugin A).

This plugin have the following code:

public List computeCompletionProposals(ContentAssistInvocationContext context, IProgressMonitor monitor) {
		
		JavaContentAssistInvocationContext ctx = (JavaContentAssistInvocationContext)context;
		CompletionContext coreContext = ctx.getCoreContext();
		try {
		if(coreContext!=null) {
			 int kind = coreContext.getTokenKind();
			 if(kind==CompletionContext.TOKEN_KIND_STRING_LITERAL) { 
...

So it uses the public API JavaContentAssitInvocationContext and its coreContext to decide if a completion is being performed inside a String literal.

This works beautifull.

Now for modularity sake I wanted to seperate this functionallity out to another plugin. Thus I copied the extension point and code into plugin B which then depends on plugin A.

The proposal computer is indeed called, but now the core context is null.

Enabling the code in Plugin A together with the new thing in Plugin B showed that for some reason Plugin A had a non-null core context and Plugin B still had null.

After some time I found that the reason is that the core context is only intialized IFF one of the builtin JDT provided proposalcomputers is called first. This is because they internall call the non-public: JavaCompletionProposalComputer.createCollector(context) which in turn call ExperimentalResultCollector which initializes the corecontext.

Thus the capabilities exposed to a custom proposalcomputer is 'by chance'.

If the above is expected behavior then it would be interesting to find out one of the following:

A) how can I ensure that my completion proposal collector is called *after* the corecontext is initialized ? 

B) can I create the context somehow from within my custom propsal collector with public API that does not interfere with the builtin JDT completion ?

C) Is there a more public (and just as efficient) API to detect where a codecompletion is actually performed ? (e.g. to see if it is on a string)

I have been successfully using the org.eclipse.jdt.ui.javaCompletionProposalComputer extension point in a plugin (lets call it plugin A).

This plugin have the following code:

public List computeCompletionProposals(ContentAssistInvocationContext context, IProgressMonitor monitor) {
		
		JavaContentAssistInvocationContext ctx = (JavaContentAssistInvocationContext)context;
		CompletionContext coreContext = ctx.getCoreContext();
		try {
		if(coreContext!=null) {
			 int kind = coreContext.getTokenKind();
			 if(kind==CompletionContext.TOKEN_KIND_STRING_LITERAL) { 
...

So it uses the public API JavaContentAssitInvocationContext and its coreContext to decide if a completion is being performed inside a String literal.

This works beautifull.

Now for modularity sake I wanted to seperate this functionallity out to another plugin. Thus I copied the extension point and code into plugin B which then depends on plugin A.

The proposal computer is indeed called, but now the core context is null.

Enabling the code in Plugin A together with the new thing in Plugin B showed that for some reason Plugin A had a non-null core context and Plugin B still had null.

After some time I found that the reason is that the core context is only intialized IFF one of the builtin JDT provided proposalcomputers is called first. This is because they internall call the non-public: JavaCompletionProposalComputer.createCollector(context) which in turn call ExperimentalResultCollector which initializes the corecontext.

Thus the capabilities exposed to a custom proposalcomputer is 'by chance'.

If the above is expected behavior then it would be interesting to find out one of the following:

A) how can I ensure that my completion proposal collector is called *after* the corecontext is initialized ? 

B) can I create the context somehow from within my custom propsal collector with public API that does not interfere with the builtin JDT completion ?

C) Is there a more public (and just as efficient) API to detect where a codecompletion is actually performed ? (e.g. to see if it is on a string)
Tom, please investigate.
Tom, is this:

>After some time I found that the reason is that the core context is only
>intialized IFF one of the builtin JDT provided proposalcomputers is called
>first. 

true? If so, will a contributed proposal computer that needs core context info work at all if the JDT Core ones are disabled?
(In reply to comment #2)
> Tom, is this:
> 
> >After some time I found that the reason is that the core context is only
> >intialized IFF one of the builtin JDT provided proposalcomputers is called
> >first. 
> 
> true? If so, will a contributed proposal computer that needs core context info
> work at all if the JDT Core ones are disabled?

I disabled all completion proposals (except mine) in the Content Assist/Advanced preferences and verified that in the loop of ContentAssistProcessor.collectProposals my proposal collector were the only one active and the corecontext were never initialized.

Fortunately I found a workaround for my specific problem: Limit my catagory to the __string_partion and I do not need the corecontext since the completionengine willl already have verified the string context.

This though still prevents me from getting other information from the corecontext; like .isInJavaDoc* and the one i wanted the most the tokenkind.


(In reply to comment #2)
> >After some time I found that the reason is that the core context is only
> >intialized IFF one of the builtin JDT provided proposalcomputers is called
> >first. 
> 
> true? If so, will a contributed proposal computer that needs core context info
> work at all if the JDT Core ones are disabled?

The following is technically true: the core context is only available, if core code completion has been run with a CompletionProposalCollector, and CompletionProposalCollector::setInvocationContext has been called with the invocation context. This *does not* require that one of the JDT-UI-contributed proposal computers are enabled - contributors are free to run core completion themselves, and may even be required to do so to create Java-dependent proposals.

- the current behavior may not be helpful, but certainly does not violate the API, which does not make any guarantees about when the context is available and when not.
- nevertheless, the current behavior could be improved. We should either document the dependency on CompletionProposalCollector::setInvocationContext or try to come up with a replacement context when we don't have one already (for example by running core completion and returning the context received therefrom).

Not major IMO, and neither a 3.2.1 candidate...

I would just say that getCoreContext() should be documented with this fact.

It just says: "might be null"

It should show which method to call to initialize it correctly.

At the moment I can't see how to do that without using private internal API.

If that is not possible it should not be API.

But besides this fact then my biggest issue with this is that the "missing context" occurs "by chance" - it is not determinstic (or at least it is not humanly deterministic since the only thing i change was the plugin name/id)

(In reply to comment #5)
> I would just say that getCoreContext() should be documented with this fact.

Yes.

> At the moment I can't see how to do that without using private internal API.

It's all API:

ICompilationUnit cu;
CompletionProposalCollector cpc= new CompletionProposalCollector(cu);
JavaContentAssistInvocationContext ctx= new 
           JavaContentAssistInvocationContext(cu);
cpc.setInvocationContext(ctx);
cu.codeComplete(cpc);

CompletionContext coreContext= ctx.getCoreContext();

> But besides this fact then my biggest issue with this is that the "missing
> context" occurs "by chance" - it is not determinstic (or at least it is not
> humanly deterministic since the only thing i change was the plugin name/id)

I do not see how this should happen - I believe it depends on the partition kind inside which you execute code assist, and on the set of enabled computers. The plug-in id should not matter at all.


> It's all API:
> 
> ICompilationUnit cu;
> CompletionProposalCollector cpc= new CompletionProposalCollector(cu);
> JavaContentAssistInvocationContext ctx= new 
>            JavaContentAssistInvocationContext(cu);
> cpc.setInvocationContext(ctx);
> cu.codeComplete(cpc);

So, I should create *another* CompletionProposalCollector ontop of the current "running" completionproposalcollector ?!?
 
> I do not see how this should happen - I believe it depends on the partition
> kind inside which you execute code assist, and on the set of enabled computers.
> The plug-in id should not matter at all.

Well, it happens. And it happens alot of places in eclipse - the sequence returned from "exectuion" lookups returns a list, and the order of the list is as far as i can see "undefined". 

I have also been trapped in similar plugin scenarioes (e.g. in WTP) where the plugins (unintentionally) where dependent on that the "core" extension points were run before or after the user provided extensions.

/max


Max, you're right - the core context is indeed only available if another proposal computer run in advance has used a CompletionProposalCollector to compute its proposals. The same is true for getKeywordProposals - these are only available if a previous computer has collected keywords.

Using the CompletionProposalCollector from another computer is only a performance optimization: if another computer has already computed the requested information (keywords, core context, label provider...), we can re-use it. If not, the invocation context has to come up with that information on its own.

Fixed > 20060817
maybe i'm just being slow here...

but could you tell me how to get access to a corecontext from *within* my custom completeionproposalcomputer ?

The previous example showed how to set it up *before* codecompletion occurs..but that is not something I control when already *in* the codecompletion phase.

/max
(In reply to comment #9)
> but could you tell me how to get access to a corecontext from *within* my
> custom completeionproposalcomputer ?
> 
> The previous example showed how to set it up *before* codecompletion
> occurs..but that is not something I control when already *in* the
> codecompletion phase.

The code in comment 6 works during the code completion phase - in fact, this is similar to the code used for the normal Java completions, except for that the invocation context already exists:

@see JavaCompletionProposalComputer.internalComputeCompletionProposals(int, JavaContentAssistInvocationContext, IProgressMonitor)

--

With this bug fixed, you will no longer need any of this, though, as JavaContentAssistInvocationContext.getCoreContext() should always return a non-null value.

and this will have to wait for 3.3 ? :)


(In reply to comment #11)
> and this will have to wait for 3.3 ? :)

Yes - the fix is too much of a change for 3.2.1. For example, calling getCoreContext() or getKeywordProposals() on the invocation context may now trigger a codeComplete call on the compilation unit (instead of returning nothing as it did up to now). 
...and that is the part i don't understand about Comment#6

if I call this code inside my ProposalComputer while a codecompletion is already running will I not end up in a recursive call ?

(this recursion can of course be broken, but it would be a "weird" construct to do)


(In reply to comment #13)
> ...and that is the part i don't understand about Comment#6
> 
> if I call this code inside my ProposalComputer while a codecompletion is
> already running will I not end up in a recursive call ?

No - the IJavaCompletionProposalComputer is a UI concept: there are many ways to come up with proposals for Java content assist. One way is to use the codeComplete facilities offered by jdt-core, which is done using a CompletionProposalCollector. But there are other ways, for example templates (which are independent of core) or word (hippie) completions.

Within your IJavaCompletionProposalComputer::computeCompletionProposals method, you are in the middle of the UI process to collect proposals, but not inside a core-completion process. Whether you need any of the jdt-core completion facilities is your own choice. Setting up a CompletionProposalCollector is entirely your own business and is not recursive.
ok, thanks.
