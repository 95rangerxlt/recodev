Code generations that contains handling of exceptions (like "surround with 
try/catch" and the "extract method" refactoring) tend to include handling of 
RuntimeExceptions and Errors, which often is undesired.

Please provide means to disable this behaviour.

Code generations that contains handling of exceptions (like "surround with 
try/catch" and the "extract method" refactoring) tend to include handling of 
RuntimeExceptions and Errors, which often is undesired.

Please provide means to disable this behaviour.
It should be a general coding preference whether unchecked exception should be 
included in the generated method.
I don't agree with this. The current behavior is as follows:

if the set of selected statements contain a method call which declaration 
declares thrown runtime exceptions or error, the extracted method declares the 
runtimer exceptions as well. Here is an example:

public class E {
    public void bar() throws NullPointerException {
        throw new NullPointerException();
    }
    public void baz() {
    }

    public void foo() {
        bar();
        baz();
    }
}

extracting the method call bar creates a new method that throws a 
NullPointerExcpetion. Extracting the method call baz() doesn't.

The same is true for surround with try/catch. IMO this a proper behavior since 
it keeps to the "documentation" of thrown RuntimeExceptions or Errors.

Any objection to close the PR ?
My problem is regarding libraries like JAXP. For example, 
javax.xml.parsers.DocumentBuilderFactory.newInstance() declares to throw a 
FactoryConfigurationError. There are many other examples.

I would really like to disable catching these by default. Please make this an 
option.
So you concern is more with surround with try/catch then with extract method ?
Well, yes, as "surround with try/catch" generates more code and has direct 
impact on functionality. So I always have to delete this code, whereas I can 
live with an oversized throws-clause (if I have to...).
Surround with try catch doesn't generate a catch block for Runtime exceptions 
anymore even if they are declared in the signature of a called method.

Extract method has an option in the wizard.

Fixed in build > I20020416
