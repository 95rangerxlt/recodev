I implemented as a QuickAssist a convertion from old For loop to the 
EnhancedFor in Java 1.5

In order to activate it you should place the cursor over the for keyword and 
trigger the QuickAssist (Ctrl + 1). If the preconditions for this refactoring 
are satisfied, one would be offered to "Convert to Enhanced For". If you don't 
see this QuickAssist then it might be the case that some conditions for this 
refactoring could not be satisfied (e.g. the whole iteration over the 
collection is done sequentially, there is only Read Access to the collection, 
etc.).

This is an example of conversion. Initially you have:

int[] array= {1,2};
for (int i= 0, max= array.length; i < max; i++){
        System.out.println(array[i]);
}

After applying the quick fix you get:

int[] array= {1,2};
for (int element : array) {
    System.out.println(element);
}


Or here is a smarter one. Initially you have:

String[] names= {"John","Mary"};
for (int i = 0; i < names.length; i++) {
     String name= names[i];
     if (name != null)
         System.out.println(name);
}

After the quick fix you get:

String[] names= {"John","Mary"};
for (String name : names) {
    if (name != null)
        System.out.println(name);
}

NOTE: currently (July 27th), I handle only the cases when one iterates over 
Arrays. In a future version one will be able to convert a For loop that 
iterates over a generic collection as well.

I implemented as a QuickAssist a convertion from old For loop to the 
EnhancedFor in Java 1.5

In order to activate it you should place the cursor over the for keyword and 
trigger the QuickAssist (Ctrl + 1). If the preconditions for this refactoring 
are satisfied, one would be offered to "Convert to Enhanced For". If you don't 
see this QuickAssist then it might be the case that some conditions for this 
refactoring could not be satisfied (e.g. the whole iteration over the 
collection is done sequentially, there is only Read Access to the collection, 
etc.).

This is an example of conversion. Initially you have:

int[] array= {1,2};
for (int i= 0, max= array.length; i < max; i++){
        System.out.println(array[i]);
}

After applying the quick fix you get:

int[] array= {1,2};
for (int element : array) {
    System.out.println(element);
}


Or here is a smarter one. Initially you have:

String[] names= {"John","Mary"};
for (int i = 0; i < names.length; i++) {
     String name= names[i];
     if (name != null)
         System.out.println(name);
}

After the quick fix you get:

String[] names= {"John","Mary"};
for (String name : names) {
    if (name != null)
        System.out.println(name);
}

NOTE: currently (July 27th), I handle only the cases when one iterates over 
Arrays. In a future version one will be able to convert a For loop that 
iterates over a generic collection as well.
Created attachment 13615
patch containing the ConvertForLoopProposal

The patch is created on "org.eclipse.jdt.ui", latest revision from Head on July
27th
Created attachment 13616
patch containing the JUnit Tests 

this patch contains unit tests for ConvertForLoopProposal. I created it on
org.eclipse.jdt.ui.tests (latest revision from Head on July 27th)
I looked at the code and it mostly looks OK. I removed unused code and trimmed 
it to the JDT/UI style guide. Hoewever, there are still cases which aren't 
handled correctly. For example

public class A {
	int get(int i) {
		return i;
	}
	
	void foo() {
		String[] array= null;
		for (int i= 0; i < array.length; i++) {
			System.out.println(array[get(i)]);
		}
	}
}


The code in indexNotReferencedOutsideInferredArray seems to look for any 
parent, but it must take into account that the index can be referenced in 
another expression which is then used as the index.
Tests: the method testArrayIsAccessedByMethodInvocation2 looks unfinished. 
Danny please step by so that we can decide what to do here.
Danny, 

another issue is the handling of the bindings. You can only assume that a ast 
nodes return a non null binding iff the CU compiles without an error. So 
whenever you retrieve a binding who have to check whether it is null or not. 
Bindings that are essential for you (like fOldCollectionTypeBinding, ....) 
must result in a failing precondition checking. I didn't review the code in 
detail so I think it is best if you do a pass to ensure that this is 
guarunteed.

Creating a simple name from a qualified name like it is done in 
doInferCollectionFromFragment, doInferCollectionFromExpression can fail. A 
simple name must not contain a '.' which is the case for qualified names.

According to the Java guideline constant indentifiers are in upper case 
letters (e.g ELEMENT_KEY_REFERENCE)

The method doInferCollection seems to be called two times from precondition 
checking and from getASTRewrite. Shouldn't we cache the result since it can't 
change in between ?
Created attachment 13781
Patch that contains code review changes
Created attachment 13782
Patch containg code review changes for the tests
Danny, can you please based on my comments and the new attached patches 
generate a new version of the quick fix. We can then review the new version 
2004/08/13 and release it.
Created attachment 13922
Patch containing the feedback + new functionality
Created attachment 13923
Patch containing the feedback + new tests
Dirk,

In the previous patch I incorporated all your feedback + I added some new 
functionality:

- this time I got it right the case when the array to be iterated upon is the 
result of a method call. For instance:

int[] array= {1,2,3};

int[] getArray(){
    return array;
}

void foo(){
    for (int i= 0; i < getArray().length; i++){
        System.out.println(getArray()[i]);
    }
}

This gets rightfully converted to:

void foo(){
    for (int element : getArray()){
        System.out.println(element);
    }
}

- I added one more precondition checking, namely that the counter is 
initialiazed with the numeral 0.

     
*** Bug 68905 has been marked as a duplicate of this bug. ***
Code released.
