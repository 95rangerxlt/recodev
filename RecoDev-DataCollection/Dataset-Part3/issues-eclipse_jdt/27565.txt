It seems that to be able to run JUnit's from inside eclipse one has to explicit state each and every new test class in an TestSuite. This is all fine, but it would be reallly nice if eclipse's junit launching could work more like the junit task in ant - where test classes are discovered dynamically. 

The Junit task in ant is given an inclusion/exclusion list (defined by a "regular" expression e.g. **/**/*Test.java) and then by a file search and reflection collects all test classes and then just run them.

The great advantage is that you don't have to think about which test are included/not included in the test suite - you just run'em, and every test visible from a given location is included.

If you are concerned about just running one specfic test/testsuite you would just use the current junit setup.

It seems that to be able to run JUnit's from inside eclipse one has to explicit state each and every new test class in an TestSuite. This is all fine, but it would be reallly nice if eclipse's junit launching could work more like the junit task in ant - where test classes are discovered dynamically. 

The Junit task in ant is given an inclusion/exclusion list (defined by a "regular" expression e.g. **/**/*Test.java) and then by a file search and reflection collects all test classes and then just run them.

The great advantage is that you don't have to think about which test are included/not included in the test suite - you just run'em, and every test visible from a given location is included.

If you are concerned about just running one specfic test/testsuite you would just use the current junit setup.
Erich, any comments here?
My mistake - it is already implemented.


Did not notice the "All tests in Project, Source folder or package.." 





yes it is fixed. However, having the same support as in the Ant JUnit task to 
define the scope would be desirable but currently has lower priority.
