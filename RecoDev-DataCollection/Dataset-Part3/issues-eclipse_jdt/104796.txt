If I try to create a new class inline from an interface for examle
(actionListener, Runnable, etc...) it normally works right and the indentation
(highlighting everything and hitting CTRL-I) works just right like

		// Runnable with correct indentation
		new Runnable() {
			public void run() {
				// Do nothing
			}
		};

If instead I try to do this inside a switch case statement, after the methods,
the }; closing the class gets WRONG indentation and all the indentation after
this gets bugges like this:

			// Runnable with bugged indentation due to case
			new Runnable() {
			public void run() {
				// Do nothing
			}
		};
		// bug here

Minimal test case provided:

public class IndentationSwitchCaseBug {
	
	public static void IBreakIndentation() {
		
		// Runnable with correct indentation
		new Runnable() {
			public void run() {
				// Do nothing
			}
		};
		
		int i = 5;
		
		switch (i) {
		
		case 0:
			// Indentation works right here
			break;
			
		case 1:
			// Runnable with bugged indentation due to case
			new Runnable() {
			public void run() {
				// Do nothing
			}
		};
		// You can see the indentation gets bugged when a runnable
		// is used inside a switch-case statemente
		break;
		}
		
	}
}

If I try to create a new class inline from an interface for examle
(actionListener, Runnable, etc...) it normally works right and the indentation
(highlighting everything and hitting CTRL-I) works just right like

		// Runnable with correct indentation
		new Runnable() {
			public void run() {
				// Do nothing
			}
		};

If instead I try to do this inside a switch case statement, after the methods,
the }; closing the class gets WRONG indentation and all the indentation after
this gets bugges like this:

			// Runnable with bugged indentation due to case
			new Runnable() {
			public void run() {
				// Do nothing
			}
		};
		// bug here

Minimal test case provided:

public class IndentationSwitchCaseBug {
	
	public static void IBreakIndentation() {
		
		// Runnable with correct indentation
		new Runnable() {
			public void run() {
				// Do nothing
			}
		};
		
		int i = 5;
		
		switch (i) {
		
		case 0:
			// Indentation works right here
			break;
			
		case 1:
			// Runnable with bugged indentation due to case
			new Runnable() {
			public void run() {
				// Do nothing
			}
		};
		// You can see the indentation gets bugged when a runnable
		// is used inside a switch-case statemente
		break;
		}
		
	}
}
Are you formatting the code or using typing in the editor?
(In reply to comment #1)
> Are you formatting the code or using typing in the editor?

I'm typing in the editor, and the code formatting gets like that.

Also, if I try to force formatting by highlighting the code and hitting CTRL-I
to call auto-format, the result is the same bugged indentation.
I will investigate.
Are you using the default options? If not, please provide your preferences.
Me and my colleague both experience the same formatter indentation bug, so I
guess it's not due to preferences, since we do not share the same preferences,
but in any case I will check tomorrow and report back with a fresh install as to
be sure it's not preferences-related.

Thanks for the interest ^_^
(In reply to comment #3)
> I will investigate.
> Are you using the default options? If not, please provide your preferences.

Just tried it now.

Steps to reproduce it
* Start with a fresh install of eclipse
* Create a new java project, default settings
* Create a new class into the project, default settings
* Paste this minimal test case into the newly created class (the class name
doesn't matter)

public class IndentationSwitchCaseBug {
	
	public static void IBreakIndentation() {
		
		// Runnable with correct indentation
		new Runnable() {
			public void run() {
				// Do nothing
			}
		};
		
		int i = 5;
		
		switch (i) {
		
		case 0:
			// Indentation works right here
			break;
			
		case 1:
			// Runnable with bugged indentation due to case
			new Runnable() {
			public void run() {
				// Do nothing
			}
		};
		// You can see the indentation gets bugged when a runnable
		// is used inside a switch-case statemente
		break;
		}
		
	}
}

* Highlight everything and hit CTRL-I to force auto-formatting to correct
indentation. You can see the indentation but inside the switch case block (case 1)

* Try to copy and paste the following block around... the indentation gets
bugged only if pasted inside the switch case statement, outside the indentation
is fine.

new Runnable() {
	public void run() {
		// Do nothing
	}
};

* Try to delete that block from the case, you will see that the bugged
indentation goes away (the comment and the break statemente now are allineated
correctly with the correct indentation).


Summary: definitely a bug.

> * Highlight everything and hit CTRL-I to force auto-formatting to correct
> indentation. You can see the indentation *****but***** inside the switch case
block (case 1)

Typo, meant BUG, not BUT.
I will investigate.
When I follow your steps from comment 5, I end up with:

public class IndentationSwitchCaseBug {

	public static void IBreakIndentation() {

		// Runnable with correct indentation
		new Runnable() {
			public void run() {
				// Do nothing
			}
		};

		int i = 5;

		switch (i) {

		case 0:
			// Indentation works right here
			break;

		case 1:
			// Runnable with bugged indentation due to case
			new Runnable() {
				public void run() {
					// Do nothing
				}
			};
			// You can see the indentation gets bugged when a runnable
			// is used inside a switch-case statemente
			break;
		}

	}
}

So this looks good.
Could you please provide your formatter preferences?
> So this looks good.
> Could you please provide your formatter preferences?

Tried it again now.

Deleted EVERYTHING regarding eclipse from my HD, both the /eclipse directory,
and the workspace. Then installed fresh from eclipse-SDK-3.1-win32.zip by
decompressing it into "C:\Programmi\eclipse".

Started eclipse, created a new java project named "aaa", created a new class
named "aaa", pasted the example I provided here into this new class.

Then highlighted everything and hit CTRL-I. Same result:

public class IndentationSwitchCaseBug {
	
	public static void IBreakIndentation() {
		
		// Runnable with correct indentation
		new Runnable() {
			public void run() {
				// Do nothing
			}
		};
		
		int i = 5;
		
		switch (i) {
		
		case 0:
			// Indentation works right here
			break;
			
		case 1:
			// Runnable with bugged indentation due to case
			new Runnable() {
			public void run() {
				// Do nothing
			}
		};
		// You can see the indentation gets bugged when a runnable
		// is used inside a switch-case statemente
		break;
		}
		
	}
}

I will attach my preference file, but since I did not edit any of the
preferences, it's 100% default.
Created attachment 25288
Preferences file used to trigger the bug (note it's DEFAULT 100%)
Additional info:

Eclipse SDK
Version: 3.1.0
Build id: I20050627-1435

Windows XP SP2 ITALIAN
I thought you were using the code formatter (Ctrl + Shift + F). This works fine,
but indeed Ctrl + I misplaced the indentations.
Move to JDT/Text.
(In reply to comment #12)
> I thought you were using the code formatter (Ctrl + Shift + F). This works fine,
> but indeed Ctrl + I misplaced the indentations.

Even in my first report, I do report of the fact the bug comes out with CTRL-I
formatting. Anyway, it's all well what ends well. =)

> Move to JDT/Text.

Thanks.

fixed, added JavaHeuristicScannerTest.testBlocksInCaseStatements

> 20050726
