I20071213-1700

The N&N for 3.4M4 say:

The new 'Convert to StringBuffer' quick assist (Ctrl+1) transforms string concatenations into more efficient, albeit less compact, code using an explicit StringBuffer:

String s= "Offset " + offset + " is at line " + line;

StringBuffer stringBuffer = new StringBuffer();
stringBuffer.append("Offset ");
stringBuffer.append(offset);
stringBuffer.append(" is at line ");
stringBuffer.append(line);
String s= stringBuffer.toString();

This is far less efficient that what the compiler generates for the string concatenation. The compiler will generate the equivalent of:

String s= new StringBuffer("Offset ").append(offset).append(" is at line ").append(line).toString();

Note that the StringBuffer(String) constructor is used which avoids a message send And the returned value of the append(...) method is used which avoid pop and aload-n for each invocation of append(...).

I20071213-1700

The N&N for 3.4M4 say:

The new 'Convert to StringBuffer' quick assist (Ctrl+1) transforms string concatenations into more efficient, albeit less compact, code using an explicit StringBuffer:

String s= "Offset " + offset + " is at line " + line;

StringBuffer stringBuffer = new StringBuffer();
stringBuffer.append("Offset ");
stringBuffer.append(offset);
stringBuffer.append(" is at line ");
stringBuffer.append(line);
String s= stringBuffer.toString();

This is far less efficient that what the compiler generates for the string concatenation. The compiler will generate the equivalent of:

String s= new StringBuffer("Offset ").append(offset).append(" is at line ").append(line).toString();

Note that the StringBuffer(String) constructor is used which avoids a message send And the returned value of the append(...) method is used which avoid pop and aload-n for each invocation of append(...).
This indeed shouldn't be presented as a more efficient approach, unless multiple statements are to be converted, e.g.

String s = "foo" + this.toString() + "bar";
s += "bla" + xyz;
s += "bla2" + xyz2;

When converting it entirely to StringBuffer form, then yes it will be more efficient than what the compiler does, since the compiler doesn't perform inter-statement optimizations (yet).
We never claimed it was more efficient, Jim added that comment in the NaNW :-)

I don't think the original intention of the quick assist was to make it more efficient, rather more explicit and easier to edit.

The quick assist implements what was asked for bug 36350. I don't have a good answer which form (statements or append cascading) is to be preferred.

Adding Benjamin who contributed the quick assist...


Moreover, in Java 5, much faster code is generated by using StringBuilder which isn't synchronized.
The compiler already uses StringBuilder if target>=1.5
(In reply to comment #2)
> We never claimed it was more efficient, Jim added that comment in the NaNW :-)

Then I'd say this is a bug in NaNW that needs to be fixed... ;)
Jim, can we still change this in the NaNW?
Revised version of the NaNW sent to Kim. Closing.
