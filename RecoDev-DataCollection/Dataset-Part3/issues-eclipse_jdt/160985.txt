I need to extend the Java New Project Wizard. Currently all of it's API's are internal.

org.eclipse.jdt.internal.ui.wizards.JavaProjectWizardFirstPage;
org.eclipse.jdt.internal.ui.wizards.JavaProjectWizardSecondPage;
org.eclipse.jdt.internal.ui.JavaPlugin;
org.eclipse.jdt.internal.ui.JavaPluginImages;
org.eclipse.jdt.internal.ui.util.ExceptionHandler;
org.eclipse.jdt.internal.ui.wizards.NewElementWizard;

I need to extend the Java New Project Wizard. Currently all of it's API's are internal.

org.eclipse.jdt.internal.ui.wizards.JavaProjectWizardFirstPage;
org.eclipse.jdt.internal.ui.wizards.JavaProjectWizardSecondPage;
org.eclipse.jdt.internal.ui.JavaPlugin;
org.eclipse.jdt.internal.ui.JavaPluginImages;
org.eclipse.jdt.internal.ui.util.ExceptionHandler;
org.eclipse.jdt.internal.ui.wizards.NewElementWizard;
You can use the 'JavaCapabilityConfigurationPage' for this.

See http://dev.eclipse.org/viewcvs/index.cgi/*checkout*/org.eclipse.jdt.ui.tests/examples/org/eclipse/jdt/ui/examples/MyProjectCreationWizard.java?rev=1.11
for an example.

I agree that it would be good to also make the first page API. Let us know if this is required by you.
Unfortunately, this page doesn't have the "JRE" and "Project Layout" blocks, we need these. We really need the "project layout" options since our product doesn't work as well with the default project layout. And we need to enable developers to have the ability to specify the JRE so that they can test their code in the environment that most closely matches the target runtime environment for their application.
For 3.4 we should look at making the new controls available as well.
For now you will have to copy or rebuild this UI.
I have a similar problem but from the opposite direction.  I am creating a Java project but am not using the widgets from the JavaCapabilityConfigurationPage.  However, I want to use the class utility methods for creating/removing the project and configuring the project.  I have run into some problems because the UI is tightly coupled to the operations.  It would be helpful to me if a general effort were made to make the UI modular (and optional) so that the creation/deletion/configuration of a project could be done independently of a wizard page.
I think creation/deletion/configuration of a project is not that magic and that the JDT.core API is good enough here. If you disagree, write a bug against JDT core with suggestions what better API you require.
Can you give more info how you would use the JavaProjectWizardFirstPage. What is different between your wizard and ours. Are all options of the JavaProjectWizardFirstPage needed to you? Do you want to set different initial values?

Do you need the JavaProjectWizardSecondPage or is the JavaCapabilityConfigurationPage good enough?


Ideally, I would use the JavaProjectWizardFirstPage and JavaProjectWizardSecondPage as is.

My problem stems from the fact that there is no hook to modify the classpath entries in the JavaProjectWizardSecondPage.updateProject() method.  In my application, we are adding a custom classpath container to the project as part of our project creation.  We need a way to add this container and control the order it shows up in the classpath.  This led us to copy the code for both pages as they are tightly bound together and we didn't want to chance internal code shifting out from under us.

Later we decided to just scrap all the UI pieces (to remove our dependency on internal code) and see if we could use the JavaCapabilityConfigurationPage to perform the necessary project operations.  That led to my initial comment.  But I have no problem with the default Java project UI in general.

So I would like 
1. both wizard pages to be API and usable as part of a larger wizard (i.e. more followon pages) and 
2. a new hook for tweaking the classpath on the 2nd page.
released new API classes for review (still marked as EXPERIMENTAL):

NewJavaProjectWizardPageOne
NewJavaProjectWizardPageTwo

Both pages can be extended or configured. 

I'd be glad if clients could review the API and give feedback.

> 20070831
Great!  I haven't tried it yet, but it looks like the public method "getDefaultClasspathEntries" will do what I need.

BTW, I did notice one method misspelling: "setWoking"
Thanks, will fix this.
Thanks for the new API!
I had problems though -- entered Bug 214563 against this.
Just saw this and first good that it is now api, but shouldn't the EXPERIMENTAL warning be removed before M7 ?

<strong>EXPERIMENTAL</strong> This class or interface has been added as part
 * of a work in progress. This API is under review and may still change when finalized. Please send your 
 * comments to bug 160985.

These things can't be changed now so is that warning in the related wizardpages still relevant ?
(In reply to comment #12)
> Just saw this and first good that it is now api, but shouldn't the EXPERIMENTAL
> warning be removed before M7 ?
> 
> <strong>EXPERIMENTAL</strong> This class or interface has been added as part
>  * of a work in progress. This API is under review and may still change when
> finalized. Please send your 
>  * comments to bug 160985.

Any update on this ? We're also using the internal API and like the idea of moving these classes into public API.

I still see this message in 3.4M6a, would this warning be removed ?

I think the API looks good so far.

<strong>EXPERIMENTAL</strong> should have been removed for 3.4 M6. It's gone now (in M7). API has not changed since M6.
