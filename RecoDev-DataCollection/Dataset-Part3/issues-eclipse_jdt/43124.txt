When editing an implementation of an iterface, I often find that I would like to
throw an exception that I have forgotten to declare in the interface.  Compiling
with the throws declared in the implentor but not the interface results in an
invalid method signature, interface method does not throw X.  It would be nice
to quickly add the throws from the implementor back into the interface.  ie:

interface SomeTypeOfThing {
public void doSomething();
}

class ThisThing implements SomeTypeOfThing {
public void doSomething() throws NotBloodyLikelyException;
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

with NotBloodyLikelyException being shown as incompatible with interface.  A
ctrl-1 on the exception should show a 'Declare exception in X.method()" where X
is the interface implemented (ie SomeTypeOfThing), having the implemented method
(ie doSomething()).

Sound reasonable?

Andy

ps looking forward to 3.0!

When editing an implementation of an iterface, I often find that I would like to
throw an exception that I have forgotten to declare in the interface.  Compiling
with the throws declared in the implentor but not the interface results in an
invalid method signature, interface method does not throw X.  It would be nice
to quickly add the throws from the implementor back into the interface.  ie:

interface SomeTypeOfThing {
public void doSomething();
}

class ThisThing implements SomeTypeOfThing {
public void doSomething() throws NotBloodyLikelyException;
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

with NotBloodyLikelyException being shown as incompatible with interface.  A
ctrl-1 on the exception should show a 'Declare exception in X.method()" where X
is the interface implemented (ie SomeTypeOfThing), having the implemented method
(ie doSomething()).

Sound reasonable?

Andy

ps looking forward to 3.0!
Quick fix is a feature from JDT/UI.
Move to JDT/UI for comment.
*** Bug 43969 has been marked as a duplicate of this bug. ***
fixed > 20040506
