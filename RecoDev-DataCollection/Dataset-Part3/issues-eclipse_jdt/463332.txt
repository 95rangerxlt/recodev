public interface Interface1 {
	public default void x() {
		//...
	}
}

public interface Interface2 {
	public void x();
}

//The below class has an compile error because it must pick which x() to inherit.
public abstract class Helper implements Interface1, Interface2 {
}

There doesn't seem to be a quick fix for this. I was expecting to see a menu with a few options:
1. Override x() completely (empty body with TODO statement, this is like redefining the method).
2. Override x() by using the default implementation in Interface1 (Interface1.super.x();). In fact, Eclipse would not code-complete this code. I'll file another bug for that.

public interface Interface1 {
	public default void x() {
		//...
	}
}

public interface Interface2 {
	public void x();
}

//The below class has an compile error because it must pick which x() to inherit.
public abstract class Helper implements Interface1, Interface2 {
}

There doesn't seem to be a quick fix for this. I was expecting to see a menu with a few options:
1. Override x() completely (empty body with TODO statement, this is like redefining the method).
2. Override x() by using the default implementation in Interface1 (Interface1.super.x();). In fact, Eclipse would not code-complete this code. I'll file another bug for that.
Note that bug 436832 was to add quick fixes for IProblem.DuplicateInheritedDefaultMethods. 

This bug is to add quick fixes for IProblem.InheritedDefaultMethodConflictsWithOtherInherited.
New Gerrit change created: https://git.eclipse.org/r/45518
Gerrit change https://git.eclipse.org/r/45518 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=60e544f81a0621413b7d9be141d4ae9fddc0c519
Fixed with comment #3.
