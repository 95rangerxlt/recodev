20060817

- create a package 'org.test'
- in 'org.test' create class A and 'x.txt' with content 'Hello org.test'.
- select package and activate rename:
   -update qualified names and add '*.txt' to files to look at

- when applied, x.txt is left in the old package, a new x.txt without changes is created as well in the new package.

The following test case fails as it tries to access the file at the old location when it is already moved

public void testPackageRenameWithResource2() throws Exception {
	IPackageFragment fragment= getRoot().createPackageFragment("org.test", true, null);
	
	StringBuffer buf= new StringBuffer();
	buf.append("package org.test;\n");
	buf.append("public class MyClass {\n");
	buf.append("}\n");
	ICompilationUnit cu1= fragment.createCompilationUnit("MyClass.java", buf.toString(), true, null);

	IFile file= ((IFolder) fragment.getResource()).getFile("x.properties");
	byte[] content= "This is about 'org.test' and more".getBytes();
	file.create(new ByteArrayInputStream(content), true, null);
	file.refreshLocal( IResource.DEPTH_ONE, null);
			
	RenameJavaElementDescriptor descriptor= new RenameJavaElementDescriptor(IJavaRefactorings.RENAME_PACKAGE);
	descriptor.setJavaElement(fragment);
	descriptor.setNewName("org.test2");
	descriptor.setUpdateReferences(true);
	descriptor.setUpdateQualifiedNames(true);
	descriptor.setFileNamePatterns("*.properties");
	RefactoringStatus status= performRefactoring(descriptor);
	if (status != null)
		assertTrue(status.toString(), status.isOK());
}

20060817

- create a package 'org.test'
- in 'org.test' create class A and 'x.txt' with content 'Hello org.test'.
- select package and activate rename:
   -update qualified names and add '*.txt' to files to look at

- when applied, x.txt is left in the old package, a new x.txt without changes is created as well in the new package.

The following test case fails as it tries to access the file at the old location when it is already moved

public void testPackageRenameWithResource2() throws Exception {
	IPackageFragment fragment= getRoot().createPackageFragment("org.test", true, null);
	
	StringBuffer buf= new StringBuffer();
	buf.append("package org.test;\n");
	buf.append("public class MyClass {\n");
	buf.append("}\n");
	ICompilationUnit cu1= fragment.createCompilationUnit("MyClass.java", buf.toString(), true, null);

	IFile file= ((IFolder) fragment.getResource()).getFile("x.properties");
	byte[] content= "This is about 'org.test' and more".getBytes();
	file.create(new ByteArrayInputStream(content), true, null);
	file.refreshLocal( IResource.DEPTH_ONE, null);
			
	RenameJavaElementDescriptor descriptor= new RenameJavaElementDescriptor(IJavaRefactorings.RENAME_PACKAGE);
	descriptor.setJavaElement(fragment);
	descriptor.setNewName("org.test2");
	descriptor.setUpdateReferences(true);
	descriptor.setUpdateQualifiedNames(true);
	descriptor.setFileNamePatterns("*.properties");
	RefactoringStatus status= performRefactoring(descriptor);
	if (status != null)
		assertTrue(status.toString(), status.isOK());
}
Already failed in 3.1.2.
test case: org.eclipse.jdt.ui.tests.refactoring.ValidateEditTests.testPackageRenameWithResource2()
Fixed in HEAD.

Took the easy way: RenamePackageProcessor.postCreateChange(..) now just inserts the text changes before the RenamePackageChange.
*** Bug 108019 has been marked as a duplicate of this bug. ***
*** Bug 157516 has been marked as a duplicate of this bug. ***
