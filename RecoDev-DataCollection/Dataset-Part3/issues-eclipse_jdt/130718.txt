Support has been added to the LTK to track and persist refactorings, in order to apply them later on other workspaces (see also bug 106207)

RefactoringHistoryEvent already has three events, PUSHED, POPPED, DELETED, which signal changes to the global refactoring history. A third event type ADDED could be avoided so far, but proofs to be necessary for listeners of the refactoring history in scenarios such as replace from repository, merge or update operations.

The proposed API addition is an additional constant:

/**
 * Event type indicating that a refactoring descriptor has been added to its
 * associated history (value 4)
 */
public static final int ADDED= 4;

The addition is non-breaking since the class RefactoringHistoryEvent is final.

Erich, do you approve?

Support has been added to the LTK to track and persist refactorings, in order to apply them later on other workspaces (see also bug 106207)

RefactoringHistoryEvent already has three events, PUSHED, POPPED, DELETED, which signal changes to the global refactoring history. A third event type ADDED could be avoided so far, but proofs to be necessary for listeners of the refactoring history in scenarios such as replace from repository, merge or update operations.

The proposed API addition is an additional constant:

/**
 * Event type indicating that a refactoring descriptor has been added to its
 * associated history (value 4)
 */
public static final int ADDED= 4;

The addition is non-breaking since the class RefactoringHistoryEvent is final.

Erich, do you approve?
+1
Fixed in HEAD > 20060307
Available in build I20060307
