3 of the JDT viewers update labels very slowly when they get a 
labelProviderChanged event from the DecoratorManager.

using the large workbench provided for Bug 10903 the following ContentViewers 
took a large amount of time to process labelProviderChanged for a very simple 
decorator (I have one that appends the currentTimeMilliseconds to the label and 
does nothing to the image).

ProblemTreeViewer (sometimes upwards of 500 ms)
JavaOutlineViewer (around 200 ms)
MethodsViewer (around 200ms)

This can potentially cause a large delay in update due to the amount of updates 
being sent by the CVS decorator (see Bug 12315).

3 of the JDT viewers update labels very slowly when they get a 
labelProviderChanged event from the DecoratorManager.

using the large workbench provided for Bug 10903 the following ContentViewers 
took a large amount of time to process labelProviderChanged for a very simple 
decorator (I have one that appends the currentTimeMilliseconds to the label and 
does nothing to the image).

ProblemTreeViewer (sometimes upwards of 500 ms)
JavaOutlineViewer (around 200 ms)
MethodsViewer (around 200ms)

This can potentially cause a large delay in update due to the amount of updates 
being sent by the CVS decorator (see Bug 12315).
As of build >20020328 we have changed the LabelChangedEvent such that it can 
now accept arrays of elements to update instead of always forcing a change to a 
single item. 

This may affect the ProblemTreeViewer as it does a preprocessing step before 
calling the default implementation in StructuredViewer. ProblemTreeViewer calls 
getElement() which will now return the first element in the list of elements 
for the change - this may no longer be a suffecient check.
adapted to new LabelChangedEvent API build > 20020404
closing this bug
