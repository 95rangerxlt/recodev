If I have the two classes:

public class A {
  public void method() { }
}

public class B extends A {
  public void method() throws Wobbly { }
}

then I (obviously) get a compile time error. However, it would be useful if the
suggestion list (currently empty) could add options
 o Add exception to superclass implementation
 o Surround internally with try/catch

You would then end up with (either):
public class A {
  public void method() throws Wobbly { }
} 
public class B extends A {
  public void method() throws Wobbly { }
}

or
public class A {
  public void method() { }
}
public class B extends A {
  public void method() { try { } catch (Wobbly w) { // use uncaught exception code generation } }
}

Both would be useful options, but I'd recommend that adding an exception to the
superclass' implementation is the preferred one of the two, in much the same
way that the preferred unhandled exception is to declare a throws rather than
a try/catch

If I have the two classes:

public class A {
  public void method() { }
}

public class B extends A {
  public void method() throws Wobbly { }
}

then I (obviously) get a compile time error. However, it would be useful if the
suggestion list (currently empty) could add options
 o Add exception to superclass implementation
 o Surround internally with try/catch

You would then end up with (either):
public class A {
  public void method() throws Wobbly { }
} 
public class B extends A {
  public void method() throws Wobbly { }
}

or
public class A {
  public void method() { }
}
public class B extends A {
  public void method() { try { } catch (Wobbly w) { // use uncaught exception code generation } }
}

Both would be useful options, but I'd recommend that adding an exception to the
superclass' implementation is the preferred one of the two, in much the same
way that the preferred unhandled exception is to declare a throws rather than
a try/catch
Nice suggestion.
added > 20040507
