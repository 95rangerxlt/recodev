When creating a method using the quick override (ie se<ctrl-space>, choose
setName(String name), and the signature for the overridden setName() is
created),   the argument name defaults to arg0 (ie setName(String arg0)) when
the overriden class lives in a jar and cannot be introspected.  Perhaps a case
could be made, where if the argument name is unknown, the are becomes
methodName.substring("set".length).toLowerCase()... ie the X in setX(SomeClass
y).    It would speed up coding removing a double take and rename on the part of
the coder.

Thx,

Andy

When creating a method using the quick override (ie se<ctrl-space>, choose
setName(String name), and the signature for the overridden setName() is
created),   the argument name defaults to arg0 (ie setName(String arg0)) when
the overriden class lives in a jar and cannot be introspected.  Perhaps a case
could be made, where if the argument name is unknown, the are becomes
methodName.substring("set".length).toLowerCase()... ie the X in setX(SomeClass
y).    It would speed up coding removing a double take and rename on the part of
the coder.

Thx,

Andy
I was going to suggest something similar along these lines. Except that instead of using the method 
name, use the argument(s) in the method. My example:

protected void doGet(HttpServletRequest arg0, HttpServletResponse arg1) 

could be

protected void doGet(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) 

the completion code already knows how to do this.
The only annoying thing about this would be method arguments with names like 'string'.
Could be improved along the lines of comment 1.

Note: if you attach the source to your JARs content assist will get the
parameter names from it.


The JAR issue has been fixed. Remaining issue is bug 238418.
