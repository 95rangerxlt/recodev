By default the "try" template is defined as:

  try {
    ${cursor}
  } catch (${Exception} e) {
  }

It should probably use printStackTrace(), for example:

  try {
    ${cursor}
  } catch (${Exception} e) {
    e.printStackTrace();
  }

When you are not sure how to handle an exception, sending printStackTrace() is 
a useful best practice.  Failing to do this causes thrown exception to be 
masked.

By default the "try" template is defined as:

  try {
    ${cursor}
  } catch (${Exception} e) {
  }

It should probably use printStackTrace(), for example:

  try {
    ${cursor}
  } catch (${Exception} e) {
    e.printStackTrace();
  }

When you are not sure how to handle an exception, sending printStackTrace() is 
a useful best practice.  Failing to do this causes thrown exception to be 
masked.
It's actually better to add a comment, since printing the stack trace is not 
always desired.

It would be something like

} catch (Exception e) {
    // ${todo}: handle exception
}

The nice thing about this is that once the todo variable is available,
it will appear as a task in the task list.
Yes, that's a good idea.  I'm used to printing the stack trace since it makes 
sure the exception is in your face at runtime.

The bottom line is that the catch clause should not be empty by default, and 
putting printStackTrace() or a todo item will force the user to NOT ignore the 
exception.  Masking exceptions with try/catch can be a cause of bugs that are 
very difficult to understand and fix.

And of course the user can also edit the template if they have their own style, 
but again, this is a conscious action on their part.
Of course, a third possibility is:

} catch (Exception e) {
    // ${todo}: handle exception
    e.printStackTrace();
}
fixed >= 20021115 (not in M3 build)

To use the feature, do a "restore defaults" in the template preference page,
as well as in the compiler preference page on the Extra Markers tab.

The reason for not inserting code like e.printStackTrace() is that we usually 
avoid to print to the console (log and dialog). The risk would be high for 
undesired console output to be generated, although it's clearly better than 
swallowing the exception completely.
