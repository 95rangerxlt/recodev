Once type annotations are stored in class files, I'll need to add code to BinaryTypeBinding et al for restoring nullness info (tagbits, parameterNonNullness) from these attributes.

Once type annotations are stored in class files, I'll need to add code to BinaryTypeBinding et al for restoring nullness info (tagbits, parameterNonNullness) from these attributes.
It's not only about storing, we also need the decoding part from bug 407191.
Created attachment 232918
initial sketch

Here's a first sketch based on the attachment 230467 in bug 407191. It demonstrates what a new TypeAnnotationWalker could look like, which helps associate binary type annotations to the corresponding type binding. Far from being complete.
The patch is about ready to go. While tests are running one last time, let me 
document first a few changes that only indirectly relate to the issue at hand:


In ASTNode.resolveAnnotations(BlockScope, Annotation[], Binding) we have a block
marked with "only local and field can share annnotations". I admit I don't understand
the deeper meaning of this comment, yet I had to add a corresponding paragraph for
TYPE_USE. While this triggers bug 414038 comment 3 during syntax recovery, I still
believe this addition to be correct. If s.o. could explain the mentioned comment
I'd be grateful.


A few small changes already hook the new information into null analysis (for better
testability). Such changes are found in Reference and TypeParameter.


One variant of LookupEnvironment#createParameterizedType() has been extracted as
#createAnnotatedType(), since the meaning is not to add type parameters but to add
type annotations (although internally the annotated type is represented by a
ParameterizedTypeBinding).


Using ParameterizedTypeBinding for annotated types obviously influences type 
comparison. Generally, two types with different null annotations are not compatible.
Exceptions apply when comparing unannotated with annotated, which is covered for now by
- new query TypeBinding#isAnnotatedTypeWithoutArguments()
- a tiny prelude in ReferenceBinding@isCompatibleWith()


Class TypeVariableBinding contains a few place holders where new error reporting
will be plugged in. These start "// System.err.println("TODO(stephan)..."


I included type annotations decoded from tagBits in readableName() for error reporting.
And now for the core business of the change:


As mentioned before, the main contribution is a new class TypeAnnotationWalker,
which acts as the main interface between BinaryTypeBinding & LookupEnvironment
on the one side and IBinaryTypeAnnotation on the other side.

A walker is instantiated whenever we're in 1.8 mode and found type annotations at
one of type / method / field.

While we recursively create the binding structure, the walker keeps track of our
current position, using methods like toMethodReturn() or toTypeArgument(rank).

Only two locations, BinaryTypeBinding#createTypeVariables(..) and
LookupEnvironment#getTypeFromSignature(..) finally ask the walker for the type
annotations at the current position, and convert those annotations into tagBits,
using the constants TagBits.{AnnotationNonNull,AnnotationNullable}.

Below 1.8 and when no annotations are found an EMPTY_ANNOTATION_WALKER is used as
a balance between not cluttering the code with individual checks for 1.8 while
trying to keep the impact low, when not needed.


Two kinds of type annotations are restored but not used for null analysis:
annotations on method receiver and on throws.


For retrieving null type annotations while the type to annotate is still an
UnresolvedReferenceBinding I had to create a new channel to propagate annotation
information to the point where "real" type bindings are created. I'm using a cloned
UnresolvedReferenceBinding (don't want other users of this binding to be affected),
which holds the tagBits plus a back-link to the original UnresolvedReferenceBinding.
This information is picked up in UnresovedReferenceBinding#resolve() to perform the
delayed environment.createAnnotatedType(..) call.


With the new null information, methods BinaryTypeBinding#scanFieldForNullAnnotation()
and #scanMethodForNullAnnotation() are becoming obsolete, I'll leave it to subsequent
bugs to make the switch more complete.

Currently, a number of tests in NullAnnotationTest would fail at 1.8, so I disabled
this combination for now. Will be re-enabled via the parent bug 392099.
All is ready to be pushed except: we need one more legalese step by Andy:
to sing-off on bug 407191 wrt the Certificate of Origin.
<sigh>
Created attachment 234081
Patch waiting for release

Instead of pushing to git, here's the patch the old fashioned way.
Released for BETA_JAVA8 via commit 427a01e331e57852efc472cca3a8360bd121fda9

Note that NullAnnotationTest now has some failures in 1.8 mode - I therefore disabled
this test in 1.8 mode. Work will now continue in bug 392099.
Commit c7e61e314902d7cf48e71c1a1c0437bb40107c2e contains a bug fix
for methods with synthetic args (outer this).
(In reply to comment #3)
> In ASTNode.resolveAnnotations(BlockScope, Annotation[], Binding) we have a
> block
> marked with "only local and field can share annnotations". I admit I don't
> understand the deeper meaning of this comment,

During work on bug 392099 I learned that the comment refers to constructs
like

   @NonNull Object o1, o2;

where two or more variables indeed share the preceding annotation.

> ... yet I had to add a corresponding paragraph for
> TYPE_USE. While this triggers bug 414038 comment 3 during syntax recovery, 
> I still believe this addition to be correct.

That addition proved to be unnecessary once the implementation was more complete.
