Build Identifier: N20100505-2000

I tested it with JAWS and NVDA and they gave me the same result.
The workaround is to use the JAWS cursor to do the mapping between the project/folder names and their selected state, but it's a boring task.
There are tree views in eclipse that are well red by JAWS, such as window > customize perstective...

Reproducible: Always

Steps to Reproduce:
1. Create one or two projects to exercise this test.
2. go to file > export > java > jar file and press next.
3. You are now focused on the tree view which displays projects and folders to select.
4. Press up and down arrows.
Expected results: screen reader should say something like: "<project name|folder name> <state of tree view item (closed|opened)> <state of checkbox>"
Actual results: screen reader says: "select projects and folders to export <state of tree view item (closed|opened)> <state of checkbox>"

Build Identifier: N20100505-2000

I tested it with JAWS and NVDA and they gave me the same result.
The workaround is to use the JAWS cursor to do the mapping between the project/folder names and their selected state, but it's a boring task.
There are tree views in eclipse that are well red by JAWS, such as window > customize perstective...

Reproducible: Always

Steps to Reproduce:
1. Create one or two projects to exercise this test.
2. go to file > export > java > jar file and press next.
3. You are now focused on the tree view which displays projects and folders to select.
4. Press up and down arrows.
Expected results: screen reader should say something like: "<project name|folder name> <state of tree view item (closed|opened)> <state of checkbox>"
Actual results: screen reader says: "select projects and folders to export <state of tree view item (closed|opened)> <state of checkbox>"
Carolyn, can you advise?  If this is a matter of the client code having to do something specific, then please punt back to us.
Moving to JDT UI.

The problem is the following 2 lines of code in method org.eclipse.jdt.internal.ui.jarpackager.JarPackageWizardPage.createInputGroup():

SWTUtil.setAccessibilityText(fInputGroup.getTree(), JarPackagerMessages.JarPackageWizardPage_tree_accessibility_message);
SWTUtil.setAccessibilityText(fInputGroup.getTable(), JarPackagerMessages.JarPackageWizardPage_table_accessibility_message);

When the accessible name is set for the entire Table (or the entire Tree) then that is what is answered for every TableItem and TreeItem.  :)

Here is an SWT snippet that shows approximately what should be done for tables and trees in the getName method:

http://dev.eclipse.org/viewcvs/index.cgi/~checkout~/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet291.java

Please make sure that there are no other Tables, Trees, or Lists that set the accessible name for the entire control without considering the individual items.
This would hold for TabFolder, too, or any control with items, although I am sure that Table, Tree, and List are the most likely to have accessible names explicitly set.
Created attachment 177633
Fix

Thanks for the investigation. I've fixed this problem and a similar problem I found in the warning dialog shown by refactorings. I found no other culprits in the SDK.
Fixed in HEAD.
