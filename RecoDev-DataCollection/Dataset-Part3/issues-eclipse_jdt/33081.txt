The general consensus is that we want to expose the new compatibility 
preferences in the UI.  They should be located on the appropriate JDT 
preferences pages.  For consistency the preferences should be stated in the 
affirmative (e.g., "enable multiple output folders") and should be enabled by 
default.

When the user disables one of the preferences they need not be told anything in 
particular.  When they enable a preference, they should be presented with a 
dialog stating
"You are enabling a feature which may give rise to incompatibilities if 
projects are shared by users of different versions of the Java tooling.  Please 
consult the documentation for further details."

or some such.  The text should not mention any version numbers, Eclipse, 
platform, ...

The general consensus is that we want to expose the new compatibility 
preferences in the UI.  They should be located on the appropriate JDT 
preferences pages.  For consistency the preferences should be stated in the 
affirmative (e.g., "enable multiple output folders") and should be enabled by 
default.

When the user disables one of the preferences they need not be told anything in 
particular.  When they enable a preference, they should be presented with a 
dialog stating
"You are enabling a feature which may give rise to incompatibilities if 
projects are shared by users of different versions of the Java tooling.  Please 
consult the documentation for further details."

or some such.  The text should not mention any version numbers, Eclipse, 
platform, ...
see also bug 33082
Having the compatibility settings on separate preference pages spread all over 
the UI is bad. How will a user find them when they are spread all over. If a 
user cares about compatibility then she likely cares about all the options? If 
we really want to surface compatibility options then they should be logically 
grouped in one location (similar as we do with Fonts). There are different ways 
to do so, e.g., define a preference node where both the workbench and JDT 
contribute pages to.

So either we do it right or we shouldn't surface these compatibility options in 
the UI. Notice if we don't surface the compatibility options in Eclipse than a 
product like WSAD still has the opportunity to present them logically grouped 
on a single compatibility preference page. 

We get into the most trouble in this area when we try to make a grand notion 
of "compatibility".  That is why we wanted individual preferences which were 
semantically meaningful and local to the area being affected.  The same 
arguments apply to the UI for these preferences.  These preferences stand alone 
as function toggles for, for example, JDT.  In various scenarios, some, all or 
none of these will be relevant to a user's/product's notion of compatibility.  
Looking forward to this issue in 2.2, how would we approach a "compatibilty" 
preference page?  

Consider also that other (non-Eclipse) plugins will also have compatibility 
issues.  It would be strange that the workbench provides a preference page for 
JDT compatibility issues and not the others.  So should there be an extensible 
notion of compatibility allowing others to contribute preferences?  (In fact, 
how would the Workbench know to present the JDT preferences?)  This just gets 
way too complicated.

The notion of compatibility needs to be covered in the doc.  This should point 
users at the preferences, an explanation of their meaning and impact and the UI 
to change them.  Remember also that product level users will likely be 
presented with the product level notion of compatibility as a consolidated 
preference.

Looks like I still don't understand the "general consense"

Re 1st paragraph:
    The compatibility options should not mention any particular version, but
    options. This is independent of how they are surfaced in the UI.

Re 2nd paragraph: 
This isn't complicated. All that is needed is a common category name where 
other plugins contribute their preference pages too.
It would look something like this in the preference dialog:
  Workbench
     Compatibility
          Java
          CDT

The implementation would look like:
      <page
            name="Java"
            category="org.eclipse.ui.preferences.compatibility" 
            class="..."
      </page>
The workbench doesn't have to know have to render JDT preferences since they
come in their own preference page. We are just using the normal preference 
extension mechanism.

Re paragraph 3: agreed that compatibility should be covered in the doc as well.
metacomment:  I don't want to belabour and am happy for JDT and UI to come to 
an agreement.  

My counterpoints...
- The multipage approach still requires new API from the Workbench (i.e., the 
existence of the category)

- nit: this makes for very sparse pages (ie., the Workbench has only one 
preference to surface)

- It still "globalizes" the notion of compatibility and will be a liability 
down the road.  For example, in a year this will force us to talk about 2.2 vs 
2.1 vs. 2.0 issues all in the same "compatibility" area. How would we capture 
the difference between 2.2-2.1 perfs and 2.2-2.0 prefs etc?  The purely 
semantic approach has the preferences surfaced for what they are (turn this 
feature on/off), where they make sense functionally and leaves the 
support/explanation etc to the doc/help where here is more room for supporting 
context.

- Putting them in a "compatibility" area solves a problem for one view point 
but raises the same problem for another.  For example, I might just want to 
turn off multiple output folders.  Not for compatibility with 2.0, just because 
that is the way we want to work.  With this mindset, it is strange to look in a 
compatibility area in the Workbench for a JDT funtional preference.


Preferences are currently grouped along functional lines, and I agree with 
Jeff that adding a cross-cutting group for compatibility would be confusing.

Our preferences are currently a mix between grouped by components and grouped 
by function/concepts. The recent change to the font settings shows that the 
trend is towards grouping by function/concepts and not by components. So we are 
already inconsistent and I don't think that the confusion level will increase.

Therefore my proposal to surface such compatibility options in a product that 
thinks they are important avoids all these problems. The product can create a 
single preference page with all the settings and in particular they can do it 
in terms of the product's version scheme.
Fix went into RC2, the preferences are on Java>Compiler>Build Path:
- Enable using exclusion pattern in source folders
- Enable using multiple output locations for source folders
