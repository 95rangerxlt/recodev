BETA_JAVA8:

As discussed in bug 380194, JSR335 introduces a number of complexities
and challenges in parsing the new constructs. The grammar could very well
be intrinsically non-LALR(1) (not ascertained as of now). 

The current solution depends upon tight collaboration between the 
parser & scanner - in particular the scanner is responsible for 
disambiguating on demand (normal parser) or always (Diagnose parser) 
the usages of certain overloaded tokens.

This disambiguation is achieved by looking ahead in the input stream as 
many tokens as necessary to discern the presence/absence of certain 
signature tokens like "->" and "::" and heralding these tokens well 
ahead of time to the parser by injecting certain synthetic tokens.

This look ahead is implemented at the moment all in the scanner by
leveraging the pre-existing and well tested jumpOverMethodBody() method.
While it works well for the lambda parameter list case, it is a bit
clunky when used to determine if we are at the head of a reference
expression.

The current bug is to develop a completely new look ahead mechanism
driven by a new abstractions called VanguardParser and VanguardScanner
that will eliminate all traces of kludginess from the current solution
and provide an alternate mechanism with full rigor.

The idea is that when the scanner sees a '(' and would like to
disambiguate this usage of '(' to determine if it is starting a
lambda parameter list, it would a launch a new parser and scanner
pair at the current cursor position with the parser's explicit
goal state set to the nonterminal ParenthesizedLambdaParameterList.
The new Parser/Scanner operate in a parallel universe i.e they don't
share any state with the original parser/scanner. If the new parser
enters ACCEPT_STATE when given the explicit goal of reducing 
ParenthesizedLambdaParameterList, we surely know we are at the head
of a lambda parameter list - it can't get better than that !

Pros:

    - Very structured, maximally rigorous solution.
    - Much smaller implementation that the prior one.
    - Much more maintainable solution.
    - Will fail early when it should - it is guaranteed that the
      LALR(1) automaton will signal error at the first erroneous
      token. Prior implementation suffered from the drawback that
      it could look ahead several tokens well after the point of
      first error to fail.
    - Current work does not handle annotations in some places.
      JSR 308 introduces annotations all over the place. So a
      reference expression could look like:
      X<@Blah String>. @BlahBlah Y<@Foo Integer> @DimAnnot []::goo;
      By using a scouting parser driven by the exact same grammar 
      rules as the normal parser ensures we handle all cases seamlessly.

Patch will follow shortly.

BETA_JAVA8:

As discussed in bug 380194, JSR335 introduces a number of complexities
and challenges in parsing the new constructs. The grammar could very well
be intrinsically non-LALR(1) (not ascertained as of now). 

The current solution depends upon tight collaboration between the 
parser & scanner - in particular the scanner is responsible for 
disambiguating on demand (normal parser) or always (Diagnose parser) 
the usages of certain overloaded tokens.

This disambiguation is achieved by looking ahead in the input stream as 
many tokens as necessary to discern the presence/absence of certain 
signature tokens like "->" and "::" and heralding these tokens well 
ahead of time to the parser by injecting certain synthetic tokens.

This look ahead is implemented at the moment all in the scanner by
leveraging the pre-existing and well tested jumpOverMethodBody() method.
While it works well for the lambda parameter list case, it is a bit
clunky when used to determine if we are at the head of a reference
expression.

The current bug is to develop a completely new look ahead mechanism
driven by a new abstractions called VanguardParser and VanguardScanner
that will eliminate all traces of kludginess from the current solution
and provide an alternate mechanism with full rigor.

The idea is that when the scanner sees a '(' and would like to
disambiguate this usage of '(' to determine if it is starting a
lambda parameter list, it would a launch a new parser and scanner
pair at the current cursor position with the parser's explicit
goal state set to the nonterminal ParenthesizedLambdaParameterList.
The new Parser/Scanner operate in a parallel universe i.e they don't
share any state with the original parser/scanner. If the new parser
enters ACCEPT_STATE when given the explicit goal of reducing 
ParenthesizedLambdaParameterList, we surely know we are at the head
of a lambda parameter list - it can't get better than that !

Pros:

    - Very structured, maximally rigorous solution.
    - Much smaller implementation that the prior one.
    - Much more maintainable solution.
    - Will fail early when it should - it is guaranteed that the
      LALR(1) automaton will signal error at the first erroneous
      token. Prior implementation suffered from the drawback that
      it could look ahead several tokens well after the point of
      first error to fail.
    - Current work does not handle annotations in some places.
      JSR 308 introduces annotations all over the place. So a
      reference expression could look like:
      X<@Blah String>. @BlahBlah Y<@Foo Integer> @DimAnnot []::goo;
      By using a scouting parser driven by the exact same grammar 
      rules as the normal parser ensures we handle all cases seamlessly.

Patch will follow shortly.
Created attachment 218683
Patch under test


Stephan, please take a look. 

   -- It is easier to review the scanner changes by comparing them to master.
      rather than to a BETA_JAVA8 version
   -- We can continue to use bug 383378 for measuring/tuning/tracking
      performance.
   -- Now atLambdaParameterList is exactly 1 line long and
      atReferenceExpression is exactly 1 line long and jumpOver is exactly
      0 lines long :)
   -- Tests are still running, but I don't expect any major issues

If all goes well, I will add toString methods to the new classes 
VanguardParser and VanguardScanner before releasing.
To facilitate code review, I have released the fix via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=2d42c7f71ce65658f51f1f08922e1c6e3b9d54f4 into BETA_JAVA8.

Stephan, please review in lieu of the remaining portion in bug 380194. TIA.

All tests pass.

toString output still needs fix, I'll follow up.
Created attachment 218830
a few suggestions

This patch contains side effects from reviewing, please apply at your dicretion.

A new test case to challenge the case where EOF is seen during look ahead.

A tiny optimization for that case: instead of going through VanguardScanner for several tokens in a row, remember that we are already past a point where the VanguardParser can succeed (is this true? - even if not, reducing the number of syntax errors near EOF might be a good idea anyway).

Other changes in getNextToken() simplify debugging.

And:

(In reply to comment #2)
> toString output still needs fix, I'll follow up.

When commenting the last line in that method, it can already be used agin in the debugger, so you may only need to copy&paste and change that line :)
> (In reply to comment #2)
> > toString output still needs fix, I'll follow up.
> 
> When commenting the last line in that method, it can already be used agin in
> the debugger, so you may only need to copy&paste and change that line :)

Nope, not a bug in toString(), but in getVanguardParser():

- this.vanguardScanner.resetTo(this.startPosition, this.eofPosition);
+ this.vanguardScanner.resetTo(this.startPosition, this.eofPosition-1);

Please fix :)
Suggestions in comment 3 are optional, fix in comment 4 mandatory.

On those grounds: +1 :)

(I wonder when they start selling CPUs that have this parse automaton as a built-in instruction :) )
(In reply to comment #3)

> A new test case to challenge the case where EOF is seen during look ahead.

I didn't add a new tests because there are several tests in code completion
suite that exercise this path. RunAllCompletionTests fails and errors out
in 30+ odd tests if I change the line to actually return EOF on EOF.

I also hesitated on account of introducing one more test that makes the 
DiagnoseParser spew various advisory messages, which are very fragile.
Next time someone changes the grammar file, they will curse me :)
See bug 383608 - The problem is in determining when it is OK to simply
remaster the test suite expected output and when it actually signals
a breakage and with passage of time and people moving away, it becomes
harder.

> A tiny optimization for that case: instead of going through VanguardScanner for
> several tokens in a row, remember that we are already past a point where the
> VanguardParser can succeed (is this true? - even if not, reducing the number of
> syntax errors near EOF might be a good idea anyway).

Once EOF is returned by the scanner, the parser will never ask for additional
tokens. The state tables will force the parser into either ACCEPT_STATE or
ERROR_STATE (possibly after a series of reductions which don't advance the
lexstream cursor anyways).

In java.l (jikespg verbose debug/diagnostics file), you can see that
there is no state which will shift (which is a necessary 
precursor to consuming the next token)  on $eof. 

> And:
> 
> (In reply to comment #2)
> > toString output still needs fix, I'll follow up.
> 
> When commenting the last line in that method, it can already be used agin in
> the debugger, so you may only need to copy&paste and change that line :)

Not sure I understand this comment - what I meant was that the new classes
need to provide a toString implementation as otherwise what you see in
the debugger is not useful - what did you mean ?

(In reply to comment #4)

> Nope, not a bug in toString(), but in getVanguardParser():
> 
> - this.vanguardScanner.resetTo(this.startPosition, this.eofPosition);
> + this.vanguardScanner.resetTo(this.startPosition, this.eofPosition-1);
> 
> Please fix :)

Again, not sure I understood. Is there a bug in this line ? We are
simply propagating this value from the real scanner which is going
to standby for the look ahead to complete.
Thanks for the review Stephan, if there is a follow up needed
on the eofposition, I'll add it to the pile at bug 385041.
(In reply to comment #6)
> (In reply to comment #3)
> 
> > A new test case to challenge the case where EOF is seen during look ahead.
> 
> I didn't add a new tests because there are several tests in code completion
> suite that exercise this path. RunAllCompletionTests fails and errors out
> in 30+ odd tests if I change the line to actually return EOF on EOF.

That's fine. Just in the bunch of tests that I was running the one return got never triggered.

> > A tiny optimization for that case: instead of going through VanguardScanner for
> > several tokens in a row, remember that we are already past a point where the
> > VanguardParser can succeed (is this true? - even if not, reducing the number of
> > syntax errors near EOF might be a good idea anyway).
> 
> Once EOF is returned by the scanner, the parser will never ask for additional
> tokens. The state tables will force the parser into either ACCEPT_STATE or
> ERROR_STATE (possibly after a series of reductions which don't advance the
> lexstream cursor anyways).

That's not what I meant. Sure, the parser returns on EOF, but this being the VanguardParser the main parser will continue working, because it didn't see EOF but, e.g., 'not a lambda'. Now for each subsequent '(' or '<' the main parser calls the VanguardParser again, although we already know that the remainder of the file doesn't match the expected stuff.

But while restating this, I'm no longer sure this assumption holds. Even if at position X we don't see a lambda parameter list, maybe at position X+Y there is indeed one. If so, please just ignore.

I was just surprised how many times the VanguardParser was invoked after it had already seen EOF.

> > (In reply to comment #2)
> > > toString output still needs fix, I'll follow up.
> > 
> > When commenting the last line in that method, it can already be used agin in
> > the debugger, so you may only need to copy&paste and change that line :)
> 
> Not sure I understand this comment - what I meant was that the new classes
> need to provide a toString implementation as otherwise what you see in
> the debugger is not useful - what did you mean ?
> 
> (In reply to comment #4)
> 
> > Nope, not a bug in toString(), but in getVanguardParser():
> > 
> > - this.vanguardScanner.resetTo(this.startPosition, this.eofPosition);
> > + this.vanguardScanner.resetTo(this.startPosition, this.eofPosition-1);
> > 
> > Please fix :)
> 
> Again, not sure I understood. Is there a bug in this line ? We are
> simply propagating this value from the real scanner which is going
> to standby for the look ahead to complete.

It's the same issue. The way the VanguardScanner is initialized, its toString() method throws AIOOBE because when passing eofPosition as end, internally eofPosition is set to end+1, which is then TWO chars beyond the last valid char. Invariant violated: eofPosition == end+1
(In reply to comment #8)
> But while restating this, I'm no longer sure this assumption holds. Even if at
> position X we don't see a lambda parameter list, maybe at position X+Y there is
> indeed one. If so, please just ignore

should read: "Even if at position X we hit EOF before matching a lambda parameter list, maybe at position X+Y there is indeed one."
(In reply to comment #8)

> That's not what I meant. Sure, the parser returns on EOF, but this being the
> VanguardParser the main parser will continue working, because it didn't see EOF
> but, e.g., 'not a lambda'. Now for each subsequent '(' or '<' the main parser
> calls the VanguardParser again, although we already know that the remainder of
> the file doesn't match the expected stuff.
> 
> But while restating this, I'm no longer sure this assumption holds. Even if at
> position X we don't see a lambda parameter list, maybe at position X+Y there is
> indeed one. If so, please just ignore.

I see.

Since the VanguardParser will terminate at the first erroneous token or at
"->", in real programs, it will only very rarely meet EOF. But generalizing
the idea, it could be useful if we "remember" that "some range" of source 
input didn't any "->" or "::". This has the complication though that we need
to keep track of when the real Scanner's source or source range undergo
change.

Can be done. But I have already over-engineered this thing, should we do
more ? :)

> It's the same issue. The way the VanguardScanner is initialized, its toString()
> method throws AIOOBE because when passing eofPosition as end, internally
> eofPosition is set to end+1, which is then TWO chars beyond the last valid
> char. Invariant violated: eofPosition == end+1

Thanks! Fixed and released.
(In reply to comment #8)

> > Once EOF is returned by the scanner, the parser will never ask for additional
> > tokens. The state tables will force the parser into either ACCEPT_STATE or
> > ERROR_STATE (possibly after a series of reductions which don't advance the
> > lexstream cursor anyways).
> 
> That's not what I meant. Sure, the parser returns on EOF, but this being the

Sorry for being thick and launching on a long and irrelevant explanation :)
