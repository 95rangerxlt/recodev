it is nice to see @tags syntax colored. because javadoc seems to be parsed, i thought i'd ask if it 
would be possible to extend this further and issue warnings against incorrect javadoc. 

for instance, by convention, the parameter name should follow the @param tag. i'd like this to be 
tracked with a warning if my javadoc @param declarations are out of sync with my method's 
parameter list.

it is nice to see @tags syntax colored. because javadoc seems to be parsed, i thought i'd ask if it 
would be possible to extend this further and issue warnings against incorrect javadoc. 

for instance, by convention, the parameter name should follow the @param tag. i'd like this to be 
tracked with a warning if my javadoc @param declarations are out of sync with my method's 
parameter list.
I have some additional comments on this bug because this is a standard feature
of Intelli-J and very nice to have.

The javadoc should verify tags such as @link and @see for validity. This allows
them to be quickly debugged while typing. This could also include code
completion, which would present the classes and members available and quickly
complete the javadoc tag if one is selected.

The javadoc should also support custom doclets as well as custom tags via the
configuration. If a custom doclet is used, then much of the automated support
such as the link support I mentioned above, would be unavailable. If custom tags
are added, then they would not show up as errors or warnings in the source file. 

Another configuration would allow the user select if javadoc problems would be
presented as errors or warnings.

An advanced configuration would allow the user to select which javadoc tags they
required for class, member and method javadoc and then present a warning or
error if the tag was missing.

Lastly, I agree that the param tag should be validated against the parameter
names on the method and should also be validated that a parameter is not doc'd
twice. Likewise, throws and exception tags should be validated in the same manner.
This was fixed on 3.0 M5

http://download2.eclipse.org/downloads/drops/S-3.0M5-200311211210/eclipse-news-all-M5.html

see Javadoc validation

Note : this bug should have been flagged Platform All, OS All
There's even more now in 3.0 M6.
