While converting code to Java 8 (with the new Java 8 compiler) I get this severe error:

Internal compiler error: java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:450)

I can locate it to this statement:

    Collections.sort( result, 
                      Comparator.comparingInt( (CourseProviderEmploymentStatistics stat) ->  stat.doneTrainingsTotal ).reversed()
                                .thenComparing( (CourseProviderEmploymentStatistics stat) -> stat.courseProviderName ) );

While converting code to Java 8 (with the new Java 8 compiler) I get this severe error:

Internal compiler error: java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:450)

I can locate it to this statement:

    Collections.sort( result, 
                      Comparator.comparingInt( (CourseProviderEmploymentStatistics stat) ->  stat.doneTrainingsTotal ).reversed()
                                .thenComparing( (CourseProviderEmploymentStatistics stat) -> stat.courseProviderName ) );
Hello Christian, please upgrade to the latest version and try again,
We are going to need fuller example if the problem persists.

Please add a note here if the problem goes away with the latest so I can close
this.
Mid-air collision with comment 1, but:

Thanks for the report.

I'm guessing the missing pieces from your example to be s.t. like:


import java.util.*;
public class X {
	void test(List<CourseProviderEmploymentStatistics> result) {
          Collections.sort( result, 
              Comparator.comparingInt(
                  (CourseProviderEmploymentStatistics stat) ->  stat.doneTrainingsTotal
)
              .reversed()
              .thenComparing(
                  (CourseProviderEmploymentStatistics stat) -> stat.courseProviderName ) );
	}
}
class CourseProviderEmploymentStatistics {
   int doneTrainingsTotal;
   String courseProviderName;
}

With this test case I can reproduce the NPE.
Inference for the second lambda is never completed.
I'll take a look.
We have nested inferences, but since the inner invocation is not a poly expression, both inferences are not connected (via innerPolies).
Normally, results are propagated to nested inferences via innerPolies, but in this case this propagation was missing (more precisely: we only did shallow updating where deep updating is indeed needed incl. completing the inner inference).

Resolved via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=4758255b8284af577e4f7f81a9ecd60704ccc85c
