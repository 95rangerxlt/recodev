Steps to reproduce it:
(1) create new plug-in project with "UI" contributed sections
(2) delete referenced plug-in class
(3) click on "MANIFEST.MF"
(4) select "Overview" section of plug in editor
(5) click on "Class:" link for Plug-in class
(6) this will generate old (2.0) style plug-in rather than new 3.0+

Steps to reproduce it:
(1) create new plug-in project with "UI" contributed sections
(2) delete referenced plug-in class
(3) click on "MANIFEST.MF"
(4) select "Overview" section of plug in editor
(5) click on "Class:" link for Plug-in class
(6) this will generate old (2.0) style plug-in rather than new 3.0+
The hierarchy of the class generated is fine.

The problem is that the JDT wizard/codegen generates deprecated constructors 
on top of the good one.

I would expect the wizard to not generate stubs for deprecated 
methods/constructors.
I see different solutions here:

- either we add a global preference what to do with deprecated members. This 
  then can be honored by generate delegate and override/implement as well.

- we add separate check box to the new wizard and filters to the source actions.

Martin, Tobias comments ?
I would do it automatically, without checkboxes; if there's at least one
non-deprecated constructor, just skip the deprecated ones.
I agree with Martin. In the rare case that a deprecated constructor is needed, 
there are several other options to add one quickly.
*** Bug 95309 has been marked as a duplicate of this bug. ***
Fixed in HEAD > 20060118
Due to this fix the Constructor generator wizard now behaves strange (see bug 247245 for details).
