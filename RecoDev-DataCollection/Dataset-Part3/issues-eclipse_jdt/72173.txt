Build I200408122000: Invoking the "Use Supertype where possible" refactoring 
on a generic type generates wrong preview and uncompilable code

Steps to reproduce:
- Create class A
- Create class B extends A
- Create class C<T>
- Create class D
- insert declaration C<B> c= new C<B>();
- Place caret on typedeclaration
- Invoke refactoring

Moreover, it can be questioned whether the obvious result "java.lang.Object" 
is really desired, or whether bounded wildcards as in "C<? extends A>" would 
be more helpful in case of no occurrences in method arguments

Build I200408122000: Invoking the "Use Supertype where possible" refactoring 
on a generic type generates wrong preview and uncompilable code

Steps to reproduce:
- Create class A
- Create class B extends A
- Create class C<T>
- Create class D
- insert declaration C<B> c= new C<B>();
- Place caret on typedeclaration
- Invoke refactoring

Moreover, it can be questioned whether the obvious result "java.lang.Object" 
is really desired, or whether bounded wildcards as in "C<? extends A>" would 
be more helpful in case of no occurrences in method arguments
Now, that you are the new owner ...
The refactoring has been completely rewritten and works now with generic 
types. However, no type gessing is performed.

Fixed > 20050404
