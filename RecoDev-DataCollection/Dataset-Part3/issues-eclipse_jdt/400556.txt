BETA_JAVA8:

The following program compiles silently with HEAD:

// ---- X.java
import p.I;

public class X {
	I i = (p) -> { return null; };
}
// ---- I.java
package p;
public interface I {
	ReturnType doit(ParameterType p) throws ExceptionType;
}

class ReturnType {
}

class ParameterType {
}

class ExceptionType extends Exception {
}
// ----------------------

It should report three errors, one each about ReturnType, ParameterType
and Exception type as they are not visible at the lambda definition site.

Interestingly javac 8b74 complains:

X.java:6: error: ParameterType is not public in p; cannot be accessed from outsi
de package
X.java:4: error: ParameterType is not public in p; cannot be accessed from outsi
de package
        I i = (p) -> { return null; };
              ^
2 errors

// ----

Here is the relevant wording:

 For each checked exception that can result from execution of the body of the lambda expression, a compile-time error occurs unless that exception type or a supertype of that exception type is mentioned in the throws clause of the descriptor of T'.

 It is a compile-time error if any class or interface mentioned by either T' or the descriptor of T' is not accessible from the class in which the lambda expression appears.

BETA_JAVA8:

The following program compiles silently with HEAD:

// ---- X.java
import p.I;

public class X {
	I i = (p) -> { return null; };
}
// ---- I.java
package p;
public interface I {
	ReturnType doit(ParameterType p) throws ExceptionType;
}

class ReturnType {
}

class ParameterType {
}

class ExceptionType extends Exception {
}
// ----------------------

It should report three errors, one each about ReturnType, ParameterType
and Exception type as they are not visible at the lambda definition site.

Interestingly javac 8b74 complains:

X.java:6: error: ParameterType is not public in p; cannot be accessed from outsi
de package
X.java:4: error: ParameterType is not public in p; cannot be accessed from outsi
de package
        I i = (p) -> { return null; };
              ^
2 errors

// ----

Here is the relevant wording:

 For each checked exception that can result from execution of the body of the lambda expression, a compile-time error occurs unless that exception type or a supertype of that exception type is mentioned in the throws clause of the descriptor of T'.

 It is a compile-time error if any class or interface mentioned by either T' or the descriptor of T' is not accessible from the class in which the lambda expression appears.
// ---- Another example: I.java

package p;
import java.util.List;
public interface I<P extends ParameterType> {
	<T extends ExceptionType , R extends ReturnType> R doit(P p) throws T;
}

class ReturnType {
}

class ParameterType {
}

class ExceptionType extends Exception {
}
// ---- X.java
import p.I;

public class X {
	I i = (p) -> { return null; };
}
Created attachment 227100
Patch under consideration
Released fix and tests here:08b9d40dde0b005b87b207f8d02b5899cde7b397.
Released several more tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=2adf5e7af76ae05ae6976726576af8c12845ba88
