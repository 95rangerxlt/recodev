Build ID: M20080911-1700

Steps To Reproduce:
Passing an array type as a type parameter to the Types.getDeclaredType(DeclaredType typeDecl, TypeMirror... typeParameters) method throws IllegalArgumentException in a Java 6 annotation processor run from inside Eclipse.






More information:
This works perfectly fine in a Sun Java 6 compiler, however throws an IllegalArgumentException when run via Eclipse JDT Java 6 Annotation Processor support feature.

Sample code:

public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)
{
  Types typeUtils = processingEnv.getTypeUtils();
  Elements elementUtils = processingEnv.getElementUtils();
  TypeElement stringDecl = elementUtils.getTypeElement(String.class.getName());
  DeclaredType stringType = typeUtils.getDeclaredType(stringDecl);
  ArrayType stringArrayType = typeUtils.getArrayType(stringType);
  TypeElement aosDecl = elementUtils.getTypeElement("java.util.Map");
    	
  DeclaredType decl = typeUtils.getDeclaredType(aosDecl, stringType, stringArrayType);
}

The last statement throws an IllegalArgumentException when run by the Eclipse Annotation processor feature and works fine when run by Sun Java 6 javac.

This is a major bug and having it fixed would be really urgent for us and please fix in 3.4.2.

Build ID: M20080911-1700

Steps To Reproduce:
Passing an array type as a type parameter to the Types.getDeclaredType(DeclaredType typeDecl, TypeMirror... typeParameters) method throws IllegalArgumentException in a Java 6 annotation processor run from inside Eclipse.






More information:
This works perfectly fine in a Sun Java 6 compiler, however throws an IllegalArgumentException when run via Eclipse JDT Java 6 Annotation Processor support feature.

Sample code:

public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)
{
  Types typeUtils = processingEnv.getTypeUtils();
  Elements elementUtils = processingEnv.getElementUtils();
  TypeElement stringDecl = elementUtils.getTypeElement(String.class.getName());
  DeclaredType stringType = typeUtils.getDeclaredType(stringDecl);
  ArrayType stringArrayType = typeUtils.getArrayType(stringType);
  TypeElement aosDecl = elementUtils.getTypeElement("java.util.Map");
    	
  DeclaredType decl = typeUtils.getDeclaredType(aosDecl, stringType, stringArrayType);
}

The last statement throws an IllegalArgumentException when run by the Eclipse Annotation processor feature and works fine when run by Sun Java 6 javac.

This is a major bug and having it fixed would be really urgent for us and please fix in 3.4.2.
I'll take a look.

Could you attach a full stack trace of the exception?
Created attachment 118562
proposed fix

Don't worry about the stack trace, I was able to repro it.  Attached is a proposed fix.

The problem has existed since the initial implementation of the method; it assumes that a type argument is a ReferenceBinding when in fact it can also be an ArrayBinding.  All that is actually required is for it to be a TypeBinding (the common superclass) so the assumption is unnecessary and incorrect.

The exception will occur any time an array binding is passed as a type argument to getDeclaredType, that is, any time someone tries to synthesize an instance of a parameterized type such as List<Object[]>.  

I agree it would be good to fix this in 3.4.2 as well, since although this is slightly unusual it is perfectly legal and there is no workaround.  The fix is very small and does not affect any previously passing cases.

I will also attach a test case.
Created attachment 118564
Test case

Test case for this.  Also tests creation of a contained type, e.g., HashMap<String, Number>.HashIterator<Number>.
Fixed in HEAD for 3.5 M4.

Philippe, please review for inclusion in 3.4.2.
Changed bug title to be more descriptive
Thanks, I also managed to patch my 3.4.1 installation.

Best regards,

Robert
Philippe, please review for inclusion in 3.4.2, then reassign to me.  Thanks!
Please don't forget the other getDeclaredType() method with the enclosing type. That still has this error according to CVS.
Re: comment 2
How do you deal with an array type for creating a parameterized type ? Feels like you need to decompose the array type (leafComponentType + dimension), do the parameterization, and recreate the array type.

Or am I mistaken ?
btw - walter, you should assign the bug to you, and only cc me (you are doing the work, don't you? <g>)
(In reply to comment #10)
> btw - walter, you should assign the bug to you, and only cc me (you are doing
> the work, don't you? <g>)

Indeed I am.  But when I put you in the 'review' field up above, it sat like that for a week, so I thought perhaps I should assign it to you to raise the priority a little :-)  I've reassigned it back to me now.
(In reply to comment #9)
> Re: comment 2
> How do you deal with an array type for creating a parameterized type ? 

Do you mean something like List<String[]>, or do you mean List<String>[]?  The test already covers the former, as that's what this bug was about; to do the latter you would create a List<String> and then pass it to Types.getArrayType().  

I don't think there's any way to start with a List<T>[] and turn it into a List<String>[], because List<T>[] isn't a TypeElement (i.e., a declaration), it's a TypeMirror (i.e., a type).  The getDeclaredType() methods require a TypeElement to be parameterized.

If I'm confused, please clarify.
Philippe, adding you to cc line :-)

Robert, I've updated HEAD to cover the missing case.  The 3.4.2 fix was already correct.  Also added a test case in HEAD for this case.  (I did not backport the test case to 3.4.2.)
Hearing no complaint, I am going to go ahead and tag this for inclusion in 3.5M4.  If there is still an outstanding bug in the way we handle arrays, and if someone can point it out to me :-), we will handle it in M5.
Re: comment 12
I checked again the patch, and I believe all is good.
I also support backporting the fix to 3.4.2 (with a regression test).
Fix and testcase backported to 3.4.x.  Tagged as R33x_v20081220-1520 and released map files for 3.4.2.
Sorry, wrong tag - make that R34x_v20081220-1525.
