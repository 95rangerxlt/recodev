For the Visual Editor for Java, some refactoring options would be great for us 
to be able call programatically. The two of interest to us are rename a 
variable and rename a method. The reason they are of interest to us is because 
when an object is dropped in the visual editor, they are given a name. The name 
is the name of the instance variable, and it is used to form the name of a 
getter method. These names by default are simply the classname, e.g. JFrame1. 
But users like to have specific names, like ControlPanel. Today to change the 
name, they need to by hand do a refactor to rename the instance variable and 
the getter method. We would like to have instead on our property sheet the name 
of the object, and if they change it, we would under the covers go do those two 
refactors for them.

These would be great also, along the lines mentioned in the 2.1 plan, that they 
don't require saving the file before the change is made. Would this no save 
required be available if the change was visible to other java files, even those 
not yet saved. For instance a public instance variable was renamed? I don't 
know if that was part of the plan, just asking.

Thanks,
Rich Kulp

For the Visual Editor for Java, some refactoring options would be great for us 
to be able call programatically. The two of interest to us are rename a 
variable and rename a method. The reason they are of interest to us is because 
when an object is dropped in the visual editor, they are given a name. The name 
is the name of the instance variable, and it is used to form the name of a 
getter method. These names by default are simply the classname, e.g. JFrame1. 
But users like to have specific names, like ControlPanel. Today to change the 
name, they need to by hand do a refactor to rename the instance variable and 
the getter method. We would like to have instead on our property sheet the name 
of the object, and if they change it, we would under the covers go do those two 
refactors for them.

These would be great also, along the lines mentioned in the 2.1 plan, that they 
don't require saving the file before the change is made. Would this no save 
required be available if the change was visible to other java files, even those 
not yet saved. For instance a public instance variable was renamed? I don't 
know if that was part of the plan, just asking.

Thanks,
Rich Kulp
Dito.   The ability to (refactor) rename a visual entity is a hot requirement 
for the Visual Editor.  The ability to do so from an API would allow us to 
satisfy it.  The refactoring feature is quite popular and usefull, and would 
be leveraged by many editors that generates/maintain code.

Dirk, is this possible / on the plan?
No this is not on the plan. We are planning to provide refactoring participants 
so that others can hook there own code when we rename or move elements. But 
there is no plan to make existing refactorings API. 

Richard did you take a look at the refactoring actions which are already public 
API (org.eclipse.jdt.ui.actions.*). They can be used to trigger a refactoring 
on an Java element, but they pop up the refactoring dialog.
I took a quick look at the actions, but the fact they popup dialogs to ask for 
input was the problem. We want to be able to do several refactorings in a row 
based upon a single bit of user input. Just popping up the dialog and then 
requiring the user to enter all of the info wouldn't help because they could of 
just done that themselves. In our case we would just ask one thing from the 
user, and then we would know what all needs to be refactored.

I don't mind progress dialogs, but I didn't want input dialogs.
I think three is another big issue here: combining several refactorings in a 
row is not supported at all. This can lead to unpredicatable results. The 
problem is that precondition checking is based on a closed world asssumption 
and combining refactoring would mean that we have to consider the output of the 
first refactoring for the input of the second. The only way to do this is to
first

- execute precondition check of refactoring one
- execute refactoring one

- execute precondition check of refactoring two
- execute refactoring two.

But this raises some issues regarding undo and the refactoring isn't atomic 
anymore (if refactoring two fails what do you do ?).
I would be satisfied with not merging into one pass. We could do it in two 
passes. If the second pass fails, we would tell the user and they can clean up 
if they wish. In our case this isn't a disaster. But we will do need to do the 
two steps because in our case if we rename the variable, we also want to rename 
the method accessor. 

It would be nice if we didn't have to save first, but this is not a requirement.
The field rename refactoring has already support for renaming setter and 
getters as well. So you don't need to combine two refactorings to achieve this. 
We are thinking about adding support to use refactoring programatically for 
2.1. But there aren't any plans to do this for 2.0.x
2.1 is fine. We really weren't expecting such a major change for 2.0.x.

thanks,
Rich Kulp
Hi.. just adding my support for requiring this feature.
Not really worried if each rename has to be performed as a seperate operation,
just need to be able to take a list of old&new names for
 class names, method names, field names
[appropriately specified, and sequenced]
in such a way to allow them them to be renamed from an old value to a new one.
Individual failures from the list would ideally only cause dependant changes
to fail, rather than the whole list. [ie if method rename was specified after
class rename, then as the new class wouldnt exist, the new method wouldnt be 
available to rename.] 
Thanks,
MiniDish. 
All Rename refactoring can now be executed via API using the new RenameSupport 
class. The API emerged from a discussion with Gili Mendel.

There are plans to make more refactoring stuff API for 2.2. Closing PR since 
original request was regarding rename support for methods and fields
