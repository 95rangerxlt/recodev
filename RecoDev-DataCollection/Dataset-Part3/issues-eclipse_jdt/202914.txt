Build ID: Build id: I20070809-1105

Steps To Reproduce:
1. Type '.*' . Result: It shows all types in the workspace. Even if the classes are in default packages. Is it properly behavior of this window? 
2. Type something before '.*' eg. 'org.eclipse.*' . Result: It do nothing. Probably it's problem with implementation of TypeItemsFilter#equalsFilter(...).

Build ID: Build id: I20070809-1105

Steps To Reproduce:
1. Type '.*' . Result: It shows all types in the workspace. Even if the classes are in default packages. Is it properly behavior of this window? 
2. Type something before '.*' eg. 'org.eclipse.*' . Result: It do nothing. Probably it's problem with implementation of TypeItemsFilter#equalsFilter(...).
> 1. Type '.*' . Result: It shows all types in the workspace. Even if the
> classes are in default packages. Is it properly behavior of this window? 

That's really a corner case. We could change it in TypeInfoFilter.evaluatePackagePattern(String) to

(a) match only types in non-default packages by changing the last 'if' to:
		if (!hasWildCard) {
			if (s.length() == 0) {
				buf.append("?*"); //$NON-NLS-1$
			} else {
				buf.append('*');
			}
		}

(b) match only types in default packages by changing it to:
		if (!hasWildCard && s.length() != 0) {
			buf.append('*');
		}


(a) would be "more correct", but (b) would probably be more useful. I'm slightly tending towards (b), since it would add the possibility to filter for types in the default package. Opinions?


> 2. Type something before '.*' eg. 'org.eclipse.*' . Result: It do nothing.
> Probably it's problem with implementation of TypeItemsFilter#equalsFilter(..)

Yes, I've also found that updating the package pattern didn't work, and I've already fixed this with bug 176017 for I20070814-0800.
> > 1. Type '.*' . Result: It shows all types in the workspace. Even if the
> > classes are in default packages. Is it properly behavior of this window? 
> 
> Possible solutions:
> (a) match only types in non-default packages
> (b) match only types in default packages
> 
> (a) would be "more correct", but (b) would probably be more useful. I'm
> slightly tending towards (b), since it would add the possibility to filter for
> types in the default package.

CCs: Do you have a preference? If not, I'll do (b).
a.) looks more consistent to me. B.) would be another trick that you need to know. But 'default package' are too rare and not recommended to deserve a trick.
Therefor I even think we can accept the current behavior.
I vote for a) to get a consistent story.
Released (a) to HEAD.
