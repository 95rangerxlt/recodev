Build 20020123 with autobuild off.

1. Create project A
2. Create project B that depends on A
3. Global build
4. Close project A
5. Global build.

A error appears in the task list for project B: "The project was not built since 
it is inconsistent. Refresh this project then rebuild it."

This error is misleading.  Refreshing and rebuilding will do nothing.  It should 
instead say that it depends on a project that is closed.

Build 20020123 with autobuild off.

1. Create project A
2. Create project B that depends on A
3. Global build
4. Close project A
5. Global build.

A error appears in the task list for project B: "The project was not built since 
it is inconsistent. Refresh this project then rebuild it."

This error is misleading.  Refreshing and rebuilding will do nothing.  It should 
instead say that it depends on a project that is closed.
JavaProject.getExpandedClasspath should handle a closed project the same as a 
missing project by reporting a missing warning.

The build would continue without any dependency on the missing project.
A closed project isn't really 'missing', but this is interesting.

The problem is that the classpath will keep surfacing it, so 
#getExpandedClasspath will still answer some closed projects (classpath entries 
are simply handles to project). These must be filtered out by client code if 
unable to accept them.
I added a notification when a required project is closed, however the builder 
error message should be better nuanced to accomodate with classpath issues.

Why does it produce the error:

build.incompleteClassPath = The project was not built since its classpath is 
incomplete. Fix the classpath then rebuild it

Closed projects are now treated the same as missing projects... a warning is 
issued & the build proceeds. If no references exist to the closed/missing 
project, the build is error free.
*** Bug 8342 has been marked as a duplicate of this bug. ***
