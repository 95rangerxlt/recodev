Once bug 392099 has resolved the bulk of the work for null type annotations,
the following list of TODOs must be investigated:

(1) Check para in Annotation.resolveType() starting
  if ((annotationType.tagBits & TagBits.AnnotationTargetMASK) == TagBits.AnnotationForTypeUse) {
-> Needed? When, why introduced? Overlap with 1.8 treatment below??

(2) ConditionalExpression: FIXME: we need t1 == t2 comparison,
but don't yet handle mixed scenarios of types with nullTagBits + arguments
-> also use unannotated() instead of original()!!

(3) ReturnStatement: 
more detailed checking (incomp. due to annot on type detail)
-> use findNullTypeAnnotationMismatch() & write more tests
-> this method still needs to descend into type parameters

(4) Statement.findNullTypeAnnotationMismatch(..)
- maybe int return can be replaced with boolean (isDefiniteConflict)
- if so, maybe the method can actually do less for non-definite cases

(5) TypeDeclaration:
-> Need to check if synth default constructors need treatment for JSR308

(6) LookupEnvironment.createAnnotatedType: + handle PolyTypeBinding

(7) SourceTypeBinding.resolveTypeFor()
- here we translate NonNullByDefault into type annotation after the fact.
  should we use different strategies up-front?

(8) ReferenceBinding.nullAnnotatedReadableName(..)
- respect annotatable enclosing type

(9) NullTypeAnnotationTest: expect (and implement) more error messages
  (individually marked "FIXME").

Once bug 392099 has resolved the bulk of the work for null type annotations,
the following list of TODOs must be investigated:

(1) Check para in Annotation.resolveType() starting
  if ((annotationType.tagBits & TagBits.AnnotationTargetMASK) == TagBits.AnnotationForTypeUse) {
-> Needed? When, why introduced? Overlap with 1.8 treatment below??

(2) ConditionalExpression: FIXME: we need t1 == t2 comparison,
but don't yet handle mixed scenarios of types with nullTagBits + arguments
-> also use unannotated() instead of original()!!

(3) ReturnStatement: 
more detailed checking (incomp. due to annot on type detail)
-> use findNullTypeAnnotationMismatch() & write more tests
-> this method still needs to descend into type parameters

(4) Statement.findNullTypeAnnotationMismatch(..)
- maybe int return can be replaced with boolean (isDefiniteConflict)
- if so, maybe the method can actually do less for non-definite cases

(5) TypeDeclaration:
-> Need to check if synth default constructors need treatment for JSR308

(6) LookupEnvironment.createAnnotatedType: + handle PolyTypeBinding

(7) SourceTypeBinding.resolveTypeFor()
- here we translate NonNullByDefault into type annotation after the fact.
  should we use different strategies up-front?

(8) ReferenceBinding.nullAnnotatedReadableName(..)
- respect annotatable enclosing type

(9) NullTypeAnnotationTest: expect (and implement) more error messages
  (individually marked "FIXME").
(In reply to comment #0)
> (1) Check para in Annotation.resolveType() starting
>   if ((annotationType.tagBits & TagBits.AnnotationTargetMASK) ==
> TagBits.AnnotationForTypeUse) {
> -> Needed? When, why introduced? Overlap with 1.8 treatment below??

Obsolete residue of intermediate work,
removed via commit 55099d2c60113e1ad2e8ab8558e8720dd555fab8 
 
> (2) ConditionalExpression: FIXME: we need t1 == t2 comparison,
> but don't yet handle mixed scenarios of types with nullTagBits + arguments
> -> also use unannotated() instead of original()!!

done via commit fafb2dc68e9656aa163ddd55309d4bcb6df6ee09

> (3) ReturnStatement: 
> more detailed checking (incomp. due to annot on type detail)
> -> use findNullTypeAnnotationMismatch() & write more tests
> -> this method still needs to descend into type parameters

changes in ReturnStatement done via commit 56242f2c4a4e3fdfdcffa7d9541655946a7953f8

> (4) Statement.findNullTypeAnnotationMismatch(..)
> - maybe int return can be replaced with boolean (isDefiniteConflict)
> - if so, maybe the method can actually do less for non-definite cases

done via commit 40f76b3d0fb01a4a7fa1aad4b09c356c31458c94
(In reply to comment #0)
> (5) TypeDeclaration:
> -> Need to check if synth default constructors need treatment for JSR308

This case is already covered: synth bindings are created with identical type
bindings, which already carry the annotation tagBits,

> (7) SourceTypeBinding.resolveTypeFor()
> - here we translate NonNullByDefault into type annotation after the fact.
>   should we use different strategies up-front?

This would require significant code duplication, but current solutions looks
safe, so no action planned.
Only a little fix (include ArrayBinding in this treatment) has been released
via commit dc2b9befa6829d8676bcaaed036d87dc45fd9d36

> (8) ReferenceBinding.nullAnnotatedReadableName(..)
> - respect annotatable enclosing type

No, ReferenceBinding shouldn't be involved - nullAnnotatedReadableName()
has been removed from RB. Instead the corresponding behavior in 
ParameterizedTypeBinding has been improved. 
Released via commit 1fbca275b2d7b310a4c5055e69f422227cc3afb2
(includes a fix for detecting mismatch due to enclosing)

> (9) NullTypeAnnotationTest: expect (and implement) more error messages
>   (individually marked "FIXME").

Incompatibility between annotations on formal and actual type parameters
are detected as of commit 4479368fdfa1c29f97c094bfbee396d5c4fd21ba
which includes fixes for annotated type variables.
(In reply to comment #0)
> (6) LookupEnvironment.createAnnotatedType: + handle PolyTypeBinding

At a closer look this is invalid: PolyTypeBinding is the type associated to an
*expression*, with no declaration associated. There's no way an expression with
a PolyTypeBinding can carry type annotations.

> (9) NullTypeAnnotationTest: expect (and implement) more error messages
>   (individually marked "FIXME").

More detections have been implemented and tests adjusted, mostly regarding wildcards.
Also replicated a few tests for single vs. qualified type references.

The final remaining FIXME will be handled via bug 414380.


Released this last bulk via commit c49a7bd34f8c2781dba76984d24d83335183205f
