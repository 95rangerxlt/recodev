The quick fix "generate serial version UID" worked for me one or two times with eclipse 3.2 , but now it hangs in the "starting virtual machine" dialog, the cancel button does not cancel the VM. When I kill the new VM using the task manager, a serialVersionUID of 1 is inserted. This seems to happen only with some classes or projects, I have some classes in my workspaces where the quickfix is working.
I have seen several bug reports regarding this issue, which all are "FIXED", but here it seems to happen again ...

Any hints ?

The quick fix "generate serial version UID" worked for me one or two times with eclipse 3.2 , but now it hangs in the "starting virtual machine" dialog, the cancel button does not cancel the VM. When I kill the new VM using the task manager, a serialVersionUID of 1 is inserted. This seems to happen only with some classes or projects, I have some classes in my workspaces where the quickfix is working.
I have seen several bug reports regarding this issue, which all are "FIXED", but here it seems to happen again ...

Any hints ?
could you please provide exact steps on how to reproduce this?
I managed to get a small test case ;-)

package bug;

import java.io.Serializable;
import org.apache.log4j.Logger;

public class Bug implements Serializable {
  
  private static final Logger logger = Logger.getLogger(Bug.class);
}

Place the cursor on the "Bug" and then use the Fix Quick "Add generated serial version UID" ...

 
Strange,
I just tried this with a new workspace and it worked, so it must have something
todo with the old workspace or project. I will investigate further on it.
It possible that the problem occurs with a "long" classpath, because when
I remove some jars from the projects classpath, its working again.
Maybe some issue with the environment size when lauching external processes ?  
Please provide more details on the libraries used and how your project setup looks like.
I have done some debugging, the problems seems to be in the class SerialVersionLaunchConfigurationDelegate around line 205.

				final Process process= exec(commandLine, null);
				if (process != null) {
					try {
						process.waitFor();
					} catch (InterruptedException exception) {
						// Do nothing
					}

The call process.waitFor() seems to wait forever. 
I will try to post the contents of commandLine in the error situation, but it will take some time ...

Created attachment 45946
cmdline when generating serial version uid
I have exact same problem in several classes. Please look at my project at www.opensubsystems.org. All the source code is in CVS accessible from the project page. Once you open the project in Eclipse 3.2 you will see in Problems view several classes which do not have generated serial version id. When you try to generate serial version id for these classes the dialog hangs. This is on Windows XP, P4 2.4Mhz with 1Gb ram.

I have found out, that sometimes i can go to the the Windows task manager, identify the javaw process which is responsible for this generation (the one with small memory footprint) and kill it. In some cases once I kill it, Eclipse recovers and insert what seems to be generation serial version ID, in other cases it just enters 1.
You can get detailed description how to setup our project to reproduce this problem starting at 
http://www.opensubsystems.org/developmentenvironment.html
and then cotinuing using Next on the bottom of the page.
I have the same problem if the class for which i want to generate a serial version UID contains a static class variable (in this case it was a log4j Logger instance). After commenting out this instance the serial version UID generator does its task like it was expected.
fixed > 20070619

See bug 169407. 
*** Bug 193532 has been marked as a duplicate of this bug. ***
