see http://java.sun.com/j2se/1.3/docs/guide/serialization/spec/class.doc6.html#4100

see http://java.sun.com/j2se/1.3/docs/guide/serialization/spec/class.doc6.html#4100
The current implementation launches a VM and uses ObjectStreamClass to evaluate the serial version ID. Considerable effort has been invested in this code, but maintenance is still costly and there are still some open issues:
- the current solution requires a class load, which only succeeds with a correct class path setup and launch order 
- performance

We see the following options:
a. live with the current solution and invest the time for maintenance
b. reimplement the quick fix using the published algorithm
c. remove the quick fix and generate a random number. The correct thing for users to do is to add a the serial version field as early a possible and maintain it. It is not clear if the quick fix really helps users. The use case I see is when existing systems have to add the serial version id field (as they forgot it) and this has to be done without breaking serialized objects. But in this case it is already dangerous to recompile class files as the compiler might create a slightly different classfile, resulting in a new serial id. The safe solution, IMO, would be to use the 'serialver' tool on the 'old' original classfiles.

For b.): The information needs to be computed on a classfile.
For performance reasons, a full build should be avoided.
Question to JDT.core: Is it possible to get a classfile preview for a single file, or can we even convince you to implement the given algorithm?

I'd be also happy on jdt.core feedback on the discussion of a.), b.) and c.)

Created attachment 71186
patch for 3.4
patch released > 20070619

I reimplemented the serialize quick fix / clean up by reimplementing the published algorithm.
Tests added as well.
