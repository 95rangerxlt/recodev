BETA_JAVA8:

The following is a legal construct in Java 8:

interface I {
    void doit();
}

class X {
    Object o = (I & Serializable) () -> {};
}

AST/APIs need a new facility to capture the additional bounds.

BETA_JAVA8:

The following is a legal construct in Java 8:

interface I {
    void doit();
}

class X {
    Object o = (I & Serializable) () -> {};
}

AST/APIs need a new facility to capture the additional bounds.
See also bug 99931, which is about surfacing intersection types in ITypeBindings.
Working on bug 400874 I need to create compiler bindings for intersection
types. I was wondering if IntersectionCastTypeBinding could be the right
internal representation for that, in which case we might want to rename
that class?

More specifically, 18.4. requires to create a type bound from a glb,
where Scope.greaterLowerBound() returns ReferenceBinding[] rather than
a single TypeBinding.
(In reply to comment #2)
> Working on bug 400874 I need to create compiler bindings for intersection
> types. I was wondering if IntersectionCastTypeBinding could be the right
> internal representation for that, in which case we might want to rename
> that class?

I don't see a problem with that. We need to avoid any potential confusion
with org.eclipse.jdt.internal.compiler.lookup.Binding.INTERSECTION_TYPE.
This existing facility is not suitable for your purposes ?
(In reply to comment #2)
> Working on bug 400874 I need to create compiler bindings for intersection
> types. I was wondering if IntersectionCastTypeBinding could be the right
> internal representation for that, in which case we might want to rename
> that class?
> 
> More specifically, 18.4. requires to create a type bound from a glb,
> where Scope.greaterLowerBound() returns ReferenceBinding[] rather than
> a single TypeBinding.

Something I just remembered: IntersectionCastTypeBinding does not today
have the ability to have an array type as one of its constituents. The
effect of this limitation, purely as a cast construct is to disallow 
the perfectly legal, but all too pedantic cast: (javac rejects it too)

 X [] x = (X[] & Serializable & Cloneable) new X[0];

I raised this issue with the spec committee just for completeness sakes
but there has been no clarification so far. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=400882.

Notwithstanding that, I though ECJ should allow that cast - but it caused
a lot of ripples - ArrayBinding is not a ReferenceBinding in our scheme of
things. A lot more ripple than I was willing to settle for.

Not sure if this matters for the inference work's potential use of this
abstraction.
*** Bug 404003 has been marked as a duplicate of this bug. ***
Created attachment 229386
Proposed fix

Patch with new test. A note on the new ast node, IntersectionCastType -  CastIntersectionType sounds better to, although I have kept it the former to keep it consistent with the names of the compiler ast nodes.

Tests are running.
In Java 8, the intersection type will only be supported in cast expressions. But this may change in later versions of the language. It would certainly be interesting as type of a variable or as method return type.

The DOM node should just be called IntersectionType.
(In reply to comment #6)
> Tests are running.

All tests pass.
(In reply to comment #7)
> The DOM node should just be called IntersectionType.

Do you see any problem with IntersectionCastType, other than it being a tad longer? Everywhere I see intersection cast type being used. I think it won't do any harm in keeping it consistent, would it?
See comment 7. Internal type names can be changed at any time, but API names are cast in stone.

Since it's quite probable that intersection types will show up in more locations in the future, we shouldn't use a restrictive name like "IntersectionCastType" now. That name would be wrong if we wanted to allow intersection types everywhere.

"IntersectionType" has no such restrictions and is in line with other type names such as UnionType. Consistency in API names is more important than consistency with internal implementation. You could also rename the internal IntersectionCastType if you want to align the names.
(In reply to comment #10)

> You could also rename the internal
> IntersectionCastType if you want to align the names.

Let us not do this. We already have INTERSECTION_TYPE with different 
isEquivalentTo and isCompatibleWith semantics. I had to introduce a
new binding king INTERSECTION_CAST_TYPE for the new construct.
> We already have INTERSECTION_TYPE with different 
> isEquivalentTo and isCompatibleWith semantics. I had to introduce a
> new binding king INTERSECTION_CAST_TYPE for the new construct.

Interesting. Is that an implementation detail, or is it a sign that there are actually two different kinds of intersection types that would also have to be kept separate in the ITypeBinding API for bug 99931?
Released in BETA_JAVA8 with name change suggested by Markus:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=a2a0577109951f3af96b6ee7e6f23d457b52d52d

Srikanth, the bug's still marked for review. Please review when you have time.
The previous commit was missing changes in ASTNode#nodeClassForType and DefaultASTVisitor(). DefaultASTVisitor was also missing LambdaExpression and these have been fixed via commit:

1987bebfc0499fe07d643a641d2e74ff184f5cc7
I've also updated the ASTRewriteAnalyzer: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=e7e2695fe5657cf6f05f673f7f1f6646805752fe
