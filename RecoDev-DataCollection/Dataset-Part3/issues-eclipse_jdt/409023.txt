Created attachment 231493
fix

FUP to bug 403475, if you have a local type defined that executes a method with the same name as the enclosing method, HCR drops to the enclosing method.

Run the following snippet, add a change to LocalClass#run, save and notice two frames are popped. We shold be popping the top frame annd be back in LocalClass#run, instead we end up in TestHCR#run (the enclosing method).

package a.b.c;

public class TestHCR {
	
	public void run() {
		System.out.println("LocalHCR#run()");
		
		class LocalClass {
			public void run() {
				System.out.println("LocalClass#run()"); //BP here
			}
		}
		new LocalClass().run();
	}

	static class InnerClass {
		public void run() {
			System.out.println("InnerClass#run()");
			new TestHCR().run();
		}
	}

	public static void main(String[] args) {
		System.out.println("TestHCR#main()");
		new InnerClass().run();
	}
}

Created attachment 231493
fix

FUP to bug 403475, if you have a local type defined that executes a method with the same name as the enclosing method, HCR drops to the enclosing method.

Run the following snippet, add a change to LocalClass#run, save and notice two frames are popped. We shold be popping the top frame annd be back in LocalClass#run, instead we end up in TestHCR#run (the enclosing method).

package a.b.c;

public class TestHCR {
	
	public void run() {
		System.out.println("LocalHCR#run()");
		
		class LocalClass {
			public void run() {
				System.out.println("LocalClass#run()"); //BP here
			}
		}
		new LocalClass().run();
	}

	static class InnerClass {
		public void run() {
			System.out.println("InnerClass#run()");
			new TestHCR().run();
		}
	}

	public static void main(String[] args) {
		System.out.println("TestHCR#main()");
		new InnerClass().run();
	}
}
The fix for this bug also fixes bug 265867 and bug 133585
*** Bug 265867 has been marked as a duplicate of this bug. ***
*** Bug 133585 has been marked as a duplicate of this bug. ***
Created attachment 231562
tests

Here are some unit tests I started on, there are still a few to finish though.
Created attachment 231711
fix + tests

This patch combines the other two and completes the tests
pushed to: http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=abf23e86d8b99b0fd9da69c43f3dc7e3c15bf927
The bundle version was not updated in both bundles.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=2f4287f75d58284e6802edf5b2087a71dd09f766
Created attachment 239311
Some cases still not covered

Some cases still not covered: for ex.

/**
* j.saoumi
*/
package application;

public class TestHCR1 {
	Runnable run1 = new Runnable() { // Anonymous class initializer
		public void run() {
			System.out.println("Test run1 : run");
			run2.run();
		}
	};
	
	Runnable run2 = new Runnable() { // Anonymous class initializer
		public void run() {
			// changing the content of this function during the debugging
			// will cause that many frames will be dropped and the program will continue
			// from the start of the (run1.run) method
			System.out.println("Test run2 : run");
			System.out.println("Test run2: completed");
		}
	};
	
	public TestHCR1() {
		
	}
	
	public void test() {
		run1.run();
	}
	
	public static void main(String[] args) {
		new TestHCR1().test();
	}
}

Because the anonymous class declarations have no qualified names (binding.getQualifiedName() returns "") so they will be identified using $ and a sequential number (TestHCR1$1 and TestHCR1$2) 
To get these special names we need the binary name of the class and not the qulified name.
(In reply to Jacob Saoumi from comment #8)
> Created attachment 239311 [details]
> Some cases still not covered

Can you please file a new bug? Thanks.
