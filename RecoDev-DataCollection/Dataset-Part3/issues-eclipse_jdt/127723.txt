3.2 M5 testing

- have a library project L with refactoring scripts enabled
- export the code as 'library.jar'
- create a dependent project D which references its private copy of library.jar
- modify L by doing some refactorings (e.g. change method sig)
- export L to 'library_v2.jar including the refactoring scripts
- update D by replacing library.jar by library_v2.jar (keep original name)

> everything works as expected, the refactoring are applied

- update D by replacing library.jar with the original 'library.jar' file

> the update runs without any refactorings (ok), D has now compile errors as it depends on the new version of L.

< expected: some kind of warning that I may be doing something bad. We shouldn't disallow doing this, as it may make sense in some scenarios. I would propose adding a timestamp to the exported library. When replacing a library with a version older than the current version, a warning message could be displayed.

3.2 M5 testing

- have a library project L with refactoring scripts enabled
- export the code as 'library.jar'
- create a dependent project D which references its private copy of library.jar
- modify L by doing some refactorings (e.g. change method sig)
- export L to 'library_v2.jar including the refactoring scripts
- update D by replacing library.jar by library_v2.jar (keep original name)

> everything works as expected, the refactoring are applied

- update D by replacing library.jar with the original 'library.jar' file

> the update runs without any refactorings (ok), D has now compile errors as it depends on the new version of L.

< expected: some kind of warning that I may be doing something bad. We shouldn't disallow doing this, as it may make sense in some scenarios. I would propose adding a timestamp to the exported library. When replacing a library with a version older than the current version, a warning message could be displayed.
Easy to implement enhancement
Fixed in HEAD > 20060224
