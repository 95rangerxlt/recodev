http://www.ott.oti.com/uvm/OTIIBM/numbat/Testing/JCK-
14/tests/lang/BINC/binc044/binc04402/binc04402.html - POSITIVE TEST
	This is a binary compatibility test. You need to compile first the 
first test case and then the second. Not both at the same time. And then 
execute it. The problem with the Eclipse
	compiler occurs only at runtime.

Test cases:
	javac 1.4:
		compilation: OK
		runtime: NONE

	javac 1.3:
		compilation: OK
		runtime: failed

	Eclipse compiler:
		compilation: OK
		runtime: failed

NOTES:
	We can see that the second invokestatic is different. We refer to Hyper 
and javac refers to Super. Then when the class definition changes for Super, we 
	don't detect the problem.

http://www.ott.oti.com/uvm/OTIIBM/numbat/Testing/JCK-
14/tests/lang/BINC/binc044/binc04402/binc04402.html - POSITIVE TEST
	This is a binary compatibility test. You need to compile first the 
first test case and then the second. Not both at the same time. And then 
execute it. The problem with the Eclipse
	compiler occurs only at runtime.

Test cases:
	javac 1.4:
		compilation: OK
		runtime: NONE

	javac 1.3:
		compilation: OK
		runtime: failed

	Eclipse compiler:
		compilation: OK
		runtime: failed

NOTES:
	We can see that the second invokestatic is different. We refer to Hyper 
and javac refers to Super. Then when the class definition changes for Super, we 
	don't detect the problem.
Adapted to this change for 1.4 mode only.
Fixed
