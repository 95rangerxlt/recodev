Build 20031202

Whenever the editor gains focus; it is triggering a forced reconciliation. This 
is too naive, and wastes lots of cycles.

e.g.:
- open editor
- select one element in outliner
- go back to editor

A reconciliation is triggered even though nothing has changed which requires 
this.

Build 20031202

Whenever the editor gains focus; it is triggering a forced reconciliation. This 
is too naive, and wastes lots of cycles.

e.g.:
- open editor
- select one element in outliner
- go back to editor

A reconciliation is triggered even though nothing has changed which requires 
this.
How would we know? There might be new problem annotations or some might have
gone because a dependent file changed. Is there state in J Core that would allow
to give us that information without reconciling?

waiting for user input
You should be able to now that the editor did not lose focus, no one touched 
any other file. All what happened is that I selected something in an outliner, 
which for some UI implementation reason causes the editor to lose focus and 
forget completely what it was doing...  

There are obvious scenarii where developping in one editor shouldn't cause 
unnecessary computations... for instance, I wonder why the outliner isn't 
simply coupled with the editor (as it was in VAJ), thus the editor wouldn't 
lose its context simply because I selected another member.


In order to implement this, you could notice than no Java delta got notified, 
thus you could trust the editor contents.
>I wonder why the outliner isn't simply coupled with the editor (as it was in VAJ)
This question has to be targeted twards Platform UI

It now only forces a reconcile when there was a Java Model change.

Available in builds > 20040213

*** Bug 37160 has been marked as a duplicate of this bug. ***
*** Bug 28201 has been marked as a duplicate of this bug. ***
