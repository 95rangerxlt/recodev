Using eclipse.buildId=I20071204-1547
java.version=1.6.0_10-ea
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=fr_CA
Framework arguments:  -showlocation
Command-line arguments:  -os win32 -ws win32 -arch x86 -debug -consolelog -console -showlocation

I got this exception trying to run some tests. I don't know exactly what I have done to get it, but hopefully the stack trace will be helpful enough to know what is going on.

java.lang.NullPointerException
at org.eclipse.jdt.junit.launcher.JUnitLaunchConfigurationDelegate.collectExecutionArguments(JUnitLaunchConfigurationDelegate.java:324)
at org.eclipse.jdt.junit.launcher.JUnitLaunchConfigurationDelegate.launch(JUnitLaunchConfigurationDelegate.java:144)
at org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:764)
at org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:614)
at org.eclipse.debug.internal.ui.DebugUIPlugin.buildAndLaunch(DebugUIPlugin.java:827)
at org.eclipse.debug.internal.ui.DebugUIPlugin$7.run(DebugUIPlugin.java:1030)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

Using eclipse.buildId=I20071204-1547
java.version=1.6.0_10-ea
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=fr_CA
Framework arguments:  -showlocation
Command-line arguments:  -os win32 -ws win32 -arch x86 -debug -consolelog -console -showlocation

I got this exception trying to run some tests. I don't know exactly what I have done to get it, but hopefully the stack trace will be helpful enough to know what is going on.

java.lang.NullPointerException
at org.eclipse.jdt.junit.launcher.JUnitLaunchConfigurationDelegate.collectExecutionArguments(JUnitLaunchConfigurationDelegate.java:324)
at org.eclipse.jdt.junit.launcher.JUnitLaunchConfigurationDelegate.launch(JUnitLaunchConfigurationDelegate.java:144)
at org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:764)
at org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:614)
at org.eclipse.debug.internal.ui.DebugUIPlugin.buildAndLaunch(DebugUIPlugin.java:827)
at org.eclipse.debug.internal.ui.DebugUIPlugin$7.run(DebugUIPlugin.java:1030)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
This must have happend when you executed two test runs quickly after each other.
The same launch configuration delegate is used and we, thats a bug, use fields to store some state.

Two possibilities:
- we pass all state as local variables. This would require new API as JUnitLaunchConfigurationDelegate is extended and the methods are framework methods. The problem is that it would be good to keep the state private.

- we synchronize 'launch' in JUnitLaunchConfigurationDelegate. What do you think, Darin? I believe this would work and wouldn't be too wrong as having two launches at exactly the same time isn't that useful anyway.
I wanted to say: 'we can pass all state as parameters'
Having the launch method synchronized looks like the right thing to do. A similar problem lurks in other launch delegates.
fixed > 20071214
