I20070123-1715

I often see myself trying to open the call hierarchy on the class name. That doesn't work - sure, it can't. But what about opening the call hierarchy for the contructor of this class (only if the class has not more than one constructors).

I20070123-1715

I often see myself trying to open the call hierarchy on the class name. That doesn't work - sure, it can't. But what about opening the call hierarchy for the contructor of this class (only if the class has not more than one constructors).
This would be extremly useful for classes with _no_ explicit constructor as you can't open the call hierachy for the implicit standard constructor.

Do you know about any workaround for this?
Just wanted to point out that this seems to be related to bug 143020
If my patch for bug 75800 is accepted, only very little changes
would be required to also support classes in the call hierarchy:
I made a little experiment were opening the call hierarchy on
a class would initially start with all invocations of any 
constructor of the given class ( = all instantiations of the class).
Below that, the call hierarchy works as normal.

Would that suite your needs?


I've just released bug 75800 (with a few changes). A patch as outlined in comment 3 would be very welcome.

An as-yet unsolved problem is bug 143020. We can't create an inexistent IMethod for an implicit constructor, since this would break all of JDT/UI (you'll e.g. get a lot of JavaModelExceptions if you try to render an element that does not exist or pass it out in a selection).

A possible workaround would be to just use the IType for the implicit constructor (just in case a class has no explicit constructors, otherwise use the IMethods for the constructors).


We could also think about allowing a non-static IInitializer as a parent in a caller hierarchy as well, i.e. an initializer would be called by all constructors of the declaring class.

Here's a class to experiment (start caller hierarchy on VERSION):

public class Try {
	public static final String VERSION= "1.5";
	
	public Try() { } // remove to test implicit constructor
	public Try(int i) { } // remove to test implicit constructor
	
	void m() {
		new Try().toString();
	}
	
	{ // non-static initializer
		VERSION.hashCode();
	}
	static {
		new Try().VERSION.hashCode();
	}
}
Created attachment 80794
proposed patch

After the method CallHierarchy.isPossibleParent(..) has already
been factored out for bug 75800, it seems really easy to support
call hierarchy seeded by instantiations of a class.

By using a string-based search pattern my patch avoids the problems
of inexistent IMethods as mentioned in comment 4.
In other words, with this patch constructor declarations don't matter,
but all references to constructures are found (regardless of signature).

Thus, the semantics really is: what control flows leed to instantiating
this class. OK?

(I would still prefer to see a different label rather than 
"Members calling 'MyClass' - in workspace", -> "Members instantiating 'MyClass'
but on this topic cf. bug 75800 # 14)
(In reply to comment #5)
This patch would have grouped all calls to constructors of a type together in a single parent item. This is a bit strange, since the call hierarchy does also not merge callers in other situations.

I released a slightly different fix, which considers all constructors of a type as callers of the type. In the special case of missing constructors, callers of the type are all references to the default constructor. I.e.:

MyType
+ MyType()
+ MyType(int arg)
  + callingOneArgCtor()

and

MyType
+ callingDefaultCtor()

Furthermore, I added support for initializers.
You have a typical tiny typo in org/eclipse/jdt/internal/ui/callhierarchy/CallHierarchyMessages.properties:

CallHierarchyViewPart_empty=To display the call hierarchy, select a member (a method, type, filed, or initializer), and select the \'Open Call Hierarchy\' menu option. Alternatively, you can drag and drop a member onto this view.ages.properties

filed -> field

;-)
(In reply to comment #7)
> filed -> field

Thanks, fixed in HEAD, sneaked into M3.
*** Bug 143020 has been marked as a duplicate of this bug. ***
