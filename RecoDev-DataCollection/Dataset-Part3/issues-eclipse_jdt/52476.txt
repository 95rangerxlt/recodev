build M7

Annotated method AnnotationPainter.handleDrawRequest with a repaint counter.
1) Open TestCase.java
2) add line >String s= < to tearDown method, set caret at end of line
3) spell checking enabled, otherwise default settings
3) type a single space
   -> 1 immediate repaint, 3 after timeout
4) type "
   -> auto inserted closing " + linked mode
   -> 10 immediate repaints, 3 after timeout

build M7

Annotated method AnnotationPainter.handleDrawRequest with a repaint counter.
1) Open TestCase.java
2) add line >String s= < to tearDown method, set caret at end of line
3) spell checking enabled, otherwise default settings
3) type a single space
   -> 1 immediate repaint, 3 after timeout
4) type "
   -> auto inserted closing " + linked mode
   -> 10 immediate repaints, 3 after timeout
Just for book keeping: repaints in the previous message are both repaint 
requests and repaint actions. Repaint actions are caused by repaint request 
(gc == null).

The repaints are caused by annotation model change events. Three of them are 
sent out by the linked UI infrastructure. In the optimal case only one would 
be necessary. 
fixed too many annotation updates in LinkedUIControl & LinkedPositionAnnotations.


start verifying for m8 ...
i get the following annotation calls:
String s= -> 2 calls to handleDrawRequest
space -> as described
" -> 7 repaints 4 immediately, 3 after timeout
Are you talking about repaint requests or repaint actions?
forthe bookkeeping:
String s= -> 2 repaints first with gc==null then with gc!=null
space -> 4 repaints first with gc!= null then two with gc == null last with 
gc != null
" -> 7 repaints 4+3: 1. != null then 2.3. == null, 4. != null, 5.6. ==null, 
7. != null

Sounds ok to me: we get 3 additional immediate calls:

two are redraw requests (gc == null) by the linked position ui that invalidate
the linked positions, and these requests get satisfied by a single redraw action
with a non-null gc (fourth call).

The linked mode will issue a redraw request for every invalidated linked
position - as long as these get merged, we're off fairly well.
