If a Java 5 annotation processor throws an exception or error during build, it is caught by AptDispatchRunnable.build() and logged.  However, this code does not contain a finally block, so the BuildEnv does not get closed, etc.

We need to look at this cleanup code, and the similar code for reconcile, and ensure that processor exceptions do not leave APT in an inconsistent state.

If a Java 5 annotation processor throws an exception or error during build, it is caught by AptDispatchRunnable.build() and logged.  However, this code does not contain a finally block, so the BuildEnv does not get closed, etc.

We need to look at this cleanup code, and the similar code for reconcile, and ensure that processor exceptions do not leave APT in an inconsistent state.
Created attachment 68218
Proposed patch

Proposed patch for this and bug 187135 (which concerns logging of the AbortException within this try block).  In addition to the finally block in AptDispatchRunnable, there was also a potential resource handle leak in a GeneratedFileMap method called from the same code.
+1. I am re-empowered.

I don't think it is necessary to stop logging of AbortCompilation exceptions. Since this class is not API, the JDT API should not be throwing these.
It's a fair point about AbortCompilation.  I'll move discussion of that to Bug 187135; I can (pending Jess' review) commit the rest of this fix and leave that part out.
Created attachment 68222
Proposed patch

Patch incorporating Tim's review feedback
Looks good.
Fixed for 3.3 RC2.  Re AbortCompilation, per discussion in bug 187135, we are logging it with "warning" severity.
