http://www.ott.oti.com/uvm/OTIIBM/numbat/Testing/JCK-
14/tests/lang/BINC/binc044/binc04401/binc04401.html - POSITIVE TEST
	This is a binary compatibility test. You need to compile first the 
first test case and then the second. Not both at the same time. And then 
execute it. The problem with the Eclipse
	compiler occurs only at runtime.

Test cases:
	javac 1.4:
		compilation: OK
		runtime:
cm_Super
im_Super

	javac 1.3: 
		compilation: OK
		runtime:
cm_Hyper
im_Super
failed

	Eclipse compiler:
		compilation: OK
		runtime:
cm_Hyper
im_Super
failed

NOTES:

	Again the problem is related to the declaring class of the method 
invocation. We twice generate Hyper and javac generates Super. We generate all 
the time the declaring 
	class of the method whereas javac generates the receiver class for the 
declaring class of the method. This is a big change since 1.3.

http://www.ott.oti.com/uvm/OTIIBM/numbat/Testing/JCK-
14/tests/lang/BINC/binc044/binc04401/binc04401.html - POSITIVE TEST
	This is a binary compatibility test. You need to compile first the 
first test case and then the second. Not both at the same time. And then 
execute it. The problem with the Eclipse
	compiler occurs only at runtime.

Test cases:
	javac 1.4:
		compilation: OK
		runtime:
cm_Super
im_Super

	javac 1.3: 
		compilation: OK
		runtime:
cm_Hyper
im_Super
failed

	Eclipse compiler:
		compilation: OK
		runtime:
cm_Hyper
im_Super
failed

NOTES:

	Again the problem is related to the declaring class of the method 
invocation. We twice generate Hyper and javac generates Super. We generate all 
the time the declaring 
	class of the method whereas javac generates the receiver class for the 
declaring class of the method. This is a big change since 1.3.
Changing the declaring class of binding in message sendings if declaring class 
isn't receiver type.
Fixed
