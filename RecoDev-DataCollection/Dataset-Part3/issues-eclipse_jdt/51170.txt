Using 3.0M5.
I hope this is clear what my problem is.

The problem I'm running into is that when I use the updateMarker(3 args) 
function to force a Marker up to date, the resource change listener isn't 
disabled.  So the BasicMarkerUpdater sets the Marker CHAR_START, which causes 
the listener to be invoked, which causes the Position length to be 
recalculated based on the new CHAR_START and the old CHAR_END.  Then the 
BasicMarkerUpdater attempts to set the new CHAR_END, but it uses the Position 
length, which is wrong because it was just set when the start was adjusted.  
The results is that the Marker length gets decreased when the Marker is moved 
forward, and increased when the Marker is moved backward.  The updateMarker(3 
args) version is public, so I assume that this should work as expected.

Possible solution: The updateMarkers(IDocument) method disables the listener 
with listenToMarkerChanges(false) before iterating through all the Markers to 
update them.  I think that the updateMarker(IMarker,IDocument,Position) method 
needs to do something similar, although some care must be taken since it is 
called by the updateMarkers(IDocument) method.

Snippet: (I'm attempting to update only my markers when an edit occurs)
    public void adjustReadOnlyMarkersForEdit()
    {
        IDocumentProvider provider=editor.getDocumentProvider();
        IAnnotationModel annotationModel=provider.getAnnotationModel
(editor.getEditorInput());
        AbstractMarkerAnnotationModel markerAnnotationModel=
(AbstractMarkerAnnotationModel)annotationModel;
        try
        {
            
            ITextViewer viewer=(ITextViewer)editor.getAdapter
(ITextOperationTarget.class);
            IDocument doc=viewer.getDocument();
//            ((AbstractMarkerAnnotationModel)annotationModel).updateMarkers
(viewer.getDocument()); //*************This statement works
            for (Iterator iter= mReadOnlyAnnotations.iterator(); iter.hasNext
();)
			{
				EditorReadOnlyMarker element= 
(EditorReadOnlyMarker) iter.next();
                markerAnnotationModel.updateMarker
(element.mStartMarker.getMarker(),doc,markerAnnotationModel.getMarkerPosition
(element.mStartMarker.getMarker())); //*********This statement incorrectly 
updates the marker
                }
        }
        catch (CoreException e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

Using 3.0M5.
I hope this is clear what my problem is.

The problem I'm running into is that when I use the updateMarker(3 args) 
function to force a Marker up to date, the resource change listener isn't 
disabled.  So the BasicMarkerUpdater sets the Marker CHAR_START, which causes 
the listener to be invoked, which causes the Position length to be 
recalculated based on the new CHAR_START and the old CHAR_END.  Then the 
BasicMarkerUpdater attempts to set the new CHAR_END, but it uses the Position 
length, which is wrong because it was just set when the start was adjusted.  
The results is that the Marker length gets decreased when the Marker is moved 
forward, and increased when the Marker is moved backward.  The updateMarker(3 
args) version is public, so I assume that this should work as expected.

Possible solution: The updateMarkers(IDocument) method disables the listener 
with listenToMarkerChanges(false) before iterating through all the Markers to 
update them.  I think that the updateMarker(IMarker,IDocument,Position) method 
needs to do something similar, although some care must be taken since it is 
called by the updateMarkers(IDocument) method.

Snippet: (I'm attempting to update only my markers when an edit occurs)
    public void adjustReadOnlyMarkersForEdit()
    {
        IDocumentProvider provider=editor.getDocumentProvider();
        IAnnotationModel annotationModel=provider.getAnnotationModel
(editor.getEditorInput());
        AbstractMarkerAnnotationModel markerAnnotationModel=
(AbstractMarkerAnnotationModel)annotationModel;
        try
        {
            
            ITextViewer viewer=(ITextViewer)editor.getAdapter
(ITextOperationTarget.class);
            IDocument doc=viewer.getDocument();
//            ((AbstractMarkerAnnotationModel)annotationModel).updateMarkers
(viewer.getDocument()); //*************This statement works
            for (Iterator iter= mReadOnlyAnnotations.iterator(); iter.hasNext
();)
			{
				EditorReadOnlyMarker element= 
(EditorReadOnlyMarker) iter.next();
                markerAnnotationModel.updateMarker
(element.mStartMarker.getMarker(),doc,markerAnnotationModel.getMarkerPosition
(element.mStartMarker.getMarker())); //*********This statement incorrectly 
updates the marker
                }
        }
        catch (CoreException e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
*** Bug 51171 has been marked as a duplicate of this bug. ***
This looks as if you have a listener that modifies the position which you passed
to updateMarker. Right?

It also looks as if you don't execute the updateMarker code in a workspace
runnable with IWorkspace.AVOID_UPDATE (or when using 2.1 code a
WorkbenchModifyOperation) which is the cause for each little event to be fired
instead of a compound delta. If you change this then you will only get a
compound resource delta at the end.

Daniel, thanks for your response.

Actually, what I have is a listener for the modifyText event.  When I receive 
that event, I call the adjustReadOnlyMarkersForEdit() method below.  So I 
don't actually modify the position that I pass to updateMarker().  All I do is 
grab the current position from the related annotation and tell the marker to 
update using that position.  All I am trying to do is make *my* markers (not 
all markers) update synchronously with edits instead of having to wait until 
the file is saved (and updateMarkers() is called).

I have not used a workspace runnable.  

I believe this is a bug.  updateMarkers() works fine because 
listenToMarkerChanges(false) is used to disable listeners while the Position 
instance is being modified.  However, updateMarker() doesn't work because it 
does not call listenToMarkerChanges().  Therefore, when BasicMarkerUpdater 
calls MarkerUtilities.setCharStart(), something gets a notification and 
updates the Position length (using the new beginning but the old end).  Then 
the end offset is recalculated using the new length (which is wrong).  Then 
MarkerUtilities.setCharEnd() is called with the wrong end offset.  Below is 
the code I'm referring to from BasicMarkerUpdater.  

I don't know much about the Eclipse architecture, but it appears to me that 
this is not a batching problem (Note: I don't believe updateMarkers() uses any 
batching mechanism other than the call to turn off listeners).  This problem 
could be solved by simply storing the position length before setCharStart() is 
called and using that stored length to determine the end pos for setCharEnd() 
so that the code is not confused when the Position data is changed out from 
under it.  However, that may have unintended side effects.

I've decided that for what I'm working on I only need the Annotations, not the 
markers, so I can't try the workspace runnable idea at this time.  If you look 
at BasicMarkerUpdater and decide that it works as intended wrt the listeners 
updating the Position instance, then we can drop it.

Thanks,
Ernest

	/*
	 * @see IMarkerUpdater#updateMarker(IMarker, IDocument, Position)
	 */
	public boolean updateMarker(IMarker marker, IDocument document, 
Position position) {
		
		if (position == null)
			return true;
			
		if (position.isDeleted())
			return false;
		
		boolean offsetsInitialized= false;
		boolean offsetsChanged= false;
		int markerStart= MarkerUtilities.getCharStart(marker);
		int markerEnd= MarkerUtilities.getCharEnd(marker);
		
		if (markerStart != -1 && markerEnd != -1) {
			
			offsetsInitialized= true;
			
			int offset= position.getOffset();
			if (markerStart != offset) {
				MarkerUtilities.setCharStart(marker, offset);
				offsetsChanged= true;
			}
			
			offset += position.getLength();
			if (markerEnd != offset) {
				MarkerUtilities.setCharEnd(marker, offset);
				offsetsChanged= true;
			}
		}
		
		if (!offsetsInitialized || (offsetsChanged && 
MarkerUtilities.getLineNumber(marker) != -1)) {
			try {
				// marker line numbers are 1-based
				MarkerUtilities.setLineNumber(marker, 
document.getLineOfOffset(position.getOffset()) + 1);
			} catch (BadLocationException x) {
			}
		}
		
		return true;
	}

To be investigated in more detail after M7.
Reopening and tagging with M8.

The version of updateMarker that is called from outside clients (although 
those should be restricted to document providers according to our 
architecture) should not listen to marker changes while the updaters are 
running. Usually, this lack is not obvious as the only subclass we provide is 
ResourceMarkerAnnotationModel which works with IMarker and should only be 
manipulated in workspace runnables with the appropriate scheduling rule.  See 
javadoc for updateMarker.

Build M8.
