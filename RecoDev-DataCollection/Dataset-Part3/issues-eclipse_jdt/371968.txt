Bug 371940 demonstrates a situation where a user was surprised to not see a pot.null warning after enabling annotation-based null analysis.

My first reaction was that enabling null annotations could automatically trigger to strengthen some related problems. Notably pot.null diagnostics could be changed to "warning" if previously ignored. After reading Ayush's bug 371940 comment 5 I agree that a softer approach would be better:

Can enabling null annotations just trigger some kind of recommendation/suggestions?
"When enabling null annotations it is suggested to also enable the following warnings: ..."
(I'm thinking of Debian/Ubuntu, where a package may specify other packages suggested for install)

Could be a popup, could be an info in the dialog's status line or anything.

Bug 371940 demonstrates a situation where a user was surprised to not see a pot.null warning after enabling annotation-based null analysis.

My first reaction was that enabling null annotations could automatically trigger to strengthen some related problems. Notably pot.null diagnostics could be changed to "warning" if previously ignored. After reading Ayush's bug 371940 comment 5 I agree that a softer approach would be better:

Can enabling null annotations just trigger some kind of recommendation/suggestions?
"When enabling null annotations it is suggested to also enable the following warnings: ..."
(I'm thinking of Debian/Ubuntu, where a package may specify other packages suggested for install)

Could be a popup, could be an info in the dialog's status line or anything.
I am a little confused about the defaults used here...
'Potential null pointer access' is (correctly) set to Ignore, while 'Potential violation of null specification' is set to Error. This looks a bit confusing to me as a user.

In general we set the default for 'potential' problems to ignore, why is 'Potential violation of null specification' an exception and set to Error? 

Maybe the user was confused about the different defaults for 2 'potential' problems? Maybe the right solution here is to fix the default, or maybe the wording...

Note: I have not done extensive tests to check how many false positives occur in practice for 'Potential violation of null specification', so I don't know what the right default should be.
(In reply to comment #1)
> I am a little confused about the defaults used here...

That's exactly what I'm trying to avoid by this RFE :)

> 'Potential null pointer access' is (correctly) set to Ignore, while 'Potential
> violation of null specification' is set to Error. This looks a bit confusing to
> me as a user.

Did you see my explanation in bug 371940 comment 4?
More to the point: letting the user invest efforts to add specifications to their methods and then letting them lightly and unnoticed violate that specification doesn't make sense to me.
 
> In general we set the default for 'potential' problems to ignore, why is
> 'Potential violation of null specification' an exception and set to Error? 

The problem 'Potential null pointer access' is diagnosed even without enabling null annotations. The default was chosen before I started working on any null analysis.

OTOH, those problems that are only relevant when null annotations are enabled have stronger defaults as to reflect the user's decision to do more against NPE.
 
> Maybe the user was confused about the different defaults for 2 'potential'
> problems? Maybe the right solution here is to fix the default, or maybe the
> wording...

You mean, avoid that both say "potential"? That part actually expresses the same in both situations: flow analysis has found a possibility that null can end up where it shouldn't, but we don't know if that path will ever be taken.
 
> Note: I have not done extensive tests to check how many false positives occur
> in practice for 'Potential violation of null specification', so I don't know
> what the right default should be.

I'd argue that by definition 'Potential violation of null specification' cannot give false positives. If you can't show that you obey to the specification, you're at fault and should really change your program not the preferences :)

You wouldn't want to change the default for "missing cast" to ignore, would you?
(In reply to comment #2)
> Did you see my explanation in bug 371940 comment 4?
Yes, I did.
 
> > In general we set the default for 'potential' problems to ignore, why is
> > 'Potential violation of null specification' an exception and set to Error? 
> 
> The problem 'Potential null pointer access' is diagnosed even without enabling
> null annotations. The default was chosen before I started working on any null
> analysis.
Given the number of false positives I see for 'Potential null pointer access' I think the current default is perfect here :-)

> You mean, avoid that both say "potential"? That part actually expresses the
> same in both situations: flow analysis has found a possibility that null can
> end up where it shouldn't, but we don't know if that path will ever be taken.
This statement appears to contradict with the following one.

> I'd argue that by definition 'Potential violation of null specification' cannot
> give false positives. 
If there are no false positives, then what is so 'potential' about this problem? :-)
(In reply to comment #3)
> > You mean, avoid that both say "potential"? That part actually expresses the
> > same in both situations: flow analysis has found a possibility that null can
> > end up where it shouldn't, but we don't know if that path will ever be taken.
> This statement appears to contradict with the following one.

appearances can be deceiving.


> > I'd argue that by definition 'Potential violation of null specification' cannot
> > give false positives. 
> If there are no false positives, then what is so 'potential' about this
> problem? :-)

It's the combination of "you have a type error" and "you still could be lucky at runtime".

   void foo(@NonNull String val) { ... }

   void bar(@NonNull String ok, @Nullable String nok, boolean flag) {
       String v; // unspecified local variable
       if (flag)
           v = ok;
       else
           v = nok;
       foo(v);
   }

The last line violates the precondition of foo, because v is not @NonNull, neither by declaration nor by flow analysis.
Would it be clearer if we drop the "potential" in this case?
I think *then* users will really complain because they see how on one path ok flows into v and that *would* be OK.

We are not used to this kind of reasoning which results from optional null specifications, because in Java type declarations are not optional. If type declarations were optionsl we'd have the exact same situation with casts: binding an untyped variable to a typed parameter requires a cast, even if on some flows the correct types may be used.
(In reply to comment #4)
In that example 'Potential' maybe makes sense.

But take the example from bug 371940 comment 0.
In foo2 there is a clear violation of null specification, because you are *always* passing a Nullable value to a NonNull argument, which may 'potentially' lead to a problem at runtime. Even the error message says 'Type mismatch' and not 'Potential type mismatch'.
(In reply to comment #5)
> But take the example from bug 371940 comment 0.
> In foo2 there is a clear violation of null specification, because you are
> *always* passing a Nullable value to a NonNull argument, which may
> 'potentially' lead to a problem at runtime. Even the error message says 'Type
> mismatch' and not 'Potential type mismatch'.

There actually is a bug in the implementation. While the wording of those messages is kind-of OK, it's unintended that this problem:
  void foo(@Nullable Object o) {
    bar(o); // Type mismatch here
  }
  void bar(@NonNull Object o) { }
is controlled by the option "Potential violation of null specification".

I made a corresponding note in bug 365859 (JDT/Core).
We can discuss fine tuning of messages etc. in that bug.

But the RFE against UI remains to suggest to users that enabling annotation-based null analysis should be accompanied with also enabling more regular null warnings.
Markus and I discussed this and agree that we need to do something here. Plan is to show a dialog that suggests to use the same severity for (potential) null access as currently set for (potential) null specification (would be 'Error' by default for both).
Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=595c559794cae95bc1abb0f33149e8574bc9bdb1

The dialog will pop up whenever annotation-based null analysis becomes enabled or one of the 4 options is changed and the changed option is a part of the problem. Clicking "Yes" in the dialog always makes both options safe.
Hold on. We only want to sync 'Null pointer access' problems with 'Violation of null specification' problems but not the other way around?

Is that because our defaults are setup that way - 'Null pointer access' problems have less severe defaults than 'Violation of null specification' problems? If this is the case shouldn't we fix the defaults (also) ?
(In reply to comment #9)
> Is that because our defaults are setup that way - 'Null pointer access'
> problems have less severe defaults than 'Violation of null specification'
> problems? If this is the case shouldn't we fix the defaults (also) ?

The difference is: 'Null pointer access' is always analyzed, so a default could at best be "warning", and I hear that even that is too much.
OTOH, 'Violation of null specification' is only analyzed when annotation-based null analysis is activated, so its default is a conditional default. *When* null annotations are enabled there's no point in proposing by a default to ignore 'Violation of null specification'.

What do you want to "fix" here?
(In reply to comment #10)
Current defaults:
1. Null pointer access: Warning
2. Potential null pointer access: Ignore

3. Violation of null specification: Error
4. Potential violation of null specification: Error

Now (1) can be easily set to 'Error' because the analysis is rock solid here and a problem always indicates a problem with the code. In fact in o.e.jdt.ui project it is set to Error.

I still don't like the default for (4) especially after fix for bug 365859. I maintain that there would be false positives, because JDT does not do data correlation analysis. Hence the default here can at best be Warning, but I would say that even that is debatable. I don't see any arguments to set the default for (4) to be more severe than (2). (IMHO, the default for (4) should be Ignore)

This bug arose because a user was confused by JDT's defaults, and we have not really fixed that. Adding a dialog to work around the bad defaults still looks wrong to me and probably opens a can of worms. Tomorrow someone can open a bug that when (1) is set to Ignore, but (2) is set to Error, JDT does not warn of the discrepancy with a dialog.
(In reply to comment #11)
> I still don't like the default for (4) especially after fix for bug 365859.

OK, so I propose to keep that discussion in bug 365859.
I'll be there, shortly.
(In reply to comment #9)
> Hold on. We only want to sync 'Null pointer access' problems with 'Violation of
> null specification' problems but not the other way around?
> 
> Is that because our defaults are setup that way - 'Null pointer access'
> problems have less severe defaults than 'Violation of null specification'
> problems? If this is the case shouldn't we fix the defaults (also) ?

The linking is as desired and as Stephan said, let's not abuse this bug to discuss the defaults ;-)
