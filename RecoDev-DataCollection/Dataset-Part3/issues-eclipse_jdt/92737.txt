I20050420 + ZRH plug-ins of 0426

(see also bug 92736)

- have this code (caret @ |)

import java.util.List;

class WildcardQuickFix {
	void n(Map<? super Number, String> map) {
		Object n= new Integer(3);
		map.put(n, null);|
	}
}

- quick fix 'cast argument ...' or 'change type...'

Note: the quick fix label is wrong (but this will be fixed by not proposing a
wildcard type)

> expected: 

map.put((Number) n, null);|

< actual:

map.put((? super Number)n, null);

The quick fix should propose the *lower* bound of the parameter type.

Note: same for 'change type' quick fix.. In general, we should never propose
wildcard types, but always the upper bound of declared return types and the
lower bound of parameter types / left-hand-sides.

I20050420 + ZRH plug-ins of 0426

(see also bug 92736)

- have this code (caret @ |)

import java.util.List;

class WildcardQuickFix {
	void n(Map<? super Number, String> map) {
		Object n= new Integer(3);
		map.put(n, null);|
	}
}

- quick fix 'cast argument ...' or 'change type...'

Note: the quick fix label is wrong (but this will be fixed by not proposing a
wildcard type)

> expected: 

map.put((Number) n, null);|

< actual:

map.put((? super Number)n, null);

The quick fix should propose the *lower* bound of the parameter type.

Note: same for 'change type' quick fix.. In general, we should never propose
wildcard types, but always the upper bound of declared return types and the
lower bound of parameter types / left-hand-sides.
Martin, comments ?
fixed for 20050509-2010
