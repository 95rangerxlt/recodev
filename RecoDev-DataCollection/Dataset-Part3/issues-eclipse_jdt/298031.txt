When a class extends a binary type annotated with @RunWith, the binary type has no source attachment, and the user selects the compilation unit -> Run As -> JUnit Test, a dialog appears that says no test class can be found.

When the class itself is selected, then the class is recognized as a test class.  Similarly, when a source attachment is added, the test class can be found.

When a class extends a binary type annotated with @RunWith, the binary type has no source attachment, and the user selects the compilation unit -> Run As -> JUnit Test, a dialog appears that says no test class can be found.

When the class itself is selected, then the class is recognized as a test class.  Similarly, when a source attachment is added, the test class can be found.
Created attachment 154626
test project that exhibits this behavior
Steps to reproduce:

1. import the attached project.
2. make sure that stacktest.jar has no source attachment
3. select StackSub.java compilation unit in the default package
4. Run As -> JUnit test
5. A dialog appears: "No JUnit tests found"

6. Right click on the class StackSub  Run As -> JUnit test
7. JUnit runs (even though it has an error as expected---this shows that the test class was found)

8. Now add the source attachment stacktest-sources.zip
9. select StackSub.java Run As -> JUnit test
10. Same behavior as #7

Although this is a trivial example, we are coming across it when people are trying to use the spock framework: http://code.google.com/p/spock/ 

I believe that the problem is from org.eclipse.jdt.internal.junit.launcher.JUnit4TestFinder$AnnotationSearchRequestor.acceptSearchMatch() 
This method tentatively accepts a search match, but only if the nameRange of the search match is valid.  However, when there is no source attachment, the name range is always -1 and hence the comparison fails.

Perhaps doing an extra check here would solve this bug (ie- if nameRange == -1, then the always accept the search match).  I can submit a patch for this.
I can reproduce the issue and confirm the diagnostic => move to JDT/UI
Possibly related to https://bugs.eclipse.org/bugs/show_bug.cgi?id=175582
If I submit a patch, would you be willing to accept it?
> If I submit a patch, would you be willing to accept it?

No, because there's a better solution ;-). The check against the name range is useless, so I completely removed it in HEAD. Since bug 204682 was fixed, the search now only reports references in annotations, and that works for source and binary references.

Thanks for the test case and the concrete steps to reproduce. I could even use your Jar in the regression test.

P.S. If we would have added a check for an invalid source range, the right solution would have been to use org.eclipse.jdt.core.SourceRange.isAvailable(ISourceRange).
*** Bug 175582 has been marked as a duplicate of this bug. ***
