Consider the following two inferfaces:

public interface One
{
   void put(String x);
}
public interface Two
{
  void put(Integer i);
}

If there is a class implementing both interfaces rename of the method put() in 
One will also rename put() in Two, e.g.

public class TestClass implements One, Two
{
  public void put(String x)
  {}

  public void put(Integer i)
  {}
}

Renaming One.put() -> One.putString() has the following unexpected result:

public interface One
{
   void putString(String x);
}
public interface Two
{
  void putString(Integer i); // oops!
}
public class TestClass implements One, Two
{
  public void putString(String x)
  {}

  public void putString(Integer i) // oops!
  {}
}

Greetings,
Thorsten

Consider the following two inferfaces:

public interface One
{
   void put(String x);
}
public interface Two
{
  void put(Integer i);
}

If there is a class implementing both interfaces rename of the method put() in 
One will also rename put() in Two, e.g.

public class TestClass implements One, Two
{
  public void put(String x)
  {}

  public void put(Integer i)
  {}
}

Renaming One.put() -> One.putString() has the following unexpected result:

public interface One
{
   void putString(String x);
}
public interface Two
{
  void putString(Integer i); // oops!
}
public class TestClass implements One, Two
{
  public void putString(String x)
  {}

  public void putString(Integer i) // oops!
  {}
}

Greetings,
Thorsten
This got fixed for M3.
