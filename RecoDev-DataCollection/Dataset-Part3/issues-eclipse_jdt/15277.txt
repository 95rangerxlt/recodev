If you have a test suite that is also a test case (done to allow cascading tests), and recreate the 
test suite, you're allowed to add the suite to itself. This results in a recursive call to 
.suite(), which ends up causing a stack overflow when run.

I'm not too sure on this, but I 
believe previously in this situtation the suite was added to itself a test case (new Suite(class) 
as opposed to class.suite()), which prevented this from happening. I do prefer this new 
behaviour, as it makes chaining suites together much easier (now if it only searched sub-packages 
for suites). This one special case just needs to be handled better.

If you have a test suite that is also a test case (done to allow cascading tests), and recreate the 
test suite, you're allowed to add the suite to itself. This results in a recursive call to 
.suite(), which ends up causing a stack overflow when run.

I'm not too sure on this, but I 
believe previously in this situtation the suite was added to itself a test case (new Suite(class) 
as opposed to class.suite()), which prevented this from happening. I do prefer this new 
behaviour, as it makes chaining suites together much easier (now if it only searched sub-packages 
for suites). This one special case just needs to be handled better.
If that wasn't the previous behaviour, just ignore my rambling. It's late...
Additional potentional bad behaviour: the wizard shows abstract TestCases, which if added 
results in a build failure.
Created attachment 3567
patch

fixed - you get a warning now

also fixed missing resource strings ("{0} class selected", "{0}" classes
selected)

please enter a separate report for the 'abstract' problem 
(with an example code exhibiting the misbehavior)
released path
