I'm a long time Eclipse user, and I just recently installed Eclipse 3.2 M4.  I noticed something I never noticed before, and it is pretty annoying.

Whenever I'm editing near the top or bottom of the editor window, and somekind of code completion happens, the editor will decide that the piece of code I'm working on needs to be centered on the screen.  This is really annoying as it takes me a second to find out what happened and where the code is I was just editing (I donot use "highligh current line" so all I got to go on is the cursor, also I edit files on a fairly large screen with 48 visible lines of source code, so the jump can be quite large).

Steps to reproduce:

1) Take a sufficiently large Java source file, scroll to somewhere in the middle of file.  

2) Edit a line (or add a new line) at the very top or bottom of the editor and do something that triggers code completion, for example, let it complete a method name, something like "Thread.curr" (<ctrl+space> optional) <enter>

3) Editor inserts "Thread.currentThread()" and scrolls the text (it doesn't seem to center the text, but it definitely jumps by atleast 10-20 lines).

Expected behaviour: the editor should never scroll automatically, unless I press enter, and even then it should only scroll one line at the most.

I cannot find an option to turn this feature of (it seems to be a new feature of Eclipse, as this has never annoyed me before).

I'm a long time Eclipse user, and I just recently installed Eclipse 3.2 M4.  I noticed something I never noticed before, and it is pretty annoying.

Whenever I'm editing near the top or bottom of the editor window, and somekind of code completion happens, the editor will decide that the piece of code I'm working on needs to be centered on the screen.  This is really annoying as it takes me a second to find out what happened and where the code is I was just editing (I donot use "highligh current line" so all I got to go on is the cursor, also I edit files on a fairly large screen with 48 visible lines of source code, so the jump can be quite large).

Steps to reproduce:

1) Take a sufficiently large Java source file, scroll to somewhere in the middle of file.  

2) Edit a line (or add a new line) at the very top or bottom of the editor and do something that triggers code completion, for example, let it complete a method name, something like "Thread.curr" (<ctrl+space> optional) <enter>

3) Editor inserts "Thread.currentThread()" and scrolls the text (it doesn't seem to center the text, but it definitely jumps by atleast 10-20 lines).

Expected behaviour: the editor should never scroll automatically, unless I press enter, and even then it should only scroll one line at the most.

I cannot find an option to turn this feature of (it seems to be a new feature of Eclipse, as this has never annoyed me before).
I just noticed an even easier way to reproduce this, using "organize imports" short cut Ctrl+Shift+O.

If the cursor is somewhere in the middle of the file, Ctrl+Shift+O behaves as it should, not scrolling the editor.

Position the cursor on the top or bottom line, press Ctrl+Shift+O, and the editor will scroll.

This happens even when nothing changes to the imports.
Ugly. This worked in 3.0 but no longer in 3.1 and newer.
Tom, please investigate.
The issue reported in comment 0 has been the same in 3.1: the editor scrolls if the current edit location is in either the first or last two lines of the view port (see TextViewer::internalRevealRange, bufferZone=2). The only difference in 3.1 is that the bottomIndex (last visible line) of the view port was computed wrong and so the buffer zone at the bottom of the viewer was only one instead of two lines.

I think we could be smarter here: since content assist is almost like typing, we should not scroll except for if the resulting caret location is outside the viewport. TextViewer should probably support a "revealRangeIfAbsolutelyNeeded" method that calls the current reveal implementation if the range is not visible.

Another issue are imports:

A) We should not do any selecting nor revealing if the organize imports action is a no-op. Bug 133147.

B) When code assist adds an import, we should try to keep the caret line stable; currently, we try to keep the top line (first visible line) stable, which results in the caret line being scrolled if an import is added between the top line and the caret line. Filed bug 133146 to track this.

Keeping this bug open with reduced severity for issue in comment 0. Setting target to 3.2, time permitting.
Moving to 3.3. We'll have to revisit our handling of remember/forgetSelection in TextViewer and its decendants.

We should also revist the buffer zone in TextViewer::internalSelectAndReveal.

Too late for both of these.
Fixed in HEAD.
Available in builds > N20060914-0010
*** Bug 79923 has been marked as a duplicate of this bug. ***
