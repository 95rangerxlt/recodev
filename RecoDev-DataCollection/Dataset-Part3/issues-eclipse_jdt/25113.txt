I want to have my com.* imports sorted and grouped by company name like :

import com.misc.class1;

import com.foreigncompany.class1;
import com.foreigncompany.class2;

import com.mycompany.class1;
import com.mycompany.class2;

In the preference editor I have added 

com
com.foreigncompany
com.mycompany

But after 'Organize Imports' all com imports are in one large block,
without seperators and in the wrong order 

import com.foreigncompany.class1;
import com.foreigncompany.class2;
import com.misc.class1;
import com.mycompany.class1;
import com.mycompany.class2;

I seems that Organize Imports only repects the top level package name,
this happens with Eclipse 2.0, 2.01 and a fresh installed M2

I want to have my com.* imports sorted and grouped by company name like :

import com.misc.class1;

import com.foreigncompany.class1;
import com.foreigncompany.class2;

import com.mycompany.class1;
import com.mycompany.class2;

In the preference editor I have added 

com
com.foreigncompany
com.mycompany

But after 'Organize Imports' all com imports are in one large block,
without seperators and in the wrong order 

import com.foreigncompany.class1;
import com.foreigncompany.class2;
import com.misc.class1;
import com.mycompany.class1;
import com.mycompany.class2;

I seems that Organize Imports only repects the top level package name,
this happens with Eclipse 2.0, 2.01 and a fresh installed M2
its a bug. as a workaround remove the 'com' from your list (replace it with 
com.misc).
*** Bug 25773 has been marked as a duplicate of this bug. ***
Some things should just work.  Such as features that have an entire preference 
page dedicated to them.

Here comes the fix.
Created attachment 2473
Fixes organize imports

2 changes:
Common prefix matching should ignore partial name matches.  For example,
java.applet was being matched with java.awt, when it should only match "java".

A complete match is always the best.

This patch was made on 2.0.1, so you should DIFF it against that codebase.
I'm confused about why partial matches are considered at all.
For example, If my preference has java.util, but not "java", and I import 
java.awt.Foo, why is this matched with java.util? It is not match.

IMO, the preference prefix must appear entirely in the name being matched.  
Then a lot of other code could be removed.
your patch breaks the tests. (ImportOrganizeTest.test3)

I have to look into it again: I am aware of the problem, I already spend a day 
already for 2.0 but had to roll back as other things got messed up.

issues
- match in the structure in an existing, unordered list of imports
 (addPreferenceOrderHolders)
- adding new imports to the existing structure

Believe me, the fix is non-trivial. I guess my mistake is that I'm trying to 
use the same matching algorithm for 2 problems.

If you want to try a second attempt, plean take the code from HEAD.
The following code that I added in:
private boolean isBetterMatch(...)
might be causing the problem, and can be removed without affecting my "tests".

<REMOVE>
//The best match is a complete match as well, not partial.
if (bestName.length() == bestMatchLen)
    return false;
</REMOVE>

I would try running your test myself, but it does nothing when I launch it.  I 
have PDE.junit installed, and nothing happens when I launch, just the JUnit 
View opens

Looks like a junit.pde launcher problem, have a look at the .log file of the 
test-workbench (configured on the pde launcher page). Note that your workspace 
must be complete and contain org.junit.

The partial matching is not enough. Not all packages are covered by packages, 
having java.util and java.net as categories, a newly added java.awt must be 
placed next to the package with the closest match (java.net).

I'm working on the PR right now...




I fixed my code so that it passes all tests. The problem was with how you break 
ties of equal length matches.  Since my change does *not* consider '.' to be 
part of a match, sameMatchLenTest(...) was comparing different characters. I 
changed it so that it also ignore '.', and goes to the next character after the 
period.

I still feel that your last statement: "java.awt must be placed next to the 
package with the closest match (java.net)" is wrong.  "java.awt" does not 
match "java.net" any better than it matches "java.util". It doesn't match 
either and should be placed in the "no matches found" section. alphabetic 
proximity of packages is purely coincidental.
Created attachment 2494
passes test3 now
you can't ignore the partial matches:
e.g when you add imports to a file with existing imports: Find the import with 
the best match add it next to it. You can not make any assumtions of the order 
of the existing imports, and the imports also don't have to be covered by 
categories.
e.g. existing

com.mypackage
java.util.Vector

adding
 com.myotherpackage
->
com.mypackage
com.myotherpackage
java.util.Vector

I don't think you would accept that com.myotherpackage is added to the end, in 
a 'other' box.


the second attachment only contains the class files
ups, sorry, the result of my example should be

com.myotherpackage
com.mypackage
java.util.Vector

o is smaller that p
Created attachment 2495
this one has source

Sorry about not attaching the source.  I was using a different 2.1M3 workspace,
and I forgot that my export settings would be different.

Most of the time there will be no difference, because the package names would
most likely be:
com.acme.my.package
com.acme.my.otherpackage
java.util

But, what you are describing is a separate problem. import modification from
code assist does not preserve the organization, and I have to invoke organize
imports again. For example, my current imports are:

java.awt.Panel

java.math.BigInteger

which correspond to my current organize import preferences:

1)java.awt
2)java

Now, if I add "java.applet.Applet", it gets matched with the existing
"java.awt", but if I then organize imports, it gets matched with "java.math",
because they both fall under "java".

The solution to this problem is to NOT use the exact existing import statements
when finding the place to insert a new import. INSTEAD, take the list of
existing imports, and for each import, map it to the best import in the
organize Imports preferences. This way, "java.math" would get mapped to "java",
and "java.applet" would correctly get grouped with "java.math".
fixed > 20021125

added test cases
  ImportOrganizeTest.test_bug25113 (comment #1)
  ImportOrganizeTest.test_bug25773

  AddImportTest.testAddImports_bug25113 (comment #14)

+ other tests


Thanks Randy for pushing ;-)

