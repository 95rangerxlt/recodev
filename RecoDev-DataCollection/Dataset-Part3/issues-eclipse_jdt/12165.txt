Build M4 Candidate 20020321
How to reproduce:
Start Eclipse
Open a java file (large enough to require scrolling)
Press the 'arrow down' key long enough to start the multiple repeat. (1 to 2 
seconds). Wait for scrolling to occur.
Release the 'arrow down' key.
There are now 2 highligted current lines. The original one which has scrolled 
up with the text. And the new one at the bottom.

Same thing happens when scrolling up.

Let me know if you need more info to reproduce. It is easier to show than to 
write down.

Build M4 Candidate 20020321
How to reproduce:
Start Eclipse
Open a java file (large enough to require scrolling)
Press the 'arrow down' key long enough to start the multiple repeat. (1 to 2 
seconds). Wait for scrolling to occur.
Release the 'arrow down' key.
There are now 2 highligted current lines. The original one which has scrolled 
up with the text. And the new one at the bottom.

Same thing happens when scrolling up.

Let me know if you need more info to reproduce. It is easier to show than to 
write down.
I tried this on my XP box and could not make it happen on scroll down, but it 
*did* happen on mouse up. Talk to Christophe if you need help replicating it.

Looks like a problem with the Java "current line" highlight.

A preliminary analysis: This only happens if start of auto repeat of arrow down 
and auto scrolling overlap. To reproduce:
- resize the window so that the editor shows only a half line at the bottom
- place the cursor on the last fully visible line
- press arrow down so long that auto repeat just started and release again 
(only a couple of line should have been revealed)
After that, the previously invisible portion of the originally partially 
visible line is still drawn in the line highlighting color. Note it does not 
happen, when auto repeat started before autoscrolling is necessary. It seems 
that the overlap results in the loss of a key event.
The pattern I am seeing is that if hitting the arrow key causes a scroll, then 
if an auto-scroll fires (as Kai indicated), you will see the problem. If you 
release the key before the auto-scroll happens, it displays correctly.

Given this, the problem is likely related to the following SWT behavior: Key 
repeat is modelled as multiple key down events (for the same key) without 
intervening key up events. 

Aside: I can sometimes make this happen on arrow *up* events as well. It seems 
like I can only do it, however, after the window has been scrolled using the 
mouse. If the problem is related to lines being partially visible, this would 
point at the possibility that the top line of the editor is not quite aligned 
with the top corner of the editor after mouse scrolling happens. (not 
particularly relevant, just something to consider)
I think this would be fixed if you did the highlight redraw during KeyDown, not 
KeyUp.
Doing the redraw during KeyUp looks bad in general because the highlight always 
lags behind the caret change. This is especially bad when the line change 
scrolls the widget as you now see a split line highlight (the partially visible 
new line and the old line lineheight).
You only really notice this when you change lines one at a time. It looks fine 
when you press and hold down a key and auto repeat kicks in (except that you 
then get the cheese).
So if you change the line highlight to occur during KeyDown you'd fix two 
problems.
fixed: - cheese production <g>
       - line number caching to reduce redraws 
         prevents flickering of line background under motif
