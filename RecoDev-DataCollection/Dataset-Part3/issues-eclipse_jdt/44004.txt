build I20030930

- had interface:
interface IGotoMarker {
  void gotoPosition(IMarker);
}

- and reference:
class Foo {
   void gotoMarker(IMarker);
   class Bar implements IGotoMarker {
	public void gotoPosition(IMarker marker) {
		gotoMarker(marker);
	}
}

Note that gotoPosition is calling the outer gotoMarker.

- Renamed IGotoMarker.gotoPosition to gotoMarker.
- The refactoring dialog did not indicate any problems.
- Result was:
class Foo {
   void gotoMarker(IMarker);
   class Bar implements IGotoMarker {
	public void gotoMarker(IMarker marker) {
		gotoMarker(marker);
	}
}

- The inner gotoMarker is now calling itself, not the outer gotoMarker.

build I20030930

- had interface:
interface IGotoMarker {
  void gotoPosition(IMarker);
}

- and reference:
class Foo {
   void gotoMarker(IMarker);
   class Bar implements IGotoMarker {
	public void gotoPosition(IMarker marker) {
		gotoMarker(marker);
	}
}

Note that gotoPosition is calling the outer gotoMarker.

- Renamed IGotoMarker.gotoPosition to gotoMarker.
- The refactoring dialog did not indicate any problems.
- Result was:
class Foo {
   void gotoMarker(IMarker);
   class Bar implements IGotoMarker {
	public void gotoMarker(IMarker marker) {
		gotoMarker(marker);
	}
}

- The inner gotoMarker is now calling itself, not the outer gotoMarker.
(Good thing we used preview <g>).

Found another case, on the same refactoring.
However, it did correctly give an error warning for this case before the 
preview.  The warning was that I already had a method by that name (correct).

before:
class Foo implements IGotoMarker {
  public void gotoMarker(IMarker) {
     // do something
  }

  public void gotoPosition(IMarker marker) {
    gotoMarker(marker);
  }
}

after:
class Foo implements IGotoMarker {
  public void gotoMarker(IMarker) {
     // do something
  }

  public void gotoMarker(IMarker marker) {
    gotoMarker(marker);
  }
}
   
In 3.0 the first case issues an error as well. In general refactoring does 
allow to continue the refactoring even if we detect an error. If an error is 
issued this is a clear indication that the code might be broken.


