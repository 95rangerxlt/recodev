JUnitLaunchConfiguration.java, starting at line 127: 

if (BootLoader.inDevelopmentMode()) {
  // assumption is that the output folder is called bin!
  List junitEntries= new ArrayList();
  junitEntries.add(Platform.asLocalURL(new URL(url, "bin")).getFile());
//$NON-NLS-1$

If the plug-in is in the workspace as binary, or with linked content only, the
bin folder does not exist, and line 130 quits with an IOException.

JUnitLaunchConfiguration.java, starting at line 127: 

if (BootLoader.inDevelopmentMode()) {
  // assumption is that the output folder is called bin!
  List junitEntries= new ArrayList();
  junitEntries.add(Platform.asLocalURL(new URL(url, "bin")).getFile());
//$NON-NLS-1$

If the plug-in is in the workspace as binary, or with linked content only, the
bin folder does not exist, and line 130 quits with an IOException.
The jave file in question is coming from jdt.junit.
Ping Pong back to JDT :-)
correct when the bin folder isn't found, then the JAR files should be tried, 
so that binary projects are handled properly.

The assumption on "bin" is OK, since the project structure of the jdt.junit 
plug-in is given. 

fixed
