Created attachment 216831
Fix for eclipse.jdt.debug repo

executionEnvironments contributions should be sorted. Callers of IExecutionEnvironmentsManager.getExecutionEnvironments() which present the contributions in the UI should not reorder them.

Currently, EEs are sorted in various ways (by name, by ID, etc.), which is confusing.

The patch fixes the problems in the eclipse.jdt.debug repo.
jdt.ui and pde should follow up after this bug is fixed.

Created attachment 216831
Fix for eclipse.jdt.debug repo

executionEnvironments contributions should be sorted. Callers of IExecutionEnvironmentsManager.getExecutionEnvironments() which present the contributions in the UI should not reorder them.

Currently, EEs are sorted in various ways (by name, by ID, etc.), which is confusing.

The patch fixes the problems in the eclipse.jdt.debug repo.
jdt.ui and pde should follow up after this bug is fixed.
Created attachment 217555
alternate patch

I agree we should present the EEs to the users in a consistent way. But I think we still need to sort the collection the manager holds because someone (not JDT) can contribute an EE.

The attached patch sorts the contributions in the manager so everyone calling #getExecutionEnvironments gets the same sorted array, it also includes the bits from Markus' patch that removes the sorting from other places in debug.
Sorting by ID makes the order predictable, but is it also a good order?

CDC-1.0/Foundation-1.0 - CDC 1.0, Foundation 1.0
CDC-1.1/Foundation-1.1 - CDC 1.1, Foundation 1.1
J2SE-1.2 - Java 2 Platform, Standard Edition 1.2
J2SE-1.3 - Java 2 Platform, Standard Edition 1.3
J2SE-1.4 - Java 2 Platform, Standard Edition 1.4
J2SE-1.5 - Java 2 Platform, Standard Edition 5.0
JRE-1.1 - Java Runtime Environment 1.1
JavaSE-1.6 - Java Platform, Standard Edition 6.0
JavaSE-1.7 - Java Platform, Standard Edition 7.0
OSGi/Minimum-1.0 - Minimum environment to run the OSGi framework 1.0
OSGi/Minimum-1.1 - Minimum environment to run the OSGi framework 1.1
OSGi/Minimum-1.2 - Minimum environment to run the OSGi framework 1.2

As you can see, this order has quite a few issues.

Unfortunately IExtensionPoint#getConfigurationElements() doesn't specify an order. We should first try to fix that specification. Hopefully the implementers are more interested in a stable architecture than the stubborns behind Class#getDeclaredMethods().

I couldn't find a bug for getConfigurationElements(), but I found bug 137483 and the hack here (which seems to know more than the Javadoc tells):
org.eclipse.ui.internal.registry.RegistryReader#orderExtensions(IExtension[])
(In reply to comment #2)
> Sorting by ID makes the order predictable, but is it also a good order?
> 

No, not particularly, but in the interim we could keep the id-based sorting as it was the most common sorting seen for the EEs.

> Unfortunately IExtensionPoint#getConfigurationElements() doesn't specify an
> order. We should first try to fix that specification. Hopefully the
> implementers are more interested in a stable architecture than the stubborns
> behind Class#getDeclaredMethods().

We could do that, but even if the platform did guarantee the ordering of contribution items as they appear in XML, a merge would still have to happen for all the contributions in IExtensionPoint, and how would we tell the platform how we want them sorted (or would we)?

> org.eclipse.ui.internal.registry.RegistryReader#orderExtensions(IExtension[])

Yeah I found that when I was looking to see if the platform offered any kind of guarantee on the ordering.
(In reply to comment #2)
> Unfortunately IExtensionPoint#getConfigurationElements() doesn't specify an
> order. We should first try to fix that specification.

Filed bug 383325, since the sorting by ID really appears random to the user.

I don't think there's a good way to merge across multiple contributors, so I'd just sort by getNamespaceIdentifier().
I still think the best bet would be to sort by id - if we sorted by namespace we could (in theory) have an EE named 'An environment' that could appear at the end of the list presented to the user if its namespace sorted after 'org.eclipse.jdt.launching'.

I pushed the fix to: http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=9c57d17e15f2d9feffa5f13e04aeb8ef7d92827a
(In reply to comment #5)
I don't understand that reasoning. Why do you prefer an outright *wrong* ordering? The internal ID has not been designed as a sort key, so it should not be abused as such.

The problem with multiple contributions is not a real problem. And if it turns out to be one in the future, we can fix it then.

Reopening, since the original problem has not been addressed.
(In reply to comment #6)
> (In reply to comment #5)
> I don't understand that reasoning. Why do you prefer an outright *wrong*
> ordering? The internal ID has not been designed as a sort key, so it should not
> be abused as such.
> 

The id *is* intended to been seen and used. See IExecutionEnvironment#getId() and the API documentation from the executionEnvironments extension point:

"a unique identifier for this execution environment that is presented to the user - for example, "J2SE-1.4"."

> The problem with multiple contributions is not a real problem. And if it turns
> out to be one in the future, we can fix it then.
> 

Or, we could fix it now by sorting by the strings that the users actually see rather than forcing contributors to sort XML entries and then trying to merge those based on a scheme end-users don't know about (which has the potential to not be sorted alphabetically, from the end-user perspective).
Pushed a doc update to IExecutionEnvironmentManager to mention that the entries are sorted: http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=fbd64cbeb67cf4f761f88c7d646c0992eac602d4

Re-closing as fixed. The EE manager now returns a consistent sorted collection when calls to #getExecutionEnvironments are made.
