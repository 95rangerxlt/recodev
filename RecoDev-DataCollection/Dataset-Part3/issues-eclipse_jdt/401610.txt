BETA_JAVA8:
-----------

While the broader issue of overload resolution is the subject matter
of bug 400871, we can already enable lambda/reference expressions in
non-overloaded scenarios : i.e where we have just a single candidate
method that is both potentially applicable and applicable under one
of strict, loose or variable arity invocation. This would enable us
to compile the following program which fails to compile as of now:

// ---
interface I {
    void foo();
}
public class X {

  void foo(I i) {
    System.out.println("foo");
  }
	
  public static void main(String[] args) {
    new X().foo(()->{}); // incorrect complaint about non-functional interface.
  }
}
// -----

This solution would also outline how the concern raised in
https://bugs.eclipse.org/bugs/show_bug.cgi?id=382701 could be
readily addressed and can serve as a sketch for how the overall
overload resolution problem is planned to be tackled.

BETA_JAVA8:
-----------

While the broader issue of overload resolution is the subject matter
of bug 400871, we can already enable lambda/reference expressions in
non-overloaded scenarios : i.e where we have just a single candidate
method that is both potentially applicable and applicable under one
of strict, loose or variable arity invocation. This would enable us
to compile the following program which fails to compile as of now:

// ---
interface I {
    void foo();
}
public class X {

  void foo(I i) {
    System.out.println("foo");
  }
	
  public static void main(String[] args) {
    new X().foo(()->{}); // incorrect complaint about non-functional interface.
  }
}
// -----

This solution would also outline how the concern raised in
https://bugs.eclipse.org/bugs/show_bug.cgi?id=382701 could be
readily addressed and can serve as a sketch for how the overall
overload resolution problem is planned to be tackled.
Created attachment 227507
Work in progress

Not fully polished/tested, but basically the solution is in place.
I'll split this ER into two - one each for lambdas and reference expressions
and retain the present one for lambdas. Adjusted the title accordingly.
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=df9615ffbbc7235a218c4e9aa88ba85075714875

Recording for posterity: A lot of discussion that should have happened 
here ended up happening here: https://bugs.eclipse.org/bugs/show_bug.cgi?id=400874.

Finally I implemented the solution outlined in https://bugs.eclipse.org/bugs/show_bug.cgi?id=400874#c18 to handle having
to type check the lambda method multiple times.

We have a very clean solution now - though perhaps not the best perforing
solution from the set of solutions. I have raised a follow up bug to
address performance improvement explorations separately: https://bugs.eclipse.org/bugs/show_bug.cgi?id=401769
.
Additional tests and some clean up released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=77ac300d6d124e9b071b4e62fab3a583e6eecdc4

For the record, this fix allows lambda methods to feature even in
overloaded situations as long as there is only one applicable
method. i.e most specific method search is yet to be implemented
for lambdas.
