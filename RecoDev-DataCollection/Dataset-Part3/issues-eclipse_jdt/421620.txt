BETA_JAVA8

Wrong compile error if a throws declaration doesn't use the same TYPE_USE annotations as a declared variable of the thrown exception's type. If I remove the declaration of field 'e1', then the code compiles.


class E1 extends Exception {
    private static final long serialVersionUID = 1L;
}

@Target(ElementType.TYPE_USE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@interface NonCritical { }

public class Exceptions {
    @NonCritical E1 e1; // looks like this field's type binding is reused
    
//wrong error:
//Cannot use the parameterized type E1 either in catch block or throws clause
    void f1 (int a) throws /*@NonCritical*/ E1 {
        throw new E1();
    }
    
    void foo() {
        try {
            f1(0);
//wrong error: Unreachable catch block for E1.
//             This exception is never thrown from the try statement body
        } catch (@NonCritical final RuntimeException | @NonCritical E1 ex) {
            System.out.println(ex);
        }
    }
}

BETA_JAVA8

Wrong compile error if a throws declaration doesn't use the same TYPE_USE annotations as a declared variable of the thrown exception's type. If I remove the declaration of field 'e1', then the code compiles.


class E1 extends Exception {
    private static final long serialVersionUID = 1L;
}

@Target(ElementType.TYPE_USE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@interface NonCritical { }

public class Exceptions {
    @NonCritical E1 e1; // looks like this field's type binding is reused
    
//wrong error:
//Cannot use the parameterized type E1 either in catch block or throws clause
    void f1 (int a) throws /*@NonCritical*/ E1 {
        throw new E1();
    }
    
    void foo() {
        try {
            f1(0);
//wrong error: Unreachable catch block for E1.
//             This exception is never thrown from the try statement body
        } catch (@NonCritical final RuntimeException | @NonCritical E1 ex) {
            System.out.println(ex);
        }
    }
}
(In reply to Markus Keller from comment #0)
> BETA_JAVA8
> 
> Wrong compile error if a throws declaration doesn't use the same TYPE_USE
> annotations as a declared variable of the thrown exception's type. If I
> remove the declaration of field 'e1', then the code compiles.

Thanks for catching this.

>     @NonCritical E1 e1; // looks like this field's type binding is reused

Actually, the bindings are computed correctly, the problem stems from having
"overloaded" ASTNode.Bit24:

	long IsBoundParameterizedType = ASTNode.Bit24; // PTB only.
	
	long HasAnnotatedVariants = ASTNode.Bit24; // TVB, STB

These are supposed to be applicable only to disjoint type of bindings so
overloading is OK, but we cannot let TypeBinding.isBoundParameterizedType()
speak for every type in the hierarchy then.

Fix is trivial, will follow shortly.
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=e282ddab29d814ffa1b5ad524aead5edb8a36955

When https://bugs.eclipse.org/bugs/show_bug.cgi?id=418981 is fixed,
ParameterizedTypeBinding's can also have AnnotatedVariants, so the
Bit24 cannot be overloaded anymore as there will be a clash - I'll
add a note on that bug.
