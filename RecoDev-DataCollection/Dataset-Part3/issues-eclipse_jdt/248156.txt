Build ID: I20080617-2000

Steps To Reproduce:
1. Using http://wiki.netbeans.org/FaqApt ...
2. Create a project with ann/Handlable.java, proc/HandlableProcessor.java, and META-INF/services/javax.annotation.processing.Processor
3. Compile project and export as Jar file
4. Create another project which uses the produced Jar as its annotation processor and add demo/Main.java
5. Note that Main.java does not compile.

More information:
Notes...  It would be nice to be able to use the first project directly (as the source for annotation processing) rather than indirectly via a Jar file.  Meanwhile, the example doesn't compile because the Eclipse compiler seems incomplete.

To see this, you need to start Eclipse with "-consolelog -debug".  I'm digressing again, but it would be nice not to have to do this -- it would be preferable to have the errors show up in Eclipse itself rather than in the terminal that launched it.

The first error you get is:
java.lang.UnsupportedOperationException: Not yet implemented
	at org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeOutputJavaFileObject.toUri(IdeOutputJavaFileObject.java:104)
	at proc.HandlableProcessor.process(HandlableProcessor.java:36)

This corresponds to "f.toUri()" in the printMessage call.  Commenting that out gives:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.apt.model.Factory.newTypeMirror(Factory.java:384)
	at org.eclipse.jdt.internal.compiler.apt.model.Factory.newTypeMirror(Factory.java:389)
	at org.eclipse.jdt.internal.compiler.apt.model.ElementImpl.asType(ElementImpl.java:50)
	at proc.HandlableProcessor.process(HandlableProcessor.java:43)

which corresponds to "e.asType()".

Build ID: I20080617-2000

Steps To Reproduce:
1. Using http://wiki.netbeans.org/FaqApt ...
2. Create a project with ann/Handlable.java, proc/HandlableProcessor.java, and META-INF/services/javax.annotation.processing.Processor
3. Compile project and export as Jar file
4. Create another project which uses the produced Jar as its annotation processor and add demo/Main.java
5. Note that Main.java does not compile.

More information:
Notes...  It would be nice to be able to use the first project directly (as the source for annotation processing) rather than indirectly via a Jar file.  Meanwhile, the example doesn't compile because the Eclipse compiler seems incomplete.

To see this, you need to start Eclipse with "-consolelog -debug".  I'm digressing again, but it would be nice not to have to do this -- it would be preferable to have the errors show up in Eclipse itself rather than in the terminal that launched it.

The first error you get is:
java.lang.UnsupportedOperationException: Not yet implemented
	at org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeOutputJavaFileObject.toUri(IdeOutputJavaFileObject.java:104)
	at proc.HandlableProcessor.process(HandlableProcessor.java:36)

This corresponds to "f.toUri()" in the printMessage call.  Commenting that out gives:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.apt.model.Factory.newTypeMirror(Factory.java:384)
	at org.eclipse.jdt.internal.compiler.apt.model.Factory.newTypeMirror(Factory.java:389)
	at org.eclipse.jdt.internal.compiler.apt.model.ElementImpl.asType(ElementImpl.java:50)
	at proc.HandlableProcessor.process(HandlableProcessor.java:43)

which corresponds to "e.asType()".
I think there are three separate bug complaints here:

1. JavaFileObject.toUri() is not implemented.

2. NPE in Element.asType() when running NetBeans example processor.

3. Output from Messager.printMessage(ERROR, ...) not showing up in Problems pane.

I'll clone this bug and retitle accordingly.
Retitling this bug report to aim it at the unimplemented method.  Bug 248160 captures the problem with error output not showing up, and bug 248163 captures the NPE in Element.asType().
Implemented for non-source files; still need to implement for Java source files.
It will not be possible to implement this correctly for Java source files; the best we can do is an approximation.  

The reason is that in the IDE, calling Filer.createSourceFile() does not actually cause a file to be created at that time; the file is not created until a writer has been obtained, written to, and closed.  he best we can hope to do is come up with a URI that will identify the resource when and if it eventually does exist.

Whether this is adequate depends on the processor.  The processor in this case is sample code that is just using the URI for a status message, so it would suffice.
Fixed in HEAD.  As noted, although a URI is provided, attempting to use it before the file has been written and closed will not succeed.
