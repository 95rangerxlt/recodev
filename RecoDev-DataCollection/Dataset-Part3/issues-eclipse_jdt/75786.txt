3.1 M2

from bug 44961:

My brace style in the code formatter is set to the 'Whitesmiths' style which
indents curly braces to the level of the code that they surround.  Like so:

if (condition)
    {
    // do something!
    }

In Eclipse 3.0.1, when typing the braces for the 'if' the braces would appear
indented as above.  But in Eclipse 3.1M2, the braces always move back to the
level of the 'if'.  Like so:

if (condition)
{
    // do something!
}

I've noticed that the same thing happens for for loops while loops, else blocks,
try blocks, catch blocks, and switch blocks (although the try, catch and switch
blocks weren't working in 3.0.1).

I know that my formatting settings are correct because everything looks fine
when I invoke the code formatter.

3.1 M2

from bug 44961:

My brace style in the code formatter is set to the 'Whitesmiths' style which
indents curly braces to the level of the code that they surround.  Like so:

if (condition)
    {
    // do something!
    }

In Eclipse 3.0.1, when typing the braces for the 'if' the braces would appear
indented as above.  But in Eclipse 3.1M2, the braces always move back to the
level of the 'if'.  Like so:

if (condition)
{
    // do something!
}

I've noticed that the same thing happens for for loops while loops, else blocks,
try blocks, catch blocks, and switch blocks (although the try, catch and switch
blocks weren't working in 3.0.1).

I know that my formatting settings are correct because everything looks fine
when I invoke the code formatter.
fixed > 20041007
Thank you Tom!
I just checked out build 20041013 for 3.1 and i've noticed a couple more cases
where braces don't automatically indent according to the code formatter
settings.  These are for finally blocks, classes (inner and top level) and
methods that declare exceptions.
I just downloaded 3.1M5a and it's looking great!  However, the brace
autocomplete function (usage described in the description above) still doesn't
honour the formatter settings for the following cases:

1) Methods with a throws clause (public void someMethod() throws Exception)
2) Constructors with throws clauses (public Someclass() throws Exception)
3) Finally blocks (finally)
4) Inner classes (public class Someclass)
5) Static initializers (static)
6) Switch blocks (switch (i))
