When the user opens a JavaEditor, we first do the extremely expensive
calculations necessary to populate non-essential views (type hierarchy,
outliner, etc.) and *then* we open the editor. This is generally a bad idea, but
in cases where the performance of these views is bad (we have 20 minute test
cases), this behavior is killer.

When the user asks to open an editor, we should open the editor first, *then* do
the calculations to populate the associated views. These calculations should not
impede the user's ability to manipulate the editor as usual.

When the user opens a JavaEditor, we first do the extremely expensive
calculations necessary to populate non-essential views (type hierarchy,
outliner, etc.) and *then* we open the editor. This is generally a bad idea, but
in cases where the performance of these views is bad (we have 20 minute test
cases), this behavior is killer.

When the user asks to open an editor, we should open the editor first, *then* do
the calculations to populate the associated views. These calculations should not
impede the user's ability to manipulate the editor as usual.
we should fix the 20 minutes test cases first. 
The activation order is controlled by the platform UI. We cannot put the view 
population in background threads since the JavaModel isn't thread save in 
general.
the killer cases are fixed
