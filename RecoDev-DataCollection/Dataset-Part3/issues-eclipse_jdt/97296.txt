3.1 RC1

Steps to reproduce:
- Create example project
- Open secondary workbench window
- Open in both windows the same file
- Open syntax highlighting preferences from primary workbench window
- Change something and apply

-> Primary highlighting is updated, secondardy not
-> Reopening the secondary editor produces correct highlighting

3.1 RC1

Steps to reproduce:
- Create example project
- Open secondary workbench window
- Open in both windows the same file
- Open syntax highlighting preferences from primary workbench window
- Change something and apply

-> Primary highlighting is updated, secondardy not
-> Reopening the secondary editor produces correct highlighting
- it also happens in a single-window scenario.
- enabling a disabled semantic highlighting is not applied to open editors
- changing an enabled semantic highlighting is applied to open editors

Should fix for RC2 since enabling a semantic highlighting which is disabled per
default should work.

we need to force a reconcile upon changing certain preferences:

- semantic highlighting
- spelling
can only reproduce steps in comment 0, but not comment 1 - semantic
highlightings are always applied to the editor in the first workbench window.
The solution is to refresh the entire semantic coloring presentation when a
preference changes. This also fixes other enablement/disablement problems.
fixed > 20050606
Start verifying ...
I still see various updating problems in I20050610-0010 with this setup:

- workbench window 1: 2 editor areas:
  - 2 stacked editors: Blah.java is active, ExceptionTestCaseTest is behind
  - 1 single editor: ExceptionTestCaseTest
- workbench window 2:
  - 1 single editor: ExceptionTestCaseTest

Activate Blah.java and enable preference 'Parameter variables'
=> both visible editors in window 1 are updated, window 2 is not updated

Change color of 'Parameter variables'
=> color only updated in active editor Blah.java
Tom, please comment.
Moving to RC3 for investigation.
Created attachment 23179
97296.diff

Patch against jdt-ui.

Note:
- when compared against SemanticHighlightingManager R1.16 and
SemanticHighlightingPresenter R1.14, the patch merely re-adds the code removed
earlier to fix this bug. 

- The real changes are in SemanticHighlightingReconciler 
  a) scheduleJob():
    - Job handling is more compact: when a job is started while a previous one
exists, it uses Job.join() instead of implementing a similar mechanism using
fJobLock.wait() and fJobLock.notify(). Note that with the previous
implementation, an exception thrown during reconcile could leave a job waiting
on the lock forever as notify() was not called from a finally block.
    - Note that nulling out fJob is not absolutely necessary, but we still do
it to clear the reference and to stay as close to the previous code as
possible. If we decide to not clear fJob, we can get rid of fJobLock
alltogether as scheduleJob is accessed in the UI thread only.

  b) install(): this restores the code from R1.16

  c) refresh(): instead of calling reconcile() in the UI thread, this now
simply schedules a job that does that. This is also much better when multiple
preference settings are changed at once, as only one job will execute.

  d) reconcile(): when used on a CUEditor, there are now two different paths
into reconcile(): one is from the scheduled job, the other from the editor's
reconciler. Reconcile is not thread-safe, therefore we need to ensure that only
one thread is within the method at any time. Any thread that enters reconcile()
 simply returns when a reconcile operation is already in progress.

The advantage of this solution is that it is provably dead-lock free.

In theory, it is possible that a more accurate reconcile (from the editor's
reconciler) does not have any effect because a stale reconcile (from the
preference page update job) is still in progress. This situation is very
unlikely to occur in practice (as an editor reconcile is usually finished when
the preference is open), and its only effect would be that semantic
highlighting is not in sync with the editor until the next reconcile.
Created attachment 23180
97296.diff

Oops - got tricked by change sets. This patch removes the unrelated changes to
JavaIndenter and JavadocAutoIndentStrategy from the previous patch.
The attached patch is the right thing to do but is too risky at that point in
time. Since the first try to fix this is only half and opens the door for other
problems we will reopen this bug and revert to the 3.0 behavior.

Dirk, can you approve this?
+1 for RC3.
Resetting priority to P3. Will be reassessed for the next release.
committed the patch into HEAD, > 20050909
