It would improve my productivity if I could apply filters to the list of things
code assist suggests.  This way I could exclude all awt/swing types when I am
working on an SWT project.  Or, if my team's coding convensions disallowed use
of the java.util types, I wouldn't have to worry that a class snuck in because
of code assist.

This feature would require:
1. A new preference page (a global one, and one per-project) where the user
specifies which patterns to be filtered.  This could easily be copied from the
debug step filtering preference page.
2. Filtering mechanism on top of or inside code assist itself.

Optional:
Item in the code assist list that would show all the filtered types.

For example, with the filters the list would look like:

org.blah.Foo
com.example.Bar
<show filtered items>

If the user selected "<show filtered items>" the list would expand to include
the filtered types.

It would improve my productivity if I could apply filters to the list of things
code assist suggests.  This way I could exclude all awt/swing types when I am
working on an SWT project.  Or, if my team's coding convensions disallowed use
of the java.util types, I wouldn't have to worry that a class snuck in because
of code assist.

This feature would require:
1. A new preference page (a global one, and one per-project) where the user
specifies which patterns to be filtered.  This could easily be copied from the
debug step filtering preference page.
2. Filtering mechanism on top of or inside code assist itself.

Optional:
Item in the code assist list that would show all the filtered types.

For example, with the filters the list would look like:

org.blah.Foo
com.example.Bar
<show filtered items>

If the user selected "<show filtered items>" the list would expand to include
the filtered types.
Created attachment 2986
JDT UI code completion "hack"

I also need something like so I created a very experimental hack on top of jdt
ui overriding JavaCompletionProcessor (attached source as a zipped fragment
project).

This hack adds a new preference page (Java-->Completion filters) where can
define packages (e.g. "javax" or "com.sun"). The completion behaviour is
different based on the filter selection:
- if a package name is not selected (but it is in the list) then all classes
which are under this package (or one of its sub-packages) will place *after*
the other "normal" completion proposals (useful for rarely used packages)
- if a package name is selected then all classes which are under this package
(or one of its sub-packages) will *not displayed* in the completion popup
(useful for internal packages eg. com.sun)

I use it with the I20030107 version without problems.
Regards,
Csaba
*** Bug 29630 has been marked as a duplicate of this bug. ***
Build 20031218.
