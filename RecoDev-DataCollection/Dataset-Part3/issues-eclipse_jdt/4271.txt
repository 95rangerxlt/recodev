ak (10/2/2001 5:07:14 PM)
	there should be a way to use organize import headless -
	it should be implemented in terms of refactoring IChange objects
	it could then be reused in some refactorings.

NOTES:

ak (10/2/2001 5:07:14 PM)
	there should be a way to use organize import headless -
	it should be implemented in terms of refactoring IChange objects
	it could then be reused in some refactorings.

NOTES:
Implementing organize imports as an IChange is the wrong approach. Instead we 
need a TextEdit that does the job. Martin as converted his stuff so that is 
uses TextBuffer. I will now implement an TextEdit that does the organize import.
changed ImportsStructure in cooperation with DB for implementing a TextEdit.
DB will add the TestEdit -> Moving to DB
i created SimpleAddImportEdit
it has some of the kind of api i need (but ignores the user preferences)

one more thing of cource would be an edit that would really organize imports.
the api would be just a compilation unit (not a compilation unit and a package 
or type to import like it is in the case of SimpleAddImportEdit)
Why didn't you implement the real thing on top of Martin's stuff. Why do you 
ignore the preference settings ?
1. Martin's 'stuff' is an action - not a text edit
2. Preferences live in the ui world - edits live in the corext world
But you could put a TextEdit around Martin's ImportStructure. And there is a 
ConfigurationObject that doesn't live in the UI world. Look into the package 
codegeneration
fixed by DB
>= 20011217
