Now that JDT has a model provider and defines a team content provider, it is a short step to having a content provider that shows sync state. I already have a first cut at this. I will attach it as a patch. It would be really nice if it could make it into M4.

Now that JDT has a model provider and defines a team content provider, it is a short step to having a content provider that shows sync state. I already have a first cut at this. I will attach it as a patch. It would be really nice if it could make it into M4.
Created attachment 31336
Patch to org.eclipse.jdt.ui

Here is a summary of what the patch contains:

1) It modifies JavaTeamContentProvider and JavaTeamLabelProvider to show Java elements
2) It adds sync state filtering to the JavaTeamContentProvider
3) It adds sync state decoration to JavaTeamLabelProvider
4) It adds compare support (i.e. selecting a class in a compare editor will feed the rest of the editor)

I had to make a constructor in the existing Java label provider public. You'll probably want to come up with an alternate way of hooking this up since the class is API.
Also, we have new propertTesters for resources so you can now make the enablement rule for the Java model provider the following

      <enablement>
          <test property="org.eclipse.core.resources.projectNature" value="org.eclipse.jdt.core.javanature" />
      </enablement>

Instead of 

      <enablement>
         <with variable="affectedNatures">
            <iterate operator="or">
               <equals value="org.eclipse.jdt.core.javanature"/>
            </iterate>
         </with>
      </enablement>

We copied the code from LTK that requires clients to provide the natures. I would like to remove this so please let me know when you have changed the enablement rule so I can clean up the API. Thanks
I am getting an error telling me that no property tester has been contributed if I change the enablement expression.
Do I need any plugins more recent than I20051206-1200?
You need Core/Resources from HEAD
I just realized that the patch I gave you is missing the ability to show incoming additions. It was in a previous version I had but it must have got lost when I simplified the code for the patch. I'll see if I can get you an updated patch by tomorrow but, if not, you may want to hold off on this.
Deferring to M5
I am still working on a patch for this. Since it is not mainstream functionality, it would be good if we could get it into M4. I understand if you don't want to do that (since there inevitably will be bugs in it) but if you are not willing to do so, I would ask you to remove your curent one since it violates API restrictions (i.e. extends an internal class) and causes problems since it is, in essence, registering a second resource based content provider (i.e. we get duplicate resources showing up in places and users will just enter lots of bugs asking why both the File System and Java subtrees contains the same thing). 
I am in favor of putting it in for M4, since the whole story is marked as work in progress. We just retagged our bugs which do not necessarily make it for M4.
I'll be glad to accept an updated patch.
Created attachment 31500
Patch to org.eclipse.jdt.ui

Here's the latest patch. It now works for phantoms (incoming additions) but I had to add some hacks to get it to work because there are places in the JDT code that fail if the underlying resource doesn't exist. Also, it is not very efficient but should be fine as a work-in-progress.
Released patch with a few changes:
- Using AppearanceAwareLabelProvider and StandardJavaElementContentProvider
- Fixed image leak
- Moved code to better location

Available in HEAD > 20051212
