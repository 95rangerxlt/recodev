Suppose the following structure:

interface I1 {
  void m1();
}

interface I2 {
  void m2();
}

class C1 implements I1 {
  public void m1() {...}
}

class C2 extends C1 {...}

class C3 extends C2 implements I2 {...}

If I call "Add unimplemented methods" in C3 it should add only the missing m2(),
but it adds m1() too - even if it's already implemented as a public method in
C1, an indirect superclass of C3.

I did not test it separately from my application, but I hope the setup above is
enough to reproduce this behavior. I1, I2, C1, C2 and C3 are all of them in
different packages, I don't know if it's important.

Suppose the following structure:

interface I1 {
  void m1();
}

interface I2 {
  void m2();
}

class C1 implements I1 {
  public void m1() {...}
}

class C2 extends C1 {...}

class C3 extends C2 implements I2 {...}

If I call "Add unimplemented methods" in C3 it should add only the missing m2(),
but it adds m1() too - even if it's already implemented as a public method in
C1, an indirect superclass of C3.

I did not test it separately from my application, but I hope the setup above is
enough to reproduce this behavior. I1, I2, C1, C2 and C3 are all of them in
different packages, I don't know if it's important.
Tobias, can you please investigate.
Fixed > 20050316
