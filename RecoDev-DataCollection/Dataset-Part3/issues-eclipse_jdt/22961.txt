2.1 stream, recent WSDD 5 builds (2.0.1 stream)

Some people here experience a problem from time to time where code changes are 
not picked up when running an inner Eclipse.
You make a change, launch the target and the target is not running with the 
changes you just made. The class files were recompiled, their time stamps are 
new.
When you hit a breakpoint you see the new source code but it's obviously 
running old code.
We all run Eclipse/WSDD using J9 and launch the target on J9.
Simon actually has this problem when using the SMF launcher, Stef and I use the 
PDE launcher to launch an Eclipse target.
I seem to be able to recover by deleting the launch config and creating a new 
one. This does not work for Stef or Simon so apparently it is not a reliable 
workaround.

2.1 stream, recent WSDD 5 builds (2.0.1 stream)

Some people here experience a problem from time to time where code changes are 
not picked up when running an inner Eclipse.
You make a change, launch the target and the target is not running with the 
changes you just made. The class files were recompiled, their time stamps are 
new.
When you hit a breakpoint you see the new source code but it's obviously 
running old code.
We all run Eclipse/WSDD using J9 and launch the target on J9.
Simon actually has this problem when using the SMF launcher, Stef and I use the 
PDE launcher to launch an Eclipse target.
I seem to be able to recover by deleting the launch config and creating a new 
one. This does not work for Stef or Simon so apparently it is not a reliable 
workaround.
I get the case where the NEW code IS running, but I see the OLD code in the 
debugger.  As I step through the execution, it is clear that it is the new code 
running and not the old.  Strangely enough, even though there is a .java file 
containing the new code in my workspace, the debugger has opened a .class file 
and has found the associated source.  I need to investiate further, but I have 
a hunch that its related to a project that references an external jar that 
seems to be being cached by the workspace/debugger.  I'll try add more comments 
to this PR later.
The case Simon describes sounds like the runtime classpath/source lookup path 
is pointing to old code. Knut's case sounds like the classpath points to old 
code, but the source lookup points to new code. Any more details are 
appreciated. 

(Adding Dejan as a CC, since there was a similar PDE bug at one time).
For me it was definitely running the old binaries while showing the current
source. In addition to seeing this problem when launching via the PDE, I have
also encountered it while launching with a JUnit Test Plugin configuration. I
have tried deleting and recreating the configuration as well as rebuilding all
the projects to no avail, and neither exiting the workbench nor rebooting my
machine corrects the problem. I have even tried deleting the .metadata from my
workspace and all the temporary files related to Eclipse that were in my c:\temp
directory and none of those actions made a difference. It really is amazing.
If the classpath is somehow pointing to old code, I have no idea where that old
code is living.
Stef, are you using a "Runtime Workbench" launch configuration?
Some additional thoughts:
This is actually a fairly rare case as I have only had this happen twice. For my
current workspace, I had been working/testing/debugging for probably over a week
before this happened. However once it happens, it is very difficult if not
impossible to fix the problem.
I have only ever encountered it with J9, so maybe it's a J9 related issue.
I had even tried deleting the affected .class files from my project's bin folder
in the file system before recompiling to no avail. And as Knut pointed out, the
.class files do have new time stamps, so they are recompiling. However, is it
possible that rather than the VM running an old binary, somehow the compiler is
producing a binary based on the old source? Would there be a way to verify that
the recompiled class file really corresponds to the latest source?
It is also *very* likely that the class having this problem had just been
subjected to a hot code replace before this problem began. I had (manually)
split the contents of one method into another new method and removed an
unreferenced field declaration. So when I debug, it is still running as if the
split out code were still in place.
Just trying to throw out all the information I can think of.
Darin, the first time I encountered this problem (about a month ago) it was
indeed with a "Runtime Workbench" launch configuration. My current problem
however is with a "JUnit Test Plugin" launch configuration which also uses the
PDE to launch an inner Eclipse.
Although Simon's problem was actually different, his launcher is not PDE
related. He is using our SMF Runtime launch configuration but is using the J9 VM.
I think that there must be two versions of the code around. For example, is 
there a jar containing the old binaries for the plug-in too? It sounds like the 
jar is being found before the "bin" directory.
Look the "properties" of the running VM (pop-up menu in debug view). This will 
show the runtime classpath, and might help us figure out what is going on.
It is true that my code does also exist in a jar, but that's in the plugins
directory and the PDE should be using the plugin in my workspace and ignoring
the external plugin. Again, this was working fine for several days, and then all
the sudden became hosed.
Here's the info from the VM properties:

D:\build-23318\wsdd5.0\ive\bin\j9w.exe -classpath
D:\build-23318\eclipse\startup.jar -debug:6243 -jcl:foun
org.eclipse.core.launcher.Main -noupdate -application
org.eclipse.pde.junit.uitestapplication -data
c:\temp\\org.eclipse.pde.junit.workspace -plugins
c:\temp\org.eclipse.pde.junit23406.properties -dev bin -consolelog -port 14754
-testpluginname com.ibm.ive.eccomm.bde.test -classnames
com.ibm.ive.eccomm.bde.ui.tooling.wizards.test.SubmitBundleWizardPageTest

Nothing jumps out except the -plugins option. Here's the contents from that file:

#Thu Aug 29 10:17:48 EDT 2002
org.eclipse.jdt.junit=file\:D\:/build-23318/eclipse/plugins/org.eclipse.jdt.junit_2.0.1/plugin.xml
org.eclipse.core.resources.win32=file\:/D\:/workspaces/oldWSDD50/org.eclipse.core.resources.win32/fragment.xml
org.eclipse.compare=file\:/D\:/workspaces/oldWSDD50/org.eclipse.compare/plugin.xml
org.eclipse.jdt.debug.ui=file\:/D\:/workspaces/oldWSDD50/org.eclipse.jdt.debug.ui/plugin.xml
org.eclipse.core.resources=file\:/D\:/workspaces/oldWSDD50/org.eclipse.core.resources/plugin.xml
org.eclipse.update.ui.forms=file\:/D\:/workspaces/oldWSDD50/org.eclipse.update.ui.forms/plugin.xml
org.eclipse.jdt.launching.j9=file\:/D\:/workspaces/oldWSDD50/org.eclipse.jdt.launching.j9/plugin.xml
org.eclipse.jdt.ui=file\:/D\:/workspaces/oldWSDD50/org.eclipse.jdt.ui/plugin.xml
org.eclipse.update.core.win32=file\:/D\:/workspaces/oldWSDD50/org.eclipse.update.core.win32/fragment.xml
org.apache.xerces=file\:/D\:/workspaces/oldWSDD50/org.apache.xerces/plugin.xml
org.eclipse.jdt.launching=file\:/D\:/workspaces/oldWSDD50/org.eclipse.jdt.launching/plugin.xml
org.eclipse.update.core=file\:/D\:/workspaces/oldWSDD50/org.eclipse.update.core/plugin.xml
org.eclipse.jdt.debug=file\:/D\:/workspaces/oldWSDD50/org.eclipse.jdt.debug/plugin.xml
org.eclipse.debug.core=file\:/D\:/workspaces/oldWSDD50/org.eclipse.debug.core/plugin.xml
org.eclipse.core.runtime=file\:/D\:/workspaces/oldWSDD50/org.eclipse.core.runtime/plugin.xml
org.apache.ant=file\:/D\:/workspaces/oldWSDD50/org.apache.ant/plugin.xml
org.eclipse.swt.win32=file\:/D\:/workspaces/oldWSDD50/org.eclipse.swt.win32/fragment.xml
org.eclipse.ant.core=file\:/D\:/workspaces/oldWSDD50/org.eclipse.ant.core/plugin.xml
org.apache.lucene=file\:/D\:/workspaces/oldWSDD50/org.apache.lucene/plugin.xml
org.junit=file\:/D\:/workspaces/oldWSDD50/org.junit/plugin.xml
org.eclipse.debug.ui=file\:/D\:/workspaces/oldWSDD50/org.eclipse.debug.ui/plugin.xml
org.eclipse.swt=file\:/D\:/workspaces/oldWSDD50/org.eclipse.swt/plugin.xml
org.eclipse.search=file\:/D\:/workspaces/oldWSDD50/org.eclipse.search/plugin.xml
org.eclipse.help=file\:/D\:/workspaces/oldWSDD50/org.eclipse.help/plugin.xml
org.eclipse.ui.win32=file\:/D\:/workspaces/oldWSDD50/org.eclipse.ui.win32/fragment.xml
com.ibm.ive.eccomm.bde=file\:/D\:/workspaces/oldWSDD50/BundleDeveloperPlugin/plugin.xml
org.eclipse.ui=file\:/D\:/workspaces/oldWSDD50/org.eclipse.ui/plugin.xml
org.eclipse.jdt.core=file\:/D\:/workspaces/oldWSDD50/org.eclipse.jdt.core/plugin.xml
com.ibm.ive.eccomm.bde.test=file\:/D\:/workspaces/oldWSDD50/com.ibm.ive.eccomm.bde.test/plugin.xml
org.eclipse.pde.junit=file\:D\:/build-23318/eclipse/plugins/org.eclipse.pde.junit_2.0.0/plugin.xml
org.eclipse.core.boot=file\:/D\:/workspaces/oldWSDD50/org.eclipse.core.boot/plugin.xml

The two "com.ibm.ive..." entries are my code. As you can see, it claims to be
getting the plugin from my workspace (as opposed to the Eclipse install like it
is for the org.eclipse.pde.junit plugin).
Look similar to bug 11918. Please try:

"The workaround is to go to PDE 'Target Platform' preference page and disable 
all the external plug-ins. They are causing the problem because the model 
synchronizer that should prevent the appearance of 'twins' is not working 
properly."
It certainly sounds like the same problem, but I don't have anything selected on
the 'Target Platform' page. Besides, that bug was supposedly fixed back in
March. I have seen a "duplicate plugins" message when I've had external plug-ins
selected in the past, but I'm not getting that in this case.
Continuing details:

I started with a brand new workspace and had been successfully debugging using
the "Run-time Workbench" launcher. Then I started back on writing junit
testcases. Now when I debug using the JUnit Test Plugin the binary is once again
out of synch with the my latest source and what I see in the debugger.
Could there be a coexistance type issue between these two PDE based launchers?
How about this: was the fix for bug 11918 specific to code inside the "Run-time
Workbench" launcher? Since I'm currently experiencing this problem with the
"JUnit Test Plugin" launcher, maybe the same bug exists there and needs to be
fixed the same way.
Note that I'm using the org.eclipse.pde.junit_2.0.0 plugin found on the JDT UI
component page at eclipse.org.
Adding Erich as CC, as he is the owner of the Junit launchers. EG, can you 
answer the question?
Ok, another interesting bit of information:
I was just looking in the log for the workspace opened by the "JUnit Test
Plugin" launcher when I noticed the following entry:
!MESSAGE Two plug-ins found with the same id: "org.eclipse.jdt.launching.j9".
Ignoring duplicate at
"file:d:/build-23608/wsdd5.0/eclipse/plugins/org.eclipse.jdt.launching.j9_4.99.0.20020828/plugin.xml".

I found this odd and tried to figure out how that could be. My guess is this:
I have imported this plugin as a binary project in my workspace. When I create a
"Run-time Workbench" configuration, all the workspace plugins are selected, but
no external plugins are selected.  So how is this duplicate occuring? Well, for
WSDD there is a links directory which points to a second plugins folder where
the j9 launching plugin happens to exist.
Is it possible that the PDE is launching the second Eclipse and inadvertently
picking up external plugins from the linked directory? The "Run-time Workbench"
launcher allows the user to select the plugins to launch, but the "JUnit Test
Plugin" does not. Could this and/or the possibility of conflicting j9 launcher
plugins be causing the problem?

Hope this rambling makes some sense and is useful info.
The pde.junit and pde use different code to launch a workspace (this is a known 
issue) so you will see different behaviour. The pde launching code is more 
sophisticated. The pde.junit launcher constructs the plugin path in the 
following way:
- find all plugins in the workspace
- add required plugins from the hosting eclipse. 
The dump of the plugin's path property file shows this and it looks correct to 
me. Dejan can you please cross check.

Given that the launching code is different it would help to know whether this 
problem shows up only when using the pde.junit launcher? 
Where is the links directory located, I don't fully understand the set-up?
When you see the problem does the plugin path properties file refer to files 
from the links directory?
I *believe* the current problem has mainly appeared with the "JUnit Test 
Plugin" launcher. I have seen it with the "Run-time Workbench" launcher but 
can't recall if I've seen it since bug 11918 was fixed. It may be that once 
things are thrown out of whack by the JUnit launcher that it does result in the 
workbench launcher being fouled up.
The links directory is under the main eclipse directory and contains the path 
to an additional plugins directory. I'm not sure if it can only contain one 
reference, or one per line for as many as you like. For WSDD, there is a 
wsdd5.0 directory sibling to the main eclipse directory. Then inside that is a 
whole other eclipse directory structure which contains the features and plugins 
specific to WSDD (our components use colocation-affinity to install into this 
alternate location). When Eclipse starts up, it looks in the main plugins 
directory as well as any additional directories referred to by files in the 
links directory.
I'm fairly confident this problem involves HCR, so I'll play around with both 
launchers to see if I can make it fail again and check out the plugin path 
properties file when it does.
Well it may not be ultimately related to the problem with the wrong binaries
being executed, but there is a definite difference in the plugins being loaded.
Both the "Run-time Workbench" and "JUnit Test Plugin" launchers generate the
same basic plugin path properties file (the one for JUnit has the additional
org.eclipse.jdt.junit and org.eclipse.pde.junit plugins, but they are otherwise
identical). However, the .log files are quite different. The log for the
"Run-time Workbench" has 3 minor complaints about the missing extension point
"org.eclipse.team.core.fileTypes" which is valid since I didn't include the Team
plugins for execution. But the "JUnit Test Plugin" log has that plus an
additional 11 complaints (including the duplicate error for
"org.eclipse.jdt.launching.j9"). All the problems involve com.ibm.ive.* plugins
which come from the second eclipse/plugins directory referenced by the links
file, so they are clearly being picked up despite what the plugin path
properties file indicates.
I then removed the links directory and tried the "JUnit Test Plugin" launcher
again and now I get just the 3 complaints about the missing Team extension point.

Again, I don't know if this really has any bearing on the debug problem, but
clearly the "JUnit Test Plugin" launcher is bringing in way more than it should,
and way more than the "Run-time Workbench" launcher does.
*** Bug 23622 has been marked as a duplicate of this bug. ***
"Run-time Workbench" and "JUnit Test Plugin" are now using the same launching 
logic. The new pde.junit plugin is available at 

http://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/jdt-ui-
home/plugins/org.eclipse.jdt.junit/org.eclipse.pde.junit_2.1.0.zip

Since there is still no clear evidence that this only showed up when using 
JUnit Test Plugin I'll leave the bug open. In particular given that there also 
is 23622. Moving to PDE.
just to add one more speculation...
One area that should be checked is the way the SourceLocator is created in  
org.eclipse.pde.internal.ui.launcher.WorkbenchLaunchConfigurationDelegate.constr
uctSourceLocator. The source locator searches the projects in the order the 
projects are added to the locator. The locator returns the first match. To make 
sure that the correct source is found the projects should be searched in plug-
in pre-requisite order. The current ordering in the source locator seems to be:
1) all plugin projects (in pre-req order?)
2) all fragments 
Given that fragments are "merged" into their target plugin they should not be 
just searched at the very end. 
The problems that were described above all seem to have resulted from stale 
classpaths referencing old jars, and/or mulitple copies of the same code in the 
workspace.  If the classpaths were kept up-to-date, then the correct source 
would have been picked up.

Having said that, PDE has now made source lookup locations more flexible.  The 
runtime workbench configuration now contains a new Source tab, showing the 
source lookup order.  By default, PDE now orders the workspace projects using 
IWorkspace.computeProjectOrder(IProject[]) and this order becomes the default 
source lookup order, which is pretty reasonable.
If you have multiple copies of the same code in your workspace or have stale 
classpaths, and PDE's default order does not suit you, just re-arrange the 
order any way you like.

Moving back to JDT so that they mimic the new behavior of PDE's launcher.
*** Bug 24951 has been marked as a duplicate of this bug. ***
Marking as fixed.
