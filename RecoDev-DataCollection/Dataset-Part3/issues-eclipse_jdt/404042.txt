See, e.g., GenericTypeTest.test0805():
  String s = foo(numbers, floats);
  
During Invocation Applicability Inference we find that T = Number[], but during Invocation Type Inference we find no solution matching the expected type String.
This leads the initial implementation to report: 
  "The method foo(T, T) in the type X is not applicable for the arguments (Number[], Float[])"
where we expect:
  "Type mismatch: cannot convert from Number[] to String"
  
This can be rectified by falling back to the provisional result. I have a small correction in this regard, which will later need careful integration with overload resolution.

See, e.g., GenericTypeTest.test0805():
  String s = foo(numbers, floats);
  
During Invocation Applicability Inference we find that T = Number[], but during Invocation Type Inference we find no solution matching the expected type String.
This leads the initial implementation to report: 
  "The method foo(T, T) in the type X is not applicable for the arguments (Number[], Float[])"
where we expect:
  "Type mismatch: cannot convert from Number[] to String"
  
This can be rectified by falling back to the provisional result. I have a small correction in this regard, which will later need careful integration with overload resolution.
Fixed for now via commit 69698ba862a89ca47357728b15167ba7906d9f47 in the feature branch - pending integration with overload resolution.
