When a broken annotation processor (one that throws exceptions) is activated on the factory path it can cause a 'bombardement' of error popups which make the IDE unusable.

See for example here: https://jira.spring.io/browse/IDE-1381

Broken processors while not the 'norm' can occur for a number of reasons and they should be handled gracefully.

A number of things could be done:
  - detect broken processor and stop trying to execute it
  - use project error marker to indicate the problem instead of popup dialogs
  - write error to error log instead of popup in the UI.

Really... the most import thing is... don't bombard the user with endless popups. So at the very least, these errors should be dumped in error log instead of a UI popup.

From the link above, this stacktrace may help pinpoint where 'exceptions' might be escaping from the build-process and turning into a bombardment of popups:

!ENTRY org.eclipse.core.resources 4 2 2015-09-23 09:22:05.893

!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".

!STACK 0

java.lang.NoClassDefFoundError: org/springframework/boot/configurationprocessor/TypeExcludeFilter

	at org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor.<init>(ConfigurationMetadataAnnotationProcessor.java:89)

	at sun.reflect.GeneratedConstructorAccessor262.newInstance(Unknown Source)

	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)

	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)

	at java.lang.Class.newInstance(Class.java:442)

	at org.eclipse.jdt.apt.core.internal.ClassServiceFactory.newInstance(ClassServiceFactory.java:26)

	at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.discoverNextProcessor(IdeAnnotationProcessorManager.java:92)

	at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.round(RoundDispatcher.java:116)

	at org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:159)

	at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:134)

	at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:967)

	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:489)

	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:395)

	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:183)

	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:332)

	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:62)

	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:256)

	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:180)

	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:734)

	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)

	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:205)

	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:245)

	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:300)

	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)

	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:303)

	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:359)

	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:382)

	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:144)

	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:235)

	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

    Attach one or more files to this issue

When a broken annotation processor (one that throws exceptions) is activated on the factory path it can cause a 'bombardement' of error popups which make the IDE unusable.

See for example here: https://jira.spring.io/browse/IDE-1381

Broken processors while not the 'norm' can occur for a number of reasons and they should be handled gracefully.

A number of things could be done:
  - detect broken processor and stop trying to execute it
  - use project error marker to indicate the problem instead of popup dialogs
  - write error to error log instead of popup in the UI.

Really... the most import thing is... don't bombard the user with endless popups. So at the very least, these errors should be dumped in error log instead of a UI popup.

From the link above, this stacktrace may help pinpoint where 'exceptions' might be escaping from the build-process and turning into a bombardment of popups:

!ENTRY org.eclipse.core.resources 4 2 2015-09-23 09:22:05.893

!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".

!STACK 0

java.lang.NoClassDefFoundError: org/springframework/boot/configurationprocessor/TypeExcludeFilter

	at org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor.<init>(ConfigurationMetadataAnnotationProcessor.java:89)

	at sun.reflect.GeneratedConstructorAccessor262.newInstance(Unknown Source)

	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)

	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)

	at java.lang.Class.newInstance(Class.java:442)

	at org.eclipse.jdt.apt.core.internal.ClassServiceFactory.newInstance(ClassServiceFactory.java:26)

	at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.discoverNextProcessor(IdeAnnotationProcessorManager.java:92)

	at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.round(RoundDispatcher.java:116)

	at org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:159)

	at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:134)

	at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:967)

	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:489)

	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:395)

	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:183)

	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:332)

	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:62)

	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:256)

	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:180)

	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:734)

	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)

	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:205)

	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:245)

	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:300)

	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)

	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:303)

	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:359)

	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:382)

	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:144)

	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:235)

	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

    Attach one or more files to this issue
A NoClassDefFoundError is as fatal as it gets. If there is a problem while invoking the annotation processor, I believe we are already handling it better (need to confirm that, though).

I will see if we can report it as a new kind of build path error.
New Gerrit change created: https://git.eclipse.org/r/56870
I released the fix, albeit without a test (as it was proving to be difficult to replicate the IDE behavior in unit test. The fix is here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=40aba6682d4eea8f15f9ae037123e7cedc4a4ef3
Might I suggest broadening the catch clause some more?

Here's another 'very fatal' error: 
https://issuetracker.springsource.com/browse/STS-4235
Changing to 'REOPENED'. I'm not sure my previous comment will catch anyone's attention otherwise.
(In reply to Kris De Volder from comment #4)
> Might I suggest broadening the catch clause some more?
> 
> Here's another 'very fatal' error: 
> https://issuetracker.springsource.com/browse/STS-4235

Do you have more details you seem to be talking about in that link?
Dave just attached this to the STS bug:

!ENTRY org.eclipse.core.resources 4 2 2015-10-08 09:14:14.208
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.UnsupportedClassVersionError: org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor : Unsupported major.minor version 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:800)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:449)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:71)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:361)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:425)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
	at org.eclipse.jdt.apt.core.internal.AnnotationProcessorFactoryLoader.loadJava6FactoryClasses(AnnotationProcessorFactoryLoader.java:591)
	at org.eclipse.jdt.apt.core.internal.AnnotationProcessorFactoryLoader.loadFactories(AnnotationProcessorFactoryLoader.java:533)
	at org.eclipse.jdt.apt.core.internal.AnnotationProcessorFactoryLoader.getJava6FactoriesAndAttributesForProject(AnnotationProcessorFactoryLoader.java:421)
	at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:130)
	at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:967)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:489)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:395)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:183)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:332)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:62)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:256)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:180)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:734)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:205)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:245)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:300)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:303)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:359)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:382)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:144)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:235)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
Dave also attached another stacktrace more similar to the first one (i.e. NoClassDefFoundError, alebit with slighty different stack).

java.lang.NoClassDefFoundError: org/springframework/util/LinkedMultiValueMap
	at org.springframework.boot.configurationprocessor.metadata.ConfigurationMetadata.<init>(ConfigurationMetadata.java:48)
	at org.springframework.boot.configurationprocessor.MetadataCollector.getMetadata(MetadataCollector.java:81)
	at org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor.writeMetaData(ConfigurationMetadataAnnotationProcessor.java:360)
	at org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor.process(ConfigurationMetadataAnnotationProcessor.java:138)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.handleProcessor(RoundDispatcher.java:139)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.round(RoundDispatcher.java:110)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:159)
	at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:134)
	at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:1005)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:489)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:395)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:183)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:332)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:62)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:256)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:180)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:734)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:205)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:245)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:300)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:303)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:359)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:382)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:144)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:235)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
Caused by: java.lang.ClassNotFoundException: org.springframework.util.LinkedMultiValueMap
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 28 more
New Gerrit change created: https://git.eclipse.org/r/58205
Pushed the changes via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=2b497c6e467e49780e969c94dfa467cf088ecd66
Verified for 4.6M3 using I20151026-2000 build on windows. The behavior was different on linux, there were no error messages anywhere when a broken annotation processor was added to the factory path, so not moving this to verified so that this can be revisited.
