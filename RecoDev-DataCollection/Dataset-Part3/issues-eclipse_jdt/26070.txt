It would be nice to have a wizard that acts similar to the Generate Getter and 
Setter wizard in that a user is presented with a GUI that displays all of the 
fields associated with a class.  If a field is unchecked, the field would be 
removed from the toString().  It would also be nice to be able to control the 
order of the fields.

It would be nice to have a wizard that acts similar to the Generate Getter and 
Setter wizard in that a user is presented with a GUI that displays all of the 
fields associated with a class.  If a field is unchecked, the field would be 
removed from the toString().  It would also be nice to be able to control the 
order of the fields.
Postpone > 2.1. 
*** Bug 26875 has been marked as a duplicate of this bug. ***
*** Bug 67962 has been marked as a duplicate of this bug. ***
*** Bug 79069 has been marked as a duplicate of this bug. ***
Plugin that do that...
http://eclipse-plugins.2y.net/eclipse/plugin_details.jsp?id=755
eclipse 3.2M5 supports hashCode and equals generation.
It would be nice if this one gets adressed the same way.

Some more ideas:

-use StringBuilder if target vm of the project is 5.0+
-option to prepend super.toString
-formatting options (brackets,separators ...)


*** Bug 151200 has been marked as a duplicate of this bug. ***
*** Bug 63864 has been marked as a duplicate of this bug. ***
*** Bug 160209 has been marked as a duplicate of this bug. ***
*** Bug 198740 has been marked as a duplicate of this bug. ***
Does it make sense to have other bug reports regarding toString() generation to be marked as duplicate of this bug if this one has status RESOLVED with Resolution later, i.e. nothing has be done and probably will be done? It was put on status later back in 2002 with the comment >2.1. Now eclipse is at 3.3 yet it has not been implemented.
(In reply to comment #11)
> Does it make sense to have other bug reports regarding toString() generation to
> be marked as duplicate of this bug if this one has status RESOLVED with

Yes, if they are duplicates.

> Resolution later, i.e. nothing has be done and probably will be done? It was
> put on status later back in 2002 with the comment >2.1. Now eclipse is at 3.3
> yet it has not been implemented.

Resolved later does not mean resolved never, it means that we don't have the resources to do it at the moment. This would be an excellent feature for the community to contribute. There is even already a plugin which adds that feature to JDT, if this is not good enough for you then maybe the author of the plugin is willing to contribute it to JDT?


reopening (later is deprecated). Help is most welcome.
toString() generator is the subject of a project for this year's Google Summer of Code for Eclipse. I am the student who will work on it. I won't do much progress until the middle of the summer, but the solution is closer than ever :)

To see more informaion about my work and progress, go to http://wiki.eclipse.org/ToString%28%29_generation

I have a general idea of what it should look like (mainly from comments to this and similar bugs), but ideas and proposals are still welcome.
Created attachment 104968
first part - main dialog box and related things

I finished the GUI part (although it's probably no the final version). It would be great if someone from the JDT team could have a look at it and tell me if I'm doing things right. The GenerateHashCodeEqualsDialog contains all the options for toString generation, there's a separate node in the treeView for class' methods (only non-static non-void) and it's possible to change order of the elements. I didn't change the code generating part yet.

I have some questions:

- When I create next patches with additional functionality, should they be created against CVS HEAD again, or may I assume the patches will be applied all in the order of posting?

- I added GenerateHashCodeEqualsContentProvider as a separate class because it's quite big. It copies most of the code from the GenerateConstructorUsingFieldsContentProvider and could easily replace it. It's a code duplication and I'm not sure what to do about it...

- The GenerateHashCodeEquals prefix for all the related class names will no longer be adequate. Will you leave it that way or change it to GenerateHashCodeEqualsToString (quite long...) ?
I wonder if it makes sense to merge the new option in the 'hashCode/equals' dialog.
Although both user interfaces for the inputs are similar, I don't think the two operations are related. The fields selected in 'hashCode/equals' are probably not the same ones as for toString.
A big problem will be to find a good action name and dialog title if we merge all the options. It will also be problematic to keep the wizard in a good size.

So I think it's good idea to have an abstract base class for the dialog, and maybe for the action, but I would keep the actual actions, dialogs and operations separate.

- please always attach a full patch against HEAD. No incremental patches.

- IMO, the GenerateConstructorUsingFieldsContentProvider isn't a good example to copy. I wouldn't place the up/down functionality to the content provider. Better have that in the viewer or in a separate model class. I agree that it would be good to share the up/down code somewhere.
Created attachment 105578
new action with dialog

OK, second try - now toString() generation is a separate action and dialog. I agree it makes more sense, what was I thinking? :)

Now the tree view has more elements - all fields and methods inherited from super class were added. I'm aware that including clone() in the toString() would generate an infinite recursion so I removed it from the View. Can you think of any other methods I should be careful with?

As for content provider, I've changed it a lot (it's smaller now so I included it as an inner class of GenerateToStringDialog) and it's no longer a duplication of GenerateConstructorUsingFieldsContentProvider.
I'm not sure about moving up/down functionality out of content provider. It can't be moved to the viewer itself because the viewer gets elements and their order from the content provider. It could be moved to a separate model object, but then the content provider would be nothing more than a facade over it - would that make sense?

Another question - my next patches will definitely need code included in this patch, but I can't make incremental patches. This way every next patch will be bigger than the previous one. Is that OK?
Looks good! The inherited methods is a good addition. I even think we need it for methods of the current type (to use getter/setters instead of fields).
We should also have that for 'hashCode/equals'.

I'd suggest to add an image to 'Inherited fields' and 'Methods' and keep them initially collapsed when the dialog opens.

Don't worry if the patch gets big. of course you can split it between a patch for the test plug-in and a patch for jdt.ui.
Created attachment 106125
first working version

There's only one style implemented (String concatenation) and most of the options have no effect yet, but it finally generates nice toString() methods :) The templates mechanism also works (I hope). It's very simple (only 4 tokens used) but for now I can't think of any enhancements.

If everything looks OK in my code, I will now easily add implementation for all options and some additional code styles.

Should I draw the images for 'Inherited fields' and 'Methods' myself, or choose something from existing set?
You can use the normal method or field images, e.g. JavaPluginImages.IMG_MISC_PUBLIC and IMG_FIELD_PUBLIC
Created attachment 106723
string concatenation with all features

Because there was no criticism after my last submission I assume I'm going in the right direction :) 

This version implements all the options that didn't work in the previous patch:
- skip nulls
- override arrays' default toString() (uses Arrays.toString())
- limit number of elements in arrays/Collections (creates helping toString() methods)

The patch can be applied to Eclipse 3.4 as well as 3.5.
/org.eclipse.jdt.ui/ui/org/eclipse/jdt/internal/ui/JavaUIMessages.properties is missing GenerateToStringDialog_templatesManagerRemoveButton
Oh, thanks Markus. I missed it after refactoring field names. While preparing tests I also found and fixed some other bugs - toString(Collection<?> collection) was not created for List or other classes implementing Collection.

I was wondering if there's a better way to convert an array to string taking only first n elements. Now for every primitive type I create a separate toString(xxx[] array) method which looks ugly (because they all look the same). Too bad generic methods don't work for primitives... Any ideas?

I'm going to add Maps to the option "limit number of elements in arrays/collections". I will use method like this:
private String toString(Map<?,?> map) {
	return toString(map.entrySet());
}
where toString(map.entrySet()) is a helping method for collections.
You can use Arrays.copyOfRange()

@Test
public void testLimitedToString() throws Exception {
 int maxItems = 3;
 boolean[] someBooleans = new boolean[] { true, true, true, false,
	false, false, false };
 String result = Arrays.toString(Arrays.copyOfRange(someBooleans, 0,
	Math.min(someBooleans.length, maxItems)));
 assertEquals("[true, true, true]", result);
}

Mateusz, I am assigning this bug to you as you are currently the active developer on this.
Created attachment 107715
all coding styles

I implemented all coding styles, they are described in detail on my blog: http://eclipse-n-mati.blogspot.com/2008/07/all-bout-tostring.html.

We had a discussion with my mentors about template mechanism and we decided to bring it here to hear more opinions. The implementation that already exist is very simple - do you think it's enough, or there should be more stuff added like import/export, highlighting, per-project settings? Do you see any way to combine toString templates with JDT code templates mechanisms/controls?
One more question: I have several warning in GenerateMethodAbstractAction about using non-API types. They don't disappear even if I add @noreference annotation. What should I do about it? It would be hard to not use these types...
Created attachment 108736
another update

Added three code styles (chained append calls for builders) and changed arrays/collections handling.

About the warnings I asked about earlier - I've got rid of them by changing access level of some methods to default.
Created attachment 108738
user documentation

It's probably not the final version but I'm posting anyway in case someone wants to have a look.
Created attachment 108739
patch to junit tests
Markus to review whether we include this in 3.5 and if so handle IP review.
Don't know if that matters, but I realized I need to do a lot of refactoring in order to add extension point for the generator. So if the review needs to be done on the same code that would be included in cvs, please wait a few days.
Created attachment 109402
added extension point

OK, I think it's ready for the review. The only thing missing is ability to generate toString() using code completion proposal, which I have some problems with. If I figure it out eventually, I can add it as a separate bug.
Created attachment 109403
improved junit tests

Fixed errors in some of the tests. Also, added an example extension for toString() generator to check if extensions are handled properly.
>The only thing missing is ability to generate toString() using code completion 
>proposal
Let's wait with this. If we decide to add it later we also want to have it for equals/hashCode.
Created attachment 109773
main patch, cleaned up a bit

In previous patch there was some mess in SourceActionDialog - I wanted to access dialog settings in static context to ease future implementation of code completion proposal. But since we're not sure we want this feature, this patch goes back to simpler solution.

BTW, how long will this review take? Not that I want to hurry you guys, I'm just curious :)
Thanks, that looks promising. Here are a few items that need to be corrected before I can release your contribution:

API / Code
==========

* GenerateMethodAbstractAction:
- Make class and overridable methods package private (no need to add API at this time)

* Remove API and extension points to contribute toStringGenerator and toStringTemplateParser
- Our defaults should be good enough
- We could consider adding extensibility in a later phase if it turns out to be really necessary. APIs have a high maintenance cost, and we don't want to lock us in here.
- I don't think users should have to create a plug-in just to add support for another toString generator. If we really get requests for other generators, we could consider adding this with templates as well.

* ToStringGenerationSettings should be moved to the org.eclipse.jdt.internal.corext.codemanipulation.tostringgeneration package, because it is used by the GenerateToStringOperation. Stuff in corext should avoid referencing UI types (i.e. take the IDialogSettings out of this class).

* The template language is rather restricted, since it infers the 4 parts just from the positions of the template variables. This implies that the "Body" block starts and ends with a template variable. This already excludes simple formattings that e.g. want to indent all members (so "Body" should start with a tab:
MyClass [
	{field: value1},
	{method(): value2}]
)
=> A solution for this could be explicit (optional) ${member.start} and ${member.end} template variables

UI
==

* Generate toString() dialog:
- Resizing the dialog vertically should only resize the tree (and not the 3 checkboxes)
- Margins around dialog are too big - remove the additional margins from the inner GridLayout
- "Ignore arrays' default toString()" does not tell what the alternative does. How about something like "Format arrays like collections instead of native toString()"?
- Spinner to limit collections should have border and should be vertically centered with the check box
- Message '4 of 4 fields and 0 of 5 fields selected.': Second 'fields' should be 'method'
- Call SWTUtil.setDefaultVisibleItemCount(Combo) on the combos
- Code style combo: Entries of the "X/Y" form for different JRE versions should all be ordered in the same sequence (newer versions first?)
- Code style names should not include "[ignores *]". Instead, just disable the checkboxes for the options that are not available for the selected style.
- "Manage templates" button should use title case ("T")

* In the context menus, the action should be called as in the main menu (no "Method" at end)

* Templates dialog:
- Dialog must be resizable (and only the text field should expand vertically
- Combo and text field must have labels
- Default button should be OK
- Use a StyledText for the text field (e.g. to make Ctrl+Enter work, which should execute the default button)
- When opening the dialog, select the string format chosen in the main dialog
- Reverse of above: when the templates dialog is closed, the main dialog should take over the selected format


Doc
===
* Spell-check the html files
* Add the 3 ref-tostring-*.htm also to the TOC (as children of ref-dialog-tostring.htm)
* Update docs for UI changes


Generated Code
==============
- maxItem is not a good name. It sounds like it refers to a maximal item. Either inline the variable, or use 'maxCollectionSize', 'collectionItems', 'items', 'n', 'len', 'max', ...
- Whatever you choose as variable name, the surrounding code may already have taken that name. Use StubUtility.getVariableNameSuggestions(int, IJavaProject, String, int, Collection, boolean) to get a unique name.
- Never generate '\r' in manifest strings. In Java, '\n' is the line separator. Also make sure the template dialog only stores \n.

Since the contribution is > 250 changed lines (it's about 5900), we have to go through the IP Due Diligence process from http://www.eclipse.org/legal/ . To get this started, could you please confirm here, that
(a) you wrote 100% of the code yourself, and
(b) you have the right to contribute the code to Eclipse (e.g. the code does not belong to your employer)
(c) you want to contribute this code under EPL

Please add this to the "Contributors:" list in the header comment of every touched or new file:
"Mateusz Matela <mateusz.matela@gmail.com> - [code manipulation] [dcr] toString() builder wizard - https://bugs.eclipse.org/bugs/show_bug.cgi?id=26070" (everything on one line).

And for futher patches, please create a single workspace patch containing the changes for all 3 plug-ins. This is easier to handle.
I'm on it.

Although I dare to disagree in the matter of format templates. The format you gave as an example can be easily achieved with this template:
${object.className} [
        {${member.name()}: ${member.value}},
        ${otherMembers}]
)
Here the first indention belongs to the beginning part and the second one to the separator, but user doesn't need to be aware of this so it's not confusing. I would leave the template language unchanged and maybe add some more sophisticated format examples to the user documentation.

I confirm that all the code that I have submitted and will submit to this bug (the Code) is written exclusively by me. I am the owner of the Code and have the right to contribute it to Eclipe. I want to contribute the Code under Eclipse Public License.
OK, I could make the example work with this template:
${object.className} [
	{${member.name()}: ${member.value}},
	{${otherMembers}}]

Note that I had to repeat the '{' and '}' around '${otherMembers}'. With the template from comment 39, I only got curly braces around the first member, while the last member had no brace and those in between only had a closing '}'.

I guess you're right in that we should leave the template language as it is. It would be great if you could add a more complex example (e.g. this one;-) to the help. I would also add a word about this to the specification of ${otherMembers} in content assist and help, e.g. change it to:

${member.name}   inserts the first member's name
${member.name()} inserts the first member's name followed by parenthesis [etc.]
${member.value}	 inserts the first member's value
${otherMembers}  inserts the remaining members. For each member, the template fragment between the first and the last {$member.*} variable is evaluated and appended to the result. This variable must stand after the last {$member.*} variable. The characters between the last {$member.*} and ${otherMembers} define the separator that is inserted between members.

To be consistent with the code template documentation, please always use the term 'template variable' (or just 'variable') for the '${*}' constructs (not 'token').
(In reply to comment #37)
> - "Ignore arrays' default toString()" does not tell what the alternative does.
> How about something like "Format arrays like collections instead of native
> toString()"?
Changed to: "&List contents of arrays instead of using native toString()"

> * Templates dialog:
> [...]
> - Use a StyledText for the text field (e.g. to make Ctrl+Enter work, which
> should execute the default button)
There's a problem: ContentAssistCommandAdapter does not cooperate properly with StyledText, although I created a ControlContentAdapter for it. It's not a big issue, but still annoying: when I press enter to choose a variable from proposal popup, a linebreak is also inserted into text. I think it's because StyledText sends modify and keyDown events in different manner than Text. Can we consider it as a bug in StyledText, or it wasn't intended to be compatible with Text? What other solution can we use?

> Generated Code
> ==============
> - maxItem is not a good name. It sounds like it refers to a maximal item.
> Either inline the variable, or use 'maxCollectionSize', 'collectionItems',
> 'items', 'n', 'len', 'max', ...
Changed to 'maxLen', also changed 'length' parameter to 'len' in arrayToString(...)

> - Whatever you choose as variable name, the surrounding code may already have
> taken that name. Use StubUtility.getVariableNameSuggestions(int, IJavaProject,
> String, int, Collection, boolean) to get a unique name.
Done. I excluded all declared and inherited fields and types names - hope it's enough. Also used getVariableNameSuggestions to parameters and local variables in helper methods. It's not necessary, but I think it looks better.

> - Never generate '\r' in manifest strings. In Java, '\n' is the line separator.
What are manifest strings? I couldn't find any place when I generate '\r'.

(In reply to comment #38)
>Please add this to the "Contributors:" list in the header comment of every
>touched or new file
Do you really mean every touched file? I feel strange adding my name in a file where I added 2 or 3 lines...

> > - Use a StyledText for the text field (e.g. to make Ctrl+Enter work, which
> > should execute the default button)
> There's a problem: ContentAssistCommandAdapter does not cooperate properly with
> StyledText, although I created a ControlContentAdapter for it.

Please file an enhancement request for Platform/UI and attach your StyledTextContentAdapter. JFace should host this adapter. Also explain the problem you see when trying to use the adapter. Maybe the ContentProposalAdapter should also intercept Verify events.

Make this bug depend on the StyledTextContentAdapter bug and keep using Text for now (and live with bug 145959).

> > - Never generate '\r' in manifest strings. In Java, '\n' is the line separator.
> What are manifest strings? I couldn't find any place when I generate '\r'.

Sorry, I meant "Never generate '\r' in string literals". E.g. if I create a template with this content (under WinXP):
        ${object.className}
        [${member.name()}=${member.value}, ${otherMembers}]

, the generated toString method looks like this:
        return "Test\r\n[f=" + f + "]";

=> You need to replace Text#DELIMITER or StyledText#getLineDelimiter() by '\n'.

> >Please add this to the "Contributors:" list in the header comment of every
> >touched or new file
> Do you really mean every touched file? I feel strange adding my name in a file
> where I added 2 or 3 lines...

I agree it might look like overkill, but this is the Eclipse Foundation's current IP policy. See "Tracking Contributions" at the end of http://www.eclipse.org/legal/committerguidelines.php
Created attachment 112543
improved patch

This patch solves all the problems you mentioned.
Since #246388 doesn't look like it's going to be fixed soon, I use the Text widget and add a listener to handle Ctrl+Enter. It will work for now and will be easy to remove later. If there are some other features that are important and exist only in StyledText, please let me know.
Thanks, Mateusz. Unfortunately, I'm away for 2 more weeks, but I'll look at the patch ASAP when I'm back.
What are your current plans regarding this bug?
>What are your current plans regarding this bug?
We are currently busy with other stuff. If all goes well we plan to look at this for M5, but no promise.
No chance to address this sooner to make sure it goes into 3.5? Mateusz has done a great job here and its sad if this contribution doesn't get into Galileo. :-o

It's really fundamental functionality and this bug has been open for way to long already.
>No chance to address this sooner to make sure it goes into 3.5?
Nope.
Created attachment 118886
even better patch

Found and fixed a few GUI related bugs.
I filed https://dev.eclipse.org/ipzilla/show_bug.cgi?id=2976 to get this through the legal department for 3.5
Created attachment 123861
'even better patch' updated to HEAD
Created attachment 128089
actually released patch
OK, I released this for M6, but I disabled the non-JDK toString generators for now.

Need to see how we can support them without adding a dependency on third-party content (Apache/Spring). We'll probably add an extension point where other plug-ins can contribute concrete content (class and method names, generator label, etc.) to configure instances of ApacheBuilderSpringCreatorGenerator. Filed bug 267710 for this issue.
woo thanks!
thanks!
