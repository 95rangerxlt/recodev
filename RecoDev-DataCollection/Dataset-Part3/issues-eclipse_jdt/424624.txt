A static class an a static fina object of this class are declared with @NonNull.
In another class the static object are used in as methode-argument that are annotated @NonNull. The compiler shows the warning "Null type safety (type annotations): The expression of type '@NonNull Test3.Test3aa' needs unchecked conversion to conform to '@NonNull Object'" by the use of Methode "test1" in class "Test4" (see Attachment)

The warning says "Test3.Test3aa" but the Objectname are "Test3.Test3a".

I uses Java 8 Beta and eclipse-SDK-4.3.1-linux-gtk-x86_64-efx-0.9.0-SNAPSHOT.tar.gz

A static class an a static fina object of this class are declared with @NonNull.
In another class the static object are used in as methode-argument that are annotated @NonNull. The compiler shows the warning "Null type safety (type annotations): The expression of type '@NonNull Test3.Test3aa' needs unchecked conversion to conform to '@NonNull Object'" by the use of Methode "test1" in class "Test4" (see Attachment)

The warning says "Test3.Test3aa" but the Objectname are "Test3.Test3a".

I uses Java 8 Beta and eclipse-SDK-4.3.1-linux-gtk-x86_64-efx-0.9.0-SNAPSHOT.tar.gz
Created attachment 238546
Test-classes
(In reply to Thomas Olbrich from comment #0)
> The warning says "Test3.Test3aa" but the Objectname are "Test3.Test3a".

this part looks OK, since it speaks of the "type '@NonNull Test3.Test3aa'" :)

Please note that for BETA_JAVA8 we are changing null annotations to become type annotations (JSR 308), hence the annotation is indeed attached to the type (Test3.Test3aa) not the variable declaration (Test3a).

I'll take a look. 

Meanwhile you might confirm which version of org.eclipse.jdt.annotation you are using. For 1.8 work it should be version 2.0.0.
The warning only occurs when compiling Test4.java separately, where Test3.java is read from class file. We already have another report somewhere mentioning that reading null annotations from class file doesn't always work. I'll try to tie up these loose ends soon.
We have a bug in decoding type annotations of a static nested type.

in LookupEnvironment.getTypeFromSignature() we find a type with a depth() of 2 and thus populate an array
  [0] = {@NonNull}
  [1] = null

Passing this into AnnotatableTypeSystem.getAnnotatedType() places the annotation on the outer type, which is wrong.

This would be correct for a non-static inner class, but the static class doesn't allow any type annotations on the enclosing, hence the (single) array of annotations should be applied on the nested type.

I checked that the class file looks the same as what javac generates.


I made a quick-n-dirty change inside ATS by manipulating the indices i and j, which fixes this bug but causes regressions in 
 - TypeBindingTests308.test026()
 - TypeBindingTests308.test020()


This lets me think we need to resolve the type, and count off any static levels, prior to calling into ATS.
Created attachment 240702
draft patch

This seems to fix the current bug without breakage in TypeBindingTests308.
Srikanth, this is not a polished and fully tested patch, but if you have a minute I'd appreciate a comment (a) whether this should be the right direction, and (b) whether this is suitable for GA, after due diligence.
(In reply to Stephan Herrmann from comment #6)
> Srikanth, this is not a polished and fully tested patch, but if you have a
> minute I'd appreciate a comment (a) whether this should be the right
> direction, and (b) whether this is suitable for GA, after due diligence.

Having only glanced through the patch - the overall approach is OK, I had
to do similar things for attaching annotations at the right level earlier 
i.e force resolve (when absolutely necessary)

So, yes, proceed to put together a final version. 

I have Jay to also verify the fix as it stands now.
(In reply to Srikanth Sankaran from comment #7)
> I have Jay to also verify the fix as it stands now.

Jay found no issues with the patch as it stands - I am also OK with the
overall approach, please proceed to propose a final patch. Thanks.
Created attachment 240761
extended patch

I added more tests and made the fix more robust.

While doing so I found a code-clone that suffered from the same problem, of not correctly decoding annotations on nested/inner types. Test added in TypeBindingTests308 (fails without the fix).

Please review this version. TIA.
I noticed that for org.eclipse.jdt.core.tests.compiler.regression.NullAnnotationTest.testBug424624()

(testing without the fix)
the warning shows up only for incremental builds - this is perhaps because
full build picks the STB vs BTB in the case of incremental build.

May be there could be a test that verifies that in incremental builds the
problem does not show up - I did verify in the IDE with the fix.

I spent some time trying to satisfy myself that we won't eagerly resolve
symbols when not required - this indeed looks to be the case - I think we
should see empty walkers unless there are type annotations at some level.

Under those circumstances, opting for resolution is fine - 

Patch looks good. Thanks Stephan.
(In reply to Srikanth Sankaran from comment #10)

> May be there could be a test that verifies that in incremental builds the
> problem does not show up - I did verify in the IDE with the fix.

I think this is already observed in comment#3 and I do see files being
compiled separately by the test. So this should be fine.
Thanks, Srikanth,

(In reply to Srikanth Sankaran from comment #10)
> I spent some time trying to satisfy myself that we won't eagerly resolve
> symbols when not required - this indeed looks to be the case - I think we
> should see empty walkers unless there are type annotations at some level.

Yes, and additionally we resolve only if depth indicates that a '$' has been seen, the same condition that also AnnotatableTypeSystem.getAnnotatedType() already uses to see if resolve is needed :)
 
> Under those circumstances, opting for resolution is fine - 
> 
> Patch looks good. Thanks Stephan.

Thanks, released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=dc444b8320482476925f9f5e1514794476164a28
