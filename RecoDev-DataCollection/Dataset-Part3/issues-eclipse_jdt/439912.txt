This is probably not one of the most important features, but when I have:

    int i = (1 + 2);

And when I put the cursor here:

    int i = (1 + 2);
           ^       ^

Then I can hit Ctrl+1 and there's an option to "Remove extra parentheses". This is not the case with a lambda expression where the same should be possible as well:

    Consumer<Integer> c = (i) -> {}

Similarly, there should be a quick fix to add such parentheses

    Consumer<Integer> c = i -> {}

This is probably not one of the most important features, but when I have:

    int i = (1 + 2);

And when I put the cursor here:

    int i = (1 + 2);
           ^       ^

Then I can hit Ctrl+1 and there's an option to "Remove extra parentheses". This is not the case with a lambda expression where the same should be possible as well:

    Consumer<Integer> c = (i) -> {}

Similarly, there should be a quick fix to add such parentheses

    Consumer<Integer> c = i -> {}
Quick fix is done in UI.
Created attachment 251768
additional unit test

possible unit test for org.eclipse.jdt.ui.tests.quickfix.AdvancedQuickAssistTest
(In reply to Lukas Eder from comment #0)
>     int i = (1 + 2);
> Then I can hit Ctrl+1 and there's an option to "Remove extra parentheses".

This is exactly ensured by the test:
org.eclipse.jdt.ui.tests.quickfix.AdvancedQuickAssistTest.testRemoveExtraParentheses2()

The counterpart operation also exists:
     int i = 1 + 2;
            ^     ^

There is a QuickFix: “Put '+' expression in parentheses”
A unit test for that could look like the one attached in Attachment 251768

The case you have described with is something else; the LambdaExpression node seems to have 2 parameters [by looking at the AST View]:
* PARENTHESES (boolean)
* PARAMETERS (a list or an array)

The described QuickFix is only possible if PARAMETERS.size == 1. Only in this case inverting the value of the PARENTHESES boolean makes sense.

Think of those constructs:
a/
        Runnable r = () -> System.out.println("Hello world!");

b/ 
        Comparator<String> c = (String s1, String s2) -> {return s1.length() - s2.length();};

Removing the parentheses in those cases is not possible.

---

The current "Remove extra parentheses" quick fix is a org.eclipse.jdt.internal.ui.text.correction.proposals.FixCorrectionProposal linked to a org.eclipse.jdt.internal.ui.fix.ExpressionsCleanUp

I do not think that the quick fix described in this bug should be connected to the ExpressionsCleanUp.
When I have:
    Consumer<Integer> c = (i) -> {}

I do not think that those parentheses belong to the UnnecessaryParenthesis category of the clean-up. The QuickFix is a good idea, but probably not as CleanUp.

---

My next move will be to check is the suggested quick fix can be implemented as org.eclipse.jdt.ui.text.java.correction.ASTRewriteCorrectionProposal
New Gerrit change created: https://git.eclipse.org/r/44339
I think I have a solution, see my Gerrit Change:

https://git.eclipse.org/r/44339

I hope someone will be able to provide me Feedback. Especially for the 2 tests that are failing. I am still investigating it, but I do not think that I have something the 2 test failures.
(In reply to Jeremie Bresson from comment #5)
> I think I have a solution, see my Gerrit Change:
> 
> https://git.eclipse.org/r/44339

The patch needs better checks.

In the following example, replace '|' with the caret at [1] and [2], and press Ctrl+1. The quick assist "Remove parentheses..." should not be available at those places.

------------------------------------------------------------------------
package p;

import java.util.function.Consumer;

public class C1 {
	Consumer<String> c1 = |(String s) -> System.out.println(s); // [1]
}

@SuppressWarnings("unused")
class C2 {
	Consumer<String> c1 = (s1) -> {
		System.out.println(|s1); // [2]
		Consumer<String> c2 = s2 -> System.out.println(s2);
	};
}
------------------------------------------------------------------------

Also, the text of quick assists should say "... lambda parameter", not "... parameters".
Thank you so much for your feedback. I really appreciate it.

> In the following example, replace '|' with the caret at [1] and [2], and
> press Ctrl+1. The quick assist "Remove parentheses..." should not be
> available at those places.

I have found another expression where you cannot remove the parenthesis:

    Consumer<String> c1 = (String s1) -> {};

=> I will add a test for that.

You also right, I need to reduce the scope where the new quick fix appears. Can we agree on this?

* For addition:
    Consumer<String> c1 =| s1 -> {}; //here and before NOK
    Consumer<String> c1 = |s1 -> {}; // OK
    Consumer<String> c1 = s|1 -> {}; // OK
    Consumer<String> c1 = s1| -> {}; // OK
    Consumer<String> c1 = s1 |-> {}; //here and after NOK

* For removal:
    Consumer<String> c1 = |(s1) -> {}; //here and before NOK
    Consumer<String> c1 = (|s1) -> {}; // OK
    Consumer<String> c1 = (s|1) -> {}; // OK
    Consumer<String> c1 = (s1|) -> {}; // OK
    Consumer<String> c1 = (s1)| -> {}; //here and after NOK

I will fix my change according to this and propose some unit tests to ensure that it works as intended.

> Also, the text of quick assists should say "... lambda parameter", not "...
> parameters".

I also will fix this.
New Version of the patch was uploaded (patch set 3) and rebased (patch set 4).
I tested it again this morning.
Build is Green.
For me it is good to merge (or I wait for additional feedback)
(In reply to Jeremie Bresson from comment #7)
> * For addition:
>     Consumer<String> c1 = s1 |-> {}; //here and after NOK
> 
> * For removal:
>     Consumer<String> c1 = |(s1) -> {}; //here and before NOK
>     Consumer<String> c1 = (s1)| -> {}; //here and after NOK

The behavior mentioned above is not correct. Quick assists should be available when Ctrl+1 is pressed anywhere in the range of lambda parameter including parentheses and arrow operator. See other related quick assists.

Other review comments:
- Follow JDT/UI coding conventions and formatting. Update headers in the files. Go through: https://wiki.eclipse.org/JDT_UI/How_to_Contribute
- Move the new method from AdvancedQuickAssistProcessor to QuickAssistProcessor where other lambda related quick assists are present.
- See QuickAssistProcessor.getAddInferredLambdaParameterTypes(..) for initial checks.
- Update the tests accordingly and move the tests to AssistQuickFixTest18 since these are Java 1.8 specific tests.
Gerrit change https://git.eclipse.org/r/44339 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=7187d44572e34b49148f95edb1cec386e4e8ca92
(In reply to Eclipse Genie from comment #10)
> Gerrit change https://git.eclipse.org/r/44339 was merged to [master].
> Commit:
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=7187d44572e34b49148f95edb1cec386e4e8ca92
> 

Updated the patch with changes required in comment #9 and released.
I never took the time to tell you that I was very pleased to see that you have changed the code as you suggested in comment #9.

Your comment came during my holidays and I hadn’t the bandwidth to work on this at the time. You were quicker than me.

I have tested the enhancement in the Mars Version of the IDE. I think it work as expected.
