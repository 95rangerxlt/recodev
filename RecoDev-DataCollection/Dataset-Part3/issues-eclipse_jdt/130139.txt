After applying the cleanup wizard on our sources, we noticed some parts of our program failing to work properly, although they compiled well. Our program processes command line output of a console application to display it in a GUI. 

The following test class reproduces the problem:

public class Testcase
{
  public static void main(String[] args)
  {
    String[] test = "See also:\n  www.google.de\n  www.wikipedia.org\n\nSome additional text here".split("\n");

    System.out.println("You may also look at these sites:");
    for(int i = 0; i < test.length; i++)
    {
      if(test[i].contains("See also:"))
      {
        for(int x = i + 1; x < test.length; x++)
        {
          if(!test[x].startsWith("  "))
            break;
          System.out.println(test[x].trim());
        }
      }
    }
  }
}

After applying the cleanup wizard, the code looks as follows:

public class Testcase
{
  public static void main(String[] args)
  {
    String[] test = "See also:\n  www.google.de\n  www.wikipedia.org\n\nSome additional text here".split("\n");

    System.out.println("You may also look at these sites:");
    for(int i = 0; i < test.length; i++)
    {
      if(test[i].contains("See also:"))
      {
        for(String element : test)
        {
          if(!element.startsWith("  "))
            break;
          System.out.println(element.trim());
        }
      }
    }
  }
}

The first for-loop is kept (I think as the wizard realizes that the loop variable is used), but the inner loop is altered. The cleanup wizard should pay attention for such cases, as those logical errors are hard to find, especially as the affected class worked properly since a few months.

After applying the cleanup wizard on our sources, we noticed some parts of our program failing to work properly, although they compiled well. Our program processes command line output of a console application to display it in a GUI. 

The following test class reproduces the problem:

public class Testcase
{
  public static void main(String[] args)
  {
    String[] test = "See also:\n  www.google.de\n  www.wikipedia.org\n\nSome additional text here".split("\n");

    System.out.println("You may also look at these sites:");
    for(int i = 0; i < test.length; i++)
    {
      if(test[i].contains("See also:"))
      {
        for(int x = i + 1; x < test.length; x++)
        {
          if(!test[x].startsWith("  "))
            break;
          System.out.println(test[x].trim());
        }
      }
    }
  }
}

After applying the cleanup wizard, the code looks as follows:

public class Testcase
{
  public static void main(String[] args)
  {
    String[] test = "See also:\n  www.google.de\n  www.wikipedia.org\n\nSome additional text here".split("\n");

    System.out.println("You may also look at these sites:");
    for(int i = 0; i < test.length; i++)
    {
      if(test[i].contains("See also:"))
      {
        for(String element : test)
        {
          if(!element.startsWith("  "))
            break;
          System.out.println(element.trim());
        }
      }
    }
  }
}

The first for-loop is kept (I think as the wizard realizes that the loop variable is used), but the inner loop is altered. The cleanup wizard should pay attention for such cases, as those logical errors are hard to find, especially as the affected class worked properly since a few months.
Has probably nothing to do with nested loops. Simpler test case:

public class Try {
    public Try(String[] strings) {
        int x= 0;
        for (int i= x; i < strings.length; i++)
            System.out.println(strings[i]);
    }
}

The quick fix must not be applicable unless the variable is initialized with 0.
fixed > I20060301-0800

I agree, this is a bad one. The bug was there before but clean up makes it 100 times worse. 

Also no quick assist should be applicable in the following:
package test;
public class E {
    public void foo(String[] strings) {
        for (int i= x(); i < strings.length; i++) {
            System.out.println(strings[i]);
        }  
    }
    private int x(){
        return 0;
    }
}

ConvertForLoopOperation should only allow the quick assist if it is initialized with the number literal 0. Until now it was disalowed if it was initialized with an number literal other then 0 and allowed in any other case...
*** Bug 132544 has been marked as a duplicate of this bug. ***
