Back in version 3.7 of the Eclipse Java IDE, when you checked the box "public static void main(String[] args)", it would generate the main method, but the next time you created a class with the wizard, that box would not be checked.

Now that I am using version 4.2, I am noticing that the check box stays checked. This is annoying because most of the time, when creating a class, you don't need a main. It is a special case. So the default should be unchecked, not whatever the previous state of the box was.

It would be nice if the behaviour returned to the original, that is, that the box always starts out as unchecked.

Back in version 3.7 of the Eclipse Java IDE, when you checked the box "public static void main(String[] args)", it would generate the main method, but the next time you created a class with the wizard, that box would not be checked.

Now that I am using version 4.2, I am noticing that the check box stays checked. This is annoying because most of the time, when creating a class, you don't need a main. It is a special case. So the default should be unchecked, not whatever the previous state of the box was.

It would be nice if the behaviour returned to the original, that is, that the box always starts out as unchecked.
This was fixed (see bug 376688) on purpose and now works as designed.
Just because someone changed the behaviour and made a bug ticket for it doesn't mean the change is necessarily correct. :)

I would be curious to understand why it was considered practical to remember the main check box? This is not explained in the referenced ticket. I would imagine that more often than not, people would like to create a non-main method after creating a main. A main is really a corner case class that, to use myself as an example, I create maybe a couple a month tops.

However, now with this change, I end up creating several classes with an accidental main until I remember to uncheck it, and it is a little bit irritating. I created this ticket after a coworker mentioned a similar frustration.

I would imagine the decision to go forth with bug 376688 had some kind of use case driving it. I would be curious to know what it is.

Thank you.
Just for clarity, my beef is with the "main" check box. The other two (abstract methods and superclass constructors), I personally would be happy either way.
I agree that the "main" method checkbox is a special case that should not be persisted (always off by default).
(In reply to comment #4)
> I agree that the "main" method checkbox is a special case that should not be
> persisted (always off by default).

I disagree. The whole group should be persisted or not persisted. Note that we always persisted the values until it got accidentally broken (not changed on purpose) in R3.2. So, we should either leave it as is, or not remember any of those values and remove the corresponding code. I'm fine either way.
This is not about consistency. It's about choosing the right solution for the 99% use case.

We generally do persist user settings, but the "main" checkbox is not a user setting like the other two checkboxes in that section, but it's a one-time configuration option, like the name and the supertype fields.

I'll fix this.
+1

This thing has bugged me way too often.
Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=aa12c6c3f4bc44b8e19b64d3f7938badc4a4c627
I don't want main() to be sticky either. However, a workable compromise would be to add the generation of a template main() to the editor Source context menu (where generating getters and settings is done, for example). And remove the stickiness as Michel Parisien suggests. This would solve the problem for both sides: if you wanted main(), but forgot to check the box, you can still get it with an action simpler than deleting the class and re-running the wizard.
Comment 8 removed the stickiness of the main() checkbox.

If you want to add a main method to an existing class, use the "main" template (e.g. type "main<Ctrl+Space><Enter>").
