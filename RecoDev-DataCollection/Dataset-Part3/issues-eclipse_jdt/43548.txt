If you have something like this in your code:

java.util.HashMap map = new HashMap();

Then select "java.util.HashMap" and do "Add Import", it
works fine. 

Now, if you have a long package name, and it is on multi-line
(result of a code formatting, also an Eclipse feature), like:

com
    .your
    .domain
    .and
    .package
    .name
    .Weird weird = new 
        com
            .your
            .domain
            .and
            .package
            .name
            .Weird();

In this case, if you select the class name along with the package
name, and do "Add Import", that does not work.

Sometimes, it does actually add the import statement (but not 
always, not consistent), but it does not get rid off the
long package name in the code.

On a single line statement, you can just select the class name
(not the entire class name and package name), and add import works
fine. On multi-line, this would throw Eclipse off.

If you have something like this in your code:

java.util.HashMap map = new HashMap();

Then select "java.util.HashMap" and do "Add Import", it
works fine. 

Now, if you have a long package name, and it is on multi-line
(result of a code formatting, also an Eclipse feature), like:

com
    .your
    .domain
    .and
    .package
    .name
    .Weird weird = new 
        com
            .your
            .domain
            .and
            .package
            .name
            .Weird();

In this case, if you select the class name along with the package
name, and do "Add Import", that does not work.

Sometimes, it does actually add the import statement (but not 
always, not consistent), but it does not get rid off the
long package name in the code.

On a single line statement, you can just select the class name
(not the entire class name and package name), and add import works
fine. On multi-line, this would throw Eclipse off.
this works now in 3.2 (maybe already in 3.1)
