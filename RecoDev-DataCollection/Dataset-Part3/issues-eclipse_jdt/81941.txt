The classes 

org.eclipse.jdt.internal.corext.text.comment.CommentFormatterPreferenceConstants;
--and--
org.eclipse.jdt.internal.corext.text.comment.CommentFormatterConstants;

have been changed in M4 (relative to M3) to include *private* constructors. 
This means they now can be neither extended nor implemented.  Should be made
interfaces, instead.

The classes 

org.eclipse.jdt.internal.corext.text.comment.CommentFormatterPreferenceConstants;
--and--
org.eclipse.jdt.internal.corext.text.comment.CommentFormatterConstants;

have been changed in M4 (relative to M3) to include *private* constructors. 
This means they now can be neither extended nor implemented.  Should be made
interfaces, instead.
Any *.internal.* classes are internal and may change without prior notice at any
time. You may use (instantiate, cast, implement, extend) them at your own risk.
A rather strange response.  Of course, internal is subject to change.  That
internal code changed was not the point.

The real point is that not even *you* can extend, implement, cast or instantiate
those classes.  The addition of a private constructor to a class containing only
constants is, well, just not decent coding -- I was sure it was only oversight,
but one worth being noted.  

As a practical matter, having to use improbably long class names to reference
contant names that are so long as to be inescapably unique makes for unreadable
code.  

Anyway, from the comments in the code, the comment formatter is appropriately
intended to become public -- hopefully as soon as the 3.1 final release.  This
bug will need to be fixed by then.

Reopen/defer or ignore as you see fit.
Code quality also matters in internal classes:

If we mark the constructor as 'private' then the class should be marked 'final'
as well, this signals that we really intended to have no sub-classes. Otherwise
the constructor's visibility should be changed to 'protected' and throw an
exception (e.g. IllegalStateException).

The constant names are too long: we should remove the leading
"FORMATTER_COMMENT_". The long class names are OK.

Perhaps academic, but I am not sure I see the reasoning for maintaining this
file as a final, private constructor class, rather than changing it to an
interface.  Would not the only difference be that an interface could still be
used in an 'implements' clause.  Or am I missing something?

Anyway, I appreciate your considering the issue.  FWIW, my JDocEditor plugin
(www.certiv.net) makes heavy use of the comment formatter with quite excellent
results.  Thanks for all the hard work.

- Gerald
Gerald, exporting constants through an interface is bad design, I know I know
this is done in Eclipse at several places :-(. A good explanation can be found
in Josh Block's Effective Java book.

>my JDocEditor plugin
>(www.certiv.net) makes heavy use of the comment formatter
Heads-up: the comment formatter will be moved down to JDT Core (presumably soon,
should be in 3.1 M5).
Ok, managed to read a portion of Bloch's book -- I think he is the author you
intended.  The portion that seemed relevant concerned typesafe enums.  I agree
that a final, private constructor class for closing a set of enums is proper.  

Forgive me if I am missing something fundamental here, but the constants in this
file are not an enum set; no matter how I extend the class, given that the
constants themselves are static final, I cannot affect the individual names or
values of the existing constants.  Although someone could logically add to the
group of constants, when implemented in a constructorless class or interface,
Eclipse itself cannot be affected.  Since the constants are mutually
independent, discretely valued entities, not equivalence set members, Eclipse
must test for the constant values explicitly.  What formatter constant value
could be added that would affect the preexisting formatter state machine.  So,
at least the way I understand, there is nothing to protect by constraining the
file to anything more rigorous than an interface.  Or am I thinking too concretely?

While I enjoy the discussion, and would appreciate continuing, I do recognize
that, as a practical matter, referencing API values in a proper enum class is
little more difficult than referencing API interface constants.

Finally, by moving the comment formatter to the JDT core, I am hoping that you
will also make it public, effectively in parallel with the code formatter.  

Recognizing that the comment formatter classes were internal, I have isolated my
dependencies into a single helper class.  I am expecting to be able to determine
platform version on initialization and choose to instantiate either an M4 or M5
variant of the helper class.

Best wishes for a Happy New Year,
Gerald
Best wishes for 2005 to you too, Gerald.

Sorry I don't have the book at hand here at home. There's a special item about
constants unrelated to enums. I'll provide you the item when I'm back in the office.

It's Item 17: Use interfaces only to define types
Interesting.  I do not have that part of the book at hand, but I have come to
the conclusion that, rather than interface constants being bad, there is simply
a "more proper" pattern for handling constants.  The pattern is:
1) define public static final constants in a public final class with a private
constructor; and
2) optionally reference the constants from another class by declaring a local
static final field variable to the constant class.

Seems that the point I missed was that imports can have value collisions. 
Public static final does prevent overriding/overloading, but importing two
interfaces does raise the possibility that different constants may be defined by
the same value (interface dog defines BICHON = 1 and interface cat defines
PERSIAN = 1 leads to the improbable conclusion that BICHON.equals(PERSIAN) --
the JDK1.5 option of importing individual constant values does not look to be of
much help).

The second step maintains clear (sub)namespaces while minimizing the particular
problem of having to repeat impossibly long or at least distractingly long class
names on every constant reference:
static final UnitedStatesAmericanKenelClubPedigreedToyClassDogs toyDogs;
static final UnitedStatesAmericanKenelClubPedigreedToyClassCats longhairCats;  

Note, this does not absolutely preclude
toyDogs.BICHON.equals(longhairCats.PERSIAN), but the intent of the code is far
clearer.

Unfortunately, Eclipse warns against field references to static constants, even
if the field itself is static.  Eclipse instead prompts to sub in the full name
of the constant class.  Marking the local static field as final seems to fix
that problem, yet produces an Eclipse "variable possibly uninitialized" error
instead.  And, since the constant class constructor is private, we have paradox. 

Would the proper solution be to make Eclipse a bit smarter about how and when it
concludes the warning and/or error message is proper.  I would think to
condition the warning about static references on whether the field through which
the reference is being made is also static.  The uninitialized error should also
be similarly deferred until the nature of reference is known.

Thoughts?

Thanks,
Gerald
Constants in interfaces are bad because once a programmer uses the shortcut to
let a public API class implement a constant interface you actually declare the
constants as being part of the API of that class. Imagine the following:

public class Circle implements Constants; // Constants defines Pi and others
==> Pi is now part of a Circle's interface which is simply wrong.

Please file a bug report against JDT Core if problem reporting does not fit your
needs.
This has been fixed during the push down of the Java comment formatter to JDT Core.
