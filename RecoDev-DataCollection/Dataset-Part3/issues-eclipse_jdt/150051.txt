AptConfig.getProcessorOptions(IJavaProject) does not resolve variables (like %ROOT% and %PROCESS.DIR%) in the APT option values. Currently, these variables are only resolved during annotation processing. There are cases, where we would need to get the APT option values outside the context of annotation processing and in these cases we get back raw unresolved values.

Even EnvironmentFactory.getEnvironment(compilationUnit, compilationUnit.getJavaProject()).getOptions() does not give back resolved values.

We need some way of getting back these resolved values either through a new API or changing existing ones.

AptConfig.getProcessorOptions(IJavaProject) does not resolve variables (like %ROOT% and %PROCESS.DIR%) in the APT option values. Currently, these variables are only resolved during annotation processing. There are cases, where we would need to get the APT option values outside the context of annotation processing and in these cases we get back raw unresolved values.

Even EnvironmentFactory.getEnvironment(compilationUnit, compilationUnit.getJavaProject()).getOptions() does not give back resolved values.

We need some way of getting back these resolved values either through a new API or changing existing ones.
We can do this by pulling the initOptions() and resolveVarPath() methods up from AbstractProcessorEnv to BaseProcessorEnv.  Of course, the map returned from BaseProcessorEnv still won't have processing-specific values like "phase", but otherwise it would be useful.

It would also be good to fix AptConfig.getProcessorOptions() so that it returns fully resolved values that are consistent with the value returned from BaseProcessorEnv.  To do that, I'll need to do a bit of refactoring (pull the processing out of the Env classes and into some sort of utility class; or perhaps just move it all into AptConfig).
Fixed in HEAD.  Needs to be merged to 3.2.1.
Merged into 3.2.1 as of v20060712-1830
