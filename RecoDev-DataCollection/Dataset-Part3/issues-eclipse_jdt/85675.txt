Found in 3.1 M4

The best way to describe this problem is with an example. Create a plugin
project using Java 5.0 compliance and use the New Class wizard to create a
subclass of org.eclipse.core.runtime.jobs.Job, ensuring that the checkbox to
generate method stubs for inherited abstract methods is checked.

The wizard erroneously creates a method stub for the signature "public int
compareTo(T o)" from the Comparable<T> interface, from which Job indirectly
inherits. In fact this is not required because InternalJob is a legacy 1.4 class
which already supplies an implementation of compareTo(Object o). The generated
stub won't compile because "T" is not defined.

I think this would happen in any situation where we subclass from a pre-compiled
legacy (ie compiled against Java 1.4) API class which either directly or
indirectly inherits from a Generic interface.

Found in 3.1 M4

The best way to describe this problem is with an example. Create a plugin
project using Java 5.0 compliance and use the New Class wizard to create a
subclass of org.eclipse.core.runtime.jobs.Job, ensuring that the checkbox to
generate method stubs for inherited abstract methods is checked.

The wizard erroneously creates a method stub for the signature "public int
compareTo(T o)" from the Comparable<T> interface, from which Job indirectly
inherits. In fact this is not required because InternalJob is a legacy 1.4 class
which already supplies an implementation of compareTo(Object o). The generated
stub won't compile because "T" is not defined.

I think this would happen in any situation where we subclass from a pre-compiled
legacy (ie compiled against Java 1.4) API class which either directly or
indirectly inherits from a Generic interface.
that's fixed in M5
