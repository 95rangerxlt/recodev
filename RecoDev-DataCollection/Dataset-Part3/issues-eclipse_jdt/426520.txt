package bug.formatter;

import java.lang.annotation.*;

@Target(ElementType.TYPE_USE)
@interface T {
}

public class C {
	java.util.concurrent.@T Callable c;
	java.util.@T Set<java.lang.@T String> s;
}

The formatter inserts bad spaces after the package components of an annotated qualified type (but it seems to be afraid of touching a parameterized type):

	java. util. concurrent.@T Callable c;
	java.util.@T Set< java. lang.@T String> s;

package bug.formatter;

import java.lang.annotation.*;

@Target(ElementType.TYPE_USE)
@interface T {
}

public class C {
	java.util.concurrent.@T Callable c;
	java.util.@T Set<java.lang.@T String> s;
}

The formatter inserts bad spaces after the package components of an annotated qualified type (but it seems to be afraid of touching a parameterized type):

	java. util. concurrent.@T Callable c;
	java.util.@T Set< java. lang.@T String> s;
Please handle with priority.

This also shows up when creating new nodes using ASTRewrite, e.g. when you add this at the end of class C and then use the Quick Fix:

    class Callable {}
    void foo() {
        c2= c; // Create local variable
    }
Created attachment 239562
Proposed Patch
Routine defect fixes can be reviewed by JDT/Core committers themselves,
Let us use Markus for API reviews, questions and "non-routine" reviews
whatever that could mean
I hooked up the new suite into RunAllJava8Tests and RunOnlyJava8Tests,
added one more test and released it here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=1c367f9da4b67ddc705e012aa9c952ee4bdfc663

Thanks Manoj.
