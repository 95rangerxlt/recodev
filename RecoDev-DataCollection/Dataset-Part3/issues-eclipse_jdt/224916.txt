Build ID: M20070212-1330

The RefactoringHistoryService adds a RefactoringOperationHistoryListener to the DefaultOperationHistory, and it limits its number of undos to a hardcoded number of 5 (see MAX_UNDO_STACK in RefactoringHistoryService).  Let's say an operation is added into 2 contexts (see IUnodableOperation.addContext(undoContext)), the refactoring context and some other context.  In the DefaultOperationHistory, I call setLimit(undoContext, n) where n is a number greater than the hardcoded 5 in MAX_UNDO_STACK.

Now, it will become possible to undo more than 5 times, according to the DefaultOperationHistory framework.  Unfortunately, as the RefactoringOperationHistory listener maintains an internal stack which is only 5 levels deep, this will cause an exception as it looks for refactoring data that is out of the stack   It looks like it could be solved one of 2 ways.  First, the DefaultOperationHistory returns that it is not possible to undo after an operation with multiple contexts has exceeded the undo limit of any of its contexts, or second, the RefactoringOperationHistory supporting as many undos as required by any of the contexts of the operation.  The second choice seems more reasonable.

The exception ocurs in RefactoringHistoryService.peek() -- when undoing the 6th time, it will not find the RefactoringDescriptor and throw the EmptyStackException.

Build ID: M20070212-1330

The RefactoringHistoryService adds a RefactoringOperationHistoryListener to the DefaultOperationHistory, and it limits its number of undos to a hardcoded number of 5 (see MAX_UNDO_STACK in RefactoringHistoryService).  Let's say an operation is added into 2 contexts (see IUnodableOperation.addContext(undoContext)), the refactoring context and some other context.  In the DefaultOperationHistory, I call setLimit(undoContext, n) where n is a number greater than the hardcoded 5 in MAX_UNDO_STACK.

Now, it will become possible to undo more than 5 times, according to the DefaultOperationHistory framework.  Unfortunately, as the RefactoringOperationHistory listener maintains an internal stack which is only 5 levels deep, this will cause an exception as it looks for refactoring data that is out of the stack   It looks like it could be solved one of 2 ways.  First, the DefaultOperationHistory returns that it is not possible to undo after an operation with multiple contexts has exceeded the undo limit of any of its contexts, or second, the RefactoringOperationHistory supporting as many undos as required by any of the contexts of the operation.  The second choice seems more reasonable.

The exception ocurs in RefactoringHistoryService.peek() -- when undoing the 6th time, it will not find the RefactoringDescriptor and throw the EmptyStackException.
Moving JDT/UI
Yes, we should give the second suggestion a try. If you want to try a fix, don't hesitate to add a patch.
Can you provide us a small snippet/test case that demonstrates the problem?


What is strange is that:
> Let's say an operation is added into 2 contexts (see
> IUnodableOperation.addContext(undoContext)), the refactoring context and some
other context.

How can you do this? The refactoring context is internal, so you can't add it to your own operation.
And the refactoring operations are only created by us.
You are right that I cannot add the RefactoringContext, but it is possible to add some other context.  A small test case to demonstrate the problem is by adding an IOperationHistoryListener, then when historyNotification() is called, use OperationHistoryEvent.getOperation() and then on the operation call addContext(myContext).  This would result in having more than one context.
I'm not an expert on the undo history. Susan, can you help?

What does it mean if a operation has more than one context?
Who controls in what contexts an operation is?

Is it intended that an operation listener adds a context to a operation?


Listeners can add contexts to operations as a way of saying "I'm interested in this one, also."  A common example is that when a refactoring operation gets added, the text undo manager notices that this affects its file, and adds the text editor undo context to that same operation.  That is how text editors are able to present the refactoring operations in their undo history.

The intention with limits is that if the limit is reached for one undo context and the operation has multiple contexts, then the context is removed from the operation, but it still exists in the history with the other context.  

Probably the best way to handle it is to have the operation validation methods (either canUndo() or if it's expensive, computeUndoStatus(IProgressMonitor) detect the case in advance. 
fixed > 20080417

I refactored the code so that no stack is needed anymore.
Thanks a lot.  Much appreciated!
