When performing a 'sort' of members, the default sort ordering lists static initialisers above static field definitions. Whilst it may read well in this form, when sorting the file you can introduce errors:

class Problem {
  static int frog;
  static {
    frog = 2;
  }
}

Sort this (using the default sort ordering) and it becomes:

class Problem {
  static {
    frog = 2;
  }
  static int frog;
}

I believe that static initialisers must be after the static field definitions to avoid this problem.

Note that you will get the same error if you attempt to sort a constructor above (non-static) field definitions as well. Perhaps the sort ordering should be constrained so that static initialisers/methods cannot be sorted above static fields, and that instance methods/constructors cannot be sorted above instance fields (and static fields) to avoid the user creating this issue in the future.

When performing a 'sort' of members, the default sort ordering lists static initialisers above static field definitions. Whilst it may read well in this form, when sorting the file you can introduce errors:

class Problem {
  static int frog;
  static {
    frog = 2;
  }
}

Sort this (using the default sort ordering) and it becomes:

class Problem {
  static {
    frog = 2;
  }
  static int frog;
}

I believe that static initialisers must be after the static field definitions to avoid this problem.

Note that you will get the same error if you attempt to sort a constructor above (non-static) field definitions as well. Perhaps the sort ordering should be constrained so that static initialisers/methods cannot be sorted above static fields, and that instance methods/constructors cannot be sorted above instance fields (and static fields) to avoid the user creating this issue in the future.
Sort comparator issue. Moving to JDT/UI
Depends on 2.2 planning.
I am raising the severity of this bug since it has not yet been addressed, and
can introduce compilation failures when using the sort operator. It was not
addressed in 2.2 and it has yet to be addressed in 3.0
The current proposal is to overhaul the sort ordering feature for 3.0M2. This 
will be addressed when that happens. Bear in mind that sorting is not a 
refactoring. Sorting may introduce situations like the one below. Granted, the 
order of static fields and static initializers should default to something 
different.
As Randy pointed out this isn't a refactoring and there are no plans yet to 
convert it into one. So it is very likely that the current behaviour doesn't 
change as long as we don't get external help.
There are a whole set of more generalised cases where this sort ordering may need to be intelligent 
(such as when a field is defined in terms of another field's default value).

However, there are no circumstances where it is wrong to put the static initialiser below the static 
fields in the sort orders tab, and this bug can be trivially satisfied by changing the default sort 
orders of the members tab.

Note that whilst this bug may be satisfied by a complete overhaul and migration into a proper 
refactoring, there is a much simpler (albeit less powerful) solution which will solve this as described 
above.
Your comments are noted. Will keep them in mind when the sort members action is 
redone.
This bug is currently preventing me from using this function on several source
files in the platform-ui tree.  platform-ui might like to adopt "Sort Members"
as a coding standard.  Any ETA on this reaching the head?
You can control the sorting order on the preference page Java->Appearance
->Member Sort Order. 

Doing something smart will means that we might not honor the sorting order.
You don't need to do anything smart to solve this problem. You need to change the default sort 
order that Eclipse is shipped with. It is never sensible to put the static initialiser before the static 
field definitions, and changing the default sort order would (temporarily) fix this problem until 
things get smart.

This has been around since 2.1 and really should have been fixed before now. It also is a trivial fix, 
since it just involves updating the definition file for the order in which the members are sorted.
Thanks for the tip.  But, there is still the problem with referencing static 
members before they are declared.  Unless I'm missing something?

Plus, I agree with Alex's comment.  I'd even go so far as to say static 
initializers should never be *allowed* to occur before static field 
declarations (i.e., should not be available through a user preference).

Do we really want a feature in Eclipse that breaks our users' source code?
The original bug report was because the default was to put the static initialiser before static 
definitions, which breaks code.

It seems to have been hijacked to mean 'do more smart sorting in members' which was not the 
point of the original bug. One of the reasons why it wasn't fixed in 2.2 was because the 'do 
something smart in sorting members' was pushed out of the 2.2 build.

The comments in #4, #8 and #11 support the fact that default should be for the static initialiser to 
be sorted after the static field defs, and it can easily be fixed by changing the default prefs file. 
(I'm not sure how the default prefs are stored/generated in the build process, but it used to be 
stored in an XML file once generated)

This bug can then be fixed, and a more generic bug of circular dependencies (which was /not/ this 
original bug, though it seems to be talking about it) can be opened for continued fixing.
Created attachment 7313
This sets static fields before static initializers in the default setting.

Martin, could you release? Thanks.
Created attachment 7541
sorts visibility for methods

+ Adds a sort by visibility to the methods
+ Options are saved and reflected in sort
- There are a few TODOs to pay attention to. Especially the reading of the
visibility ordering string which isn't picked up appropriately.
released silvios patch.
randy's patch reworked and released (should have been attached to a different
bug report).

> 20040126
verified fixed.
actually, there is still the same problem with non-static initializers and
fields. We should be consistent there.
I'm using 3.0M7 with static initializers set in the sort order below static
fields. When I sort code with initialization in the field declaration, I end up
with code that doesn't compile. For example:

    private static final Pattern BSX_REGEX = Pattern.compile("[" +
        BUY + SELL + CROSSED + DEALER_SOLD_SHORT + DEALER_SOLD_SHORT_EXEMPT +
        SELLER_SOLD_SHORT + SELLER_SOLD_SHORT_EXEMPT + QSR_OR_AGU_CONTRA_SHORT +
        QSR_OR_AGU_CONTRA_SHORT_EXEMPT + "]");

ends up sorted before

    public static final String BUY = "B";

which it needs to compile.

What would be helpful for me is more options in Sort Members, so that I could
exclude static fields, only sort public methods, or only sort members within a
text selection.
The problem is that this bug is being used to represent 2 separate cases:

1) Having static initialisers before static field definitions (now fixed)
2) Having the sort for field definitions before they are used (as commented in 
#9 and #18).

In the end, this bug spent the early part of its life trying to address point 
2, whilst point 1 was an easy fix.

Now that point 1 has been addressed, point 2 is still open. In general, 
regardless of the relative positioning of the static initialiser block, sorting 
members results in an alphabetical list regardless of what order they must be 
desired. Either this bug should be used for point 2, or a new one should be 
opened to cater for the situation described in #18.
Since I can't find that a new bug was opened concerning the still existing 
issues, I'd like to propose a solution to the problem in #18.

It would be great if some elements (e.g. static and non-static fields) could be 
marked as "sort as whole" (something like that) in the sort order. This gives 
developers the possibility to structure/group/sort their fields manually as 
appropriate (including blank lines), while the "global" search order (T, SF, SI, 
SM, F, I, C, M) is respected as well as the "local" sort order within the 
un-marked blocks.

Thus, something like that

  public static final int DEFAULT_SIZE = MEDIUM;

  public static final int SMALL = 1;
  public static final int MEDIUM = 2;
  public static final int BIG = 3;

would still be possible while e.g. methods are sorted alphabetically.

This workaround would be perfect for me, otherwise the sort members 
functionality is almost worthless due to breaking the code by causing the 
problems commented in #18.
*** Bug 54124 has been marked as a duplicate of this bug. ***
fixed the default sort order to sort (normal) fields before initializers.
opened bug 92782 for the problem of sorting fields even if they reference each
other.
