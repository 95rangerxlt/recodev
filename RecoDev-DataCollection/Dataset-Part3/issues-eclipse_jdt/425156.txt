This happens only when the parameter of the method being invoked is a parameterized type with wildcard. Here is an example:

interface I<T> {
    void foo(T t);
}
public class X {
    void bar(I<?> i) {
        i.foo(null);
    }
    void run() {
        bar((X x) -> {}); // Incompatible error reported
    }
}

The reported error:
The method bar(I<?>) in the type X is not applicable for the arguments ((X x) -> {
})

The error goes away when bar() is rewritten to be "void bar(I<X> i)"

This happens only when the parameter of the method being invoked is a parameterized type with wildcard. Here is an example:

interface I<T> {
    void foo(T t);
}
public class X {
    void bar(I<?> i) {
        i.foo(null);
    }
    void run() {
        bar((X x) -> {}); // Incompatible error reported
    }
}

The reported error:
The method bar(I<?>) in the type X is not applicable for the arguments ((X x) -> {
})

The error goes away when bar() is rewritten to be "void bar(I<X> i)"
I suspect some same underlying problem is contributing to multiple failures
in different scenarios ?
Created attachment 238940
work in progress

Here's my today's status for this bug, which shuffles around bits and pieces of lambda resolution => I wouldn't mind a second pair of eyes :)

LE.isCompatibleWith specifically lacked the part of 15.27.3 where they define a "ground target type". We had part of that in LE.resolveType which I extracted into a new method LE.findGroundTargetType().

This revealed that here we still missed the part about "the non-wildcard parameterization (9.8) of the target type.". This was covered in PTB.getSingleAbstractMethod(), so I extracted that section, too, into a new method PTB.getNonWildcardParameterization().

At this point the example in this bug compiles fine, with the following sacrifices:

- after moving around sections inside LE.isCompatibleWith() the block inside "if (this.assistNode)" is no longer valid, because the sam is now computed only below this point (see the FIXME).

- I saw duplicate reporting of sam problems, my fix to this is somewhat clumsy.

- 10 other tests (from RunAllJava8Tests) change their output, some might be OK, but probably not all. A common theme is: we accept more lambdas as compatible (that's what this bug is all about) which leads to more cases of reporting ambiguous methods.

So, either my solution is too radical, accepting too many lambdas, or, this fix reveals that we need a real, inference base implementation of "18.5.4 More Specific Method Inference", to better select from multiple candidates.

I'll draft an implementation for 18.5.4 soon, to see if that improves the situation in this bug.
With my draft implementation in bug 423505 in place, the number of regressions in this bug went down from 10 to 9, not a real break through :-/

Back to debugging ...
OK, I found a couple of bugs, which could be easily fixed once identified:
- don't set LE.resolvedType if no sam can be found, would be wrongly seen
  as compatible
- after reshuffling stanzas in LE.isCompatibleWith() we must ensure that
  lookup of the sam always occurs before answering true

All remaining effects on tests look acceptable to me: we report more errors in some cases, but it's more like reporting secondary errors (where it's not always clear which error *is* the primary one), no tests changing from pass to fail. One test (OverloadResolutionTest8.test004()) now actually reports 2 errors which we wanted to see earlier, but failed.

With this the bug can be closed independently of bug 423505.

I'm leaving a FIXME inside LE.isCompatibleWith() which will probably become obsolete once the shape analysis story is revisited.

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=a06fd70a66cd192fe200df3baf9406d9e87b6313
