Build Identifier: 3.6.2. Build id: 20120216-185

Not sure if this is JPA related or JDT related, however I met this during playing with JPA and Hibernate annotations.

Use this code:
package org.jira;

import javax.persistence.Entity;
import javax.persistence.Id;

import org.hibernate.annotations.Index;
//import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;

@Entity(name="EntityWithType")
@TypeDef(name="encryptedPasswor", typeClass=org.jira.EncryptedStringType.class,
parameters = { @Parameter(name="password", value="blah blah blah.") })
public class EntityWithType { @Id private int id; @Index(name = "rrr") @Type(type = "encryptedPasswor") private StringBuilder typeClass; }

There is no quick fix import for inner @JPA or @Hibernate annotation (@Parameter in this case)

Reproducible: Always

Steps to Reproduce:
1. Create Class
2. See description, paste code or anything similar (@annotation with inner @Annotations defined)
3. Try quickfix there is no import suggestion for inner annotations

Build Identifier: 3.6.2. Build id: 20120216-185

Not sure if this is JPA related or JDT related, however I met this during playing with JPA and Hibernate annotations.

Use this code:
package org.jira;

import javax.persistence.Entity;
import javax.persistence.Id;

import org.hibernate.annotations.Index;
//import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;

@Entity(name="EntityWithType")
@TypeDef(name="encryptedPasswor", typeClass=org.jira.EncryptedStringType.class,
parameters = { @Parameter(name="password", value="blah blah blah.") })
public class EntityWithType { @Id private int id; @Index(name = "rrr") @Type(type = "encryptedPasswor") private StringBuilder typeClass; }

There is no quick fix import for inner @JPA or @Hibernate annotation (@Parameter in this case)

Reproducible: Always

Steps to Reproduce:
1. Create Class
2. See description, paste code or anything similar (@annotation with inner @Annotations defined)
3. Try quickfix there is no import suggestion for inner annotations
I see the issue, I'm reassigning to JDT since this problem is not specific to Dali and JPA
Moving to JDT.UI
This is only a problem for nested annotations with an argument list. Works fine in the example below on @Nested when I remove the (). Same behavior in 3.6.2 and in master.

The implementation of the quick fix uses content assist after "@N" (see SimilarElementsRequestor#process(..)). This works fine for marker annotations, but it doesn't work for normal annotations.


Self-contained example:

package myannotations;
public @interface Outer {
	Nested[] nest();
}

package myannotations;
public @interface Nested {
}

package mymyclass;
import myannotations.Outer;
@Outer(nest= {@Nested()})
public class MyClass {
}
Thanks Markus, i'll take a look
Jay, this needs to be addressed for 4.4.
Anirban, please take it forward.
Created attachment 238052
Attaching code patch and testcase

Code and test case patch.
I'll take over this one.
Created attachment 242061
Synced up patch

Patch updated to apply with HEAD. I didn't review the patch, but did some testing and found it to fix the issue.
(In reply to Jayaprakash Arthanareeswaran from comment #9)
> Created attachment 242061 [details]
> Synced up patch
> 
> Patch updated to apply with HEAD. I didn't review the patch, but did some
> testing and found it to fix the issue.

Thanks, I am not familiar with this area - the whole (existing) machinery around
fake types is a kludge. While I did study the patch and find nothing wrong with it,
we have  no experts left for code assist (not only do we have no experts left,
we have no owner for code assist any more) 

So this review by a non-expert and the black box testing Jay did in comment#9 
will have to do for now.

Fix and test released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=ad3ff878b34a7bd9fdf182c96c6fcce95bcbf6a2
This needs to be back ported to Juno. Dani, can you please approve?
(In reply to Jayaprakash Arthanareeswaran from comment #11)
> This needs to be back ported to Juno. Dani, can you please approve?

The original bug was about Quick Fix not working. When I tried the steps from comment 3 with removed "()", Content Assist worked, but not Quick Fix. I then tried over and over a few times and suddenly it did work sometimes. I then realized that JDT Core reports two errors for the same issue:

1) Nested cannot be resolved to a type	MyClass.java	line 3	Java Problem
2) Nested cannot be resolved to a type	MyClass.java	line 3	Java Problem

1) covers 'Nested' and 2) covers '@Nested'. When I remove the second error, Quick Fix reliably works.

In order to claim the Quick Fix issue as fixed, we also have to fix that problem.
The secondary errors are intentional, although in this case, it doesn't add any value. I will try to eliminate it for this specific scenario, for we don't want to be touching many tests.
Created attachment 242088
Fix to remove secondary error

Dani, please review the actual fix along with this patch. This is a point fix that doesn't affect other existing tests.
(In reply to Jayaprakash Arthanareeswaran from comment #13)
> The secondary errors are intentional, 

Why is that? Can you give an example where the two make sense?
(In reply to Dani Megert from comment #15)
> (In reply to Jayaprakash Arthanareeswaran from comment #13)
> > The secondary errors are intentional, 
> 
> Why is that? Can you give an example where the two make sense?

One can argue that this is simple enough for the user to do with just one error, nevertheless we have tests such as this:

public class X {
	public @interface Annot {
		float[] value();
		Class<X>[] classe();
	}

	@Annot(value = {}, classe = { Zork.class })
	class Inner {
	}
}

Errors reported are:
- Class<Zork> cannot be resolved to a type
- Zork cannot be resolved to a type
(In reply to Jayaprakash Arthanareeswaran from comment #14)
> Created attachment 242088 [details]
> Fix to remove secondary error

Released in master via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=eb1af8158c83ea43d46875607c5495b0cb47979e
Backported the original fix and the fix to suppress the secondary error in R3_8_maintenance:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_8_maintenance&id=c581b824a158d342ff97a6a335acf1614db11393
(In reply to Jayaprakash Arthanareeswaran from comment #16)
> (In reply to Dani Megert from comment #15)
> > (In reply to Jayaprakash Arthanareeswaran from comment #13)
> > > The secondary errors are intentional, 
> > 
> > Why is that? Can you give an example where the two make sense?
> 
> One can argue that this is simple enough for the user to do with just one
> error, nevertheless we have tests such as this:
> 
> public class X {
> 	public @interface Annot {
> 		float[] value();
> 		Class<X>[] classe();
> 	}
> 
> 	@Annot(value = {}, classe = { Zork.class })
> 	class Inner {
> 	}
> }
> 
> Errors reported are:
> - Class<Zork> cannot be resolved to a type
> - Zork cannot be resolved to a type

How would Class<Zork> ever going to be resolved when Zork isn't? This is just noise (at least in this concrete example).
(In reply to Dani Megert from comment #19)
> (In reply to Jayaprakash Arthanareeswaran from comment #16)
> > (In reply to Dani Megert from comment #15)
> > > (In reply to Jayaprakash Arthanareeswaran from comment #13)
> > > > The secondary errors are intentional, 
> > > 
> > > Why is that? Can you give an example where the two make sense?
> > 
> > One can argue that this is simple enough for the user to do with just one
> > error, nevertheless we have tests such as this:
> > 
> > public class X {
> > 	public @interface Annot {
> > 		float[] value();
> > 		Class<X>[] classe();
> > 	}
> > 
> > 	@Annot(value = {}, classe = { Zork.class })
> > 	class Inner {
> > 	}
> > }
> > 
> > Errors reported are:
> > - Class<Zork> cannot be resolved to a type
> > - Zork cannot be resolved to a type
> 
> How would Class<Zork> ever going to be resolved when Zork isn't? This is
> just noise (at least in this concrete example).

javac agrees with me.
(In reply to Dani Megert from comment #20)
> javac agrees with me.

Filed bug 433015 for that.
To close this we also need it in 'R4_3_maintenance'.
Released in R4_3_maintenance via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_3_maintenance&id=6bb867a7642216ee4e3abf7de088af5755cd31ad
