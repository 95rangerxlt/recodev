I am working out mechanics for a refactoring to the Factory Method for my book
on Refactoring to Patterns.   I ran into a bug while doing this.  I want to pull
up a method in a subclass to a superclass.  The subclass method needs acess to a
field and makes calls to two methods in the subclass.  I pull up the field - no
problem.  I then need abstract versions of the 2 called methods to be pulled up
to the superclass.  I have to do that manually and I do.  Now I should be all
set to pull up the original subclass method, since the superclass has everything
it needs to be a home to the subclass method.  When I try to do this, Eclipse
warns me that the pulled method doesn't have acess to one of the methods it
needs to call.  Yet that method already exists as an abstract method in the
superclass.  The refactoring tool lets me procees, despite the warnings and
everything works fine.  The bug is that I got warnings.  There should be no
warnings as I'm doing something harmless and correct.

I can send a code example if it helps.

I am working out mechanics for a refactoring to the Factory Method for my book
on Refactoring to Patterns.   I ran into a bug while doing this.  I want to pull
up a method in a subclass to a superclass.  The subclass method needs acess to a
field and makes calls to two methods in the subclass.  I pull up the field - no
problem.  I then need abstract versions of the 2 called methods to be pulled up
to the superclass.  I have to do that manually and I do.  Now I should be all
set to pull up the original subclass method, since the superclass has everything
it needs to be a home to the subclass method.  When I try to do this, Eclipse
warns me that the pulled method doesn't have acess to one of the methods it
needs to call.  Yet that method already exists as an abstract method in the
superclass.  The refactoring tool lets me procees, despite the warnings and
everything works fine.  The bug is that I got warnings.  There should be no
warnings as I'm doing something harmless and correct.

I can send a code example if it helps.
Adam, please comment.
I just happend to find this same bug, had already written a testcase, and
noticed that it has already been reported.  A testcase wasn't requested but I
figured I'd include in anyway to since I already had it; Pulling up the runTest
method in the code below will result in a warning message.

abstract class Super {
	protected abstract void test();
}

public class SubClass extends Super {
	public void runTest() {
		test();
	}
	
	protected void test() {
		// Nothing to do
	}
}
Fixed > 20041123
