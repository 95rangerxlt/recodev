Right now, devtools.hud.loglimit.console is set to 200. We should bump this to 2000 or 20000. It should be more than it is. (See Chrome)

Right now, devtools.hud.loglimit.console is set to 200. We should bump this to 2000 or 20000. It should be more than it is. (See Chrome)
Looking at the Chrome devtools code, I think that its limit is only 300.

from devtools/front_end/console/ConsoleView.js, line 160

> WebInspector.ConsoleView.persistedHistorySize = 300;
Created attachment 8645837
Bug1045722.patch

This patch bumps the DEFAULT_LOG_LIMIT to match Chrome's.

I also removed what I think is cruft from browser/app/profile/firefox.js. The preferences were hardcoded with a default. It seemed like the code in logLimitForCategory was meant to fallback to DEFAULT_LOG_LIMIT if nothing was set, so hardcoding these preferences should be unnecessary.
(In reply to Lin Clark from comment #1)
> Looking at the Chrome devtools code, I think that its limit is only 300.
> 
> from devtools/front_end/console/ConsoleView.js, line 160
> 
> > WebInspector.ConsoleView.persistedHistorySize = 300;

I'm guessing that is the number of history entries that stay in the stack (for pressing up in the console to go through the last commands you've entered).  AFAICT they keep at least 10000 entries in the log based on my test case here:  https://bgrins.github.io/devtools-demos/console/stress.html.

I remember we have perf issues when trying to render that many in the view (https://bugzilla.mozilla.org/show_bug.cgi?id=1045715#c17).  We have a meta bug opened to improve this (Bug 1156747).

That said, I think increasing this limit a bit could make sense, since 200 seems like a pretty low number that you could pretty easily run into during normal development.
We may be able to tweak DEFAULT_LOG_LIMIT / MESSAGES_IN_INTERVAL / MAX_CLEANUP_TIME / THROTTLE_UPDATES, etc to allow a much bigger log limit.  It's been a while since we've looked into this, and the performance tools available in the Browser Toolbox are much better now so should be able to give better results.
Comment on attachment 8645837
Bug1045722.patch

Review of attachment 8645837:
-----------------------------------------------------------------

Bumping this to 1000 doesn't seem to cause any noticeable change in performance (at least in my simple test case at https://bgrins.github.io/devtools-demos/console/stress.html).  Let's go with that for now (while keeping the prefs and updating them to the new number)

::: browser/app/profile/firefox.js
@@ -1605,5 @@
>  pref("devtools.webconsole.timestampMessages", false);
>  
> -// The number of lines that are displayed in the web console for the Net,
> -// CSS, JS and Web Developer categories.
> -pref("devtools.hud.loglimit.network", 200);

I think we should actually keep these but bump their values up to the new value, see: https://dxr.mozilla.org/mozilla-central/source/browser/devtools/webconsole/webconsole.js#4821.

It is sort of awkward to have the same const defined twice, but we use this feature sometimes in tests: https://dxr.mozilla.org/mozilla-central/source/browser/devtools/webconsole/test/browser_webconsole_bug_644419_log_limits.js#136
When devtools.hud.loglimit.X is used in tests, is the hardcoded preference that is set in the profile ever used? It looks like the tests set the preference via the API (and then clear the preference afterwards), so that the test would never end up using the preference that the profile initializes. I might be wrong about how this works though. I ran the full browser test suite with those lines removed and there were no failures, but three were skipped.
(In reply to Lin Clark from comment #6)
> When devtools.hud.loglimit.X is used in tests, is the hardcoded preference
> that is set in the profile ever used? It looks like the tests set the
> preference via the API (and then clear the preference afterwards), so that
> the test would never end up using the preference that the profile
> initializes. I might be wrong about how this works though. I ran the full
> browser test suite with those lines removed and there were no failures, but
> three were skipped.

You are right, after looking again it does look like it's always set for the test.

Even still, I'd probably keep them around just because of convention (and it makes them easier to find if you were inclined or told to change them to work around the limit).  The duplicated number is weird, but it's not too bad to keep in sync since this changes infrequently.  Maybe it would help to add a comment above the prefs in firefox.js saying it should be kept in sync with DEFAULT_LOG_LIMIT in the webconsole frontend.
Created attachment 8646314
Bug1045722.patch

That makes sense, thanks for the feedback. 

This patch updates the limit to 1000 and adds the comment to keep them synced in profile.js.
Comment on attachment 8646314
Bug1045722.patch

Review of attachment 8646314:
-----------------------------------------------------------------

Nice :).  Try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=8daa9790c850
Try push looks generally good
https://hg.mozilla.org/integration/fx-team/rev/1edc9ce636a4
https://hg.mozilla.org/integration/fx-team/rev/1edc9ce636a4
https://hg.mozilla.org/mozilla-central/rev/1edc9ce636a4
