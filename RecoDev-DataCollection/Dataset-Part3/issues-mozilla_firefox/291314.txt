User-Agent:       Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.7) Gecko/20050414 Firefox/1.0.3
Build Identifier: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.7) Gecko/20050414 Firefox/1.0.3

chrome calling java.io.File("/tmp/a").createNewFile() creates a file in /tmp

Reproducible: Always

Steps to Reproduce:
go to url
Actual Results:  
a file with controllable name is created

User-Agent:       Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.7) Gecko/20050414 Firefox/1.0.3
Build Identifier: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.7) Gecko/20050414 Firefox/1.0.3

chrome calling java.io.File("/tmp/a").createNewFile() creates a file in /tmp

Reproducible: Always

Steps to Reproduce:
go to url
Actual Results:  
a file with controllable name is created
Java(TM) Plug-in 1.5.0_02-b09

File name: libjavaplugin_oji.so
Java(TM) Plug-in 1.5.0_02
Chrome can already create a file and more with or without Java, letting it call
into Java with permissions isn't a problem.

The problem here is the chrome event handler calling a content function with
chrome privs. Doesn't matter what the function does, that is the problem.

I couldn't get this to work, but it might be me.
the exploit works for me with both 1.0.3 and today's cvs trunk (with both
brendan's Script kludge and without)
Why is this an exploit? Chrome should be allowed to do this.
did you check "steps to reproduce" and url below "qa contact"?
I can confirm the testcase...
There's at least one bug here, if not two.  I'd comment in more detail, but I'd
rather do that in security-sensitive bugs.  Why was the security flag removed?
the security flag was removed because i spent time writing a testcase, there was
no action on the bug for 5 days, and someone added himself to cc and asked "Why
is this an exploit?"
Part of this should be fixed by bug 289940
Even with the patch in bug 281988 comment 73 i'm worried that someone can do:

theFile = java.io.File('/etc/passwd'');
someNode.nodeName = theFile;
theFile.toUpper = theFile.delete;
event.target = someNode;
document.body.dispatchEvent(event);

then trick us into getting the uppercase nodename of someNode. Will the above
cause |this| to be changed for |delete| triggering the REBOUND flag to get set?
Sicking, thanks -- jst brought that up too.  See bug 281988 attachment 182729.

/be
looks like java objects created by applets aren't exploitable.

can't at least this exploit be solved/kludged by disabling the java.*
constructors  from javascript - seems exploder does not support them?
this should be fixed on the trunk by bug 281988. Unblocking 1.8b3.
Georgi:  This should be fixed on the Trunk, can you retest and report any issues
you still see there?

We need more testing on the Trunk before we can take the other fix from  bug
281988 on the branch.
testcase doesn't work on today cvs trunk.

but i am not sure if in this testcase java tries to get executed at all, or
fixing some other bug has stopped the codepath.

will try to check this.

looks like chrome doesn't execute the luser's getter, so it is not clear if the
bug is fixed if chrome would have executed the luser's getter.
Two fixes block this testcase: chrome ignores content-generated events, and on
the trunk chrome doesn't see user-created properties anymore.

Might be able to play around with something like bug 290324 on the 1.0 branch to
get chrome to access java -- we didn't change anything in the way
liveconnect/java works.
*** Bug 303856 has been marked as a duplicate of this bug. ***
The problem is not reproducible.  It may just be blocked by other fixed or there may be another unknown path to cause it.  Either way we can't fix what we can't see.  No patch.  So can't make it into 1.0.8.
(In reply to comment #19)
> The problem is not reproducible.  It may just be blocked by other fixed or
> there may be another unknown path to cause it.  Either way we can't fix what we
> can't see.  No patch.  So can't make it into 1.0.8.
> 

some other fix killed the bug of calling it.

more actual similar "issue" is bug 324630

