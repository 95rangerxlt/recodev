


I have a sessionstore.js that exhibits the problem, am looking at ways to make _serializeSessionHistory() work async.
e10s was a theoretical silver bullet, but now we need something else :/
This will occur regardless of content being in-process or out. It's a straight-up sync recursion scenario.

I was experimenting with things like adding callbacks to all the data-collection methods or converting the whole thing to a generator-driven stack, so that we can control execution from the top in a way that doesn't block the event loop.
this is not due to deep session histories (which we cap at 50), but due to pages with many subframes. having a full session history for a tab with many subframes exacerbates the problem.

we must make this async.

a "dirty bit" approach will only stave off the pain until we hit a page which has enough subframes for recursing through them to take greater than 50ms in that user's environment.
Dietrich, what sort of Snappy priority do you think this should have?  Is this a common problem?
I don't know how common it is, but first saw it on Facebook, so making it P1.
Is this still an issue with the reworked session restore?
Marking this as fixed by bug 960903 and bug 936271.
