User-Agent:       Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9a3pre) Gecko/20070215 Minefield/3.0a3pre
Build Identifier: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9a3pre) Gecko/20070215 Minefield/3.0a3pre

The document frame is not setting 'enabled' state attribute when in focus even though states attributes 'focusable' and 'focused' are set.

Reproducible: Always

Steps to Reproduce:
1.  Put the document frame in focus.
2.  Look at state attributes
3.
Actual Results:  
Enabled is not listed in state attributes

Expected Results:  
Enabled should be listed in state attributes

User-Agent:       Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9a3pre) Gecko/20070215 Minefield/3.0a3pre
Build Identifier: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9a3pre) Gecko/20070215 Minefield/3.0a3pre

The document frame is not setting 'enabled' state attribute when in focus even though states attributes 'focusable' and 'focused' are set.

Reproducible: Always

Steps to Reproduce:
1.  Put the document frame in focus.
2.  Look at state attributes
3.
Actual Results:  
Enabled is not listed in state attributes

Expected Results:  
Enabled should be listed in state attributes
ENABLED==SENSITIVE now. So if we do one we should do both.

Also, controls don't change whether they're enabled based on whether they gain/lose focus. Either documents are always enabled or not. Correct?
Created attachment 255298
Don't clear enabled+sensitive state from documents

Peter, if it's correct to have enabled/sensitive on all docs then we should take this. It's a simple fix which removes the extra code we have to clear those states on documents.
Aaron,

I do think any accessible that reports state focusable, editable, or selectable should also report state enabled/sensitive when it is available for interaction with the user. If it does not, LSR must infer it is disabled and announce it as such to the user.
Yes, but the bug report says "when in focus". I was pointing out that this should be based on focusable not focused, just like you're saying. So basically with this patch the docs would always be enabled.

r+?
Comment on attachment 255298
Don't clear enabled+sensitive state from documents

Sorry. I missed that in the original comment and your request for review. You're correct. The document should always be enabled.
Wait. Anything that's selectable or editable in Mozilla is also focusable.

So it sounds like in Mozilla:
focusable == enabled == sensitive.

What we have now (after this patch) is that it's enabled if it's focusable or has >=1 action and isn't disabled.
Actually that means in Mozilla enabled/sensitive is a superset of focusable.
It's everything focusable or nondisabled items with an action.
Are there items with an action that are not focusable?
toolbarbuttons should not be marked focusable because they can't receive focus. Currently they expose that state though, I believe.

Web page authors often put an onclick on something but not make it focusable.
OK. All we need is a way for LSR to determine that the document frame is actually enabled. If we need to script to say that the frame is enabled because it can never be disabled, so be it. The lack of an explicit disabled state in AT-SPI means we either 

1) have to code prior knowledge about how a widget behaves into a script, or
2) assume that something that's interactive (focusable, editable, selectable) that doesn't have state enabled, is, in fact, disabled.

In Firefox, do you remove the focusable state from things that are disabled? 
> In Firefox, do you remove the focusable state from things that are disabled? 
Definitely, because it's not actually focusable. So #2 won't work. A toolbarbutton that's disabled will not have any of these states: focusable, enabled, editable, selectable.

Therefore, unfortunately, #1 looks like it's what you have to do. I don't like that either.

Also, documents are always focusable and never not enabled (after this patch goes in).


So basically (sensitive or enabled) and focusable means enabled while !focusable means disabled.

But now I remember our original problem. How do you distinguish an accessible that can never become enabled from an accessible that can? Neither one has state focusable. For instance, how can the screen reader tell apart the following two cases:

1) a paragraph accessible (not focusable or enabled, shouldn't be announced as disabled)
2) a disabled text entry accessible (not focusable or enabled, should be announced as enabled)

Do we really need to fall back on having a list of all roles that can potentially be interactive? That appears to be the only solution if lack of focusable is used as the indicator of disabled.
