We're splitting landing JSTerm into parts. The first part is the largest, it gets rid of the huge gcli.jsm file and replaces it with a virgin copy of the relevant parts of the GCLI repo along with the loader changes to make it all work nicely.

Along the way many bugs were fixed. (See the blocks list)

We're splitting landing JSTerm into parts. The first part is the largest, it gets rid of the huge gcli.jsm file and replaces it with a virgin copy of the relevant parts of the GCLI repo along with the loader changes to make it all work nicely.

Along the way many bugs were fixed. (See the blocks list)
Try: https://tbpl.mozilla.org/?tree=Try&rev=89c5d17d10ac
Created attachment 825892
v1

This patch broken out: https://github.com/joewalker/gcli/pull/16
Created attachment 826051
gcli.patch


https://tbpl.mozilla.org/?tree=Try&rev=b542ee9df548
Comment on attachment 826051
gcli.patch

Review of attachment 826051:
-----------------------------------------------------------------

r+

Please also address comments in https://github.com/joewalker/gcli/pull/16 ... there is nothing serious, mostly grammar errors in comments.
Created attachment 831562
v2

https://github.com/joewalker/gcli/pull/16
Comment on attachment 831562
v2

Review of attachment 831562:
-----------------------------------------------------------------

Looks good to me, r+
Created attachment 8341655
v3

This update fixes a number of issues with remoting. See https://github.com/joewalker/gcli/pull/16 for the extra changes.
It's green on try: https://tbpl.mozilla.org/?tree=Try&rev=2cba025dbd1f
Comment on attachment 8341655
v3

Review of attachment 8341655:
-----------------------------------------------------------------

Comments are on Github, just a few comment nits but otherwise everything looks great.

r+
Ms2ger, This patch looks huge because it splits out a large file into a number of smaller files. As part of that I wanted to copy several resources. The makefile in question is the one a little over half way down just after Loader.jsm. If this isn't the best way to do it (it works though) perhaps you could point me at the right way. Thanks.
Recent try build: https://tbpl.mozilla.org/?tree=Try&rev=763dd3465433
Created attachment 8373270
splitgcli-933727-gcli.patch

Mike: It's probably easier to finish this off at https://github.com/joewalker/gcli/pull/16.
Created attachment 8373278
splitgcli-933727-devtb.patch

These changes update the developer toolbar to work with the split out GCLI, including making it use promises rather than callbacks, and removing function names.
Created attachment 8373281
splitgcli-933727-tests.patch

Everything that matches browser_gcli_*.js, you've seen already in https://github.com/joewalker/gcli/pull/16

A number of tests that match browser_cmd_*.js have been converted from callbacks to promises/yield, so their *much* easier to follow now.

I've also done a fair bit of splitting tests up to reduce the chances of intermittents.
Created attachment 8373283
splitgcli-933727-inspect.patch

Mike is reviewing the code that splits up GCLI. This part updates the imports and fixes a test which now gives a more precise error message.
Created attachment 8373288
splitgcli-933727-styleeditor.patch

Mike is reviewing the code that splits up GCLI. This part updates the imports and updates the unit tests to use promise/yield.
Created attachment 8373294
splitgcli-933727-debug.patch

Mike is reviewing the code that splits up GCLI.
This part:
- updates the imports for the new location
- updates a test to use promise/yield
- removes 'completed: false' from the tests because everything is now async
Created attachment 8373297
splitgcli-933727-other.patch

Rob, this is a collection of import updates for the splitting out of GCLI. I'm not sure it's worth splitting them out further, but I can if you prefer.

Also one instance of removing 'completed: false' from a test because everything is now async.
Green on try FWIW:

https://tbpl.mozilla.org/?tree=Try&rev=9960de973951
Comment on attachment 8373294
splitgcli-933727-debug.patch

Review of attachment 8373294:
-----------------------------------------------------------------

LGTM.
o.m.g.
(In reply to Rob Campbell [:rc] (:robcee) from comment #20)
> o.m.g.

Which I interpret to mean "that's a big patch", which is true. It disolves gcli.jsm into it's parts so it's like adding the whole of GCLI twice.
However it is also more work than I would have liked. I don't want that to happen again.
Comment on attachment 8373297
splitgcli-933727-other.patch

Review of attachment 8373297:
-----------------------------------------------------------------

::: browser/devtools/scratchpad/CmdScratchpad.jsm
@@ +3,5 @@
>   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
>  
>  this.EXPORTED_SYMBOLS = [ ];
>  
> +const devtools = Components.utils.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools;

you could destructure this with:
const {devtools} = Cu.import("...loader.jsm", {});

::: browser/devtools/tilt/CmdTilt.jsm
@@ +7,5 @@
>  
>  this.EXPORTED_SYMBOLS = [ ];
>  
>  Components.utils.import('resource://gre/modules/XPCOMUtils.jsm');
> +const devtools = Components.utils.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools;

you could destructure this with:

const {devtools} = Cu.import("...loader.jsm", {});

I don't know if you like that better or not, but we use it elsewhere.
Comment on attachment 8373283
splitgcli-933727-inspect.patch

Review of attachment 8373283:
-----------------------------------------------------------------

::: browser/devtools/inspector/CmdInspect.jsm
@@ +9,4 @@
>  XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
>                                    "resource:///modules/devtools/gDevTools.jsm");
> +
> +let devtools = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools;

I have the same comment than Rob here, I'm used to doing:
let {devtools} = Cu.import("resources:...");
instead. I've seen this used in a lot of places in the code and I like this as it's a little bit shorter. Also, makes it easier to extend when new exported symbols appear.

@@ +9,5 @@
>  XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
>                                    "resource:///modules/devtools/gDevTools.jsm");
> +
> +let devtools = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools;
> +var gcli = devtools.require('gcli/index');

s/var/let ?
I think gcli primarily uses var rather than let or const, so it might not be worth changing them all.

::: browser/devtools/responsivedesign/CmdResize.jsm
@@ +10,5 @@
>                           GetStringFromName("brandShortName");
>  
>  this.EXPORTED_SYMBOLS = [ ];
>  
> +const devtools = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools;

Same comment as previously.
(In reply to Joe Walker [:jwalker] from comment #21)
> (In reply to Rob Campbell [:rc] (:robcee) from comment #20)
> > o.m.g.
> 
> Which I interpret to mean "that's a big patch", which is true. It disolves
> gcli.jsm into it's parts so it's like adding the whole of GCLI twice.
> However it is also more work than I would have liked. I don't want that to
> happen again.

you've interpreted my outburst correctly. I pity the reviewers on this, though hopefully it's mostly a remove+add operation.

marking this as assigned.

Curious to see where the front-end work for this lives. Bug 911456?
Created attachment 8382950
Combined patch with review comments fixed
Green on try: https://tbpl.mozilla.org/?tree=Try&rev=29849ad8ba40
https://tbpl.mozilla.org/?tree=Fx-Team&rev=02ad58b18823
https://hg.mozilla.org/integration/fx-team/rev/02ad58b18823
https://hg.mozilla.org/mozilla-central/rev/02ad58b18823
