


Then, detecting SSL will not necessarily achieve what you want.  SSL is an encryption system, and as such does NOT prevent the receiving party (the webserver) from knowing what characters the user typed at the keyboard.  

A proper password protection system HASHES the password. This prevents the webserver from doing anything other than checking that what you typed this time is the same as what you typed when you set your password. The webserver does not store the actual password. Only you know that.

SSL does give some protection against main-in-the-middle security leaks (dishonest data carriers) but I'm not sure how prevalent such issues are. Probably, not all that common. 

The majority of hackings arise by way of SQL code injection exploits being used to take control of webservers. As far as the 'owned' webserver and the hacker controlling it is concerned, SSL makes absolutely zero difference. Passwords sent to the server can be decrypted with the SSL key, and used to impersonate you on this site, or on other sites where you used the same password.  

Thus, any browser feature designed to protect your password would have to detect HASHING of the password before transmission. Since hashing is a software function for which no standardised method exists, I imagine that coding a hashing detection algortithm would be a challenging task. One obvious sign that a password is NOT being hashed, though, would be a bog-standard form submit button in the HTML, with no Javascript (or other scripting code) attached. The fact that scripting IS involved in the submission process would not necessarily indicate hashing of course, it could be merely checking for blank fields or the like. But, no scripting definitely equals insecure password. 

Bottom line; it's really down-to whether you trust the competency of the programmer who put-up the website. If you don't think their work is competent (loads of coding errors might be a clue there!) then don't give the site any password you value. 

HTH.
