STR:

1. Enable the tracer
2. Go to about:config
3. Open the Debugger

You'll start seeing these stacks at ~1/sec:

notify event 'traces' threw an exception: TypeError: location is undefined
Stack: TracerView.prototype<._createView@chrome://browser/content/devtools/debugger-panes.js:1444:5
TracerView.prototype<.addTrace@chrome://browser/content/devtools/debugger-panes.js:1422:16
Tracer.prototype._onCall@chrome://browser/content/devtools/debugger-controller.js:1566:1
Tracer.prototype.onTraces@chrome://browser/content/devtools/debugger-controller.js:1546:9
eventSource/aProto.emit@resource://gre/modules/devtools/dbg-client.jsm:189:9
DebuggerClient.prototype.onPacket/<@resource://gre/modules/devtools/dbg-client.jsm:922:9
resolve@resource://gre/modules/devtools/deprecated-sync-thenables.js:40:40
then@resource://gre/modules/devtools/deprecated-sync-thenables.js:20:43
then@resource://gre/modules/devtools/deprecated-sync-thenables.js:58:9
DebuggerClient.prototype.onPacket@resource://gre/modules/devtools/dbg-client.jsm:864:1
LocalDebuggerTransport.prototype.send/<@resource://gre/modules/commonjs/toolkit/loader.js -> resource://gre/modules/devtools/transport/transport.js:545:11
makeInfallible/<@resource://gre/modules/commonjs/toolkit/loader.js -> resource://gre/modules/devtools/DevToolsUtils.js:83:14
makeInfallible/<@resource://gre/modules/commonjs/toolkit/loader.js -> resource://gre/modules/devtools/DevToolsUtils.js:83:14
Line: 1444, column: 4

STR:

1. Enable the tracer
2. Go to about:config
3. Open the Debugger

You'll start seeing these stacks at ~1/sec:

notify event 'traces' threw an exception: TypeError: location is undefined
Stack: TracerView.prototype<._createView@chrome://browser/content/devtools/debugger-panes.js:1444:5
TracerView.prototype<.addTrace@chrome://browser/content/devtools/debugger-panes.js:1422:16
Tracer.prototype._onCall@chrome://browser/content/devtools/debugger-controller.js:1566:1
Tracer.prototype.onTraces@chrome://browser/content/devtools/debugger-controller.js:1546:9
eventSource/aProto.emit@resource://gre/modules/devtools/dbg-client.jsm:189:9
DebuggerClient.prototype.onPacket/<@resource://gre/modules/devtools/dbg-client.jsm:922:9
resolve@resource://gre/modules/devtools/deprecated-sync-thenables.js:40:40
then@resource://gre/modules/devtools/deprecated-sync-thenables.js:20:43
then@resource://gre/modules/devtools/deprecated-sync-thenables.js:58:9
DebuggerClient.prototype.onPacket@resource://gre/modules/devtools/dbg-client.jsm:864:1
LocalDebuggerTransport.prototype.send/<@resource://gre/modules/commonjs/toolkit/loader.js -> resource://gre/modules/devtools/transport/transport.js:545:11
makeInfallible/<@resource://gre/modules/commonjs/toolkit/loader.js -> resource://gre/modules/devtools/DevToolsUtils.js:83:14
makeInfallible/<@resource://gre/modules/commonjs/toolkit/loader.js -> resource://gre/modules/devtools/DevToolsUtils.js:83:14
Line: 1444, column: 4
Created attachment 8471861
bug-1049248.patch
Try: https://treeherder.mozilla.org/ui/#/jobs?repo=try&revision=51e27de59daa
Comment on attachment 8471861
bug-1049248.patch

Review of attachment 8471861:
-----------------------------------------------------------------

So the problem stems from installing the tracer's onEnterFrame hook when there aren't any traces being recorded?

It seems like the proper solution would be to delay installing the tracer's the hook until there are traces being recorded, and to uninstall the hook whenever all existing traces have ended. This would also use less resources when we aren't actively tracing.

Am I missing something?

::: toolkit/devtools/server/actors/tracer.js
@@ +259,5 @@
>    onEnterFrame: function(aFrame) {
>      if (aFrame.script && aFrame.script.url == "self-hosted") {
>        return;
>      }
> +    // Do not send packets at all if no traces has been requested

Nit: "if no traces *have* been requested." Period too, please.

Another nit: empty line above the comment as well, please.

@@ +262,5 @@
>      }
> +    // Do not send packets at all if no traces has been requested
> +    let requestedTraces = Object.keys(this._requestsForTraceType)
> +                            .filter(k => !!this._requestsForTraceType[k]);
> +    if (!requestedTraces.length) {

I think it would be easier (and more efficient) to check |this._activeTraces.size|.
Created attachment 8478720
bug-1049248-2.patch

This is a prettier check whether tracing is active.
Alternatively we can install/uninstall onEnterFrame hook in onStartTrace/onStopTrace, but imo this is easier to read and is reasonable fast.

Try: https://treeherder.mozilla.org/ui/#/jobs?repo=try&revision=17247bff9c45
Comment on attachment 8478720
bug-1049248-2.patch

Review of attachment 8478720:
-----------------------------------------------------------------

I'd still prefer to delay setting the hooks until we actually have traces going, but I'd be fine to r+ this if it fixes the failure and has a regression test so we know its actually fixed.
*** Bug 1068516 has been marked as a duplicate of this bug. ***
Created attachment 8490702
Don't set tracing hooks until tracing has started

Stealing as it is getting very annoying and it's already in Aurora.
https://tbpl.mozilla.org/?tree=Try&rev=c64f94a8ac47
Created attachment 8491447
Don't set tracing hooks until tracing has started v2

There were some test timeouts in slow platforms, so I made sure the test forces JS execution in order to get traces. This version appears to work well on try:

https://tbpl.mozilla.org/?tree=Try&rev=0830e3dc4e5e
https://hg.mozilla.org/integration/fx-team/rev/26fede342996
https://hg.mozilla.org/mozilla-central/rev/26fede342996
