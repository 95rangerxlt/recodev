Looking at the spec for bug 855805, it looks like there's going to be more than one panel that supports the slide-y subview effect[1].

My plan is to extract the subview logic from PanelUI.js into a re-usable XBL binding that will be applied to panels with type="multiview", or something like that.

Looking at the spec for bug 855805, it looks like there's going to be more than one panel that supports the slide-y subview effect[1].

My plan is to extract the subview logic from PanelUI.js into a re-usable XBL binding that will be applied to panels with type="multiview", or something like that.
Created attachment 745314
WIP Patch 1
Comment on attachment 745314
WIP Patch 1

Hey Jared, Blair,

Here's my first shot at a generalized subview-y panel binding. I've basically brought most of the code from panelUI.js into this new binding - it's more or less the same thing.

I have no idea if I've gone about this a sane way. I've introduced "mainview" and "subview" tags to help organize what's inside a multiview panel. I've also opted to not use type="multiview" or something for the panel, since this loses me a lot of handy styles that seem to only apply to panels with type="arrow"... might be hacky.

Plus, the styling is spread around all over the place. I gathered as much of the general styling stuff inside panelUI.css, but it looks like I can't affect children of the anonymous nodes this way, so I had to move the mainview and subview styles into panelUIOverlay.inc.css. Not sure how I feel about that.

Basically, this whole thing might be hacky. Looking for feedback. Please halp.
Comment on attachment 745314
WIP Patch 1

Review of attachment 745314:
-----------------------------------------------------------------

Haven't done a details review of the code yet, but after getting an overall feel for it, I like. And it doesn't feel hacky.

<mainview> and <subview> tag names feel a little too generic, given their usage is extremely specific. I'd prefer something like <panelmainview> and <panelsubview> - that naming scheme kind fits with other related XBL bindings we have (listboxes, toolbars, etc).

There's stuff in theme CSS that should be in content CSS, and vice versa.

In some proposed mockups, sub views have a header that contains a label and a back button - if we wanted that, we could now easily implement that in a <subview> (or whatever we call it) binding.

::: browser/components/customizableui/content/panelUI.inc.xul
@@ +55,2 @@
>  
> +  <subview id="PanelUI-bookmarks" flex="1">

Should be able to specify -moz-box-flex in CSS, to avoid needing to always have it in the XUL.
Why are you extending popup.xml#arrowpanel rather than just implementing a widget that you put as a non-anonymous child in <panel type="arrow"/>?
Comment on attachment 745314
WIP Patch 1

Review of attachment 745314:
-----------------------------------------------------------------

I'll defer to Blair and Dao on this. Thanks for working to clean this up :)
(In reply to Dão Gottwald [:dao] from comment #4)
> Why are you extending popup.xml#arrowpanel rather than just implementing a
> widget that you put as a non-anonymous child in <panel type="arrow"/>?

On one hand, that would make it more modular. On the other, it means we'll always have to repeat the same boilerplate code when we use this. I've no strong preference either way.
Created attachment 746605
WIP Patch 2

Thanks for the feedback! I like Dao's suggestion of creating a non-anonymous child for arrow panels. This feels better.

I also renamed mainview and subview to panelmainview and panelsubview.

Going to give this a once-over and then request review.
Created attachment 747044
Patch v1
Comment on attachment 747044
Patch v1

Review of attachment 747044:
-----------------------------------------------------------------

::: browser/components/customizableui/content/panelUI.xml
@@ +37,5 @@
>        </property>
>      </implementation>
>    </binding>
> +
> +  <binding id="arrowpanel-multiview">

panelmultiview

@@ +100,5 @@
> +        // Get a MutationObserver ready to react to subview size changes. We
> +        // only attach this MutationObserver when a subview is being displayed.
> +        this._subViewObserver = new MutationObserver(function(aMutations) {
> +          this._syncContainerWithSubView();
> +        }.bind(this));

this._subViewObserver = new MutationObserver(this._syncContainerWithSubView.bind(this));

@@ +197,5 @@
> +      </method>
> +
> +      <method name="handleEvent">
> +        Components.utils.import("resource://gre/modules/Services.jsm");
> +        const Ci = Components.interfaces;

These should be inside the function body.... but we don't want to be importing Services.jsm each time this function gets called, and its only used to get the thread manager - so just get it via a getService call (maybe memorize it on a property on the binding).

::: browser/themes/shared/customizableui/panelUIOverlay.inc.css
@@ +2,5 @@
>   * License, v. 2.0. If a copy of the MPL was not distributed with this
>   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
>  
> +panelmultiview {
> +  -moz-binding: url("chrome://browser/content/customizableui/panelUI.xml#arrowpanel-multiview");

Ugh, our CSS files are a mess... filed bug 870309, we can sort it all out in there to avoid holding up this bug.
Comment on attachment 747044
Patch v1

>+      <field name="mClickCapturer" readonly="true">
>+        document.getAnonymousElementByAttribute(this, "anonid", "clickCapturer");
>+      </field>
>+      <field name="mViewContainer" readonly="true">
>+        document.getAnonymousElementByAttribute(this, "anonid", "viewContainer");
>+      </field>
>+      <field name="mMainView" readonly="true">
>+        this.querySelector("panelmainview");
>+      </field>
>+      <field name="mSubViews" readonly="true">
>+        document.getAnonymousElementByAttribute(this, "anonid", "subViews");
>+      </field>
>+      <field name="mViewStack" readonly="true">
>+        document.getAnonymousElementByAttribute(this, "anonid", "viewStack");
>+      </field>
>+      <field name="mPanel" readonly="true">
>+        this.parentNode;
>+      </field>
>+
>+      <field name="_currentSubView">null</field>
>+      <field name="_anchorElement">null</field>
>+      <field name="_mainViewHeight">0</field>
>+      <field name="_subViewObserver">null</field>

All of the m-prefixed properties should use the underscore instead.

>+      <method name="handleEvent">
>+        Components.utils.import("resource://gre/modules/Services.jsm");
>+        const Ci = Components.interfaces;
>+        <parameter name="aEvent"/>
>+        <body><![CDATA[
>+          switch(aEvent.type) {
>+            case "click":
>+              if (aEvent.originalTarget == this.mClickCapturer) {
>+                this.showMainView();
>+              }
>+              break;
>+            case "overflow":
>+              // Resize the subview on the next tick.
>+              Services.tm.currentThread.dispatch(this._syncContainerWithSubView.bind(this),
>+                                                 Ci.nsIThread.DISPATCH_NORMAL);

As far as I can tell, you can just call setTimeout(..., 0) here.
Created attachment 747461
Patch v1.1 (r+'d by Unfocused)

(In reply to Blair McBride [:Unfocused] (Limited availability.) from comment #9)
> Comment on attachment 747044
> Patch v1
> 
> Review of attachment 747044:
> -----------------------------------------------------------------
> 
> ::: browser/components/customizableui/content/panelUI.xml
> @@ +37,5 @@
> >        </property>
> >      </implementation>
> >    </binding>
> > +
> > +  <binding id="arrowpanel-multiview">
> 
> panelmultiview
> 

Done.

> @@ +100,5 @@
> > +        // Get a MutationObserver ready to react to subview size changes. We
> > +        // only attach this MutationObserver when a subview is being displayed.
> > +        this._subViewObserver = new MutationObserver(function(aMutations) {
> > +          this._syncContainerWithSubView();
> > +        }.bind(this));
> 
> this._subViewObserver = new
> MutationObserver(this._syncContainerWithSubView.bind(this));
> 

Done.

> @@ +197,5 @@
> > +      </method>
> > +
> > +      <method name="handleEvent">
> > +        Components.utils.import("resource://gre/modules/Services.jsm");
> > +        const Ci = Components.interfaces;
> 
> These should be inside the function body.... but we don't want to be
> importing Services.jsm each time this function gets called, and its only
> used to get the thread manager - so just get it via a getService call (maybe
> memorize it on a property on the binding).
> 

I just went with Dao's suggestion and used setTimeout.

> ::: browser/themes/shared/customizableui/panelUIOverlay.inc.css
> @@ +2,5 @@
> >   * License, v. 2.0. If a copy of the MPL was not distributed with this
> >   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
> >  
> > +panelmultiview {
> > +  -moz-binding: url("chrome://browser/content/customizableui/panelUI.xml#arrowpanel-multiview");
> 
> Ugh, our CSS files are a mess... filed bug 870309, we can sort it all out in
> there to avoid holding up this bug.

Thanks for filing!


(In reply to Dão Gottwald [:dao] from comment #10)
> Comment on attachment 747044
> Patch v1
> 
> >+      <field name="mClickCapturer" readonly="true">
> >+        document.getAnonymousElementByAttribute(this, "anonid", "clickCapturer");
> >+      </field>
> >+      <field name="mViewContainer" readonly="true">
> >+        document.getAnonymousElementByAttribute(this, "anonid", "viewContainer");
> >+      </field>
> >+      <field name="mMainView" readonly="true">
> >+        this.querySelector("panelmainview");
> >+      </field>
> >+      <field name="mSubViews" readonly="true">
> >+        document.getAnonymousElementByAttribute(this, "anonid", "subViews");
> >+      </field>
> >+      <field name="mViewStack" readonly="true">
> >+        document.getAnonymousElementByAttribute(this, "anonid", "viewStack");
> >+      </field>
> >+      <field name="mPanel" readonly="true">
> >+        this.parentNode;
> >+      </field>
> >+
> >+      <field name="_currentSubView">null</field>
> >+      <field name="_anchorElement">null</field>
> >+      <field name="_mainViewHeight">0</field>
> >+      <field name="_subViewObserver">null</field>
> 
> All of the m-prefixed properties should use the underscore instead.
> 

Done.

> >+      <method name="handleEvent">
> >+        Components.utils.import("resource://gre/modules/Services.jsm");
> >+        const Ci = Components.interfaces;
> >+        <parameter name="aEvent"/>
> >+        <body><![CDATA[
> >+          switch(aEvent.type) {
> >+            case "click":
> >+              if (aEvent.originalTarget == this.mClickCapturer) {
> >+                this.showMainView();
> >+              }
> >+              break;
> >+            case "overflow":
> >+              // Resize the subview on the next tick.
> >+              Services.tm.currentThread.dispatch(this._syncContainerWithSubView.bind(this),
> >+                                                 Ci.nsIThread.DISPATCH_NORMAL);
> 
> As far as I can tell, you can just call setTimeout(..., 0) here.

Thanks, done.
Landed in Jamun as https://hg.mozilla.org/projects/jamun/rev/d0bb46ca65ca
Landed in UX as https://hg.mozilla.org/projects/ux/rev/d0bb46ca65ca
https://hg.mozilla.org/mozilla-central/rev/d0bb46ca65ca
