We're missing the social-share-button and social-toolbar-item in the default placements for the nav-bar, which means that when restoring the default state of the toolbars, CustomizableUI.inDefaultState is never satisfied.

We're missing the social-share-button and social-toolbar-item in the default placements for the nav-bar, which means that when restoring the default state of the toolbars, CustomizableUI.inDefaultState is never satisfied.
Created attachment 755597
Patch v1
Comment on attachment 755597
Patch v1

r=me, but I am confused. How come the reset functionality wasn't satisfied without this change? That seems wrong; it should be using these to reset, right? Or are you saying that because there's no widget with the social-toolbar-button ID, that means the actual widgets then don't reflect the desired placements array?

In which case, it sounds like inDefaultState should be smarter and not care about IDs in the placement array that don't exist; or is that me being too quick to draw conclusions?
(In reply to :Gijs Kruitbosch from comment #2)
> Comment on attachment 755597
> Patch v1
> 
> r=me, but I am confused. How come the reset functionality wasn't satisfied
> without this change?

inDefaultState is not the reset functionality, it's the function that checks whether or not all toolbars are in their default state. It does this by comparing the placement array for an area with its default placement array.

This function currently never returns true, because there are items in the default placement array that don't exist (social-toolbar-button), and certain non-removable items that are not yet in that list (social-toolbar-item).

Or are there cases I'm not thinking of here?
(In reply to Mike Conley (:mconley) from comment #3)
> (In reply to :Gijs Kruitbosch from comment #2)
> > r=me, but I am confused. How come the reset functionality wasn't satisfied
> > without this change?
> 
> inDefaultState is not the reset functionality, it's the function that checks
> whether or not all toolbars are in their default state. It does this by
> comparing the placement array for an area with its default placement array.

OK, that's what I was thinking about; sorry for the mistaken nomenclature usage on my part.

> This function currently never returns true, because there are items in the
> default placement array that don't exist (social-toolbar-button)

OK. I guess I was thinking that non-existing items should probably not be counted as "not being in the default state". If that makes any sense. So in the following scenario

1. install add-on which adds item (either directly or you place it somewhere)
2. remove add-on

the placements array would keep the unknown bit and we'd be in a "non-default state", but actually we *would* sort of be in a default state? I guess this is currently a problem because the *default* placement set (rather than just the user's changed preference) has a non-existing item so we *never* get into a default state. Might not be worth optimizing for these edgecases.


> certain non-removable items that are not yet in that list
> (social-toolbar-item).

OK, non-removable items that don't get removed when we reset... sort of makes sense? Shouldn't those be magically incorporated into the placements array (are they, but does that then just not match the default in this case)? OTOH, perhaps this is worrying over something which in practice is unlikely to ever happen... not sure. Thoughts?
Landed in UX as https://hg.mozilla.org/projects/ux/rev/6b7cc0ba4fbf
(In reply to :Gijs Kruitbosch from comment #4)
> 
> > This function currently never returns true, because there are items in the
> > default placement array that don't exist (social-toolbar-button)
> 
> OK. I guess I was thinking that non-existing items should probably not be
> counted as "not being in the default state". If that makes any sense. So in
> the following scenario
> 
> 1. install add-on which adds item (either directly or you place it somewhere)
> 2. remove add-on
> 
> the placements array would keep the unknown bit and we'd be in a
> "non-default state", but actually we *would* sort of be in a default state?
> I guess this is currently a problem because the *default* placement set
> (rather than just the user's changed preference) has a non-existing item so
> we *never* get into a default state. Might not be worth optimizing for these
> edgecases.
> 
> 

Hm, good points here. Perhaps you're right, and we *should* make inDefaultState smarter by skip IDs for things that don't yet (or no longer) exist. I'd be OK with that. I've filed bug 877447.

> > certain non-removable items that are not yet in that list
> > (social-toolbar-item).
> 
> OK, non-removable items that don't get removed when we reset... sort of
> makes sense? Shouldn't those be magically incorporated into the placements
> array (are they, but does that then just not match the default in this
> case)? OTOH, perhaps this is worrying over something which in practice is
> unlikely to ever happen... not sure. Thoughts?

I guess this is no worse than what we've currently got, where one must include an item under the nav-bar as well as include it in the defaultset attribute of the nav-bar.

I think the maintenance burden of remembering to update defaultPlacements when adding or removing items from the nav-bar isn't so bad - but we should maybe include a comment in browser.xul mentioning that fact. I think I'd prefer that over magic. :)
(In reply to Mike Conley (:mconley) from comment #6)
> Hm, good points here. Perhaps you're right, and we *should* make
> inDefaultState smarter by skip IDs for things that don't yet (or no longer)
> exist. I'd be OK with that. I've filed bug 877447.

+1

> I think the maintenance burden of remembering to update defaultPlacements
> when adding or removing items from the nav-bar isn't so bad - but we should
> maybe include a comment in browser.xul mentioning that fact. I think I'd
> prefer that over magic. :)

+1
Filed bug 877524 about adding a comment to browser.xul about the default placements arrays, just so we don't lose it.
https://hg.mozilla.org/mozilla-central/rev/6b7cc0ba4fbf
