In bug 1194912 we'll start storing ProgressTracker's observer list as a hash table, which means there won't be a clearly defined notion of which observer is first, because hash tables aren't ordered.

Unfortunately, we rely upon this information, because we use ProgressTracker::FirstObserverIs() to ensure that only the first imgRequestProxy for a given image can adjust the image's network priority.

In this bug, we'll get rid of FirstObserverIs() and replace it with a simpler mechanism that will live directly in imgRequest.

In bug 1194912 we'll start storing ProgressTracker's observer list as a hash table, which means there won't be a clearly defined notion of which observer is first, because hash tables aren't ordered.

Unfortunately, we rely upon this information, because we use ProgressTracker::FirstObserverIs() to ensure that only the first imgRequestProxy for a given image can adjust the image's network priority.

In this bug, we'll get rid of FirstObserverIs() and replace it with a simpler mechanism that will live directly in imgRequest.
Created attachment 8650154
Replace ProgressTracker::FirstObserverIs() with a simpler mechanism on imgRequest

Here's the patch. We basically just store a raw pointer to the first observer on
imgRequest. We only store this pointer for the purposes of comparison with other
pointers, so it's OK that it's raw.

It could happen that the first observer could get destroyed and another
imgRequestProxy for the same image could get allocated at the same location, so
this mechanism might fail sometimes, but this doesn't seem any more dangerous
than the current method, since if we destroy the first proxy for the image now,
another proxy will effectively randomly become the "first" proxy.
https://treeherder.mozilla.org/#/jobs?repo=try&revision=fca67803bec9
https://hg.mozilla.org/integration/mozilla-inbound/rev/2e24f461affe
https://hg.mozilla.org/mozilla-central/rev/2e24f461affe
