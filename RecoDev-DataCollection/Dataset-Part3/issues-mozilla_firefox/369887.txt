The default set of bookmarks (in new profiles) should not be marked as hidden.  That is, those links should show up when users search for them in the sidebar or organizer.

This applies to new bookmarks as well, of course.  But not to livemarks.

To reproduce:

* Create a new profile, launch minefield.
* Right click on a link, select "bookmark this link".  Close the dialog.
* Find your places.sqlite file in your profile, open it with sqlite3.
* Run 'select user_title,hidden from moz_places;'.

Currently I see almost all of the bookmarks set hidden, including the new bookmark created via "bookmark this link."

The default set of bookmarks (in new profiles) should not be marked as hidden.  That is, those links should show up when users search for them in the sidebar or organizer.

This applies to new bookmarks as well, of course.  But not to livemarks.

To reproduce:

* Create a new profile, launch minefield.
* Right click on a link, select "bookmark this link".  Close the dialog.
* Find your places.sqlite file in your profile, open it with sqlite3.
* Run 'select user_title,hidden from moz_places;'.

Currently I see almost all of the bookmarks set hidden, including the new bookmark created via "bookmark this link."
I believe this also affect bookmarks automatically (and possibly manual) imported from Fx 2.0
taking
Created attachment 258862
patch (needs some column 80 cleanup)
> The default set of bookmarks (in new profiles) should not be marked as hidden.

actually, this is OK.  the problem is that for onlybookmarked queries, we should not be limiting ourselves to non hidden items. 

there are two parts to this patch.

1)  switching from "h.user_title" to "(SELECT title FROM moz_bookmarks WHERE item_child = h.id)".  We get the "user title" from moz_bookmarks, instead of moz_places.  Note, user_title is obsolete, see bug #371800, sorry dietrich this patch will cause a conflict.

without this change, bookmark queries (from the sidebar or from the bookmark organizer) will not return the proper results.

2) for OnlyBookmarked queries, don't limit the search to "hidden <> 1".  it is possible to bookmark something you've never visited.
Comment on attachment 258862
patch (needs some column 80 cleanup)

dietrich, what do you think?
Comment on attachment 258862
patch (needs some column 80 cleanup)


>@@ -1924,33 +1954,33 @@ nsNavHistory::GetQueryResults(const nsCO
>   PRInt32 numParameters = 0;
>   nsCAutoString conditions;
>   PRInt32 i;
>   for (i = 0; i < aQueries.Count(); i ++) {
>     nsCString queryClause;
>     PRInt32 clauseParameters = 0;
>     rv = QueryToSelectClause(aQueries[i], numParameters,
>                              &queryClause, &clauseParameters,
>-                             commonConditions);
>+                             aQueries[i]->OnlyBookmarked() ? EmptyCString() : commonConditionsForHistory);
>     NS_ENSURE_SUCCESS(rv, rv);
>     if (! queryClause.IsEmpty()) {
>       if (! conditions.IsEmpty()) // exists previous clause: multiple ones are ORed
>         conditions += NS_LITERAL_CSTRING(" OR ");
>       conditions += NS_LITERAL_CSTRING("(") + queryClause +
>         NS_LITERAL_CSTRING(")");
>       numParameters += clauseParameters;
>     }
>   }
> 
>   // in cases where there were no queries, we need to use the common conditions
>   // (normally these are appended to each clause that are not annotation-based)
>   if (! conditions.IsEmpty()) {
>     queryString += conditions;
>   } else {
>-    queryString += commonConditions;
>+    queryString += commonConditionsForHistory;
>   }
>   queryString += groupBy;

wouldn't we also need to drop commonConditionsForHistory here, if OnlyBookmarked?

also, if this is true, couldn't you check for OnlyBookmarked earlier, and not build up commonConditionsForHistory at all?

> 
>   // Sort clause: we will sort later, but if it comes out of the DB sorted,
>   // our later sort will be basically free. The DB can sort these for free
>   // most of the time anyway, because it has indices over these items.
>   //
>   // FIXME: do some performance tests, I'm not sure that the indices are getting
>Index: toolkit/components/places/src/nsNavHistoryQuery.h
>===================================================================
>RCS file: /cvsroot/mozilla/toolkit/components/places/src/nsNavHistoryQuery.h,v
>retrieving revision 1.11
>diff -u -8 -p -r1.11 nsNavHistoryQuery.h
>--- toolkit/components/places/src/nsNavHistoryQuery.h	16 Feb 2007 22:55:10 -0000	1.11
>+++ toolkit/components/places/src/nsNavHistoryQuery.h	17 Mar 2007 00:38:56 -0000
>@@ -159,17 +159,17 @@ private:
> 
>   ~nsNavHistoryQueryOptions() { delete[] mGroupings; }
> 
>   // IF YOU ADD MORE ITEMS:
>   //  * Add a new getter for C++ above if it makes sense
>   //  * Add to the serialization code (see nsNavHistory::QueriesToQueryString())
>   //  * Add to the deserialization code (see nsNavHistory::QueryStringToQueries)
>   //  * Add to the nsNavHistoryQueryOptions::Clone() function
>-  //  * Add to the nsNavHistory.cpp:IsSimpleBookmarksQuery function if applicable
>+  //  * Add to the nsNavHistory.cpp::GetSimpleBookmarksQuery function if applicable

shouldn't this be GetSimpleBookmarksQueryFolder?
dietrich, thanks for the review.  comments:

1)

>wouldn't we also need to drop commonConditionsForHistory here, if
> OnlyBookmarked?

we know "only bookmarked" on a per query basis, and this is outside the loop that iterates over the queries.

2)

> also, if this is true, couldn't you check for OnlyBookmarked earlier, and not
> build up commonConditionsForHistory at all?

same as #1

3)

>+  //  * Add to the nsNavHistory.cpp::GetSimpleBookmarksQuery function if applicable

shouldn't this be GetSimpleBookmarksQueryFolder?

good catch, fixed.

I'll attach a new patch that is 80 cols nice for review.
Created attachment 259274
patch
updating summary to reflect the real problem.
Created attachment 259339
add a test for this to the test suite

dietrich, without the fix for this bug, this new test fails because the bookmark is hidden and we don't search on the title.

with the fix, we pass.
Comment on attachment 259339
add a test for this to the test suite

r=dietrich. can you add a comment explaining what's being tested, and a pointer to this bug?
Created attachment 259360
add a test for this to the test suite (and add comments, per Dietrich)

added comments and a reference back to this bug.
fixed.

Checking in src/nsNavBookmarks.cpp;
/cvsroot/mozilla/toolkit/components/places/src/nsNavBookmarks.cpp,v  <--  nsNavB
ookmarks.cpp
new revision: 1.75; previous revision: 1.74
done
Checking in src/nsNavHistory.cpp;
/cvsroot/mozilla/toolkit/components/places/src/nsNavHistory.cpp,v  <--  nsNavHis
tory.cpp
new revision: 1.110; previous revision: 1.109
done
Checking in src/nsNavHistoryQuery.h;
/cvsroot/mozilla/toolkit/components/places/src/nsNavHistoryQuery.h,v  <--  nsNav
HistoryQuery.h
new revision: 1.13; previous revision: 1.12
done

I am going to wait until dietrich moves the tests from toolkit to browser before landing my test.
> I am going to wait until dietrich moves the tests from toolkit to browser
> before landing my test.

oops, I meant browser to toolkit, not toolkit to browser.

he's landed, and so I've ported the testcase to the new location.

Checking in test_bookmarks.js;
/cvsroot/mozilla/toolkit/components/places/tests/bookmarks/test_bookmarks.js,v
<--  test_bookmarks.js
new revision: 1.2; previous revision: 1.1
done
Bug 451915 - move Firefox/Places bugs to Firefox/Bookmarks and History. Remove all bugspam from this move by filtering for the string "places-to-b-and-h".

In Thunderbird 3.0b, you do that as follows:
Tools | Message Filters
Make sure the correct account is selected. Click "New"
Conditions: Body   contains   places-to-b-and-h
Change the action to "Delete Message".
Select "Manually Run" from the dropdown at the top.
Click OK.

Select the filter in the list, make sure "Inbox" is selected at the bottom, and click "Run Now". This should delete all the bugspam. You can then delete the filter.

Gerv
