I haven't reproduced this on nightly yet, but something seemed off while looking at the code.

Looking at loadFile and _canDownloadFile in FlashStreamConverter.js [1]. My understanding is this.url is the URL of the original SWF and url/data.url is a resource the original SWF is trying to load. It is possible to bypass the origin check by passing specially crafted URLs.

e.g. https://mozilla.org/foo.swf wants to request a resource on https://google.com
Instead of requesting https://google.com/BAR, make a request for https://mozilla.org:test@google.com/BAR

The regex checks on L239/240 don't properly include the trailing slash for the URI authority. [2]

We end up with
urlPrefix = ["https://mozilla.org","https","mozilla.org"]
basePrefix = ["https://mozilla.org","https","mozilla.org"]

The check on L241 succeeds and the crossdomain.xml file isn't checked at all.

I tested how XHR handles the extra user:pass and it continues with the request unlike the prompt shown during normal browsing when a server isn't expecting user:pass


If this.url is really the page loading the SWF, a similar bypass should be possible.

[1] - http://mxr.mozilla.org/mozilla-central/source/browser/extensions/shumway/components/FlashStreamConverter.js
[2] - http://mxr.mozilla.org/mozilla-central/source/browser/extensions/shumway/components/FlashStreamConverter.js#239

I haven't reproduced this on nightly yet, but something seemed off while looking at the code.

Looking at loadFile and _canDownloadFile in FlashStreamConverter.js [1]. My understanding is this.url is the URL of the original SWF and url/data.url is a resource the original SWF is trying to load. It is possible to bypass the origin check by passing specially crafted URLs.

e.g. https://mozilla.org/foo.swf wants to request a resource on https://google.com
Instead of requesting https://google.com/BAR, make a request for https://mozilla.org:test@google.com/BAR

The regex checks on L239/240 don't properly include the trailing slash for the URI authority. [2]

We end up with
urlPrefix = ["https://mozilla.org","https","mozilla.org"]
basePrefix = ["https://mozilla.org","https","mozilla.org"]

The check on L241 succeeds and the crossdomain.xml file isn't checked at all.

I tested how XHR handles the extra user:pass and it continues with the request unlike the prompt shown during normal browsing when a server isn't expecting user:pass


If this.url is really the page loading the SWF, a similar bypass should be possible.

[1] - http://mxr.mozilla.org/mozilla-central/source/browser/extensions/shumway/components/FlashStreamConverter.js
[2] - http://mxr.mozilla.org/mozilla-central/source/browser/extensions/shumway/components/FlashStreamConverter.js#239
I can confirm in nightly. Nice work.

We'll need to check all sorts of URL variations to make sure similar problems can't happen.
Does this code want to be using something like checkSameOriginURI, checkLoadURIWithPrincipal, or nsIPrincipal::checkMayLoad, rather than rolling its own security checks by comparing prePaths?
YES!  A thousand times yes.  How did a hand-rolled security check pass review?  :(

For example, for nsSimpleURI instances .prePath is just the scheme, and having about:blank load stuff from other about: URIs, say, is really bad.

Please fix this code to do sane security checks.
(In reply to On vacation Oct 12 - Oct 27 from comment #3)
> YES!  A thousand times yes.  How did a hand-rolled security check pass
> review?  :(

The Shumway code itself didn't get review, as far as I can tell (see bug 904346). Not sure what the review requirements for the development in Github were.

I also don't see any mention of security review in the integration bug, though I thought I recall it being mentioned somewhere.

(In reply to :Gavin Sharp (use gavin@gavinsharp.com for email) from comment #2)
> Does this code want to be using something like checkSameOriginURI,
> checkLoadURIWithPrincipal, or nsIPrincipal::checkMayLoad, rather than
> rolling its own security checks by comparing prePaths?

I will look into that. However Flash's security is different, so we have to create our own security checks. Using just standard web security will certainly break Shumway.

(In reply to On vacation Oct 12 - Oct 27 from comment #3)

> Please fix this code to do sane security checks.

Could you be more specific? Reject unknown scheme URIs or apply recommendation above?

Bug 926988 keeping us from advancing to aurora and release version and give us time to perform more thorough security review(s).
(In reply to :Gavin Sharp (use gavin@gavinsharp.com for email) from comment #4)
> (In reply to On vacation Oct 12 - Oct 27 from comment #3)
> > YES!  A thousand times yes.  How did a hand-rolled security check pass
> > review?  :(
> 
> The Shumway code itself didn't get review, as far as I can tell (see bug
> 904346). Not sure what the review requirements for the development in Github
> were.
> 
> I also don't see any mention of security review in the integration bug,
> though I thought I recall it being mentioned somewhere.

Shumway isn't currently expected to be safe to use, really. We have known security issues and a large potential area of issues that we simply don't yet investigate closely enough to know much about. As an example, our crossdomain.xml parsing is very rudimentary, and there are crossdomain.xml files that shouldn't make us allow access, but do.

Obviously, a core requirement for actually activating Shumway is getting all of this right. Again, we haven't really started with this, yet.
(In reply to Till Schneidereit [:till] from comment #6)
> Shumway isn't currently expected to be safe to use, really. We have known
> security issues and a large potential area of issues that we simply don't
> yet investigate closely enough to know much about.

That sounds like "not ready for Nightly". Where's the list of known security issues?
Here is the bug tracking the security review Bug 780311.
> so we have to create our own security checks. 

If you need security checks not already provided by the platform (not that likely, actually; we have a wide variety already), please file bugs describing what you need.

> Could you be more specific? Reject unknown scheme URIs or apply recommendation above?

That depends on the actual security model you're trying to enforce in this check.  Can you point me to a clear description of this security model?

> We have known security issues 

That should have been _very_ clearly communicated before we started publishing blog posts encouraging nightly users to turn it on!
(In reply to On vacation Oct 12 - Oct 27 from comment #9)

> That depends on the actual security model you're trying to enforce in this
> check.  Can you point me to a clear description of this security model?
> 

Description of crossdomain policy can be found at http://kb2.adobe.com/cps/142/tn_14213.html
(In reply to On vacation Oct 12 - Oct 27 from comment #9)
> > We have known security issues 
> 
> That should have been _very_ clearly communicated before we started
> publishing blog posts encouraging nightly users to turn it on!

We made it very clear that this is highly experimental and not ready for use by anyone except for experimenting. We talked about this aspect of things with various security people.

Also, we didn't ever publish such a blog post. In fact, we didn't really do any communication about Shumway that went beyond telling people about it in person or on IRC, and giving the demos during the Summit, of course.

Having said all this, we should obviously get started with proper security work as soon as possible. Elan just said on IRC that she discussed things with curtis and will connect with him today to get things moving.
mwobensmith and I are working to put together a testing / review strategy for Shumway. We will send out an e-mail to a wider audience with the specifics.
No need to panic here. We approved landing in Nightly pref'd off because we expect that what we learn from the Nightly audience will change our Security features. We know we won't ship the cross-domain code now in Shumway. The specific mitigations we use will depend on fundamental runtime problems we're trying to solve first (that also prevent us from prefing on or migrating out of Nightly.)
Setting the flags to disabled because this is off (AFAIK).
The "fixed upstream" was apparently months ago, and I bet we've updated in-tree Shumway since. Should this be marked FIXED? Do we need another non-sec-high bug about fixing the problem more reliably/security checks?
Closing as resolved, since the regexp check is not used. NetUtil.newURI and prePath are used instead [1]. Comments like comment 3 must be moved to bug 780311.

  [1] http://mxr.mozilla.org/mozilla-central/source/browser/extensions/shumway/content/ShumwayStreamConverter.jsm#293
Can this be opened up now? The issue wasn't ever present in anything not clearly markes as experimental and only affected Nightly even for the time it existed.
