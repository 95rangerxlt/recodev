STR:

- http://codepen.io/rachelnabors/full/be63a7730ba3190cd601b9bc7c51e01e/
- open the inspector
- select the image in the pen's iframe
- in the rule-view sidebar, you should see this rule:
img {
  filter: url("#seafish");
}
- click on the filter editor button that appears just before 'url'

=> Expected: the tooltip appears so you can change the filter
=> Actual: the tooltip does appear, but the URL automatically changes to:
chrome://browser/content/devtools/filter-frame.xhtml#seafish
which makes the image go blank because this URL does not point to any filter.

Note that this is an important problem to fix quickly because it's intended to be used in a demo we're working on for the marketing push of Firefox 44.

STR:

- http://codepen.io/rachelnabors/full/be63a7730ba3190cd601b9bc7c51e01e/
- open the inspector
- select the image in the pen's iframe
- in the rule-view sidebar, you should see this rule:
img {
  filter: url("#seafish");
}
- click on the filter editor button that appears just before 'url'

=> Expected: the tooltip appears so you can change the filter
=> Actual: the tooltip does appear, but the URL automatically changes to:
chrome://browser/content/devtools/filter-frame.xhtml#seafish
which makes the image go blank because this URL does not point to any filter.

Note that this is an important problem to fix quickly because it's intended to be used in a demo we're working on for the marketing push of Firefox 44.
This happens because we convert the css filter value to computed styles in FilterWidget.js:

// Apply filter to a temporary element
// and get the computed value to make parsing
// easier
let tmp = this.doc.createElement("i");
tmp.style.filter = cssValue;
const computedValue = this.win.getComputedStyle(tmp).filter;

This was done before so parsing the filter value would be easier in 'tokenizeComputedFilter'.
And indeed, the comment in 'tokenizeComputedFilter' confirms this:

* This is only a very simple tokenizer that only works its way through
* parenthesis in the string to detect function names and values.
* It assumes that the string actually is a well-formed filter value
* (e.g. "blur(2px) hue-rotate(100deg)").

But, this comment is now obsolete, because the parsing the filter value is now done with the CSS tokenizer. This was done in bug 1154809, but the comment of the function wasn't changed.

I think it might now be safe to change the comment and remove the conversion to computed styles.
Created attachment 8670142
Bug_1211796_-_Do_not_convert_CSS_filters_to_comput.diff

Tom, you introduced the tokenizer usage in this file, I think you're a good reviewer for this.
Pending try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=03537a6a2245
Created attachment 8670146
Bug_1211796_-_Do_not_convert_CSS_filters_to_comput.diff

Forgot to rename the function.
Comment on attachment 8670146
Bug_1211796_-_Do_not_convert_CSS_filters_to_comput.diff

Review of attachment 8670146:
-----------------------------------------------------------------

Looks good.
*** Bug 1171494 has been marked as a duplicate of this bug. ***
https://hg.mozilla.org/integration/fx-team/rev/8d65c46e5514
https://hg.mozilla.org/mozilla-central/rev/8d65c46e5514
