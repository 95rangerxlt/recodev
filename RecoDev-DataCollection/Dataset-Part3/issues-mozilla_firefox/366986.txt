User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1
Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1

In a development version of Session Manager I am working on I register the TabClose listener and attempt to call the nsISessionStore component's setTabValue function on tab close to save data about that tab (specifically it's image attribute) into the ExtData field so that the image can be displayed in a menu with the list of closed tabs.

The problem is that nsISessionStore also registers the TabClose listener and apparently it gets called first since the data sent to the setTabValue call is lost (it never shows up in the sessionstore.js data file).  If my code calls the setTabValue function before the tab is closed everything works fine.

As it is now I had to hook into the removeTab code directly to force it to call my function before it calls any of the TabClose listeners to make sure that nsISessionStore hasn't done any tab close processing before my code is executed.  This is a hacky way of doing things and can cause other issues which is why listeners were created.

The other choice is to continuously monitor the tab load event and save the data I need every time the tab loads even though the data is only needed from the tab that just closed.

I believe that all close/removal events should call any extensions listening to those events first before calling brower compoments.  

The reverse should be true for any open/new events since my extension also generates exceptions when it calls SessionStore functions on the "load" event as SessionStore hasn't finished loading yet.

Reproducible: Always

Steps to Reproduce:
1. Add a TabClose listener
2. In the listener make a setTabValue call
3. Close and reopen the tab and issue a getTabValue call.
Actual Results:  
Data set in the setTabValue call was lost.

Expected Results:  
Data set in the setTabValue call should be set.

I wrote this against SessionStore, but really it applies to any component in the system the adds a listener on window/tab close, open or load.

User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1
Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1

In a development version of Session Manager I am working on I register the TabClose listener and attempt to call the nsISessionStore component's setTabValue function on tab close to save data about that tab (specifically it's image attribute) into the ExtData field so that the image can be displayed in a menu with the list of closed tabs.

The problem is that nsISessionStore also registers the TabClose listener and apparently it gets called first since the data sent to the setTabValue call is lost (it never shows up in the sessionstore.js data file).  If my code calls the setTabValue function before the tab is closed everything works fine.

As it is now I had to hook into the removeTab code directly to force it to call my function before it calls any of the TabClose listeners to make sure that nsISessionStore hasn't done any tab close processing before my code is executed.  This is a hacky way of doing things and can cause other issues which is why listeners were created.

The other choice is to continuously monitor the tab load event and save the data I need every time the tab loads even though the data is only needed from the tab that just closed.

I believe that all close/removal events should call any extensions listening to those events first before calling brower compoments.  

The reverse should be true for any open/new events since my extension also generates exceptions when it calls SessionStore functions on the "load" event as SessionStore hasn't finished loading yet.

Reproducible: Always

Steps to Reproduce:
1. Add a TabClose listener
2. In the listener make a setTabValue call
3. Close and reopen the tab and issue a getTabValue call.
Actual Results:  
Data set in the setTabValue call was lost.

Expected Results:  
Data set in the setTabValue call should be set.

I wrote this against SessionStore, but really it applies to any component in the system the adds a listener on window/tab close, open or load.
The only reliable event fired after TabClose would be DOMNodeRemoved (gets also fired for moved tabs though). However that's too late for our purposes (once the tab is removed, it loses the JavaScript properties we use for tracking certain state). Still hacky but at a better moment comes |oldBrowser.setAttribute("type", "content-targetable");| which we could also intercept.

Possibly the simplest fix might be to just delay adding the event listener slightly further, so that all extensions have the opportunity to register before SessionStore (at least AFAICT event listeners are called in the order they were registered).

Furthermore: What other cases are there, where extensions and browser components depend on TabClose (and maybe also TabOpen) where the calling order matters? Do we need a better/different solution in general or is this a special case?
I'm not sure exactly what other extensions or components it applies to for TabClose.  I do know I've seen a number of extensions hook themselves into browser code to get their code to run at a certain time even though there are events they could have listened to, but they might have been coded before those events were available.

Perhaps there could be a priority/order system for events.  Instead of having the events fire in the order the listeners registered, the listener could pass a priority/order as to when the listener wants to run (example: earlier, normal, later).  This would solve the problem of not knowing whether the browser components will run before the extension code or not.  It would also solve issues where an extension wants to make sure it's stuff executes before another extension (for example an extension wants to read a tab value, but another extension wipes it out before the first extension can read it).

I also realized that in my case I really need 2 events: one as the tab is closing so I can call the setTabValue (since I need to call this before the tab is removed) and then one after the tab actually closed so I can check the getClosedTabCount value (to get the correct closed tab count), though I can simulate the later by putting in a short delay.  

As for setTabValue on tab close, what is strange is that if I monitor the sessionstore.js file and watch for changes I can see that the value I set using the setTabValue call actually gets saved briefly in the regular tabs list.  It's only after the tab gets moved to the closed tabs list that the value gets lost.   It seems that the code is saving the tab state, but then doing the move a few seconds later so even though the call to setTabValue works it isn't saved. Perhaps right before a closed tab actually gets moved it could copy over the extData value?
confirmed. My extension ColorfulTabs also tried to color a tab when it is reopened using "Undo Close" feature is fx(2.0.0.2).
On Undo Close: 
1) a TabOpen event initiates the colouring of tab.
2) the tab is moved to its previous position (before closing) and colors are lost.
also http://labs.mozilla.com/2006/11/chromatabs/ tries to do same and Justin Dolske (http://blog.mozilla.com/dolske) commented 

 onTabMove: function (event) {
	CHROMATABS.log("tab moved");
	var tab = event.originalTarget;
	// XXX - bug? the event listeners seem to disappear when the tab is moved!
	// ...fixed by moving listeners to tab strip. (re-adding them also worked)

	// You'd kinda think it would stay colored, but it doesn't.
	CHROMATABS.colorizeTab(tab);
    },
Created attachment 292633
add an SSTabClosing event

So, the simplest solution seems to be adding our own new "SSTabClosing" event which informs listeners that this is the last call for interacting with a tab's session state (for setting/getting values or for getting the whole state once bug 393716 is fixed).

Mike: Any objections?
That should work as long as there is sufficient processing time between the time the "SSTabClosing" event fires and the "TabClose" event fires.  
Comment on attachment 292633
add an SSTabClosing event

redirecting!
(In reply to comment #5)
Actually, we won't be able to guarantee that "SSTabClosing" fires first for your extension at all. You'd rather be supposed to listen to this event _instead_ of "TabClose". This should nonetheless satisfy the StR from comment #0 resp. your first request from comment #2.

On a side note: For your second request from comment #2, you'd rather need a "TabClosed" event which tabbrowser itself doesn't offer. Although you could easily simulate it with a setTimeout from the SSTabClosing handler (or just file another RFE bug and hope for an implementation ;-)). Of course, in your specific case, querying getClosedTabCount and just adding 1 (maxing out at b.s.max_tabs_undo) would do the trick.
Created attachment 292664
always dispatch an SSTabClosing event

On further reflection: We really should always dispatch this event, not only when the undoCloseTab feature is enabled - to make things simpler for extension authors who want to retrieve the tab's state themselves (e.g. replacing our own feature while still using SessionStore to do most of their work).
Comment on attachment 292664
always dispatch an SSTabClosing event

looks good, r=me.
Comment on attachment 292664
always dispatch an SSTabClosing event

I wish the names were more descriptive, but this looks ok.
Comment on attachment 292664
always dispatch an SSTabClosing event

a=beltzner for 1.9
Checking in browser/components/sessionstore/src/nsSessionStore.js;
/cvsroot/mozilla/browser/components/sessionstore/src/nsSessionStore.js,v  <--  nsSessionStore.js
new revision: 1.87; previous revision: 1.86
done
Added SSTabClosing info to the Session Store API article.
