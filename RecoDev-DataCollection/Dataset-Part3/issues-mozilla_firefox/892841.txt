In /browser/components/customizableui/content/toolbar.xml,

// Searching for the toolbox palette in the toolbar binding because
// toolbars are constructed first.
let toolbox = this.toolbox;
if (toolbox && !toolbox.palette) {
  for (let node of toolbox.children) {
    if (node.localName == "toolbarpalette") {
      // Hold on to the palette but remove it from the document.
      toolbox.palette = node;
      toolbox.removeChild(node);
    }
  }
}

We can break out of the loop once we find the palette. This would follow the same behavior that /toolkit/content/widgets/toolbar.xml already provides.

In /browser/components/customizableui/content/toolbar.xml,

// Searching for the toolbox palette in the toolbar binding because
// toolbars are constructed first.
let toolbox = this.toolbox;
if (toolbox && !toolbox.palette) {
  for (let node of toolbox.children) {
    if (node.localName == "toolbarpalette") {
      // Hold on to the palette but remove it from the document.
      toolbox.palette = node;
      toolbox.removeChild(node);
    }
  }
}

We can break out of the loop once we find the palette. This would follow the same behavior that /toolkit/content/widgets/toolbar.xml already provides.
As comment #0 mentions, this is not just a perf issue but also one of correctness if somehow multiple palettes exist.
Created attachment 774443
Patch

Baseline,
https://tbpl.mozilla.org/?tree=Try&rev=395f9c40686d

With patch,
https://tbpl.mozilla.org/?tree=Try&rev=0aff825f4331
https://hg.mozilla.org/projects/ux/rev/6bfdb8e66c50
https://hg.mozilla.org/mozilla-central/rev/6bfdb8e66c50
