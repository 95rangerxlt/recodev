The test is half sync half async, it calls all the runTest methods at once, and those end up being executed randomly at the same time, though each of those executeSoon on load.  While looking for frequent oranges, I compared 2 pgo runs, one failing and one succeeding, and this was one of the few tests behaving differently.
Since the scope of the test is quite different from opening tens of windows with tens of tabs at once and closing them at random order hoping to finish at the right time, I think it's worth to give it a path to follow.

The test is half sync half async, it calls all the runTest methods at once, and those end up being executed randomly at the same time, though each of those executeSoon on load.  While looking for frequent oranges, I compared 2 pgo runs, one failing and one succeeding, and this was one of the few tests behaving differently.
Since the scope of the test is quite different from opening tens of windows with tens of tabs at once and closing them at random order hoping to finish at the right time, I think it's worth to give it a path to follow.
Created attachment 606593
patch v1.0
Comment on attachment 606593
patch v1.0

Review of attachment 606593:
-----------------------------------------------------------------

::: browser/components/sessionstore/test/browser_480148.js
@@ +40,1 @@
>    requestLongerTimeout(2);

I wonder if we'll need to extend this timeout since the windows are opening sequentially. I guess we'll find out!
Sure, that's an easy change. thanks.
https://hg.mozilla.org/integration/mozilla-inbound/rev/06ffbf7b6518
https://hg.mozilla.org/mozilla-central/rev/06ffbf7b6518
