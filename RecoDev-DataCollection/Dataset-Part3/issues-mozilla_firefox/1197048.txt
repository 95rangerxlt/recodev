


Created attachment 8650823
Part 1: Add strict search for filter styles [1.0]
Created attachment 8650824
Part 2: Add a search button next to overridden properties to filter for similar properties
Created attachment 8650865
Part 2: Reduce test code duplication in search filter unit tests [1.0]
Created attachment 8650875
Part 3: Add tests for strict search for filter styles [1.0]
https://treeherder.mozilla.org/#/jobs?repo=try&revision=3e328c4d8a46
See https://bugzilla.mozilla.org/show_bug.cgi?id=1151943#c48
Created attachment 8651629
Part 1: Add strict search for filter styles [2.0]
https://treeherder.mozilla.org/#/jobs?repo=try&revision=798a1618cbbc
Comment on attachment 8651629
Part 1: Add strict search for filter styles [2.0]

Review of attachment 8651629:
-----------------------------------------------------------------

::: browser/devtools/styleinspector/rule-view.js
@@ +59,5 @@
>  // This is used to parse user input when filtering.
>  const FILTER_PROP_RE = /\s*([^:\s]*)\s*:\s*(.*?)\s*;?$/;
> +// This is used to parse the filter search value to see if the filter
> +// should be strict or not
> +const FILTER_STRICT_RE = /`(.*?)`/;

This could fail in cases like:
content: "some ` content ` here";
which is probably not common enough to spend time on it now, but there should at least be a comment about it here.

@@ +2329,5 @@
>      // If the inputted search value matches a property line like
>      // `font-family: arial`, then check to make sure the name and value match.
>      // Otherwise, just compare the inputted search string directly against the
>      // name and value of the rule property.
> +    if (searchPropertyMatch && searchPropertyName && searchPropertyValue) {

The body of this IF statement and the body of the ELSE below that amount to about 15 lines of hard to quickly scan code. Variable names are long, and conditions aren't particularly simple. I'd prefer if you could rewrite this to make the actual important part of this algorithm really straightforward to read. One option is to use small internal helper functions and variables.

let hasNameAndValue = searchPropertyMatch &&
                      searchPropertyName &&
                      searchPropertyValue;
let isMatch = (name, query, isStrict) => {
  return isStrict > name === query : query && name.includes(query);
};

if (hasNameAndValue) {
  matches =
    isMatch(propertyName, searchPropertyName, strictSearchPropertyName) &&
    isMatch(propertyValue, searchPropertyValue, strictSearchPropertyValue);
} else {
  matches =
    isMatch(propertyName, searchPropertyName,
            strictSearchPropertyName || strictSearchAllValues) ||
    isMatch(propertyValue, searchPropertyValue,
            strictSearchPropertyValue || strictSearchAllValues);
}
Comment on attachment 8650865
Part 2: Reduce test code duplication in search filter unit tests [1.0]

Review of attachment 8650865:
-----------------------------------------------------------------

Nice. Thanks for working on those tests. I'd like to see some more rewrite to make sure the code is simple, but nothing that prevents r+, as long as try is green.

::: browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_01.js
@@ +83,4 @@
>    let win = ruleView.styleWindow;
>    let searchField = ruleView.searchField;
> +  let searchClearButton = ruleView.searchClearButton;
> +  for (let data of TEST_DATA) {

Thanks for removing all those tests and reducing the code duplication. I have one extra request though, to make sure these tests are easily readable:
create new functions for the various test steps, to make the body of the FOR loop easy to follow, and insert newlines where needed. Right now it's just a huge block of code.

for (let data of TEST_DATA) {
  info(data.desc);
  yield setFilter(data, searchField, inspector, win);
  checkRules(data, ruleView);
  ... etc ...
}

function* setFilter({search}, searchField, inspector, win) {
  info("Setting filter text to \"" + search + "\"");
  searchField.focus();
  synthesizeKeys(search, win);
  yield inspector.once("ruleview-filtered");
}

function checkRules(data, ruleView) {
  info("Check that the correct rules are visible");

  is(ruleView.element.children.length, 2, "Should have 2 rules.");
  is(getRuleViewRuleEditor(ruleView, 0).rule.selectorText, "element",
    "First rule is inline element.");

  let rule = getRuleViewRuleEditor(ruleView, 1).rule;
  let textPropEditor = rule.textProps[0].editor;
  let computed = textPropEditor.computed;

  is(rule.selectorText, "#testid", "Second rule is #testid.");
  is(!!textPropEditor.expander.getAttribute("open"), data.isExpanderOpen,
    "Got correct expander state.");
  is(computed.hasAttribute("filter-open"), data.isFilterOpen,
    "Got correct expanded state for margin computed list.");
  is(textPropEditor.container.classList.contains("ruleview-highlight"),
    data.isMarginHighlighted,
    "Got correct highlight for margin text property.");
}

::: browser/devtools/styleinspector/test/browser_ruleview_search-filter_01.js
@@ +48,4 @@
>    let win = ruleView.styleWindow;
>    let searchField = ruleView.searchField;
> +  let searchClearButton = ruleView.searchClearButton;
> +  for (let data of TEST_DATA) {

Same comment for this loop, try and split the content into 2/3 functions so that each function is simple enough to read and maintain, and it's easy to "read" the steps of the test.
Comment on attachment 8650875
Part 3: Add tests for strict search for filter styles [1.0]

Review of attachment 8650875:
-----------------------------------------------------------------

The comment below applies to all 4 new tests.
I'm going to R+ this too because this is just a test-only change, so I'll let you do it and carry the R+ forward.

::: browser/devtools/styleinspector/test/browser_ruleview_strict-search-filter-computed-list_01.js
@@ +115,5 @@
> +
> +  for (let data of TEST_DATA) {
> +    info(data.desc);
> +
> +    info("Setting filter text to \"" + data.search + "\"");

Same comment as for the previous patch, there are some parts here that can be in their own functions. Also, it turns out that this one (focusing and putting test in the search field) is something common enough that you should add a function in head.js for it.
Created attachment 8652065
Part 1: Add strict search for filter styles [3.0]
Created attachment 8652067
Part 2: Reduce test code duplication in search filter unit tests [2.0]
Created attachment 8652075
Part 3: Add tests for strict search for filter styles [2.0]

https://treeherder.mozilla.org/#/jobs?repo=try&revision=65b8878cc7fe
Created attachment 8652133
Part 2: Reduce test code duplication in search filter unit tests [3.0]
Created attachment 8652134
Part 3: Add tests for strict search for filter styles [3.0]
https://treeherder.mozilla.org/#/jobs?repo=try&revision=2ec36beb328d
https://hg.mozilla.org/integration/fx-team/rev/993fc891dfda
https://hg.mozilla.org/integration/fx-team/rev/3e521d571472
https://hg.mozilla.org/integration/fx-team/rev/bb45e6008feb
https://hg.mozilla.org/mozilla-central/rev/993fc891dfda
https://hg.mozilla.org/mozilla-central/rev/3e521d571472
https://hg.mozilla.org/mozilla-central/rev/bb45e6008feb
Release Note Request (optional, but appreciated)
[Why is this notable]:
[Suggested wording]:
[Links (documentation, blog post, etc)]:
Suggested wording: Added strict search for filter styles in Dev Tools Inspector
I've added some docs:

https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_and_edit_CSS#Strict_search

Does it look OK to you Gabriel?
Looks good, thanks!
