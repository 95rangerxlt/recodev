STR:

1) Have two computers that can connect to arbitrary ports across a network. You're on your own for steps to set that up. We'll call these two computers A and B.
2) On A, open Nightly, open about:config and flip the following prefs:

devtools.debugger.remote-enabled to true
devtools.debugger.force-local to false

Restart Firefox just in case - though that might not be necessary.

3) Open the Developer Toolbar (Menu button > Developer > Developer Toolbar).
4) In the gcli, type in:

listen 6060

and press enter. Replace 6060 with whatever port you'd like if 6060 is already taken.

Computer A is now primed to listen on port 6060 for remote devtools to connect.

5) On B, open about:config and flip the following pref:

devtools.debugger.remote-enabled to true

6) Go to Menu > Developer > Connect
7) In the tab that comes up, type the IP for computer A in the text field labeled "Host", and type the port that you used in step 4 in the text field labeled "Port". Click "Connect".

8) If all goes well, you should get a dialog on computer A alerting you that someone is trying to connect. If not, there's a communications error between the two machines - make sure that you're on the same network and the machines can actually talk to one another along that port.

Press "OK" in the dialog. Computer B should pop up the remote devtools window. \o/

9) Flip to the debugger pane in the devtools window, and browse for some code we can set a breakpoint on and hit reliably.

My example of choice is to choose tabbrowser.xml (type that in the search input if you don't want to browse the big list of source files). Within that, hit Ctrl (or Cmd) F to search within the file for "addTab".

You should find a line that looks like:

<method name="addTab">

That's a method that'll run whenever we open a new tab.

10) Set a breakpoint on the first line after <![CDATA[ in the body tag of that method. On m-c right now, that line is this:

http://hg.mozilla.org/mozilla-central/file/c9f8cc9ce89c/browser/base/content/tabbrowser.xml#l1505

11) On computer A, open a new tab. It should lock up before it completes, which is expected - we've hit the breakpoint!

ER: We should be able to step through once we've hit this breakpoint, and continue.

AR: The debugger doesn't seem to let me step through or continue... it also doesn't appear to realize that we're at a breakpoint on a particular line. If I flip away from the Debugger tab, it's green, so it knows we're at a break, but I don't see the familiar green flag next to a line number indicating that we're stopped somewhere.

I talked to vporof about this a few weeks back, but I don't think a bug ever went on file, so here it is.

STR:

1) Have two computers that can connect to arbitrary ports across a network. You're on your own for steps to set that up. We'll call these two computers A and B.
2) On A, open Nightly, open about:config and flip the following prefs:

devtools.debugger.remote-enabled to true
devtools.debugger.force-local to false

Restart Firefox just in case - though that might not be necessary.

3) Open the Developer Toolbar (Menu button > Developer > Developer Toolbar).
4) In the gcli, type in:

listen 6060

and press enter. Replace 6060 with whatever port you'd like if 6060 is already taken.

Computer A is now primed to listen on port 6060 for remote devtools to connect.

5) On B, open about:config and flip the following pref:

devtools.debugger.remote-enabled to true

6) Go to Menu > Developer > Connect
7) In the tab that comes up, type the IP for computer A in the text field labeled "Host", and type the port that you used in step 4 in the text field labeled "Port". Click "Connect".

8) If all goes well, you should get a dialog on computer A alerting you that someone is trying to connect. If not, there's a communications error between the two machines - make sure that you're on the same network and the machines can actually talk to one another along that port.

Press "OK" in the dialog. Computer B should pop up the remote devtools window. \o/

9) Flip to the debugger pane in the devtools window, and browse for some code we can set a breakpoint on and hit reliably.

My example of choice is to choose tabbrowser.xml (type that in the search input if you don't want to browse the big list of source files). Within that, hit Ctrl (or Cmd) F to search within the file for "addTab".

You should find a line that looks like:

<method name="addTab">

That's a method that'll run whenever we open a new tab.

10) Set a breakpoint on the first line after <![CDATA[ in the body tag of that method. On m-c right now, that line is this:

http://hg.mozilla.org/mozilla-central/file/c9f8cc9ce89c/browser/base/content/tabbrowser.xml#l1505

11) On computer A, open a new tab. It should lock up before it completes, which is expected - we've hit the breakpoint!

ER: We should be able to step through once we've hit this breakpoint, and continue.

AR: The debugger doesn't seem to let me step through or continue... it also doesn't appear to realize that we're at a breakpoint on a particular line. If I flip away from the Debugger tab, it's green, so it knows we're at a break, but I don't see the familiar green flag next to a line number indicating that we're stopped somewhere.

I talked to vporof about this a few weeks back, but I don't think a bug ever went on file, so here it is.
Thanks for the impressive STR, it was quite helpful! :D
Created attachment 8475446
GCLI listen needs a separate loader

GCLI listen needs the same special loader setup as Browser Toolbox.

Try: https://tbpl.mozilla.org/?tree=Try&rev=d9172c62b334
Comment on attachment 8475446
GCLI listen needs a separate loader

Review of attachment 8475446:
-----------------------------------------------------------------

Taking review because Panos is still on vacation.

::: toolkit/devtools/gcli/commands/listen.js
@@ +34,5 @@
>          description: gcli.lookup("listenPortDesc"),
>        }
>      ],
>      exec: function(args, context) {
> +      if (!serverLoader) {

Nothing else uses serverLoader, so why not make it local here and check `if (!debuggerServer) ...` instead? I think this would be a little cleaner.
(In reply to Nick Fitzgerald [:fitzgen] from comment #3)
> Comment on attachment 8475446
> GCLI listen needs a separate loader
> 
> Review of attachment 8475446:
> -----------------------------------------------------------------
> 
> Taking review because Panos is still on vacation.
> 
> ::: toolkit/devtools/gcli/commands/listen.js
> @@ +34,5 @@
> >          description: gcli.lookup("listenPortDesc"),
> >        }
> >      ],
> >      exec: function(args, context) {
> > +      if (!serverLoader) {
> 
> Nothing else uses serverLoader, so why not make it local here and check `if
> (!debuggerServer) ...` instead? I think this would be a little cleaner.

I was anticipating the case of running the listen command several times.  This way, only one loader is constructed.
Micro-optimization FTW? Ok sounds good to me, but then I think this might be better as a lazy getter on the global.

Nothing to stop this from landing, if you disagree.
Ah sure, fair enough.  Wasn't sure if there were implications of storing state on these GCLI exports, so I had just avoided it.  But yeah, I'll do a lazy getter.
Created attachment 8475494
GCLI listen needs a separate loader (v2, fitzgen: r+)

Try: https://tbpl.mozilla.org/?tree=Try&rev=7ff30ea3704e
https://hg.mozilla.org/integration/fx-team/rev/7e27d477a539
https://hg.mozilla.org/mozilla-central/rev/7e27d477a539
