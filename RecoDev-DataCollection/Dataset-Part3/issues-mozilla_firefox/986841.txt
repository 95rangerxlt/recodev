Lazy-loading Promise.jsm is straightforward since we don't use it in the top-level script, but for ProfilerController we should just require() it at the point of use as the sdk loader always loads eagerly.

Lazy-loading Promise.jsm is straightforward since we don't use it in the top-level script, but for ProfilerController we should just require() it at the point of use as the sdk loader always loads eagerly.
Created attachment 8395241
Lazy load modules as much as possible in gDevTools.jsm

This passes all tests locally.
Try: https://tbpl.mozilla.org/?tree=Try&rev=6483bd320ba3
There is a failing test (browser_toolbox_options.js) in the try run. Working on a fix for that before landing.
Created attachment 8397817
Lazy load modules as much as possible in gDevTools.jsm v2

Fixing that test proved harder than I expected, but totally worthwhile. The problem was that moving the ProfilerController loading out of gDevTools.jsm global scope exposed a race in the devtools loader, which would now load main.js twice in the browser_toolbox_options.js test. If main.js didn't have any side effects this might have been OK, albeit a little slower, but among other things it registers the default tools in the toolbox. The second time registerTools was called, it would unfortunately treat the default tools like add-ons, breaking the test.

To get a better understanding of the race, here is the stack trace for the first attempt to load main.js:

load@resource://gre/modules/commonjs/toolkit/loader.js:270:3
main@resource://gre/modules/commonjs/toolkit/loader.js:649:3
DevToolsLoader.prototype.main@resource://gre/modules/devtools/Loader.jsm:285:5
DevToolsLoader.prototype.setProvider@resource://gre/modules/devtools/Loader.jsm:314:7
DevToolsLoader.prototype._chooseProvider@resource://gre/modules/devtools/Loader.jsm:325:7
DevToolsLoader.prototype.provider@resource://gre/modules/devtools/Loader.jsm:242:7
DevToolsLoader.prototype.main@resource://gre/modules/devtools/Loader.jsm:285:5
@resource:///modules/devtools/gDevTools.jsm:932:1
XPCU_moduleLambda@resource://gre/modules/XPCOMUtils.jsm:226:7
XPCU_defineLazyGetter/<.get@resource://gre/modules/XPCOMUtils.jsm:177:9
gBrowserInit._delayedStartup@chrome://browser/content/browser.js:10841:5

And here is the stack from the second attempt:

load@resource://gre/modules/commonjs/toolkit/loader.js:270:3
main@resource://gre/modules/commonjs/toolkit/loader.js:649:3
DevToolsLoader.prototype.main@resource://gre/modules/devtools/Loader.jsm:285:5
@resource:///modules/devtools/gDevTools.jsm:932:1
XPCU_moduleLambda@resource://gre/modules/XPCOMUtils.jsm:226:7
XPCU_defineLazyGetter/<.get@resource://gre/modules/XPCOMUtils.jsm:177:9
gBrowserInit._delayedStartup@chrome://browser/content/browser.js:10841:5

The change I made to Loader.jsm in this patch is to bail if main() has been already called.

Try: https://tbpl.mozilla.org/?tree=Try&rev=89e7dd956b97
Created attachment 8398378
Miscellaneous lazification and cleanups in devtools framework code

Here are a bunch of cleanups and minor performance improvements that I made while digging into the aforementioned test failure. I think reasonable minds can disagree on what constitutes good taste in some of these cases and it's not necessary for fixing this bug, so feel free to dump it if you want.

Try: https://tbpl.mozilla.org/?tree=Try&rev=388424d622e1
https://hg.mozilla.org/integration/fx-team/rev/08873449ec1e
https://hg.mozilla.org/integration/fx-team/rev/28ac5b562d9f
https://hg.mozilla.org/mozilla-central/rev/08873449ec1e
https://hg.mozilla.org/mozilla-central/rev/28ac5b562d9f
