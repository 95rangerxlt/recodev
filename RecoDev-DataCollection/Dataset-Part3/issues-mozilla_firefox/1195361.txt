For bug 984880, we need a way to get the text of a rule.

For bug 984880, we need a way to get the text of a rule.
Created attachment 8648779
add getRuleText

This is used in a later as-authored patch in bug 984880.  A version of
this was in the original patches, but I've changed the interface,
based on what I needed while evolving the patches.
Comment on attachment 8648779
add getRuleText

Review of attachment 8648779:
-----------------------------------------------------------------

This overall looks great. I just have a few comments and a request to add one more test. I can quickly R+ this after this is done.

::: toolkit/devtools/server/actors/styles.js
@@ +1569,5 @@
> + * Calling the function with the whole text above and line=3 and column=0 would
> + * return "line-height: 2em; color: blue;"
> + * @param {String} initialText
> + * @param {Number} line (1-indexed)
> + * @param {Number} column (1-indexed)

Both line and column params are said to be 1-indexed, but the example in the doc above seems to be 0-indexed.
Can you correct this?
My preference would be for everything to be 0-indexed, but if that makes the code that calls this really awkward, then fine.

@@ +1609,5 @@
> +    }
> +    if (token.tokenType === "symbol") {
> +      if (token.text === "{") {
> +        ++braceDepth;
> +      } else if (token.text === "}") {

If } appears in a content string or URL for example, is it still going to appear as a symbol tokenType? In other words, do you really need to worry about the brace depth here?

@@ +1620,5 @@
> +    endOffset = token.endOffset;
> +  }
> +
> +  // If the rule was of the form "selector {" with no closing brace,
> +  // just return an empty string.

Shouldn't this comment read something like:

// If the rule was of the form "selector {" with no closing brace
// *and* no properties, just return an empty string.

If I read the code correctly, startOffset can only be undefined if the lexer doesn't find any token after the opening brace.

@@ +1631,5 @@
> +          text: text.substring(startOffset, endOffset)};
> +}
> +
> +// This is exported for testing.
> +exports._getRuleText = getRuleText;

Why export this with a leading underscore? I don't see a huge reason to mark this as private to prevent other consumers than the test from using it. And it's awkward having to rename the imported symbol in the test.

@@ +1643,5 @@
> + * @return {object} An object of the form {offset: number, text: string},
> + *                  where the offset is the offset into the input string
> + *                  where the text starts, and where text is the text.
> + */
> +function getTextAtLineColumn(text, line, column) {

This is tested indirectly in test_getRuleText, but I think it could use an xpcshell test of its own too, even if really simple. So at least we have something to build upon if we want to refactor this function's body in the future.
(In reply to Patrick Brosset [:pbrosset] [:pbro] from comment #2)

> My preference would be for everything to be 0-indexed, but if that makes the
> code that calls this really awkward, then fine.

CSS line numbers are 1-based, but I think column numbers are 0-based.
Yay confusion!  Anyway, sorry about this, I will clean it up.

> > +    if (token.tokenType === "symbol") {
> > +      if (token.text === "{") {
> > +        ++braceDepth;
> > +      } else if (token.text === "}") {
> 
> If } appears in a content string or URL for example, is it still going to
> appear as a symbol tokenType? In other words, do you really need to worry
> about the brace depth here?

I think it is valid (but weird) to have paired {} in a CSS declaration.
See http://www.w3.org/TR/CSS2/syndata.html#declaration
So, checking the pairing here is needed.


> Shouldn't this comment read something like:
[...]

Yes, will fix.

> > +exports._getRuleText = getRuleText;
> 
> Why export this with a leading underscore? I don't see a huge reason to mark
> this as private to prevent other consumers than the test from using it. And
> it's awkward having to rename the imported symbol in the test.

No deep reason, just parsimony.  I can fix it.
(In reply to Tom Tromey :tromey from comment #3)
> (In reply to Patrick Brosset [:pbrosset] [:pbro] from comment #2)
> 
> > My preference would be for everything to be 0-indexed, but if that makes the
> > code that calls this really awkward, then fine.
> 
> CSS line numbers are 1-based, but I think column numbers are 0-based.
> Yay confusion!  Anyway, sorry about this, I will clean it up.

Even more confusing than previously believed.

In the CSS lexer, line numbers are 1-based and column numbers are 0-based.
However, this is not how they are exposed by inIDOMUtils.  There,
both values are 1-based.

I tracked this down to this line:

https://dxr.mozilla.org/mozilla-central/source/layout/style/nsCSSParser.cpp#2816

I plan to keep the new code using the 1-based API, as it means we can
feed it values from the CSS parser without further change.
Created attachment 8651874
add getRuleText; r=pbrosset
Comment on attachment 8651874
add getRuleText; r=pbrosset

Updated per review.
https://treeherder.mozilla.org/#/jobs?repo=try&revision=fbaa66c43b0d
https://hg.mozilla.org/integration/fx-team/rev/b2b0c1f6e8f8
https://hg.mozilla.org/mozilla-central/rev/b2b0c1f6e8f8
