Created attachment 8566015
unknownCPOWs.png

+++ This bug was initially created as a clone of Bug #1133577 +++

STR:

1) Visit a site with some links on it in an e10s window
2) Right-click on a link, and choose "Open Link in New Window"

This causes some "unsafe CPOW usage" warnings in the Browser Console.

In browser/base/content/nsContextMenu.js:

  // Open linked-to URL in a new window.
  openLink : function () {
    var doc = this.target.ownerDocument; <-- Causes CPOW warning
    urlSecurityCheck(this.linkURL, this.principal);
    openLinkIn(this.linkURL, "window", this._openLinkInParameters(doc));
  },

[...]

  _openLinkInParameters : function (doc, extra) {
    let params = { charset: doc.characterSet, <-- Causes CPOW warning
                   referrerURI: doc.documentURIObject, <-- Causes CPOW warning
                   noReferrer: BrowserUtils.linkHasNoReferrer(this.link) };
    for (let p in extra)
      params[p] = extra[p];
    return params;
  },


in toolkit/modules/BrowserUtils.jsm:

  /**
   * Return true if linkNode has a rel="noreferrer" attribute.
   *
   * @param linkNode The <a> element, or null.
   * @return a boolean indicating if linkNode has a rel="noreferrer" attribute.
   */
  linkHasNoReferrer: function (linkNode) {
    if (!linkNode)
      return false;

    let rel = linkNode.getAttribute("rel"); <-- Causes CPOW warning
    if (!rel)
      return false;

    // The HTML spec says that rel should be split on spaces before looking
    // for particular rel values.
    let values = rel.split(/[ \t\r\n\f]/);
    return values.indexOf('noreferrer') != -1;
  },


in browser/base/content/utilityOverlay.js:

function openLinkIn(url, where, params) {
[...]
    sa.AppendElement(wuri);
    sa.AppendElement(charset);
    sa.AppendElement(aReferrerURI); <-- Causes CPOW warning
    sa.AppendElement(aPostData);
    sa.AppendElement(allowThirdPartyFixupSupports);


in browser/base/content/browser.js

function _loadURIWithFlags(browser, uri, flags, referrer, charset, postdata) {
[...]
      LoadInOtherProcess(browser, {
        uri: uri,
        flags: flags,
        referrer: referrer ? referrer.spec : null, <-- Causes CPOW warning
      });

...and a delightful amount of CPOW warnings and NS_NOINTERFACE errors attributed to <unknown>, as can be seen in the attached image

Note that two of the warnings are the same locations as in bug 1133577

Created attachment 8566015
unknownCPOWs.png

+++ This bug was initially created as a clone of Bug #1133577 +++

STR:

1) Visit a site with some links on it in an e10s window
2) Right-click on a link, and choose "Open Link in New Window"

This causes some "unsafe CPOW usage" warnings in the Browser Console.

In browser/base/content/nsContextMenu.js:

  // Open linked-to URL in a new window.
  openLink : function () {
    var doc = this.target.ownerDocument; <-- Causes CPOW warning
    urlSecurityCheck(this.linkURL, this.principal);
    openLinkIn(this.linkURL, "window", this._openLinkInParameters(doc));
  },

[...]

  _openLinkInParameters : function (doc, extra) {
    let params = { charset: doc.characterSet, <-- Causes CPOW warning
                   referrerURI: doc.documentURIObject, <-- Causes CPOW warning
                   noReferrer: BrowserUtils.linkHasNoReferrer(this.link) };
    for (let p in extra)
      params[p] = extra[p];
    return params;
  },


in toolkit/modules/BrowserUtils.jsm:

  /**
   * Return true if linkNode has a rel="noreferrer" attribute.
   *
   * @param linkNode The <a> element, or null.
   * @return a boolean indicating if linkNode has a rel="noreferrer" attribute.
   */
  linkHasNoReferrer: function (linkNode) {
    if (!linkNode)
      return false;

    let rel = linkNode.getAttribute("rel"); <-- Causes CPOW warning
    if (!rel)
      return false;

    // The HTML spec says that rel should be split on spaces before looking
    // for particular rel values.
    let values = rel.split(/[ \t\r\n\f]/);
    return values.indexOf('noreferrer') != -1;
  },


in browser/base/content/utilityOverlay.js:

function openLinkIn(url, where, params) {
[...]
    sa.AppendElement(wuri);
    sa.AppendElement(charset);
    sa.AppendElement(aReferrerURI); <-- Causes CPOW warning
    sa.AppendElement(aPostData);
    sa.AppendElement(allowThirdPartyFixupSupports);


in browser/base/content/browser.js

function _loadURIWithFlags(browser, uri, flags, referrer, charset, postdata) {
[...]
      LoadInOtherProcess(browser, {
        uri: uri,
        flags: flags,
        referrer: referrer ? referrer.spec : null, <-- Causes CPOW warning
      });

...and a delightful amount of CPOW warnings and NS_NOINTERFACE errors attributed to <unknown>, as can be seen in the attached image

Note that two of the warnings are the same locations as in bug 1133577
Fixed in Bug 1133577.
