This commit adds the DominatorTree.webidl interface, which is only exposed to
chrome JS. The interface is implemented by mozilla::devtools::DominatorTree,
which is a thin wrapper around JS::ubi::DominatorTree. This does not expose any
methods on the DominatorTree interface, those will come as follow up changesets.

This commit adds the DominatorTree.webidl interface, which is only exposed to
chrome JS. The interface is implemented by mozilla::devtools::DominatorTree,
which is a thin wrapper around JS::ubi::DominatorTree. This does not expose any
methods on the DominatorTree interface, those will come as follow up changesets.
Created attachment 8688597
Expose DominatorTree to JavaScript

r?bholley for dom/webidl related changes

r?sfink for the rest
Created attachment 8688602
Expose DominatorTree to JavaScript

(Woops, forgot to add the new tests!)
Try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=436f6f1b8266
Comment on attachment 8688602
Expose DominatorTree to JavaScript

Review of attachment 8688602:
-----------------------------------------------------------------

Looks relatively generic - please ask someone else.
Comment on attachment 8688602
Expose DominatorTree to JavaScript

You need NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER in your unlink.

But more to the point, do you plan to get other traceable members here?  Because if not, just do:

  NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(DominatorTree, mParent)

and it will do all the NS_IMPL_CYCLE_COLLECTION_CLASS/UNLINK/TRAVERSE/TRACE for you.  If you do need the manual bits, I think the missing unlink is the only part that's missing here.

The indentation in your interface map impl is weird: one entry is indented 4 spaces, one is not indented at all.  Please indent both by 2 spaces like your modeline says.

>+DominatorTree::WrapObject(JSContext* aCx, JS::HandleObject aGivenProto)

Please indent the body of this by two spaces, like the modeline says.

>+  JS::ubi::DominatorTree dominatorTree;

mDominatorTree, for a member.  Certainly if you also have an mParent.  Mixing conventions is worse than either one.

>+  explicit DominatorTree(JS::ubi::DominatorTree&& dominatorTree, nsCOMPtr<nsISupports>& aParent)

Second arg should just be nsISupports*, right?

>+  MOZ_DECLARE_REFCOUNTED_TYPENAME(DominatorTree);

Why is this needed?  I don't think it should be here.

Looks like HeapSnapshot has the same (but preexisting) lack-of-unlinking bug.  Again, it should just use NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE.

I didn't review the devtools tests.

r=me with the above fixed.
Comment on attachment 8688602
Expose DominatorTree to JavaScript

Review of attachment 8688602:
-----------------------------------------------------------------

Nothing looks out of place to me in this scaffolding.
(In reply to Boris Zbarsky [:bz] from comment #5)

Thanks for the cycle collection macro tips, I've been having a hard time with those and I suspect that the leaks we have been seeing there are related.

> >+  explicit DominatorTree(JS::ubi::DominatorTree&& dominatorTree, nsCOMPtr<nsISupports>& aParent)
> 
> Second arg should just be nsISupports*, right?

How do I know it is initially held by someone else and not a dangling pointer in that case? Isn't nsCOMPtr<T>& / RefPtr<T>& equivalent to JS::Handle<T>?
> How do I know it is initially held by someone else and not a dangling pointer

Because that's the contract for refcounted pointer arguments, typically.

> Isn't nsCOMPtr<T>& / RefPtr<T>& equivalent to JS::Handle<T>?

Not really.  Without const it's closer to a MutableHandle or something like that.  You could take a const ref, and then it would be kinda like Handle, but just very very ugly.  So the convention is to use raw ptrs as in params, and callers need to hold the ref.
Created attachment 8689165
Expose DominatorTree to JavaScript

This commit adds the DominatorTree.webidl interface, which is only exposed to
chrome JS. The interface is implemented by mozilla::devtools::DominatorTree,
which is a thin wrapper around JS::ubi::DominatorTree. This does not expose any
methods on the DominatorTree interface, those will come as follow up changesets.
https://hg.mozilla.org/integration/mozilla-inbound/rev/b6c8ce8730d7
https://hg.mozilla.org/mozilla-central/rev/b6c8ce8730d7
