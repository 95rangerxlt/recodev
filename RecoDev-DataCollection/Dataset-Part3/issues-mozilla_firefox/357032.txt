User-Agent:       Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9a1) Gecko/20061016 Minefield/3.0a1
Build Identifier: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9a1) Gecko/20061016 Minefield/3.0a1

Please refer to http://bugzilla.gnome.org/show_bug.cgi?id=355745 for the description of the bug.  Upon analysis of the entry areas in question (using at-poke), it doesn't appear as though the implementation is providing any useful text.  Instead, it seems to provide a single embedded object character as the text.  I think a proper implementation for the entry should probably provide the exact text being displayed in the entry.

Reproducible: Always

Steps to Reproduce:
Please refer to http://bugzilla.gnome.org/show_bug.cgi?id=355745 for the description of the bug.

Actual Results:  
The accessible text for the entry consists of a single embedded object character.  Also notice the very odd behavior when you edit the editable text area in at-poke - the entry in Firefox is populated with very bizarre results.

Expected Results:  
I'd expect the accessible text implementation to provide the exact text that is in the entry.  I'd also expect that editing the text in at-poke results in the exact same text showing up in the entry.

User-Agent:       Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9a1) Gecko/20061016 Minefield/3.0a1
Build Identifier: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9a1) Gecko/20061016 Minefield/3.0a1

Please refer to http://bugzilla.gnome.org/show_bug.cgi?id=355745 for the description of the bug.  Upon analysis of the entry areas in question (using at-poke), it doesn't appear as though the implementation is providing any useful text.  Instead, it seems to provide a single embedded object character as the text.  I think a proper implementation for the entry should probably provide the exact text being displayed in the entry.

Reproducible: Always

Steps to Reproduce:
Please refer to http://bugzilla.gnome.org/show_bug.cgi?id=355745 for the description of the bug.

Actual Results:  
The accessible text for the entry consists of a single embedded object character.  Also notice the very odd behavior when you edit the editable text area in at-poke - the entry in Firefox is populated with very bizarre results.

Expected Results:  
I'd expect the accessible text implementation to provide the exact text that is in the entry.  I'd also expect that editing the text in at-poke results in the exact same text showing up in the entry.
Reproduced with XUL textbox, not reproducible with HTML textbox.

Maybe we need to implement nsXULTextFieldAccessible::CacheChildren() just like nsHTMLTextFieldAccessible::CacheChildren()
I don't know how to reuse the code.

Another issue is we need to make nsHyperTextAccessible::DOMPointToOffset work for XUL text field.
(maybe also need some work for nsXULSelectableAccessible)

I'm not familiar with these codes.
Aaron, can you take this one?
http://lxr.mozilla.org/seamonkey/source/accessible/src/html/nsHyperTextAccessible.cpp#296
returns xul textfield which cause 
http://lxr.mozilla.org/seamonkey/source/accessible/src/html/nsHyperTextAccessible.cpp#302
returns false

html text field returns right child
(In reply to comment #3)
> html text field returns right child
> 

That's why we need copy nsHTMLTextFieldAccessible::CacheChildren() to nsXULTextFieldAccessible::CacheChildren().
After that, at-poke can get the string.
But nsHyperTextAccessible::DOMPointToOffset still not working, so set_text doesn't work correctly.
Should nsHTMLTextfieldAccessible::CacheChildren() be moved to nsHyperTextAccessible? That way it can benefit XUL, HTML and XForms textfields in the same place.

If GetEditor() return nsnull it just calls up to nsAccesible::CacheChildren()

Otherwise we need to do it in 3 places, I think. Not sure if it's the right thing.  What do you guys think?

Also, what's the problem with DOMPointToOffset?
Created attachment 244345
Move nsHTMLTextfieldAccessible::CacheChildren impl to nsHyperTextAccessible. If there's an editor, we use the root DOM node from that as a starting point for the text content, otherwise upcall.

Ginn, I could not find any DOMPointToOffset() problem. This worked with  getting the text, and getting and setting the caret position in the XUL textfield for the location bar.
Comment on attachment 244345
Move nsHTMLTextfieldAccessible::CacheChildren impl to nsHyperTextAccessible. If there's an editor, we use the root DOM node from that as a starting point for the text content, otherwise upcall.

aaron, you can use at-poke, and try to input something in Editable Text field.
You'll find the bug.

HTML text field is fine.

please address this issue before closing this bug.
aaron, did you file another bug for set_text?
(In reply to comment #8)
> aaron, did you file another bug for set_text?

No, for some reason I misunderstood your comment about DOMPointToOffset. Want to file a bug?
(In reply to comment #9)
> (In reply to comment #8)
> > aaron, did you file another bug for set_text?
> 
> No, for some reason I misunderstood your comment about DOMPointToOffset. Want
> to file a bug?
> 

Bug 359790 filed
