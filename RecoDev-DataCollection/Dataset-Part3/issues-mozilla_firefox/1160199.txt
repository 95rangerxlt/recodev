Now that the platform API is in place, we can start implementing the server and client sides of worker debugging.

The first step is to implement a listWorkers request for TabActor. This will allow clients to obtain a list of workers for each tab.

In addition, each TabActor needs to send a workerListChanged notification when the list has changed since the last time the client obtained it from the server (this is analogous to live lists for tabs).

Now that the platform API is in place, we can start implementing the server and client sides of worker debugging.

The first step is to implement a listWorkers request for TabActor. This will allow clients to obtain a list of workers for each tab.

In addition, each TabActor needs to send a workerListChanged notification when the list has changed since the last time the client obtained it from the server (this is analogous to live lists for tabs).
Created attachment 8599931
Implement TabActor.listWorkers
I'll look at this first thing tomorrow
Comment on attachment 8599931
Implement TabActor.listWorkers

Review of attachment 8599931:
-----------------------------------------------------------------

Looks good, just a few nit comments

::: browser/devtools/debugger/test/browser_dbg_listworkers.js
@@ +16,5 @@
> +
> +    let { workers } = yield listWorkers(tabClient);
> +    is(workers.length, 0);
> +
> +    executeSoon(() => { 

nit: extra space (same for all `executeSoon` invocations below)

::: browser/devtools/debugger/test/doc_listworkers-tab.html
@@ +1,2 @@
> +<!DOCTYPE html>
> +<html lang="en">

can you just use doc_empty-tab-01.html instead of adding a new blank file?

::: toolkit/devtools/server/actors/webbrowser.js
@@ +1031,5 @@
> +        window: this.window
> +      });
> +    }
> +
> +    return this._workerActorList.getList().then((actors) => {

you can just do `actors => {}` and drop the parens for single args

@@ +1037,5 @@
> +      for (let actor of actors) {
> +        pool.addActor(actor);
> +      }
> +
> +      this.conn.removeActorPool(this._workerActorPool);

is it ok to pass null to `removeActorPool`?

@@ +1052,5 @@
> +  },
> +
> +  _onWorkerActorListChanged: function () {
> +    this._workerActorList.onListChanged = null;
> +    this.conn.sendActorEvent(this.actorID, "workerListChanged");

You don't send out the changes? Does that mean whenever a worker is created the client fetches the entire list again?
(In reply to James Long (:jlongster) from comment #3)
> Comment on attachment 8599931
> Implement TabActor.listWorkers
> 
> Review of attachment 8599931:
> -----------------------------------------------------------------
> 
> Looks good, just a few nit comments
> 
> ::: browser/devtools/debugger/test/browser_dbg_listworkers.js
> @@ +16,5 @@
> > +
> > +    let { workers } = yield listWorkers(tabClient);
> > +    is(workers.length, 0);
> > +
> > +    executeSoon(() => { 
> 
> nit: extra space (same for all `executeSoon` invocations below)
> 

Extra space where, exactly?

> ::: browser/devtools/debugger/test/doc_listworkers-tab.html
> @@ +1,2 @@
> > +<!DOCTYPE html>
> > +<html lang="en">
> 
> can you just use doc_empty-tab-01.html instead of adding a new blank file?
> 
> ::: toolkit/devtools/server/actors/webbrowser.js
> @@ +1031,5 @@
> > +        window: this.window
> > +      });
> > +    }
> > +
> > +    return this._workerActorList.getList().then((actors) => {
> 
> you can just do `actors => {}` and drop the parens for single args
> 
> @@ +1037,5 @@
> > +      for (let actor of actors) {
> > +        pool.addActor(actor);
> > +      }
> > +
> > +      this.conn.removeActorPool(this._workerActorPool);
> 
> is it ok to pass null to `removeActorPool`?
> 

Yes, I checked it.

> @@ +1052,5 @@
> > +  },
> > +
> > +  _onWorkerActorListChanged: function () {
> > +    this._workerActorList.onListChanged = null;
> > +    this.conn.sendActorEvent(this.actorID, "workerListChanged");
> 
> You don't send out the changes? Does that mean whenever a worker is created
> the client fetches the entire list again?

That's correct. This is how 'live lists' are specified. Listing TabActors works the same way.
Try push for the TabActor.listWorkers patch:
https://treeherder.mozilla.org/#/jobs?repo=try&revision=842ff87fd1d1
(In reply to Eddy Bruel [:ejpbruel] from comment #4)
> (In reply to James Long (:jlongster) from comment #3)
> > Comment on attachment 8599931
> > Implement TabActor.listWorkers
> > 
> > Review of attachment 8599931:
> > -----------------------------------------------------------------
> > 
> > Looks good, just a few nit comments
> > 
> > ::: browser/devtools/debugger/test/browser_dbg_listworkers.js
> > @@ +16,5 @@
> > > +
> > > +    let { workers } = yield listWorkers(tabClient);
> > > +    is(workers.length, 0);
> > > +
> > > +    executeSoon(() => { 
> > 
> > nit: extra space (same for all `executeSoon` invocations below)
> > 
> 
> Extra space where, exactly?

It was showing a red box at the end of the line, I'm not sure if that was something else. I thought it was telling me that it was "executeSoon(() => { ".
Well, try push looks mostly fine, except that the test seems to time out on Linux opt builds because listTabs cannot find the tab after it has been added. This doesn't happen for other tests that use this mechanism, so I'm unsure why it would happen here.

I've made another try push with a dump statement added to shed some light on what's going on:
https://treeherder.mozilla.org/#/jobs?repo=try&revision=ee909376a872
That try push makes no sense. The tab is clearly there when we're listing it, but findTab cannot find it in the list. To make matters even weirder, this only happens on Linux opt builds.

Here's yet another try push, with even more log statements added:
https://treeherder.mozilla.org/#/jobs?repo=try&revision=c78383df37e4
Oh, I think I actually made a mistake in the implementation of findTab. Trying again:
https://treeherder.mozilla.org/#/jobs?repo=try&revision=5d9cf2a9f1e8
https://hg.mozilla.org/integration/fx-team/rev/3d0199c117d4
https://hg.mozilla.org/mozilla-central/rev/3d0199c117d4
