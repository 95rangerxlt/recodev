We put things in the cache via tab elements and get them out that way too. However, sometimes we delete invalid cache entries via their <browser> element, which won't actually do anything.

We put things in the cache via tab elements and get them out that way too. However, sometimes we delete invalid cache entries via their <browser> element, which won't actually do anything.
Oh, I see.
Care to elaborate on what the reasoning is? Looks weird to me too, probably would to others. Are there comments?
Oh, _normalizeToBrowser. That is confusing. Can we just get rid of it and put .linkedBrowser on all callers?
Yeah, I think readability would definitely benefit from it.
Hi, 

I am interested in fixing this bug. So, please assign this bug to me. 

Thanks in advance,

Regards,
A. Anup
Any progress, Anup?
Discussed over IRC: «
Yoric Let me explain in more details.
Yoric
At the moment, TabStateCache.has, TabStateCache.get, etc. can be called with either a <tab> or a <browser> element.
Yoric
When we call _normalizeToBrowser, we convert the <tab> to a <browser> element.
Yoric
(each <tab> has a property .linkedBrowser that contains the corresponding <browser> element)
Yoric
The idea is to make sure that we never call TabStateCache.has, TabStateCache.get, etc. with a <tab>, only with a <browser>
Yoric
This means that you need to do the following:
Yoric
1/ find all the callers of TabStateCache.has, TabStateCache.get, etc. that pass as argument a <tab> and replace the tab with the corresponding <browser>;
Yoric
2/ get rid of _normalizeToBrowser;
Archaeopteryx has joined (itsme@moz-72CC0EB5.cust.telecolumbus.net)
Yoric
3/ replace _normalizeToBrowser with a test that throws a TypeError if the argument is not a <tab>.
»
Created attachment 828011
bug_916496.patch
Comment on attachment 828011
bug_916496.patch

Review of attachment 828011:
-----------------------------------------------------------------

Just a "feedback?" will be sufficient for now.
Comment on attachment 828011
bug_916496.patch

Review of attachment 828011:
-----------------------------------------------------------------

Good start.

::: browser/components/sessionstore/src/SessionStore.jsm
@@ +1972,5 @@
>          return;
>        }
>  
>        for (let tab of win.gBrowser.tabs) {
> +        if (!TabStateCache.has(tab.linkedBrowser)) {

Yes

@@ +1977,2 @@
>            countdown++;
> +          TabState.collect(tab.linkedBrowser).then(done, fail);

No, you have changed the methods of TabStateCache, not the methods of TabState.

@@ +4227,5 @@
>      }
>  
>      // If the tab hasn't been restored yet, just return the data we
>      // have saved for it.
>      let browser = tab.linkedBrowser;

Please move that line above and use |browser| instead of |tab.linkedBrowser| in the lines you have just changed.

::: browser/components/sessionstore/src/TabStateCache.jsm
@@ +123,5 @@
>  
>    /**
>     * Tells whether an entry is in the cache.
>     *
>     * @param {XULElement} aKey The tab or the associated browser.

Please update the documentation.

@@ +127,5 @@
>     * @param {XULElement} aKey The tab or the associated browser.
>     * @return {bool} Whether there's a cached entry for the given tab.
>     */
>    has: function (aTab) {
> +    let key = this.linkedBrowser(aTab);

I'd like this method to look as follows:

has: function (aBrowser) {
  this._ensureIsBrowser(aBrowser);
  return this._data.has(aBrowser);
}

Same kind of change for other methods.

@@ +212,5 @@
>      }
>      TabStateCacheTelemetry.recordAccess(!!data);
>    },
>  
> +  linkedBrowser: function(aKey) {

Please rename this method to _ensureIsBrowser.

@@ +217,3 @@
>      let nodeName = aKey.localName;
> +    if (nodeName != "tab") {
> +      throw new TypeError("Key is not a tab: " + nodeName);

No, we want to ensure that the argument is a browser, not a tab.
Created attachment 828067
bug_916496.patch
Comment on attachment 828067
bug_916496.patch

Review of attachment 828067:
-----------------------------------------------------------------

Please number your patches.

::: browser/components/sessionstore/src/SessionStore.jsm
@@ +1942,5 @@
>     * @return {Promise} the promise that is fulfilled when the tab data is ready
>     */
> +
> +  let browser = tab.linkedBrowser;
> +  

That's not even correct JavaScript.

::: browser/components/sessionstore/src/TabStateCache.jsm
@@ +123,5 @@
>  
>    /**
>     * Tells whether an entry is in the cache.
>     *
> +   * @param {XULElement} aKey The associated browser.

It's not called aKey, it's aBrowser now.

@@ +135,5 @@
>    /**
>     * Add or replace an entry in the cache.
>     *
> +   * @param {XULElement} aBrowser The key, which is
> +   * the corresponding browser. The binding will disappear

Get rid of "which is the corresponding browser".

@@ +142,3 @@
>     */
> +  set: function(aBrowser, aValue) {
> +    let key = this._ensureIsBrowser(aBrowser);

Please read your code.
this._ensureIsBrowser doesn't return anything.
Created attachment 828665
bug_916496.patch
Comment on attachment 828665
bug_916496.patch

Review of attachment 828665:
-----------------------------------------------------------------

Looks good, although I'd like a few minor changes.
As mentioned previously, please number your patches.

::: browser/components/sessionstore/src/SessionStore.jsm
@@ +1976,5 @@
>        for (let tab of win.gBrowser.tabs) {
> +
> +        let browser = tab.linkedBrowser;
> +
> +        if (!TabStateCache.has(browser)) {

Just tab.linkedBrowser will do nicely here.

@@ +2328,5 @@
>      if (overwriteTabs) {
>        for (let i = 0; i < tabbrowser.tabs.length; i++) {
>          let tab = tabbrowser.tabs[i];
> +        let browser = tab.linkedBrowser;
> +        TabStateCache.delete(browser);

Here, too.

@@ +4282,5 @@
>        // the cache hasn't been filled by collect() in the meantime, let's
>        // fill the cache with the data we received.
>        if (this._pendingCollections.get(tab) == promise) {
> +        let browser = tab.linkedBrowser;
> +        TabStateCache.set(browser, tabData);

Here, too.

@@ +4308,5 @@
>     * tab has not been invalidated since the last call to
>     * collectSync(aTab), the same object is returned.
>     */
>    collectSync: function (tab) {
> +    let browser = tab.linkedBrowser;

Ok with that one.

::: browser/components/sessionstore/src/TabStateCache.jsm
@@ +123,5 @@
>  
>    /**
>     * Tells whether an entry is in the cache.
>     *
> +   * @param {XULElement} aBrowser The associated browser.

Just "The browser" will do nicely as a documentation for aBrowser.
(same for the rest of this file).

@@ +215,5 @@
>  
> +  _ensureIsBrowser: function(aBrowser) {
> +    let nodeName = aBrowser.localName;
> +    if (nodeName == "browser") {
> +     return aBrowser;

Don't return anything.
Created attachment 829221
bug_916496_(4).patch
Comment on attachment 829221
bug_916496_(4).patch

Review of attachment 829221:
-----------------------------------------------------------------

Looks good to me.
Note, however, that SessionStore.jsm has changed since your last pull. You will need to merge the changes.
Created attachment 831558
916496_(5)
Comment on attachment 831558
916496_(5)

Please pick one: either review or feedback.
Comment on attachment 831558
916496_(5)

Review of attachment 831558:
-----------------------------------------------------------------

::: browser/components/sessionstore/src/TabState.jsm
@@ +180,5 @@
>     * tab has not been invalidated since the last call to
>     * collectSync(aTab), the same object is returned.
>     */
>    collectSync: function (tab) {
> +    let browser = tab.linkedBrowser;

Please do this after we check whether |tab| is |null|, not before.

::: browser/components/sessionstore/src/TabStateCache.jsm
@@ +136,5 @@
>     * Add or replace an entry in the cache.
>     *
> +   * @param {XULElement} aBrowser The browser.
> +   * The binding will disappear
> +   * if the browser is destroyed.

Nit: Could you put the whole sentence on one line?

@@ +220,2 @@
>      }
> +    

Nit: Please remove that empty line.
Created attachment 832888
916496_(6)
Comment on attachment 832888
916496_(6)

Please don't forget to mark the patch as a patch.
Comment on attachment 832888
916496_(6)

Review of attachment 832888:
-----------------------------------------------------------------

Looks good to me, running the tests: https://tbpl.mozilla.org/?tree=Try&rev=af6ad08f0b0a
Please don't forget to add a commit message along the lines of "Bug 916496 - accessing TabStateCache only with browser elements;r=yoric".
Created attachment 832902
bug(7)-916496.patch
Comment on attachment 832902
bug(7)-916496.patch

Review of attachment 832902:
-----------------------------------------------------------------

Please don't forget the ";r=yoric" at the end of the commit message.
Created attachment 832910
bug(8)-916496.patch
Comment on attachment 832910
bug(8)-916496.patch

Review of attachment 832910:
-----------------------------------------------------------------

::: browser/components/sessionstore/src/TabState.jsm
@@ +102,5 @@
>      if (!tab) {
>        throw new TypeError("Expecting a tab");
>      }
>  
> +    let browser = tab.linkedBrowser;

Nit: the same line below should be removed now

@@ +154,5 @@
>        // If we're still the latest async collection for the given tab and
>        // the cache hasn't been filled by collect() in the meantime, let's
>        // fill the cache with the data we received.
>        if (this._pendingCollections.get(tab) == promise) {
> +        TabStateCache.set(tab.linkedBrowser, tabData);

Nit: why not use |browser| you defined above?

::: browser/components/sessionstore/src/TabStateCache.jsm
@@ +215,5 @@
> +  _ensureIsBrowser: function(aBrowser) {
> +    let nodeName = aBrowser.localName;
> +    if (nodeName != "browser") {
> +      throw new TypeError("Key is not a browser: " + nodeName);
> +    } 

Nit: trailing white space
Any news from that patch, Bhagya?
This is going to be invalid soon when we switch shistory to broadcasting, too. Stealing so that there will be no disappointed mentees.
Fixed by bug 960903.
