Created attachment 786427
Patch

We call beginBatchUpdate and endBatchUpdate twice per legacy toolbar during the first window that is created. When endBatchUpdate is called we save out the state of the UI to the prefs.

We can remove one of these saves by keeping track of how many times that endBatchUpdate will need to be called and only save upon the last one needed.

Created attachment 786427
Patch

We call beginBatchUpdate and endBatchUpdate twice per legacy toolbar during the first window that is created. When endBatchUpdate is called we save out the state of the UI to the prefs.

We can remove one of these saves by keeping track of how many times that endBatchUpdate will need to be called and only save upon the last one needed.
Comment on attachment 786427
Patch

Review of attachment 786427:
-----------------------------------------------------------------

Just curious about the new begin/endBatchUpdate calls. Other than that, this looks good - but I'll wait for your answer before I give an r+.

::: browser/components/customizableui/src/CustomizableUI.jsm
@@ +262,5 @@
>      this.endBatchUpdate(true);
>    },
>  
>    registerToolbar: function(aToolbar) {
> +    this.beginBatchUpdate();

Remind me again why these new begin/endBatchUpdate calls are needed? I mean, with the stack, I guess it doesn't really add much overhead - but we didn't need them before. Why do we need them now?

@@ +1279,3 @@
>    },
>  
>    endBatchUpdate: function(aForceSave) {

I guess this isn't really forcing a save anymore - it's forcing the dirty state so that we *do* save when we've popped the last item off the stack. Maybe rename this to aForceDirty.
(In reply to Mike Conley (:mconley) from comment #1)
> Comment on attachment 786427
> Patch
> 
> Review of attachment 786427:
> -----------------------------------------------------------------
> 
> Just curious about the new begin/endBatchUpdate calls. Other than that, this
> looks good - but I'll wait for your answer before I give an r+.
> 
> ::: browser/components/customizableui/src/CustomizableUI.jsm
> @@ +262,5 @@
> >      this.endBatchUpdate(true);
> >    },
> >  
> >    registerToolbar: function(aToolbar) {
> > +    this.beginBatchUpdate();
> 
> Remind me again why these new begin/endBatchUpdate calls are needed? I mean,
> with the stack, I guess it doesn't really add much overhead - but we didn't
> need them before. Why do we need them now?

This is why we need the new calls:

Previous:
registerToolbar:
.. restoreStateForArea:
.. .. beginBatchUpdate // count goes from 0 to 1
.. .. endBatchUpdate   // count goes from 1 to 0
.. buildArea:
.. .. beginBatchUpdate // count goes from 0 to 1
.. .. endBatchUpdate   // count goes from 1 to 0

In the previous state, there was no enclosing "stack" for the batch updates, and so the count would reach zero at each endBatchUpdate call. With the changes in this patch, the count will not reach zero until the last endBatchUpdateCall.

With patch:
registerToolbar:
.. beginBatchUpdate    // count goes from 0 to 1
.. restoreStateForArea:
.. .. beginBatchUpdate // count goes from 1 to 2
.. .. endBatchUpdate   // count goes from 2 to 1
.. buildArea:
.. .. beginBatchUpdate // count goes from 1 to 2
.. .. endBatchUpdate   // count goes from 2 to 1
.. endBatchUpdate      // count goes from 1 to 0

> @@ +1279,3 @@
> >    },
> >  
> >    endBatchUpdate: function(aForceSave) {
> 
> I guess this isn't really forcing a save anymore - it's forcing the dirty
> state so that we *do* save when we've popped the last item off the stack.
> Maybe rename this to aForceDirty.

Yep, sounds good.
Comment on attachment 786427
Patch

Ah, makes perfect sense. Thanks for the great explanation!
https://hg.mozilla.org/projects/ux/rev/d1543fec3f27
https://hg.mozilla.org/mozilla-central/rev/d1543fec3f27
