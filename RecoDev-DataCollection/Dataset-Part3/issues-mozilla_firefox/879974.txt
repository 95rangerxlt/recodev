There are two options from a shorlander mockup:

http://cl.ly/image/2W2X2i360K2M

There are two options from a shorlander mockup:

http://cl.ly/image/2W2X2i360K2M
Dupe of bug 879697 ?
*** Bug 879697 has been marked as a duplicate of this bug. ***
(In reply to Guillaume C. [:ge3k0s] from comment #1)
> Dupe of bug 879697 ?

I've marked this as a dupe. Note though that the search box styling when in "more tools to add to the menu and the toolbar" isn't nice (cut on the right).
I'm leaning towards using the bottom option, which looks rather nice to me.
I think I like the top one better. It is more representative of how they will look and visually indicates they are linked.
Created attachment 764714
Patch: adjust styling of zoom and edit controls when they reside in the cust. palette

went with option 1.
These bugs didn't make it into the UR Build that went out in bug 879846. Clearing the [User Research Build+] flag.
Removing the items from M7 that do not block landing on m-c.
Comment on attachment 764714
Patch: adjust styling of zoom and edit controls when they reside in the cust. palette

Review of attachment 764714:
-----------------------------------------------------------------

So this looks mostly OK - I'm just concerned that we're adding too much display logic into the CustomizableWidget.jsm JS code. I should have caught this the first time, but some of the stuff we do for the wide widget items can probably done with some CSS.

I'm also reluctant to let you add more descendant selectors, as these are bad for performance, and we're already hurting on performance as it is. :/ Could you replace the descendant selectors I've highlighted with child selectors instead? My notes will show you how.

::: browser/components/customizableui/src/CustomizableWidgets.jsm
@@ +197,5 @@
>      onBuild: function(aDocument) {
>        let inPanel = (this.currentArea == CustomizableUI.AREA_PANEL);
>        let noautoclose = inPanel ? "true" : null;
>        let flex = inPanel ? "1" : null;
> +      let cls = inPanel ? "panel-combined-button" : this.currentArea ? "toolbarbutton-1" : null;

There are an awful lot of style rules and things going on in here. I wonder if it might be better to move some of this display logic to CSS.

For example, allow the zoom widget to have both the panel-combined-button and toolbarbutton-1, but make the panel-combined-button list-style-image rule more specific, like this:

.panel-combined-button[customizableui-areatype="menu-panel"] {
  list-style-image: url(menupanel small icons url);
}

@@ +258,1 @@
>          zoomResetButton.setAttribute("hidden", "true");

I'm just realizing now that this is probably something we can handle in CSS, via:

#zoom-controls:not([customizableui-areatype="menu-panel"]) > #zoom-reset-button {
  display: none;
}

Would you mind filing a follow-up bug to move the reset button behaviour out of JS and into CSS?

@@ +262,3 @@
>          let attrs = {
> +          noautoclose: inPanel ? "true" : null,
> +          flex: inPanel ? "1" : null,

We can probably use CSS logic in here as well:

.panel-combined-button[customizableui-areatype="menu-panel"] {
  -moz-box-flex: 1;
}

::: browser/themes/osx/customizableui/panelUIOverlay.css
@@ +17,5 @@
>    #PanelUI-mainView toolbarbutton > .toolbarbutton-icon {
>      width: 20px;
>    }
>  
> +  #customization-palette #edit-controls toolbarbutton,

Instead of the descendant selector, we can use:

toolbarpaletteitem[place="palette"] > #edit-controls > toolbarbutton,
toolbarpaletteitem[place="palette"] > #zoom-controls > toolbarbutton,

@@ +120,5 @@
>    #customization-palette #stop-button {
>      -moz-image-region: rect(384px 128px 448px 64px);
>    }
>  
> +  #customization-palette #cut-button,

toolbarpaletteitem[place="palette"] > #edit-controls > #cut-button,

@@ +125,5 @@
>    #PanelUI-contents #cut-button {
>      -moz-image-region: rect(0 32px 32px 0);
>    }
>  
> +  #customization-palette #copy-button,

toolbarpaletteitem[place="palette"] > #edit-controls > #copy-button,

@@ +130,5 @@
>    #PanelUI-contents #copy-button {
>      -moz-image-region: rect(0 64px 32px 32px);
>    }
>  
> +  #customization-palette #paste-button,

toolbarpaletteitem[place="palette"] > #edit-controls > #paste-button,

@@ +135,5 @@
>    #PanelUI-contents #paste-button {
>      -moz-image-region: rect(0 96px 32px 64px);
>    }
>  
> +  #customization-palette #zoom-out-button,

toolbarpaletteitem[place="palette"] > #zoom-controls > #zoom-out-button,

@@ +140,5 @@
>    #PanelUI-contents #zoom-out-button {
>      -moz-image-region: rect(0 128px 32px 96px);
>    }
>  
> +  #customization-palette #zoom-in-button,

toolbarpaletteitem[place="palette"] > #zoom-controls > #zoom-in-button,

@@ +146,5 @@
>      -moz-image-region: rect(0 160px 32px 128px);
>    }
>  }
>  
> +#customization-palette #edit-controls toolbarbutton:not(:first-child),

toolbarpaletteitem[place="palette"] > #edit-controls > toolbarbutton:not(:first-child),

@@ +147,5 @@
>    }
>  }
>  
> +#customization-palette #edit-controls toolbarbutton:not(:first-child),
> +#customization-palette #zoom-controls toolbarbutton:not(:first-child),

toolbarpaletteitem[place="palette"] > #zoom-controls > toolbarbutton:not(:first-child),

@@ +152,5 @@
>  #PanelUI-contents #edit-controls toolbarbutton:not(:first-child),
>  #PanelUI-contents #zoom-controls toolbarbutton:not(:first-child) {
>    -moz-margin-start: 0;
>  }
> +#customization-palette #edit-controls toolbarbutton:not(:last-child),

toolbarpaletteitem[place="palette"] > #edit-controls > toolbarbutton:not(:last-child),

@@ +153,5 @@
>  #PanelUI-contents #zoom-controls toolbarbutton:not(:first-child) {
>    -moz-margin-start: 0;
>  }
> +#customization-palette #edit-controls toolbarbutton:not(:last-child),
> +#customization-palette #zoom-controls toolbarbutton:not(:last-child),

toolbarpaletteitem[place="palette"] > #zoom-controls > toolbarbutton:not(:last-child),

@@ +158,5 @@
>  #PanelUI-contents #edit-controls toolbarbutton:not(:last-child),
>  #PanelUI-contents #zoom-controls toolbarbutton:not(:last-child) {
>    -moz-margin-end: 0;
>  }
> +#customization-palette #edit-controls toolbarbutton:not(:first-child):not(:last-child),

toolbarpaletteitem[place="palette"] > #edit-controls > toolbarbutton:not(:first-child):not(:last-child),

@@ +159,5 @@
>  #PanelUI-contents #zoom-controls toolbarbutton:not(:last-child) {
>    -moz-margin-end: 0;
>  }
> +#customization-palette #edit-controls toolbarbutton:not(:first-child):not(:last-child),
> +#customization-palette #zoom-controls toolbarbutton:not(:first-child):not(:last-child),

toolbarpaletteitem[place="palette"] > #zoom-controls > toolbarbutton:not(:first-child):not(:last-child),

@@ +166,5 @@
>    margin-left: 0;
>    margin-right: 0;
>  }
>  
> +#customization-palette #zoom-in-button,

toolbarpaletteitem[place="palette"] > #zoom-controls > #zoom-in-button,

@@ +167,5 @@
>    margin-right: 0;
>  }
>  
> +#customization-palette #zoom-in-button,
> +#customization-palette #zoom-out-button,

toolbarpaletteitem[place="palette"] > #zoom-controls > #zoom-out-button,

::: browser/themes/shared/customizableui/customizeMode.inc.css
@@ +105,5 @@
>    overflow: hidden;
>    display: inline-block;
>  }
>  
> +#customization-palette > #wrapper-edit-controls,

#wrapper-edit-controls[place="palette"],
#wrapper-zoom-controls[place="palette"]

@@ +107,5 @@
>  }
>  
> +#customization-palette > #wrapper-edit-controls,
> +#customization-palette > #wrapper-zoom-controls {
> +  width: 225px;

How come the width has to be set here and on the toolbarpaletteitem-box?

@@ +123,5 @@
> +  width: 225px;
> +  max-width: 225px;
> +}
> +
> +#customization-palette > #wrapper-edit-controls toolbarbutton,

toolbarpaletteitem[place="palette"] > #edit-controls > toolbarbutton,
toolbarpaletteitem[place="palette"] > #zoom-controls > toolbarbutton,

@@ +132,5 @@
> +  height: 24px;
> +  margin-top: 24px;
> +}
> +
> +#customization-palette > #wrapper-edit-controls toolbarbutton:not(#zoom-in-button):not(#zoom-out-button) > .toolbarbutton-text,

#zoom-in-button and #zoom-out-button will never be under #wrapper-edit-controls... not sure what this rule does.

@@ +133,5 @@
> +  margin-top: 24px;
> +}
> +
> +#customization-palette > #wrapper-edit-controls toolbarbutton:not(#zoom-in-button):not(#zoom-out-button) > .toolbarbutton-text,
> +#customization-palette > #wrapper-zoom-controls toolbarbutton:not(#zoom-in-button):not(#zoom-out-button) > .toolbarbutton-text {

#wrapper-edit-controls[place="palette"] > #zoom-controls > #zoom-reset-button > .toolbarbutton-text

::: browser/themes/shared/customizableui/panelUIOverlay.inc.css
@@ +116,5 @@
>    display: block;
>  }
>  
>  #PanelUI-contents #edit-controls toolbarbutton > .toolbarbutton-icon,
> +#PanelUI-contents #zoom-controls toolbarbutton > .toolbarbutton-icon,

#edit-controls[customizableui-areatype="menu-panel"] > toolbarbutton > .toolbarbutton-icon,
#zoom-controls[customizableui-areatype="menu-panel"] > toolbarbutton > .toolbarbutton-icon,
toolbarpaletteitem[place="palette"] > #edit-controls > toolbarbutton > .toolbarbutton-icon,
toolbarpaletteitem[place="palette"] > #zoom-controls > toolbarbutton > .toolbarbutton-icon

@@ +134,5 @@
>    max-height: 6em;
>    list-style-image: url(chrome://browser/skin/customizableui/menuPanel-icons.png);
>  }
>  
>  #PanelUI-contents #edit-controls toolbarbutton,

#edit-controls[customizableui-areatype="menu-panel"] > toolbarbutton,
#zoom-controls[customizableui-areatype="menu-panel"] > toolbarbutton,
toolbarpaletteitem[place="palette"] > #edit-controls > toolbarbutton,
toolbarpaletteitem[place="palette"] > #zoom-controls > toolbarbutton,

@@ +148,2 @@
>  #customization-palette #edit-controls toolbarbutton,
> +#customization-palette #zoom-controls toolbarbutton {

This rule can probably be combined with the rules above.

@@ +158,5 @@
>  }
>  
>  /* These smaller icons have different styling between the panel and the toolbar,
>     hence not referencing toolbar.png for these icons. */
>  #PanelUI-contents #edit-controls toolbarbutton,

Please modify the CSS as I have above, using customizableui-areatype and toolbarpaletteitem[place="palette"] and switch us from the descendant selectors.

@@ +180,5 @@
>  }
>  
>  #PanelUI-contents #edit-controls toolbarbutton > .toolbarbutton-icon,
> +#PanelUI-contents #zoom-controls toolbarbutton > .toolbarbutton-icon,
> +#customization-palette #edit-controls toolbarbutton > .toolbarbutton-icon,

Replace these three rule blocks with child selectors.

@@ +248,5 @@
>  panelview toolbarbutton:not([disabled]):not([checked]):not([open]):not(:active):hover,
>  #widget-overflow-list > toolbarbutton:not([disabled]):not([checked]):not([open]):not(:active):hover,
>  #PanelUI-contents #edit-controls toolbarbutton,
>  #PanelUI-contents #zoom-controls toolbarbutton,
> +#customization-palette #edit-controls toolbarbutton,

Child selectors please

@@ +393,5 @@
>  #customization-palette #stop-button {
>    -moz-image-region: rect(192px 64px 224px 32px);
>  }
>  
> +#PanelUI-contents #cut-button,

Child selectors please.
(In reply to Mike Conley (:mconley) from comment #9)
>
> So this looks mostly OK - I'm just concerned that we're adding too much
> display logic into the CustomizableWidget.jsm JS code. I should have caught
> this the first time, but some of the stuff we do for the wide widget items
> can probably done with some CSS.

We can use bug 882353 for this.
 
> I'm also reluctant to let you add more descendant selectors, as these are
> bad for performance, and we're already hurting on performance as it is. :/
> Could you replace the descendant selectors I've highlighted with child
> selectors instead? My notes will show you how.

Believe me, I didn't like writing those selectors :/ I was merely following the precedents.

All of this will be addressed in the upcoming patch, thanks for the thorough review!
Ok, I started replacing all relevant descendant selectors (the ones you mentioned) with child selectors. That didn't go well. The result is that all descendant selectors that define the generic styles take precedence over the updated child selector based style overrides, rendering them useless.

Unless we start addressing the use of all descendant selectors (scoped stylesheets?), I have no hope of getting this done.
(In reply to Mike de Boer [:mikedeboer] from comment #11)
> Ok, I started replacing all relevant descendant selectors (the ones you
> mentioned) with child selectors. That didn't go well. The result is that all
> descendant selectors that define the generic styles take precedence over the
> updated child selector based style overrides, rendering them useless.
> 

Gah. :/ I guess we can't do it piecemeal. Thanks for trying out my suggestion - I guess this will all need to be cleaned up in bug 877697.

> Unless we start addressing the use of all descendant selectors (scoped
> stylesheets?), I have no hope of getting this done.

The non-descendant selector things I mentioned though - I suppose those are still actionable?
(In reply to Mike Conley (:mconley) from comment #12)
> 
> The non-descendant selector things I mentioned though - I suppose those are
> still actionable?

Of course! Expect an updated patch soon...
(In reply to Mike Conley (:mconley) from comment #9)
> 
> @@ +107,5 @@
> >  }
> >  
> > +#customization-palette > #wrapper-edit-controls,
> > +#customization-palette > #wrapper-zoom-controls {
> > +  width: 225px;
> 
> How come the width has to be set here and on the toolbarpaletteitem-box?

Because on customizeMode.inc.css, line 102, the width is explicitly set to 110px. This is not enough space to fit Stephens' design.

> #customization-palette > toolbarpaletteitem {
>  width: 110px;
Created attachment 765927
v2: adjust styling of zoom and edit controls when they reside in the cust. palette
Comment on attachment 765927
v2: adjust styling of zoom and edit controls when they reside in the cust. palette

Review of attachment 765927:
-----------------------------------------------------------------

Ok, I'm fine to land this now - but I'd like to eventually clean up some of the manual style-fiddling we're doing in JS. As I said before, a lot of it could probably be done with some better CSS rules instead. Can you please file that follow-up?

Thanks,

-Mike

::: browser/components/customizableui/src/CustomizableWidgets.jsm
@@ +266,5 @@
>          };
>          for (let i = 0, l = node.childNodes.length; i < l; ++i) {
>            setAttributes(node.childNodes[i], attrs);
>          }
> +        zoomResetButton.setAttribute("hidden", inPanel || !aArea ? "false" : "true");

This can be simplified, I think, to:

zoomResetButton.setAttribute("hidden", !inPanel && aArea);
Created attachment 793501
v3: adjust styling of zoom and edit controls when they reside in the cust. palette

Mike, somehow I hesitated to land this patch (I don't remember why anymore), so now I unbitrotted it. During this process I made too many changes to make me not wanting to land the patch on UX. Could you review it for me again, please?
Comment on attachment 793501
v3: adjust styling of zoom and edit controls when they reside in the cust. palette

Review of attachment 793501:
-----------------------------------------------------------------

Thanks for attacking this one, Mike!

It's been a while since I've looked at this, and I may have forgotten some conversations that we've had in IRC or Vidyo or Bugzilla about it, but I'm curious why so much of the styling seems to be happening in script as opposed to via CSS rules keyed off of the customizableui-areatype attributes? Or the palette equivalent of #wrapper-id[place="palette"] > item?

I think I see a few places in panelUIOverlay.inc.css where we can remove some descendant selectors instead of adding to them.

How does this sound to you?

::: browser/components/customizableui/src/CustomizableWidgets.jsm
@@ +282,5 @@
>        const kPanelId = "PanelUI-popup";
>        let inPanel = (this.currentArea == CustomizableUI.AREA_PANEL);
>        let noautoclose = inPanel ? "true" : null;
>        let flex = inPanel ? "1" : null;
> +      let cls = inPanel ? "panel-combined-button" : this.currentArea ? "toolbarbutton-1" : null;

Can you please unfold the nested ternary into two steps? Nested ternary is kinda hard to read.

@@ +350,4 @@
>          let panel = aDocument.getElementById(kPanelId);
>          panel.addEventListener("popupshowing", updateZoomResetButton);
> +      } else if (this.currentArea) {
> +        zoomResetButton.setAttribute("hidden", "true");

Forgive me if I've asked this before - but why are we doing the zoom reset button hiding in script? Isn't this something that some CSS rules could take care of automatically?

@@ +360,4 @@
>          let attrs = {
> +          noautoclose: inPanel ? "true" : null,
> +          flex: inPanel ? "1" : null,
> +          class: inPanel ? "panel-combined-button" : aArea ? "toolbarbutton-1" : null

Same as above wrt nested ternary.

@@ +453,5 @@
>      allowedAreas: [CustomizableUI.AREA_PANEL, CustomizableUI.AREA_NAVBAR],
>      onBuild: function(aDocument) {
>        let inPanel = (this.currentArea == CustomizableUI.AREA_PANEL);
>        let flex = inPanel ? "1" : null;
> +      let cls = inPanel ? "panel-combined-button" : this.currentArea ? "toolbarbutton-1" : null;

Another nested ternary

::: browser/themes/shared/customizableui/customizeMode.inc.css
@@ +163,5 @@
> +  height: 24px;
> +  margin-top: 24px;
> +}
> +
> +#customization-palette > #wrapper-edit-controls toolbarbutton > .toolbarbutton-text,

Is there a way to avoid the descendant selector in these two lines? We know the ancestry of the edit-controls toolbarbuttons and the zoom reset button...

@@ +168,5 @@
> +#customization-palette > #wrapper-zoom-controls #zoom-reset-button > .toolbarbutton-text {
> +  display: inline;
> +}
> +
> +#customization-palette > #wrapper-edit-controls toolbarbutton > .toolbarbutton-icon,

Same as above - there should be a way to avoid the descendant selector here.

::: browser/themes/shared/customizableui/panelUIOverlay.inc.css
@@ +66,5 @@
>  #PanelUI-contents > toolbarbutton > .toolbarbutton-text {
>    font-size: 10px;
>  }
>  
> +@menuPanelAndPalette@ #wrapper-edit-controls #edit-controls,

I *think* we can get rid of the descendant selectors:

#wrapper-edit-controls:-moz-any([place="palette"],[place="panel"]) > #edit-controls
#wrapper-zoom-controls:-moz-any([place="palette"],[place="panel"]) > #zoom-controls

@@ +99,5 @@
>    padding-left: 5px;
>    padding-right: 5px;
>  }
>  
> +@menuPanelAndPalette@ #edit-controls toolbarbutton > .toolbarbutton-icon,

Here's a little different, because we can either be wrapped or unwrapped:

#edit-controls[customizableui-areatype="menu-panel"] > toolbarbutton > .toolbarbutton-icon,
#wrapper-edit-controls[place="palette"] > #edit-controls > toolbarbutton > .toolbarbutton-icon,
#zoom-controls[customizableui-areatype="menu-panel"] > toolbarbutton > .toolbarbutton-icon,
#wrapper-zoom-controls[place="palette"] > #zoom-controls > toolbarbutton > .toolbarbutton-icon {

@@ +118,5 @@
>    height: 6em;
>    max-height: 6em;
>  }
>  
> +@menuPanelAndPalette@ #edit-controls toolbarbutton,

Same as above.

@@ +124,5 @@
>    -moz-box-orient: horizontal;
>    min-width: 7em;
>  }
>  
> +@menuPanelAndPalette@ #edit-controls toolbarbutton,

Same as above.
Comment on attachment 793501
v3: adjust styling of zoom and edit controls when they reside in the cust. palette

Withdrawing review request until I hear more.
Created attachment 795970
v4: adjust styling of zoom and edit controls when they reside in the cust. palette

Mike, I was indeed able to remove all the descendant selectors related to the edit and zoom controls. Additionally, I removed the logic from JS regarding the flex property for buttons and hiding the zoom-reset button and applied a CSS-only solution.

Much cleaner, thanks for the suggestions!
Comment on attachment 795970
v4: adjust styling of zoom and edit controls when they reside in the cust. palette

Review of attachment 795970:
-----------------------------------------------------------------

The Zoom Controls look right, but the Edit Controls look wrong: http://i.imgur.com/abBmhiy.png

I'm pretty sure they're supposed to be like the Zoom Controls, in that they look like they do in the panel.
I must have done something wrong. A rebuild of browser/ made everything hunky-dory. This works really well.

Deep-diving code now.
Comment on attachment 795970
v4: adjust styling of zoom and edit controls when they reside in the cust. palette

Review of attachment 795970:
-----------------------------------------------------------------

Great job on this one! Looks good to me - modulo a single nit.

::: browser/components/customizableui/src/CustomizableWidgets.jsm
@@ +285,2 @@
>        let cls = inPanel ? "panel-combined-button" : "toolbarbutton-1";
> +      if (!this.currentArea)

Let's give this conditional a little more space and put a newline above and below.
Thanks!!

https://hg.mozilla.org/projects/ux/rev/fb6df9dd3082
https://hg.mozilla.org/mozilla-central/rev/fb6df9dd3082
