Turn accessibility on Gnome desktop
Open a webpage, press Ctrl+F, input 2 characters, firefox crashed.

Firefox will not crash after backing out bug 357032.

Turn accessibility on Gnome desktop
Open a webpage, press Ctrl+F, input 2 characters, firefox crashed.

Firefox will not crash after backing out bug 357032.
Created attachment 244981
stack

perhaps it's a dupe of bug 359790
not reproduce on latest trunk
maybe you need input 3 or more characters sometimes.
*** Bug 362317 has been marked as a duplicate of this bug. ***
*** Bug 362401 has been marked as a duplicate of this bug. ***
regression of 357032
Note the bug is still occurring on Thunderbird build: version 3 alpha 1 (20061201). It makes Thunderbird unusable for a person with disabilities since one cannot enter the Mail Server Password to log in.  Typing into the password text field immediately crashes Thunderbird.

See Orca bug: http://bugzilla.gnome.org/show_bug.cgi?id=372765


This bug depends on Bug 357032 since it's introduced by the patch in it.

root cause is that htmltextfield has different structure with xultextfield. most like htmltextfield->editor, xultextfield->inputfield->editor.

when use treewalker build cachechildren, htmltextfield is fine with getrootelement, xultextfield should use getrootelement->getparentnode.

if fix as that, test result is fine.

easist fix that i can see is to 1)backout 357032 and add cachechildren in xultextfield, or 2)declare a new method in hypertext as buildcachechildren(nsIDOMNode) to make code reuse.

i'm not familar with xform textfield.

aaron, pls. comment here
I just downloaded and tested version 3 alpha 1 (20061211). This problem still occurs when I enter text into many textfields.  For example, entering text into "Subject:" textfield in the Compose mail dialog, always causes Thunderbird 3 to crash.  This continues to be a *show-stopper problem* for using Thunderbird 3 with assistive technologies, like Orca. Unfortunately, I cannot send to a TalkBack data since clicking on the "Data: button causes TalkBack to crash.

Note: Thunderbird 3 crashes whether Orca is running or not. It's only necessary for assistive technologies to be enabled.


I need to echo that this really is a horrible horrible problem.  Frequent crashes tend to stifle any chance of other development with Firefox and/or Thunderbird.
Thanks everyone for pushing me to look at this, I've been experiencing end of the year burnout when it comes to debugging. My apologies for the slowness.

Anyway, backing out bug 357032 is not the right answer. The issue is that when nsDocAccessible::InvalidateCacheSubtree() tries uses GetAccessibleInParentChain(), it ends up with an accessible for the HTML textfield instead of for the XUL textbox. I don't even recall if it's a good idea for us to even be creating an accessible for that HTML textfield (which is only there to help the XUL textbox be implemented).

Anyway, I've got a hacky fix, but I need to work on it more tomorrow.
Created attachment 248337
Use GetRelevantContentNode() in selection change code and fix both GetParent and GetAccessibleInParentChain to use it
So there is the non-hacky fix. We've been getting the wrong parent for text accessibles inside a XUL textbox. The problem occurs in several places.

> I don't even recall if it's a good idea for us to even be creating an accessible 
> for that HTML textfield (which is only there to help the XUL textbox be 
> implemented).

To answer my own question, we create it here but destroy it immediately and purposely don't cache it.
http://lxr.mozilla.org/seamonkey/source/accessible/src/xul/nsXULFormControlAccessible.cpp#706
Other than that we should not be creating it.
Comment on attachment 248337
Use GetRelevantContentNode() in selection change code and fix both GetParent and GetAccessibleInParentChain to use it

several points.
1. in nsDocAccessible, you use privateAccessible->GetCachedParent
.question is if parent is not cached, that will be a bug. we discussed it in bug 359784.
2.now getParent has same behavior with getAccessibleInParentChian,  we dont file a bug for it as we discussed in 359784.

besides that r=nian
(In reply to comment #15)
> (From update of attachment 248337 [edit])
> several points.
> 1. in nsDocAccessible, you use privateAccessible->GetCachedParent
> .question is if parent is not cached, that will be a bug. we discussed it in
> bug 359784.
That's just DEBUG code for testing the cache. If the parent isn't cached it no longer performs the test. I just wanted to get rid of the side effect of creating the parent while testing in debug.
Comment on attachment 248337
Use GetRelevantContentNode() in selection change code and fix both GetParent and GetAccessibleInParentChain to use it


>   nsCOMPtr<nsIAccessibleText> textAcc;
>   while (focusNode) {
>+    // Make sure to get the correct starting node for selection events inside XBL content trees
>+    nsCOMPtr<nsIDOMNode> relevantNode;
>+    if (NS_SUCCEEDED(accService->GetRelevantContentNodeFor(focusNode, getter_AddRefs(relevantNode))) && relevantNode) {
>+      focusNode  = relevantNode;
>+    }
>+
>     nsCOMPtr<nsIContent> content = do_QueryInterface(focusNode);
>     if (!content || (PR_FALSE == content->IsNodeOfType(nsINode::eTEXT) && 
>         PR_FALSE == content->IsNativeAnonymous())) { // Don't want anonymous nodes inside a form control
>       accService->GetAccessibleInShell(focusNode, presShell,  getter_AddRefs(accessible));
>       textAcc = do_QueryInterface(accessible);

Btw, when is content nsnull?

> R_FALSE == content->IsNodeOfType(nsINode::eTEXT)

I think
!content->IsNodeOfType(nsINode::eTEXT)
looks a bit better :)

> PR_FALSE == content->IsNativeAnonymous())) { // Don't want anonymous nodes inside a form control

Do you still need this check?
> >     if (!content || (PR_FALSE == content->IsNodeOfType(nsINode::eTEXT) && 
> >         PR_FALSE == content->IsNativeAnonymous())) { // Don't want anonymous > Btw, when is content nsnull?
It's null when we're on the document node.

> > PR_FALSE == content->IsNodeOfType(nsINode::eTEXT)
> I think
> !content->IsNodeOfType(nsINode::eTEXT)
> looks a bit better :)
I used to always think that, but I've seen a few times where people accidentally don't notice the prefixed !. The PR_FALSE is especially easier to see when you have parenthesis. In other words, I prefer (PR_FALSE == IsFooey() over (!IsFooey()) . 

But anyway, since we can get rid of the IsNativeAnonymous() because of what you noticed below I guess we'll just use !.

> > PR_FALSE == content->IsNativeAnonymous())) { // Don't want anonymous nodes inside a form control
> 
> Do you still need this check?
I don't think we do.

Do you need a new patch for that change?


Comment on attachment 248337
Use GetRelevantContentNode() in selection change code and fix both GetParent and GetAccessibleInParentChain to use it

(In reply to comment #18)

> But anyway, since we can get rid of the IsNativeAnonymous() because of what you
> noticed below I guess we'll just use !.
> 
> > > PR_FALSE == content->IsNativeAnonymous())) { // Don't want anonymous nodes inside a form control
> > 
> > Do you still need this check?
> I don't think we do.
> 
> Do you need a new patch for that change?
> 

No, with that r=me
*** Bug 365275 has been marked as a duplicate of this bug. ***
