I keep twitter open in an app tab and restart my Nightly daily to update. In the last 1-2 weeks my twitter app tab hasn't restored. It just comes in blank after restart. If I hit the refresh button it reloads and renders.

I keep twitter open in an app tab and restart my Nightly daily to update. In the last 1-2 weeks my twitter app tab hasn't restored. It just comes in blank after restart. If I hit the refresh button it reloads and renders.
*** Bug 1159467 has been marked as a duplicate of this bug. ***
Does this happen without any add-ons in your profile? Does this only happen with e10s? Do you have a large number of tabs/windows? Can you maybe create a copy of your profile and try to close a few tabs and remove a few add-ons to narrow it down? I can't reproduce it here.
I have disabled all of my addons and closed all but my pinned tabs and it still reproduces. Anything else I can do to help diagnose?

Here's what's in my browser console (except for some debug spew that I've got enabled for Loop): 

TypeError: aWindow.QueryInterface is not a function PrivateBrowsingUtils.jsm:49:11
Sending message that cannot be cloned. Are you trying to send an XPCOM object? SiteSpecificUserAgent.js:50:0
The character encoding of a framed document was not declared. The document may appear different if viewed without the document framing it. xti.php
Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead eed3767b0b98f24f24fd45c47377d56dcalendarjs_doozercompiled__en.js:232:0
Sending message that cannot be cloned. Are you trying to send an XPCOM object? SiteSpecificUserAgent.js:50:0
OpenGL compositor Initialized Succesfully.
Version: 2.1 NVIDIA-8.26.29 310.40.55f01
Vendor: NVIDIA Corporation
Renderer: NVIDIA GeForce GT 750M OpenGL Engine
FBO Texture Target: TEXTURE_2D
I have the same problem with Gmail Firefox 37.0.2 stable (in win8.1 x64).
To reproduce:
in a clean FF profile,
- open mail.google.com and login. Pin this tab.
- enable "show my windows and tabs from last time" 
- restart Firefox a few times.


The pinned gmail tab will either load ok, 
or, [case #1] it will show the error "Secure connection fails" (see screenshot 1).
If then you press "Try again", then Gmail loads ok.

If then you close and restart Firefox a few more times,
then the error "Secure connection fails" will surely occur most of the times,
or [case #2] the loading procedure will hang with an empty and idle progress bar (see screenshot 2).

Once this happens, then pressing "reload current page" (or F5) doesn't fixes this:
the tab title spinner rotates for a while, but the progress bar remains empty and idle.
And, If you close Firefox and restart it,
then Gmail'loading will surely hang every single time.
The only way to fix it is to press force reload (Ctrl+F5)
Created attachment 8601708
Gmail 1 - error.png
Created attachment 8601709
Gmail 2 - hang.png
Thanks, Kostas! Using the STR from comment 4, I was able to reproduce the stuck loading screen (~20% of the time using Nightly 40) in a relatively-clean profile with no add-ons enabled. Kostas is using Firefox 37.0.2 so this is not an e10s problem.

I was not able to reproduce the stuck loading screen with Firefox 31 (ESR), but after a couple browser restarts, I hit the "Secure Connection Failed (Error code: sec_error_ocsp_unknown_cert)" error.

With Firefox 37.0.02, after a few rapid restarts, I hit an HTTPS error: "mail.google.com uses an invalid security certificate. The certificate is not trusted because the issuer certificate is unknown. (Error code: sec_error_unknown_issuer)".
Tim, do you need any more information about this bug? I can reproduce this problem pretty easily with Kosta's STR in comment 4. This is a very frustrating bug because it is not fixed by reloading or force-reloading the pinned tab on my machine.
I can't reproduce this here...

The odd thing is that Kostas is hitting an OCSP error (thought they'd staple?) just like you in comment #7. But then there's also a problem with the root? Not sure what's happening.
Aha, just saw ocsp_unknown_cert...
Looks like there are two failing OCSP request, sometimes one fails and then a subsequent ones succeeds and overrides the cached response. Sometimes both of them fail and we see a warning.
We're sending this OCSP request:

http://www.lapo.it/asn1js/#30493047304530433041300906052B0E03021A05000414F2E06AF9858A1D8D709B4919237AA9B51A287E6404144ADD06161BBCF668B576F581B6BB621ABA5A812F020879652CE5F5CA6419

to http://clients1.google.com/ocsp and it's responding with "unknown cert" twice.
In other runs it's the exact same request that fails and a few milliseconds later succeeds.
Brian, David, do you maybe have an idea about how to debug this further? Is one of Google's OCSP responders faulty? Should we handle errors here differently?
Here's a failing OCSP response:

http://www.lapo.it/asn1js/#308201CB0A0100A08201C4308201C006092B0601050507300101048201B1308201AD308196A21604144ADD06161BBCF668B576F581B6BB621ABA5A812F180F32303135303532313037303630385A306B30693041300906052B0E03021A05000414F2E06AF9858A1D8D709B4919237AA9B51A287E6404144ADD06161BBCF668B576F581B6BB621ABA5A812F02085FBBFC7C4C6EFF928000180F32303135303532313037303630385AA011180F32303135303532383037303630385A300D06092A864886F70D0101050500038201010011F574F87FE73AB4E319060BE7DE9298E5EACD403A54ADF9F461ADDE08D9498BCD2ED616F7AAA629152382AA09B9E14F4E1AFD0A07EE272E177605193FD75418094AA80047390CD1699D35C7DAF1941CBBD0DBD1A8CDD3257502BADD04BBBC151531FF264EC0FA1D8835B73C00766426019BED630EE7AFD14FB5461977BC6ED919FC71B2A2344A7EFCB0FAEEC3ECD447732A7748FF1FB52D2272B74064634D84B370D4ECC902C20A7719184E4B6A3A809A4A1534DF3EA42BB432DD11174D00AE3B57A8BC9F4A7A1897ED6AF8094021F9EB610DDB45DFCB2A180C5CEE5F7ED476B1BC34DEBA6D0D9A8A78EE06E75E95E87B0131CF88951921BF5C08E6C7E7C1BE
Here's a valid response:

http://www.lapo.it/asn1js

It looks like the CertificateSerialNumbers aren't matching?
More complete, here are two request/response pairs for the same cert:

# Failing
request: http://www.lapo.it/asn1js/#30493047304530433041300906052B0E03021A05000414F2E06AF9858A1D8D709B4919237AA9B51A287E6404144ADD06161BBCF668B576F581B6BB621ABA5A812F02086B8FE9B75EED2966
response: http://www.lapo.it/asn1js

# Succeeding
request: http://www.lapo.it/asn1js/#30493047304530433041300906052B0E03021A05000414F2E06AF9858A1D8D709B4919237AA9B51A287E6404144ADD06161BBCF668B576F581B6BB621ABA5A812F02086B8FE9B75EED2966
response: http://www.lapo.it/asn1js

In the failing request/response pair the serial numbers don't match up.
We currently seem to handle a missing response for a cert the same as a response=unknown. Shouldn't we rather handle this as a server failure in that it ignored one of our requests?
Looks like bug 1060112.
(In reply to Tim Taubert [:ttaubert] from comment #12)
> We're sending this OCSP request:
> 
> http://www.lapo.it/asn1js/
> #30493047304530433041300906052B0E03021A05000414F2E06AF9858A1D8D709B4919237AA9
> B51A287E6404144ADD06161BBCF668B576F581B6BB621ABA5A812F020879652CE5F5CA6419
> 
> to http://clients1.google.com/ocsp and it's responding with "unknown cert"
> twice.

Just to be clear, your change in bug 1060112 will change the error reported sometimes, but it won't actually fix this problem, right?

I'm guessing that this is what is happening: We have a cached HTTP response. Between the time we wrote the response to the cache and the time we retrieved the response from the cache, the certificate expired. The OCSP responder then responses "don't know about that cert," which is reasonable. Then Firefox gives up. Instead, Firefox should either throw away the cached HTTP response, or it should update the certificate in the response with a new certificate that was obtained from a new network request.

This theory could very well be wrong. IIRC Firefox doesn't validate certificates when reading responses from the cached, so I would be surprised if it is correct. But, it fits the observed behavior.
(In reply to Brian Smith (:briansmith, :bsmith, use NEEDINFO?) from comment #20)
> Just to be clear, your change in bug 1060112 will change the error reported
> sometimes, but it won't actually fix this problem, right?

With the patch I can't reproduce it anymore. Current Firefox queries the OCSP responder and sometimes receives the erroneous response containing no entry for the requested cert. Verification will fail with SEC_ERROR_OCSP_UNKNOWN_CERT and we put that in the cache. If subsequent requests fail too we show an SSL error page, which happens only intermittently probably due to Google's load balancing.

With the new error code we wouldn't cache the OCSP response, we only do that for "Success", "ERROR_REVOKED_CERTIFICATE", and "ERROR_OCSP_UNKNOWN_CERT".
*** Bug 1151880 has been marked as a duplicate of this bug. ***
Is anyone of you three brave enough to give the patch in bug 1060112 a try? Would be great to know if that stops it from reproducing for you as well. You might have to clobber for that, NSS is sometimes weird when building.
(In reply to Tim Taubert [:ttaubert] from comment #21)
> (In reply to Brian Smith (:briansmith, :bsmith, use NEEDINFO?) from comment
> #20)
> > Just to be clear, your change in bug 1060112 will change the error reported
> > sometimes, but it won't actually fix this problem, right?
> 
> With the patch I can't reproduce it anymore. Current Firefox queries the
> OCSP responder and sometimes receives the erroneous response containing no
> entry for the requested cert. Verification will fail with
> SEC_ERROR_OCSP_UNKNOWN_CERT and we put that in the cache. If subsequent
> requests fail too we show an SSL error page, which happens only
> intermittently probably due to Google's load balancing.

Yes, but it seems like that patch only fixes the special case of where the OCSP responder does the wrong thing: sending a "Good" response for a different certificate instead of sending an "Unknown" response. Won't things still be broken for the case where the OCSP responder does the right thing?

> With the new error code we wouldn't cache the OCSP response, we only do that
> for "Success", "ERROR_REVOKED_CERTIFICATE", and "ERROR_OCSP_UNKNOWN_CERT".

I'm guessing that the real problem is that we're asking for an OCSP response for a certificate that is expired. Why?

Remember that recently the OCSP request code was changed to support short-lived certificates and maybe for other reasons. I suspect a regression in one of those changes.
(In reply to Brian Smith (:briansmith, :bsmith, use NEEDINFO?) from comment #24)
> Yes, but it seems like that patch only fixes the special case of where the
> OCSP responder does the wrong thing: sending a "Good" response for a
> different certificate instead of sending an "Unknown" response. Won't things
> still be broken for the case where the OCSP responder does the right thing?

When the responder responds with "cert unknown" we will block and I thought that was a deliberate decision? If it's not we should probably address that in another bug? It feels like you're right and we should probably treat it like an aborted connection and block only when the responder tells us the cert was revoked.

> I'm guessing that the real problem is that we're asking for an OCSP response
> for a certificate that is expired. Why?

It might be an expired certificate used somewhere in Gmail but I didn't check that. Maybe the OCSP responders aren't properly synced and one of them is missing some information? Not sure what's more likely.

> Remember that recently the OCSP request code was changed to support
> short-lived certificates and maybe for other reasons. I suspect a regression
> in one of those changes.

I didn't know, that's certainly possible.
(In reply to Tim Taubert [:ttaubert] from comment #23)
> Is anyone of you three brave enough to give the patch in bug 1060112 a try?
> Would be great to know if that stops it from reproducing for you as well.
> You might have to clobber for that, NSS is sometimes weird when building.

I can give it a try
The patch on bug 1060112 didn't fix this for me.
Created attachment 8610173
0001-Bug-1158855-Don-t-collect-children-of-SHEntries-if-o.patch

The OCSP warning was definitely one problem that is fixed now and I don't see that anymore. I can still reproduce the frozen loading bar and I figured out what it is:

This seems to be a variation (or regression?) of bug 450595, probably caused by bug 936271. Gmail uses an <iframe> to load JavaScript and turns that into a wyciwyg:// page by calling document.write() some time after the load event. After restarting the browser we restore the history for all those frames and somehow now the <iframe> isn't static anymore but session history reports it as dynamic. I couldn't find out how they do that, would otherwise have written a test for it.

Dynamic frames are very error prone and we shouldn't try collect/restore history entries. This would be in line with the docShell's behavior [1] too. I suggest we don't collect children if one or more of those were dynamically added and simply load the top entry when restoring a page.

[1] https://mxr.mozilla.org/mozilla-central/source/docshell/base/nsDocShell.cpp#1459
(In reply to Tim Taubert [:ttaubert] from comment #28)
> This seems to be a variation (or regression?) of bug 450595, probably caused
> by bug 936271. Gmail uses an <iframe> to load JavaScript and turns that into
> a wyciwyg:// page by calling document.write() some time after the load
> event. After restarting the browser we restore the history for all those
> frames and somehow now the <iframe> isn't static anymore but session history
> reports it as dynamic.

I should've added that on the third load we will then override <iframe id="js_frame"> with something else, I think a mostly blank HTML page. If I manually kick off loading the correct URL on the stuck loading screen the app starts loading and works fine.
Created attachment 8610208
0001-Bug-1158855-Don-t-collect-children-of-SHEntries-if-o.patch, v2

Forgot to remove some code we don't need anymore.
Comment on attachment 8610208
0001-Bug-1158855-Don-t-collect-children-of-SHEntries-if-o.patch, v2

Review of attachment 8610208:
-----------------------------------------------------------------

Sounds sane.
https://hg.mozilla.org/integration/fx-team/rev/1e8841b048f4
https://hg.mozilla.org/mozilla-central/rev/1e8841b048f4
Comment on attachment 8610208
0001-Bug-1158855-Don-t-collect-children-of-SHEntries-if-o.patch, v2

Approval Request Comment
[Feature/regressing bug #]: bug 936271
[User impact if declined]: Gmail and Twitter tabs might seem stuck after restoring a session, can be fixed force-reloading the tab.
[Describe test coverage new/current, TreeHerder]: No test coverage for the bug itself, but for the changes introduced.
[Risks and why]: Risk is rather low, we simply stopped collecting child frames for dynamic sites and will simply reload subframe URLs from cache or network.
[String/UUID change made/needed]: None.
Comment on attachment 8610208
0001-Bug-1158855-Don-t-collect-children-of-SHEntries-if-o.patch, v2

User facing issue. Taking the fix as it is early in the beta cycle.
https://hg.mozilla.org/releases/mozilla-aurora/rev/5a039cf64262
https://hg.mozilla.org/releases/mozilla-beta/rev/2d83b8a022a6
