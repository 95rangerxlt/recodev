In bug 953328 the biggestIconURL getter was added to ManifestHelper, we should use it in the desktop installer too.

In bug 953328 the biggestIconURL getter was added to ManifestHelper, we should use it in the desktop installer too.
Created attachment 8422051
Patch

This was a good pretext to introduce some icon-related tests :)

The tests are installing apps with different |icons| manifest fields and checking whether the size of the destination file is the expected one. Checking the size is the easiest possible test.
We can't just read the destination files and test them for equality with the original files, because they are a little different (and on Mac they're in the Apple icon format, that we can't read so easily).

P.S.: I still need to modify the iconSizes arrays for Windows and Mac.
Comment on attachment 8422051
Patch

Review of attachment 8422051:
-----------------------------------------------------------------

There are a few extraneous whitespace characters:

05-14 10:44 > git apply ~/use_manifesthelper_biggestIconURL
/Users/myk/use_manifesthelper_biggestIconURL:403: trailing whitespace.
  {"32": "http://example.com/chrome/toolkit/webapps/tests/data/icon.png"}, 
/Users/myk/use_manifesthelper_biggestIconURL:764: trailing whitespace.
  {"32": "http://example.com/chrome/toolkit/webapps/tests/data/icon.png"}, 
/Users/myk/use_manifesthelper_biggestIconURL:968: trailing whitespace.


Also, building with this patch fails with:

 0:39.90 mozpack.errors.ErrorMessage: Symlink target path does not exist: /Users/myk/Mozilla/gecko-dev/toolkit/webapps/tests/data/icon.png

Presumably because you diffed without --binary, so your diff tool excluded toolkit/webapps/tests/data/icon.png.

Otherwise, this looks great.  I'm looking forward to the final patch!

::: toolkit/webapps/tests/head.js
@@ +136,5 @@
> +                    getTypeFromFile(aFile);
> +
> +  var inputStream = Cc["@mozilla.org/network/file-input-stream;1"].
> +                    createInstance(Ci.nsIFileInputStream);
> +  inputStream.init(aFile, 0x01, 0600, 0);

Nits:

* define a PR_* constant to specify the argument to the ioFlags parameter or pass -1 to "open the file in default mode (PR_RDONLY)" (per the nsIFileInputStream interface definition);

* replace the deprecated octal syntax 0600 with the new recommended 0o600 syntax for the argument to the "perm" parameter or pass -1 to "use the default value (0)";

* close the file after reading from it or pass Ci.nsIFileInputStream.CLOSE_ON_EOF to the behaviorFlags parameter to close the file automatically.
Created attachment 8422765
Patch

Updated patch with the icon that I forgot to hg add :)

I spun a try run to see what the icon sizes were on Windows and Mac, and I noticed that there's an error on Mac if you pass an URL that doesn't point to an icon.

I'll try to debug the error tomorrow.
There's actually a problem on Windows too. In the "icon from package" case, we can't remove the app zip file after the test is finished.
I think the problem is that we open a JAR channel to the app zip file and the channel keeps the file open. Is it possible to force closing it?
I've managed to fix the Windows error by flushing the ZipReaderCache.
Created attachment 8424489
Patch

On Mac, SIPS fails silently to convert icons, so we have to verify if the appicon.icns file is actually created after SIPS terminates its execution. If it isn't created, _processIcon should reject its promise so that the default icon is used.

On different Mac versions SIPS generates icons with different sizes, so I've modified the test to use |isfuzzy| instead of |is|.
For example the default icon is ~13000 bytes on 10.8, ~15000 bytes on 10.9 (so I'm testing if the size is in the range 14000 ± 2000).

I've also had to modify |isfuzzy| to pass if the values are exactly the same, so that on Windows and Linux we can use |isfuzzy| like |is| (and I think this should be the expected behavior of |isfuzzy|).
Comment on attachment 8424489
Patch

Review of attachment 8424489:
-----------------------------------------------------------------

(In reply to Marco Castelluccio [:marco] from comment #6)
> On Mac, SIPS fails silently to convert icons, so we have to verify if the
> appicon.icns file is actually created after SIPS terminates its execution.
> If it isn't created, _processIcon should reject its promise so that the
> default icon is used.
> 
> On different Mac versions SIPS generates icons with different sizes, so I've
> modified the test to use |isfuzzy| instead of |is|.
> For example the default icon is ~13000 bytes on 10.8, ~15000 bytes on 10.9
> (so I'm testing if the size is in the range 14000 ± 2000).

Requesting feedback from smichaud to confirm that this is the best we can do on Mac.


> I've also had to modify |isfuzzy| to pass if the values are exactly the
> same, so that on Windows and Linux we can use |isfuzzy| like |is| (and I
> think this should be the expected behavior of |isfuzzy|).

That makes sense to me as well.  Requesting review from jmaher on this change.

::: toolkit/webapps/tests/test_hosted_icons.xul
@@ +154,5 @@
> +    [27000, 2000],
> +    [27000, 2000],
> +    [27000, 2000],
> +    [14000, 2000],
> +  ];

Nit: it'd be helpful to add a comment explaining the second number in these iconSizes definitions.
Comment on attachment 8424489
Patch

Review of attachment 8424489:
-----------------------------------------------------------------

overall this is good. The majority of my comments are nit's or questions.

::: toolkit/webapps/tests/head.js
@@ +132,5 @@
> +
> +function generateDataURI(aFile) {
> +  var contentType = Cc["@mozilla.org/mime;1"].
> +                    getService(Ci.nsIMIMEService).
> +                    getTypeFromFile(aFile);

you don't do any error handling in this function

::: toolkit/webapps/tests/test_hosted_icons.xul
@@ +8,5 @@
>          xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
>    <script type="application/javascript"
>            src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
> +  <script type="application/javascript"
> +          src="chrome://mochikit/content/chrome-harness.js"></script>

this file is copied from test_hosted.xul and the chrome.ini indicates it is a chrome test case, should we fix test_hosted.xul to include chrome-harness.js as well?

@@ +77,5 @@
> +    [2787, 0],
> +    [2787, 0],
> +    [2787, 0],
> +    [4009, 0],
> +  ];

could you explain what these numbers mean? I assume they are the sizes we expect from the iconTests, but making that clearer for fresh eyes on this test would help.

@@ +110,5 @@
> +    [4286, 0],
> +    [4286, 0],
> +    [4286, 0],
> +    [16958, 0],
> +  ];

these are different sizes than on Linux above, moar comments please!

@@ +193,5 @@
> +
> +    // On Mac build servers, we don't have enough privileges to write to /Applications,
> +    // so we install apps in a user-owned directory.
> +    if (MAC) {
> +      nativeApp._rootInstallDir = OS.Path.join(OS.Constants.Path.homeDir, "Applications");

do we ever clean this up?

@@ +216,5 @@
>  
>  // The test doesn't work yet on Mac OS X 10.6 machines.
>  // See bug 993690.
>  if (MAC_106) {
>    todo(false, "The test doesn't work on Mac OS X 10.6 machines");

I really wish we could detect os version in the manifest files (chrome.ini) so we could remove the in-test filtering.  Also if this is copied from test_hosted.xul, does 10.6 not work for this test case?

::: toolkit/webapps/tests/test_packaged_icons.xul
@@ +8,5 @@
>          xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
>    <script type="application/javascript"
>            src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
> +  <script type="application/javascript"
> +          src="chrome://mochikit/content/chrome-harness.js"></script>

does test_packaged.xul need to include chrome-harness.js?  For this test file, the same comments from test_hosted_icons.xul apply
Comment on attachment 8424489
Patch

>> On different Mac versions SIPS generates icons with different
>> sizes, so I've modified the test to use |isfuzzy| instead of |is|.
>> For example the default icon is ~13000 bytes on 10.8, ~15000 bytes
>> on 10.9 (so I'm testing if the size is in the range 14000 ± 2000).
>
> Requesting feedback from smichaud to confirm that this is the best
> we can do on Mac.

Forgive my ignorance ... but what is SIPS? :-)

In any case I know nothing about the sizes or compressibility
of Mac icons, or about how this changes from one version of OS X to
another.  So I doubt that I can give any useful advice here.

That said, though, this use of isfuzzy seems reasonable to me.
(In reply to Joel Maher (:jmaher) from comment #8)
> ::: toolkit/webapps/tests/head.js
> @@ +132,5 @@
> > +
> > +function generateDataURI(aFile) {
> > +  var contentType = Cc["@mozilla.org/mime;1"].
> > +                    getService(Ci.nsIMIMEService).
> > +                    getTypeFromFile(aFile);
> 
> you don't do any error handling in this function

The test should fail if there's an exception in
this function, this is why I'm not handling exceptions
here.

> ::: toolkit/webapps/tests/test_hosted_icons.xul
> @@ +8,5 @@
> >          xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
> >    <script type="application/javascript"
> >            src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
> > +  <script type="application/javascript"
> > +          src="chrome://mochikit/content/chrome-harness.js"></script>
> 
> this file is copied from test_hosted.xul and the chrome.ini indicates it is
> a chrome test case, should we fix test_hosted.xul to include
> chrome-harness.js as well?

chrome-harness.js is needed for |getTestFilePath|, but
test_hosted.xul and test_packaged.xul don't use it.

> @@ +193,5 @@
> > +
> > +    // On Mac build servers, we don't have enough privileges to write to /Applications,
> > +    // so we install apps in a user-owned directory.
> > +    if (MAC) {
> > +      nativeApp._rootInstallDir = OS.Path.join(OS.Constants.Path.homeDir, "Applications");
> 
> do we ever clean this up?

No, should we? All the tests are setting this (because
otherwise the test can't run on our build machines).

> 
> @@ +216,5 @@
> >  
> >  // The test doesn't work yet on Mac OS X 10.6 machines.
> >  // See bug 993690.
> >  if (MAC_106) {
> >    todo(false, "The test doesn't work on Mac OS X 10.6 machines");
> 
> I really wish we could detect os version in the manifest files (chrome.ini)
> so we could remove the in-test filtering.  Also if this is copied from
> test_hosted.xul, does 10.6 not work for this test case?

I've added this possibility in bug 945869, but we can't
use it yet because of bug 989583.

All the tests under toolkit/webapps don't work on Mac 10.6.

(In reply to Steven Michaud from comment #9)
> Forgive my ignorance ... but what is SIPS? :-)

The mighty "Scriptable Image Processing System":
https://developer.apple.com/library/Mac/documentation/Darwin/Reference/ManPages/man1/sips.1.html
Thanks for the reply Marco.

> @@ +193,5 @@
> > +
> > +    // On Mac build servers, we don't have enough privileges to write to /Applications,
> > +    // so we install apps in a user-owned directory.
> > +    if (MAC) {
> > +      nativeApp._rootInstallDir = OS.Path.join(OS.Constants.Path.homeDir, "Applications");
> 
> do we ever clean this up?

No, should we? All the tests are setting this (because
otherwise the test can't run on our build machines).

^ I am just concerned that our machines are not cleaning up this directory between tests- we could have a file permissions or space issue at a random time in the future.

Here is what we cleanup between tests:
http://hg.mozilla.org/build/puppet/file/14a5a417b5ea/modules/clean/manifests/appstate.pp
(In reply to Joel Maher (:jmaher) from comment #11)
> Thanks for the reply Marco.
> 
> > @@ +193,5 @@
> > > +
> > > +    // On Mac build servers, we don't have enough privileges to write to /Applications,
> > > +    // so we install apps in a user-owned directory.
> > > +    if (MAC) {
> > > +      nativeApp._rootInstallDir = OS.Path.join(OS.Constants.Path.homeDir, "Applications");
> > 
> > do we ever clean this up?
> 
> No, should we? All the tests are setting this (because
> otherwise the test can't run on our build machines).
> 
> ^ I am just concerned that our machines are not cleaning up this directory
> between tests- we could have a file permissions or space issue at a random
> time in the future.
> 
> Here is what we cleanup between tests:
> http://hg.mozilla.org/build/puppet/file/14a5a417b5ea/modules/clean/manifests/
> appstate.pp

Ah, you meant the directory. We're cleaning it in the test (at the beginning of the test, if the test completes cleanly and if there is an exception): http://mxr.mozilla.org/mozilla-central/source/toolkit/webapps/tests/test_hosted.xul?rev=43fa416d3ec3#195
oh thanks!
Added comments, updated to latest trunk and landed:
https://hg.mozilla.org/integration/mozilla-inbound/rev/2f5925bdf249
https://hg.mozilla.org/mozilla-central/rev/2f5925bdf249
