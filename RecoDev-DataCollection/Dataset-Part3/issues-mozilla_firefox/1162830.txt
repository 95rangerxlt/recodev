Many unified autocomplete tests use check_autocomplete() to ensure that auto-complete returns the correct entries in various scenarios. However, it allows the "expected" matches to match in any order. A key part of unified autocomplete is that the first item is special and reflects a conscious decision on our part to prioritize certain actions over others.

Thus, it would be good for the future if check_autocomplete() verified what the *first* item is, so regressions in this special item can be checked for.

Many unified autocomplete tests use check_autocomplete() to ensure that auto-complete returns the correct entries in various scenarios. However, it allows the "expected" matches to match in any order. A key part of unified autocomplete is that the first item is special and reflects a conscious decision on our part to prioritize certain actions over others.

Thus, it would be good for the future if check_autocomplete() verified what the *first* item is, so regressions in this special item can be checked for.
Created attachment 8603132
Part 1 - add helpers for creating "match" objects.

This patch isn't strictly necessary, but IMO cleans up the tests a little and makes subsequent changes easier to read.

It adds 3 helpers, makeSearchMatch, makeSwitchMatch, and makeVisitMatch. The tests that check matches can be changed from using, eg:

> { uri: makeActionURI("searchengine", {engineName: "MozSearch", input: "foo", searchQuery: "foo"}), title: "MozSearch", style: [ "action", "searchengine" ] },

to:

> makeSearchMatch("foo"),
Created attachment 8603134
Part 2 - ensure the first match really is the first match

This is the patch that does what the bug describes. I've only split them to make them easier to review (and just in-case the "part 1" is rejected.

This changes check_autocomplete so that if "actions" are enabled, it ensures the first specified match is the first entry in the controller. All other items still match regardless of position.

There are only 2 tests that seem to have this wrong, which will be obvious from the patch.  It also re-highlights the apparently-strange outcome that an empty search is preferred over other actions.
Comment on attachment 8603132
Part 1 - add helpers for creating "match" objects.

Review of attachment 8603132:
-----------------------------------------------------------------

Nice!
Comment on attachment 8603134
Part 2 - ensure the first match really is the first match

Review of attachment 8603134:
-----------------------------------------------------------------

::: toolkit/components/places/tests/unifiedcomplete/head_autocomplete.js
@@ +98,5 @@
>  }
>  
> +// A helper for check_autocomplete to check a specific match against a
> +// controller index.
> +let _check_autocomplete_matches_index = function(match, index) {

oops :)
Comment on attachment 8603134
Part 2 - ensure the first match really is the first match

Review of attachment 8603134:
-----------------------------------------------------------------

Doing this makes sense to me, but I'm going to leave the review here for ::mak.
Comment on attachment 8603132
Part 1 - add helpers for creating "match" objects.

Review of attachment 8603132:
-----------------------------------------------------------------

::: toolkit/components/places/tests/unifiedcomplete/head_autocomplete.js
@@ +305,5 @@
> +// Creates a full "match" entry for a search result, suitable for passing as
> +// an entry to check_autocomplete.
> +function makeSearchMatch(input, extra = {}) {
> +  // Note the order of the items here is important or check_autocomplete will
> +  // not match them :(

which order of which items? here I only see objects with properties, for which I don't think order matters...
Maybe I'm misreading it, or it's in the wrong place, or I' forgot something about check_autocomplete

@@ +323,5 @@
> +// Creates a full "match" entry for a search result, suitable for passing as
> +// an entry to check_autocomplete.
> +function makeVisitMatch(input, url, extra = {}) {
> +  // Note the order of the items here is important or check_autocomplete will
> +  // not match them :(

ditto

@@ +337,5 @@
> +}
> +
> +// Creates a full "match" entry for a switchToTab result, suitable for passing as
> +// an entry to check_autocomplete.
> +function makeSwitchMatch(url, title = null) {

makeSwitchToTabMatch would be more understandable and it's not too long yet

I'd also prefer if the three methods would follow a common arguments pattern, so let's have an extra object here too, even if for now it only has one option
Comment on attachment 8603134
Part 2 - ensure the first match really is the first match

Review of attachment 8603134:
-----------------------------------------------------------------

::: toolkit/components/places/tests/unifiedcomplete/head_autocomplete.js
@@ +195,5 @@
> +      do_print("Checking rest of the matches");
> +    }
> +
> +    if (controller.matchCount > firstIndexToCheck) {
> +      for (let i = firstIndexToCheck; i < controller.matchCount; i++) {

looks like you might avoid having both an if and a for here, and just use the for condition to bail out.

@@ +204,5 @@
> +        for (j = firstIndexToCheck; j < matches.length; j++) {
> +          // Skip processed expected results
> +          if (matches[j] == undefined)
> +            continue;
> +          if (_check_autocomplete_matches_index(matches[j], i)) {

you already have value and comment, at that point here I'd build an object like
{ value, comment style } and pass it to a _check_autocomplete_matches helper, so it doesn't even need to get the controller again. The code should be even shorter that way.

::: toolkit/components/places/tests/unifiedcomplete/test_empty_search.js
@@ +86,5 @@
>    yield check_autocomplete({
>      search: "",
>      searchParam: "enable-actions",
>      matches: [
> +               makeSearchMatch(""), // apparently an empty search is preferred!?

I'd avoid the comment for now, we don't know what we want yet, as we discussed in the other bug this could also be fine, provided it works :)
Created attachment 8609973
0002-Bug-1162830-unified-auto-complete-tests-now-check-wh.patch

(In reply to Marco Bonardo [::mak] from comment #6)
> Comment on attachment 8603132
> Part 1 - add helpers for creating "match" objects.
> 
> Review of attachment 8603132:
> -----------------------------------------------------------------
> 
> ::: toolkit/components/places/tests/unifiedcomplete/head_autocomplete.js
> @@ +305,5 @@
> > +// Creates a full "match" entry for a search result, suitable for passing as
> > +// an entry to check_autocomplete.
> > +function makeSearchMatch(input, extra = {}) {
> > +  // Note the order of the items here is important or check_autocomplete will
> > +  // not match them :(
> 
> which order of which items? here I only see objects with properties, for
> which I don't think order matters...

It does, because JavaScript :)  Given JSON.stringify({foo: 1, bar: 1}) != JSON.stringify({bar: 1, foo: 1}) and given the existing makeActionURI implementation and how the result is checked, the order of the properties does indeed matter.

While I've changed the comment to (hopefully) make it clearer, this patch didn't introduce that behaviour - ie, change the order of the attributes in the existing code and you will see failures. Note also that I've no interest in fixing that.

All other comments addressed.
https://hg.mozilla.org/integration/fx-team/rev/e8c888dc33c1
https://hg.mozilla.org/mozilla-central/rev/e8c888dc33c1
