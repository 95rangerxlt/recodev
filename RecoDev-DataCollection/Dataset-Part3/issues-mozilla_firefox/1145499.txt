zackw reported this bug on GitHub: https://github.com/mozilla/shumway/issues/2124

The implementation of WeakList (in src/base/utilities.ts) attempts to use netscape.security.PrivilegeManager -- this was removed from the platform in Firefox 17: see https://developer.mozilla.org/en-US/Firefox/Releases/17/Site_compatibility#Security As such, all the code dependent on that test was probably dead when it was written.

The fallback (which is what gets used all the time) seems to be a regular old (non-weak) list, so not only is there a bunch of dead code that raises eyebrows when grepping, the class doesn't even fulfill its contract, unless that's what the manual reference counting crud is about.

(Sadly, it does not appear possible to implement WeakList on top of Harmony WeakMap, because there is no exposed way to iterate over surviving elements.)

zackw reported this bug on GitHub: https://github.com/mozilla/shumway/issues/2124

The implementation of WeakList (in src/base/utilities.ts) attempts to use netscape.security.PrivilegeManager -- this was removed from the platform in Firefox 17: see https://developer.mozilla.org/en-US/Firefox/Releases/17/Site_compatibility#Security As such, all the code dependent on that test was probably dead when it was written.

The fallback (which is what gets used all the time) seems to be a regular old (non-weak) list, so not only is there a bunch of dead code that raises eyebrows when grepping, the class doesn't even fulfill its contract, unless that's what the manual reference counting crud is about.

(Sadly, it does not appear possible to implement WeakList on top of Harmony WeakMap, because there is no exposed way to iterate over surviving elements.)
In an email, Till said he'd look at this next week.
> (Sadly, it does not appear possible to implement WeakList on top of Harmony WeakMap, because there
> is no exposed way to iterate over surviving elements.)

This is intentional:

http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps

"Since WeakMap does not introduce any new source of non-determinism into the language, it may be made generally accessible without weakening the confidentiality issues of our gc_semantics. The non-enumerability of our WeakMaps also enables aggressive collection to be safe without need for further specification."

https://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakmap-objects

"If this latency was observable to ECMAScript program, it would be a source of indeterminacy that could impact program execution. For that reason, an ECMAScript implementation must not provide any means to observe a key of a WeakMap that does not require the observer to present the observed key."
If we want to do this, we should just expose something along with the other chrome-privileged utility functions that we expose to shumway.
The usage pattern in Shumway seems to be "if any of these objects still exist then do something with them".  Manually reference-counting them, as the current fallback code does, seems ... not terrible for that scenario.  I'm not familiar enough with the code to think of something better.
(In reply to Bobby Holley (:bholley) from comment #3)
> If we want to do this, we should just expose something along with the other
> chrome-privileged utility functions that we expose to shumway.

We added getWeakMapKeys to the ShumwayCom object in the https://github.com/mozilla/shumway/pull/2130 PR. Closing as fixed
(In reply to Jesse Ruderman from comment #2)
> > (Sadly, it does not appear possible to implement WeakList on top of Harmony WeakMap, because there
> > is no exposed way to iterate over surviving elements.)
> 
> This is intentional:
> 
> http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps
> 
> "Since WeakMap does not introduce any new source of non-determinism into the
> language, it may be made generally accessible without weakening the
> confidentiality issues of our gc_semantics. The non-enumerability of our
> WeakMaps also enables aggressive collection to be safe without need for
> further specification."
> 
> https://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakmap-objects
> 
> "If this latency was observable to ECMAScript program, it would be a source
> of indeterminacy that could impact program execution. For that reason, an
> ECMAScript implementation must not provide any means to observe a key of a
> WeakMap that does not require the observer to present the observed key."

Note that ES will probably get weak references with post-mortem finalization, on top of which it's possible, if not optimally efficient, to implement iterable weak maps.

However, we need those sooner, and for more fundamental reasons than what they're currently used for in the DisplayList management: AS3 has a Dictionary class that, optionally, supports weak keys and is iterable. This is used by lots of content which would otherwise leak quite horribly, so implementing it is mandatory. It's not necessarily required for our initial release, though: ads run for a relatively short time and don't do the sorts of things that'd require collection of weakly held objects usually. There's still a risk of leaking (maybe tens of) MB of data, so we might end up fully implementing weakly keyed Dictionaries before 1.0 after all.

Note that Shumway will run in its own process, so this won't be usable to do timing attacks against other web content, just against other SWFs, as is possible in the Flash plugin, too.

(In reply to Zack Weinberg (:zwol) from comment #4)
> The usage pattern in Shumway seems to be "if any of these objects still
> exist then do something with them".  Manually reference-counting them, as
> the current fallback code does, seems ... not terrible for that scenario. 
> I'm not familiar enough with the code to think of something better.

The manual refcounting is extremely conservative and gives up as soon as a reference to a DisplayObject *might* have leaked to content. As soon as that happens, the weak list approach is the only thing saving us from freely leaking. The other option would be to do our own full GC implementation, which isn't just terrible but wholly infeasible.
