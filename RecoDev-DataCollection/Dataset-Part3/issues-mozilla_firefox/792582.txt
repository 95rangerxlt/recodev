http://mxr.mozilla.org/mozilla-central/source/browser/extensions/pdfjs/components/PdfStreamConverter.js#218

Creating a channel like this means that no information about the privacy status of the download is available. In the future, this will cause PDF downloads performed in private browsing mode to be leaked into the disk cache and download history. Instead of asyncFetch, which doesn't provide access to the underlying channel, newChannel should be used and some privacy status provided, probably via nsIChannel.SetPrivate based on the global window's privacy status (see PrivateBrowsingUtils.jsm).

http://mxr.mozilla.org/mozilla-central/source/browser/extensions/pdfjs/components/PdfStreamConverter.js#218

Creating a channel like this means that no information about the privacy status of the download is available. In the future, this will cause PDF downloads performed in private browsing mode to be leaked into the disk cache and download history. Instead of asyncFetch, which doesn't provide access to the underlying channel, newChannel should be used and some privacy status provided, probably via nsIChannel.SetPrivate based on the global window's privacy status (see PrivateBrowsingUtils.jsm).
Created attachment 668175
Explicitly set privacy status of channels created by pdf.js

I'll open a pull request for this as well.
Created attachment 668176
Add nsIPrivateBrowsingChannel support to nsBaseChannel.
Jason, it would be really really great if you could review this ASAP.  We're trying hard to make sure that all of the platform bits of bug 787743 are dealt with before the uplift.

Thanks!
Comment on attachment 668175
Explicitly set privacy status of channels created by pdf.js

Review of attachment 668175:
-----------------------------------------------------------------

Looks good. Submitted to upstream at https://github.com/mozilla/pdf.js/pull/2198

r+ with nits below fixed

::: browser/extensions/pdfjs/components/PdfStreamConverter.js
@@ +213,5 @@
>            Cc['@mozilla.org/uriloader/external-helper-app-service;1'].
>               getService(Ci.nsIExternalHelperAppService);
>      var frontWindow = Cc['@mozilla.org/embedcomp/window-watcher;1'].
>                           getService(Ci.nsIWindowWatcher).activeWindow;
> +    

delete spaces at end of the line

@@ +217,5 @@
> +    
> +    let docIsPrivate = false;
> +    try {
> +      docIsPrivate = this.domWindow
> +                             .QueryInterface(Ci.nsIInterfaceRequestor)

nit: align '.' with previous line one (same for next three lines)

@@ +243,5 @@
>        channel.setURI(originalUri);
>        channel.contentStream = aInputStream;
>        channel.QueryInterface(Ci.nsIChannel);
> +      if ('nsIPrivateBrowsingChannel' in Ci &&
> +        channel instanceof Ci.nsIPrivateBrowsingChannel) {

nit: indent by two spaces
remote:   https://hg.mozilla.org/integration/mozilla-inbound/rev/6852a7f64f8c
remote:   https://hg.mozilla.org/integration/mozilla-inbound/rev/51d572ef4e0e
https://hg.mozilla.org/mozilla-central/rev/6852a7f64f8c
https://hg.mozilla.org/mozilla-central/rev/51d572ef4e0e
