User-Agent:       Mozilla/5.0 (Windows; Windows NT 6.1; WOW64; rv:2.0b3pre) Gecko/20100724 Minefield/4.0b3pre
Build Identifier: Mozilla/5.0 (Windows; Windows NT 6.1; WOW64; rv:2.0b3pre) Gecko/20100724 Minefield/4.0b3pre

Since Firefox 3.0, non-Latin text in the URL is shown in Unicode (rather than HTML entities). This functionality seems to be broken in Firefox 4 nightly builds.
See this screenshot: http://upload.wikimedia.org/wikipedia/test/e/e0/Zwnj.png
The URL should appears as .../wiki/ویکی‌پدیا but it is shown as .../wiki/ویکی%E2%80%8Cپدیا 

Reproducible: Always

User-Agent:       Mozilla/5.0 (Windows; Windows NT 6.1; WOW64; rv:2.0b3pre) Gecko/20100724 Minefield/4.0b3pre
Build Identifier: Mozilla/5.0 (Windows; Windows NT 6.1; WOW64; rv:2.0b3pre) Gecko/20100724 Minefield/4.0b3pre

Since Firefox 3.0, non-Latin text in the URL is shown in Unicode (rather than HTML entities). This functionality seems to be broken in Firefox 4 nightly builds.
See this screenshot: http://upload.wikimedia.org/wikipedia/test/e/e0/Zwnj.png
The URL should appears as .../wiki/ویکی‌پدیا but it is shown as .../wiki/ویکی%E2%80%8Cپدیا 

Reproducible: Always
This isn't a text layout issue, is it?  Text layout is just rendering what it's told; the browser UI is replacing all invisible characters with %-escapes.  

Note that in a domain name, I believe we would definitely want to $-escape ZWNJ.  Not sure about other parts of the string....

Gavin, is there a better place for this than Firefox:General?

Nominating for blocking, since this can make some file paths very hard to read for users, which is an undesirable regression.
(In reply to comment #1)
> Gavin, is there a better place for this than Firefox:General?

I think Firefox::General is a fine place for it, but "Location Bar and Autocomplete" would work too.

The relevant code was added in bug 546013. See http://hg.mozilla.org/mozilla-central/annotate/0ed73d56efd5/browser/base/content/browser.js#l2325 . I'm not sure what the reasoning is behind that change exactly, to be honest. I was assuming we wanted to encode them because they potentially introduce spoofing risk, or because we weren't confident that they would render correctly (depending e.g. on fonts used). Perhaps the layout changes in that bug took care of the rendering issues, and the spoofing risks are non-existent?
I was concerned about a spoofing risk caused by invisible characters.
However, it may have been overkill because ZWNJ was invisible even before the patch and it cannot be used in a domain part.
http://tools.ietf.org/html/rfc3454#section-3.1
If it's all about spoofing, then only the domain name should be checked for invisible characters, not the whole URI.
The following characters should be safe because they will be removed by nameprep:
034F
180B-180D
200C-200D
FE00-FE0F
However, the following characters should be also safe by the same logic. Why they were banned in the first place?
00AD
200B
FEFF
2060
IDNA2008 (which is still not officialy finalised) permits ZWJ and ZWNJ in domain names, with restrictions on registration to prevent spoofing.

Leaving them unescaped in the path part should certainy be safe. In the domain part it will be OK on the assumption that we will only be whitelisting TLDs which have a registration policy that handles them safely.

As an extra precaution after we implement the IDNA2008 version of nameprep, we could add a condition to escape them in contexts where they are not permitted (so e.g. in a<ZWNJ>b.org the ZWNJ would be escaped but in ‫نامه<ZWNJ>‌ای‬.org where the ZWNJ makes the domain name display as نامه‌ای instead of نامهای we would leave it alone).
(In reply to comment #6)
> As an extra precaution after we implement the IDNA2008 version of nameprep, we
> could add a condition to escape them in contexts where they are not permitted
> (so e.g. in a<ZWNJ>b.org the ZWNJ would be escaped but in نامه<ZWNJ>‌ای.org
> where the ZWNJ makes the domain name display as نامه‌ای instead of نامهای we
> would leave it alone).
How to determine the combination is permitted or not? IIRC the Unicode standard itself doesn't define what combinations are valid.
See Appendix A.1. and Appendix A.2. in http://www.rfc-editor.org/authors/rfc5892.txt
Doesn't block, would like to see a fix that walked the line between safe and pretty.
Build Worked : 
Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.3a5pre) Gecko/20100428 Minefield/3.7a5pre

http://hg.mozilla.org/mozilla-central/rev/f37918b14601

Build Broken : 
Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.3a5pre) Gecko/20100429 Minefield/3.7a5pre

http://hg.mozilla.org/mozilla-central/rev/45a1894f2f9a

Pushlog : 
http://hg.mozilla.org/mozilla-central/pushloghtml?fromchange=f37918b14601
&tochange=45a1894f2f9a
Created attachment 465494
Remove ZWJ/ZWNJ from percent-encoded characters

This is safe at the moment. Also, the domain part will be handled in other places (nsIDNService and network.IDN.blacklist_chars) even when IDNA2008 is introduced. Percent-encoding is an escape for the path part.
http://hg.mozilla.org/mozilla-central/rev/24b491151c78

Target milestone is Firefox 4.0b5.
