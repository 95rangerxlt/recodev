Sometimes, I need to copy colors from the inspector, but I have to double click the value and copy the color, and sometimes, it scrolls all the way to the top, and I have to refind my way. So it'd be nice to have a context menu item when right clicking a color swatch/color value.

Sometimes, I need to copy colors from the inspector, but I have to double click the value and copy the color, and sometimes, it scrolls all the way to the top, and I have to refind my way. So it'd be nice to have a context menu item when right clicking a color swatch/color value.
This sounds a very good idea.

The menu item "copy color" should appear when right-clicking either a color swatch or a color expression in the rule-view or computed-view.

Additionally, this could work in the markup-view, when right-clicking a color in a 'style=...' attribute, but I would rather do this in a separate bug because right now, we're not parsing style attributes, so we have no clue what's inside.
Created attachment 8436466
inspector-copy-color.patch

Here's a patch implementing the 'Copy color' context menu option.

It works by wrapping colors in a span with a 'data-color' attribute containing the color to copy. This required refactoring  of OutputParser, mainly node creation was moved out of _appendNode to a new method called _createNode that's just old _appendNode but it returns the new node instead of adding it to the node list.

When user opens the context menu it checks if the click target has a parent with 'data-color' attribute and shows 'Copy color' item if one is found. That means the color can be copied if user clicks on the swatch, the color value or the space between those two. The check is done in a method called _isColorPopup which is mostly duplicated (1 line difference) in both computed-view.js and rule-view.js. I didn't find a viable place for the method to go that is shared between the views, suggestions are welcome.

The attached test case mainly focuses on testing that _isColorPopup is working correctly. For both computed and rule views it iterates trough all nodes and tests that _isColorPopup can handles them correctly. It also tests that the color can be  successfully copied to clipboard from both views. Both views are tested in the same file due to the fact that the tests for both views would have been almost identical.

Due to the wrapping of color values in an extra span a few changes were required to older OutputParser tests.
Comment on attachment 8436466
inspector-copy-color.patch

Review of attachment 8436466:
-----------------------------------------------------------------

Thanks for working on this bug!
The patch looks really good. Definitely F+ on that.

I realized there's one missing feature though: changing the color using the color picker doesn't update the data-color attribute, so copying the color stores the wrong color in the clipboard. If the color is changed by using the text field, it works though (this happens only in the rule-view obviously, as the computed-view is read-only).
I believe the way to fix this is by adding something to the SwatchColorPickerTooltip class in Tooltip.js.
This class is responsible for linking a color-swatch element (as generated by the output-parser) to a colorpicker tooltip. So it is responsible for using the color chosen in the picker and applying it to the swatch element. So it would be the right place to also make it update the data-color attribute.
See '_selectColor'. In this method, you could do something like:
this.activeSwatch.parentNode.dataset.color = color;

I've made a few comments in the code below, but I have to say the code looks good!
(comments made in computed-view.js also apply to rule-view.js).
There are a few minor formatting comments that I made just to make sure the code fits in well with the rest of the devtools code.

::: browser/devtools/styleinspector/computed-view.js
@@ +637,5 @@
> +   *
> +   * @return {Boolean}
> +   *         true if click on color opened the popup, false otherwise.
> +   */
> +  _isColorPopup: function () {

Don't worry about this method being duplicated in the rule and computed views. We need to work on sharing more code for other reasons than just the ctx menu, so we'll work on this in a separate bug.

@@ +641,5 @@
> +  _isColorPopup: function () {
> +    this._colorToCopy = "";
> +
> +    let trigger = this.popupNode;
> +    if (!trigger)

nit: {} around the body block of this if

@@ +647,5 @@
> +
> +    let container = (trigger.nodeType == trigger.TEXT_NODE) ?
> +                     trigger.parentElement : trigger;
> +
> +    let isColorNode = (el) => el.dataset && "color" in el.dataset;

nit: no need for parens around single param fat arrow

@@ +651,5 @@
> +    let isColorNode = (el) => el.dataset && "color" in el.dataset;
> +
> +    while (!isColorNode(container)) {
> +      container = container.parentNode;
> +      if (!container)

nit: same for this if

@@ +664,5 @@
>     * Context menu handler.
>     */
>    _onContextMenu: function(event) {
>      try {
> +      this.popupNode = event.explicitOriginalTarget;

Why did you use explicitOriginalTarget in this case?

::: browser/devtools/styleinspector/test/browser_styleinspector_context-menu-copy-color.js
@@ +31,5 @@
> +  ];
> +
> +  yield addTab("data:text/html;charset=utf8," + encodeURIComponent(TEST_DOC));
> +
> +  for (let test of TEST_CASES)

Please use {} around the block of the for statement

@@ +43,5 @@
> +  yield selectNode("div", inspector);
> +
> +  testIsColorValueNode(view);
> +  testIsColorPopupOnAllNodes(view);
> +  yield testCopyColor(view);

On top of these test cases, can you also add another one that tests the copied value after a modification was done?
I would suggest keeping this test file as is, and creating a second one:
- browser_styleinspector_context-menu-copy-color_01.js
- browser_styleinspector_context-menu-copy-color_02.js
to keep test size manageable.
This second test case should test the validity of the color value in the clipboard in a variety of cases:
- before any modification was done
- after the color was updated by using the field
- after the color was updated by using the color-picker

@@ +81,5 @@
> + *             A node to check.
> + */
> +function testIsColorPopupOnNode(view, node) {
> +  info("Testing node " + node);
> +  if (view.doc)

Please use {} around the if and else blocks

@@ +110,5 @@
> +  yield popup;
> +
> +  ok(!view.menuitemCopyColor.hidden, "Copy color is visible");
> +
> +  yield waitForClipboard(() => view.menuitemCopyColor.click(), TEST_COLOR);

I personally never really liked this 'waitForClipboard' test function, it slows the test down and make it rely on something that is already tested elsewhere.
I wonder if we could, for our devtools tests, completely mock the clipboard.
One way would be to modify rule-view.js and computed-view.js in a simple way:

XPCOMUtils.defineLazyGetter(CssRuleView, "clipboardHelper", function() { // note that I replace 'this' by 'CssRuleView'
  return Cc["@mozilla.org/widget/clipboardhelper;1"].
    getService(Ci.nsIClipboardHelper);
});

So, instead of storing the helper on the module instance, store it on the view instance. And everywhere it's used:

CssRuleView.clipboardHelper.copyString(this._colorToCopy, this.styleDocument);
instead of
clipboardHelper.copyString(this._colorToCopy, this.styleDocument);

This would allow tests to do something like:

CssRuleView.clipboardHelper = {
  copyString: (value, doc) => {
    // do something with value, like is(value, expectedvalue) ...
  }
};

Having said this, I'm fine with not doing this in this bug if you don't want to. This really is outside of the scope of your bug.

@@ +121,5 @@
> +function isColorValueNode(node) {
> +  let container = (node.nodeType == node.TEXT_NODE) ?
> +                   node.parentElement : node;
> +
> +  let isColorNode = (el) => el.dataset && "color" in el.dataset;

nit: in the devtools code, we tend to loose the parens around single parameters in fat-arrow functions

@@ +149,5 @@
> +
> +/**
> + * Returns the root element for the given view, rule or computed.
> + */
> +let rootElement = (view) => (view.element) ? view.element : view.styleDocument;

nit: in the devtools code, we tend to loose the parens around single parameters in fat-arrow functions

::: toolkit/locales/en-US/chrome/global/devtools/styleinspector.properties
@@ +80,5 @@
>  # the rule view context menu "Select all" entry.
>  ruleView.contextmenu.copy.accessKey=C
>  
> +# LOCALIZATION NOTE (ruleView.contextmenu.copyColor): Text displayed in the
> +# rule and computed view context menu.

Can you expand a little bit more to something like:
"Text displayed in the rule and computer view context menu when a color value was clicked"
Created attachment 8438451
inspector-copy-color-v2.patch

Here's a patch that should address your suggestions.

> On top of these test cases, can you also add another one that tests the
> copied value after a modification was done?
I added a second test case testing once that the correct color (_colorToCopy) is copied to clipboard. It also contains tests for cases when a color value is edited manually and with th ecolor picker. However these tests only check that _colorToCopy is correct, which should be enough to verify the functionality.

> I personally never really liked this 'waitForClipboard' test function, it
> slows the test down and make it rely on something that is already tested
> elsewhere. ...

I'd rather not mix that issue with this bug. I might investigate it and send a follow-up patch replacing waitForClipboard if I have time to do so.
Created attachment 8438456
inspector-copy-color-v2.patch

Here's a revised version of the second version of the patch. The previous missed a few style fixes. Sorry for the noise.

> Why did you use explicitOriginalTarget in this case?
I thought about using originalTarget but as explicitOriginalTarget is used in RuleView I decided to take the same approach in computed view too.
Comment on attachment 8438456
inspector-copy-color-v2.patch

Review of attachment 8438456:
-----------------------------------------------------------------

This looks solid. Thanks for implementing my suggestions.
I think this is worth R+.
So next step is to run this on try: https://tbpl.mozilla.org/?tree=Try&rev=6430aa14812f
And if things are ok, land it.

Can you change the patch header to: "Bug 1017515 - Add copy color item to context menu of CSS rule and computed views; r=pbrosset"?

::: browser/devtools/styleinspector/test/browser_styleinspector_context-menu-copy-color_01.js
@@ +2,5 @@
> +/* Any copyright is dedicated to the Public Domain.
> + http://creativecommons.org/publicdomain/zero/1.0/ */
> +"use strict";
> +
> +// Test "Copy color" item of the context menu 1/2: Test _isColorPopup.

nit: we don't know yet if there's going to be only 2 tests in the future. Just enter a comment of what the test does without worrying about the other tests.

::: browser/devtools/styleinspector/test/browser_styleinspector_context-menu-copy-color_02.js
@@ +3,5 @@
> + http://creativecommons.org/publicdomain/zero/1.0/ */
> +"use strict";
> +
> +// Test "Copy color" item of the context menu 2/2: Test that correct color is
> +// copied if the color changes.

nit: we don't know yet if there's going to be only 2 tests in the future. Just enter a comment of what the test does without worrying about the other tests.

@@ +16,5 @@
> +    '  }',
> +    '</style>',
> +    '<div>Testing the color picker tooltip!</div>'
> +  ].join("\n");
> +

nit: extra empty line
Comment on attachment 8438456
inspector-copy-color-v2.patch

Review of attachment 8438456:
-----------------------------------------------------------------

This looks solid. Thanks for implementing my suggestions.
I think this is worth R+.
So next step is to run this on try: https://tbpl.mozilla.org/?tree=Try&rev=6430aa14812f
And if things are ok, land it.

Can you change the patch header to: "Bug 1017515 - Add copy color item to context menu of CSS rule and computed views; r=pbrosset"?

::: browser/devtools/styleinspector/test/browser_styleinspector_context-menu-copy-color_01.js
@@ +2,5 @@
> +/* Any copyright is dedicated to the Public Domain.
> + http://creativecommons.org/publicdomain/zero/1.0/ */
> +"use strict";
> +
> +// Test "Copy color" item of the context menu 1/2: Test _isColorPopup.

nit: we don't know yet if there's going to be only 2 tests in the future. Just enter a comment of what the test does without worrying about the other tests.

@@ +40,5 @@
> +function* testView({viewName, initializer}) {
> +  info("Testing " + viewName);
> +
> +  let {inspector, view} = yield initializer();
> +  yield selectNode("div", inspector);

I just realized one thing though, I don't see how this can work, this helper function listens to the "inpsector-updated" event to resolve the returned promise, but this event is only sent when a new node gets selected. Selecting the same node over and over again in the inspector doesn't do anything at all.
So I'm wondering how this can work. Just looking at this code (without actually running it) makes me think the test will timeout.
I might be missing something.

::: browser/devtools/styleinspector/test/browser_styleinspector_context-menu-copy-color_02.js
@@ +3,5 @@
> + http://creativecommons.org/publicdomain/zero/1.0/ */
> +"use strict";
> +
> +// Test "Copy color" item of the context menu 2/2: Test that correct color is
> +// copied if the color changes.

nit: we don't know yet if there's going to be only 2 tests in the future. Just enter a comment of what the test does without worrying about the other tests.

@@ +16,5 @@
> +    '  }',
> +    '</style>',
> +    '<div>Testing the color picker tooltip!</div>'
> +  ].join("\n");
> +

nit: extra empty line
Created attachment 8439182
inspector-copy-color-v3.patch

Here's a patch that addresses your comments.

> I just realized one thing though, I don't see how this can work, this helper
> function listens to the "inpsector-updated" event to resolve the returned
> promise, but this event is only sent when a new node gets selected.
> Selecting the same node over and over again in the inspector doesn't do
> anything at all.

Apparently inspector doesn't pay attention to the selected node and performs the full selection procedure even if it is selecting the already selected node. I added a call to clearCurrentNodeSelection to make sure this doesn't become an issue if the behavior is changed in the future.
R+ and green try build: https://tbpl.mozilla.org/?tree=Try&rev=6430aa14812f
https://hg.mozilla.org/integration/fx-team/rev/3dfd98f3afc1
https://hg.mozilla.org/mozilla-central/rev/3dfd98f3afc1
