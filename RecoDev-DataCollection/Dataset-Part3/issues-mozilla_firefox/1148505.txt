STR:

0) Open the Browser Console
1) Get some session history by browsing to a few pages
2) Click and hold the back button to open up the session history popup

ER:

No unsafe CPOW usage warnings in the Browser Console

AR:

Several unsafe CPOW usage warnings in the Browser Console


The warnings are for these lines of code:

http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/browser/base/content/browser.js#l3673
http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/browser/base/content/browser.js#l3678
http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/browser/base/content/browser.js#l3691
http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/browser/base/content/browser.js#l3692
http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/browser/base/content/browser.js#l3693
http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/browser/base/content/browser.js#l3696

function FillHistoryMenu(aParent) {
  // Lazily add the hover listeners on first showing and never remove them
  if (!aParent.hasStatusListener) {
    // Show history item's uri in the status bar when hovering, and clear on exit
    aParent.addEventListener("DOMMenuItemActive", function(aEvent) {
      // Only the current page should have the checked attribute, so skip it
      if (!aEvent.target.hasAttribute("checked"))
        XULBrowserWindow.setOverLink(aEvent.target.getAttribute("uri"));
    }, false);
    aParent.addEventListener("DOMMenuItemInactive", function() {
      XULBrowserWindow.setOverLink("");
    }, false);

    aParent.hasStatusListener = true;
  }

  // Remove old entries if any
  var children = aParent.childNodes;
  for (var i = children.length - 1; i >= 0; --i) {
    if (children[i].hasAttribute("index"))
      aParent.removeChild(children[i]);
  }

  var webNav = gBrowser.webNavigation;
  var sessionHistory = webNav.sessionHistory;

  var count = sessionHistory.count; <-- causes unsafe CPOW usage warning
  if (count <= 1) // don't display the popup for a single item
    return false;

  const MAX_HISTORY_MENU_ITEMS = 15;
  var index = sessionHistory.index; <-- causes unsafe CPOW usage warning
  var half_length = Math.floor(MAX_HISTORY_MENU_ITEMS / 2);
  var start = Math.max(index - half_length, 0);
  var end = Math.min(start == 0 ? MAX_HISTORY_MENU_ITEMS : index + half_length + 1, count);
  if (end == count)
    start = Math.max(count - MAX_HISTORY_MENU_ITEMS, 0);

  var tooltipBack = gNavigatorBundle.getString("tabHistory.goBack");
  var tooltipCurrent = gNavigatorBundle.getString("tabHistory.current");
  var tooltipForward = gNavigatorBundle.getString("tabHistory.goForward");

  for (var j = end - 1; j >= start; j--) {
    let item = document.createElement("menuitem");
    let entry = sessionHistory.getEntryAtIndex(j, false); <-- causes unsafe CPOW usage warning
    let uri = entry.URI.spec; <-- causes unsafe CPOW usage warning
    let entryURI = BrowserUtils.makeURIFromCPOW(entry.URI); <-- causes unsafe CPOW usage warning

    item.setAttribute("uri", uri);
    item.setAttribute("label", entry.title || uri); <-- causes unsafe CPOW usage warning
    item.setAttribute("index", j);

    if (j != index) {
      PlacesUtils.favicons.getFaviconURLForPage(entryURI, function (aURI) {
        if (aURI) {
          let iconURL = PlacesUtils.favicons.getFaviconLinkForIcon(aURI).spec;
          iconURL = PlacesUtils.getImageURLForResolution(window, iconURL);
          item.style.listStyleImage = "url(" + iconURL + ")";
        }
      });
    }

    if (j < index) {
      item.className = "unified-nav-back menuitem-iconic menuitem-with-favicon";
      item.setAttribute("tooltiptext", tooltipBack);
    } else if (j == index) {
      item.setAttribute("type", "radio");
      item.setAttribute("checked", "true");
      item.className = "unified-nav-current";
      item.setAttribute("tooltiptext", tooltipCurrent);
    } else {
      item.className = "unified-nav-forward menuitem-iconic menuitem-with-favicon";
      item.setAttribute("tooltiptext", tooltipForward);
    }

    aParent.appendChild(item);
  }
  return true;
}

...

http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/toolkit/modules/BrowserUtils.jsm#l78

  makeURIFromCPOW: function(aCPOWURI) {
    return Services.io.newURI(aCPOWURI.spec, aCPOWURI.originCharset, null); <-- causes unsafe CPOW usage warning
  },

STR:

0) Open the Browser Console
1) Get some session history by browsing to a few pages
2) Click and hold the back button to open up the session history popup

ER:

No unsafe CPOW usage warnings in the Browser Console

AR:

Several unsafe CPOW usage warnings in the Browser Console


The warnings are for these lines of code:

http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/browser/base/content/browser.js#l3673
http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/browser/base/content/browser.js#l3678
http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/browser/base/content/browser.js#l3691
http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/browser/base/content/browser.js#l3692
http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/browser/base/content/browser.js#l3693
http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/browser/base/content/browser.js#l3696

function FillHistoryMenu(aParent) {
  // Lazily add the hover listeners on first showing and never remove them
  if (!aParent.hasStatusListener) {
    // Show history item's uri in the status bar when hovering, and clear on exit
    aParent.addEventListener("DOMMenuItemActive", function(aEvent) {
      // Only the current page should have the checked attribute, so skip it
      if (!aEvent.target.hasAttribute("checked"))
        XULBrowserWindow.setOverLink(aEvent.target.getAttribute("uri"));
    }, false);
    aParent.addEventListener("DOMMenuItemInactive", function() {
      XULBrowserWindow.setOverLink("");
    }, false);

    aParent.hasStatusListener = true;
  }

  // Remove old entries if any
  var children = aParent.childNodes;
  for (var i = children.length - 1; i >= 0; --i) {
    if (children[i].hasAttribute("index"))
      aParent.removeChild(children[i]);
  }

  var webNav = gBrowser.webNavigation;
  var sessionHistory = webNav.sessionHistory;

  var count = sessionHistory.count; <-- causes unsafe CPOW usage warning
  if (count <= 1) // don't display the popup for a single item
    return false;

  const MAX_HISTORY_MENU_ITEMS = 15;
  var index = sessionHistory.index; <-- causes unsafe CPOW usage warning
  var half_length = Math.floor(MAX_HISTORY_MENU_ITEMS / 2);
  var start = Math.max(index - half_length, 0);
  var end = Math.min(start == 0 ? MAX_HISTORY_MENU_ITEMS : index + half_length + 1, count);
  if (end == count)
    start = Math.max(count - MAX_HISTORY_MENU_ITEMS, 0);

  var tooltipBack = gNavigatorBundle.getString("tabHistory.goBack");
  var tooltipCurrent = gNavigatorBundle.getString("tabHistory.current");
  var tooltipForward = gNavigatorBundle.getString("tabHistory.goForward");

  for (var j = end - 1; j >= start; j--) {
    let item = document.createElement("menuitem");
    let entry = sessionHistory.getEntryAtIndex(j, false); <-- causes unsafe CPOW usage warning
    let uri = entry.URI.spec; <-- causes unsafe CPOW usage warning
    let entryURI = BrowserUtils.makeURIFromCPOW(entry.URI); <-- causes unsafe CPOW usage warning

    item.setAttribute("uri", uri);
    item.setAttribute("label", entry.title || uri); <-- causes unsafe CPOW usage warning
    item.setAttribute("index", j);

    if (j != index) {
      PlacesUtils.favicons.getFaviconURLForPage(entryURI, function (aURI) {
        if (aURI) {
          let iconURL = PlacesUtils.favicons.getFaviconLinkForIcon(aURI).spec;
          iconURL = PlacesUtils.getImageURLForResolution(window, iconURL);
          item.style.listStyleImage = "url(" + iconURL + ")";
        }
      });
    }

    if (j < index) {
      item.className = "unified-nav-back menuitem-iconic menuitem-with-favicon";
      item.setAttribute("tooltiptext", tooltipBack);
    } else if (j == index) {
      item.setAttribute("type", "radio");
      item.setAttribute("checked", "true");
      item.className = "unified-nav-current";
      item.setAttribute("tooltiptext", tooltipCurrent);
    } else {
      item.className = "unified-nav-forward menuitem-iconic menuitem-with-favicon";
      item.setAttribute("tooltiptext", tooltipForward);
    }

    aParent.appendChild(item);
  }
  return true;
}

...

http://hg.mozilla.org/mozilla-central/file/44e454b5e93b/toolkit/modules/BrowserUtils.jsm#l78

  makeURIFromCPOW: function(aCPOWURI) {
    return Services.io.newURI(aCPOWURI.spec, aCPOWURI.originCharset, null); <-- causes unsafe CPOW usage warning
  },
This is still around.
Created attachment 8647654
This patch uses sessionstore data for the menu
Comment on attachment 8647654
This patch uses sessionstore data for the menu

Review of attachment 8647654:
-----------------------------------------------------------------

Thanks for taking this. I think we should do it differently, though. The data received from TabState.collect may be out of date. We batch up session changes in the content script and then send them up every second or so. At the least, I expect this will break tests.

You should be able to use TabStateFlusher.flush(browser) to get a promise that will be resolved when we have the most recent data at the time the button was hit. Can we just avoid showing the menu until then? Alternatively, maybe we could show the data we have and then update the menu later. Although the latter will require test changes (and the former might as well).
Created attachment 8649938
This version uses flush

This version displays the cached data, then updates it with the new data when it is available.
Comment on attachment 8649938
This version uses flush

Review of attachment 8649938:
-----------------------------------------------------------------

Thanks, this looks great. Have you tried running tests?

::: browser/base/content/browser.js
@@ +3827,5 @@
> +        item.className = "unified-nav-forward menuitem-iconic menuitem-with-favicon";
> +        item.setAttribute("tooltiptext", tooltipForward);
> +      }
> +
> +      if (initial) {

This doesn't seem right. I think you want to append if item was created fresh, which could happen the second time if there are more items I think.

@@ +3844,5 @@
> +    }
> +  }
> +
> +  let sessionHistory = SessionStore.getSessionHistory(gBrowser.selectedTab, arg => {
> +    arg.entries.splice(1, 10);

?

@@ +3845,5 @@
> +  }
> +
> +  let sessionHistory = SessionStore.getSessionHistory(gBrowser.selectedTab, arg => {
> +    arg.entries.splice(1, 10);
> +    setTimeout(updateSessionHistory, 2000, arg);

Why the setTimeout? Is that for debugging?

::: browser/components/sessionstore/SessionHistory.jsm
@@ +122,5 @@
>      if (shEntry.isSubFrame) {
>        entry.subframe = true;
>      }
>  
> +    entry.charset = shEntry.URI.originCharset;

If we save the URI, we should use it in deserializeEntry too I think. To be honest I never understood the purpose of the URL charset. I'm also afraid it will bloat the session store file.
Created attachment 8651143
Address comments and tests

Tests are ok: https://treeherder.mozilla.org/#/jobs?repo=try&revision=492414934b4c
Comment on attachment 8651143
Address comments and tests

browser.js back/forward menu changes.
Comment on attachment 8651143
Address comments and tests

>+      if (count <= 1) {
>+        // if there is only one entry now, close the popup.
>+        aParent.hidePopup();
>+        return;
>+      }
>+      else if (!aParent.parentNode.open) {

nit: no else after return
Comment on attachment 8651143
Address comments and tests

Review of attachment 8651143:
-----------------------------------------------------------------

::: browser/components/sessionstore/SessionHistory.jsm
@@ +313,5 @@
>        cacheKey.data = entry.cacheKey;
>        shEntry.cacheKey = cacheKey;
>      }
> +    if (entry.charset) {
> +      shEntry.charset = entry.charset) {

Not sure what you meant to do here. shEntry doesn't have a charset property. It seems like we want to use the charset here:
http://mxr.mozilla.org/mozilla-central/source/browser/components/sessionstore/SessionHistory.jsm#292
url:        https://hg.mozilla.org/integration/mozilla-inbound/rev/ca984908f2e52607a98d864dc9c1f8219f34d1b9
changeset:  ca984908f2e52607a98d864dc9c1f8219f34d1b9
user:       Neil Deakin <neil@mozilla.com>
date:       Fri Aug 28 03:13:03 2015 -0400
description:
Bug 1148505, remove cpow usage from back-forward menu by using sessionstore data, r=dao,billm
https://hg.mozilla.org/mozilla-central/rev/ca984908f2e5
