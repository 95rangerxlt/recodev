use the python script in Bug 312093 (https://bugzilla.mozilla.org/attachment.cgi?id=219144) 
open the test case in this bug.
turn on caret browsing

1) caret at the end of a link frame
Press "tab" to focus the link, it reports text-caret-moved 24 (correct). 
Press right arrow, it reports text-caret-moved 25 (correct)
Press ctrl+right arrow, it reports text-caret-moved 24(wrong)
Press left arrow, it reports text-caret-moved 27 (correct)
Press right arrow, it reports text-caret-moved 28 (correct)

2) caret in <br>
Put caret in the first line, press "end", it reports text-caret-moved 92 (wrong)
Press left arrow, it reports text-caret-moved 75 (correct)
Press right arrow, it reports text-caret-moved 76 (correct)

use the python script in Bug 312093 (https://bugzilla.mozilla.org/attachment.cgi?id=219144) 
open the test case in this bug.
turn on caret browsing

1) caret at the end of a link frame
Press "tab" to focus the link, it reports text-caret-moved 24 (correct). 
Press right arrow, it reports text-caret-moved 25 (correct)
Press ctrl+right arrow, it reports text-caret-moved 24(wrong)
Press left arrow, it reports text-caret-moved 27 (correct)
Press right arrow, it reports text-caret-moved 28 (correct)

2) caret in <br>
Put caret in the first line, press "end", it reports text-caret-moved 92 (wrong)
Press left arrow, it reports text-caret-moved 75 (correct)
Press right arrow, it reports text-caret-moved 76 (correct)
Created attachment 221562
test case
The cause of case 1) is in atk/nsAccessibleHyperText.cpp
We used these lines to fix Bug 320395, but we didn't test whether the caret is at the beginning of a link (the link will be focused) or at the end of a link.

191     } else if (GetLinkNode(domNode) == nsAccessNode::gLastFocusedNode) {
192       //Focus is here
193       return NS_OK;

The cause of case 2) is <br /> is not in mTextChildren of nsAccessibleHyperText.
So GetCaretOffset will fail and return the maximum offset.

A possible solution is get CaretRect and UnionRect of child nodes, then check CaretRect is getting inside since which child node.
I think it's a far approach, maybe time consuming.
