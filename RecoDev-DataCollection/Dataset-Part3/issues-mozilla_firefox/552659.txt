i was looking at microsummaries service in bug 552444 and noticed this function copied from nsSearchService.js.

i was looking at microsummaries service in bug 552444 and noticed this function copied from nsSearchService.js.
Created attachment 432808
patch v1.0
I think minLength should probably be 1... otherwise I think this looks fine (and much better!).
i guess that with a minLength of 1 there is more collision risk. maybe 4? i don't like the idea of names like "a", or "5"
hm, there is similar code in nsExtensionManager.js::getRandomFileName... sigh, why do we love these alphabetic-strings? :) (will file a bug)
There's no collision risk, because these filenames are passed to createUnique.
Created attachment 434361
patch v1.1

based on gavin's feedback.
Comment on attachment 434361
patch v1.1

>diff --git a/toolkit/components/search/nsSearchService.js b/toolkit/components/search/nsSearchService.js

> function sanitizeName(aName) {

>+  if (name.length < minLength)
>+    name = Math.random().toString(36).substr(2);
>+
>+  // Force max length.
>+  return name.substring(0, maxLength);

Actually, won't this fail if Math.random() returns 0?
Not really ideal for e.g. 0.5 or 0.25, either.
well, probability to get 0 is far less than we hit a crash before we can get 0. 0.5 or 0.25 is valid, it will just return a shorter string (1 chars in the worst case).
if you're really worried about that we can do
Math.max(1e-10, Math.random() - 1e-10).toString(36).substr(2);
or even larger interval with 1e-16
or simpler, since the issue here is the substr(2) failing on int numbers: Math.random().toString(36).replace(/.*\./, '');
will return 0 for 0 and 1 for 1 (that is excluded but has 1/2^62 possibilities to happen due to rounding)
Created attachment 434672
patch v1.2

with the last suggested regex, returns a usable value from 0 to 1 included.

Probably it's possible to do something like iterating till you get a minimum length with js1.8 inline generators, but it's probably not worth it.
Comment on attachment 434672
patch v1.2

>+  // If our input had not enough valid characters, use a random name.

nit: Use a random name if our input had no valid characters.

>+  if (name.length < minLength)
>+    Math.random().toString(36).replace(/^.*\./, '');

Need an assignment here! :)
(In reply to comment #13)
> >+  if (name.length < minLength)
> >+    Math.random().toString(36).replace(/^.*\./, '');
> 
> Need an assignment here! :)

uops, those last minute changes!
Created attachment 435285
patch v1.3

addressed comments and pushed
http://hg.mozilla.org/mozilla-central/rev/b69288fdd2f4
