I was looking over the code in restoreTabs and I noticed something that seems worrisome:

http://mxr.mozilla.org/mozilla-central/source/browser/components/sessionstore/SessionStore.jsm#2434

This code seems to assume that aTabData is for all the tabs in the window. However, we frequently call restoreTabs for only one tab. undoTabClose does this for example.

I couldn't actually make this lose session data, but maybe I just didn't try hard enough. Either way the code seems wrong. Tim, do you know what's going on here?

I was looking over the code in restoreTabs and I noticed something that seems worrisome:

http://mxr.mozilla.org/mozilla-central/source/browser/components/sessionstore/SessionStore.jsm#2434

This code seems to assume that aTabData is for all the tabs in the window. However, we frequently call restoreTabs for only one tab. undoTabClose does this for example.

I couldn't actually make this lose session data, but maybe I just didn't try hard enough. Either way the code seems wrong. Tim, do you know what's going on here?
I added that in bug 919532, and yeah that doesn't look right - good catch! This will probably make us lose data if we undo-close a tab and then quickly shut down without notifying before shutting down. We hopefully don't have any code that does that though.
Created attachment 8489914
0001-Bug-1067648-Introduce-restoreTab-and-use-it-from-res.patch

I created another method restoreTab() that properly handles single tabs and is called by restoreTabs(). That at the same time is the method that duplicateTab(), setTabState(), and undoCloseTab() call now.

As the window's busy state was handled by restoreTabs() before we now need something that can handle single restoreTab() calls and restoreTab() being called in a loop - so I added a busy state counter.
Comment on attachment 8489914
0001-Bug-1067648-Introduce-restoreTab-and-use-it-from-res.patch

Review of attachment 8489914:
-----------------------------------------------------------------

I'm afraid I no longer remember what the busy state is for. But why do you need to add a counter for it? It seems like it will never go higher than 1 since it's increased at the top of restoreTab and decreased at the bottom. And, as far as I can tell, restoreTab can't recurse into itself.

::: browser/components/sessionstore/SessionStore.jsm
@@ +2395,5 @@
>      tabstrip.smoothScroll = smoothScroll;
>  
>      TelemetryStopwatch.finish("FX_SESSION_RESTORE_RESTORE_WINDOW_MS");
>  
> +    this._setWindowStateReady(aWindow);

What's this for?

@@ +2415,2 @@
>     */
> +  restoreTabs: function (aWindow, aTabs, aTabData, aSelectTab) {

Do we need to pass in aTabs anymore? For this function to work, we need aTabs to be all the tabs in aWindow, so maybe we should just do that.
Created attachment 8491490
0001-Bug-1067648-Introduce-restoreTab-and-use-it-from-res.patch, v2

(In reply to Bill McCloskey (:billm) from comment #3)
> I'm afraid I no longer remember what the busy state is for. But why do you
> need to add a counter for it? It seems like it will never go higher than 1
> since it's increased at the top of restoreTab and decreased at the bottom.
> And, as far as I can tell, restoreTab can't recurse into itself.

The busy state tells add-ons when they should ignore certain basic operations like opening and closing tabs because sessionstore is restoring a whole window and they should rather wait until that's done.

I added the counter because otherwise we would be sending busy/ready events after each call to restoreTab() instead of only once per window. To actually make that work we still have the busy/ready state changes at the beginning and end of restoreTabs() that wrap all of the restoreTab() calls.

restoreTab() contains busy/ready state changes itself because they're needed for undoCloseTab(), setTabState(), and duplicateTab(). They call restoreTab() now instead of restoreTabs().

> > +  restoreTabs: function (aWindow, aTabs, aTabData, aSelectTab) {
> 
> Do we need to pass in aTabs anymore? For this function to work, we need
> aTabs to be all the tabs in aWindow, so maybe we should just do that.

We actually still need to pass the tabs itself because that might be a subset of a window's tabs when we don't override an existing state but "append". Fixed the method to not throw away state for tabs that aren't overriden.
Comment on attachment 8491490
0001-Bug-1067648-Introduce-restoreTab-and-use-it-from-res.patch, v2

Review of attachment 8491490:
-----------------------------------------------------------------

Ah, okay. I think the crucial thing I missed is that we call setWindowStateBusy at the top of restoreWindow. Would it be possible to move that call (and the corresponding setWindowStateReady call) into restoreTabs?
(In reply to Bill McCloskey (:billm) from comment #5)
> Ah, okay. I think the crucial thing I missed is that we call
> setWindowStateBusy at the top of restoreWindow. Would it be possible to move
> that call (and the corresponding setWindowStateReady call) into restoreTabs?

We actually need to keep those in restoreWindow() as that opens new windows, unpins tabs, and moves tabs around.
https://hg.mozilla.org/integration/fx-team/rev/8b9340f3a185
https://hg.mozilla.org/mozilla-central/rev/8b9340f3a185
