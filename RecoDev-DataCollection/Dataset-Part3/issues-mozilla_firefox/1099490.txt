I'm not sure how serious this is, but I was surprised by it. Just loading nytimes.com sends about 1000 onStateChange messages to the parent process. That seems pretty excessive. I remember we have an object that filters these messages so there aren't so many of them. I think we're using it in the parent process but not in the child. It would make more sense to do it in the child.

This probably isn't a huge performance problem, but it might save a little time and it might be easy to fix.

I'm not sure how serious this is, but I was surprised by it. Just loading nytimes.com sends about 1000 onStateChange messages to the parent process. That seems pretty excessive. I remember we have an object that filters these messages so there aren't so many of them. I think we're using it in the parent process but not in the child. It would make more sense to do it in the child.

This probably isn't a huge performance problem, but it might save a little time and it might be easy to fix.
(In reply to Bill McCloskey (:billm) from comment #0)
> I remember we have an object that filters these
> messages so there aren't so many of them.

http://hg.mozilla.org/mozilla-central/annotate/acbd7b68fa8c/browser/base/content/tabbrowser.xml#l1664
We should do this, with the status filter applied we only have about 24 messages for the test page I used where as currently we send 900+ just to load the page.
Created attachment 8523421
0001-Bug-1099490-e10s-Use-nsBrowserStatusFilter-in-the-co.patch

Rewrote RemoteWebProgress a little to handle aWebProgress=null better. nsBrowserStatusFilter sends OnStatusChange() only with aWebProgress=null and aRequest=null.

From some local smoke testing and running a few tests it seems that the double-filtering doesn't do any harm. It would be great to only filter once of course but we could probably only do that by making non-e10s use RemoteWebProgress as well.
I'll push to try as soon as the trees reopen.
https://tbpl.mozilla.org/?tree=Try&rev=ae5677ac10ba
Comment on attachment 8523421
0001-Bug-1099490-e10s-Use-nsBrowserStatusFilter-in-the-co.patch

Review of attachment 8523421:
-----------------------------------------------------------------

Thanks!

::: toolkit/modules/RemoteWebProgress.jsm
@@ +156,5 @@
>                                               json.originalRequestURI);
>      }
>  
>      // Update the actual WebProgress fields.
> +    if (webProgress) {

Maybe move this code up to the previous |if (json.webProgress)| check?
(In reply to Bill McCloskey (:billm) from comment #6)
> >      // Update the actual WebProgress fields.
> > +    if (webProgress) {
> 
> Maybe move this code up to the previous |if (json.webProgress)| check?

Thanks, will do.
https://hg.mozilla.org/integration/fx-team/rev/ad799d59abdc
https://hg.mozilla.org/integration/fx-team/rev/d8287013afb3

Pushed a small follow-up to fix the recent spike of intermittent failures (bug 1010411) that started with the above push. Guess we really are faster now :)
https://hg.mozilla.org/mozilla-central/rev/ad799d59abdc
https://hg.mozilla.org/mozilla-central/rev/d8287013afb3
I stumbled across another use of nsIWebProgressListener in the SessionStore via FrameTree.jsm and was wondering if that code should be using BrowserFilter too:

http://mxr.mozilla.org/mozilla-central/source/browser/components/sessionstore/FrameTree.jsm?force=1#66
We could indeed use the filter there too but OTOH this piece of code shouldn't be too expensive to run. At least not more expensive than the filter itself, excluding any XPCOM overhead. We don't send messages for every state change notification from the FrameTree like we did here. Using the filter for the FrameTree as well should "just work" but I don't know whether there is any advantage from doing so?
