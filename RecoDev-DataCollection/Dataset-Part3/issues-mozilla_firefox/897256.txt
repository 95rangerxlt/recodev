STR
- pair local build of metrofx to desktop (beta 23)
- put a break point in somewhere(add tab,loadURI)
- run browser to hit breakpoint
- hit breakpoint

Expected
- Once i have hit the breakpoint & inspected, I can resume running or stepin/stepout/stepover and keep debugging.

Actual
- Once it hits the first breakpoint it will not resume/stepin/stepover/stepout or otherwise respond.
- clicking the buttons or hitting the keyboard shortcuts both produce no effect
- there is no interesting output in the console

STR
- pair local build of metrofx to desktop (beta 23)
- put a break point in somewhere(add tab,loadURI)
- run browser to hit breakpoint
- hit breakpoint

Expected
- Once i have hit the breakpoint & inspected, I can resume running or stepin/stepout/stepover and keep debugging.

Actual
- Once it hits the first breakpoint it will not resume/stepin/stepover/stepout or otherwise respond.
- clicking the buttons or hitting the keyboard shortcuts both produce no effect
- there is no interesting output in the console
On resumption, error logged in the browser console is

Error executing callback passed to debugger client: TypeError: grip is null
VariablesView.isPrimitive@resource:///modules/devtools/VariablesView.jsm:3009
Variable.prototype<._displayVariable@resource:///modules/devtools/VariablesView.jsm:2333
Variable.prototype<._init@resource:///modules/devtools/VariablesView.jsm:2284
Scope@resource:///modules/devtools/VariablesView.jsm:1125
Variable@resource:///modules/devtools/VariablesView.jsm:2066
Scope.prototype._createChild@resource:///modules/devtools/VariablesView.jsm:1145
Scope.prototype.addItem@resource:///modules/devtools/VariablesView.jsm:1175
Scope.prototype.addItems@resource:///modules/devtools/VariablesView.jsm:1214
VariablesViewController.prototype._populateFromObject/<@resource:///modules/devtools/VariablesViewController.jsm:159
DC_requester/</<@resource://gre/modules/devtools/dbg-client.jsm:316
DC_onPacket/<@resource://gre/modules/devtools/dbg-client.jsm:687
resolve@resource://gre/modules/commonjs/sdk/core/promise.js:122
then@resource://gre/modules/commonjs/sdk/core/promise.js:47
then@resource://gre/modules/commonjs/sdk/core/promise.js:157
DC_onPacket@resource://gre/modules/devtools/dbg-client.jsm:691
DT__processIncoming/<@resource://gre/modules/devtools/dbg-client.jsm -> resource://gre/modules/devtools/server/transport.js:186
makeInfallible/<@resource://gre/modules/devtools/DevToolsUtils.jsm -> resource://gre/modules/devtools/DevToolsUtils.js:61
 @ resource://gre/modules/devtools/dbg-client.jsm:321

I also get this occasionally interacting with VariablesView inspecting objects.
The issue appears to be that we do not properly encode `Infinity` and `NaN` for transport over JSON. `JSON.encode(Infinity) === "null"`. The issue doesn't come up over local transport because we don't actually encode to JSON, but remotely of course we do and so we end up with `null` for Infinity's descriptor.value. Since this isn't a valid grip, it blows up when it reaches `VariablesView.isPrimitive` which assumes it can access properties on the value passed.

The protocol needs to be updated to handle Infinity, NaN, and -Infinity and the implementation in `VariablesView.getGrip` and `VariablesVuew.getString` will need to be updated.
Created attachment 787093
WIP1

Adds handling of NaN, Infinity, and -Infinity to the debugger protocol. The includes updates to:

* VariablesView.isPrimitive
* VariablesView.isFalsy
* VariablesView.getGrip
* VariablesView.getString
* VariablesView.getClass
* ThreadActor.prototype.createValueGrip
* createValueGrip in server/actors/tracer.js
* WebConsoleUtils.createValueGrip
Created attachment 787237
WIP2

Adds tests:

* additions to devtools/debugger/test/browser_dbg_propertyview-06.js
* additions to toolkit/devtools/server/tests/unit/test_trace_actor-06.js
* add toolkit/devtools/server/tests/unit/test_objectgrips-08.js
https://tbpl.mozilla.org/?tree=Try&rev=1fecb3a86247
Comment on attachment 787237
WIP2

Review of attachment 787237:
-----------------------------------------------------------------

Now that we've got so many cases - undefined, null, NaN, Infinity, and -Infinity - it might be good to wrap up the real value / grip relationship in a pair of functions, somewhere accessible to both client and server. (And perhaps a predicate that recognizes primitives that need the non-primitive encoding?) VariablesView.isFalsy can just convert to a value, and then use '!'; VariablesView.getString can just convert to a value, and call toString.

::: browser/devtools/shared/widgets/VariablesView.jsm
@@ +3004,5 @@
>    if (typeof grip != "object") {
>      return true;
>    }
>  
>    // For convenience, undefined, null and long strings are considered types.

This comment needs to be updated too.

::: toolkit/devtools/server/actors/script.js
@@ +1545,5 @@
>        aPool = this._pausePool;
>      }
>      let type = typeof(aValue);
>  
> +    if (type === "boolean") {

Would 'switch' statements be more legible here? Just a thought.
(In reply to Jim Blandy :jimb from comment #6)
> Now that we've got so many cases - undefined, null, NaN, Infinity, and
> -Infinity - it might be good to wrap up the real value / grip relationship
> in a pair of functions, somewhere accessible to both client and server.

I was thinking exactly this. We see almost identical code duplicated in at least three different places. I'll file a followup bug to do that.


> ::: browser/devtools/shared/widgets/VariablesView.jsm
> @@ +3004,5 @@
> >    if (typeof grip != "object") {
> >      return true;
> >    }
> >  
> >    // For convenience, undefined, null and long strings are considered types.
> 
> This comment needs to be updated too.

Good catch.

> ::: toolkit/devtools/server/actors/script.js
> @@ +1545,5 @@
> >        aPool = this._pausePool;
> >      }
> >      let type = typeof(aValue);
> >  
> > +    if (type === "boolean") {
> 
> Would 'switch' statements be more legible here? Just a thought.

Yeah I think so.
(In reply to Brandon Benvie [:bbenvie] from comment #7)
> (In reply to Jim Blandy :jimb from comment #6)
> > Now that we've got so many cases - undefined, null, NaN, Infinity, and
> > -Infinity - it might be good to wrap up the real value / grip relationship
> > in a pair of functions, somewhere accessible to both client and server.
> 
> I was thinking exactly this. We see almost identical code duplicated in at
> least three different places. I'll file a followup bug to do that.

An issue with this is that to create a grip from any given value, you need the ability to create long string grips when appropriate and object grips when appropriate. A simple "makeGrip" function won't suffice.
Yeah, something more restricted: primitiveToGrip and GripToPrimitive, and have primitiveToGrip throw if the string is long, perhaps?
Created attachment 788363
WIP3

I've opened bug 903578 for DRYing up these functions as a follow up to this bug. I've also reorganized the various "createValueGrip" functions to be as similar to each other possible so that refactoring them will be more straightforward. This patch also adds handling of -0 and tests for it.

https://tbpl.mozilla.org/?tree=Try&rev=7ab1adea3ec7
I've sent a pull request for DebuggerDocs that covers this change at https://github.com/jimblandy/DebuggerDocs/pull/13
(In reply to Brandon Benvie [:bbenvie] from comment #11)
> I've sent a pull request for DebuggerDocs that covers this change at
> https://github.com/jimblandy/DebuggerDocs/pull/13

Merged.
Created attachment 788419
WIP4

Sorry, small update. I forgot that since local transport simply freezes objects, -0 wouldn't ever be visible in the debugger locally, while it would be visible remotely. This adds a check to VariablesView.getString to check for -0 when encountering a number so it will display as "-0" correctly.
https://hg.mozilla.org/integration/fx-team/rev/b90372fad4c4
https://hg.mozilla.org/mozilla-central/rev/b90372fad4c4
