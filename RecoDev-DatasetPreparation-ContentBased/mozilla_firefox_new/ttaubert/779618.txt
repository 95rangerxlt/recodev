While playing around with the Gecko profiler I noticed a call to tabPreviews_capture() that caught my attention. I don't use ctrlTab/allTab so I thought it shouldn't be called.

Turned out that's okay because I obviously dragged a tab around:

https://mxr.mozilla.org/mozilla-central/source/browser/base/content/tabbrowser.xml#3410

The real problem here is that this initializes the tabPreviews object which then automatically captures thumbnails on TabSelect and SSTabRestored. That means once the user dragged a tab around, we have two services capturing thumbnails for open tabs.

The easiest solution would probably be to pass some argument around that indicates we don't want to initialize tabPreviews - the real solution should be to make tabbrowser use PageThumbs.jsm.

While playing around with the Gecko profiler I noticed a call to tabPreviews_capture() that caught my attention. I don't use ctrlTab/allTab so I thought it shouldn't be called.

Turned out that's okay because I obviously dragged a tab around:

https://mxr.mozilla.org/mozilla-central/source/browser/base/content/tabbrowser.xml#3410

The real problem here is that this initializes the tabPreviews object which then automatically captures thumbnails on TabSelect and SSTabRestored. That means once the user dragged a tab around, we have two services capturing thumbnails for open tabs.

The easiest solution would probably be to pass some argument around that indicates we don't want to initialize tabPreviews - the real solution should be to make tabbrowser use PageThumbs.jsm.
Created attachment 648068
patch v1

This patch introduces a PageThumbs.captureToCanvas() method which provides the API needed by the tabbrowser.
Comment on attachment 648068
patch v1

Why change capture()'s signature (to take a browser instead of a window)? Seems like a gratuitous API change, since the only use of aBrowser is just getting .contentWindow.
(In reply to :Gavin Sharp (use gavin@gavinsharp.com for email) from comment #2)
> Why change capture()'s signature (to take a browser instead of a window)?
> Seems like a gratuitous API change, since the only use of aBrowser is just
> getting .contentWindow.

I thought about not doing this but captureAndStore() takes a browser. So shouldn't captureToCanvas(), too? As well as capture()?

Also, captureAndStore() calls capture(). capture() calls captureToCanvas() which is both used internally and externally. As capture() knows about the window only we'd have to make captureToCanvas() take a window as well.
(In reply to Tim Taubert [:ttaubert] from comment #3)
> I thought about not doing this but captureAndStore() takes a browser. So
> shouldn't captureToCanvas(), too? As well as capture()?

I don't think the consistency here is valuable. captureAndStore has a very specific use (capture and store a thumbnail for a given browser, so needs the browser's URI for storage), while the other two are more general purpose (they return the captured data directly, and thus only need a window). I don't see a problem with that.
(In reply to :Gavin Sharp (use gavin@gavinsharp.com for email) from comment #4)
> (In reply to Tim Taubert [:ttaubert] from comment #3)
> > I thought about not doing this but captureAndStore() takes a browser. So
> > shouldn't captureToCanvas(), too? As well as capture()?
> 
> I don't think the consistency here is valuable. captureAndStore has a very
> specific use (capture and store a thumbnail for a given browser, so needs
> the browser's URI for storage), while the other two are more general purpose
> (they return the captured data directly, and thus only need a window). I
> don't see a problem with that.

I didn't see it that way - make sense to me. Will update the patch accordingly.
Created attachment 648648
patch v2

Reverted the signature change for capture().
Comment on attachment 648648
patch v2

Review of attachment 648648:
-----------------------------------------------------------------

::: browser/base/content/tabbrowser.xml
@@ +3410,5 @@
> +        // Create a canvas to which we capture the current tab.
> +        let canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
> +        canvas.mozOpaque = true;
> +        canvas.width = Math.ceil(screen.availWidth / 5.75);
> +        canvas.height = Math.round(canvas.width * 0.5625);

Where do these magic numbers come from?
Created attachment 649223
patch v3

(In reply to Jared Wein [:jaws] from comment #7)
> > +        canvas.width = Math.ceil(screen.availWidth / 5.75);
> > +        canvas.height = Math.round(canvas.width * 0.5625);
> 
> Where do these magic numbers come from?

Sorry, I just copied them from browser-tabPreviews.js. I added some comments and put them in consts to hopefully better describe what they're used for.

I can't say why ~1/6th of the screen was chosen as the drag image width because there wasn't any information in the bugs that implemented it. But it makes sense because it adapts to the available screen size so it doesn't get too small on big screens and feels just right on smaller screens.
https://hg.mozilla.org/integration/fx-team/rev/3411e98278d6
Pushed a little follow-up:

https://hg.mozilla.org/integration/fx-team/rev/54f9a8c340c8
https://hg.mozilla.org/mozilla-central/rev/3411e98278d6
https://hg.mozilla.org/mozilla-central/rev/54f9a8c340c8


[Page Thumbnails] make tabbrowser use the thumbnail service



Bug 779618 - [Page Thumbnails] make tabbrowser use the thumbnail service; r=jaws 

Bug 779618 - Tiny follow-up to remove unnecessary return; r=follow-up 