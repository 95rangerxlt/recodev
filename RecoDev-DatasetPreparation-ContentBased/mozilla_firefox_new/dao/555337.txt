The init function on tabPreviews is called unconditionally:

http://mxr.mozilla.org/mozilla-central/source/browser/base/content/browser.js#1310

That function sets up an event handler for TabSelect:

http://mxr.mozilla.org/mozilla-central/source/browser/base/content/browser-tabPreviews.js#50

The event handler captures the previews for tabs:

http://mxr.mozilla.org/mozilla-central/source/browser/base/content/browser-tabPreviews.js#100

_But_, that does not need to happen in case that the user does not have the tab previews pref enabled.  This is inefficient, at least, and it seems to be causing problems for graphics guys.

The init function on tabPreviews is called unconditionally:

http://mxr.mozilla.org/mozilla-central/source/browser/base/content/browser.js#1310

That function sets up an event handler for TabSelect:

http://mxr.mozilla.org/mozilla-central/source/browser/base/content/browser-tabPreviews.js#50

The event handler captures the previews for tabs:

http://mxr.mozilla.org/mozilla-central/source/browser/base/content/browser-tabPreviews.js#100

_But_, that does not need to happen in case that the user does not have the tab previews pref enabled.  This is inefficient, at least, and it seems to be causing problems for graphics guys.
I think it probably makes sense to disable the caching/pre-emptive fetching if the main consumers of the tabPreviews object are disabled. Checking the prefs directly in tabPreviews.init() seems like a bit of an awkward layering violation, though. These objects' inter-dependencies are kind of confusing (initialized in different order manually from browser.js). I guess ideally the consumers would be responsible for ensuring that the tabPreviews object is initialized before they use its properties or call its methods, rather than relying on ordering of the init()/readPref() calls in browser.js.

The tab previews are also used when dragging tabs, though it seems to call capture() directly every time, rather than calling get() and potentially using the cached image. We should probably fix that, even if we fix this bug, so that users with those prefs enabled get the benefits of the cache.
Created attachment 436445
init lazily
Comment on attachment 436445
init lazily

>diff --git a/browser/base/content/browser-tabPreviews.js b/browser/base/content/browser-tabPreviews.js

> var tabPreviews = {

>   get: function tabPreviews_get(aTab) {
>+    this.init();

>   capture: function tabPreviews_capture(aTab, aStore) {

You should init() here too, given that there's a direct caller of this, right?

Does allTabs really need to be inited in BrowserStartup() rather than delayedStartup()? It means we'll now be init()ing tabPreviews earlier with this change, and I worry a bit that that will trigger unnecessary reflows early on in the window open process.
(In reply to comment #3)
> >   capture: function tabPreviews_capture(aTab, aStore) {
> 
> You should init() here too, given that there's a direct caller of this, right?

Yeah.

> Does allTabs really need to be inited in BrowserStartup() rather than
> delayedStartup()?

It changes the all-tabs button, and doing this later would let the UI bounce.

> It means we'll now be init()ing tabPreviews earlier with this
> change, and I worry a bit that that will trigger unnecessary reflows early on
> in the window open process.

allTabs.init is called lazily too, on first use.
Oh right. I was confusing init() and readPref().
http://hg.mozilla.org/mozilla-central/rev/7804b7b04915


We seem to capture tab previews regardless of whether we need them or not

perf

Bug 555337 - Capture tab previews only when needed. r=gavin 