When we escape editing a disabled property, the property is re-enabled even though the property is crossed out.

When we escape editing a disabled property, the property is re-enabled even though the property is crossed out.
Created attachment 8636751
Part 1: [Rule View] Refactor this.prop.rule to this.rule [1.0]
Created attachment 8636785
Part 1: [Rule View] Refactor this.prop.rule to this.rule [2.0]
Created attachment 8636848
Part 1: Refactor this.prop.rule to this.rule [3.0]
Created attachment 8636849
Part 2: Ensure the property remains disabled after ESC editing a disabled property [1.0]
Created attachment 8637387
Part 3: Add unit test [1.0]
https://treeherder.mozilla.org/#/jobs?repo=try&revision=4c3ea5027845
Created attachment 8637391
Part 1: Refactor this.prop.rule to this.rule in rule-view.js [4.0]
Comment on attachment 8636849
Part 2: Ensure the property remains disabled after ESC editing a disabled property [1.0]

Review of attachment 8636849:
-----------------------------------------------------------------

::: browser/devtools/styleinspector/rule-view.js
@@ +3339,5 @@
>        if (this.removeOnRevert) {
>          this.remove();
>        } else {
> +        // Disable the property if the property was originally disabled.
> +        this.rule.setPropertyEnabled(this.prop, this.prop.enabled);

We could remove this.update here because this.update will be called after this._onValueDone from inplace-editor.js.

this.rule.setPropertyEnabled() will essentially perform previewPropertyValue()
Comment on attachment 8637391
Part 1: Refactor this.prop.rule to this.rule in rule-view.js [4.0]

Review of attachment 8637391:
-----------------------------------------------------------------

The place where prop is getting reassigned in _updateTextProperty makes me a little suspicious of hardcoding `this.rule = this.prop.rule` in the constructor.  Seems like it may be safer to add a getter on the TPE object to return this.prop.rule
(In reply to Brian Grinstead [:bgrins] from comment #9)
> Comment on attachment 8637391
> Part 1: Refactor this.prop.rule to this.rule in rule-view.js [4.0]
> 
> Review of attachment 8637391:
> -----------------------------------------------------------------
> 
> The place where prop is getting reassigned in _updateTextProperty makes me a
> little suspicious of hardcoding `this.rule = this.prop.rule` in the
> constructor.  Seems like it may be safer to add a getter on the TPE object
> to return this.prop.rule

But this was just at a glance, I haven't tracked down exactly what that code is doing so maybe it'd be fine after all
Created attachment 8637415
Part 1: Refactor this.prop.rule to this.rule in rule-view.js [5.0]

I agree using a getter might be safer here.
Created attachment 8637491
Part 2: Ensure the property remains disabled after ESC editing a disabled property [2.0]
Created attachment 8637569
Part 3: Add unit test [2.0]
Created attachment 8638201
Part 2: Ensure the property remains disabled after ESC editing a disabled property [3.0]
Created attachment 8638400
Part 2: Ensure the property remains disabled after ESC editing a disabled property [4.0]
https://treeherder.mozilla.org/#/jobs?repo=try&revision=75eea33e58e8
Comment on attachment 8638400
Part 2: Ensure the property remains disabled after ESC editing a disabled property [4.0]

Review of attachment 8638400:
-----------------------------------------------------------------

::: browser/devtools/styleinspector/rule-view.js
@@ +3295,5 @@
> +    // Unlike the value editor, if a name is empty the entire property
> +    // should always be removed.
> +    if (aValue.trim() === "") {
> +      this.remove();
> +    } else {

Nit: could early return here also to reduce nesting

@@ +3348,5 @@
> +      val = parseSingleValue(parsedProperties.firstValue);
> +    }
> +
> +    if ((!aCommit && !this.ruleEditor.isEditing) ||
> +        (val && this.committed.value == val.value &&

What if there is multiple values but the value of this property hasn't changed?  It looks like in that case it would ignore the new values.

For example, old val: "100%", new val (pasted in): "100%; background: red;"

I think we'll need to split up the idea of re-disabling the property and removing the property if esc was pressed and removeOnRevert.

@@ -3335,5 @@
>        // A new property should be removed when escape is pressed.
>        if (this.removeOnRevert) {
>          this.remove();
>        } else {
> -        // update the editor back to committed value

I'm not even sure how pressing ESC is actually reverting anything right now with these lines gone but it seems to do so with the patch applied.
Comment on attachment 8637569
Part 3: Add unit test [2.0]

Review of attachment 8637569:
-----------------------------------------------------------------

As discussed, I'm not sure if previewing disabled properties is even that useful of a thing, but given the context of Bug 1184628 where we will re-enable when starting an edit having test coverage for this is a step in the right direction
Created attachment 8638832
Part 2: Ensure the property remains disabled after ESC editing a disabled property [5.0]
Created attachment 8639085
Part 1: Refactor this.prop.rule to this.rule in rule-view.js [6.0]
Created attachment 8639086
Part 2: Ensure the property remains disabled after ESC editing a disabled property [6.0]
Created attachment 8639087
Part 3: Add unit test [3.0]
Comment on attachment 8639086
Part 2: Ensure the property remains disabled after ESC editing a disabled property [6.0]

Review of attachment 8639086:
-----------------------------------------------------------------

::: browser/devtools/styleinspector/rule-view.js
@@ +3361,5 @@
>     */
>    _onValueDone: function(aValue, aCommit) {
> +    let parsedProperties, val;
> +
> +    if (aValue !== undefined) {

In what case would aValue be undefined here?  I thought it would always pass a string in..

@@ +3367,5 @@
> +      val = parseSingleValue(parsedProperties.firstValue);
> +    }
> +
> +    if ((!aCommit && !this.ruleEditor.isEditing) ||
> +        (val && !parsedProperties.propertiesToAdd.length &&

Can you store this part of the OR into a separate variable with a descriptive name?
Created attachment 8639584
Part 2: Ensure the property remains disabled after ESC editing a disabled property [7.0]
Comment on attachment 8639584
Part 2: Ensure the property remains disabled after ESC editing a disabled property [7.0]

Review of attachment 8639584:
-----------------------------------------------------------------

r=me with a green try push
https://treeherder.mozilla.org/#/jobs?repo=try&revision=cde088c9b84c
https://treeherder.mozilla.org/#/jobs?repo=try&revision=363847b0bf42
https://hg.mozilla.org/integration/fx-team/rev/49a2e0844098
https://hg.mozilla.org/integration/fx-team/rev/36ea982d46ab
https://hg.mozilla.org/integration/fx-team/rev/72b6857ff784
https://hg.mozilla.org/mozilla-central/rev/49a2e0844098
https://hg.mozilla.org/mozilla-central/rev/36ea982d46ab
https://hg.mozilla.org/mozilla-central/rev/72b6857ff784


[Rule View] Editing a disabled property and escaping re-enables the property



Bug 1186138 - Part 1: Refactor this.prop.rule to this.rule in rule-view.js r=bgrins 

Bug 1186138 - Part 2: Ensure the property remains disabled after ESC editing a disabled property r=bgrins 

Bug 1186138 - Part 3: Add unit test for checking that the preview remains disabled after escaping editing a disabled property r=bgrins 