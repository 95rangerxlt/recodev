User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.1; fr; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14
Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; fr; rv:1.9) Gecko/2008052906 Firefox/3.0

We have developed an XPCOM Add-On which is being used by many of our customers
for some while now. Our component uses the “nsIXMLHttpRequest” object to upload a certain amount of data using POST method.

Since NS_XMLHTTPREQUEST_CONTRACTID has changed with Firefox 3, calls to do_CreateInstance were not working anymore with Gecko SDK 1.8 (our pointer was NULL and error the code was NS_ERROR_NO_INTERFACE).

So we upgraded to latest version (gecko sdk 1.9, built from the official firefox 3 source code). Everything seems ok since we are now able to instanciate successfully our object in Firefox 3.
Yet, as soon as call OpenRequest method of that object, we get an error.

Here is what the code looks like:

 nsCOMPtr<nsIXMLHttpRequest> pXMLHttpRequest = NULL;
 ...
 pXMLHttpRequest = do_CreateInstance(NS_XMLHTTPREQUEST_CONTRACTID, &rv);

 ... (here we just check that rv is OK)

 const nsAString& emptyStr = EmptyString();
 nsDependentCString	myUrl = nsDependentCString(url);
 const nsDependentCString& myPostString = NS_LITERAL_CSTRING("POST");
 rv = pXMLHttpRequest->OpenRequest(myPostString, myUrl, PR_FALSE, emptyStr, emptyStr);
 ...

We can compile and run this code, but when we call OpenRequest(), rv is set to 0xc1f30001 (NS_ERROR_NOT_INITIALIZED) and we're not able anymore to send any data.
Yet the result of do_CreateInstance() looks OK, and our url (char *) is correctly initialized (it is printed in a logfile a few lines earlier).

Moreover, we made a simple test by calling Abort() method which returns with no error, so we assume pXMLHttpRequest is a valid pointer.

This code was working with Firefox 2. Is it a regression ?

Thanks in advance

Reproducible: Always

Steps to Reproduce:
1.
2.
3.

User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.1; fr; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14
Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; fr; rv:1.9) Gecko/2008052906 Firefox/3.0

We have developed an XPCOM Add-On which is being used by many of our customers
for some while now. Our component uses the “nsIXMLHttpRequest” object to upload a certain amount of data using POST method.

Since NS_XMLHTTPREQUEST_CONTRACTID has changed with Firefox 3, calls to do_CreateInstance were not working anymore with Gecko SDK 1.8 (our pointer was NULL and error the code was NS_ERROR_NO_INTERFACE).

So we upgraded to latest version (gecko sdk 1.9, built from the official firefox 3 source code). Everything seems ok since we are now able to instanciate successfully our object in Firefox 3.
Yet, as soon as call OpenRequest method of that object, we get an error.

Here is what the code looks like:

 nsCOMPtr<nsIXMLHttpRequest> pXMLHttpRequest = NULL;
 ...
 pXMLHttpRequest = do_CreateInstance(NS_XMLHTTPREQUEST_CONTRACTID, &rv);

 ... (here we just check that rv is OK)

 const nsAString& emptyStr = EmptyString();
 nsDependentCString	myUrl = nsDependentCString(url);
 const nsDependentCString& myPostString = NS_LITERAL_CSTRING("POST");
 rv = pXMLHttpRequest->OpenRequest(myPostString, myUrl, PR_FALSE, emptyStr, emptyStr);
 ...

We can compile and run this code, but when we call OpenRequest(), rv is set to 0xc1f30001 (NS_ERROR_NOT_INITIALIZED) and we're not able anymore to send any data.
Yet the result of do_CreateInstance() looks OK, and our url (char *) is correctly initialized (it is printed in a logfile a few lines earlier).

Moreover, we made a simple test by calling Abort() method which returns with no error, so we assume pXMLHttpRequest is a valid pointer.

This code was working with Firefox 2. Is it a regression ?

Thanks in advance

Reproducible: Always

Steps to Reproduce:
1.
2.
3.
You likely need to call xmlHttpRequest->Init first so that a principal is available.

It took me a little time to figure out how to get the right principal - such call was not needed in previous versions of firefox - but now it works, so that was the missing step, indeed.

Thanks a lot for your help, Neil.




Broken OpenRequest() method in object "nsIXMLHttpRequest" with latest SDK

