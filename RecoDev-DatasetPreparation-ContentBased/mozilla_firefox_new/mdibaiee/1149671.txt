User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:39.0) Gecko/20100101 Firefox/39.0
Build ID: 20150323002234

Steps to reproduce:

In rule-view you can hold alt/shift keys to step 0.1/10 at a time.

It would be nice to have this feature in CSS Filter Editor widget.

User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:39.0) Gecko/20100101 Firefox/39.0
Build ID: 20150323002234

Steps to reproduce:

In rule-view you can hold alt/shift keys to step 0.1/10 at a time.

It would be nice to have this feature in CSS Filter Editor widget.
I don't think this should prevent bug 1055181 from landing, let's make this a follow-up bug (something we can work on after the main bug has landed).
Created attachment 8593321
Bug 1149671 - use alt/na/shift to step 0.1/1/10 at a time

That small bug was a good warm-up to get me started again.

Try: https://treeherder.mozilla.org/#/jobs?repo=try&revision=e024d67e7c50
Comment on attachment 8593321
Bug 1149671 - use alt/na/shift to step 0.1/1/10 at a time

Review of attachment 8593321:
-----------------------------------------------------------------

Great start! And the feature is nice.
I have a few remarks below.
Also, in other edit fields we have in the markup-view for example (when you edit an attribute), or in the rule-view (when you edit a css value), users can increment/decrement numbers even when they are part of more complex fields that don't only have one number. For example:
- add filter: blur(6px) to a css rule in the rule-view
- click on blur(6px) (not the swatch, the text)
- using your cursor, move close to the number 6
- now using arrow keys, see that you can increment/decrement the number, and that the rest of the field remains unchanged.
It would be nice if this worked here too, so that you'd be able to also use it to edit drop-shadow values.
Perhaps the best way to go here would be to simply reuse the same widget that we use in the rule-view, to have this for free.
Personally, I'm ok both ways:
- either we keep this patch small, only cover simple number fields, and go for reusing the more complex rule-view editor in a later bug,
- or we do this now (knowing that it may take some integration work, maybe also modifying the way the rule-view editor works to fit your use case).
You choose!

::: browser/devtools/shared/test/browser_filter-editor-08.js
@@ +3,5 @@
> +
> +"use strict";
> +
> +// Tests the Filter Editor Widget inputs increase/decrease value using
> +// arrow keys, applying multiplier using alt/shift

This should test some more test cases:
- that incrementing/decrementing also works with other units, or unit-less filters,
- that nothing happens when the arrow keys are used in a non-number filter,
- that in non-number fields, if you have a text range selection, pressing up or down should move the cursor to either end of the range and collapse the selection (right now it doesn't do anything).

@@ +73,5 @@
> +
> +  this._keyDown({
> +    target: input,
> +    keyCode: key,
> +    [modifier]: true,

Nice use of dynamic property name here.

::: browser/devtools/shared/widgets/FilterWidget.js
@@ +207,5 @@
>      this.list.addEventListener("input", this._input);
>    },
>  
> +  _keyDown: function(e) {
> +    console.log(e.keyCode);

Left-over console log

@@ +209,5 @@
>  
> +  _keyDown: function(e) {
> +    console.log(e.keyCode);
> +    if (e.target.tagName.toLowerCase() === "input" &&
> +        e.keyCode === 40 || e.keyCode === 38) {

Can you invert this condition and early return instead, to avoid having to indent the rest of this function's body? Also, written as it is, it is incorrect, try for instance typing "1." in the field, the "." character isn't accepted.

if (e.target.tagName.toLowerCase() !== "input" ||
    e.keyCode !== 40 || e.keyCode !== 38) {
  return;
}

e.preventDefault();
...

Also, can you make sure to skip non-number fields? The following code shouldn't run for drop-shadow, or url, right now it does.
Created attachment 8593943
use alt/na/shift to step 0.1/1/10 at a time

Thanks Patrick! That idea is great and I was already introduced to it in rule-view while I was playing with the tooltip.

Now I took a look at inplace-editor.js which is doing that, the code is too complex, it's parsing the css value, determining which part we're on and applying number and unit. I thought we don't really need that and it shouldn't be as complex to implement. So I tried it, as I had expected, it wasn't too complex to implement, I tested it and I think it works the way it should.

I also added two tests for this, waiting to hear from you!

(I fixed what I thought was causing memory leak, but haven't tested it on a debug build yet, and try server seems to be CLOSED currently, I will rebuild with debug flag this night if I don't forget to)

Thanks again Patrick!
Try: https://treeherder.mozilla.org/#/jobs?repo=try&revision=40929ab96d8f
Comment on attachment 8593943
use alt/na/shift to step 0.1/1/10 at a time

Review of attachment 8593943:
-----------------------------------------------------------------

Looks good.
A couple of general comments:
- you need to preventDefault in _keyDown later, to make sure not to do it if there's no number next to the cursor,
- you need to handle negative values too (even if they're not valid), for instance in drop-shadow, enter "2px 2px 2px red", then do shift-down next to the first "2px" value: it becomes "-8px" which is fine, but then you can't get it to go back to "2px" because the - is ignored and so it goes down to "-18px". Also shift-down will keep adding leading "-" characters.
- finally, in a drop-shadow filter, increasing "1px" turns it to "2.0px" instead of "2px", it would be nice if you could ensure there's no extra ".0" added.

::: browser/devtools/shared/test/browser_filter-editor-10.js
@@ +17,5 @@
> +  yield promiseTab("about:blank");
> +  let [host, win, doc] = yield createHost("bottom", TEST_URI);
> +
> +  const container = doc.querySelector("#container");
> +  const initialValue = "drop-shadow(rgb(0, 0, 0) 10px 1px 0px)";

You should also test with float numbers and negative numbers.

::: browser/devtools/shared/widgets/FilterWidget.js
@@ +224,5 @@
> +      multiplier = FAST_VALUE_MULTIPLIER;
> +    }
> +
> +    const filterEl = e.target.closest(".filter");
> +    const index = [...this.list.children].indexOf(filterEl);

This is the 4th occurrence of `[...this.list.children].indexOf(filterEl);` in this file, I think it would be nicer as a method of the class:

_getFilterIndexFromEl: function(filterEl) {
  return [...this.list.children].indexOf(filterEl);
},

@@ +227,5 @@
> +    const filterEl = e.target.closest(".filter");
> +    const index = [...this.list.children].indexOf(filterEl);
> +    const filter = this.filters[index];
> +
> +    if (filter.unit) {

Can you precede this if with a comment that says something along the lines of:
Filters that have units are number-type filters. For them, the value can be incremented/decremented simply. For other types of filters (e.g. drop-shadow) we need to check if the keypress happened close to a number first.

@@ +241,5 @@
> +      this.updateValueAt(index, value);
> +    } else {
> +      const selectionStart = input.selectionStart;
> +      let num = getNeighbourNumber(input.value, selectionStart);
> +      if (!num) return;

So, if the keypress didn't happen next to a number, we bail out, which is good, but `e.preventDefault();` was already executed before, which could be a problem (say if you're trying to use the up arrow to collapse a text selection for instance).
So, what you should do is move `e.preventDefault();` all the way to the bottom of this function instead.

@@ +779,5 @@
> +  * @param {String} string
> +  *        The string containing numbers
> +  * @param {Number} index
> +  *        The index to look for neighbours for
> +  * @return {Object/Boolean}

This function doesn't return a boolean. Just Object is fine.

@@ +789,5 @@
> +function getNeighbourNumber(string, index) {
> +  if (!/\d/.test(string)) return null;
> +
> +  let left = /\D*([0-9.]*)$/.exec(string.slice(0, index)),
> +      right = /[0-9.]*/.exec(string.slice(index));

In theory, this is not completely correct because it would also match invalid numbers like "3.4.3.4.5.5.6".
But I think just mentioning this limitation in the jsdoc is enough, no need to spend a lot of time on this helper function.

Also, you need to handle negative numbers too (starting with a -).
Created attachment 8594724
Bug 1149671 - use alt/na/shift to step 0.1/1/10 at a time

Thanks Patrick! You were right, I had forgotten about negative numbers.
Added tests for negative / floating numbers.

https://treeherder.mozilla.org/#/jobs?repo=try&revision=2966a84df4a5
Comment on attachment 8594724
Bug 1149671 - use alt/na/shift to step 0.1/1/10 at a time

Review of attachment 8594724:
-----------------------------------------------------------------

LGTM

::: browser/devtools/shared/widgets/FilterWidget.js
@@ +804,5 @@
> +  if (!/\d/.test(string)) {
> +    return null;
> +  }
> +
> +  let left = /[^-0-9.]*(-?[0-9.]*)$/.exec(string.slice(0, index)),

I think the part [^-0-9.]* isn't needed, unless I'm mistaken.
Created attachment 8595256
Bug 1149671 - use alt/na/shift to step 0.1/1/10 at a time

You were right, that was not needed.

I found another bug: If you had a float number like 1.2 and the cursor was at 2, by decreasing two with alt, your cursor would jump to the end of px (because the .0 would get removed), fixed.

Try: https://treeherder.mozilla.org/#/jobs?repo=try&revision=641f6adb6b72

Thanks Patrick!
That Try is invalid (an older revision of this patch).

New Try: https://treeherder.mozilla.org/#/jobs?repo=try&revision=aa010ea914fb
https://hg.mozilla.org/integration/fx-team/rev/8905a064e9fe
https://hg.mozilla.org/integration/fx-team/rev/f1caed66c56b
https://hg.mozilla.org/mozilla-central/rev/f1caed66c56b
I think it would be nice to have this mentioned in https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Edit_CSS_filters additionally to the general mentioning for the CSS pane in https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/Keyboard_shortcuts.

Sebastian
(In reply to Sebastian Zartner [:sebo] from comment #14)
> I think it would be nice to have this mentioned in
> https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/
> Edit_CSS_filters additionally to the general mentioning for the CSS pane in
> https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/
> Keyboard_shortcuts.
Should we rush though? In light of bug 1217301, we might want to wait and see if this feature stays as it is. The CSS Filter UI is still in its alpha stages, and I would hate to have people have to revisit the doc once again soon.
You're right. So should the dev-doc-needed by moved to bug 1217301 instead?

Sebastian


[CSS FIlter Editor] Use alt/shift keys on inputs to step 0.1/10 at a time



Bug 1149671 - Use alt/na/shift to step 0.1/1/10 at a time. r=pbrosset 