Created attachment 8608264
Screenshot from 2015-05-21 00:05:08.png

User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0
Build ID: 20150520004004

Steps to reproduce:

Open dev tools
Open console
Type `debugger; //# sourceURL=my-label-for-this-eval-source.js`
Hit enter


Actual results:

Debugger paused.
The scripts pane doesn't list any source with that name.


Expected results:

Debugger should pause, AND, the scripts pane should list a source under the name "my-label-for-this-eval-source.js"

Created attachment 8608264
Screenshot from 2015-05-21 00:05:08.png

User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0
Build ID: 20150520004004

Steps to reproduce:

Open dev tools
Open console
Type `debugger; //# sourceURL=my-label-for-this-eval-source.js`
Hit enter


Actual results:

Debugger paused.
The scripts pane doesn't list any source with that name.


Expected results:

Debugger should pause, AND, the scripts pane should list a source under the name "my-label-for-this-eval-source.js"
Can reproduce.
Also, `eval("debugger; //# sourceURL=foo.js")` doesn't work either.
Created attachment 8608267
Screenshot from 2015-05-21 00:09:13.png

This doesn't work with the eval function either.

eval('debugger; //# sourceURL=my-label-for-this-eval-source.js')

^ that doesn't work either
Created attachment 8608742
1166852.patch

This makes `eval('debugger //# sourceURL=foo.js')` work. The problem is that we were trying to generate a URL from the introductionScript.source.url property, but that is generated by the console and is "debugger eval code", which is an invalid URL, so it was throwing.

Just doing `debugger //# sourceURL=foo.js` will never work because the console evals things in a special way.
Created attachment 8608787
1166852.patch

made a test with the patch!
https://treeherder.mozilla.org/#/jobs?repo=try&revision=80fb21f53b70
(In reply to James Long (:jlongster) from comment #4)
> Created attachment 8608742
> 1166852.patch
> 
> This makes `eval('debugger //# sourceURL=foo.js')` work. The problem is that
> we were trying to generate a URL from the introductionScript.source.url
> property, but that is generated by the console and is "debugger eval code",
> which is an invalid URL, so it was throwing.
> 

Thanks!

> Just doing `debugger //# sourceURL=foo.js` will never work because the
> console evals things in a special way.

Is there no way we can debug code entered from the console, then?
Say I paste a piece of code snippet in the console, is it possible to have it listed in the debugger tab somehow so we can break in it and debug it? This can be very much useful when debugging live websites and/or writing userscripts. Chrome already provides this via temporary pipes and snippets. Can we do something similar is FF? I guess this should probably go in another thread?

Thanks again for the quick resolution,
<3, awal
(In reply to awalgarg from comment #7)
> 
> > Just doing `debugger //# sourceURL=foo.js` will never work because the
> > console evals things in a special way.
> 
> Is there no way we can debug code entered from the console, then?
> Say I paste a piece of code snippet in the console, is it possible to have
> it listed in the debugger tab somehow so we can break in it and debug it?
> This can be very much useful when debugging live websites and/or writing
> userscripts. Chrome already provides this via temporary pipes and snippets.
> Can we do something similar is FF? I guess this should probably go in
> another thread?
> 
> Thanks again for the quick resolution,
> <3, awal

We can't show every console eval in the debugger UI as they would be way too noisy. But maybe there is some sort of UX to do this.

We have the capability. For example, if you run some code in the console with a `debugger` statement, when it pauses the source will actually show up (right now there is a bug with this but the fix is already pending and should be on nightly soon). So it's just a matter of allowing you to get at the script somehow.

I'll take a look at what Chrome does; I know they don't show any eval sources that don't have sourceURL so I thought they were the same.
Do you have a link that explains what you mean by "temporary pipes" in Chrome?
Actually the way chrome does it is pretty neat. Here is what I mean by "temp pipes":

http://i.imgur.com/S3kQMkl.png

The console passes the script to the inspector backend wrapped in a `with` statement to execute it under the `__commandLineAPI` object (for extra console magic stuff like `$_` etc.) The sources (or debugger tab in FF) adds a temporary script tab containing the wrapped code. Stepping through it will work the same as stepping through any other script works. Once this temporary tab is closed, there is no way to get it back.

This leaks some of the inside console magic to the console user though; for instance, doing `inspect(inspect)` in chrome console will break in between the script responsible for properly executing the console code. I am not sure if this is a problem, but it works pretty well in most cases and no one ever notices actually.

What I suggest in FF is that in the sources sidebar listing the different resources grouped by origin, another origin be added for "Debugger Evaled Code", and scripts listed under this should provide a close button (when hovered/focused, preferably). These scripts can contain the code sent to the debugger. Is this a viable option to consider?
We just talked about this over IRC, and bug 1131756 already implements this behavior. If a `debugger` is encountered in a script eval'ed by the console, the script will show up in the sources pane and it will be paused, and you have the full debugger interface to step through the eval'ed script.

There is another bug about fetching the source for the eval'ed script from the console, and I'm just about to land that patch, so check nightly in a few days!

Thanks for the feedback :)
(In reply to James Long (:jlongster) from comment #11)
> There is another bug about fetching the source for the eval'ed script from
> the console, and I'm just about to land that patch, so check nightly in a
> few days!

Bug number?
bug 1166844 but it's private bug because Jordan felt weird about posting his root filesystem
Comment on attachment 8608787
1166852.patch

Review of attachment 8608787:
-----------------------------------------------------------------

Ok. This looks good to me.

::: toolkit/devtools/server/actors/script.js
@@ +5212,5 @@
>      // Eval sources have no urls, but they might have a `displayURL`
>      // created with the sourceURL pragma. If the introduction script
>      // is a non-eval script, generate an full absolute URL relative to it.
>  
> +    if(source.displayURL && source.introductionScript &&

Nit: space between if and condition. In other places as well.

@@ +5219,5 @@
> +      if(source.introductionScript.source.url === 'debugger eval code') {
> +        if(window) {
> +          // If this is a named eval script created from the console, make it
> +          // relative to the current page. window is only available
> +          // when we care about this.

This suggests that it is possible for this to be a named eval script while we don't care about this. What happens in that case?
There were some problems that the last try push exposed, let's see if this works: https://treeherder.mozilla.org/#/jobs?repo=try&revision=11f120b18982
(In reply to Eddy Bruel [:ejpbruel] from comment #14)
> 
> @@ +5219,5 @@
> > +      if(source.introductionScript.source.url === 'debugger eval code') {
> > +        if(window) {
> > +          // If this is a named eval script created from the console, make it
> > +          // relative to the current page. window is only available
> > +          // when we care about this.
> 
> This suggests that it is possible for this to be a named eval script while
> we don't care about this. What happens in that case?

It's possible for it to be a named eval script from the console but window isn't available when `getSourceURL` is called to create a unique key to track the script across reloads. The point is that eval scripts don't persist across reloads so we don't care what it generates as a "unique key". Might be a little hard to explain but the idea is that we only care about expanding this when we are generating the "display" url to give to the `SourceActor`.
I don't know why the try push is failing, it's almost like my changes had no effect (but it works locally). Going to do a try push on top of bug 1166844 as well in case this depends on that (don't think it does). https://treeherder.mozilla.org/#/jobs?repo=try&revision=b1a56edf7628
Actually I think I found the problem. There was a race condition in my test, let's see if this one works: https://treeherder.mozilla.org/#/jobs?repo=try&revision=f81b44044751
I don't know what's up with this patch on try, starting to do some try debugging... https://treeherder.mozilla.org/#/jobs?repo=try&revision=4a65eded4cb7
https://hg.mozilla.org/integration/fx-team/rev/6eb59a81c9e7
Confirmed to work in nightly. Thanks!
https://hg.mozilla.org/mozilla-central/rev/6eb59a81c9e7


Temp sourceURL not listing in sources pane



Bug 1166852 - handle named eval sources from the console correctly r=ejpbruel 