STR:

- Go to http://codepen.io/captainbrosset/full/lHpnK
- Open the canvas debugger
- Hit the record button

==> A snapshot appears, with the label "loading..." that never goes away
==> The record button remains in active state
==> Clicking on the snapshot produces errors in the console:

*************************
A coding exception was thrown and uncaught in a Task.

Full message: TypeError: screenshot is null
Full stack: CallsListView<.showScreenshot@chrome://browser/content/devtools/canvasdebugger.js:697:1
SnapshotsListView<._onSelect/<@chrome://browser/content/devtools/canvasdebugger.js:324:7
TaskImpl_run@resource://gre/modules/Task.jsm:282:1
resolve@resource://gre/modules/commonjs/sdk/core/promise.js:118:11
then@resource://gre/modules/commonjs/sdk/core/promise.js:43:43
resolve@resource://gre/modules/commonjs/sdk/core/promise.js:185:11
setTimeout_timer@resource://gre/modules/Timer.jsm:30:5

*************************

We should somehow find a way to handle these cases and let the user know there's no animation in the page.

STR:

- Go to http://codepen.io/captainbrosset/full/lHpnK
- Open the canvas debugger
- Hit the record button

==> A snapshot appears, with the label "loading..." that never goes away
==> The record button remains in active state
==> Clicking on the snapshot produces errors in the console:

*************************
A coding exception was thrown and uncaught in a Task.

Full message: TypeError: screenshot is null
Full stack: CallsListView<.showScreenshot@chrome://browser/content/devtools/canvasdebugger.js:697:1
SnapshotsListView<._onSelect/<@chrome://browser/content/devtools/canvasdebugger.js:324:7
TaskImpl_run@resource://gre/modules/Task.jsm:282:1
resolve@resource://gre/modules/commonjs/sdk/core/promise.js:118:11
then@resource://gre/modules/commonjs/sdk/core/promise.js:43:43
resolve@resource://gre/modules/commonjs/sdk/core/promise.js:185:11
setTimeout_timer@resource://gre/modules/Timer.jsm:30:5

*************************

We should somehow find a way to handle these cases and let the user know there's no animation in the page.
I think some things would help this:

* Change the message "Loading..." to something like "Waiting for a requestAnimationFrame call", which indicates that rAF is needed for this, as well as that the tools aren't "loading" anything.
* After 5-10s, stop the actor (need a new method on the actor), and display a message saying "no requestAnimationFrame loops found" or something.

This clarifies the restrictions, and explains how it works a bit.

Thoughts?
Created attachment 8566823
canvasdebuggerenhancement.gif

Here's a little demo of what I got cookin'.
Created attachment 8566889
985488-canvas-debugger-refactor.patch

Sorry that this is huge, Victor.
https://treeherder.mozilla.org/#/jobs?repo=try&revision=f3cb1f04b491
The text for this should change in lieu of bug 978948, supporting setTimeout.

Should we explicitly say "waiting for requestAnimationFrame/setTimeout cycle"? Or just not mention setTimeout at all? Two messages need to be considered, the "recording" state, as well as the "failed" state, which can contain more debugging information (Detected no setTimeout/rAF cycles, maybe make the timeout a pref and mention to increase that if needed?)
Comment on attachment 8566889
985488-canvas-debugger-refactor.patch

Review of attachment 8566889:
-----------------------------------------------------------------

NIIIICE

::: browser/devtools/canvasdebugger/callslist.js
@@ +1,1 @@
> +/**

use strict.

::: browser/devtools/canvasdebugger/snapshotslist.js
@@ +1,1 @@
> +/**

use strict?

@@ +94,5 @@
> +
> +  /**
> +   * Removes the last snapshot added, in the event no requestAnimationFrame loop was found.
> +   */
> +  removeSnapshot: function () {

s/removeSnapshot/removeLastSnapshot/

::: browser/devtools/canvasdebugger/test/doc_no-canvas.html
@@ +8,5 @@
> +    <title>Canvas inspector test page</title>
> +  </head>
> +
> +  <body>
> +  </body>

Would be cool to have a few tests where there's a setTimeout and/or rAF and no canvas as well. Ideally, this case will still show 'waiting for a canvas etc..'

::: browser/devtools/canvasdebugger/test/head.js
@@ +39,5 @@
>  waitForExplicitFinish();
>  
>  let gToolEnabled = Services.prefs.getBoolPref("devtools.canvasdebugger.enabled");
>  
> +gDevTools.testing = true;

I giggle every time I see this.
Created attachment 8567545
985488-canvas-debugger-refactor.patch
Made bug 1135403 to check the scenario of rAF/sT existing but no canvas/render calls
Created attachment 8568340
985488-canvas-debugger-refactor.patch

rebased
https://hg.mozilla.org/integration/fx-team/rev/acf0699ae844
https://hg.mozilla.org/mozilla-central/rev/acf0699ae844


The Canvas debugger should handle cases where there are no animation loop



Bug 985488 - Allow canvas debugger to time out and stop recording frames. Canvas debugger 'wait' style now matches other media styles. Update labels in canvas debugger to explicitly state that it's waiting for rAF cycles, rather than appearing as if something went wrong. r=vporof 