iconFade-close-DPI1.half is close to m-c while icon-close-DPI1.half is much worse. This means that there is a lot of extra work other than the CSS transition that is making the close frame interval much worse on UX.

[20:24:40] <avih>	 ux has a definite win with everything layout/gfx related compared to mc
[20:25:05] <avih>	 but for some reason, when closing a tab, it make all the values suck
[20:27:15] <MattN>	 good question about tab close/fade. I'll have to look into that more
[20:27:22] <MattN>	 I don't know of changes we made to that
[20:27:37] <MattN>	 other than onLocationChange
[20:27:40] <avih>	 look at this
[20:27:41] <avih>	 icon-close-DPI1.half     16.72     25.25
[20:28:00] <avih>	 mc is 16.7ms, ux is 25ms. that's on the second half of the animation
[20:28:16] <avih>	 and this is the same, but with fade only:
[20:28:16] <avih>	 iconFade-close-DPI1.half     17.75     15.36
[20:28:28] <MattN>	 because when a tab closes, the bookmark button, identity block, URL bar, etc, have to update to reflect the change in tabs
[20:28:43] <MattN>	 wow
[20:28:49] <avih>	 ux loses so much by closing the tab over the theoretical animation performance, which, in itself, is better than mc

iconFade-close-DPI1.half is close to m-c while icon-close-DPI1.half is much worse. This means that there is a lot of extra work other than the CSS transition that is making the close frame interval much worse on UX.

[20:24:40] <avih>	 ux has a definite win with everything layout/gfx related compared to mc
[20:25:05] <avih>	 but for some reason, when closing a tab, it make all the values suck
[20:27:15] <MattN>	 good question about tab close/fade. I'll have to look into that more
[20:27:22] <MattN>	 I don't know of changes we made to that
[20:27:37] <MattN>	 other than onLocationChange
[20:27:40] <avih>	 look at this
[20:27:41] <avih>	 icon-close-DPI1.half     16.72     25.25
[20:28:00] <avih>	 mc is 16.7ms, ux is 25ms. that's on the second half of the animation
[20:28:16] <avih>	 and this is the same, but with fade only:
[20:28:16] <avih>	 iconFade-close-DPI1.half     17.75     15.36
[20:28:28] <MattN>	 because when a tab closes, the bookmark button, identity block, URL bar, etc, have to update to reflect the change in tabs
[20:28:43] <MattN>	 wow
[20:28:49] <avih>	 ux loses so much by closing the tab over the theoretical animation performance, which, in itself, is better than mc
Along with the areas MattN pointed out in that chat log, this differential profile might be useful:

http://tests.themasta.com/cleopatra/?report=bbb56b850ac68270ebf4635b1dda20d997a004c5#

It's Windows 7, but I tweaked my patch by removing the box-shadow, to simulate XP as best as possible.

Anyhow, as I said - it might be useful for us to pick through that profile along with the areas that Matt highlighted.
(In reply to Mike Conley (:mconley) from comment #1)
> Along with the areas MattN pointed out in that chat log, this differential
> profile might be useful:
> 
> http://tests.themasta.com/cleopatra/
> ?report=bbb56b850ac68270ebf4635b1dda20d997a004c5#
> 
> It's Windows 7, but I tweaked my patch by removing the box-shadow, to
> simulate XP as best as possible.

Are the negative numbers UX or m-c?


> Anyhow, as I said - it might be useful for us to pick through that profile
> along with the areas that Matt highlighted.

At the bottom, in the negatives, We're spending a lot of time rendering a clipped border image. Which I could imagine is a gradient clipped by the SVG path...
(In reply to :Gijs Kruitbosch from comment #2)
> (In reply to Mike Conley (:mconley) from comment #1)
> > Along with the areas MattN pointed out in that chat log, this differential
> > profile might be useful:
> > 
> > http://tests.themasta.com/cleopatra/
> > ?report=bbb56b850ac68270ebf4635b1dda20d997a004c5#
> > 
> > It's Windows 7, but I tweaked my patch by removing the box-shadow, to
> > simulate XP as best as possible.
> 
> Are the negative numbers UX or m-c?
> 
> 
> > Anyhow, as I said - it might be useful for us to pick through that profile
> > along with the areas that Matt highlighted.
> 
> At the bottom, in the negatives, We're spending a lot of time rendering a
> clipped border image. Which I could imagine is a gradient clipped by the SVG
> path...

Hm. So I followed the directions at https://github.com/mstange/analyze-tryserver-profiles/, and had the "before" changeset be from m-c (https://tbpl.mozilla.org/?tree=Try&rev=6df772d9ca05), and the "after" changeset be from UX (https://tbpl.mozilla.org/?tree=Try&rev=44de8441995a) ...so you'd think that the negative values would be what's *missing* from the before changeset, no?

At least, that's how I interpreted it.
I also just tried recreating the differential profile, making sure that I did in fact use those values I mentioned above from the --before and --after arguments, and the profile it spat out was identical to the first I created.
What action started and stopped the profile?  Is it reliable that it covers the entirety of the test you're interested in and nothing else?

Marcus, is it a correct interpretation of this that the *before* changeset spent a lot of time in border drawing that's now not present?  (This seems backwards, since this is a bug about a performance problem, yet the differential profile seems to show that the new build is faster.)

If it is in fact backwards from what we all seem to expect, it seems like the regression is related to border drawing.
Note that this bug is not about slowness of tab-close on ux compared to m-c, but rather specifically that tab-close on ux is slower than a pure fade-out animation of that same tab on ux, while on m-c the tab-close performance is much closer to the fade-out performance.

This points at things which happen when closing a tab on ux, and which are not happening with pure fade-out (and probably also not happening on m-c), possibly some of which are mentioned on comment 0:
> [20:28:28] <MattN>	 because when a tab closes, the bookmark button, identity block, URL bar, etc, have to update to reflect the change in tabs.

Here is how frames interval average over the last half (115ms) of the animation look like on my system (d2d/d3d blacklisted=off by default) in UX, all these take ~230ms to complete (DPI is always 1):

default (d3d/d2d off):
icon-close-DPI1.half            Average (5): 7.81 stddev: 0.26
iconFade-close-DPIcurrent.half  Average (5): 7.03 stddev: 0.42

And with D2D forced:
d2d:forced -> d3d10 on
icon-close-DPI1.half            Average (5): 25.17 stddev: 2.24
iconFade-close-DPIcurrent.half  Average (5): 17.61 stddev: 2.47


And here are somewhat representative lists of intervals for these cases:
D2D:off, D3D: off:
icon-close-DPI1.raw:           60.2   14.5   25.2   12.1   11.2   11.2   11.0   11.4   11.2   7.1   11.3   5.3   5.3   6.6   5.4   5.3   8.6   4.9   5.1
iconFade-close-DPIcurrent.raw: 8.2   8.3   9.3   7.9   8.2   7.8   8.1   7.7   8.3   7.6   8.1   7.4   7.9   7.3   7.6   7.3   7.2   9.3   7.1   7.6   7.1   7.9   8.1   7.9   6.7   6.7   6.7   6.3   5.5   6.1   4.9

D2D:on, D3D:10:
icon-close-DPI1.raw:           63.4   29.0   35.5   29.4   33.3   20.0   17.4   14.3
iconFade-close-DPIcurrent.raw: 14.8   16.8   16.6   16.1   16.3   16.2   16.5   15.5   16.5   16.9   19.4   17.9   15.7   11.2   10.7


If we ignore the performance difference with/out HW acceleration, we can see that fade-out and tab-close converge to similar frame intervals at the end of the animation, but in tab-close it's only the very last intervals which are quick - most of the intervals are slower, which means that the .half values also pick up frame intervals from before the animation stabilizes. This effect appears to be magnified when D2D is used.

So it has to be these updates on tab close (bookmarks, etc) which are the reason for the difference between tab-close and fade out, and this effect is magnified by the fact that D2D makes everything slower with this animation on my low-end AMD system (and on Matt's atom as well).
Looks like gfxContext::Fill and gfxUtils::CreateSamplingRestrictedDrawable (a troublesome function in general) are specifically what's killing us. Will investigate and see if I can learn anything more.
(In reply to David Baron [:dbaron] (needinfo? me) from comment #5)
> What action started and stopped the profile?  Is it reliable that it covers
> the entirety of the test you're interested in and nothing else?
> 

I believe the profiler starts running as soon as Firefox starts, but the get_profiles.py script[1] filters out things that aren't within the MEASUREMENT_START and MEASUREMENT_STOP Profile markers.

The profiled builds run a version of talos that puts the MEASUREMENT_START and MEASUREMENT_STOP markers right at the points where TART starts and stops recording frame intervals.

[1]: https://github.com/mstange/analyze-tryserver-profiles/
[2]: http://hg.mozilla.org/users/mconley_mozilla.com/talos-sps-profiling/rev/66426fe47e4d
Did your investigations turn up anything?
I have an instrumented build baking on try here: https://tbpl.mozilla.org/?tree=Try&rev=d93a93b10d27

Using mstange's talos profiling tools, I'll be able to post a profile from our XP talos boxes shortly.
Ok, here's the profile:

http://tests.themasta.com/cleopatra/?report=3dc2ad9916230c7fac2c0df1f6c9665c333c076e
I think we solved the mystery here with bug 916946. Closing this bug.


Figure out why tab close is slower on UX outside of the CSS transition

