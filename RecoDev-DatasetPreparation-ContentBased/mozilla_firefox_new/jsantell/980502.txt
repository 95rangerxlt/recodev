


Try: https://tbpl.mozilla.org/?tree=Try&rev=e4953e5b6102
Created attachment 8387230
980502-audio-actors.patch
Comment on attachment 8387230
980502-audio-actors.patch

Review of attachment 8387230:
-----------------------------------------------------------------

r+ with comments addressed.

::: browser/devtools/webaudioeditor/test/browser_audionode-actor-get-set-param.js
@@ +6,5 @@
> + */
> +
> +function spawnTest () {
> +  let [target, debuggee, front] = yield initBackend(SIMPLE_CONTEXT_URL);
> +  let [_, [destNode, oscNode, gainNode]] = yield Promise.all([

This is metal.

::: browser/devtools/webaudioeditor/test/browser_webaudio-actor-simple.js
@@ +6,5 @@
> + */
> +
> +function spawnTest () {
> +  let [target, debuggee, front] = yield initBackend(SIMPLE_CONTEXT_URL);
> +  let [_, __, [destNode, oscNode, gainNode], [connect1, connect2]] = yield Promise.all([

This is metaler.

"Promise Destructuring" -- band name

::: browser/devtools/webaudioeditor/test/doc_complex-context.html
@@ +16,5 @@
> +/*
> +         ↱   proc
> +  osc    →   gain   →
> +  osc    →   gain   →  destination
> +  buffer →↳  filter →

Such utf. Many arrow. Very oscillating. Wow.

::: browser/devtools/webaudioeditor/test/head.js
@@ +38,5 @@
> +  Services.prefs.setBoolPref("devtools.webaudioeditor.enabled", gToolEnabled);
> +  Cu.forceGC();
> +});
> +
> +function addTab(aUrl, aWindow) {

Whenever I see all of this code duplicated I cry a little.

@@ +81,5 @@
> +  ok(false, "Got an error: " + aError.message + "\n" + aError.stack);
> +  finish();
> +}
> +
> +function createCanvas() {

This is probably not needed here.

@@ +111,5 @@
> +// Hack around `once`, as that only resolves to a single (first) argument
> +// and discards the rest. `onceSpread` is similar, except resolves to an
> +// array of all of the arguments in the handler. These should be consolidated
> +// into the same function, but many tests will need to be changed.
> +function onceSpread(aTarget, aEvent) {

This isn't used anywhere afaict.

@@ +117,5 @@
> +  aTarget.once(aEvent, (...args) => deferred.resolve(args));
> +  return deferred.promise;
> +}
> +
> +function observe(aNotificationName, aOwnsWeak = false) {

Neither this?

@@ +130,5 @@
> +
> +  return deferred.promise;
> +}
> +
> +function navigateInHistory(aTarget, aDirection, aWaitForTargetEvent = "navigate") {

Ditto.

@@ +135,5 @@
> +  executeSoon(() => content.history[aDirection]());
> +  return once(aTarget, aWaitForTargetEvent);
> +}
> +
> +function navigate(aTarget, aUrl, aWaitForTargetEvent = "navigate") {

x2

@@ +140,5 @@
> +  executeSoon(() => aTarget.activeTab.navigateTo(aUrl));
> +  return once(aTarget, aWaitForTargetEvent);
> +}
> +
> +function reload(aTarget, aWaitForTargetEvent = "navigate") {

x3

@@ +169,5 @@
> +    return [target, debuggee, front];
> +  });
> +}
> +
> +function initWebAudioEditor(aUrl) {

This should be in the frontend patch shouldn't it?

@@ +186,5 @@
> +    return [target, debuggee, panel];
> +  });
> +}
> +
> +function teardown(aPanel) {

This too.

@@ +220,5 @@
> +}
> +
> +function get (front, eventName) { return getN(front, eventName, 1); }
> +function get2 (front, eventName) { return getN(front, eventName, 2); }
> +function get3 (front, eventName) { return getN(front, eventName, 3); }

This almost starts looking like GLSL.
Well, actually it doesn't, but I almost read that as vec2, vec3 and got excited for a second.

@@ +226,5 @@
> +function get2Spread (front, eventName) { return getN(front, eventName, 2, true); }
> +function get3Spread (front, eventName) { return getN(front, eventName, 3, true); }
> +function getNSpread (front, eventName, count) { return getN(front, eventName, count, true); }
> +
> +function checkVariableView (view, index, hash) {

Frontend!

If you need to split patches by hunk instead of files, I recommend the crecord extension.

@@ +238,5 @@
> +      "Correct property value of " + hash[variable] + " for " + variable);
> +  });
> +}
> +
> +function modifyVariableView (win, view, index, prop, value) {

Frontend.

@@ +244,5 @@
> +  let scope = view.getScopeAtIndex(index);
> +  let aVar = scope.get(prop);
> +  scope.expand();
> +
> +  executeSoon(() => {

Please document the usage and necessity of executeSoon.

@@ +269,5 @@
> +
> +  return deferred.promise;
> +}
> +
> +function clearText (aElement) {

Back... no, frontend!

@@ +275,5 @@
> +  aElement.focus();
> +  aElement.value = "";
> +}
> +
> +function setText (aElement, aText) {

Backend.

@@ +281,5 @@
> +  info("Setting text: " + aText);
> +  aElement.value = aText;
> +}
> +
> +function findGraphEdge (win, source, target) {

I lied. It's frontend.

@@ +286,5 @@
> +  let selector = ".edgePaths .edgePath[data-source='" + source + "'][data-target='" + target + "']";
> +  return win.document.querySelector(selector);
> +}
> +
> +function findGraphNode (win, node) {

You get the idea :)

::: toolkit/devtools/server/actors/audionode.js
@@ +3,5 @@
> + * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
> +"use strict";
> +
> +const {Cc, Ci, Cu, Cr} = require("chrome");
> +Cu.import("resource://gre/modules/Services.jsm");

We import services like this now:
> const Services = require("Services");

@@ +11,5 @@
> +/**
> + * An Audio Node actor allowing communication to a specific audio node in the
> + * Audio Context graph.
> + */
> +let AudioNodeActor = exports.AudioNodeActor = protocol.ActorClass({

Does this necessarily have to be in a separate file? Is it shared with anything else?

@@ +26,5 @@
> +  initialize: function (conn, node) {
> +    protocol.Actor.prototype.initialize.call(this, conn);
> +    this.node = XPCNativeWrapper.unwrap(node);
> +    try {
> +      this.type = this.node.toString().match(/\[object (.*)\]$/)[1];

Is it possible to use node.constructor.name instead?

@@ +39,5 @@
> +   */
> +  getType: method(function () {
> +    return this.type;
> +  }, {
> +    response: { text: RetVal("string") }

Nit: I'd use a "type" key for describing the value.

@@ +45,5 @@
> +
> +  /**
> +   * Returns a boolean indicating if the node is a source node,
> +   * like BufferSourceNode, MediaElementAudioSourceNode, OscillatorNode, etc.
> +   * Examples: "OscillatorNode", "MediaElementAudioSourceNode"

The "Examples:..." line is gratuitous.

@@ +50,5 @@
> +   */
> +  isSource: method(function () {
> +    return !!~this.type.indexOf("Source") || this.type === "OscillatorNode";
> +  }, {
> +    response: { text: RetVal("boolean") }

Nit: I'd use a "source" key for describing the value, since this isn't text.

@@ +83,5 @@
> +      param: Arg(0, "string"),
> +      value: Arg(1, "string"),
> +      dataType: Arg(2, "string")
> +    },
> +    response: { text: RetVal("string") }

Nit: a string response feels weird here. However, I'm happy with it if you document that it describes an eventual error that can happen (in which case, you should use an "error" key to describe the returned value).

@@ +85,5 @@
> +      dataType: Arg(2, "string")
> +    },
> +    response: { text: RetVal("string") }
> +  }),
> +  

Nit: trailing whitespace.

@@ +102,5 @@
> +  }, {
> +    request: {
> +      param: Arg(0, "string")
> +    },
> +    response: { text: RetVal("string") }

Wouldn't it be better to use an object actor + grip to describe the param? Or, if you're sure this is always going to be a primitive, maybe just a grip-like object? (like { type: "number", value: 42 } and { type: "undefined" }).

@@ +112,5 @@
> + *
> + * @param String value
> + *        The string to cast.
> + * @param String type
> + *        The datatype to cast `value` to.

I think xpcshell tests will complain about this function not always returning a value.

::: toolkit/devtools/server/actors/webaudio.js
@@ +4,5 @@
> +"use strict";
> +
> +const {Cc, Ci, Cu, Cr} = require("chrome");
> +
> +Cu.import("resource://gre/modules/Services.jsm");

const Services = require("Services");

@@ +12,5 @@
> +
> +const { on, once, off, emit } = events;
> +const { method, Arg, Option, RetVal } = protocol;
> +const { AudioNodeActor } = require("devtools/server/actors/audionode");
> +const tm = Cc["@mozilla.org/thread-manager;1"].getService(Ci.nsIThreadManager);

You can more easily get the thread manager via Services.tm.

@@ +68,5 @@
> +
> +    // Weak map mapping audio nodes to their corresponding actors
> +    this._nodeActors = new Map();
> +
> +    this._contentObserver = new ContentObserver(this.tabActor);

You should use the content observer utility here (that will land along with bug 917226). It's in a shared file now.

@@ +160,5 @@
> +
> +  /**
> +   * Invoked whenever the current tab actor's inner window is destroyed.
> +   */
> +  _onGlobalDestroyed: function(id) {

Do you need to do any cleanup here? If not, remove this function altogether maybe?

@@ +164,5 @@
> +  _onGlobalDestroyed: function(id) {
> +  },
> +
> +  /**
> +   * Helper for constructing an AudioNodeActor, assigning to 

Nit: trailing whitespace.

@@ +170,5 @@
> +   * an `actorID`.
> +   */
> +  _constructAudioNode: function (node) {
> +    let actor = new AudioNodeActor(this.conn, node);
> +    this.manage(actor);

Badass.

@@ +193,5 @@
> +  /**
> +   * Called on first audio node creation, signifying audio context usage
> +   */
> +  _onStartContext: function () {
> +    async(() => events.emit(this, "start-context"));

Can you add a description as to why this needs to wait for a tick?

@@ +202,5 @@
> +   */
> +  _onConnectNode: function (source, dest) {
> +    let sourceActor = this._actorFor(source);
> +    let destActor = this._actorFor(dest);
> +    async(() => events.emit(this, "connect-node", {

Ditto here (and everywhere else).

@@ +212,5 @@
> +  /**
> +   * Called when an audio node is connected to an audio param.
> +   */
> +  _onConnectParam: function (source, dest) {
> +    // TODO

What exactly needs to happen here?
File a followup bug for this if necessary, XXX describe it and link to the bug number.

@@ +220,5 @@
> +   * Called when an audio node is disconnected.
> +   */
> +  _onDisconnectNode: function (node) {
> +    let actor = this._actorFor(node);
> +    async(() => events.emit(this, "disconnect-node", actor));

Maybe we should just ship https://github.com/caolan/async. Then, after we switch to the new promises, and then rewrite everything in Task, we'll going to rewrite everything yet again in async.js. Return to the basics man, think minimal, #brojs. I hope Benvie doesn't see this.

@@ +261,5 @@
> + * event sent immediately after a web content document window has been set up,
> + * but before any script code has been executed. This will allow us to
> + * instrument the HTMLCanvasElement with the appropriate inspection methods.
> + */
> +function ContentObserver(tabActor) {

The content-observer.js which lands in bug 917226 has this.

@@ +310,5 @@
> +
> +/**
> + * Instruments an AudioContext with inspector methods.
> + */
> +let WebAudioInstrumenter = {

Can you use the CallWatcherActor that lands with bug 917226? See the patch in there on how to use it. Let's try to DRY up everything as much as possible, if it makes sense. I personally think it makes a lot of sense here.

One caveat is that you can't specify which methods to overwrite in a given global; everything is instrumented. But the CallWatcherActor can be easily instrumented to be more precise.

@@ +361,5 @@
> +    let firstNodeCreated = false;
> +
> +    // Patch all of AudioContext's methods that create an audio node
> +    // and hook into the observer
> +    NODE_CREATION_METHODS.forEach(method => {

Nit: is a forEach really necessary here? Is there something I'm missing and for..of doesn't do the trick? Or is it just a style preference (in which case, I don't really care).

@@ +413,5 @@
> +};
> +
> +// Utility functions.
> +
> +function async (fn) {

After bug 917226, DevToolsUtils will export an waitForTick function that does the same thing and is shared. Maybe make your patch depend on that? We'll probably end up landing these together <3

@@ +420,5 @@
> +    run: fn
> +  }, Ci.nsIThread.DISPATCH_NORMAL);
> +}
> +
> +function unwrap (obj) {

Nit: I believe this function is gratuitous, but meh.
(In reply to Jordan Santell [:jsantell] [@jsantell] from comment #1)
> Try: https://tbpl.mozilla.org/?tree=Try&rev=e4953e5b6102

You should run all xpcshell tests as well. Even though there are no tests in this patch, the mere existence of new code can make them fail (think js strict warnings).
New try: https://tbpl.mozilla.org/?tree=Try&rev=aae76938b16c
Created attachment 8395078
980502-audio-actors.patch

Made all the changes, refactored a bit, tore out parts that will be in the front end -- ni? you if you want to give it one more look, mainly in the webaudio/audionode actors file, getting rid of the redundant functions, making TODO notes
https://hg.mozilla.org/integration/fx-team/rev/81f230994acd
Comment on attachment 8395078
980502-audio-actors.patch

Review of attachment 8395078:
-----------------------------------------------------------------

::: toolkit/devtools/server/actors/audionode.js
@@ +8,5 @@
> +const { method, Arg, Option, RetVal } = protocol;
> +
> +// Add a grip type for our `getParam` method, as the type can be
> +// unknown.
> +protocol.types.addDictType("audio-node-param-grip", {

I don't see you using this "audio-node-param-grip" as a RetVal anywhere. In which case, what's the purpose of having it here?

@@ +17,5 @@
> +/**
> + * An Audio Node actor allowing communication to a specific audio node in the
> + * Audio Context graph.
> + */
> +let AudioNodeActor = exports.AudioNodeActor = protocol.ActorClass({

You didn't answer my question from the previous review:

"Does this necessarily have to be in a separate file? Is it shared with anything else?"

::: toolkit/devtools/server/actors/webaudio.js
@@ +260,5 @@
> + * Handles adding an observer for the creation of content document globals,
> + * event sent immediately after a web content document window has been set up,
> + * but before any script code has been executed. This will allow us to
> + * instrument the HTMLCanvasElement with the appropriate inspection methods.
> + * TODO use ContentObserver from bug 917226 once landed, bug 986704

Can you please make all of these followups block this bug?
https://hg.mozilla.org/mozilla-central/rev/81f230994acd
hi, sorry had to back this out in https://tbpl.mozilla.org/?rev=9afe2a1145bd since one of this 3 pushes seems to have caused Bug 986173
Comment 8.
Created attachment 8397498
980502-audio-actors.patch

Fixed those comments, Victor.
Created attachment 8399765
980502-audio-actors.patch

Since this still hasn't landed, adding the refactoring for bug 986704 involving content observer/call-watcher here.

Only one small change in call-watcher, being the functionCall.details property `return` being renamed to `result`.
Comment on attachment 8399765
980502-audio-actors.patch

Review of attachment 8399765:
-----------------------------------------------------------------

I love what I see.

::: browser/devtools/webaudioeditor/test/browser_webaudio-actor-simple.js
@@ +6,5 @@
> + */
> +
> +function spawnTest () {
> +  let [target, debuggee, front] = yield initBackend(SIMPLE_CONTEXT_URL);
> +  let [_, __, [destNode, oscNode, gainNode], [connect1, connect2]] = yield Promise.all([

Here's something neat. I yolo'd and tried this out:

let [,, [destNode, oscNode, gainNode], [connect1, connect2]] = ...

IT WORKS. Might want to use that instead of _, __ here (and in other tests as well).

::: toolkit/devtools/server/actors/webaudio.js
@@ +409,5 @@
> + *        The string to cast.
> + * @param String type
> + *        The datatype to cast `value` to.
> + */
> +function cast (value, type) {

Just a thought: wouldn't it be easier to just use `uneval(foo)` instead of this?
Created attachment 8400805
980502-audio-actors.patch

Removed type-casting, resubmitting for checkin
https://hg.mozilla.org/integration/fx-team/rev/269d49f9f4bb
https://hg.mozilla.org/mozilla-central/rev/269d49f9f4bb


Implement WebAudio actor and AudioNode actor



Bug 980502 - Implement WebAudio actor and AudioNode actor. r=vp 

Backed out changeset 81f230994acd (bug 980502) for hopefully fixing gi tests 

Bug 980502 - Implement web audio actors and audio node actors. r=vp 