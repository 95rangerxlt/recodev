bookmark dataloss / crash when going backwards from places-bookmarks-schema-5 to places-no-bookmarks-schema-4.

or, when going from tomorrow's build (with the fix for bug #371827) back to today's nightly.

note, due to bug #380801, going back to a further trunk build (before the fix for bug #380801) can cause other problems.

investigating...

bookmark dataloss / crash when going backwards from places-bookmarks-schema-5 to places-no-bookmarks-schema-4.

or, when going from tomorrow's build (with the fix for bug #371827) back to today's nightly.

note, due to bug #380801, going back to a further trunk build (before the fix for bug #380801) can cause other problems.

investigating...
actually, you can see this even without the fix for bug #371827.

steps to reproduce:

1)  create a profile with a nightly, trunk, no places bookmarks build, exit
2)  start up with a trunk, places bookmark build, exit
3)  run your nightly, trunk, no places bookmarks build.  we appear to lose all the bookmarks and for me (on mac and windows) the browser stops responding.
Created attachment 265225
Remove separator IDs
the problem is our existing bookmarks import code doesn't handle separators with attributes other than name.

so <HR> and <HR NAME="x"> work, but something like <HR ID="12"> will cause our existing code to go into an infinite loop.

See http://lxr.mozilla.org/seamonkey/source/browser/components/bookmarks/src/nsBookmarksService.cpp#1591

We recently started exporting ids on separators.  (see bug #376253)

We have to stop exporting ids on separators, or else our bookmarks.html will cause previous versions of firefox (fx 2, and the trunk before we turn on places bookmarks) to hang.

additionally, it would be worth fixing fx 2 to gracefully handle separators with ids.  I'll log another bug on that.


>	brwsrcmp.dll!BookmarkParser::ParseBookmarkSeparator(const nsString_external & aLine={...}, const nsCOMPtr<nsIRDFContainer> & aContainer={...})  Line 1591 + 0x2d bytes	C++
 	brwsrcmp.dll!BookmarkParser::ProcessLine(nsIRDFContainer * container=0x04cdebb8, nsIRDFResource * nodeType=0x00f47be8, nsCOMPtr<nsIRDFResource> & bookmarkNode={...}, const nsString_external & line={...}, nsString_external & description={...}, int & inDescription=0, int & isActiveFlag=1)  Line 948 + 0x1c bytes	C++
 	brwsrcmp.dll!BookmarkParser::Parse(nsIRDFResource * aContainer=0x00cb0268, nsIRDFResource * aNodeType=0x00f47be8)  Line 1027 + 0x2c bytes	C++
 	brwsrcmp.dll!nsBookmarksService::LoadBookmarks()  Line 4775	C++
 	brwsrcmp.dll!nsBookmarksService::ReadBookmarks(int * didLoadBookmarks=0x0012e870)  Line 4573	C++
 	xpcom_core.dll!NS_InvokeByIndex_P(nsISupports * that=0x00000003, unsigned int methodIndex=1, unsigned int paramCount=1239152, nsXPTCVariant * params=0x00d0e300)  Line 102	C++
 	xpc3250.dll!XPCWrappedNative::CallMethod(XPCCallContext & ccx={...}, XPCWrappedNative::CallMode mode=3)  Line 2245 + 0x1e bytes	C++
 	xpc3250.dll!XPCWrappedNative::CallMethod(XPCCallContext & ccx={...}, XPCWrappedNative::CallMode mode=CALL_METHOD)  Line 2245 + 0x1e bytes	C++
 	xpc3250.dll!XPC_WN_CallMethod(JSContext * cx=0x04593db8, JSObject * obj=0x04ccbb60, unsigned int argc=0, long * argv=0x04cccca4, long * vp=0x0012eb18)  Line 1467 + 0xe bytes	C++
 	js3250.dll!js_Invoke(JSContext * cx=0x04593db8, unsigned int argc=0, unsigned int flags=0)  Line 1332 + 0x20 bytes	C
 	js3250.dll!js_Interpret(JSContext * cx=0x04593db8, unsigned char * pc=0x046f20cf, long * result=0x0012f1d0)  Line 4025 + 0xf bytes	C
 	js3250.dll!js_Invoke(JSContext * cx=0x04593db8, unsigned int argc=1, unsigned int flags=2)  Line 1351 + 0x13 bytes	C
 	js3250.dll!js_InternalInvoke(JSContext * cx=0x04593db8, JSObject * obj=0x03a9d4e0, long fval=64509024, unsigned int flags=0, unsigned int argc=1, long * argv=0x04cb8eb0, long * rval=0x0012f34c)  Line 1426 + 0x14 bytes	C
 	js3250.dll!JS_CallFunctionValue(JSContext * cx=0x04593db8, JSObject * obj=0x03a9d4e0, long fval=64509024, unsigned int argc=1, long * argv=0x04cb8eb0, long * rval=0x0012f34c)  Line 4855 + 0x1f bytes	C
 	gklayout.dll!nsJSContext::CallEventHandler(nsISupports * aTarget=0x045aa270, void * aScope=0x03a9d4e0, void * aHandler=0x03d85460, nsIArray * aargv=0x04cc95e4, nsIVariant * * arv=0x0012f408)  Line 1794 + 0x24 bytes	C++
 	gklayout.dll!nsGlobalWindow::RunTimeout(nsTimeout * aTimeout=0x04c8e038)  Line 6841 + 0xab bytes	C++
 	gklayout.dll!nsGlobalWindow::TimerCallback(nsITimer * aTimer=0x04c8e0a8, void * aClosure=0x04c8e038)  Line 7172	C++
 	xpcom_core.dll!nsTimerImpl::Fire()  Line 383 + 0x13 bytes	C++
 	xpcom_core.dll!nsTimerEvent::Run()  Line 458	C++
 	xpcom_core.dll!nsThread::ProcessNextEvent(int mayWait=0, int * result=0x0012f55c)  Line 483	C++
 	xpcom_core.dll!NS_ProcessPendingEvents_P(nsIThread * thread=0x00b8d528, unsigned int timeout=100)  Line 180 + 0x14 bytes	C++
 	gkwidget.dll!nsWindow::DispatchPendingEvents()  Line 4275	C++
 	gkwidget.dll!nsWindow::ProcessMessage(unsigned int msg=512, unsigned int wParam=0, long lParam=25165971, long * aRetValue=0x0012f93c)  Line 4681	C++
 	gkwidget.dll!nsWindow::WindowProc(HWND__ * hWnd=0x00250340, unsigned int msg=512, unsigned int wParam=0, long lParam=25165971)  Line 1325 + 0x1d bytes	C++
 	user32.dll!7e418734() 	
 	[Frames below may be incorrect and/or missing, no symbols loaded for user32.dll]	
 	user32.dll!7e418816() 	
 	user32.dll!7e4189cd() 	
 	user32.dll!7e419402() 	
 	user32.dll!7e418a10() 	
 	gkwidget.dll!nsAppShell::ProcessNextNativeEvent(int mayWait=0)  Line 149	C++
 	gkwidget.dll!nsBaseAppShell::DoProcessNextNativeEvent(int mayWait=0)  Line 137 + 0x11 bytes	C++
 	gkwidget.dll!nsBaseAppShell::OnProcessNextEvent(nsIThreadInternal * thr=0x00b8d528, int mayWait=1, unsigned int recursionDepth=0)  Line 238	C++
 	xpcom_core.dll!nsThread::ProcessNextEvent(int mayWait=1, int * result=0x0012fb28)  Line 472	C++
 	xpcom_core.dll!NS_ProcessNextEvent_P(nsIThread * thread=0x00b8d528, int mayWait=1)  Line 227 + 0x16 bytes	C++
 	gkwidget.dll!nsBaseAppShell::Run()  Line 154 + 0xc bytes	C++
 	tkitcmps.dll!nsAppStartup::Run()  Line 171 + 0x1c bytes	C++
 	xul.dll!XRE_main(int argc=1, char * * argv=0x00b89860, const nsXREAppData * aAppData=0x004036e0)  Line 2824 + 0x25 bytes	C++
 	firefox.exe!main(int argc=1, char * * argv=0x00b89860)  Line 65 + 0x13 bytes	C++
 	firefox.exe!__tmainCRTStartup()  Line 586 + 0x19 bytes	C
 	firefox.exe!mainCRTStartup()  Line 403	C
 	kernel32.dll!7c816fd7() 	

Created attachment 265226
Remove separator IDs

Same as last patch, but adds a comment to WriteSeparator explaining why we don't write the ID.
Comment on attachment 265226
Remove separator IDs

r=sspitzer, assuming that we pass the rest of the tests in test_bookmarks_html.js

thanks for the quick fix, dan!
Thank you for doing all the legwork in finding out the problem :-)

Checking in browser/components/places/src/nsPlacesImportExportService.cpp;
/cvsroot/mozilla/browser/components/places/src/nsPlacesImportExportService.cpp,v  <--  nsPlacesImportExportService.cpp
new revision: 1.13; previous revision: 1.12
done
Checking in browser/components/places/tests/unit/test_bookmarks_html.js;
/cvsroot/mozilla/browser/components/places/tests/unit/test_bookmarks_html.js,v  <--  test_bookmarks_html.js
new revision: 1.7; previous revision: 1.6
done

Wait, wouldn't this cause duplicated separators when importing the same bookmarks.html twice on top of a places build?
And if so, could we do some little hack like <hr>ID</hr> on export? This wouldn't look so great when opening the html file in the browser, I wouldn't consider that a priority though.
(In reply to comment #7)
> Wait, wouldn't this cause duplicated separators when importing the same
> bookmarks.html twice on top of a places build?
> 

Yes. However, in non-Places bookmarks *all* items are duplicated. We need to decide whether we want parity wrt to that functionality, or if we want to try to support flawless merges.
(In reply to comment #7)
> Wait, wouldn't this cause duplicated separators when importing the same
> bookmarks.html twice on top of a places build?

Yeah, it makes me sad :-(

We could investigate workarounds like you described.  For now, though, I think it is acceptable to duplicate the separators, until we decide what behavior we really want.

Unfortunately the duplication breaks one of our tests, so it got commented out until then.
> Yes. However, in non-Places bookmarks *all* items are duplicated. We need to
> decide whether we want parity wrt to that functionality, or if we want to try
> to support flawless merges.

see bug #381225 for that a discussion on that issue.
bookmarks have historically been compatible w/ html. <hr>foo</hr> is not compatible. please don't.
Bug 451915 - move Firefox/Places bugs to Firefox/Bookmarks and History. Remove all bugspam from this move by filtering for the string "places-to-b-and-h".

In Thunderbird 3.0b, you do that as follows:
Tools | Message Filters
Make sure the correct account is selected. Click "New"
Conditions: Body   contains   places-to-b-and-h
Change the action to "Delete Message".
Select "Manually Run" from the dropdown at the top.
Click OK.

Select the filter in the list, make sure "Inbox" is selected at the bottom, and click "Run Now". This should delete all the bugspam. You can then delete the filter.

Gerv


bookmark dataloss / crash when going back from places-bookmarks to places-no-bookmarks

regression

Bug 381129: Do not write IDs for separators in exported bookmarks.html files. r=sspitzer 