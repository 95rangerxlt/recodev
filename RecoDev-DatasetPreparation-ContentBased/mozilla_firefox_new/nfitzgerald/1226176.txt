


Created attachment 8689515
Compute retained sizes in dominator trees and expose them to JavaScript

r?bz for webidl and cycle collection changes. I realized that DominatorTrees
need to hold a reference to their owning heap snapshots, so I had to change the
cycle collection macros back to the verbose way.

r?sfink for the rest.
Created attachment 8689516
Compute retained sizes in dominator trees and expose them to JavaScript

(Forgot to `git add` new test file...)
Try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=0446b3079c14
Comment on attachment 8689516
Compute retained sizes in dominator trees and expose them to JavaScript

> so I had to change the cycle collection macros back to the verbose way.

Why?  You're not tracing anything new, so this:

  NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(DominatorTree, mParent, mHeapSnapshot)

should work fine.  You only need the verbose thing if you need to trace things other than your wrappercache.

>+++ b/dom/webidl/DominatorTree.webidl

Might be worth documenting when this method can throw.

r=me on the DOM bits.
Comment on attachment 8689516
Compute retained sizes in dominator trees and expose them to JavaScript

Review of attachment 8689516:
-----------------------------------------------------------------

::: js/public/UbiNodeDominatorTree.h
@@ +407,5 @@
> +        MOZ_ASSERT(retainedSizes.isNothing());
> +        auto length = postOrder.length();
> +
> +        retainedSizes.emplace();
> +        if (!retainedSizes->growBy(length)) {

Is this guaranteed to zero out the vector?
(In reply to Steve Fink [:sfink, :s:] from comment #5)
> Comment on attachment 8689516
> Compute retained sizes in dominator trees and expose them to JavaScript
> 
> Review of attachment 8689516:
> -----------------------------------------------------------------
> 
> ::: js/public/UbiNodeDominatorTree.h
> @@ +407,5 @@
> > +        MOZ_ASSERT(retainedSizes.isNothing());
> > +        auto length = postOrder.length();
> > +
> > +        retainedSizes.emplace();
> > +        if (!retainedSizes->growBy(length)) {
> 
> Is this guaranteed to zero out the vector?

No, but zeroing isn't necessary since the value at each index is never read before it is initialized. This is the invariant described in this commment:

        // Iterate in forward order so that we know all of a node's children in
        // the dominator tree have already had their retained size
        // computed.

and ensured by this assertion:

                MOZ_ASSERT(idxOfDominated < i);
                size += retainedSizes.ref()[idxOfDominated];
https://hg.mozilla.org/integration/mozilla-inbound/rev/6ae1b5c32e52
https://hg.mozilla.org/mozilla-central/rev/6ae1b5c32e52


Compute retained sizes in dominator trees and expose them to JavaScript



Bug 1226176 - Compute retained sizes in dominator trees and expose them to JavaScript; r=bz,sfink 