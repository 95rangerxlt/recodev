Before Places, folders had a downward-pointing triangle next to them to indicate they were folders rather than bookmarks.  (Site icons aren't displayed on Mac for some reason, see bug 249016.)

Now those triangles are gone, so folders look just like bookmarks.

Before Places, folders had a downward-pointing triangle next to them to indicate they were folders rather than bookmarks.  (Site icons aren't displayed on Mac for some reason, see bug 249016.)

Now those triangles are gone, so folders look just like bookmarks.
The trouble is that folderarrow.png isn't included in the jar.mn for the pinstripe theme with Places, but browser.css still tries to use it.  Was there a reason for its omission, or just an oversight?  (Also folderarrow-hover.png.)

The CSS file is also looking for the RSS icon for the livemarks folder in .../bookmarks/livemark-folder.pn rather than .../places/livemarkItem.png, and likewise a couple of other icons.
*** Bug 330777 has been marked as a duplicate of this bug. ***
Created attachment 215719
Patch fixing problems with both regular and livemark folders

The four images I'm about to upload will also need to be added to the tree.

It turns out there are two separate problems.  First, as noted, the jar.mn file doesn't include the necessary images, and browser.css refers to the images' old locations in bookmarks/.  Second, livemark folders aren't being given the "livemark" attribute, so they don't know to use the special drop-down image.  This patch addresses both issues.
Created attachment 215720
.../browser/themes/pinstripe/browser/places/folderDropArrow.png
Created attachment 215721
.../browser/themes/pinstripe/browser/places/folderDropHoverArrow.png
Created attachment 215722
.../browser/themes/pinstripe/browser/places/livemarkFolder.png
Created attachment 215723
.../browser/themes/pinstripe/browser/places/livemarkFolderHover.png
Comment on attachment 215719
Patch fixing problems with both regular and livemark folders

>Index: components/places/content/controller.js

>   nodeIsRemoteContainer: function PC_nodeIsRemoteContainer(node) {
>     const NHRN = Ci.nsINavHistoryResultNode;
>     if (node.type == NHRN.RESULT_TYPE_REMOTE_CONTAINER)
>       return true;
>     if (node.type == NHRN.RESULT_TYPE_FOLDER)
>-      return asFolder(node).folderType != "";
>+      return asContainer(node).remoteContainerType != "";
>     
>     return false;
>   },

A quick question maybe Annie can help with too... I ran into a problem with this function earlier. I don't understand why the first check wouldn't be enough to check for remote-container-ness. Why the second check? 

Why shouldn't this function just be implemented like:

const NHRN = ...;
return node.type == NHRN.RESULT_TYPE_REMOTE_CONTAINER;

And if that doesn't always work reliably, why have the type at all?
Comment on attachment 215719
Patch fixing problems with both regular and livemark folders


>+#ifdef MOZ_PLACES
>+<?xml-stylesheet href="chrome://browser/skin/places/places.css"? type="text/css">
>+#endif

There's a problem here that we can't #ifdef things in a css file, but we really want these styles to go into browser.css.  If we put them in places.css and include that in the browser, all the styles that were applied to the places manager also get applied to the browser (like in bug 327762).

I think we should solve this by creating a new css file, chrome://browser/skin/places/browser-places.css, in which we add the styles that were added to places.css, and add a comment at the top explaining how browser-places.css should be merged into browser.css when the old bookmarks system goes away.

>   nodeIsRemoteContainer: function PC_nodeIsRemoteContainer(node) {
>     const NHRN = Ci.nsINavHistoryResultNode;
>     if (node.type == NHRN.RESULT_TYPE_REMOTE_CONTAINER)
>       return true;
>     if (node.type == NHRN.RESULT_TYPE_FOLDER)
>-      return asFolder(node).folderType != "";
>+      return asContainer(node).remoteContainerType != "";
>     
>     return false;
>   },

This should just check if node.type == NHRN.RESULT_TYPE_REMOTE_CONTAINER

>+/* Image locations for these toolbar icons are overridden in places.css in Places-enabled builds */

Update to browser-places.css
I've moved the CSS portions into places/places-browser.css and updated all the references to the file.

> This should just check if node.type == NHRN.RESULT_TYPE_REMOTE_CONTAINER

Unfortunately, that doesn't work. I'll start tracking down why some remote containers are marked as folders.
> Why shouldn't this function just be implemented like:
> 
> const NHRN = ...;
> return node.type == NHRN.RESULT_TYPE_REMOTE_CONTAINER;
> 
> And if that doesn't always work reliably, why have the type at all? 

The patch is correct. The remote container result node type is ONLY for dynamically created remote containers. Basically, this was created for the file browser service where you get your folders in bookmark menus. We don't currently have any of these.

"Normal" remote containers (the livemarks service) are also bookmark folders that have some component registered for being interested in them and providing some operations.
Thanks, Brett.  Since it's clear this can cause some confusion, how about I add your explanation to the function's comment?  That is,

* Determines whether or not a ResultNode is a remotecontainer item.
* ResultNote may be either a remote container result type or a bookmark folder
* with a nonempty remoteContainerType.  The remote container result node
* type is for dynamically created remote containers (i.e., for the file
* browser service where you get your folders in bookmark menus).  Bookmark
* folders are marked as remote containers when some other component is
* registered as interested in them and providing some operations, in which
* case their remoteContainerType indicates which component is thus registered. 
* For exmaple, the livemark service uses this mechanism.
(In reply to comment #12)

Sounds good. If you can think of ways to improve the documentation in the idl, that would be nice as well. I tried to make it pretty clear, but it might need further explaining.
Created attachment 215914
Addressing review comments

This modification to the patch moves the CSS portion into a new file and adds comments to controller.js and nsINavHistoryService.idl explaining the two varieties of remote containers.
Just a note that bug 330023 removed the RESULT_TYPE_FOLDER portion of PC_nodeIsRemoteContainer().  I've verified that adding it back in with a test on remoteContainerType instead of folderType doesn't re-break that bug, so we're good here.
It seems this may have caused Bug 331484 on windows (don't know about other OS's)
> +<?xml-stylesheet href="chrome://browser/skin/places/browser-places.css"? type="text/css">

Should be |type="text/css"?>| rather than |? type="text/css">|
Phil: good catch, thanks.  Patch coming in bug 331484.
This appears to have broken flat-chrome branch windows builds. When browser.xul tries to include browser-places.css, jar builds ignore the fact that browser-places.css doesn't exist in winstripe but for some reason flat builds instead open a tiny window with nothing in it (trunk builds don't have any problems though). If the browser-places.css xml-stylesheet line is removed from browser.xul the problem disappears.
I'd say that should be filed as a separate bug, please.  It's apparently related, but the fix may well lie in figuring out why the flat-chrome build opens a tiny empty window for a missing CSS file.
Bug 451915 - move Firefox/Places bugs to Firefox/Bookmarks and History. Remove all bugspam from this move by filtering for the string "places-to-b-and-h".

In Thunderbird 3.0b, you do that as follows:
Tools | Message Filters
Make sure the correct account is selected. Click "New"
Conditions: Body   contains   places-to-b-and-h
Change the action to "Delete Message".
Select "Manually Run" from the dropdown at the top.
Click OK.

Select the filter in the list, make sure "Inbox" is selected at the bottom, and click "Run Now". This should delete all the bugspam. You can then delete the filter.

Gerv


[Mac] Bookmark toolbar folders look like normal bookmarks

regression