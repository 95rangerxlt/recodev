ctrl-k stopped working as of today. It should go to Google Search. It does nothing. Other short-cut keys work.

I hope this is a bug and not a feature. Without it, one must have an extra tool-bar on top and use the pointer to get to it. I have removed that toolbar and rely on ctrl-k. I could, I suppose, add a bookmark, but that still requires additional strokes for what is an extremely common function.

Build: 29.0a1 (2013-12-12)

ctrl-k stopped working as of today. It should go to Google Search. It does nothing. Other short-cut keys work.

I hope this is a bug and not a feature. Without it, one must have an extra tool-bar on top and use the pointer to get to it. I have removed that toolbar and rely on ctrl-k. I could, I suppose, add a bookmark, but that still requires additional strokes for what is an extremely common function.

Build: 29.0a1 (2013-12-12)
Should be Fixed in today's Nightly.

this bug likely dup https://bugzilla.mozilla.org/show_bug.cgi?id=949365
It does not sound like a dup. That one was about moving to the search bar, and the complaint was that it does what I want it to do, which is to go straight to the default search engine (Google).

But I'm glad it is not a new feature! We are still having trouble getting used to the recent limitations on configuring toolbars on top.
(In reply to Jim Jeffery not reading bug-mail 1/2/11 from comment #1)
> Should be Fixed in today's Nightly.

Not fixed as of 29.0a1 (2013-12-14).
Need better steps to reproduce your issue...
Perhaps I had a similar issue? At least I did on the Dec. 12 2013 64-bit linux nightlies. When I pressed ctrl-k or ctrl-j, it would not focus on the search bar, but rather visit the homepage of whichever search engine was enabled in the searchbar at the time. It has been working as of yesterday's nightlies, however.
Just to clarify: You completely removed the search bar, i.e. it is neither in the toolbar nor the menu?
(In reply to Florian Bender from comment #6)
> Just to clarify: You completely removed the search bar, i.e. it is neither
> in the toolbar nor the menu?

Yes. Too many bars (especially now that the tab bar is present all the time, even if there is only one tab in it). Why have a search bar if ctrl-k works? (I also removed the menu bar, but I would like to put that back and put the address bar in it, which is what I always did before. See bug 938985.)
With the search-bar removed to the customize panel, I see this in the Error Console when entering Ctrl+k:

Sun Dec 15 2013 13:04:46
Error: TypeError: placement is null
Source file: chrome://browser/content/browser.js
Line: 12086
Created attachment 8347760
Patch
*** Bug 949626 has been marked as a duplicate of this bug. ***
Comment on attachment 8347760
Patch

Review of attachment 8347760:
-----------------------------------------------------------------

Patch is obviously fine, but the test gives me the creeps. Can we do better than monkeypatch-overriding the browser's builtin utility functions? Also, technically this way there's a chance that other browser code calls openUILinkIn... there's no checks at all that it's the search page's doing. :-)

(if there is a better way of testing but it's more effort, I'd prefer to land the fix and defer the test, just because breaking this isn't really an option and the fix is very straightforward)

::: browser/base/content/browser.js
@@ +2952,4 @@
>          searchBar.parentNode.classList.contains("overflowedItem")) {
>        let navBar = document.getElementById(CustomizableUI.AREA_NAVBAR);
>        navBar.overflowable.show().then(() => {
>          focusSearchBar();

Another driveby nit, why is this a separate closure? Why not .then(focusSearchBar) ?

::: browser/components/customizableui/test/browser_901207_searchbar_in_panel.js
@@ +100,5 @@
> +  {
> +    desc: "Ctrl+K should open the search page if the search bar has been customized out.",
> +    setup: function() {
> +      let searchContainer = document.getElementById("search-container");
> +      gCustomizeMode.removeFromArea(searchContainer);

Out of curiosity, any particular reason not to just use CustomizableUI.removeWidgetFromArea("search-container") ?

@@ +106,5 @@
> +    run: function() {
> +      let placement = CustomizableUI.getPlacementOfWidget("search-container");
> +      is(placement, null, "Search container should be in palette");
> +
> +      this.originalOpenUILinkIn = openUILinkIn;

This makes me very uncomfortable. Does tabbrowser not expose events for requested page loads / tabopens that we could use?

@@ +112,5 @@
> +      openUILinkIn = () => {
> +        openUILinkInCalled = true;
> +      };
> +      sendWebSearchKeyCommand();
> +      yield waitForCondition(function() openUILinkInCalled);

Did we already fix head.js so that if this fails, we won't throw and no longer execute the teardown method? If not, we should do that because otherwise we'll never restore the original function and we'll all be very sad.
Created attachment 8348413
950014.patch

Already had r+ from Gijs for the patch, but I feel pretty strongly about landing the test with the patch, so I'm requesting review from mconley on the test since Gijs is mostly unavailable this week.

(In reply to :Gijs Kruitbosch (Unavailable Dec 19 - Jan 2) from comment #11)
> Patch is obviously fine, but the test gives me the creeps. Can we do better
> than monkeypatch-overriding the browser's builtin utility functions?
I think this is actually the cleanest way to do this without having to interfere with other browser code paths.

> Also, technically this way there's a chance that other browser code calls
> openUILinkIn... there's no checks at all that it's the search page's doing.
> :-)

I've added some tests to confirm that openUILinkIn is called with the expected parameters.

> (if there is a better way of testing but it's more effort, I'd prefer to
> land the fix and defer the test, just because breaking this isn't really an
> option and the fix is very straightforward)

I disagree here, as this bug exists due the fact that we *don't* have tests covering this feature, so I find it pretty important that we do what we can to get a test introduced so we don't regress it in the future.

> @@ +106,5 @@
> > +    run: function() {
> > +      let placement = CustomizableUI.getPlacementOfWidget("search-container");
> > +      is(placement, null, "Search container should be in palette");
> > +
> > +      this.originalOpenUILinkIn = openUILinkIn;
> 
> This makes me very uncomfortable. Does tabbrowser not expose events for
> requested page loads / tabopens that we could use?

Handling, preventing default behavior, and stopping propagation of these events seems like a much dirtier way to run this test.
 
> @@ +112,5 @@
> > +      openUILinkIn = () => {
> > +        openUILinkInCalled = true;
> > +      };
> > +      sendWebSearchKeyCommand();
> > +      yield waitForCondition(function() openUILinkInCalled);
> 
> Did we already fix head.js so that if this fails, we won't throw and no
> longer execute the teardown method? If not, we should do that because
> otherwise we'll never restore the original function and we'll all be very
> sad.

head.js wraps the run() function in a try/catch. I've moved the caching of the original function to the first line of the setup() function so we can guarantee that it will be restored correctly.
Created attachment 8348550
Patch v1.1

Rebased to use add_task.
Comment on attachment 8348550
Patch v1.1

Review of attachment 8348550:
-----------------------------------------------------------------

::: browser/components/customizableui/test/browser_901207_searchbar_in_panel.js
@@ +87,5 @@
>  });
>  
> +// Ctrl+K should open the search page if the search bar has been customized out.
> +add_task(function() {
> +  this.originalOpenUILinkIn = openUILinkIn;

While it does feel weird to override a browser.js function like this, it's also a test, and I've seen way hairier stuff go down in tests. I think the hair is worth it just so that we don't regress this again.
https://hg.mozilla.org/integration/fx-team/rev/b2b0875ff19e
https://hg.mozilla.org/mozilla-central/rev/b2b0875ff19e


ctrl-k no longer goes to home page of default search engine (when search toolbar hidden)

regression

Bug 950014 - [Australis] Ctrl-K no longer goes to home page of default search engine (when search toolbar hidden). r=mconley,gijs 