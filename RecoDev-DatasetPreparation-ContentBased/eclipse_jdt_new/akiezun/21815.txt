Enter the following class:

public class Foo {
	public static void main(String[] arguments) {
		new String();
	}
}

Select 'new String()' and choose 'Refactor'->'Extract local variable'.

An error message appears saying: 'Cannot extract expressions used as 
statements.'

This seems like an unnecessary restriction.

I would like this action to generate:

public class Foo {
	public static void main(String[] arguments) {
		String temp = new String();
	}
}

This would be useful when you are not sure of the return type of an 
expression, for instance.

Enter the following class:

public class Foo {
	public static void main(String[] arguments) {
		new String();
	}
}

Select 'new String()' and choose 'Refactor'->'Extract local variable'.

An error message appears saying: 'Cannot extract expressions used as 
statements.'

This seems like an unnecessary restriction.

I would like this action to generate:

public class Foo {
	public static void main(String[] arguments) {
		String temp = new String();
	}
}

This would be useful when you are not sure of the return type of an 
expression, for instance.
for 2.1 consideration
will of course be still not allowed for void-typed expressions :)
a.tests added
b.tests failed
c.fixed
d.tests passed


Refactor: should be able to extract local variable from expression used as statement



fix for 21815 