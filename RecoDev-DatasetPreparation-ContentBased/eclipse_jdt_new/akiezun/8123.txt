20122:
The generated code does not honor the code formatter settings:
example: created variable assignement
String rr="JUnit "+Version.id();

The trick to do this without formatting the user code would be to let the 
formatter work first on a string containing only generated code:
- String rr=xx; -> String rr= xx;
- The replace xx with the user code

20122:
The generated code does not honor the code formatter settings:
example: created variable assignement
String rr="JUnit "+Version.id();

The trick to do this without formatting the user code would be to let the 
formatter work first on a string containing only generated code:
- String rr=xx; -> String rr= xx;
- The replace xx with the user code
the test case you gave should not be modified - user code was rr="Junit" ...
(i.e. not conforming to the setting) - it is preserved that way.

there is, however, a bug in the refactoring:
int y= 0+0;
now, select the expression (together with the leading space)
the new temp declaration is:
int temp=  0+0;
which is incorrect

(compact assignment pref is on)
user code was 
  System.out.println("JUnit "+Version.id());
generated code was
  String rr="JUnit "+Version.id();
  System.out.println(rr);


ok, this i don't believe :)
i just checked it on the latest (which is same as 0205) and it works correctly

adopting the bug anyway - the other thing needs fixing
after a conversation with MA i know what the problem is:
we should not assume that any code formatter preference means this or that 
(like we assume that 'compact assignment' means a sinle space after the '=' 
sign). whenever possible we should let the formatter format any generated code.

that way we're much more flexible, not hardcode things (what the above 
assumptions really are - hardcoding) and will be ready when pluggable code 
formatters show up.

that is another bug though - see bug#9443
this is fixed - bug#9443 remains open


Extract Local Variable: Should honor code formatter settings



test for 8123 

fix for 8123 