Given:

class A {
    void m() {
        //implementation
    }
}

class B extends A {
}

class C extends B {
    void m() {
        super.m();
        //further implementation
    }
}

A Pull Up of m in C generates:

class A {
    void m() {
        //implementation
    }
}

class B extends A {
    void m() {
        this.m();  //SHOULD STILL BE super
        //further implementation
    }
}

class C extends B {
}

The method when in C was calling m in A and should continue to do so when 
pulled up to B.

Given:

class A {
    void m() {
        //implementation
    }
}

class B extends A {
}

class C extends B {
    void m() {
        super.m();
        //further implementation
    }
}

A Pull Up of m in C generates:

class A {
    void m() {
        //implementation
    }
}

class B extends A {
    void m() {
        this.m();  //SHOULD STILL BE super
        //further implementation
    }
}

class C extends B {
}

The method when in C was calling m in A and should continue to do so when 
pulled up to B.
correct,
super should be changed to this only if the method is in the same class
(in the given test case - if m was declared in B, not A (but then it should not 
let you pull it up to B))

we should fix this
test added to suite
i have a fix
will not make it for F2 though - most likely
fix released - test bar green
in builds >= F2
*** Bug 19814 has been marked as a duplicate of this bug. ***


Pull Up destroys super call to self



Bug 184387 Add JRE wizard: JRE type default changed to Standard 1.1x VM 

enabled test for 18438 

fix for 18438 

test for 18438 