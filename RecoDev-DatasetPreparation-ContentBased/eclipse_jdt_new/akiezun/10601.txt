Refactoring operations should:
 a) attempt to preserve the original formatting as much as possible
 b) when new code is being generated, obey the formatting rules set in the 
preferences page.

I have a specific example of Refactor disobeying the rules.  There may be more:

#1) ensure that your formatting rules are all set to default values.  In 
particular, 'Compact assignment' should be turned off
#2) enter the following class:
package foo;

public class Bar {
	int getX() {
		return 0;
	}

	void foo() {
		int y = 0;
		System.out.println(getX());
		System.out.println(getX());
		System.out.println(getX());
	}
}

#3) format the class to verify that nothing changes
#4) select one of the calls to "getX()" and choose 'Refactor'->'Extract local 
variable'
#5) call the variable x (couldn't refactor have guessed this name?) and 
hit "Finish"
#6) the resulting class looks like:
package foo;

public class Bar {
	int getX() {
		return 0;
	}

	void foo() {
		int y = 0;
		int x=getX();
		System.out.println(x);
		System.out.println(x);
		System.out.println(x);
	}
}

Note that the "int x=getX();" statement is compacted, even though we turned 
this option off.

#7) Reformat the class again:
package foo;

public class Bar {
	int getX() {
		return 0;
	}

	void foo() {
		int y = 0;
		int x = getX();
		System.out.println(x);
		System.out.println(x);
		System.out.println(x);
	}
}

#8) IMHO, After a Format and Refactor, an additional Format should have no 
effect.

(20020215 build)

Refactoring operations should:
 a) attempt to preserve the original formatting as much as possible
 b) when new code is being generated, obey the formatting rules set in the 
preferences page.

I have a specific example of Refactor disobeying the rules.  There may be more:

#1) ensure that your formatting rules are all set to default values.  In 
particular, 'Compact assignment' should be turned off
#2) enter the following class:
package foo;

public class Bar {
	int getX() {
		return 0;
	}

	void foo() {
		int y = 0;
		System.out.println(getX());
		System.out.println(getX());
		System.out.println(getX());
	}
}

#3) format the class to verify that nothing changes
#4) select one of the calls to "getX()" and choose 'Refactor'->'Extract local 
variable'
#5) call the variable x (couldn't refactor have guessed this name?) and 
hit "Finish"
#6) the resulting class looks like:
package foo;

public class Bar {
	int getX() {
		return 0;
	}

	void foo() {
		int y = 0;
		int x=getX();
		System.out.println(x);
		System.out.println(x);
		System.out.println(x);
	}
}

Note that the "int x=getX();" statement is compacted, even though we turned 
this option off.

#7) Reformat the class again:
package foo;

public class Bar {
	int getX() {
		return 0;
	}

	void foo() {
		int y = 0;
		int x = getX();
		System.out.println(x);
		System.out.println(x);
		System.out.println(x);
	}
}

#8) IMHO, After a Format and Refactor, an additional Format should have no 
effect.

(20020215 build)
refactoring is intended to obey the formatting rules, so this must be an 
oversight.
will look into it
for a description of a more general problem with currecnt refactoring and code 
formatter see bug#9443

trival bug - i made a wrong assumption about what 'not compact' assignment is.
closign this one - 9443 is more general


Refactor should obey formatting rules



106010 

106013 [quick fix] Quick fix for casting method results 

106013 [quick fix] Quick fix for casting method results 

fix for 10601 