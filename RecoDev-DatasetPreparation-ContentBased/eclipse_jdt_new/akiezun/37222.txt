Eclipse 3.0

In the past, Eclipse has retrieved the data from the Clipboard in order to 
determine whether or not to enable the paste menu item or toolitem.  This is 
done quite frequently and can be quite slow.  Also, getting the data indicates 
to the source that the data has been transferred which in the case of a Cut 
operation may cause the source to delete the original data.

In the 3.0, there is new API on Clipboard called getAvailableTypes() which 
will indicate what types of data are available on the Clipoard without 
actually downloading the data itself.  

Here are the places in the UI that the data is being dowloaded unneccessarily 
(there may be more):

in org.eclipse.jdt.internal.ui.reorg:

PasteResourcesFromClipboardAction.canPasteFiles
PasteResourcesFromClipboardAction.canOperateOn
PasteResourcesFromClipboardAction.isAnythingToPaste

Here is an example of how to use the new API:

public static void main(String[] args) {
	Display display = new Display();
	final Clipboard c = new Clipboard(display);
	Shell shell = new Shell(display);
	shell.setLayout(new FillLayout());
	final StyledText text = new StyledText(shell, SWT.BORDER);
	
	final Menu menu = new Menu (shell, SWT.POP_UP);
	final MenuItem pasteItem = new MenuItem (menu, SWT.PUSH);
	pasteItem.setText ("Paste");
	pasteItem.addSelectionListener(new SelectionAdapter() {
		public void widgetSelected(SelectionEvent e) {
			text.paste();
		}
	});
	menu.addMenuListener(new MenuAdapter() {
		public void menuShown(MenuEvent e) {
			TransferData[] types = c.getAvailableTypes();
			Transfer[] transfers = new Transfer[] 
{TextTransfer.getInstance(), RTFTransfer.getInstance()};
			boolean enable = false;
			for (int i = 0; i < types.length; i++) {
				for (int j = 0; j < transfers.length; j++) {
					if (transfers[j].isSupportedType(types
[i])) {
						enable = true;
						break;
					}	
				}
				if (enable) break;
			}
			pasteItem.setEnabled(enable);
		}
	});
	text.setMenu(menu);
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	c.dispose();
	display.dispose();
}

Eclipse 3.0

In the past, Eclipse has retrieved the data from the Clipboard in order to 
determine whether or not to enable the paste menu item or toolitem.  This is 
done quite frequently and can be quite slow.  Also, getting the data indicates 
to the source that the data has been transferred which in the case of a Cut 
operation may cause the source to delete the original data.

In the 3.0, there is new API on Clipboard called getAvailableTypes() which 
will indicate what types of data are available on the Clipoard without 
actually downloading the data itself.  

Here are the places in the UI that the data is being dowloaded unneccessarily 
(there may be more):

in org.eclipse.jdt.internal.ui.reorg:

PasteResourcesFromClipboardAction.canPasteFiles
PasteResourcesFromClipboardAction.canOperateOn
PasteResourcesFromClipboardAction.isAnythingToPaste

Here is an example of how to use the new API:

public static void main(String[] args) {
	Display display = new Display();
	final Clipboard c = new Clipboard(display);
	Shell shell = new Shell(display);
	shell.setLayout(new FillLayout());
	final StyledText text = new StyledText(shell, SWT.BORDER);
	
	final Menu menu = new Menu (shell, SWT.POP_UP);
	final MenuItem pasteItem = new MenuItem (menu, SWT.PUSH);
	pasteItem.setText ("Paste");
	pasteItem.addSelectionListener(new SelectionAdapter() {
		public void widgetSelected(SelectionEvent e) {
			text.paste();
		}
	});
	menu.addMenuListener(new MenuAdapter() {
		public void menuShown(MenuEvent e) {
			TransferData[] types = c.getAvailableTypes();
			Transfer[] transfers = new Transfer[] 
{TextTransfer.getInstance(), RTFTransfer.getInstance()};
			boolean enable = false;
			for (int i = 0; i < types.length; i++) {
				for (int j = 0; j < transfers.length; j++) {
					if (transfers[j].isSupportedType(types
[i])) {
						enable = true;
						break;
					}	
				}
				if (enable) break;
			}
			pasteItem.setEnabled(enable);
		}
	});
	text.setMenu(menu);
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	c.dispose();
	display.dispose();
}
See also bug 37220 and bug 37223.
Adam, please consider when rearchitecturing dnd and ccp.
actually i'm not sure if retrieving data can be avoided:
Clipboard does not support callbacks to tell me that the contents changed
so on each selection change in the package explorer i need to look at what's in 
the clipboard and decide:

- if it's projects - i run CopyProjectOperation
- if it's not projects but javaElements and resources, then i can try copying 
the stuff in the clipboard to the current selection 
- otherwise, if there's some FileTransfer data available i can run 
CopyFilesAndFoldersOperation
- otherwise paste is unavailable

so, i need to know what's inside the clipboard (the type is not enough)
fixed,
we do what the workbench does - as described in bug 38734


Enable/Disable paste - currently being done incorrectly [dnd] [ccp]

