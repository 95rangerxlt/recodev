In my team we have several developers working in the same project so we try 
our best to avoid overwriten others changes.  We've concluded that the best 
way to do that is to keep the workspace files read only, locking them in the 
repository if a change is needed.

The annoying problem I am experiencing is that everytime I need to copy a file 
to use as the base for a new file, I need to make it writable before pasting 
it.  This is even worst when pasting multiple files since there is no way 
within the Eclipse to change the "read-only" flag for multiple selections.  
So, rewriting the subject, why can't I paste a copy a read only file?  IMHO, 
Eclipse should make the new file writable and apply the refactor actions.

In my team we have several developers working in the same project so we try 
our best to avoid overwriten others changes.  We've concluded that the best 
way to do that is to keep the workspace files read only, locking them in the 
repository if a change is needed.

The annoying problem I am experiencing is that everytime I need to copy a file 
to use as the base for a new file, I need to make it writable before pasting 
it.  This is even worst when pasting multiple files since there is no way 
within the Eclipse to change the "read-only" flag for multiple selections.  
So, rewriting the subject, why can't I paste a copy a read only file?  IMHO, 
Eclipse should make the new file writable and apply the refactor actions.
Adam, can you please comment. IMO we should allow copying a read-only file 
since we are not modifying the original. We are modifying the new file.
yup
it was a protection against a jcore bug (recently entered as bug 39736) - jcore 
fails with a JavaModelException if the source compilation unit is read only

i removed the protection now, so copying of readonly files (non .java) is 
trivial, but it fails for .java files (i.e. compilation units)
*** Bug 39811 has been marked as a duplicate of this bug. ***
fixed


Why can't I copy if the file is read only? [refactoring]

