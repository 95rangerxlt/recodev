I20061212-0010.

Each time I use this refactoring I have to check the 'static' check box again? Why?

Please store the settings as this is the normal Eclipse behavior.

I20061212-0010.

Each time I use this refactoring I have to check the 'static' check box again? Why?

Please store the settings as this is the normal Eclipse behavior.
Raksha, could you please have a look?

We should store the settings like e.g. ExtractMethod, see ExtractMethodInputPage.THROW_RUNTIME_EXCEPTIONS etc.. Note that in some cases (e.g. in a static method), some checkboxes are always checked and disabled. We should only store settings when the user explicitly changed them.
(In reply to comment #1)
> Raksha, could you please have a look?
> 
> We should store the settings like e.g. ExtractMethod, see
> ExtractMethodInputPage.THROW_RUNTIME_EXCEPTIONS etc.. Note that in some cases
> (e.g. in a static method), some checkboxes are always checked and disabled. We
> should only store settings when the user explicitly changed them.

Fixed in HEAD.
This bug is about storing the setting***S*** and not just one ;-)
Didn't look at the code.
And please implement the same workflow as e.g. ExtractMethodInputPage, i.e. store the settings right when the user toggles them. The settings should be saved even if the user cancelled the dialog.

The reason for that is that we want to support scenarios where the user usually has one setting, but needs to change it for just one refactoring and then wants to revert it without executing the refactoring again. This is similar to e.g. settings in the Find/Replace dialog.
(In reply to comment #5)
> And please implement the same workflow as e.g. ExtractMethodInputPage, i.e.
> store the settings right when the user toggles them. The settings should be
> saved even if the user cancelled the dialog.
> 
> The reason for that is that we want to support scenarios where the user usually
> has one setting, but needs to change it for just one refactoring and then wants
> to revert it without executing the refactoring again. This is similar to e.g.
> settings in the Find/Replace dialog.

Oh okay. I thought we need to save the settings only on pressing ok and only for declare as static checkbox as per comment #0. Ill modify accordingly and also add other settings in the next version.
(In reply to comment #6)
> Ill modify accordingly and also add other settings in the next version.

Fixed in org.eclipse.jdt.internal.corext.refactoring.code.ConvertAnonymousToNestedRefactoring. and released.
(In reply to comment #7)
> Fixed in
> org.eclipse.jdt.internal.corext.refactoring.code.ConvertAnonymousToNestedRefactoring.

Nope, it's in ConvertAnonymousToNestedWizard.java 1.20.


That version still has problems:

1.) Execute refactoring with "static" unchecked. When you then start it again in a context where the nested class must be static (e.g. in a static method), the checkbox is disabled (good), but also unchecked (should be checked).

2.) Execute refactoring with "static" and "final" checked. Then undo and start the refactoring again. => "static" and "final" are still checked, but when you execute it again, only "final" is added.
Created attachment 173164
Patch
(In reply to comment #8)
> (In reply to comment #7)
> > Fixed in
> > org.eclipse.jdt.internal.corext.refactoring.code.ConvertAnonymousToNestedRefactoring.
> 
> Nope, it's in ConvertAnonymousToNestedWizard.java 1.20.
> 
Yes, sorry I pasted the wrong class.
> 
> That version still has problems:
> 
> 1.) Execute refactoring with "static" unchecked. When you then start it again
> in a context where the nested class must be static (e.g. in a static method),
> the checkbox is disabled (good), but also unchecked (should be checked).
> 
> 2.) Execute refactoring with "static" and "final" checked. Then undo and start
> the refactoring again. => "static" and "final" are still checked, but when you
> execute it again, only "final" is added.

We had to not only call the setDeclareFinal and setDeclareStatic in ConvertAnonymousToNestedRefactoring when the user toggles the checkbox but also when case 1 & 2 happens. Added the changes in the patch. Markus , could you pls check if this patch covers the cases?
> Created an attachment (id=173164) [details] [diff]
> Patch

That covers the reported problems, but loadSettings() now looks suspicious, and there really is another bug.

And please always make all statements of an if-else clause look the same regarding usage of a block.

Rest looks good, please commit with these fixes.
(In reply to comment #11)

> Rest looks good, please commit with these fixes.

Done. Committed to HEAD after adding the visibility setting and other minor tweaks.
.


[convert anonymous] does not store settings



Fixed bug 167590: [convert anonymous] does not store settings 

Fixed bug 167590: [convert anonymous] does not store settings 

Fixed bug 167590: [convert anonymous] does not store settings 

Fixed bug 167590: [convert anonymous] does not store settings 