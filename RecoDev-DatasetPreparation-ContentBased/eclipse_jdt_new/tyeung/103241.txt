Foo.java
public @interface Foo
{
 String[] name();
}

Test.java
@Foo("values") // AnnotationValue.getValue() should return String or String[]? 
public class Bar{}

Other questions:
What happen if there is a complete type mismatch between the declaration and 
the actual annotation member value? Return null? Or should simply return 
what's in source regardless of the type declared?

Foo.java
public @interface Foo
{
 String[] name();
}

Test.java
@Foo("values") // AnnotationValue.getValue() should return String or String[]? 
public class Bar{}

Other questions:
What happen if there is a complete type mismatch between the declaration and 
the actual annotation member value? Return null? Or should simply return 
what's in source regardless of the type declared?
Fix checked into CVS as of July 11, 2005 4:07pm. 

APT implementation will assure that return type of AnnoationValue.getValue() 
line up with that in the declaration when there are no errors. 

In the example below, auto boxing will be performed in the return value. 
Type widening and narrowing will also be performed when possible. 
If the type is not convertible, the return type will depends on the value in 
source. Sun's implementation always return you the String "error" but that 
seems counter intuitive particular when the string could actually be a valid 
value for some annotation value.



Return value of AnnotationValue.getValue()  when types don't line up



Bug 103241 : Return value of AnnotationValue.getValue()  when types don't line up Added test suite AnnotationValueConverionTests. 