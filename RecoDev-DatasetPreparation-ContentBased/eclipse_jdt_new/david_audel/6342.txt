11122 with patch
For the anonymous inner class proposal:
Code assist on interfaces 'constructor' now works, but, as it seems, not 
everywhere.
- 'new java.util.List(' does not bring a proposal
- 'new junit.framework.Test(' works

'Test' is in source. Maybe thats the difference.

11122 with patch
For the anonymous inner class proposal:
Code assist on interfaces 'constructor' now works, but, as it seems, not 
everywhere.
- 'new java.util.List(' does not bring a proposal
- 'new junit.framework.Test(' works

'Test' is in source. Maybe thats the difference.
I think we should add another API for feeding these anonymous type bodies. 
Constructors for interface do not sound right, 1.0 customers would be seeing 
this behavior too, whereas with the new ICompletionRequestor, a new API would 
be ignored to 1.0 customers.
Do you agree with the API change ?
yes. can you give details?
would it be acceptAnonymousType(...)?
could it also be called in type names after 'new'? (not only after the opening 
bracket)
  new IActio
            ^code assist here 
i suggest :

public void acceptAnonymousType(
	char[] declaringTypePackageName,
	char[] declaringTypeName,
	char[][] parameterPackageNames,
	char[][] parameterTypeNames,
	char[][] parameterNames,
	char[] completionName,
	int modifiers,
	int completionStart,
	int completionEnd)
In the API, declaringTypeName will rather be superTypeName.
New API on ICompletionRequestor for suggest anonymous type declaration: 
      void acceptAnonymousType( 
          char[] superTypePackageName, 
          char[] superTypeName, 
          char[][] parameterPackageNames, 
          char[][] parameterNames, 
          char[][] parameterNames, 
          char[] completionName, 
          int modifiers, 
          int completionStart, 
          int completionEnd); 

Fixed.


Code assist on Intreface-'Constructors' incomplete



HEAD - Fixed Bug 365387 - [compiler][null] bug 186342: Issues to follow up post review and verification. Item (22). 

HEAD - Fixed Bug 365519 - editorial cleanup after bug 186342 and bug 365387 

HEAD - Bug 186342: [compiler][null] Using annotations for null checking - adopt Markus' javadoc fixes into the buildnotes - more small javadoc fixes: removed stutter and cleanup white space 

Bug 186342: [compiler][null] Using annotations for null checking - API cleanup 

Bug 186342: [compiler][null] Using annotations for null checking - API cleanup - formatted code 

Bug 186342: [compiler][null] Using annotations for null checking - copied project settings from jdt.core and adjusted to 1.5 - added API Tools builder 

HEAD - Fixed Bug 186342 [compiler][null] Using annotations for null checking 

HEAD - Supporting new bundle (annotation types) for Bug 186342: [compiler][null] Using annotations for null checking 

HEAD - Reverting the fix for 186342 

HEAD - revert 186342 on request by Markus 

HEAD	- Fixed bug 186342: [compiler][null]Using annotations for null checking 

Fixed bug 126342: [key binding] Suggestions for AbstractInformationControl 

163420 [clean up] There should be an option to run CleanUp on source file without any questions asked - no menu for empty selection 

163420 [clean up] There should be an option to run CleanUp on source file without any questions asked 

[116342] [refactoring] [extract method] Pre/post-increment/decrement in loops allowed to be extracted 

36342 Please Imporve "Generate Get and Set " 