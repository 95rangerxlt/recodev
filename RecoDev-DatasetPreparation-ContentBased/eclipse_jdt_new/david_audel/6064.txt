Build 20011116

- move the text insertion point into the middle of a type name in a Java editor
- press F3
- it has no effect

It would be better if it opened on the current word.

(I notice that it currently works for a partial selection, if the selection 
includes the start of the type name, as if it's doing code-assist or something.)

This is an issue for keyboard accessibility.  It currently requires you to move 
the cursor to the start of the word, hit CTRL+SHIFT+RIGHT to select the word, 
then F3.  It would be better if you could just move to the word and hit F3.

Build 20011116

- move the text insertion point into the middle of a type name in a Java editor
- press F3
- it has no effect

It would be better if it opened on the current word.

(I notice that it currently works for a partial selection, if the selection 
includes the start of the type name, as if it's doing code-assist or something.)

This is an issue for keyboard accessibility.  It currently requires you to move 
the cursor to the start of the word, hit CTRL+SHIFT+RIGHT to select the word, 
then F3.  It would be better if you could just move to the word and hit F3.
Since accessibility is an important feature for 2.0 I think we should look into 
this.
There was also a recent EC post about finding the decl for a method.
Somebody pointed him at F3, but he complained about having to select the whole 
word.

if we do it we should do it consistently (e.g. search should do the same).
I fixed it for OpenOnSelectionAction and OpenOnHierarchySelectionAction.

Dani, please add the corresponding change to OpenSearchDialogAction. What you
have to do is, if the selection is a ITextSelection, call something like
OpenOnSelectionAction.expandToWord(ITextSelection).
Agree to add the feature to Java search but not text search.

I don't like that also existing selections are expanded (e.g. if I select Object
in the work ObjectStreamField and press F3 I would expect class Object to be opened.
Idee is to move Claude's code to the StructuredSelectionProvider.


- Filed a new PR against JSearch to use StructuredSelectionProvider
- Backward parsing needs help from JCore.

backed out change in OpenOnSelectionAction and OpenHierarchyOnSelectionAction
To ensure that this is:
1) done consistently all over in the UI (e.g. refactoring is yet another 
example)
2) done correctly (determining the proper token boundaries)
This could be done as part of ICodeAssist.codeSelect(int offset, int length). 
When length == 0 then the.

Moving to Jdt Core for comment
What is it that you would precisely want ? If length==0, then it would find 
take the entire token starting at offset ?

This is quite easy to do on our side.
Now in ICodeAssist.codeSelect(int offset, int length), when length == 0 then 
the SelectionEngine select the entire token.

Fixed



Open on selection shouldn't require selection

accessibility

HEAD - Fixed bug 360644: Scope.isDefinedInSameUnit(ReferenceBinding) fails for a ParameterizedTypeBinding 

added 16064 

bug 16064 

Fixed bug 360642: Allow to associate an editor to class files which have no source 

206064 [GlobalActions] Provide LTK aware IDE actions 

partial fix of 6064 