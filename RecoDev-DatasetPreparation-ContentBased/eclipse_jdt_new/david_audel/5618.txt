Build 207 + JDTCORE from HEAD content (as of 20011107).

1 org.eclipse.core.resources 4 Unhandled exception caught in event loop.
Log: Wed Nov 07 17:00:46 CET 2001
4 org.eclipse.ui 0 Failed to execute runnable 
(org.eclipse.jdt.internal.codeassist.complete.CompletionNodeFound)

Was trying to perform a method declaration completion inside an anonymous
class:

Inside org.eclipse.jdt.internal.core.CompilationUnit
...
protected void 
codeComplete(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, 
org.eclipse.jdt.internal.compiler.env.ICompilationUnit unitToSkip, int position, 
final ICodeCompletionRequestor requestor) throws JavaModelException {
	codeComplete(
		cu,
		unitToSkip,
		position,
		new ICompletionRequestor(){
			<CODEASSIST HERE>
		}
}

Build 207 + JDTCORE from HEAD content (as of 20011107).

1 org.eclipse.core.resources 4 Unhandled exception caught in event loop.
Log: Wed Nov 07 17:00:46 CET 2001
4 org.eclipse.ui 0 Failed to execute runnable 
(org.eclipse.jdt.internal.codeassist.complete.CompletionNodeFound)

Was trying to perform a method declaration completion inside an anonymous
class:

Inside org.eclipse.jdt.internal.core.CompilationUnit
...
protected void 
codeComplete(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, 
org.eclipse.jdt.internal.compiler.env.ICompilationUnit unitToSkip, int position, 
final ICodeCompletionRequestor requestor) throws JavaModelException {
	codeComplete(
		cu,
		unitToSkip,
		position,
		new ICompletionRequestor(){
			<CODEASSIST HERE>
		}
}
Actually the declaring class name was 'Openable'
Was able to reproduce on a simpler example:

public class X {

        void foo(){
                
                System.out.println(
                        new Runnable(){
                                <CODE ASSIST HERE>
                        }
                );
        }

}

Then select method 'run()' and insert it, the walkback occurs right after it in 
the UI (suspecting it triggers automatically another code assist at this point, 
which is the one crashing us).
Protection was added, but real defect should still be fixed
Fixed
I do not buy the fix, and re-released the original (still wrong) behavior.

The introduced flag isn't reinitialized when consumed and when doing recovery. 
The nestedMethod() action should be investigated more if offending.
push BlockInvocationPtr twice for method and constructor (and pop twice)


Uncaught CompletionNodeFound exception doing code assist



Bug 256184: correctly handle array types in getDeclaredType(), and add test case 

Bug 256184 - fix Types.getDeclaredType() for inner types 

bug 256184: fix getDeclaredType() for array type arguments 

Bug 115618 - Mnemonics collision on Arguments tab of java launch config dialogs 