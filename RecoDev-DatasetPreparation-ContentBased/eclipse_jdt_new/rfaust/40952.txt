Unfortunately, the new Eclipse version does not create a get/set method in the 
form of 

	/**
	 * Description.
	 * 
	 * @return string
	 */
	public String getName() {
		return name;
	}

anymore but it leaves out the value of the @return param:

	/**
	 * Description.
	 * 
	 * @return
	 */
	public String getName() {
		return name;
	}

But this has the bad side effect that generating javadoc generates warnings for 
each method that was automatically generated via "Generate getter and setter" 
function of eclipse. To get a clean javadoc creation back again, you have to 
fill in the @return value by hand which makes all the nice automatic stuff 
rather useless. i suggest to set the field name as the default return value:

	/**
	 * Description.
	 * 
	 * @return name
	 */
	public String getName() {
		return name;
	}

which should be quite easy to implement as each get/set method is created based 
on this field name!

Unfortunately, the new Eclipse version does not create a get/set method in the 
form of 

	/**
	 * Description.
	 * 
	 * @return string
	 */
	public String getName() {
		return name;
	}

anymore but it leaves out the value of the @return param:

	/**
	 * Description.
	 * 
	 * @return
	 */
	public String getName() {
		return name;
	}

But this has the bad side effect that generating javadoc generates warnings for 
each method that was automatically generated via "Generate getter and setter" 
function of eclipse. To get a clean javadoc creation back again, you have to 
fill in the @return value by hand which makes all the nice automatic stuff 
rather useless. i suggest to set the field name as the default return value:

	/**
	 * Description.
	 * 
	 * @return name
	 */
	public String getName() {
		return name;
	}

which should be quite easy to implement as each get/set method is created based 
on this field name!
We removed it since we had several bugs that we generated bogus Javadoc (e.g 
@return String is as bogus as @return field). So we removed it for 3.0. The 
solution is now:

- disable the javadoc generation for method (Preferences->Java->Code 
Generation) if you are not going to fill in the Javadoc after you have 
generated the methods.

- use /**<return> or "Source->Add Javadoc comment" to generate a javadoc
the solutions you gave are no real solutions as these are the "slow-by-hand" 
solutions: i have to adjust each method by hand which can be very frustrating 
if you have 20 fields and 40 methods that you need to scroll to (after generate 
getter and setter function) and adjust. i don't understand why 

@return field

is "bogus"? if the javadoc is important for a method, the coder will have to go 
to the method and type the javadoc. but for automatically generated getter and 
setter methods, the user often (always...) does not want to type "Set 
field 'name'", etc. for each method as this is implicit given by a basic 
get/set method. for any other get/set method, the user will have to write 
specific javadoc anyway.

so it is simply a technical aspect: just click "generate getter and setter" and 
everything is technically (syntactically) correct - including the javadoc 
comments.

i strongly encourage you to set  @return fieldName  as this does not cause any 
javadoc warnings and is not wrong.

You are simply assuming that you live in an English only world. In other 
languages generating @return field might not be correct and we got most of the 
PRs from not English speakers.

So we can think about making this a code template. Are you going to volunteer 
for this <g>
i'm german and my mother tongue is german, so no english world here. but this 
is not important as it is a technical issue not a native language syntax 
generating question, isn't it? how can i volunteer?
It is a language issue since @return field might be incorrect from a language 
point of view in Chinese, Hebrew, ...

I will look into the code and let you know how to volunteer.
well, i guess we have different meanings about "language issues". my point was 
that automatically generated code should generate syntactically correct code 
(in this case: javadoc does not thorugh a warning). you can't by no meaning 
invent a automatic code generation that follows all "language specific issues". 
so, if this pleases you more: generate

@return (not set)

or

@return -

or

 @return (return value)

or whatever you want, but it should have at leats some characters after @return 
for javadoc not to throw warnings. yup?
The argument that we shouldn't avoid generating code that causes 
errors/warings is correct. As said the solution to this is to make the comment 
user customizable since @return - might be misunderstandable in Chinese as 
well.
"make the comment user customizable" : how???
Java > Code Generation > Code and comments > Comments > Methods just has a

${tags} in the template, so how should the user be able to configure it?
This is the new code somebody has to write ;-)).
there's already another bug reprot about a getter comment and setter comment
Created attachment 5927
proposed enhancements.

I wrote some code which addresses this problem. I never create comments for
getter/setters myself. You have access to the param and the field you're
setting in the template for the setter, and access to the field in the template
for the getter. Required slight refactoring of StubUtility classes.
I looked at the patch and I prefer that Martin releases it. It is mostly his 
code and he knows best if this is the right way of fixing the bug.
refactored patch released > 20030915
-> added API to CodeGeneration: 'getGetterComment' and 'getSetterComment'
-> new variable ${bare_field_name}: field name without pre- or suffix. To be 
used in sentences like: 'The ${bare_field_name} to set.


Generate getter and setter: set field name as default return value



Fixed bug 409520: [1.8][quick fix] "Add unimplemented methods" should not create stubs for default methods 

Fixed bug 409520: [1.8][quick fix] "Add unimplemented methods" should not create stubs for default methods 

Fixed bug 409520: [1.8][quick fix] "Add unimplemented methods" should not create stubs for default methods 

40952 Generate getter and setter: set field name as default return value 