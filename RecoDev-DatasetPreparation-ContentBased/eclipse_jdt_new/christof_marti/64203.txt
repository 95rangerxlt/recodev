In the following example, the first line of the method body shows 'n' as if it 
were a local variable. The second line is OK.

void m(int n)
{
	int j = n;
	int k = n + 1;
}

In the following example, the first line of the method body shows 'n' as if it 
were a local variable. The second line is OK.

void m(int n)
{
	int j = n;
	int k = n + 1;
}
Created attachment 11269
Picture showing the problem
happens in I200405280010
time permitting for 3.0
Here is my cheap solution for this problem.  LocalVariableDeclaration.consume 
doesn't care if the tokens are from the left or the right side, hence the 
color problem.  One could just copy the code from LocalVariable to determine 
if the token is a variable versus a parameter but call me lazy.

Index: SemanticHighlightings.java
===================================================================
RCS 
file: /home/eclipse/org.eclipse.jdt.ui/ui/org/eclipse/jdt/internal/ui/javaedito
r/SemanticHighlightings.java,v
retrieving revision 1.8
diff -u -r1.8 SemanticHighlightings.java
--- SemanticHighlightings.java	7 May 2004 13:16:02 -0000	1.8
+++ SemanticHighlightings.java	30 May 2004 04:46:36 -0000
@@ -23,6 +23,7 @@
 import org.eclipse.jdt.core.dom.IVariableBinding;
 import org.eclipse.jdt.core.dom.Modifier;
 import org.eclipse.jdt.core.dom.SimpleName;
+import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 
 import org.eclipse.jdt.ui.PreferenceConstants;
 
@@ -496,7 +497,7 @@
 		 */
 		public boolean consumes(SemanticToken token) {
 			ASTNode parent= token.getNode().getParent();
-			return parent != null && parent.getNodeType() == 
ASTNode.VARIABLE_DECLARATION_FRAGMENT;
+			return parent != null && parent.getNodeType() == 
ASTNode.VARIABLE_DECLARATION_FRAGMENT && ((VariableDeclarationFragment)
parent).getName() == token.getNode(); 
 		}
 	}
 

Removing target milestone, no further action for 3.0.
The Local Variable Declaration highlighting also matches field declarations.
Fixed in builds >=N20040812 and >=I20040817.

FYI: I found that node.getLocationInParent() ==
VariableDeclarationFragment.NAME_PROPERTY provides a simpler solution. Thanks.



[syntax highlighting] Wrong highlighting when method parameter alone is used as initializer of a local variable



Fix Bug 64203: [syntax highlighting] Wrong highlighting when method parameter alone is used as initializer of a local variable 