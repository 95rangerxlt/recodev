I20091118-1342

We often use ImportRewrite#add*(..) methods without an ImportRewriteContext. The fix for bug 235253 reveals many more places where we have to add it.

I've already released the fix for ExtractConstantRefactoring.

I20091118-1342

We often use ImportRewrite#add*(..) methods without an ImportRewriteContext. The fix for bug 235253 reveals many more places where we have to add it.

I've already released the fix for ExtractConstantRefactoring.
Created attachment 152714
test result using the patch for bug 235253 and 194358

xml JUnit results for refactoring tests.
Created attachment 152715
second set of test results using the patch for bug 235253 and 194358

Result of AutomatedSuite
Created attachment 153448
First fixes
Deepak, please have a look for M5. You need to apply the last patch from bug 235253 in your workspace to reproduce the test failures from the first 2 attachments.

For most failures, the fix should just be to create a new ContextSensitiveImportRewriteContext(ASTNode, ImportRewrite) and pass that to the ImportRewrite#addImport(..) operations. The node that should be used as the context should be the type or method declaration into which the new code will be generated (or the target of a move operation). You can also use the other constructor of ContextSensitiveImportRewriteContext if you already have the target position at hand.

The patch I attached in the previous comment does this for the first few failures.
I would like to release the fix for 235253 first week of January.
>I would like to release the fix for 235253 first week of January.
It's ready when it's ready ;-)
Created attachment 155684
Remaining fixes

Markus, though there are no test failures I didn't really like the fix in MissingAnnotationAttributesProposal. In addMissingAtributes(), simply passing listRewriter.getParent() to ContextSensitiveImportRewriteContext() was causing org.eclipse.jdt.ui.tests.quickfix.LocalCorrectionsQuickFixTest.testMissingAnnotationAttributes_bug179316() to throw a Class cast excpetion. Hence had to include a  null check and a ASTResolving.findParentBodyDeclaration() call. 

Also, I had applied last attachment from 235253 to reproduce the test failures. Now 2 tests are failing in my workspace org.eclipse.jdt.ui.tests.core.AddImportTest.testAddImports_bug23078() (to be fixed by 194358) and org.eclipse.jdt.junit.tests.JUnit4TestFinderTest.testRunWith(). Not sure about the cause of the second failure.
org.eclipse.jdt.junit.tests.JUnit4TestFinderTest.testRunWith() fails even when my workspace is synchronized with HEAD. I guess something wrong with my workspace.
Oops, I missed one set of test failures :o , working on them now.
> org.eclipse.jdt.junit.tests.JUnit4TestFinderTest.testRunWith() fails even when
> my workspace is synchronized with HEAD. I guess something wrong with my
> workspace.

The most likely cause is that you don't have org.eclipse.jdt.junit.core with the fix for bug 298031 from CVS.
(In reply to comment #10)
> > org.eclipse.jdt.junit.tests.JUnit4TestFinderTest.testRunWith() fails even when
> > my workspace is synchronized with HEAD. I guess something wrong with my
> > workspace.
> 
> The most likely cause is that you don't have org.eclipse.jdt.junit.core with
> the fix for bug 298031 from CVS.

Yes, that was it!
Created attachment 156540
All my fixes 

I was unable to fix the following failures.
-org.eclipse.jdt.ui.tests.refactoring.IntroduceParameterObjectTests.testImportAddEnclosing()
-org.eclipse.jdt.ui.tests.refactoring.IntroduceParameterObjectTests.testImportAddTopLevel()
-org.eclipse.jdt.ui.tests.refactoring.InferTypeArgumentsTests.testCuGetTakeClassStayRaw()

In IntroduceParameterObjectTests the new Parameter object class is not yet inserted in the code, hence making this tricky.

In InferTypeArgumentsTests.testCuGetTakeClassStayRaw the parent of following code ( node Type - bodyDeclaration)
{
    Class<? extends Z> z= getClass();
}
is the same code (node type - initializer). This seems to be causing the problem in getting to the correct node for creating ImportRewriteContext object.
Created attachment 156543
test results

- org.eclipse.jdt.ui.tests.refactoring.RenameResourceChangeTests
Dont know why this is there, but looks to be unrelated to this bug

org.eclipse.jdt.ui.tests.refactoring.SurroundWithTests
- The failure here is different position of comments. Maybe this happened because of the fix and maybe related to  Bug 293558. I think in this case we can just update the tests.

org.eclipse.jdt.ui.tests.refactoring.PushDownTests
- These have been fixed

Other failures are mentioned in last comment.
Created attachment 159483
Released patch

OK, here's my patch that makes all tests green with the latest JDT/Core. I've added contexts in some more places, adapted to the new flag in Core, and fixed the remaining bugs from the previous patch:

* Introduce Parameter Object: See ParameterObjectFactory#createParameterClassAwareContext(..)

* Infer Generic Type Arguments: That one is very hard to solve. In the rewrite pass, we have ASTs without bindings, so the ContextSensitiveImportRewriteContext does not work. We only have 2 options: Either create bindings (which we don't want for performance reasons), or create a ContextSensitiveImportRewriteContext that works without bindings (which is not possible, since member types of supertypes are also visible). I chose option 3, which is to ignore the problem for now and behave like in 3.5.

* PullUpTests were failing with an NPE, starting from test26. The change in ImportRewriteUtil#addImports(..) was not good: The first test (parent instanceof CompilationUnit) always fails, since parent can only be a BodyDeclaration there. The tests fail in the else branch since even the parent type can be null.

The more I played around with this, the more I think we should fix most callers of ImportRewrite#addImport(..) methods that don't take a context. Note that this is only necessary for clients that use StubUtility#createImportRewrite(CompilationUnit, boolean) (i.e. the version with the AST node).
(In reply to comment #14)
> The more I played around with this, the more I think we should fix most callers
> of ImportRewrite#addImport(..) methods that don't take a context. Note that
> this is only necessary for clients that use
> StubUtility#createImportRewrite(CompilationUnit, boolean) (i.e. the version
> with the AST node).

This means that All calls to org.eclipse.jdt.core.dom.rewrite.ImportRewrite.create(CompilationUnit, boolean) should come through org.eclipse.jdt.internal.corext.codemanipulation.StubUtility.createImportRewrite(CompilationUnit, boolean) ?
> This means that All calls to ImportRewrite.create(CompilationUnit, boolean)
> should come through StubUtility.createImportRewrite(CompilationUnit, boolean)?

Yes, all calls from o.e.jdt.ui. That's already the case in HEAD. The two remaining calls from o.e.jdt.junit are OK: They should not access the internal StubUtility, and they both don't need a context anyway.
Created attachment 160450
Additional fixes

Additional fixes I have till now.

Still have to go through clients of org.eclipse.jdt.internal.corext.refactoring.structure.CompilationUnitRewrite.getImportRewrite() and some other slightly tricky places.
Created attachment 160763
Additional Fixes

Fixed some more. I have fixed all the cases I was sure of. Since all our tests are passing, I think we can wait for new bugs (if they come) and then fix the remaining one by one.
I've replaced ASTResolving.findParentBodyDeclaration(node) with just 'node' in a few places, since going up is not necessary, and it may even be wrong in rare situations (e.g. in the signature of an anonymous class instance creation, which is not a body declaration).

Released Additional Fixes to HEAD.


[refactoring][actions] Use ImportRewriteContext everywhere



Bug 295638: [refactoring][actions] Use ImportRewriteContext everywhere (patch from Deepak) 

Bug 295638: [refactoring][actions] Use ImportRewriteContext everywhere 