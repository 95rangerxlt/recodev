Follow-up to bug 9503

After using the new bracket matching implementation a bit (match before the closing bracket, not after), I'm missing the old mode in some cases when typing:

    if (compare(one, two())|    // caret at '|' after last ')'

Before, I could see with one glance that a closing parenthesis is missing: The '(' in 'compare(one' was highlighted, and after I added the missing ')', the first '(' was highlighted. Now, I don't see any help any more.

I still think the fix for bug 9503 was good, but it should have a fallback: When
- the character on the left of the caret is a closing bracket and
- the character on the right of the caret is not a closing bracket,
then we should fall back to the old strategy and still show the matching bracket.

I didn't state the second condition as "is not a bracket", because this gives a more consistent story in cases like this after "(byte)":

                System.out.println((byte)(1 + 2));
                System.out.println((byte) (1 + 2));

Note that this change will also affect "Highlight enclosing bracket", which should not highlight more brackets if a matching bracket is already shown.

Follow-up to bug 9503

After using the new bracket matching implementation a bit (match before the closing bracket, not after), I'm missing the old mode in some cases when typing:

    if (compare(one, two())|    // caret at '|' after last ')'

Before, I could see with one glance that a closing parenthesis is missing: The '(' in 'compare(one' was highlighted, and after I added the missing ')', the first '(' was highlighted. Now, I don't see any help any more.

I still think the fix for bug 9503 was good, but it should have a fallback: When
- the character on the left of the caret is a closing bracket and
- the character on the right of the caret is not a closing bracket,
then we should fall back to the old strategy and still show the matching bracket.

I didn't state the second condition as "is not a bracket", because this gives a more consistent story in cases like this after "(byte)":

                System.out.println((byte)(1 + 2));
                System.out.println((byte) (1 + 2));

Note that this change will also affect "Highlight enclosing bracket", which should not highlight more brackets if a matching bracket is already shown.
We really want it all :-)

(In reply to comment #0)
> Before, I could see with one glance that a closing parenthesis is missing: The
> '(' in 'compare(one' was highlighted, and after I added the missing ')', the
> first '(' was highlighted. Now, I don't see any help any more.

Don't the red syntax error markers indicate the problem clearly? On an 'if' statement the problem is either a missing ')' or a missing '{'. I don't recall relying on the faint bracket highlighter over the brighter red error markers.

Though, I agree with the 2 fallback conditions, if we do decide to fix this.
> Don't the red syntax error markers indicate the problem clearly?

They do indicate that there's a problem, but:
- They are too slow. I don't want to wait for reconcile just to fix parentheses.
- Syntax errors are not too reliable. When I messed up my code, I'm usually quicker with finding a solution by just reading it again, and the bracket highlighting is a good editing help since it gives immediate feedback.
I don't have any major arguments against implementing this. 

But in addition maybe we should also make bracket matching work when the caret is placed before an opening bracket. That would make things consistent, and a user does not have to remember where to place the caret (inside or outside) to find a match.
> make bracket matching work when the caret is placed before an opening bracket

The fully-symmetric solution has the problem that we can have a tie in some cases, e.g. with the caret after "(byte)" here:

                System.out.println((byte)(1 + 2));

It's always unfortunate when a tie needs to be broken arbitrarily.

Furthermore, the natural typing order is to append characters on the right, which IMO justifies the special handling for a terminating closing bracket.
*** Bug 376251 has been marked as a duplicate of this bug. ***
Created attachment 214350
fix

That was simple enough.
Created attachment 214351
tests

These test changes should be enough.

I wanted to add some more tests to org.eclipse.jface.text.tests.DefaultPairMatcherTest2, but AbstractPairMatcherTest.createTestCase(String) and AbstractPairMatcherTest.performMatch(ICharacterPairMatcher, String) are already complicated enough. In any case I think JavaPairMatcherTest and all of us using the feature everyday should be good enough.
Created attachment 214362
fix

(In reply to comment #6)
> Created attachment 214350 [details] [diff]
> fix

Oops, forgot to include the javadoc changes in the last patch.
I played with the patch and don't like the new/changed behavior - it is too confusing, especially when I enable to show the enclosing brackets. Now with the patch, if I have

    public static void main(String[] args) {
        Try t= new Try();
        t.foo()<caret>;
    }

it does not highlight the curly braces and Ctrl+Shift+P takes me into the (). That's not good.


What I'd accept is if no matching bracket can be found (e.g due to compile errors, we'd highlight the opening (unclosed) bracket:

if (compare(one, two())<caret>
   ^

This would also allow to jump to the unmatched opening bracket using Ctrl+Shift+P.
(In reply to comment #9)
> it does not highlight the curly braces 
That was the plan, see comment 0.

> and Ctrl+Shift+P takes me into the ().
> That's not good.
So does the existing double-click-to-highlight-matching-brackets. While I admit that this is not ideal, I think it is OK (and it may be possible to improve this)

Look at it this way, when caret is placed next to a bracket - either before or after - one can argue that the bracket is selected. Making bracket matching work for only one of these positions can be said to be a bit arbitrary.

Also, more importantly, the old behavior has been there for a while and people are used to it. Getting rid of the old behavior is sort of a braking change. A couple of people in Eclipse team already asked me if the bracket highlighting got broken during M6.

> What I'd accept is if no matching bracket can be found (e.g due to compile
> errors, we'd highlight the opening (unclosed) bracket:
> 
> if (compare(one, two())<caret>
>    ^
> 
> This would also allow to jump to the unmatched opening bracket using
> Ctrl+Shift+P.
Why would you want to go to to the unmatched opening bracket? In such a case you really need to type the closing bracket and not jump to the unmatched opening bracket...
(In reply to comment #10)
> (In reply to comment #9)
> > it does not highlight the curly braces 
> That was the plan, see comment 0.
Well, that's a wrong plan then and gets my -1.

> > and Ctrl+Shift+P takes me into the ().
> > That's not good.
> So does the existing double-click-to-highlight-matching-brackets. While I admit
> that this is not ideal, I think it is OK (and it may be possible to improve
> this)
No, it is not OK. Let's say I type a condition and then want to go to the enclosing bracket, but now instead it jumps into the previous brackets.

> Also, more importantly, the old behavior has been there for a while and 
> people are used to it. Getting rid of the old behavior is sort of a braking 
> change. 
The old behavior was broken, that's why we decided to change it to a consistent behavior where we don't mark when outside.

> > if (compare(one, two())<caret>
> >    ^
> > 
> > This would also allow to jump to the unmatched opening bracket using
> > Ctrl+Shift+P.
> Why would you want to go to to the unmatched opening bracket?
For example to delete it, when it was inserted unnecessarily.
> What I'd accept is if no matching bracket can be found (e.g due to compile
> errors, we'd highlight the opening (unclosed) bracket:
> 
> if (compare(one, two())<caret>
>    ^
> 
> This would also allow to jump to the unmatched opening bracket using
> Ctrl+Shift+P.

This will not gel well with the proposed strategy in bug 373978 comment 0

> > and then we can decide how to proceed:
> > - if there are unmatched brackets, then skip other partition types
> > - otherwise, skip other partition types except for the default partition
(In reply to comment #12)
> > What I'd accept is if no matching bracket can be found (e.g due to compile
> > errors, we'd highlight the opening (unclosed) bracket:
> > 
> > if (compare(one, two())<caret>
> >    ^
> > 
> > This would also allow to jump to the unmatched opening bracket using
> > Ctrl+Shift+P.
> 
> This will not gel well with the proposed strategy in bug 373978 comment 0

Not sure, since we are in the same partition where we detect the unmatched bracket. I'm also fine with not doing this special dance and close this bug as WONTFIX.
(In reply to comment #13)
> I'm also fine with not doing this special dance and close this bug as
> WONTFIX.

I am OK either way :-) Markus, what do you say?
I agree that the proposed fix (comment 8) doesn't feel right when enclosing brackets are enabled. The term "enclosing" is clearly not applicable for the ')' on the left of the caret, and it's also hard to argue why "enclosing" is not symmetric.

For the "Matching bracket" options, I still find the old way of matching important. Matching the bracket on the left of the caret is not broken per se, it's just a different strategy tailored to different use cases (like the left-to-right typing mentioned in comment 0 / comment 4).

The match-after-closing-bracket behavior should only be implemented for the non-enclosing case.
Created attachment 214402
hack for comment 15

Here's a hack that implements comment 15 (not thoroughly checked, there could be better ways to implement this).

Note that master and this patch have bug 377417 for non-zero selections.
(In reply to comment #15)
> For the "Matching bracket" options, I still find the old way of matching
> important. 
You find the old way important because you are used to it? And, you are not using the enclosing brackets mode?

> Matching the bracket on the left of the caret is not broken per se,
> it's just a different strategy tailored to different use cases (like the
> left-to-right typing mentioned in comment 0 / comment 4).
> 
> The match-after-closing-bracket behavior should only be implemented for the
> non-enclosing case.

I do not like the different matching strategies in different modes. A user is likely to be confused when he moves from matching brackets mode to enclosing brackets mode or vice versa.

If match-after-closing-bracket behavior is a no go for enclosing brackets mode then I vote to close this bug as WONTFIX. I guess we will discuss this in today's call...

(In reply to comment #16)
> Created attachment 214402 [details] [diff]
> hack for comment 15
The hack needs to go in all clients, i.e. JavaEditor.gotoMatchingBracket() as well.
I agree with Deepak. I don't want to see a mix here. When we discussed to introduce the enclosing bracket support we explicitly agreed to change the matching behavior, see also bug 9503 comment 13.

As said before, a useful typing aid could be to highlight the non-matching bracket, but in this case I'd use a different color (e.g. red) to indicate this. And I would deal with this in a separate bug.
We discussed this in today's JDT UI call and decided to take a different approach where we apply the term "enclosing" to the pair directly to the left or right of the caret and not to some far away pair.
Created attachment 214484
fix 0.9

The patch implements a full-symmetric-consistent solution first mentioned in comment 3 and comment 4.

1. Bracket 'matching' happens when the caret is placed either before or after a bracket or when a bracket is explicitly selected.
2. In 'enclosing brackets' mode, when bracket matching does not happen as specified in 1, the enclosing brackets are found.

=> A user does not have to think about where to place the caret - before or after the bracket - to find the matching bracket.
=> Matching behavior across different modes is consistent.

In case of a tie ( | indicates caret)
- (|(
  ^ wins  -- caret inside bracket case wins

- )|)
    ^ wins -- caret inside bracket case wins

- )|(
  ^ wins   -- I know this is a bit arbitrary

The patch is not yet perfect, while all of the above works there are a few minor glitches around selection of length 1 and in isRecomputationOfEnclosingPairRequired which I will fix in the morning. However, let me know if you see anything wrong with what is described above.
(In reply to comment #20)
The API looks good and the described behavior is also good.

I didn't test non-zero selections, but I found that in "enclosing" mode, the updating fails when the caret moves from right to left over 'foo()'. I guess that's

> glitches around selection of length 1 and in
> isRecomputationOfEnclosingPairRequired

The rest looked good, also in the other modes, except for this in
'Matching bracket' (but not caret location) mode:

The behavior around 'th()' here is a bit peculiar:

    foo("".length());
    foo("".length() + 1);

The '(' after 'length' is never highlighted. This is already the case in master.
In master, the ')' of 'length()' is only highlighted when the caret is between the '()'. With the patch, that ')' is highlighted at more places around '()'.

I don't think we can do anything about the behavior on the first line (since the enclosing bracket should win), but on the second line with the caret after 'length()', I'd expect the '(' to be highlighted, not the ')'.
Created attachment 214523
patch for jdt ui
Created attachment 214524
patch for platform text

Phew! The main fix was simple enough but there were a few corner cases e.g. caret at first and last positions in a document. Also, I tweaked the tests so that what-you-see-is-what-you-get, earlier we tweaked the position of '%' in code which made it harder to read the test strings. I also added more tests to test the matching behavior at more locations.

(In reply to comment #21)
> The behavior around 'th()' here is a bit peculiar:
> 
>     foo("".length());
>     foo("".length() + 1);

Except the above everything else should work perfectly, including bug 377417. I think these patches can be released, and the remaining issues can be dealt with separately.
(In reply to comment #23)
> > The behavior around 'th()' here is a bit peculiar:
> > 
> >     foo("".length());
> >     foo("".length() + 1);
> 
> Except the above everything else should work perfectly, including bug 
> 377417. I think these patches can be released, and the remaining issues can 
> be dealt with separately.

Bug 377417 is not completely resolved to my satisfaction, please see my comment there. For the remaining issue please raise a separate bug.
Besides what I mentioned in bug 377317, I like the new behavior. It's much closer to what one expects.


Patches look good. Pushed to master:
http://git.eclipse.org/c/platform/eclipse.platform.text.git/commit/?id=1b02d37376c3050930a5c0e7cb577494e267828d

http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=d296fedb3fe5c10a96cb32ce002d80bf6842bf7f


[syntax highlighting] bracket highlighting should also work if caret is after the last bracket



Fixed bug 372516: [syntax highlighting] bracket highlighting should also work if caret is after the last bracket 