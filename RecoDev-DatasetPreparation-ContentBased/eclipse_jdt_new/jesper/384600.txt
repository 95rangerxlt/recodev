BETA_JAVA8

'this' keyword should not be allowed inside a lambda expression when the enclosing context does not allow 'this' to be used. Example:
public class Action<T> {
	
    public void f1(Object o) {}
    public void foo() {

    	f1( (t) -> { if (t == 1) return t; else return this;} ) ; 
}
}

This is in accordance with JLS 15.8.3

BETA_JAVA8

'this' keyword should not be allowed inside a lambda expression when the enclosing context does not allow 'this' to be used. Example:
public class Action<T> {
	
    public void f1(Object o) {}
    public void foo() {

    	f1( (t) -> { if (t == 1) return t; else return this;} ) ; 
}
}

This is in accordance with JLS 15.8.3
(In reply to comment #0)

Shouldn't that be 'public static void foo()', otherwise I don't see the problem?
(In reply to comment #1)
> (In reply to comment #0)
> 
> Shouldn't that be 'public static void foo()', otherwise I don't see the
> problem?

Yes, I think so.
I've worked on this, and also bug 382727 and got that fixed, by introducing a class LambdaScope which inherits from MethodScope. And that's when I found out how much Lambda stuff is missing (resolution, target (poly)types, effectively finals, code generation).

Are you interested in patches as I go along, or has you or somebody been working on this since July? Aren't you targetting Kepler SR1?
(In reply to comment #3)
> I've worked on this, and also bug 382727 and got that fixed, by introducing
> a class LambdaScope which inherits from MethodScope. And that's when I found
> out how much Lambda stuff is missing (resolution, target (poly)types,
> effectively finals, code generation).

We lost several people in the project and were a long period down to just
down to 2 engineers which was just enough to keep the Kepler release going.
We will be back at full strength end of this month, though the new engineers
will be in training mode for some time to come.

> Are you interested in patches as I go along, or has you or somebody been
> working on this since July? Aren't you targetting Kepler SR1?

Anirbhan is working on implementing sematic analysis support for lambda
bug 382701. Once he hooks up the new AST nodes in the resolution code
path properly, the semantic analysis project itself can broken down into
several smaller bugs with patches from you being welcome on them.

At any rate, I invite you to attach a patch with your solution already.
(In reply to comment #4)
> Anirbhan is working on implementing sematic analysis support for lambda
> bug 382701. Once he hooks up the new AST nodes in the resolution code
> path properly, the semantic analysis project itself can broken down into
> several smaller bugs with patches from you being welcome on them.

Great. I guess I could also help by writing some tests for the corner cases.

> At any rate, I invite you to attach a patch with your solution already.

I will do.
Tests released via commit: 414cc8525a87bc9f40f1eed7291fabbec694c674.

Fix was part of commit: 30ba2db951e79b89a330e1209e461b1c083d6de3 authored
by Jesper.
Actually, this bugs talks about only about lambda and that part is handled.
I am reopening and broadening it to include reference expressions.

The following code should not compile, but does:

// ---
interface I {
	void doit();
}
public class X {
	static void foo() {
		I i = this::foo;
	}
}
Fix and tests released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=a6e44391963b63fa0c27651827313192cc7a80a0


[1.8] 'this' should not be allowed in lambda/Reference expressions in contexts that don't allow it



Bug 384600 - [1.8] 'this' should not be allowed in lambda/Reference expressions in contexts that don't allow it 

Tests for bug 384600: This should not be allowed in static contexts. 