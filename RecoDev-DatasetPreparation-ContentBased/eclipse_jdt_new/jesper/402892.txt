BETA_JAVA8:

We need formatter support for JSR308 style annotations.

BETA_JAVA8:

We need formatter support for JSR308 style annotations.
Created attachment 228325
Jesper's patch from bug 400830 - 335 work

Patch under review.

This patch is missing a file FormatterJSR308AnnotationsTests.
Created attachment 228328
"Total" patch, where I'd renamed the test class to Formatter18Tests
Created attachment 228329
Patch for all 1.8 formatter work

This is an older patch - some of this is partially committed in master
Created attachment 228406
Jesper's patch for format support for 308 annotations - up to date
Jesper, we need a statement from you confirming you authored the code and have 
the rights to donate the code to Eclipse under the EPL for inclusion in 
future Eclipse releases.
(In reply to comment #5)
> Jesper, we need a statement from you confirming you authored the code and have
> the rights to donate the code to Eclipse under the EPL for inclusion in
> future Eclipse releases.
Sure: 

I authored 100% of the patches I'm contributing.
I have the rights to contribute this to Eclipse?
I am willing to license this as EPL as stated in the file header comments I'm uploaded.
(oops, typo questionmark in clause 2)

I authored 100% of the patches I'm contributing.
I have the rights to contribute this to Eclipse.
I am willing to license this as EPL as stated in the file header comments I'm uploaded.
To simplify the review and the CQ process, I am releasing those files
whose provenance can be clearly ascertained/established to be eclipse 
JDT/Core source base itself. 

A large part of the patch consists of data files which show pre-format
and post-format program contents - these are borrowed from existing 
eclipse source code base itself as documented below:

+------------------------------------+------------------------------------+
 New file created by the patch       |- Derived from existing file/method |
+------------------------------------+------------------------------------+
FormatterJSR308/test000/I_*.java       GrammarCoverageTests308.test023
FormatterJSR308/test001/X_*.java       GrammarCoverageTests308.test024
FormatterJSR308/test002/X_*.java       GrammarCoverageTests308.test001
FormatterJSR308/test003/X_*.java       GrammarCoverageTests308.test003
FormatterJSR308/test004/X_*.java       GrammarCoverageTests308.test006
FormatterJSR308/test005/X_*.java       GrammarCoverageTests308.test005
FormatterJSR308/test006/X_*.java       GrammarCoverageTests308.test003
FormatterJSR308/test007/X_*.java       GrammarCoverageTests308.test004
FormatterJSR308/test008/X_*.java       GrammarCoverageTests308.test007
FormatterJSR308/test009/X_*.java       GrammarCoverageTests308.test008
FormatterJSR308/test010/X_*.java       GrammarCoverageTests308.test000
FormatterJSR308/test011/X_*.java       GrammarCoverageTests308.test009
FormatterJSR308/test012/X_*.java       GrammarCoverageTests308.test010
FormatterJSR308/test013/X_*.java       GrammarCoverageTests308.test011
FormatterJSR308/test014/X_*.java       GrammarCoverageTests308.test012
FormatterJSR308/test015/X_*.java       GrammarCoverageTests308.test013
FormatterJSR308/test016/X_*.java       GrammarCoverageTests308.test014
FormatterJSR308/test017/X_*.java       GrammarCoverageTests308.test015
FormatterJSR308/test018/X_*.java       GrammarCoverageTests308.test016
FormatterJSR308/test019/X_*.java       GrammarCoverageTests308.test017
FormatterJSR308/test020/X_*.java       GrammarCoverageTests308.test018
FormatterJSR308/test021/X_*.java       GrammarCoverageTests308.test019
FormatterJSR308/test022/X_*.java       GrammarCoverageTests308.test020
FormatterJSR308/test023/X_*.java       GrammarCoverageTests308.test021
FormatterJSR308/test024/X_*.java       GrammarCoverageTests308.test022
FormatterJSR308/test025/X_*.java       GrammarCoverageTests308.test025
FormatterJSR308/test026/X_*.java       GrammarCoverageTests308.test026
FormatterJSR308/test027/X_*.java       GrammarCoverageTests308.test027
FormatterJSR308/test028/X_*.java       GrammarCoverageTests308.test028
FormatterJSR308/test029/X_*.java       GrammarCoverageTests308.test029
FormatterJSR308/test030/X_*.java       GrammarCoverageTests308.test030
FormatterJSR308/test031/X_*.java       GrammarCoverageTests308.test031
FormatterJSR308/test032/X_*.java       GrammarCoverageTests308.test032
FormatterJSR308/test033/X_*.java       GrammarCoverageTests308.test033
FormatterJSR308/test034/X_*.java       GrammarCoverageTests308.test034
FormatterJSR308/test035/X_*.java       GrammarCoverageTests308.test035
FormatterJSR308/test036/X_*.java       GrammarCoverageTests308.test036
FormatterJSR308/test037/X_*.java       GrammarCoverageTests308.test037
FormatterJSR308/test038/X_*.java       GrammarCoverageTests308.test038
FormatterJSR308/test039/X_*.java       GrammarCoverageTests308.test039

Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=fe98ddbed4cd1f8bb449a78291ed05ed04f18196
I also verified that the formatting looks reasonable for all the tests.
All but FormatterJSR308/test023 look OK. As part of review process of the
code changes, I'll see why we end up with that kind of formatting and raise
follow up bugs if needed.
Created attachment 228457
Jesper's patch for formatting 308 style annotations.

This is the portion that needs review and approval for release.

Jesper, the lambda & method reference tests are missing type annotations,
so they are not really testing that formatter works fine with 308 + 335.
Formatter work for 335 already has tests.
Oops. By mistake I ended up pushing the unreviewed/unapproved changes via
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=afe1aa1e23ce83b573f50388f1a50d564fe4b851.

This has been reverted via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3e03e3984540d3907fa7739b419f89dad9725944
Created attachment 228546
Jesper's patch with corrections from code review.

I finished one round of review and will look through the patch one
more time, before the CQ process.

Overall, the work looks solid - Thanks a lot.

Here are the comments/corrections I incorporated:

(1) formatInlineAnnotations: else {} is unnecessary as if returns.
(2) formatInlineAnnotations: extracted length of annotations array to hoist 
loop invariant computation.
(3) isNextTokenPunctuation: Eliminated comment processing. This is material 
for isClosingGenericToken from which this method seems to be borrowed, but
immaterial here.
(4) formatQualifiedTypeReference: extracted length of tokens into a local.
(5) For consistency's sake, let us use if (!condition) and not 
if (! condition)
(6) getDimensions: will not accept annotations with qualified names. 
I introduced a new method skipPastTypeAnnotations to handle this case.
(7) Why would PSTR's leading dimension formatting call to 
formatLeadingDimensions pass false for spaceBefore annotations while PQTR 
pass true to it ? I have uniformly made it into true - we may even 
considering removing this parameter ?
(8) Visit(ParameterizedQualifiedTypeReference, ...) has two calls to 
formatInlineAnnotations once outside the loop and once inside, folded these 
into one.
(9) formatExtraDimensions: pushed the computation of anchor into if 
(extraDimensions != 0)
(10) Varargs annotation printing is handled incorrectly. It should be handled 
in visit(Argument, ...) and not in visit(ArrayTypeReference) as otherwise 
we won't format this snippet correctly:

public class X {
	void foo(List<String> @Marker ... ls) {}
}
The following tests fail with this patch:
org.eclipse.jdt.core.tests.model.JavaSearchBugsTests.testBug185452()
org.eclipse.jdt.core.tests.model.SearchTests.testChangeClasspath2()
org.eclipse.jdt.core.tests.model.ResolveTests2.testBug227822a()
org.eclipse.jdt.core.tests.model.WorkingCopyOwnerTests.testSearch2()

However, if I run EunModelTests of which these are a part, all tests pass.
There is some flakiness in the suites.

Jesper, does anything look obvious ?
(In reply to comment #12)

> Here are the comments/corrections I incorporated:

Jesper, please look through these changes and let me know if something is
amiss. TIA.
(In reply to comment #14)
> Jesper, please look through these changes and let me know if something is
> amiss. TIA.
Ok, I will investigate the test failures and your notes, something should be ready for you tomorrow.
Created attachment 228555
Jesper's patch in final form after 2 rounds of review

I completed another round of review and in this round, fixed the
following issues:

(1) Adjusted various formatting/indenting issues.
(2) Fixed a bug in (my implementation) of skipPastTypeAnnotations.
(3) Removed various redundant bound checks. It is guaranteed that in
a QTR, annotations [][] will be either null or as long as the tokens.length.
(An element may be null, but the cell for its storage will exist)
Patch from comment#16 looks good to go. Review is complete. Will initiate
the CQ process.
Contribution review process complete and approvals are in place.
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=9617178877607b049b1a7c4f92c93a8d11facd28.
(In reply to comment #13)
> The following tests fail with this patch:
> org.eclipse.jdt.core.tests.model.JavaSearchBugsTests.testBug185452()
> org.eclipse.jdt.core.tests.model.SearchTests.testChangeClasspath2()
> org.eclipse.jdt.core.tests.model.ResolveTests2.testBug227822a()
> org.eclipse.jdt.core.tests.model.WorkingCopyOwnerTests.testSearch2()
> 
> However, if I run EunModelTests of which these are a part, all tests pass.
> There is some flakiness in the suites.
> 
> Jesper, does anything look obvious ?

Fixed with: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=5bca51a3a4b6130db814e9f9c75f049af2eaf04f


[1.8][formatter] Code formatter should understand type annotations



Follow on fix bug 402892 to address test failures in some runs. 

Fixed Bug 402892 - [1.8][formatter] Code formatter should understand type annotations 

Data files to test Bug 402892 - [1.8][formatter] Code formatter should understand type annotations - derived from eclipse sources 