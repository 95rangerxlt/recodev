BETA_JAVA8
interface I {
	
}
public class Action<T> {
	
	<K> Action(int i)  {
		
	}
	
	Action (int i1, int i2) {
		<?>this(i1);   //gives error:GOOD
	}
	
	public void f1(Object[] o[][]) {}
        public void foo() {
    	    I len =  List::<?>size;  // no error:BAD
        }
}

Just like explicit constrcutor invocations, method and const. references should also not accept wildcard type arguments

BETA_JAVA8
interface I {
	
}
public class Action<T> {
	
	<K> Action(int i)  {
		
	}
	
	Action (int i1, int i2) {
		<?>this(i1);   //gives error:GOOD
	}
	
	public void f1(Object[] o[][]) {}
        public void foo() {
    	    I len =  List::<?>size;  // no error:BAD
        }
}

Just like explicit constrcutor invocations, method and const. references should also not accept wildcard type arguments
Looking at the way it is done for explicit const. invocations I found that the grammar accepts wildcards but resolution rejects it. So perhaps this can be done during semantic analysis for method references as well.
Even lambda expressions currently allow wildcards

    	Action exp = new Action<>();
    	int x,y,z;
        I len6 = foo->exp.<?>method(x, y, z);

while the following is correctly rejected
     	Action exp = new Action<>();
    	int x,y,z;
	exp.<?>method(x, y, z);
Created attachment 225754
Patch for this issue

Added a check for the type arguments into ReferenceExpression, and also adds a test for this case and the lambda one.

MyClass1::<?>method as an error, but I'm not sure about MyClass2<?>::method - is  that an error as well?

This patch depends on the patches I've submitted for bug 382701.
Gerrit: https://git.eclipse.org/r/#/c/9914/
Jesper, now that the infrastructure has stabilized, if you can adjust
the patch and repost, I can take it forward. Thanks.
(In reply to comment #3)
> Created attachment 225754 [details]
> Patch for this issue
> 
> Added a check for the type arguments into ReferenceExpression, and also adds
> a test for this case and the lambda one.
> 
> MyClass1::<?>method as an error, but I'm not sure about MyClass2<?>::method
> - is  that an error as well?
> 
> This patch depends on the patches I've submitted for bug 382701.

Brought the patch up to date by synching with branch head, reviewed and
released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=7d431a6663c03691d383a66bc16841bb87e3308d.


A few nag reminders:

-- please remember to add your contribution details to copyright messages
-- please remember to add the JCP disclaimer to all modified files.
-- some of your junit test strings have "\r\n" in them, we use only "\n"


Thanks Jesper.
I was going to raise a new bug then I saw this. The following program doesn't compile but Javac accepts this:

public class X1  {
    public static void main(String argv[]) {
        I<?> i = (String s1, String s2) -> {};
    }
}
    
interface I<T> {
	public void foo(T t1, T t2);
}

Should we start accepting ? on the LHS?
(In reply to Jayaprakash Arthanareeswaran from comment #7)
> I was going to raise a new bug then I saw this. The following program
> doesn't compile but Javac accepts this:

This is unconnected to the original subject. 
 
> Should we start accepting ? on the LHS?

I don't know ! I'll investigate this and a raise a bug if needed. Thanks!


[1.8] Wildcard type arguments should be rejected for lambda and reference expressions



Fixed Bug 384687 - [1.8] Wildcard type arguments should be rejected for lambda and reference expressions 