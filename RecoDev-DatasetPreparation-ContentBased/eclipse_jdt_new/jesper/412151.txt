If a Repeatable annotation is present on an annotation declaration (T), semantics must be checked:
Informally:
 - The collections type's (TC) declaration must have a array of Ts as its value()
 - The @Retention meta-annotation of TC must at least include the retention of T
 - TC's @Targets, if specified, must be a subset or the same as T's @Targets
 - If T is @Documented, then TC should also TC be Documented
 - If T is @Inherited, then TC should also TC be @Inherited

If a Repeatable annotation is present on an annotation declaration (T), semantics must be checked:
Informally:
 - The collections type's (TC) declaration must have a array of Ts as its value()
 - The @Retention meta-annotation of TC must at least include the retention of T
 - TC's @Targets, if specified, must be a subset or the same as T's @Targets
 - If T is @Documented, then TC should also TC be Documented
 - If T is @Inherited, then TC should also TC be @Inherited
A concrete example that should show an error for the missing TC#value():

public class RepeatableAnnotations {
    public static @interface TC {
//        T[] value(); //missing
    }
    
    @Repeatable(TC.class) // spec says error should be here
    public static @interface T {}
    
    @T @T void doh() {}   // javac 1.8.0-ea-b108 only shows an error here
}
(In reply to comment #1)
> A concrete example that should show an error for the missing TC#value():
> 
> public class RepeatableAnnotations {
> public static @interface TC {
> //        T[] value(); //missing
> }
> 
> @Repeatable(TC.class) // spec says error should be here
> public static @interface T {}

Yep, I have this in place now.

> @T @T void doh() {}   // javac 1.8.0-ea-b108 only shows an error here
> }

Since compilation og T, TC and doh() may happen in separate compilation turns, I'm implementing the check both on checking the container's fitness on both the repeated annotations's declaration and use. This is also covered in the patch - later today.
Created attachment 235999
Almost complete patch for checking container annotations.

For review: This patch adds most of the support required (except for checking of Target, Documented and Inheirited)

Please review, specifically of you find the test cases acceptable.
Created attachment 236000
Corrected patch

I forgot to save two files before I generated the diff - oops.
Requesting review.

Note: I know about the NPEs and the failures in CompilerInvocationTest (total 4 errors 2 failures for RunAllJava8Tests)
(In reply to Jesper Moller from comment #4)
> Created attachment 236000 [details]
> Corrected patch

Thanks, I expect to review this before the end of the week.
There is more coming later today (targets, documented, inheirited)
Created attachment 236056
Complete patch

This patch adds all the checks required for checking the declaration of the repeatable annotation.

Should be done with this one, all that's missing is checking copyright notes and fixing CompilerInvokationTests, but that can be handled after the review.
One more note for the review: The terms 'container annotation' and 'containing annotation type' have been used a bit too loosely in the code thus far. I've made an attempt to fix that, but haven't succeeded: The fine point is:
A repeatable annotation type specifies it containing annotation type.
Two or more repeating annotations (of a repeatable type) at some construct are have their occurrences replaced by a container annotation (of the containing annotation type).

I'll fix this after the review, just so you know about the slightly confusing renames.

Next up is code generation, where I mean to get this right the first time around...
Review comments: Patch looks solid, a bunch of minor nits:

1. Change to comment in RepeatableAnnotationTest.test007() looks incorrect.
The containing annotation is repeatable, but does not repeat in the test.
Fixed.

2. Changed message "The container annotation @FooContainer contains non-default 
member \'doesntHaveDefaultValue\'\n" to being:
"The container annotation @FooContainer must define a default value for the
annotation attribute \'doesntHaveDefaultValue\'\n"
I think it is better to avoid "contains" and "non-default member"

3. test015 actually indicates a gap in incremental builder. Change to
FooContainer should trigger a build of Foo. Please take a look at ClassFileReader#has*Changes() methods. HOWEVER, let us raise a follow up
defect for this and address it there rather than here.

4.Changed message "The containing annotation @FooContainer is allowed at targets 
where the repeating annotations @Foo is not:" to 
"The containing annotation @FooContainer is allowed at targets where the 
repeatable annotation @Foo is not"

5.Change in a few other message from repeating to repeatable and container
to containing. Also in field/method names.

6. test027 and test028 are the same ?? Likewise test031 and test032 ??
I think you meant in these tests for TC to marked inherited/documented,
while T is not - Fixed.

7.Problem ids 900 and 901 are already in use. Adjusted.

8. Fixed CompilerInvocationTest failures.

9. ASTNode#resolveAnnotations - short-circuited the block that checks
for checkRepeatableAnnotation if  !recipient.isAnnotationType()

10. Also avoided an AIOOB in error cases in the same block. (in bad programs)

11. The two overloaded uses of checkContainingAnnotationTarget were
confusing at first site. I have a comment clarifying their intended
usage. Moved them next to each other.

12. Pertaining to the above, we actually double report an error about
targets in the following case: (Fixed - added test test035 for this)

// --
import java.lang.annotation.ElementType;
import java.lang.annotation.Repeatable;
import java.lang.annotation.Target;

@Target(ElementType.FIELD)
@interface TC {
	T [] value();
}

@Target(ElementType.TYPE)
@Repeatable(TC.class)
@interface T {
	
}

@T @T // <<--- we double report here.
public class X { 
	X f;
}

13. We fail to report an error for:

// --
import java.lang.annotation.ElementType;
import java.lang.annotation.Repeatable;
import java.lang.annotation.Target;

@Target(ElementType.TYPE_USE)
@interface TC {
	T [] value();
}

@Repeatable(TC.class)
@interface T {
	
}

@T @T // we double report here.
public class X { 
	X f;
}

// javac correctly complains.
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=ad2aca1c2960107e50013b8f7866125addb168b4

Two open issues before closing this ER:

(1) test015 actually indicates a gap in incremental builder. Change to
FooContainer should trigger a build of Foo. Please take a look at ClassFileReader#has*Changes() methods.

(2) We fail to report an error for:

// --
import java.lang.annotation.ElementType;
import java.lang.annotation.Repeatable;
import java.lang.annotation.Target;

@Target(ElementType.TYPE_USE)
@interface TC {
	T [] value();
}

@Repeatable(TC.class)
@interface T {
	
}

@T @T // we double report here.
public class X { 
	X f;
}

// javac correctly complains.

(Absence of a @Target meta annotation means all SE7 targets, not all targets)

Thanks Jesper.
(In reply to Srikanth Sankaran from comment #11)
 
> Two open issues before closing this ER:

These are substantially lower priority than the ER for code generation: bug 41214.
(In reply to Srikanth Sankaran from comment #12)
> (In reply to Srikanth Sankaran from comment #11)
>  
> > Two open issues before closing this ER:
> 
> These are substantially lower priority than the ER for code generation: bug
> 41214.

Copy paste problem: that should be bug 412149

> Two open issues before closing this ER:
> 
> (1) test015 actually indicates a gap in incremental builder. Change to
> FooContainer should trigger a build of Foo. Please take a look at
> ClassFileReader#has*Changes() methods.


Let us forget this issue, the released code correctly handles this scenario.
Only remaining issue is the one below:

Thanks for looking into it.

> (2) We fail to report an error for:
> 
> // --
> import java.lang.annotation.ElementType;
> import java.lang.annotation.Repeatable;
> import java.lang.annotation.Target;
> 
> @Target(ElementType.TYPE_USE)
> @interface TC {
> 	T [] value();
> }
> 
> @Repeatable(TC.class)
> @interface T {
> 	
> }
> 
> @T @T // we double report here.
> public class X { 
> 	X f;
> }
> 
> // javac correctly complains.
> 
> (Absence of a @Target meta annotation means all SE7 targets, not all targets)
> 
> Thanks Jesper.
(In reply to Srikanth Sankaran from comment #14)
> > Two open issues before closing this ER:
> > 
> > (1) test015 actually indicates a gap in incremental builder. Change to
> > FooContainer should trigger a build of Foo. Please take a look at
> > ClassFileReader#has*Changes() methods.
> 
> 
> Let us forget this issue, the released code correctly handles this scenario.
> Only remaining issue is the one below:
> 
> Thanks for looking into it.
> 
> > (2) We fail to report an error for:

Fix and tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=71dea98c1d878b28c8144aaff13d309d86912875


[1.8][compiler] Check repeating annotation's collection type



Follow up fix and tests for https://bugs.eclipse.org/bugs/show_bug.cgi?id=412151#c11 

Fixed Bug 412151 - [1.8][compiler] Check repeating annotation's collection type 