Code formatter should understand and process lambda expressions.

Code formatter should understand and process lambda expressions.
Created attachment 227857
Tests for lambda expression formatter

Separating these out was a pain, since I had botched the original patch :-(
Created attachment 227858
Just the lambda formatter for now

Here's the "just lambda expressions" part.
I released some code that is in the nature of enabling changes, but not integral
changes to the format capability of lambda expressions via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=dee658b9081a58fda5dde28cf93d4ce67448b764.

Core capability files under review.
(In reply to comment #3)
> I released some code that is in the nature of enabling changes, but not
> integral
> changes to the format capability of lambda expressions via
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
> ?h=BETA_JAVA8&id=dee658b9081a58fda5dde28cf93d4ce67448b764.
> 
> Core capability files under review.

I can rearrange the patches slightly to make them into smaller bits, if you want. Might make them more manageable (if nothing else, legally)
I made the following changes which are routine in nature

(1) Updated bug number in copy right to the present bug.
(2) Fixed missing JCL disclaimer in CodeFormatterVisitor & Formatter18Tests.
(3) In DefaultCodeFormatterConstants, provided cross references
in javadoc.
(4) CodeFormatterVisitor(LE):
Changed
this.scribe.printNextToken(SINGLETYPEREFERENCE_EXPECTEDTOKENS);
to
this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier);
(5) .project - changed the name from FormatterJsr308 -> FormatterJsr335
(6) Hooked up Formatter18Tests into RunAllJava8Tests

and released them here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=b64275d5d6005c49a64e53460529203088ebb2bb.

Before resolving, can you please do/check the following:

(1) We want a test that exercises the new options in their non-default
value settings.
(2) Given the following program:
interface I {
	int id(int x, int y);
}

public class X {
	I i = (x,y) -> x;
}
formatting turns it into:
interface I {
	int id(int x, int y);
}

public class X {
	I i = ( x, y) -> x;
}

The space before the first type elided lambda parameter looks most
certainly not what a user would want ??
Comments welcome on the formatter options for lambda expressions:
(This has already been released, so you can experiment with it)


	/**
	 * <pre>
	 * FORMATTER / Option to position the braces of a lambda block
	 *     - option id:         "org.eclipse.jdt.core.formatter.brace_position_for_lambda_body"
	 *     - possible values:   { END_OF_LINE, NEXT_LINE, NEXT_LINE_SHIFTED, NEXT_LINE_ON_WRAP }
	 *     - default:           END_OF_LINE
	 * </pre>
	 * @see #END_OF_LINE
	 * @see #NEXT_LINE
	 * @see #NEXT_LINE_SHIFTED
	 * @see #NEXT_LINE_ON_WRAP
	 * @since 3.9
	 */
	public static final String FORMATTER_BRACE_POSITION_FOR_LAMBDA_BODY = JavaCore.PLUGIN_ID + ".formatter.brace_position_for_lambda_body";	//$NON-NLS-1$

 	/**
 	 * <pre>
	 * FORMATTER / Option to insert a space after the -> in lambda expressions
	 *     - option id:         "org.eclipse.jdt.core.formatter.insert_space_after_lambda_arrow"
	 *     - possible values:   { INSERT, DO_NOT_INSERT }
	 *     - default:           INSERT
	 * </pre>
	 * @see JavaCore#INSERT
	 * @see JavaCore#DO_NOT_INSERT
	 * @since 3.9
	 */
	public static final String FORMATTER_INSERT_SPACE_AFTER_LAMBDA_ARROW  = JavaCore.PLUGIN_ID + ".formatter.insert_space_after_lambda_arrow";	//$NON-NLS-1$

 	/**
 	 * <pre>
	 * FORMATTER / Option to insert a space before lambda ->
	 *     - option id:         "org.eclipse.jdt.core.formatter.insert_space_before_lambda_arrow"
	 *     - possible values:   { INSERT, DO_NOT_INSERT }
	 *     - default:           INSERT
	 * </pre>
	 * @see JavaCore#INSERT
	 * @see JavaCore#DO_NOT_INSERT
	 * @since 3.9
	 */
	public static final String FORMATTER_INSERT_SPACE_BEFORE_LAMBDA_ARROW = JavaCore.PLUGIN_ID + ".formatter.insert_space_before_lambda_arrow";	//$NON-NLS-1$
Created attachment 228597
Patch for the problem in comment 5

That is, the extra space before an argument name with an elided type.

I will add more tests, but they're not ready yet.

This test should not affect the JSR308 formatter patch.
(In reply to comment #7)
> Created attachment 228597 [details]
> Patch for the problem in comment 5
> 
> That is, the extra space before an argument name with an elided type.

Thank you. Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=cf072eeff121940a541295553114f490c9a9bb69
Created attachment 228713
Patch for non-default options regarding lambda formatting
(In reply to comment #9)
> Created attachment 228713 [details]
> Patch for non-default options regarding lambda formatting

Thank you. Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=c67e828d3788591f96003d3b6db18c20724f7bf4


[1.8][formatter] Code formatter should understand lambda expressions.



Additional test for Bug 402173 - [1.8][formatter] Code formatter should understand lambda expressions 

Fix for issue raised during code review for Bug 402173 - [1.8][formatter] Code formatter should understand lambda expressions. 

Fix and tests for Bug 402173 - [1.8][formatter] Code formatter should understand lambda expressions. 

Enabling changes for Bug 402173 - [1.8][formatter] Code formatter should understand lambda expressions. 