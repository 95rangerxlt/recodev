The current check for duplicated annotations need a going over.
If an annotation T is repeated at its use, it should be allowed, if:
 - If the annotation declaration T has a Repeatable meta-annotation mentioning TC as the container
 - if TC is allowed as the target where T is repeated

If T and TC is both used in the same context, it is an error (even if neither T nor TC is repeated)

Further, if TC is deprecated, a deprecation warning should be issued, even if T is not deprecated.

We should have a configurable warning if the multiple T's aren't contiguous.

The current check for duplicated annotations need a going over.
If an annotation T is repeated at its use, it should be allowed, if:
 - If the annotation declaration T has a Repeatable meta-annotation mentioning TC as the container
 - if TC is allowed as the target where T is repeated

If T and TC is both used in the same context, it is an error (even if neither T nor TC is repeated)

Further, if TC is deprecated, a deprecation warning should be issued, even if T is not deprecated.

We should have a configurable warning if the multiple T's aren't contiguous.
Created attachment 235700
Initial patch for early review

This patch is not a final attempt:
Includes:
 - Picks up repeatable annotation info
 - Changes duplication-error for < JDK_1.8 to require 1.8
 - Gives error if repeatable annotation not marked at Repeated
 - Gives error if target of TC does not include annotation
 
 Misses:
  - Legal headers
  - Deprecation propagation from TC
  - Error if T is repeated and TC is present
  - Warning when annotations are repeated non-contiguously
  - Stores container in the binding - wasteful?
Created attachment 235701
mylyn/context/zip
Comment on attachment 235700
Initial patch for early review

Comments: Looks like a terrific start.

(0) Update copyrights, make sure JCP disclaimer is present in all modified/
new files.

(1) message 898: Is it better worded "... since its container annotation ..." ?
                                                   ^^^
(2) ProblemReporter#duplicateAnnotation: should be passed sourceLevel, not
complianceLevel. The latter is for bug compatibility with javac.

(3) TypeIds: Suggest remove the line between T_JavaLangAnnotationRepeatable
and the comment // If you add new type id, ...
It is meant to catch the eye of anyone adding a new type id and it is better
if it immediately follows the last type id. Also suggest remove noise white
space changes in this file.

(4) TagBits: Bit61 clashes with HasNonPrivateConstructor ? May be this is
not an issue since one is valid only for annotation types and the other for
non-annotation types ? Should AllStandardAnnotationsMask be updated too ? 
(not sure)

(5) BTB triggers a compiler warning - environment can be accessed as
this.environment and the parameter could be avoided.

(6) BTB#scanTypeForContainerAnnotation: do we want to execute the body
only if isAnnotationType() and just punt otherwise ?  

(7) I am not quite sure of the intended use of repeatableContainer. I think
you want this as an attribute of the annotation type. If so this field belongs
in STB and BTB and not at TypeBinding.

(8) Also is it better named containerAnnotation ?

(9) ConstantPool: Incorrectly mentions lambda support.

I need to review the changes in Annotation.java once more, but overall looks
good.
I'm unsure about the last requirement in the original description.

$ cat Y.java 
@java.lang.annotation.Repeatable(FooContainer.class) @interface Foo {
}
@Deprecated @interface FooContainer {
    Foo[] value();
}
@Foo @Foo public class Y {
   /* Should this give a warning? */
}
$ javac -Xlint Y.java
Y.java:1: warning: [deprecation] FooContainer in unnamed package has been deprecated
@java.lang.annotation.Repeatable(FooContainer.class) @interface Foo {}

javac b106 thinks the code is fine, but as I read the spec, a deprecation hint should be raised.

I will write on the spec list about this.
Created attachment 235771
More complete semantic check of repeated annotation

Srikanths review notes are addressed, but the deprecation is a hack. I'll describe the changes later today.

The patch may have conflicts, haven't pulled yet...
Created attachment 235772
mylyn/context/zip
Created attachment 235780
Third attempt at implementing JEP 120 annotation checks.

(In reply to comment #3)
> (0) Update copyrights, make sure JCP disclaimer is present in all modified/
> new files.

Done.

> (1) message 898: Is it better worded "... since its container annotation ..." ?
> ^^^
> (2) ProblemReporter#duplicateAnnotation: should be passed sourceLevel, not
> complianceLevel. The latter is for bug compatibility with javac.

Fixed.
 
> (3) TypeIds: Suggest remove the line between T_JavaLangAnnotationRepeatable
> and the comment // If you add new type id, ...
> It is meant to catch the eye of anyone adding a new type id and it is better
> if it immediately follows the last type id. Also suggest remove noise white
> space changes in this file.

Done (except for the noise, to keep the diff down)

> (4) TagBits: Bit61 clashes with HasNonPrivateConstructor ? May be this is
> not an issue since one is valid only for annotation types and the other for
> non-annotation types ? Should AllStandardAnnotationsMask be updated too ?
> (not sure)

I've cancelled this, since the binding caches the containerAnnotation anyway, there's no need to waste a bit on it, too.

> (5) BTB triggers a compiler warning - environment can be accessed as
> this.environment and the parameter could be avoided.

Fixed.

> (6) BTB#scanTypeForContainerAnnotation: do we want to execute the body
> only if isAnnotationType() and just punt otherwise ?

Yep, done.

> (7) I am not quite sure of the intended use of repeatableContainer. I think
> you want this as an attribute of the annotation type. If so this field belongs
> in STB and BTB and not at TypeBinding.

Done, even if it gives some duplication.

> (8) Also is it better named containerAnnotation ?

Done.

> (9) ConstantPool: Incorrectly mentions lambda support.

Oops.

> I need to review the changes in Annotation.java once more, but overall looks
> good.

Now there's more to review (see the tests...)
(In reply to Jesper Moller from comment #7)
> Created attachment 235780 [details]
> Third attempt at implementing JEP 120 annotation checks.

Thank you !

I expect to review this today and release it if no major issues are found.
However, on the warning about non-contiguous repeated annotations part: we
may have to defer this to later to a separate bug. Firstly, this being an
optional feature not mandated by JLS, falls under the category of niceties.

Much more importantly, anytime we add an option, we need to first get buy in
from the UI team - if they won't support it on the preferences page due to
perceived low signal to noise ratio (preference page clutter vs value)
then this will be dead code in the project.

Markus, would the UI team want and support an option to warn when repeated
annotations are not contiguous ? 

@Foo @Bar @Foo String x;  // warn about @Foo's not being grouped together.

javac 8b108 is silent on this. I have no strong opinions one way or other
except to prefer to separate it into a separate issue and tackle it after
core JEP 120 work is done.
(In reply to comment #8)
> However, on the warning about non-contiguous repeated annotations part: we
> may have to defer this to later to a separate bug. Firstly, this being an
> optional feature not mandated by JLS, falls under the category of niceties.

I can split this into a separate patch if you want.

> Much more importantly, anytime we add an option, we need to first get buy in
> from the UI team - if they won't support it on the preferences page due to
> perceived low signal to noise ratio (preference page clutter vs value)
> then this will be dead code in the project.

OK
Srikanth, I just found a bug in the handling of the "deprecation binding-clone" loop. I cloned the annotation just ONCE and set the replaced clone on every annotation source element, which is clearly broken. Instead, the compiler annotation must be replaced on every source annotation using the affected type.

I'm pretty sure I would have found this during testing of the code generation.

I will prepare a new patch shortly, and a test.
Created attachment 235791
Fixed patch which handles deprecation correctly for non-marker annotations
BTW, I took the deprecation part out of the latest patch, too.
(In reply to Jesper Moller from comment #10)
> Srikanth, I just found a bug in the handling of the "deprecation
> binding-clone" loop. I cloned the annotation just ONCE and set the replaced
> clone on every annotation source element, which is clearly broken. Instead,
> the compiler annotation must be replaced on every source annotation using
> the affected type.

OK, I'll take a look later today - but sight unseen, an observation: we should
not replace source annotations with container annotations at the AST level. I
don't think you are doing it, but mentioning it just the same even if it is a
bit obvious. (since the AST should be a faithful representation of what is in 
the source code).

With bindings we have a "little bit of" liberty, but may be not too much - 
these are not purely internal artifacts since DOM bindings and APT type mirrors 
are thin wrappers on top of compiler type bindings. I don't recall if we are
supposed to expose the container to the annotation processor or the repeating
annotations. If it is the latter, then replacing the annotations may be an
issue - Do you already know the answer ? If not I'll read up the spec as part
of the review.
(In reply to comment #13)
> (In reply to Jesper Moller from comment #10)
> > Srikanth, I just found a bug in the handling of the "deprecation
> > binding-clone" loop. I cloned the annotation just ONCE and set the replaced
> > clone on every annotation source element, which is clearly broken. Instead,
> > the compiler annotation must be replaced on every source annotation using
> > the affected type.
> 
> OK, I'll take a look later today - but sight unseen, an observation: we should
> not replace source annotations with container annotations at the AST level.

I don't.

> With bindings we have a "little bit of" liberty, but may be not too much -
> these are not purely internal artifacts since DOM bindings and APT type mirrors
> are thin wrappers on top of compiler type bindings.

All I'm doing is propagating the deprecatedness of the container into the binding of the annotation (held on the type). Perhaps this could be done in a nicer way, by having a replaceType  (or even 'markAsDeprecated' on the AnnotationBinding instead. For code generation, a 'markAsRepeated' will also come in handy).

> I don't recall if we are
> supposed to expose the container to the annotation processor or the repeating
> annotations. If it is the latter, then replacing the annotations may be an
> issue - Do you already know the answer ?

Not offhand - I'll follow up, too.
(In reply to comment #13)
> With bindings we have a "little bit of" liberty, but may be not too much -
> these are not purely internal artifacts since DOM bindings and APT type mirrors
> are thin wrappers on top of compiler type bindings. I don't recall if we are
> supposed to expose the container to the annotation processor or the repeating
> annotations. If it is the latter, then replacing the annotations may be an
> issue - Do you already know the answer ? If not I'll read up the spec as part
> of the review.

Checked the spec, we must support the extension to the language model API specifically javax.lang.model.AnnotatedConstruct.getAnnotationsByType(Class<A>), so some info must be present on the bindings, but I fully agree: No touching the AST itself.

I'll add a bug to handle this, too.
(In reply to Srikanth Sankaran from comment #8)
> Markus, would the UI team want and support an option to warn when repeated
> annotations are not contiguous ? 
> 
> @Foo @Bar @Foo String x;  // warn about @Foo's not being grouped together.
> 
> javac 8b108 is silent on this. I have no strong opinions one way or other
> except to prefer to separate it into a separate issue and tackle it after
> core JEP 120 work is done.

I also don't have a strong opinion, but I would leave it out for now. There are more situations like this where the spec allows weird code but discourages its use (e.g. an @Target that includes TYPE_USE as well as other element types). We may eventually want to add just a single option for "discouraged annotation constructs".
Patch looks good. I made a bunch of small changes, mostly cosmetic:

- Removed the changes in TypeBinding. These are not required.
- ASTNode#resolveAnnotations: Renamed implicitRepeatableContainers to be 
implicitContainerAnnotations
- ASTNode#resolveAnnotations: For the time being, backed out the change to
deprecation status propagation. The implemented logic makes sense to me, but
it is at odds with the spec. Per the spec "The only time a deprecation warning 
can occur for a construct which is implicitly declared is if a container 
annotation (§9.7.5) has a containing annotation type which is deprecated.", OIOW,
if T is deprecated and we see a use of TC, we must warn and not the other way
about - that does not make a whole lot of sense to me, but let us ask for 
clarification with specific examples before proceeding.
- ASTNode#resolveAnnotations: last loop is missing
    if (distinctAnnotations[i] == null) continue;
    This is needed to avoid NPEs for repeated non-repeatable annotations mixed
with repeated repeatable annotations. (see test007a)
- Annotation.java: The abstract method declaration:
public abstract void traverse(ASTVisitor visitor, BlockScope scope);
seems to have been deleted inadvertently. Restored.
- BTB: Pulled up the check for isAnnotationType() to call site.

Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=33e49b6e14282ee69dc2c2cf0c73bec5e674cdf2
(In reply to Jesper Moller from comment #0)

> We should have a configurable warning if the multiple T's aren't contiguous.

I seem to have glossed over this in comment#0 and should have alerted about
getting buy in from the UI team before investing your cycles - sorry about
that.
(In reply to Jesper Moller from comment #14)

> All I'm doing is propagating the deprecatedness of the container into the
> binding of the annotation (held on the type). 

Right. Comment#13 proved to be misplaced worry - When I saw the phrase "replace the annotation", I jumped the gun and assumed you are replacing repeating annotations with the container :)
(In reply to Srikanth Sankaran from comment #17)

> - ASTNode#resolveAnnotations: For the time being, backed out the change to
> deprecation status propagation. The implemented logic makes sense to me, but
> it is at odds with the spec. Per the spec "The only time a deprecation
> warning 
> can occur for a construct which is implicitly declared is if a container 
> annotation (§9.7.5) has a containing annotation type which is deprecated.",
> OIOW,
> if T is deprecated and we see a use of TC, we must warn and not the other way
> about -

No, that is not really what the spec says upon rereading. The wording is
confusing, I think it should say "The only time a deprecation warning 
can occur for a construct which is implicitly declared is if a repeated 
annotation has a containing/container annotation type which is deprecated."

We have also heard from the spec-list that the premise behind test009
is indeed correct. However,

I don't think the (backed out) implementation is what we want. In general
when X uses Y and Y is deprecated, we don't flag X as deprecated.
So the cloning and deprecation of the clone is not necessary. We should simply
emit a warning. javac 8b108 emits a warning at the declaration site of the
repeatable annotation rather than at the use site - we can do better.

I don't think in the following program a warning is warranted, but javac
emits it anyway:

@java.lang.annotation.Repeatable(FooContainer.class) @interface Foo { int value(); }
@Deprecated @interface FooContainer { Foo[] value(); }
@Foo(0) class X { }  // not repeated, container not used.
@Foo(2) class Y {  } // not repeated, container not used.

While implementing this, we should also make sure that the warning is
not issued if the use site itself is deprecated if suitable options are
in effect - See ASTNode.isTypeUseDeprecated(TypeBinding, Scope)
(In reply to comment #20)
> No, that is not really what the spec says upon rereading. The wording is
> confusing, I think it should say "The only time a deprecation warning
> can occur for a construct which is implicitly declared is if a repeated
> annotation has a containing/container annotation type which is deprecated."
> 
> We have also heard from the spec-list that the premise behind test009
> is indeed correct. However,
> 
> I don't think the (backed out) implementation is what we want. In general
> when X uses Y and Y is deprecated, we don't flag X as deprecated.
> So the cloning and deprecation of the clone is not necessary. We should simply
> emit a warning. javac 8b108 emits a warning at the declaration site of the
> repeatable annotation rather than at the use site - we can do better.

I fully agree, and will implement RSN.

> I don't think in the following program a warning is warranted, but javac
> emits it anyway:
> 
> @java.lang.annotation.Repeatable(FooContainer.class) @interface Foo { int
> value(); }
> @Deprecated @interface FooContainer { Foo[] value(); }
> @Foo(0) class X { }  // not repeated, container not used.
> @Foo(2) class Y {  } // not repeated, container not used.

javac b108 complains about the mention of FooContainer in @Repeatable of Foo, this is correct (we do too)
javac b108 doesn't complain deprecation of FooContainer with duplicate uses of @Foo - it should.

> While implementing this, we should also make sure that the warning is
> not issued if the use site itself is deprecated if suitable options are
> in effect - See ASTNode.isTypeUseDeprecated(TypeBinding, Scope)

Are you referring to a suppressWarnings constuct - I'll check that too? Thx for the pointer.
(In reply to Jesper Moller from comment #21)

> javac b108 complains about the mention of FooContainer in @Repeatable of
> Foo, this is correct (we do too)

Yes, you are right.

> > While implementing this, we should also make sure that the warning is
> > not issued if the use site itself is deprecated if suitable options are
> > in effect - See ASTNode.isTypeUseDeprecated(TypeBinding, Scope)
> 
> Are you referring to a suppressWarnings constuct - I'll check that too? Thx
> for the pointer.

I think suppress warning should already work - we just need a test for that.
What I was pointing was if X happens to be deprecated itself and uses Y which
is deprecated - we have an option controlling whether we should complain
about use of Y. Likewise if the deprecated entity originates from the same
translation unit, we don't always emit a warning.
The sole remaining issue of deprecation warning is substantially lower priority 
than the ER for code generation: bug 41214.
(In reply to Srikanth Sankaran from comment #23)
> The sole remaining issue of deprecation warning is substantially lower
> priority 
> than the ER for code generation: bug 41214.


Copy paste problem: that should be bug 412149
Created attachment 236435
Deprecation support - starting point

This should work - but I am noticing some strange issues with:

// -- X.java:

@java.lang.annotation.Repeatable(TC.class) 
@interface T {
  public int value() default -1;    
}

interface I<@T(1) @T(2) K> {
}

// TC.java
//@Deprecated
public @interface TC {
  public T[] value();     
}
// -- 

With or without the deprecated I am seeing some weird issued - that indicate
some for circularity/forward reference we are unprepared for:

I see: Type mismatch: cannot convert from Class<TC> to Class<? extends Annotation>

If you comment out I, problem goes away.  Please investigate, TIA.
(In reply to Srikanth Sankaran from comment #25)
> Created attachment 236435 [details]
> Deprecation support - starting point
> 
> This should work - but I am noticing some strange issues with:


I released support for the deprecation warning via: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3c8db8654fc8e2927c75863ec1232c9bc3800c9b

Raised https://bugs.eclipse.org/bugs/show_bug.cgi?id=419331 for the
forward reference issue - this is not connected to JEP120 support.


[1.8][compiler] Check validity of annotations which may be repeatable



Follow up fixes for Bug 412153 - [1.8][compiler] Check validity of annotations which may be repeatable 