interface I {
	public static void bar(int i) { }
	public default void bar() {}
}
 class Y implements I{
	
    public static void main(String[] args) {
    	new Y().ba(0);//Use quick assist for this error
	}
}

quick fix changes just the ba to bar (without mentioning / changing the parameter), but bar(int i) being static is not applicable in the context of new Y().

interface I {
	public static void bar(int i) { }
	public default void bar() {}
}
 class Y implements I{
	
    public static void main(String[] args) {
    	new Y().ba(0);//Use quick assist for this error
	}
}

quick fix changes just the ba to bar (without mentioning / changing the parameter), but bar(int i) being static is not applicable in the context of new Y().
reassigning to jdt/ui for comments
"Create method ba(int)" is the only valid quick fix option that we can have in this case.
The 3 quick fixes currently suggested at the error are:
1) Change to 'bar(..)'
2) Create method ba(int)
3) Add cast to 'new Y()'

Change to 'bar(..)' - It is not valid since static methods are not inherited from super interfaces.

Create method ba(int) - Valid.

Add cast to 'new Y()' - It is valid in case we have other classes like:
class BA extends Y {
	void ba(int i) {}
}
Then, the following result from the quick fix will be valid:
((BA) new Y()).ba(0);
Created attachment 245806
Fix+Test

(In reply to Noopur Gupta from comment #3)
> Change to 'bar(..)' - It is not valid since static methods are not inherited
> from super interfaces.
ScopeAnalyzer#addInherited should ignore static methods from super interfaces.
Verified that all tests are green with the fix. Markus, please have a look.
(In reply to Noopur Gupta from comment #4)
Perfect, thanks! Released with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=eb1168787713052fa398581234e73a01e77faaf9

JLS8 8.4.8 says "A class does not inherit static methods from its superinterfaces", so it's fine to skip such methods unconditionally.

Noopur also mentioned that the Quick Outline for Y still shows the static I#bar(int) when Ctrl+O has been pressed twice to show inherited members.

According to the language model, that would be wrong. But it's still helpful in practice to see such methods from super interfaces, so the Quick Outline takes a more liberal view here. It also shows private members from super types -- for the same reasons.


[1.8][quick fix] does not provide a "correct" fix when a static and a default method in interface



Bug 434159: [1.8][quick fix] does not provide a "correct" fix when a static and a default method in interface 