Created attachment 231871
Screenshot

Refactor > Introduce Indirection on default and static methods in an interface gives the error "Cannot place new method on an interface." as shown in the attached screenshot.

Expected result for the default method is shown below: 

public interface I {

	public static void foo(I i) {
		i.foo();
	}

	default void foo() {

	}
}

Created attachment 231871
Screenshot

Refactor > Introduce Indirection on default and static methods in an interface gives the error "Cannot place new method on an interface." as shown in the attached screenshot.

Expected result for the default method is shown below: 

public interface I {

	public static void foo(I i) {
		i.foo();
	}

	default void foo() {

	}
}
Created attachment 232267
Patch

Removed the check for target interface in IntroduceIndirectionRefactoring.setIntermediaryTypeName(String).

Renamed "class" to "type" in fields/methods/comments/messages.

IntroduceIndirectionRefactoring.checkFinalConditions(..)had the comment: "intermediary class is already non binary/non-enum/non-interface."
Changed it to "intermediary type is already non binary/non-enum".
But I could not see any change that would be required in the code following this comment, specific to the intermediary type being an interface.

Also, updated the FilteredTypesSelectionDialog's elementKinds as IJavaSearchConstants.CLASS_AND_INTERFACE to show interfaces also in the 'Choose 
Type' dialog.

IntroduceIndirectionRefactoring.copyExceptions(..) has changes part of bug 403924 (Replace usages of MethodDeclaration#thrownExceptions()). But it loses TYPE_USE annotations currently (bug 409586).

Also, the refactoring does not remove redundant modifiers while adding the new method to an interface.

Markus, please have a look.
Created attachment 232589
Patch + Tests

(In reply to comment #1)
 
> Removed the check for target interface in
> IntroduceIndirectionRefactoring.setIntermediaryTypeName(String).
...
> Also, updated the FilteredTypesSelectionDialog's elementKinds as
> IJavaSearchConstants.CLASS_AND_INTERFACE to show interfaces also in the
> 'Choose Type' dialog.

Added checks for the above to change the behavior only if source level is >= 1.8.

Also, added tests in the patch.
Created attachment 242006
Fix + Tests

Updated the patch based on master branch.

The behavior is similar to introduce indirection refactoring with an abstract class.

Changes related to the fix are very small as mentioned in the above comments.
Most of the changes in the patch are due to replacing "class" with "type" everywhere.

Manju, please review.
Should we have separate messages from refactoring.properties for 'class' and 'type' variants based on the level being < or >= 1.8?
(In reply to Noopur Gupta from comment #3)
> Created attachment 242006 [details] [diff]
> Fix + Tests

1. While creating the new static method in interface, why are the redundant public modifier not removed?
2. Regarding the modified message, we have the same concern in bug 410056. Markus what is your opinion?
3. Consider the below code snippet, I8 is an interface in Java 1.8 project and A7 is in a Java 1.7 project:
package p2;

import p1.I8;

public class A7 {
	void foo(I8 i) {
		i.defaultM2(); // Invoke 'Introduce Indirection'
	}
}

If the target is chosen as I8, then error message is displayed "Cannot place a new method in interface". 
Since I8 is in a Java 1.8 project, can't we create a static method in I8?

4.Similarly when 'Introduce Indirection' is invoked from a Java 1.8 project and if the target is in Java 1.7 project, then currently the we create static method in Java 1.7 interface which results in compiler errors.

5. While testing found that trying to access a static interface method from a 1.7 project gives compiler error. Discussed with Jay and he has raised the concern in bug 390889 comment 49. Separate bug will be raised by Jay if this issue is not already being discussed in another bug.
Created attachment 242120
Fix + Tests

(In reply to Manju Mathew from comment #5)
> 1. While creating the new static method in interface, why are the redundant
> public modifier not removed?
As mentioned in comment #1 (and bug 409906 comment #3), removing redundant modifiers was not handled as I expected bug 71627 to handle that for all refactorings. However, fixed it for Introduce indirection in the attached patch.

> 3 and 4.
After discussion following bug 390889 comment 49, it looks like we should allow adding the new static method in a target interface only when both the source and target projects are >= 1.8. Updated patch accordingly.

Manju, please have a look.
Looks good, thanks. Released with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=e01fd4fbc98253da7f6289cae92721071c39a317


[1.8][introduce indirection] Unable to introduce indirection on methods in an interface



Fixed bug 409723: [1.8][introduce indirection] Unable to introduce indirection on methods in an interface - updated tests 

Bug 409723: [1.8][introduce indirection] Unable to introduce indirection on methods in an interface 

Fixed bug 409723: [1.8][introduce indirection] Unable to introduce indirection on methods in an interface 

Fixed bug 409723: [1.8][introduce indirection] Unable to introduce indirection on methods in an interface 