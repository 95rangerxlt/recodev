package com.test;

class TestNPE {
	public static final C c = new C(); // Inline all references of 'c'
	private void test1() {
		int n = c.foo(0);
		test2(c);
	}

	private void test2(C m) {}
}

class C {
	int foo(int x) {
		return x;
	}
}
---------------------------------------------------------------
Inline all references of 'c' at the line with comment in the above example.
In the 'Inline Constant' dialog, click 'Preview', click 'Back' and click 'Preview' again. We get the following exception:

java.lang.reflect.InvocationTargetException
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:422)
	at org.eclipse.ltk.internal.ui.refactoring.RefactoringWizardDialog2.run(RefactoringWizardDialog2.java:331)
	at org.eclipse.ltk.ui.refactoring.RefactoringWizard.createChange(RefactoringWizard.java:663)
...
...
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring.getInitializer(InlineConstantRefactoring.java:800)
	at org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring.checkFinalConditions(InlineConstantRefactoring.java:815)
	at org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run(CheckConditionsOperation.java:85)
...

package com.test;

class TestNPE {
	public static final C c = new C(); // Inline all references of 'c'
	private void test1() {
		int n = c.foo(0);
		test2(c);
	}

	private void test2(C m) {}
}

class C {
	int foo(int x) {
		return x;
	}
}
---------------------------------------------------------------
Inline all references of 'c' at the line with comment in the above example.
In the 'Inline Constant' dialog, click 'Preview', click 'Back' and click 'Preview' again. We get the following exception:

java.lang.reflect.InvocationTargetException
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:422)
	at org.eclipse.ltk.internal.ui.refactoring.RefactoringWizardDialog2.run(RefactoringWizardDialog2.java:331)
	at org.eclipse.ltk.ui.refactoring.RefactoringWizard.createChange(RefactoringWizard.java:663)
...
...
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring.getInitializer(InlineConstantRefactoring.java:800)
	at org.eclipse.jdt.internal.corext.refactoring.code.InlineConstantRefactoring.checkFinalConditions(InlineConstantRefactoring.java:815)
	at org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run(CheckConditionsOperation.java:85)
...
Created attachment 237637
Patch

This happens as we set some fields to null in the finally block of InlineConstantRefactoring.checkFinalConditions(IProgressMonitor pm) on clicking 'Preview'. These fields are required again when we click 'Preview' after 'Back'.
Hence, these fields should not be discarded until the wizard is closed. 

Attached a patch for this. Markus, please review.
Nulling out these fields in checkFinalConditions(..) is indeed wrong.

Released comment 1 as http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=e0cfd640a64b3c30d32caf5e30f0655be9aad507

But this is not enough to make checkFinalConditions(..) fully idempotent.

Since fSelectionCuRewrite is already initialized in the constructor and fDeclarationCuRewrite is initialized in checkInitialConditions(..), they eventually accumulate changes from multiple invocations of checkFinalConditions(..). This can be seen when you go to the Preview a second time: The tree shows multiple equivalent changes.

The solution is to clear them using CURewrite#clearASTAndImportRewrites():
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=805f3226ea786b17c648114ca0785896a5c8e6ca


[inline] NPE in preview of inline constant refactoring



Bug 422307: [inline] NPE in preview of inline constant refactoring 

Bug 422307: [inline] NPE in preview of inline constant refactoring 