Once the final solution in bug 381443 is released two changes are needed in JDT/UI:

(1) Add a new preference option, late candidates where (bug 381443 comment 49):

@NonNull parameter not annotated in overriding method
@NonNull parameter form overridden method not annotated
Overridden @NonNull parameter not annotated

Option values are Error/Warning/Ignore

(2) Adjust currently failing test NullAnnotationsQuickFixTest.testChangeParameter3c()
I'll post a patch for that one in a second.

Once the final solution in bug 381443 is released two changes are needed in JDT/UI:

(1) Add a new preference option, late candidates where (bug 381443 comment 49):

@NonNull parameter not annotated in overriding method
@NonNull parameter form overridden method not annotated
Overridden @NonNull parameter not annotated

Option values are Error/Warning/Ignore

(2) Adjust currently failing test NullAnnotationsQuickFixTest.testChangeParameter3c()
I'll post a patch for that one in a second.
Created attachment 225651
proposed test change

The proposed tiny change for the mentioned test.
(In reply to comment #1)
> Created attachment 225651 [details]
> proposed test change
> 
> The proposed tiny change for the mentioned test.

Obviously, this requires the final solution from bug 381443, for which I'm just doing a final test run before release.
Let's use this one:
> @NonNull parameter not annotated in overriding method

Noopur, could you have a look? This bug is just about the preference (i.e. not about adding a quick fix / clean up).

When adding new options on the Errors/Warnings page, it's usually easiest to search for references or open a call hierarchy for a similar option (e.g. JavaCore.COMPILER_PB_REDUNDANT_NULL_ANNOTATION), and then imitate what's been done for that option.
Created attachment 225802
Patch

Added the preference, '@NonNull' parameter not annotated in overriding method, for the JavaCore constant COMPILER_PB_NONNULL_PARAMETER_ANNOTATION_DROPPED.

Markus, thanks for the hint. Please review the patch.
Thanks, Noopur. Also for spotting and fixing the other problems nearby.

I know I said we're not looking at a quick fix / clean up, but when I checked the solution, I realized that the quick fix is already available. Bug 381443 just added an option to toggle this problem on and off. But now, the multi-fix didn't work any more in this example:

public class Bug381443 {
    private class Foo {
        void foo(@NonNull Integer foo) {
        }
    }

    private class Bar extends Foo {
        @Override void foo(Integer foo) {
        }
    }

    private class Bar2 extends Foo {
    	@Override void foo(Integer foo) {
    	}
    }
}

Fixed this in NullAnnotationsCleanUp and released the whole fix as http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=fd541d2f3fb968c3db6606d53a2e7b9cf084a389
(In reply to comment #1)
> Created attachment 225651 [details] [diff]
> proposed test change
> 
> The proposed tiny change for the mentioned test.

I forgot to release this. Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=5f0b41f0164318b11e29d8d3ce49257248d5f6d1


UI changes for bug 381443 (@NonNull parameter not annotated in overriding method)



Bug 398211: UI changes for bug 381443 (@NonNull parameter not annotated in overriding method) 

Bug 398211: UI changes for bug 381443 (@NonNull parameter not annotated in overriding method) 