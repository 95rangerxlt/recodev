The "Convert to lambda expression" quick assist should avoid redundant 'this' or class names in the generate lambda.

In the example below, the first 3 method references can be converted into a lambda that doesn't refer to 'this' or 'Claxx'. If the method name is not ambiguous, we should use the short form.

import java.util.function.Consumer;

public class Claxx {
	void doInBackground() throws Exception {
		post(Claxx::execute);
		absorb(Claxx::executeGiven);
		post(this::executeObject);
		
		absorb(Claxx::executeObject);
		post(() -> execute());
		post(() -> executeGiven(this)); // not convertible
		post(() -> executeObject());
	}
	
	void post(Runnable r) {
		r.run();
	}
	void absorb(Consumer<Claxx> c) throws Exception {
		c.accept(this);
	}
	
	static void execute() {
		System.out.println("exec!");
	}
	static void executeGiven(Object o) {
		System.out.println("exec " + o);
	}
	void executeObject() {
		System.out.println("exec " + this);
	}
}

The "Convert to lambda expression" quick assist should avoid redundant 'this' or class names in the generate lambda.

In the example below, the first 3 method references can be converted into a lambda that doesn't refer to 'this' or 'Claxx'. If the method name is not ambiguous, we should use the short form.

import java.util.function.Consumer;

public class Claxx {
	void doInBackground() throws Exception {
		post(Claxx::execute);
		absorb(Claxx::executeGiven);
		post(this::executeObject);
		
		absorb(Claxx::executeObject);
		post(() -> execute());
		post(() -> executeGiven(this)); // not convertible
		post(() -> executeObject());
	}
	
	void post(Runnable r) {
		r.run();
	}
	void absorb(Consumer<Claxx> c) throws Exception {
		c.accept(this);
	}
	
	static void execute() {
		System.out.println("exec!");
	}
	static void executeGiven(Object o) {
		System.out.println("exec " + o);
	}
	void executeObject() {
		System.out.println("exec " + this);
	}
}
Created attachment 248539
Patch

The short form should not be used if there are type arguments with the method reference, which will be lost in the short form.
Attached the fix and tests. Markus, please review.
Created attachment 248541
Patch

This is the correct patch.
Looks good. I personally find
!(expr instanceof ThisExpression) || methodReference.typeArguments().size() != 0
harder to understand than
!(expr instanceof ThisExpression && methodReference.typeArguments().size() == 0)
, so I'd make good use of the "Pull negation up" quick assist.
Thanks Markus. Released with:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=8aa1c58b02024dd3cd008dba8a819400d166cd98


[quick assist] "Convert to lambda expression" should avoid redundant 'this' or class name



Fixed bug 449107: [quick assist] "Convert to lambda expression" should avoid redundant 'this' or class name 