Im testing my Java software with Junit and JFCUnit. It is a SWING Application.
With JFCUnit I can do things like :

Object goButton = helper.findButton("GO", frame, 0);
assertNotNull(goButton);
System.out.println(goButton.getClass().getName());
assertEquals(goButton.getClass().getName(),"javax.swing.JButton");
>> helper.enterClickAndLeave(this, "GO", frame); <<

The last line does not work within Eclipse. Neither does
>> helper.enterClickAndLeave(this, (AbstractButton)goButton);  <<

The test works if it is started outside Eclipse. 
The button gets clicked .

Question: Does Eclipse "eat" the click event because it does not support SWING. 

Workaround: I have to start the tests by hand.

If the app without tests is started from within Eclipse everything works fine.

Michael Ruppert

Im testing my Java software with Junit and JFCUnit. It is a SWING Application.
With JFCUnit I can do things like :

Object goButton = helper.findButton("GO", frame, 0);
assertNotNull(goButton);
System.out.println(goButton.getClass().getName());
assertEquals(goButton.getClass().getName(),"javax.swing.JButton");
>> helper.enterClickAndLeave(this, "GO", frame); <<

The last line does not work within Eclipse. Neither does
>> helper.enterClickAndLeave(this, (AbstractButton)goButton);  <<

The test works if it is started outside Eclipse. 
The button gets clicked .

Question: Does Eclipse "eat" the click event because it does not support SWING. 

Workaround: I have to start the tests by hand.

If the app without tests is started from within Eclipse everything works fine.

Michael Ruppert
How exactly do you run the tests? Do you run them inside the Eclipse VM from a 
plugin or do you run it in an external VM?

The recommended way is to run the tests in a separate VM and the Eclispe JUnit 
plugin will support this.
The JUnit plugin is now available. Using it will start all test in a separate 
VM.

Ok to close ?
no answer, closing


JFCUnit test fails with Eclipse but works from command line.



Added ICompilationUnit.NO_AST (bug 58782) 