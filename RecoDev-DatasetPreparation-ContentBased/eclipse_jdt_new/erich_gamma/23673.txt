The JUnit PDE plugin requires a whole whack of stuff be included in the test 
target before it will run.  For example, you need JDT, UI, Compare, ... to be 
in the TARGET just to run you test case.  This is a major problem for people 
who are developing plugins not related to JDT etc or, in fact, which have no UI 
at all.

This situation is a result of the test runner applications being in the same 
plugin as the JUnit PDE UI launcher code.  These need to be split such that the 
former is in a runtime plugin and the later is in a dev-time plugin.  

This will require:
- split the pde junit plugin 
- remove all of the irrelevant prereqs from the runtime (leave and optional one 
for the UI plugin)
- Change the Launcher to NOT  add all of the plugins to the plugin path of the 
target

That should be about it.  There are a few imported classes which will also have 
to be copied into the runtime plugin but mostly related to messages.

This will GREATLY improve the story and the lives of people testing more 
discrete plugins.

The JUnit PDE plugin requires a whole whack of stuff be included in the test 
target before it will run.  For example, you need JDT, UI, Compare, ... to be 
in the TARGET just to run you test case.  This is a major problem for people 
who are developing plugins not related to JDT etc or, in fact, which have no UI 
at all.

This situation is a result of the test runner applications being in the same 
plugin as the JUnit PDE UI launcher code.  These need to be split such that the 
former is in a runtime plugin and the later is in a dev-time plugin.  

This will require:
- split the pde junit plugin 
- remove all of the irrelevant prereqs from the runtime (leave and optional one 
for the UI plugin)
- Change the Launcher to NOT  add all of the plugins to the plugin path of the 
target

That should be about it.  There are a few imported classes which will also have 
to be copied into the runtime plugin but mostly related to messages.

This will GREATLY improve the story and the lives of people testing more 
discrete plugins.
Waiting for PDE support so that the pde.junit launcher can reuse the same 
launching infrastructure as PDE. 

This is a comment for the new org.eclipse.pde.junit.runtime in 3.0M3

I use the new "JUnit Plug-In Test" with coretestapplication for testing my basic
plugins that don't require any ui. 
Unfortunately the plugin requires org.eclipse.ui which is true for
UITestApplication.java but not for CoreTestApplication.java

For my purpose setting the ui requirement to optional in the plugin.xml solved
the problem.





Created attachment 5974
Manifest with org.eclipse.ui as optional
this was addressed some time ago


JUnit PDE plugin runtime too cumbersome [JUnit]

