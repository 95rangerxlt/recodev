Admittedly it is rare to directly instantiate inner classes, but I
noticed that if I declare a variable which is an inner class, but I
don't use the outer class anywhere, then organize imports will not pull
in the appropriate outer class. Furthermore, if I insert the import
statement by hand, then the next time I do an organize imports, it
removes the line I inserted, and the class fails to compile!

For example, in java.awt.geom, it uses inner classes of the various 2D
shape classes to provide instances of different precision (yes, I know
that's crap design, but it's what we have to live with). Therefore, in
Java2D it is perfectly common and acceptable to have code like the
following:

    GeneralPath path = new GeneralPath();
    path.append(new Rectangle2D.Double(2, 12, 46, 36), false);

Organize imports should recognize that it needs to import
java.awt.geom.Rectangle2D, but doesn't.

Only tested in v1.0

Admittedly it is rare to directly instantiate inner classes, but I
noticed that if I declare a variable which is an inner class, but I
don't use the outer class anywhere, then organize imports will not pull
in the appropriate outer class. Furthermore, if I insert the import
statement by hand, then the next time I do an organize imports, it
removes the line I inserted, and the class fails to compile!

For example, in java.awt.geom, it uses inner classes of the various 2D
shape classes to provide instances of different precision (yes, I know
that's crap design, but it's what we have to live with). Therefore, in
Java2D it is perfectly common and acceptable to have code like the
following:

    GeneralPath path = new GeneralPath();
    path.append(new Rectangle2D.Double(2, 12, 46, 36), false);

Organize imports should recognize that it needs to import
java.awt.geom.Rectangle2D, but doesn't.

Only tested in v1.0
fixed > 20020425


Organize imports doesn't cope with inner classes

