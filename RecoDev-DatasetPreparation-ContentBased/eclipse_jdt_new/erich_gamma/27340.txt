Build 20021127

When using assertEquals(String, String, String), I find it harder to understand 
what was the reason of the failure with the new 'smart' string comparison.

For example, I often get something like:
  expected:<...> but was:<...\n
	ResourceDelta(/P/src)[*]>
Before I used to have:
  expected:<P[*]: {CHILDREN}\n
	src[*]: {CHILDREN}\n
		[default][*]: {CHILDREN}\n
			X.java[+]: {}> 
  but was:<P[*]: {CHILDREN | CONTENT}\n
	src[*]: {CHILDREN}\n
		[default][*]: {CHILDREN}\n
			X.java[+]: {}\n
	ResourceDelta(/P/src)[*]>
which would tell me that a cu was added but a non-java resource delta was also 
generated.

Build 20021127

When using assertEquals(String, String, String), I find it harder to understand 
what was the reason of the failure with the new 'smart' string comparison.

For example, I often get something like:
  expected:<...> but was:<...\n
	ResourceDelta(/P/src)[*]>
Before I used to have:
  expected:<P[*]: {CHILDREN}\n
	src[*]: {CHILDREN}\n
		[default][*]: {CHILDREN}\n
			X.java[+]: {}> 
  but was:<P[*]: {CHILDREN | CONTENT}\n
	src[*]: {CHILDREN}\n
		[default][*]: {CHILDREN}\n
			X.java[+]: {}\n
	ResourceDelta(/P/src)[*]>
which would tell me that a cu was added but a non-java resource delta was also 
generated.
FYI, I wrote my own assertEquals as follows:

public static void assertEquals(String message, String expected, String actual) 
{
	if (expected == null && actual == null)
		return;
	if (expected != null && expected.equals(actual))
		return;
	String formatted;
	if (message != null) {
		formatted = message+".\n"; //$NON-NLS-1$
	} else {
		formatted = ""; //$NON-NLS-1$
	}
	formatted = 
		formatted
		+ "----------- Expected -----------\n" //$NON-NLS-1$
		+ showLineSeparators(expected)
		+ "\n------------ but was ------------\n" //$NON-NLS-1$
		+ showLineSeparators(actual)
		+ "\n-----------------------------------"; //$NON-NLS-1$
	fail(formatted);
}
/*
 * Shows the line separators in the given String.
 */
protected static String showLineSeparators(String string) {
	StringBuffer buffer = new StringBuffer();
	int length = string.length();
	for (int i = 0; i < length; i++) {
		char car = string.charAt(i);
		switch (car) {
			case '\n': 
				buffer.append("\\n\n"); //$NON-NLS-1$
				break;
			case '\r':
				if (i < length-1 && string.charAt(i+1) == '\n') 
{
					buffer.append("\\r\\n\n"); //$NON-NLS-1$
					i++;
				} else {
					buffer.append("\\r\n"); //$NON-NLS-1$
				}
				break;
			default:
				buffer.append(car);
				break;
		}
	}
	return buffer.toString();
}
fixed - there is now an inspect button that shows the differences between the 
expect and actual result


JUnit: Comparison failure with ... losing context [JUnit]

