Using my own wizard I create java projects. The class path is set to use my own 
classpath libraries only. The problem is, that the class path gets not resolved 
and also the package explorer throws a null pointer exception. When I restart 
eclipse all library entries get resolved, but before that the project cannot be 
used.


I use 




javaProject.setRawClasspath((IClasspathEntry[]) cp.toArray(new 
ClasspathEntry[cp.size()]), new SubProgressMonitor(monitor, 1));




to set the class path in the newly created project. 




The exception reads as following:




!ENTRY org.eclipse.ui 4 4 Mar 24, 2003 15:01:14.65


!MESSAGE Unhandled exception caught in event loop.


!ENTRY org.eclipse.ui 4 0 Mar 24, 2003 15:01:14.85


!MESSAGE java.lang.ClassCastException


!STACK 0


java.lang.ClassCastException


	at org.eclipse.jdt.ui.JavaElementSorter.compare(JavaElementSorter.java:209)


	at org.eclipse.jface.viewers.ViewerSorter$1.compare(ViewerSorter.java:169)


	at java.util.Arrays.mergeSort(Arrays.java:1237)


	at java.util.Arrays.mergeSort(Arrays.java:1245)


	at java.util.Arrays.sort(Arrays.java:1185)


	at org.eclipse.jface.viewers.ViewerSorter.sort(ViewerSorter.java:167)


	at org.eclipse.jface.viewers.StructuredViewer.
getSortedChildren(StructuredViewer.java:562)


	at org.eclipse.jface.viewers.AbstractTreeViewer$1.run(AbstractTreeViewer.
java:301)


	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69)


	at org.eclipse.jface.viewers.AbstractTreeViewer.
createChildren(AbstractTreeViewer.java:289)


	at org.eclipse.jface.viewers.AbstractTreeViewer.
handleTreeExpand(AbstractTreeViewer.java:697)


	at org.eclipse.jface.viewers.AbstractTreeViewer$4.
treeExpanded(AbstractTreeViewer.java:709)


	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:
177)


	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:81)


	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:840)


	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:865)


	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:849)


	at org.eclipse.swt.widgets.Tree.wmNotifyChild(Tree.java:1894)


	at org.eclipse.swt.widgets.Control.WM_NOTIFY(Control.java:3814)


	at org.eclipse.swt.widgets.Composite.WM_NOTIFY(Composite.java:642)


	at org.eclipse.swt.widgets.Control.windowProc(Control.java:2814)


	at org.eclipse.swt.widgets.Display.windowProc(Display.java:2365)


	at org.eclipse.swt.internal.win32.OS.CallWindowProcW(Native Method)


	at org.eclipse.swt.internal.win32.OS.CallWindowProc(OS.java:1236)


	at org.eclipse.swt.widgets.Tree.callWindowProc(Tree.java:156)


	at org.eclipse.swt.widgets.Tree.WM_LBUTTONDOWN(Tree.java:1502)


	at org.eclipse.swt.widgets.Control.windowProc(Control.java:2797)


	at org.eclipse.swt.widgets.Display.windowProc(Display.java:2365)


	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)


	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:1303)


	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1547)


	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1402)


	at org.eclipse.ui.internal.Workbench.run(Workbench.java:1385)


	at org.eclipse.core.internal.boot.InternalBootLoader.
run(InternalBootLoader.java:845)


	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)


	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)


	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.
java:39)


	at sun.reflect.DelegatingMethodAccessorImpl.
invoke(DelegatingMethodAccessorImpl.java:25)


	at java.lang.reflect.Method.invoke(Method.java:324)


	at org.eclipse.core.launcher.Main.basicRun(Main.java:291)


	at org.eclipse.core.launcher.Main.run(Main.java:747)


	at org.eclipse.core.launcher.Main.main(Main.java:583)

Using my own wizard I create java projects. The class path is set to use my own 
classpath libraries only. The problem is, that the class path gets not resolved 
and also the package explorer throws a null pointer exception. When I restart 
eclipse all library entries get resolved, but before that the project cannot be 
used.


I use 




javaProject.setRawClasspath((IClasspathEntry[]) cp.toArray(new 
ClasspathEntry[cp.size()]), new SubProgressMonitor(monitor, 1));




to set the class path in the newly created project. 




The exception reads as following:




!ENTRY org.eclipse.ui 4 4 Mar 24, 2003 15:01:14.65


!MESSAGE Unhandled exception caught in event loop.


!ENTRY org.eclipse.ui 4 0 Mar 24, 2003 15:01:14.85


!MESSAGE java.lang.ClassCastException


!STACK 0


java.lang.ClassCastException


	at org.eclipse.jdt.ui.JavaElementSorter.compare(JavaElementSorter.java:209)


	at org.eclipse.jface.viewers.ViewerSorter$1.compare(ViewerSorter.java:169)


	at java.util.Arrays.mergeSort(Arrays.java:1237)


	at java.util.Arrays.mergeSort(Arrays.java:1245)


	at java.util.Arrays.sort(Arrays.java:1185)


	at org.eclipse.jface.viewers.ViewerSorter.sort(ViewerSorter.java:167)


	at org.eclipse.jface.viewers.StructuredViewer.
getSortedChildren(StructuredViewer.java:562)


	at org.eclipse.jface.viewers.AbstractTreeViewer$1.run(AbstractTreeViewer.
java:301)


	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69)


	at org.eclipse.jface.viewers.AbstractTreeViewer.
createChildren(AbstractTreeViewer.java:289)


	at org.eclipse.jface.viewers.AbstractTreeViewer.
handleTreeExpand(AbstractTreeViewer.java:697)


	at org.eclipse.jface.viewers.AbstractTreeViewer$4.
treeExpanded(AbstractTreeViewer.java:709)


	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:
177)


	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:81)


	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:840)


	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:865)


	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:849)


	at org.eclipse.swt.widgets.Tree.wmNotifyChild(Tree.java:1894)


	at org.eclipse.swt.widgets.Control.WM_NOTIFY(Control.java:3814)


	at org.eclipse.swt.widgets.Composite.WM_NOTIFY(Composite.java:642)


	at org.eclipse.swt.widgets.Control.windowProc(Control.java:2814)


	at org.eclipse.swt.widgets.Display.windowProc(Display.java:2365)


	at org.eclipse.swt.internal.win32.OS.CallWindowProcW(Native Method)


	at org.eclipse.swt.internal.win32.OS.CallWindowProc(OS.java:1236)


	at org.eclipse.swt.widgets.Tree.callWindowProc(Tree.java:156)


	at org.eclipse.swt.widgets.Tree.WM_LBUTTONDOWN(Tree.java:1502)


	at org.eclipse.swt.widgets.Control.windowProc(Control.java:2797)


	at org.eclipse.swt.widgets.Display.windowProc(Display.java:2365)


	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)


	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:1303)


	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1547)


	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1402)


	at org.eclipse.ui.internal.Workbench.run(Workbench.java:1385)


	at org.eclipse.core.internal.boot.InternalBootLoader.
run(InternalBootLoader.java:845)


	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)


	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)


	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.
java:39)


	at sun.reflect.DelegatingMethodAccessorImpl.
invoke(DelegatingMethodAccessorImpl.java:25)


	at java.lang.reflect.Method.invoke(Method.java:324)


	at org.eclipse.core.launcher.Main.basicRun(Main.java:291)


	at org.eclipse.core.launcher.Main.run(Main.java:747)


	at org.eclipse.core.launcher.Main.main(Main.java:583)
Cast exception occurs in JDT/UI
This can't be done (currently). The cast exceptions occurs from the fact the 
the JavaElementSorter assumes that the objects to be sorted are of type 
IJavaElement. I guess this is not the case for your own elements.

For 2.1 there is nothing we can do here.
No action planned to support non Java element sorting in the 
JavaElementSorter. You have to write your own sorter. 
I'm actually not sure whether the problem is really connected to the sorter. 
The problem occures in case a classpath container cannot be resolved or does 
not exist. In either case I do not insert anything objects into the java model 
that I created using non public api and I would never insert my objects of my 
own classes into the java model. Because of that the problem seams to be 
located inside the classpath resolving mechanism and is not really a ui problem.
One possibility would be that somehow an object of type ClassPathContainer 
type gets passed to the JavaElementSorter.
Erich, can you comment on this possibility.
I have just observed the identical stack trace when bringing up the project 
with unresolvable ClassPath Containers. Having debuged this I can see this 
happening only if you have more than 1 unresolved container. The following 
code in JavaElementSorter (193-210) is at fault:

------
if (cat1 == PACKAGEFRAGMENTROOTS) {
	IPackageFragmentRoot root1= getPackageFragmentRoot(e1);
	IPackageFragmentRoot root2= getPackageFragmentRoot(e2);
	if (!root1.getPath().equals(root2.getPath())) {
		int p1= getClassPathIndex(root1);
		int p2= getClassPathIndex(root2);
		if (p1 != p2) {
			return p1 - p2;
		}
	}
}
// non - java resources are sorted using the label from the viewers label 
provider
if (cat1 == PROJECTS || cat1 == RESOURCES || cat1 == RESOURCEFOLDERS || cat1 
== STORAGE || cat1 == OTHERS) {
	return compareWithLabelProvider(viewer, e1, e2);
}
		
String name1= ((IJavaElement) e1).getElementName();
String name2= ((IJavaElement) e2).getElementName();

----

Note that the if(cat1==PACKAGEFRAGMENTROOT) has an ability to continue the 
logic in some cases, this will invariably fail on the line that casts e1 to 
IJavaElement when e1 is ClassPathContainer. This I think should be fixed by 
making sure that inside that if there's alway a return statement.

The reason why that if falls through in this case is because root1.getPath() 
compares equals to root2.getPath as both of these are dummy "Non-Resolvable" 
entries as created by JavaElementSorter.getPackageFragmentRoot itself.


*** Bug 41210 has been marked as a duplicate of this bug. ***
Still getting this exception in 2.1.2 and it could been have fixed long before 
the 2.1.2 release.
Fixed the JavaElementSorter to handle this case. Adapted the 
PackageExplorerContentProvider to filter out non resolvable containers. This 
is consistent with the way we handle class path variables. 

(Gunnar bug fix reminders are good - patches are even better...)
Will this be in 2.1.3?
it didn't make it into 2.1.3


Classpath Library Entries unresolved



 35574 Classpath Library Entries unresolved 

 35574 Classpath Library Entries unresolved 