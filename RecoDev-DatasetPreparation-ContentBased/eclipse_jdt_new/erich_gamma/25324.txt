Hi,

I'm writing a Cactus Plugin that extends the JUnit Plugin and I need to know 
when the tests have finished running in the TestRunner. There is a nice 
ITestRunListener interface for that. My idea was thus to implement this 
interface and somehow register my listener to the TestRunner 
(RemoteTestRunnerClient). However:

1/ Currently the RemoteTestRunnerClient implementation only supports one 
listener
2/ There is no API in TestRunnerViewPart to get access to the TestRunner

I am attaching a patch that should provide this facility. However, I need your 
help to know if this is the right approach or not.

Thank you
-Vincent

Hi,

I'm writing a Cactus Plugin that extends the JUnit Plugin and I need to know 
when the tests have finished running in the TestRunner. There is a nice 
ITestRunListener interface for that. My idea was thus to implement this 
interface and somehow register my listener to the TestRunner 
(RemoteTestRunnerClient). However:

1/ Currently the RemoteTestRunnerClient implementation only supports one 
listener
2/ There is no API in TestRunnerViewPart to get access to the TestRunner

I am attaching a patch that should provide this facility. However, I need your 
help to know if this is the right approach or not.

Thank you
-Vincent
Created attachment 2267
Allow several listeners to be added
Note: There is a bug in my attached patch: the Vector() is not initialized. It 
should read:

	private Vector fListeners = new Vector();

Sorry.
-Vincent


Did you consider adding an extension point to the junit plugin that allows to 
listen for listener? For example something like

   <extension point="org.eclipse.jdt.junit.testRunListeners">
      <testRunListener class="..."/>
   </extension>

Where class implements ITestRunListener. 
Using an extension point has the benefit that no internal classes like the 
RemoterTestRunnerClient or the TestRunnerViewPart need to be exposed as API. 
I guess I was waiting for you to suggest something like this ;-) I am new to 
plugin dev and I'll have to do some research to find out how to create one's 
own extension points in order to add that to the JUnit plugin... 

That solves the external access. However, we still need to modify the internal 
junit plugin classes to accept several listeners, right (and this is the patch 
I have submitted)? 

Ok, I'll get back to you and resubmit a full patch which includes the listener 
extension point.

Thanks

correct we will have to change the code to support multiple listeners and the 
way you do it in the patch is OK. 


Hi,

I am also working on the Cactus plugin for Eclipse. I am trying to add an 
extension point to the JUnit such as the one you mentioned.
The problem I ran into is the following :
the way I did it before the extension point was to find the JUnitView and 
register the ITestRunListener implementation from the Cactus plugin thanks to 
the patch from Vincent. Now to register the listener using the extension 
point, how do I find the already existing instance of this listener ?
Do I have to add a parameter to the extension point :
   <extension point="org.eclipse.jdt.junit.testRunListeners">
      <testRunListener class="..." adapter="myAdapter"/>
   </extension>

so that it knows which class to call in order to obtain the existing instance 
of the listener ?

Thanks,

Julien
This looks like progress.
As you point out the JUnitResultView should not be used to get at the 
listeners. I'd suggest a scheme where all the listener handling is moved out of 
the View class. A good candidate is the JUnitPlugin class. As a first step the 
JUnitPlugin view can provide the methods to notify the listeners 
(fireTestRunStarted and friends), the View can then call these methods. Once 
this is in place the next refactoring step can be done.
For the moment RemoteTestRunnerClient is responsible for notifying the 
listeners. Do you mean that methods (fireTestRunStarted,...) should be added 
to the JUnitPlugin class for this goal?
Created attachment 2840
Multiple TestRun listeners extension
Here is a patch for multiple listeners support. All the listener handling is 
done in the JUnitPlugin class, which has 2 new public methods : 
addTestRunListener() and getTestRunListeners(). An extension point has been 
added to the JUnit plugin like you suggested :
   <extension point="org.eclipse.jdt.junit.testRunListeners">
      <testRunListener class="..."/>
   </extension>
Can you tell me if this is ok for integration with the current JUnit plugin 
development stream ?

Thanks,

Julien
Thanks for the patch. I'll look into it as soon as I can.
Created attachment 2841
Files not included in the patch (extension point schema and documentation)
Hi,

do you know when the patch could be integrated to the development stream ?
We are intending to release the Eclipse plugin for Cactus pretty soon, that's 
why it would be great that this modification be part of the next Eclipse 
release (M5 ?).

Thanks,

Julien
apologies for the delay - changed to P2 and marked as M5.

We have to have a good Cactus integration for Eclipse.
Released into 20030206

The patch looked good - thanks!

I have moved the ITestRunnerClient to an API package: org.eclipse.jdt.junit and 
this will break your existing code.

The other things I've changed is to protect the plugin against failures in 
contributed test run listeners.



There is likely one more API change for RC2 (caused by a critical bug fix). A 
test name isn't unique and the listener methods should also get a unique Id for 
the test to be executed:
	public void testStarted(String testId, String testName);
	public void testEnded(String testId, String testName);
	public void testFailed(int status, String testId, String testName, 
String trace);	





Ability to know when tests are finished [junit]



Bugzilla Bug 25324  Ability to know when tests are finished [junit] 