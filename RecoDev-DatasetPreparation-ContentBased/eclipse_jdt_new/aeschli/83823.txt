This bug applies to 3.1M4:

Organize import adds static imports for constants which are declared in a parent
class. More specifically I have a class MathArray which declares the following:

public class MathArray implements Cloneable, Serializable {

  public enum Type {
    // allowed types for the internal array
    INT, DOUBLE, COMPLEX;

    // returns the type of the internal array
    public static Type getType(Object array) {
      if (!array.getClass().isArray())
        throw new IllegalArgumentException("Non-array object provided");
      return Type.valueOf(array.getClass().getComponentType().getSimpleName()
          .toUpperCase().replaceAll("\\W+",""));
    }
  };
 ....

When I use INT,DOUBLE and COMPLEX in the inherited class Matrix organize import
adds the following lines:

import static org.nevec.prima.numeric.MathArray.Type.COMPLEX;
import static org.nevec.prima.numeric.MathArray.Type.DOUBLE;
import static org.nevec.prima.numeric.MathArray.Type.INT;

and I get for each line the warning 'The import .... is never used'. Sure, the
enumeration is part of the parent class and should therefore not be imported
statically.

This bug applies to 3.1M4:

Organize import adds static imports for constants which are declared in a parent
class. More specifically I have a class MathArray which declares the following:

public class MathArray implements Cloneable, Serializable {

  public enum Type {
    // allowed types for the internal array
    INT, DOUBLE, COMPLEX;

    // returns the type of the internal array
    public static Type getType(Object array) {
      if (!array.getClass().isArray())
        throw new IllegalArgumentException("Non-array object provided");
      return Type.valueOf(array.getClass().getComponentType().getSimpleName()
          .toUpperCase().replaceAll("\\W+",""));
    }
  };
 ....

When I use INT,DOUBLE and COMPLEX in the inherited class Matrix organize import
adds the following lines:

import static org.nevec.prima.numeric.MathArray.Type.COMPLEX;
import static org.nevec.prima.numeric.MathArray.Type.DOUBLE;
import static org.nevec.prima.numeric.MathArray.Type.INT;

and I get for each line the warning 'The import .... is never used'. Sure, the
enumeration is part of the parent class and should therefore not be imported
statically.
Can't reproduce your scenario. Matrix extends MathArray? Why whould it then need
no import for MathArray.Type.COMPLEX?

I would be glad if you have a more complete code snipped.
Sorry, you're right I was quite unclear in this bug report: it actually deals
with using an enumeration inside a switch block. This switch block resides
inside the mul method of a class Matrix which extends MathArray:

public class Matrix extends MathArray {

  ....

 /**
   * Multiply with another matrix
   */
  public Matrix mul(MathArray b) {
    int[] b_dim = b.getDimensions();
    if (b_dim.length!=2)
      throw new IllegalArgumentException ("b is not a Matrix");
    if (b_dim[0] != dimensions[1])
      throw new IllegalArgumentException("Matrices do not have to correct "
          + "dimensions for multiplication.");
    int[] newDim = new int[] { dimensions[0], b_dim[1] };
    Matrix newMat = new Matrix(this.type, newDim);
    for (int i = 0; i < dimensions[0]; i++)
      for (int j = 0; j < b_dim[1]; j++)
        for (int k = 0; k < dimensions[1]; k++) {

// switch/case block which probably confused 'organize imports'
          switch (type) {
            case INT:
            case DOUBLE:
              newMat.add(this.getDouble(i, k) * b.getDouble(k, j), i, j);
              break;
            case COMPLEX:
              newMat.add(this.getComplex(i, k).mul(b.getComplex(k, j)), i, j);
          }
        }
    return newMat;
  }
}

The 'type' field is declared in MathArray as:

protected Type type;

So, the static imports were probably added because 'organize import' found
constants from the enumeration Type in the switch/case block of the method
above. However, if you use an enumeration in a switch statement then the Java
compiler assumes that all constants in the case statements are taken from that
enumeration. So, there is no static import needed. 
fixed in latest


Organize import adds unnecessary static imports [code manipulation]

