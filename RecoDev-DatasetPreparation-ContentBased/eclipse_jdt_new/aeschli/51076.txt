Observe this example:

    public class Test {
	class Foo {
		void foo() { x = 4; }
	}
	void foo() {
		bar(new Runnable() {
			public void run() { x = 5; }
		});
	}
	void bar(Runnable runner) { }
    }

Quick-fix markers are activated for "x = 4" and "x = 5".
For "x = 4", there is no suggestion to add a field to 'Test'.
For "x = 5", there is a suggestion to add a field to ''. This should be 'Test'

Observe this example:

    public class Test {
	class Foo {
		void foo() { x = 4; }
	}
	void foo() {
		bar(new Runnable() {
			public void run() { x = 5; }
		});
	}
	void bar(Runnable runner) { }
    }

Quick-fix markers are activated for "x = 4" and "x = 5".
For "x = 4", there is no suggestion to add a field to 'Test'.
For "x = 5", there is a suggestion to add a field to ''. This should be 'Test'
fixed the wrong label > 20040209

The 'add in outer' proposal only shows up for variables in anonymous classes. I
don't want to add that to normal inner classes to avoid a long list of poposals.
Could you explain what, to you, the difference is between an anonymous inner 
class and a "normal" inner class? 

class A {
   void foo() {
      ... quick fix proposal here suggests add field to A
   }
   Runnable runner = new Runnable() {
      public void run() {
          ...quick fix proposal here suggests add field to both runner and A
      }
   }
   class B {
      ...quick fix proposal here suggests only add field to B.
      ...why not also to A? This is a very common pattern to me, actually.
   }
}
If this is very common pattern to you I can add it. I happen to never do that.
Adding a field to an anonymous class makes mostly no sense, so that's why I 
added an extra proposal to add in the outer.

Reopen the bug if you are conviced that this a common pattern. I would only 
offer to add it in the directly enclosing type, would that be ok?
A main problem is to keep the number of quick fixes limited and avoid that you 
have to page through the list.
I will wait to see if others find my use case prevalent enough also.

Talking about anonymous inner classes... If you implement a mouselistener and 
you want to animate dragging the mouse, a localized field may be useful.



Quick fix misses and presents wrong name for target field class



51076 Source > Generate Getter and Setter menu item named inconsistently [code manipulation] 