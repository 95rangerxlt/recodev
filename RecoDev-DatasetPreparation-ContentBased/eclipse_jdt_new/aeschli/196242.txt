I use QuickFix to write my code for me.  So, before bar() exists, I'll write:

private void foo() {
	bar();<cursor here>
}

and as soon as I've typed the semicolon, I type ctl-1 to bring up the quickfix that will create bar() for me.  But it hasn't analyzed the code I've typed in yet, so it tells me, "No suggestions available".  So I hit esc, wait a moment, and do it again.  I'd appreciate it if, when it thinks there are no suggestions available, it double-checked to see whether any suggestions have just become available, thanks to the most recent keystrokes.  It obviously doesn't take very long, and it would smooth my workflow significantly.

I experience this on Mac and Windows both, and I think I noticed it still in 3.3, but it's basically been the behavior as long as I've been using Eclipse and my primary version is 3.2.1 - that is to say, I don't think this is a platform- or release-specific issue.

I use QuickFix to write my code for me.  So, before bar() exists, I'll write:

private void foo() {
	bar();<cursor here>
}

and as soon as I've typed the semicolon, I type ctl-1 to bring up the quickfix that will create bar() for me.  But it hasn't analyzed the code I've typed in yet, so it tells me, "No suggestions available".  So I hit esc, wait a moment, and do it again.  I'd appreciate it if, when it thinks there are no suggestions available, it double-checked to see whether any suggestions have just become available, thanks to the most recent keystrokes.  It obviously doesn't take very long, and it would smooth my workflow significantly.

I experience this on Mac and Windows both, and I think I noticed it still in 3.3, but it's basically been the behavior as long as I've been using Eclipse and my primary version is 3.2.1 - that is to say, I don't think this is a platform- or release-specific issue.
Thanks a lot for the good example.

The problem is that when we look for the location to jupt to, we are still looking at the annotations before the reconciler updates them.
So the fix is to wait (or enforce) the reconcile in org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.computeQuickAssistProposals(IQuickAssistInvocationContext)

Dani, how can we do this?
>or enforce) the reconcile
This wouldn't work: only the editor reconcile call updates the annotations.

There are two delays:
1) until the reconciler kicks in
2) until the reconciler has finished its work

Therefore you need to have two different listeners:
1. add a IJavaReconcilingListener to the editor (if it is a CU editor)
2. add a document listener to the document
==> whenever you get a documentAboutToBeChanged you need to wait for the reconciled. This has the advantage that you get the new AST for free.

NOTE: make sure to check for cancelled progress monitor. If so you need to wait for the next reconciled.
Would it work to just ask the ASTProvider for an AST?

No, due to 1) Maybe we could put that into the AST provider but so far it does not know about the document.
See also bug 193711 (re-calculate on Ctrl+1 when proposals already shown).
(In reply to comment #5)
> See also bug 193711 (re-calculate on Ctrl+1 when proposals already shown).

One minor difference in my proposal is that I'm only suggesting it for when the system doesn't initially have any quick fixes; I've never noticed the problem in a case where it has some suggestions, just not the one I want.  I'm not sure which approach is better, but I think the empty_initial-slate condition could avoid some of the risks mentioned in 193711.
(In reply to comment #6)
I think the two requests are somewhat orthogonal, and both should be implemented. Bug 193711 should always work, and this bug would make the second Ctrl+1 unnecessary when it is safe to do it automatically (with "No suggestions available").
The problem is that the reconcile listers are notified before annotations are updated:

org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile()
public void reconcile(IRegion partition) {
  IProblemRequestorExtension e= getProblemRequestorExtension();
  if (e != null) {
    try {
      e.beginReportingSequence();
      super.reconcile(partition); // notification sent
    } finally {
      e.endReportingSequence(); // all annotations updated
    }
..
}
Created attachment 77017
suggested patch

Suggested patch moves AST notification to 'reconciled()' which is called after all strategies have performed reconcile.

Dani, do you release when the patch is ok for you?
*** Bug 193711 has been marked as a duplicate of this bug. ***
Created attachment 77042
improved patch (fixed possible deadlock)
Created attachment 77375
Modified patch

Thanks for the patch Martin. I committed a modified version of it (see attached patch):
- always send the reconciled in the composite strategy
- assert for fAst being null when aboutToBeReconciled is called
- renamed performReconcile(...) to reconcile(...)
- no longer access fAst in (old) performReconcile but return the AST
- removed superfluous catch of JME
- added @since tags and added more Javadoc

Please review.
Fixed in HEAD.
Available in builds > N20070830-0010.


[quick fix] Work around QuickFix Latency



Fixed bug 196242: [quick fix] Work around QuickFix Latency 