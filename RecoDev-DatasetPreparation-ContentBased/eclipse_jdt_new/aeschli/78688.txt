I had this code which needs fixing where marked.
% cat Test.java
import java.util.LinkedHashMap;

public class Test<K, V>
{
    public void check()
    {
        final LinkedHashMap<K, V> data = new LinkedHashMap<K, V>();
        final Integer x = data.entrySet(); // this line needs fixing.
    }
}
<<<<
So I did Ctrl-1 to get the quickfix and selected "Change type of 'x' 
to 'Set<Map.Entry<K,V>>'" - this gives a drop down of choices ..

Set<Map.Entry<K,V>>
Collection<Map.Entry<K,V>>
Iterable<Map.Entry<K,V>>


So I choose Iterable<Map.Entry<K,V>> but notice the code is inserted 
incorrectly -- I get
       final Iterable<Entry<K,V x = data.entrySet(); // this line needs fixing.
                               ^^^^^ missing terminating >>

I had this code which needs fixing where marked.
% cat Test.java
import java.util.LinkedHashMap;

public class Test<K, V>
{
    public void check()
    {
        final LinkedHashMap<K, V> data = new LinkedHashMap<K, V>();
        final Integer x = data.entrySet(); // this line needs fixing.
    }
}
<<<<
So I did Ctrl-1 to get the quickfix and selected "Change type of 'x' 
to 'Set<Map.Entry<K,V>>'" - this gives a drop down of choices ..

Set<Map.Entry<K,V>>
Collection<Map.Entry<K,V>>
Iterable<Map.Entry<K,V>>


So I choose Iterable<Map.Entry<K,V>> but notice the code is inserted 
incorrectly -- I get
       final Iterable<Entry<K,V x = data.entrySet(); // this line needs fixing.
                               ^^^^^ missing terminating >>
Here is another alternative that also gives screwy code - however in this case 
it is more than just the >> missing - the type is wrong.
% cat Test.java
import java.util.AbstractCollection;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;


public final class Test<K, V>
extends AbstractMap<K, V>
implements Map<K, V> {
    private final LinkedHashMap<K, Inner<V>> mData = new LinkedHashMap<K, 
Inner<V>>();

    public Set<Map.Entry<K, V>> entrySet()
    {
        return null;
    }

    public Collection<V> values()
    {
        return new AbstractCollection<V>()
        {
            public Iterator<V> iterator()
            {
//                final Iterator<Inner<V>> raw = Test.this.mData.values
().iterator(); // this is what I expected
                final Integer raw = Test.this.mData.values().iterator(); // do 
Ctrl-1 fix
                return new Iterator<V>() {
                    public boolean hasNext()
                    {
                        return raw.hasNext();
                    }

                    public V next()
                    {
                        return raw.next().value;
                    }

                    public void remove()
                    {
                        throw new UnsupportedOperationException("No");
                    }
                    
                };
            }

            public int size()
            {
                return Test.this.mData.size();
            }
        };
    }

    private static final class Inner<T> {
        T value;
    };
};
fixed > 20041116


[1.5] [Generics] Erroneous quick fix results generated for this code. [quick fix]



Fixed bug 478688: Update parent pom to 4.5.2 

Bug 478688 - Update parent pom to 4.5.2 

*** empty log message *** 

Bug 478688 - Update parent pom to 4.5.2 

Bug 478688 - Update parent pom to 4.5.2 

78688 [1.5] [Generics] Erroneous quick fix results generated for this code. [quick fix] 