Extending AbstractList<E> fails on several levels. Taking the following source:

    package test;

    import java.util.AbstractList;

    public class StringList extends AbstractList<String>
    {
    }

and performing a QuickFix -> 'Add unimplemented methods' produces

    package test;

    import T;
    import java.util.AbstractList;

    public class StringList extends AbstractList

        public String get(int index) {
            return null;
        }

        public int size() {
            return 0;
        }

        public T[] toArray(T[] arg0) {
            return null;
        }

        public T[] toArray(T[] arg0) {
            return null;
        }<String>
    {
    }

Please note the placement of the inserted methods and the two toArray() 
methods.

Cleaning up gives

    package test;

    import java.util.AbstractList;

    public class StringList extends AbstractList<String>
    {
        public String get(int index) {
            return null;
        }

        public int size() {
            return 0;
        }
    }

which seems to compile, but when trying to look at the Type hierarchy 
(Ctrl+T), Object is shown as superclass.

Testing with

    package test;

    import junit.framework.TestCase;

    public class StringListTest extends TestCase
    {
        public void testCtor() {
            new StringList();
        }
    }

gives the following error

    java.lang.ClassFormatError: Repetitive method name/signature in class file 
test/StringList

when the VM tries to load the test.StringList class.

This was tried on Eclipse 3.0 RC3 running on j2sdk 1.4.2_04 (build 1.4.2_04-
b05), using the jdk 1.5.0 beta2 vm (build 1.5.0-beta2-b51). The Cheetah code 
was checked out from CVS on june 22. 2004 (latest bug fixed is 68006).

When trying to run the testcase with the StringList class compiled by the 
1.5.0 jdk compiler, it succeeds.

Extending AbstractList<E> fails on several levels. Taking the following source:

    package test;

    import java.util.AbstractList;

    public class StringList extends AbstractList<String>
    {
    }

and performing a QuickFix -> 'Add unimplemented methods' produces

    package test;

    import T;
    import java.util.AbstractList;

    public class StringList extends AbstractList

        public String get(int index) {
            return null;
        }

        public int size() {
            return 0;
        }

        public T[] toArray(T[] arg0) {
            return null;
        }

        public T[] toArray(T[] arg0) {
            return null;
        }<String>
    {
    }

Please note the placement of the inserted methods and the two toArray() 
methods.

Cleaning up gives

    package test;

    import java.util.AbstractList;

    public class StringList extends AbstractList<String>
    {
        public String get(int index) {
            return null;
        }

        public int size() {
            return 0;
        }
    }

which seems to compile, but when trying to look at the Type hierarchy 
(Ctrl+T), Object is shown as superclass.

Testing with

    package test;

    import junit.framework.TestCase;

    public class StringListTest extends TestCase
    {
        public void testCtor() {
            new StringList();
        }
    }

gives the following error

    java.lang.ClassFormatError: Repetitive method name/signature in class file 
test/StringList

when the VM tries to load the test.StringList class.

This was tried on Eclipse 3.0 RC3 running on j2sdk 1.4.2_04 (build 1.4.2_04-
b05), using the jdk 1.5.0 beta2 vm (build 1.5.0-beta2-b51). The Cheetah code 
was checked out from CVS on june 22. 2004 (latest bug fixed is 68006).

When trying to run the testcase with the StringList class compiled by the 
1.5.0 jdk compiler, it succeeds.
Created attachment 12637
Minimal test which replicates bug.
The same bug shows up when trying to implement List<E>. It seems that the 
methods E[] toArray(T[] a) (from List<E> and Collection<E>) is the visible 
symptom of the problem.
Please keep in mind that very few additional features (like quickfix) are 
aware of 1.5 syntax, etc.
Moving to JDT UI so they can close when QuickFix supports 1.5.
fixed > 20040831

There are still isues with overriding parametrized methods (pending bugs against
jdt.core), but the problem described in this bug is fixed


[1.5] QuickFix is not supported



68153 [1.5] QuickFix is not supported 

68153 [1.5] QuickFix is not supported 