I have an interface stack like this:

   public interface OuterI {
    
       public interface InnerI {}
    
       public void eatInner(InnerI innerI);
   }


I use New/Class to generate a class implementing OuterI.
Here is (a slightly boiled-down version of) what I get:


   import OuterI.InnerI;
   public class Impl implements OuterI {

       /**
        * @see OuterI#eatInner(InnerI)
        */
       public void eatInner(InnerI innerI) {}
   }

Neat trick, that import statement.
But unfortunately, the javadoc tool does not agree with us:

   javadoc: warning - Impl.eatInner(OuterI.InnerI):
      Tag @see: can't find eatInner(InnerI) in OuterI

I correct it manually, then it works:

   import OuterI.InnerI;
   public class Impl implements OuterI {
       /**
        * @see OuterI#eatInner(OuterI.InnerI)
        */
       public void eatInner(InnerI innerI) {}
   }

I have an interface stack like this:

   public interface OuterI {
    
       public interface InnerI {}
    
       public void eatInner(InnerI innerI);
   }


I use New/Class to generate a class implementing OuterI.
Here is (a slightly boiled-down version of) what I get:


   import OuterI.InnerI;
   public class Impl implements OuterI {

       /**
        * @see OuterI#eatInner(InnerI)
        */
       public void eatInner(InnerI innerI) {}
   }

Neat trick, that import statement.
But unfortunately, the javadoc tool does not agree with us:

   javadoc: warning - Impl.eatInner(OuterI.InnerI):
      Tag @see: can't find eatInner(InnerI) in OuterI

I correct it manually, then it works:

   import OuterI.InnerI;
   public class Impl implements OuterI {
       /**
        * @see OuterI#eatInner(OuterI.InnerI)
        */
       public void eatInner(InnerI innerI) {}
   }
Problem still exists in 2.0. 
We descided to fully qualify all type names in Javadoc comments.
Type names in the comment not looked at by organize import or other 
refactoring, so to avoid unresolved type names by the Javadoc tool, 
qualification is necessary.

Maybe we can improve this when JCore gives us more support with the Javadoc 
structure (planed for 2.1)

changed to use fully qualified type names > 20020911


Class generation from Interface generates @see - tags Javadoc doesn't understand [javadoc]

investigate

20549 