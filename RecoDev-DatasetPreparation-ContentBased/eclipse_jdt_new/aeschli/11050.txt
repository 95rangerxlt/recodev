would it be possible for one of the next releases, to adapt the sorting
order of VAJ in the Outline 
view. I mean, first all attributes, which are
sorted alphabeticly, and then all methods which 
are also sorted
alphabeticly.
At the moment, there will be make no difference between the 
attributes and
methods, so that the sorting is done over them all together and not divided
in 
two parts: attributes and methods.

It would be nice, if that could be 
done.

Thanks

Daniel

would it be possible for one of the next releases, to adapt the sorting
order of VAJ in the Outline 
view. I mean, first all attributes, which are
sorted alphabeticly, and then all methods which 
are also sorted
alphabeticly.
At the moment, there will be make no difference between the 
attributes and
methods, so that the sorting is done over them all together and not divided
in 
two parts: attributes and methods.

It would be nice, if that could be 
done.

Thanks

Daniel
I have "fixed" it on my own in org.eclipse.jdt.internal.ui.viewsupport.JavaElementSorter by 
changing the values of the element constants.

My wonder, if you would provide a more general 
support configuring the sorting or if you only change the order or values of the constants like I 
have done it. It works fine!

Daniel
What does the user mean by "attributes"?  I see all methods sorted 
alphabetically, followed by all fields (attributes?) sorted alphabetically.  
What type of Editor are you saying mixes the two?
moving to jdt/ui inbox
Randy,

sorry, yes I mean fields instead of attributes. By the mentioned two parts I meant, the 
fields should be followd by the methods and not reverse.
That order, first fields than methods, 
would also be equals with the Java coding standard, which says that you should declare the fields 
first in your class followed by all methods.
This is at least the 3rd request to sort fields before methods. I'm not 
attached to the current sorting order (but got used to it). Ideally the 
sorting is configurable but this will not happen for 2.0, so we should change 
the default sort order.
I think the arguement is that 90% of the time you are reading code, and not 
editing it.  The JDT cannot really tell when you are opening a file you own 
versus a file you do not own.  Given that, good O-O classes typically have 
private fields, so the getters() are deemed more important.

Erich - it might be interesting to collapse the getter/setter/ and field decl. 
into one item in the Outline, to make it smaller. And "Show source of selected 
member" could show all three together.
Hello,

here are my declararations of the constants concernin the sorting (declared in 
org.eclipse.jdt.internal.ui.viewsupport.JavaElementSorter)

	private static final 
int PACKAGE_DECL=	1;
	private static final int IMPORT_CONTAINER=	2;
	private static 
final int TYPES= 3;
	private static final int CONSTRUCTORS=	4;
	private static final int 
STATIC_INIT= 5;
	private static final int INIT= 6;
	private static final int 
STATIC_FIELDS= 7;
	private static final int FIELDS= 8;
	private static final int 
STATIC_METHODS= 9;
	private static final int METHODS= 10;
	private static final int 
JAVAELEMENTS= 11;
	private static final int PACKAGEFRAGMENTROOTS= 12;
	private static 
final int PACKAGEFRAGMENT= 13;
	private static final int JAVAPROJECTS= 14;
	private 
static final int RESOURCEPACKAGES= 15;
	private static final int RESOURCEFOLDERS= 
16;
	private static final int RESOURCES= 17;
	private static final int STORAGE= 
18;

	private static final int OTHERS= 20;
i would suggest:

static fields
static methods

fields

constructors
methods
That is also ok for me!
fixed > 20020312


Devide Sorting in two main parts: fields and methodes



11050 Devide Sorting in two main parts: fields and methodes 