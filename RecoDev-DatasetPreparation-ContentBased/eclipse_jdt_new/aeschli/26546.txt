I have classes like so:

com.me.Common extends org.junit.TestCase
and com.me.MyTest extends Common.

In my test, I have JUnit assertXXX calls coded like so:

this.assertXXX(...);

I therefore get warnings for non-static access to static members, which is nice!

The quick fix changes this:

this.assertXXX(...);

to this:

MyTest.assertXXX(...);

I was expecting:

Assert.assertXXX(...);

Any thoughts? Aside from the quick fix wouldn't Assert... be "more correct"?

I have classes like so:

com.me.Common extends org.junit.TestCase
and com.me.MyTest extends Common.

In my test, I have JUnit assertXXX calls coded like so:

this.assertXXX(...);

I therefore get warnings for non-static access to static members, which is nice!

The quick fix changes this:

this.assertXXX(...);

to this:

MyTest.assertXXX(...);

I was expecting:

Assert.assertXXX(...);

Any thoughts? Aside from the quick fix wouldn't Assert... be "more correct"?
Martin, any comments ?
[I'm a colleague of Gary's, he asked if I had an opinion on this.]

I think you can make a case that either resolution can be correct - there's 
no "right" answer to this.  Which is *better* depends on specific context and 
intent, which I think the JDT can't know without assistance from the user.  
This is muddled due to what IMO is a badly-done area of Java, the 
binding/scoping/inheritance characteristics of static features.

Resolving to Assert.XXX correctly reflects what actually happens when the 
static reference is bound at compilation time.  It's "correct" if the 
referenced facility is really a global feature and not something you intend to 
implement in your own (sub)class at some point.

(Assuming that a variation of the static XXX method isn't already implemented 
in MyTestClass, that is.  If so, then resolving to Assert would of course be 
incorrect.)  

Conversely, if the programmer's intent is to implement their own static XXX in 
MyOwnTestClass, then resolving to Assert rather than the class of the 
referenced instance where the correction is being made is "wrong" and would be 
something the programmer would have to go back to and patch up manually when 
they did put in their XXX implementation.  And if you forget to do so, of 
course, you get these really subtle, nasty binding bugs because OO programmers 
expect inheritance but static's don't work that way [long sigh]

So...  I think Gary's expectation that the correction of this.XXX should be to 
Assert.XXX reflects his intent "hey, that's a global thing that I don't mess 
with, that really is the specific guy I meant".  Conversely, if you're working 
with a little class hierarchy and are trying to do some subclassing of 
statics, then you might well expect/want to have the correction made as 
MyTestClass.XXX, as is apparently currently being done.

I think I lean slightly towards Gary's expectation that the correction should 
resolve to the (super)class which *currently* implements the referenced 
feature - that is in fact what I'm getting right now when this static 
reference is compiled to bytecodes.  But what I'd *really* like is to be 
allowed to choose which of the two possible resolutions I want to have made - 
let *me* choose whether I meant to reference this guy in the scope of Assert 
or of MyOwnTestClass.

[P.S. This feature of warning when a static feature is referenced through an 
instance is way cool - I think they really did this area of statics and 
scoping badly in the Java language and I personally NEVER want to 
inadvertantly reference a static "sloppily" via an instance - it ain't an 
instance feature, it doesn't behave the same, and I want to be clear in my 
programs about what I'm doing.  YAGRTUE - Yet Another Good Reason To Use 
Eclipse!!]
Deb guessed my intent correctly: I want to be able to choose Assert.xxx. 

In the particular case of JUnit, I read someplace that subclassing TestCase to 
providing your own add-ons and then subclassing that is not considered a good 
idea. So if you have to do it, compose, do not inherit.

So I would consider asking for the ability to choose b/w 2 quick fixes: (1) 
The "this" class and (2) the implementing class. This is particular to static 
members thankfully and one does not have to deal with this silliness on the 
instance side.

I stay away from using inheritance on the static side like the plague. Longing 
for the days of Smalltalk...
fixed > 20021125

Quick fix now offers both suggestions: Instance type and declaring type.
The declaring type has higher priority. 


In/correct quick fix for non-static access to static member [quick fix]



Bug 426546 - [BETA_JAVA8] Build Eclipse Luna SDK with our Java 8 compiler - test to assure that an inherited bridge method need not be repeated 

26546 In/correct quick fix for non-static access to static member [quick fix] 