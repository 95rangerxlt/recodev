I want to add more quick assists in AdvancedQuickAssistProcessor.

1. getInverseConditionalExpressionProposals:
  bool ? a : b <=> !bool ? b : a

  Activation: in any place of conditional expression.


2. getExchangeIfStatementConditionsProposals:
  Exchanges inner and outer 'if' statements conditions:
  if (a) {
    if (b) {
      do_something();
    }
  }

into:

  if (b) {
    if (a) {
      do_something();
    }
  }

  Activation: in any place of inner or outer 'if' statement.


3. getExchangeInfixOperatorOperandsProposals:
  Exchange left and right parts of infix expression in case of commutative
operator ( +, *, &, |, && ||, ^ ).

  Activation: on one of these operators.

4. getCastAndAssignIfStatementProposals:
  In many cases directly after checking type we need to use some expression as
just checked type, so we need to declare variable of this type. This quick
assists simplifies process.
  If there is code:
 
  if (exp instanceof Type) {
  }

  and press Ctrl+1 of 'if', quick asisst suggests to create following code:

  if (exp instanceof Type) {
    Type type = (Type) exp;
  }

  Activation: in any place of 'if' statement.


  For this Quick Asisst I've extracted abstract supertype
AssignExpressionAssistProposal for existing AssignToVariableAssistProposal. Then
I use abstract type for new AssignCastToVariableAssistProposal.

PS. I am going to implement also quick asists described in
https://bugs.eclipse.org/bugs/show_bug.cgi?id=71244, in comment 26.

I want to add more quick assists in AdvancedQuickAssistProcessor.

1. getInverseConditionalExpressionProposals:
  bool ? a : b <=> !bool ? b : a

  Activation: in any place of conditional expression.


2. getExchangeIfStatementConditionsProposals:
  Exchanges inner and outer 'if' statements conditions:
  if (a) {
    if (b) {
      do_something();
    }
  }

into:

  if (b) {
    if (a) {
      do_something();
    }
  }

  Activation: in any place of inner or outer 'if' statement.


3. getExchangeInfixOperatorOperandsProposals:
  Exchange left and right parts of infix expression in case of commutative
operator ( +, *, &, |, && ||, ^ ).

  Activation: on one of these operators.

4. getCastAndAssignIfStatementProposals:
  In many cases directly after checking type we need to use some expression as
just checked type, so we need to declare variable of this type. This quick
assists simplifies process.
  If there is code:
 
  if (exp instanceof Type) {
  }

  and press Ctrl+1 of 'if', quick asisst suggests to create following code:

  if (exp instanceof Type) {
    Type type = (Type) exp;
  }

  Activation: in any place of 'if' statement.


  For this Quick Asisst I've extracted abstract supertype
AssignExpressionAssistProposal for existing AssignToVariableAssistProposal. Then
I use abstract type for new AssignCastToVariableAssistProposal.

PS. I am going to implement also quick asists described in
https://bugs.eclipse.org/bugs/show_bug.cgi?id=71244, in comment 26.
Created attachment 14730
New quick asists
Created attachment 14958
Path for AdvancedQuickAssistProcessor.java 

I've decided that cast and assign is not such good quick assist, so don't think
that it worth to be included in Eclipse. I attach changes in
AdvancedQuickAssistProcessor as patch to current version (1.5).
released patch from comment 2 with some changes > 20041004
- changed the (private) method names to correspond to the quick fix labels
- nls'ed
- added test cases
- prevented the invert opearand assist when extraOperands are available
  (a + b + c + d) -> c and d are extra operands of a + b

Thanks a lot, Konstantin!

What was the reason for not including the getCastAndAssignIfStatementProposals?
I think it's a good idea.
What I would suggest is to enable it only if the selection is on the 
the 'instanceof' keyword. (an 'if' condtion could contain multiple instanceof 
expressions). I would also suggest to not 
reuse 'AssignToVariableAssistProposal'; except of the name collision testing 
not much can be reused or is overkill. I would program it out as, without 
reuse, should be quite short. Let me know if I should do it.

I suggest we open a new bug again for more assists. Marking this as fixed.

Thank you for releasing my patch. :-)

  I don't understand why you want to prevent infix operator exchange when there
are extended operands. It was designed to work even with extanded operands, i.e.
for case "a + b +(cursor) c + d" it should produce "c + d + a + b".

  About "cast and assign". The main reason was that this requires changes in
other quick assist, but now, when you give my hint that I can just copy couple
method without reuse, I've reimplemented it and will submit in new patch later.

  I will add couple new quick assists and create new bug later.
I don't undestand why I didn't see your extra handling just a few lines later. 
Extended operators are enabled again. > 20041005

I was thinking that it could be possible without creating an extra proposal 
class but just configure the rewrite in the AdvancedQuickAssistProcessor's 
method.

Aha, also possible solution. I will rewrite it without extra proposal class.


New Quick Assist's [quick assist]



74746 New Quick Assist's [quick assist] 

74746 New Quick Assist's [quick assist] 