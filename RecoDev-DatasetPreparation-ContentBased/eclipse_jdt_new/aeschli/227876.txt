Build ID: I20080409-1425

Steps To Reproduce:

1. Make the following two classes:

public class SourceClass {
	DestinationClass destination = new DestinationClass();
	public void methodToMoveToDestination(String value) {
		this.destination.value = value;
	}	
}

public class DestinationClass {
	public String value;
}

2. Do a Move Method on SourceClass.methodToMoveToDestination(...) to DestinationClass, and select "Keep original method as delegate to moved method."

3. After refactoring, note that SourceClass is passed as a reference (via this) to the moved method in the DestinationClass.  However, it is not needed as a parameter because it is NEVER used in the moved method.  This is quite annoying since it requires a Change Method Signature to be done just after the Move Method to get rid of the unnecessary parameter (SourceClass).

Build ID: I20080409-1425

Steps To Reproduce:

1. Make the following two classes:

public class SourceClass {
	DestinationClass destination = new DestinationClass();
	public void methodToMoveToDestination(String value) {
		this.destination.value = value;
	}	
}

public class DestinationClass {
	public String value;
}

2. Do a Move Method on SourceClass.methodToMoveToDestination(...) to DestinationClass, and select "Keep original method as delegate to moved method."

3. After refactoring, note that SourceClass is passed as a reference (via this) to the moved method in the DestinationClass.  However, it is not needed as a parameter because it is NEVER used in the moved method.  This is quite annoying since it requires a Change Method Signature to be done just after the Move Method to get rid of the unnecessary parameter (SourceClass).
the parameter is not unnecessary. The problem is that the 'this' is missing for the field access.

fixed > 20080422
This bug is far from fixed. 

The resultant code (after the Move Method) looks like this:

public class DestinationClass {
	public String value;

	public void methodToMoveToDestination(SourceClass class1, String value) {
		value = value;
	}
}

There is absolutely no reason to be passing class1 in.  

Please explain how you think this is not a bug.  


I assume you tested this on HEAD, as there's no build yet with that code.

I understood that you meant 'value' is unnecessary. The bug was the assignment
  value = value;
The fix changes this to 
  this.value = value;

We don't try to find out if sourceClass is needed which is, IMO, a minor issue not planed for 3.4. The bug has to stay open then. Thanks for testing!

As I already change the bug title and used it to track work, I decided to create a  new bug for the bug you were originally mentioning. Created bug 228635.

Using this bug for the missing 'this' and mark as fixed again.


[move method] does not qualify field access



227876 [move method] does not qualify field access 