when I use an Chinese character as a method name when used in refactoring of "rename", there is a warning of not starting with a lowercase letter.

when I use an Chinese character as a method name when used in refactoring of "rename", there is a warning of not starting with a lowercase letter.
the convention checking is provided by JDT CORE
Would guess this comes from JDK implementation of isLowercase.
Please double check (is this encoding dependent? is this a known bug?)
I don't see any warning in build 20021115 even with English characters. If I 
rename a method foo() to Foo() I don't see any warning.

Could you please indicate the build number you're using, and what exact steps 
you followed?
the build number is 200211140010, the refactorying process is just the normal steps of rename.selecting a method name, right clicking and selecting rename on the popup menu, input a new name which starts with a chinese character. the JDT core's version is 2.1.0.
I think the problem may lay in JDK's Character class. Assume a Chinese character C, when I use C == Character.toLowerCase(C) it's true, but when I use Character.isLowerCase(C), it's false. so I think we should use the former instead of the latter.
JavaConventions.validateMethodName doesn't check for casing.
Moving back to JDT/UI to find out which call is used.
We use Checks.checkMethodName which forwards to 
JavaConventions.validateMethodName.

Jerome, does this answer your question ?
Yes, it does answer my question. But then I don't understand how this can 
happen.

John, no call to Character.isLowercase() is done when refactoring a method. 
What lead you to suspect the Character class. Was it a wild guess?
Sorry, the bug is in the renaming of field and local variables, not the method.
The renaming of method does not check the compliance to the convention(for lowercase), is it a bug too?
In this case, the problem is with Checks.startsWithLowerCase(...) which uses 
Character.isLowerCase(). Maybe it should workaround the problem and use 
toLowerCase(c) == c.

Moving to JDT/UI since Checks belong there.
will put the workaround
John,
does isUpperCase have the same problem on Chinese?

here're the matches to isLowercase in JDT UI

NameProposer.proposeAccessorName
OrganizeImportsOperation.TypeReferenceProcessor.findTypeRefs
TypeSelectionDialog.StringComparator.compare

moving the bug to the owner of the other classes for consideration
(released the workaround for Checks
also fixed the no-warning-for-uppercase-method-names bug)


Yes. isUpperCase has the same problem on Chinese.
fixed > 20021209


lowercase letter not localized.



26529 lowercase letter not localized. 

workaround for a JDK bug (see 26529) 