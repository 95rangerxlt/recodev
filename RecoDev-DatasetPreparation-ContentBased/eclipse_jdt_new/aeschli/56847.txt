When a piece of code looks like:

FileInputStream in = new FileInputStream("myfile.txt");
BufferedReader br = new BufferedReader(new InputStreamReader(in));
while(br.readLine() != null) { ... etc 

and there is no throws clause, Eclipse prompts with suggestions of 'add throws clause' and 'surround 
with try and catch'. If the latter is chosen, it writes the code as:

FileInputStream in = null;
try {
  in = new FileInputStream("myfile.txt");
} catch (IOException e) {
  // auto-generated jobby
}
BufferedReader br = new BufferedReader(new InputStreamReader(in));

This is of course bad code, as the buffered reader depends on the 'in' having been assigned correctly 
first of all.

Eclipse should automatically include not only the definition of the FileInputStream inside the try block, 
but also all code that depends on the FileInputStream having been created inside the block as well. 
Specifically, when an assignment to an expression that throws an exception is processed, any and all 
code that refers to that instance variable following should also be included in the try block. This will 
need to iterate, so that if the try block captures any further variable definitions, then these are also 
covered in the catch block, and so on until there are no references left in the method that relate to 
variables defined in the catch block.

This is always what good programmers want; code that depends on the successful execution of the try 
block should always be in the try block. Granted, some developers use an 'if/else' style of try/catch 
programming (and return an error code in an exception block) but this would help to raise the profile of 
good exception handling in Java.

Please let me know if I need to be more explicit in my description, and/or provide examples.

Eclipse 3.0M8

When a piece of code looks like:

FileInputStream in = new FileInputStream("myfile.txt");
BufferedReader br = new BufferedReader(new InputStreamReader(in));
while(br.readLine() != null) { ... etc 

and there is no throws clause, Eclipse prompts with suggestions of 'add throws clause' and 'surround 
with try and catch'. If the latter is chosen, it writes the code as:

FileInputStream in = null;
try {
  in = new FileInputStream("myfile.txt");
} catch (IOException e) {
  // auto-generated jobby
}
BufferedReader br = new BufferedReader(new InputStreamReader(in));

This is of course bad code, as the buffered reader depends on the 'in' having been assigned correctly 
first of all.

Eclipse should automatically include not only the definition of the FileInputStream inside the try block, 
but also all code that depends on the FileInputStream having been created inside the block as well. 
Specifically, when an assignment to an expression that throws an exception is processed, any and all 
code that refers to that instance variable following should also be included in the try block. This will 
need to iterate, so that if the try block captures any further variable definitions, then these are also 
covered in the catch block, and so on until there are no references left in the method that relate to 
variables defined in the catch block.

This is always what good programmers want; code that depends on the successful execution of the try 
block should always be in the try block. Granted, some developers use an 'if/else' style of try/catch 
programming (and return an error code in an exception block) but this would help to raise the profile of 
good exception handling in Java.

Please let me know if I need to be more explicit in my description, and/or provide examples.

Eclipse 3.0M8
Your example is sufficient and a fair request. 

Alex, are you aware that you can select the code you want to put into a 
try/Catch and then run Source->Surround With instead of using Quick Fix.
I am aware that you can do this from highlighting and selecting the menu; but what you can't do is 
expand the selection from a Quick Fix (Ctrl+1) window.  Since I mostly use the Quick Fix for introducing 
these suggestions, if there were a way to expand the selection up or down easily for the Quick Fix, then 
I'd be more likely to use it.

There are several templates (like sysout) that can also deal with word selections as well, but they aren't 
easily available after having highlighted text. Perhaps when some text is highlighted, we could have a 
Quick Fix to show all the templates that are visible from that code, including exception blocks?
Lowering priority since there is only M9 left and this will very likely not 
make it in.
quick fix now also uses the selection. Before infoking the quick fix, expand the
selection to contain the statements to be included in the try/catch block and
then invoke ctrl + 1




Suggestion for 'try/catch' should encapsulate all dependent objects automatically [quick fix]

