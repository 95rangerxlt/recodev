"Override Methods..." should be able to detect when the cursor is inside the 
definition of an anonymous inner class or a local class and list the methods
for that class's superclasses, but doesn't.
Instead, it lists the methods for the outer class (and puts any methods
chosen at the end of the outer class).

Example code (put cursor under each comment and try Override Methods...):
========================
public class MyClass extends Throwable {

	// works here (shows Throwable's methods)
	
		
	Thread MY_ANONYMOUS_INNER_CLASS = new Thread() {
		// doesn't work here (shows Throwable's methods)
				
	};
	
	class MyInnerClass extends Thread {
		// works here (shows Thread's methods)
		
	}
	
	void myMethod () {
		class MyLocalClass extends Thread {
			// doesn't work here (shows Throwable's methods)
			
		}
	}
}
========================

"Override Methods..." should be able to detect when the cursor is inside the 
definition of an anonymous inner class or a local class and list the methods
for that class's superclasses, but doesn't.
Instead, it lists the methods for the outer class (and puts any methods
chosen at the end of the outer class).

Example code (put cursor under each comment and try Override Methods...):
========================
public class MyClass extends Throwable {

	// works here (shows Throwable's methods)
	
		
	Thread MY_ANONYMOUS_INNER_CLASS = new Thread() {
		// doesn't work here (shows Throwable's methods)
				
	};
	
	class MyInnerClass extends Thread {
		// works here (shows Thread's methods)
		
	}
	
	void myMethod () {
		class MyLocalClass extends Thread {
			// doesn't work here (shows Throwable's methods)
			
		}
	}
}
========================
The problem is that the Java model doesn't contain elements for anonymous or 
local inner types. Philippe, does Java Core have any plans to add this ? 
Otherwise there is nothing we can do in the UI.

Moving to Core for commenting
Though we don't provide elements for local types, our tooling is able to figure 
the proper context when dealing with them.

Codeassist for method declarations inside a local type does work fine; just 
press ctrl-space at the begin of a new method signature (omitting modifiers, 
return type) will provide the list of overridable methods (you can type in a 
portion of the selector for narrowing the list).

Maybe the override method tool could be directly based on codeassist instead of 
using its own computation based on elements, indeed codeassist does already 
figure resolved names, and play the hiding rules, visibility checks, etc...

Back to UI



*** Bug 22256 has been marked as a duplicate of this bug. ***
One solution would be to use AST and bindings for override methods.
The Java model now offeres local types: They are shown in the outliner and you 
can use 'Override methods' on them.

> 20031007 (in M4)


Override Methods doesn't detect anonymous inner or local classes [code manipulation]

