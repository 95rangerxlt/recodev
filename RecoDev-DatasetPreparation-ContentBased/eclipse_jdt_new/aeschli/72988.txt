By "auto-import", I mean the mechanism that adds required imports whenever a
user chooses "Source->Override/Implements Methods".  When using that function,
the auto import gets confused and attempts to "import" generic versions of
classes.  For example, assume you have:

-----
import java.util.Map;

public class MapImplementation<K, V> implements Map<K, V> {
}
-----

And then you click on the (empty) class body, choose "Source->Override/Implement
Methods" from the context menu, and select all Map methods, your imports turn into:

import java.util.Collection<V>;
import java.util.Map;
import java.util.Map<? extends K,? extends V>;
import java.util.Set<K>;
import java.util.Set<java.util.Map.Entry<K,V>>;

which is obviously wrong.

By "auto-import", I mean the mechanism that adds required imports whenever a
user chooses "Source->Override/Implements Methods".  When using that function,
the auto import gets confused and attempts to "import" generic versions of
classes.  For example, assume you have:

-----
import java.util.Map;

public class MapImplementation<K, V> implements Map<K, V> {
}
-----

And then you click on the (empty) class body, choose "Source->Override/Implement
Methods" from the context menu, and select all Map methods, your imports turn into:

import java.util.Collection<V>;
import java.util.Map;
import java.util.Map<? extends K,? extends V>;
import java.util.Set<K>;
import java.util.Set<java.util.Map.Entry<K,V>>;

which is obviously wrong.
Move to JDT/UI
fixed > 20040910

there are still many issues with the override action. It is planed to rewrite
all the source generation actions (override method, create delegate,
getter/setter) to use the AST so we get all the generic types right.




[1.5] Auto-import incorrectly tries to genericize imports [code manipulation]

