+++ This bug was initially created as a clone of Bug #327193 +++

Build Identifier: 3.6.x I20100608-0911

In case you have a very huge classpath and also many VM arguments for your junit test suite, you are not able to run it inside eclipse. The internal builded command line for the RemoteTestRunner process gets too long and reaches the windows xp limit (8191 characters).

The error you get looks like this: 
Pop up "Problem occured" with Message: Exception occurred executing command line.
Cannot run program "C:\Apps\Tip60\cs\java\jdk160_16\bin\javaw.exe" (in directory "C:\DevWork\Projects\Frontnet\rmt.head\RMT\lib\RMT"): CreateProcess error=87, The parameter is incorrect

Stack Trace from Error Log:
java.io.IOException: Cannot run program "C:\Apps\Tip60\cs\java\jdk160_16\bin\javaw.exe" (in directory "C:\DevWork\Projects\Frontnet\rmt.head\RMT\lib\RMT"): CreateProcess error=87, The parameter is incorrect
at java.lang.ProcessBuilder.start(Unknown Source)
at java.lang.Runtime.exec(Unknown Source)
at org.eclipse.debug.core.DebugPlugin.exec(DebugPlugin.java:827)
at org.eclipse.jdt.launching.AbstractVMRunner.exec(AbstractVMRunner.java:73)
at org.eclipse.jdt.internal.launching.StandardVMRunner.run(StandardVMRunner.java:317)
at org.eclipse.jdt.junit.launcher.JUnitLaunchConfigurationDelegate.launch(JUnitLaunchConfigurationDelegate.java:174)
at org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:853)
at org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:702)
at org.eclipse.debug.internal.ui.DebugUIPlugin.buildAndLaunch(DebugUIPlugin.java:923)
at org.eclipse.debug.internal.ui.DebugUIPlugin$8.run(DebugUIPlugin.java:1126)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)
Caused by: java.io.IOException: CreateProcess error=87, The parameter is incorrect
at java.lang.ProcessImpl.create(Native Method)
at java.lang.ProcessImpl.<init>(Unknown Source)
at java.lang.ProcessImpl.start(Unknown Source)
... 11 more


There exist currently no workaround to solve that issue. You need to rewrite your testsuite e.g. by using ant inorder to shorten the command line by uisng a "proxy" process which has an own class loader andconfiguration loader.

Expectation:
- extend the Junit Runner, add a configuration option for passing over an own classpath which uses a java class loader before the test starts.
- don't use the command line to pass over the classpath or configuration (syste m properties)
- Please have a look at the IDE "Idea" there they are using also an own runner, but the classpath configuration is not passed via a command line

refer also to: 
http://www.eclipse.org/forums/index.php?t=msg&th=197955
http://support.microsoft.com/kb/830473

many thanks in advance.

regards
Mark


Reproducible: Always

Steps to Reproduce:
1. create one single project with many jar files in the classpath. The path for each jar file should be long. The overall string for the full class path should approx. exceeds 8100 characters 
2. write a junit test for that project
3. setting up a junt run configuration and some VM arguments. Use as classpath the path of the project. If necessary add the Junit library additionally to the classpath
4. try to run the junit test.

+++ This bug was initially created as a clone of Bug #327193 +++

Build Identifier: 3.6.x I20100608-0911

In case you have a very huge classpath and also many VM arguments for your junit test suite, you are not able to run it inside eclipse. The internal builded command line for the RemoteTestRunner process gets too long and reaches the windows xp limit (8191 characters).

The error you get looks like this: 
Pop up "Problem occured" with Message: Exception occurred executing command line.
Cannot run program "C:\Apps\Tip60\cs\java\jdk160_16\bin\javaw.exe" (in directory "C:\DevWork\Projects\Frontnet\rmt.head\RMT\lib\RMT"): CreateProcess error=87, The parameter is incorrect

Stack Trace from Error Log:
java.io.IOException: Cannot run program "C:\Apps\Tip60\cs\java\jdk160_16\bin\javaw.exe" (in directory "C:\DevWork\Projects\Frontnet\rmt.head\RMT\lib\RMT"): CreateProcess error=87, The parameter is incorrect
at java.lang.ProcessBuilder.start(Unknown Source)
at java.lang.Runtime.exec(Unknown Source)
at org.eclipse.debug.core.DebugPlugin.exec(DebugPlugin.java:827)
at org.eclipse.jdt.launching.AbstractVMRunner.exec(AbstractVMRunner.java:73)
at org.eclipse.jdt.internal.launching.StandardVMRunner.run(StandardVMRunner.java:317)
at org.eclipse.jdt.junit.launcher.JUnitLaunchConfigurationDelegate.launch(JUnitLaunchConfigurationDelegate.java:174)
at org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:853)
at org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:702)
at org.eclipse.debug.internal.ui.DebugUIPlugin.buildAndLaunch(DebugUIPlugin.java:923)
at org.eclipse.debug.internal.ui.DebugUIPlugin$8.run(DebugUIPlugin.java:1126)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)
Caused by: java.io.IOException: CreateProcess error=87, The parameter is incorrect
at java.lang.ProcessImpl.create(Native Method)
at java.lang.ProcessImpl.<init>(Unknown Source)
at java.lang.ProcessImpl.start(Unknown Source)
... 11 more


There exist currently no workaround to solve that issue. You need to rewrite your testsuite e.g. by using ant inorder to shorten the command line by uisng a "proxy" process which has an own class loader andconfiguration loader.

Expectation:
- extend the Junit Runner, add a configuration option for passing over an own classpath which uses a java class loader before the test starts.
- don't use the command line to pass over the classpath or configuration (syste m properties)
- Please have a look at the IDE "Idea" there they are using also an own runner, but the classpath configuration is not passed via a command line

refer also to: 
http://www.eclipse.org/forums/index.php?t=msg&th=197955
http://support.microsoft.com/kb/830473

many thanks in advance.

regards
Mark


Reproducible: Always

Steps to Reproduce:
1. create one single project with many jar files in the classpath. The path for each jar file should be long. The overall string for the full class path should approx. exceeds 8100 characters 
2. write a junit test for that project
3. setting up a junt run configuration and some VM arguments. Use as classpath the path of the project. If necessary add the Junit library additionally to the classpath
4. try to run the junit test.
We can add support for the extra long classpath by cherry picking the commits Markus mentioned in bug 327193 comment #69, but without grabbing a bunch more fixes in platform debug it should noted there will be no way to see the environment that was launched with.

Specifically:

http://git.eclipse.org/c/platform/eclipse.platform.debug.git/commit/?id=94b0c8b7da7e2ff4d1cfb63e61b50535f7ed3197

and

http://git.eclipse.org/c/platform/eclipse.platform.debug.git/commit/?id=efd7c3127870daab51ebfbc3a2e9b5f262651d1b

We would also need two additional commits from JDT debug:

http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=eae045586c8e5ae22f6e7126d4a6ddfa7606ebee

and 

http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=e67d368abf570184d6824f0743c8d711ace66830
> [..] it should noted there will be no way to
> see the environment that was launched with.

That's OK. The backport at least allows users to launch. If they want the full solution, then they can grab a 4.3 build.
Cherry-picked to: http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/log/?h=R3_8_maintenance

Waiting for bug 393685 so I can push it to 4.2.2
Marking fixed, since apparently we don't need a 4.2 maintenance branch.


[3.8.2/4.2.2][patch] Launching command line exceeds the process creation command limit on Windows



Bug 393675 - [3.8.2/4.2.2][patch] Launching command line exceeds the process creation command limit on Windows - update bundle version for jdt.launching 