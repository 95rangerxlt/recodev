I was day dreaming along these lines (see bug 416304):

  <N extends Annotation> @N B f(@N A a)

Much to my surprise ecj didn't call me nuts but simply answered:

	<N extends Annotation> @N B f(@N A a)
	                       ^^
	Syntax error, type annotations are illegal here

Oops, this seems to be derived from (JSR 308 draft):

  MethodOrFieldDecl:
	UnannType Identifier MethodOrFieldRest

where in fact these original rule should apply:

  GenericMethodOrConstructorDecl:
	TypeParameters GenericMethodOrConstructorRest

  GenericMethodOrConstructorRest:
	(Type | void) Identifier MethodDeclaratorRest
	Identifier ConstructorDeclaratorRest

in the second rule, unchanged for JSR 308, the NT Type now expands to

  [Annotations] UnannType

Ergo: the above syntax should be accepted, leaving the question *why* the above
snippet is illegal as an exercise for the reader :)


As an aside, this implies that the following is legal though totally crazy:

  @NonNull <T> @Nullable String foo() { return null; }

Bonus question: Can @NonNull in this example still be interpreted as a type annotation?

I was day dreaming along these lines (see bug 416304):

  <N extends Annotation> @N B f(@N A a)

Much to my surprise ecj didn't call me nuts but simply answered:

	<N extends Annotation> @N B f(@N A a)
	                       ^^
	Syntax error, type annotations are illegal here

Oops, this seems to be derived from (JSR 308 draft):

  MethodOrFieldDecl:
	UnannType Identifier MethodOrFieldRest

where in fact these original rule should apply:

  GenericMethodOrConstructorDecl:
	TypeParameters GenericMethodOrConstructorRest

  GenericMethodOrConstructorRest:
	(Type | void) Identifier MethodDeclaratorRest
	Identifier ConstructorDeclaratorRest

in the second rule, unchanged for JSR 308, the NT Type now expands to

  [Annotations] UnannType

Ergo: the above syntax should be accepted, leaving the question *why* the above
snippet is illegal as an exercise for the reader :)


As an aside, this implies that the following is legal though totally crazy:

  @NonNull <T> @Nullable String foo() { return null; }

Bonus question: Can @NonNull in this example still be interpreted as a type annotation?
Please remember to set the target so this shows up queries that look for it.
Shankha, please follow up: Good news is parser accepts it, so no grammar changes
are required.

Test case:

// --
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
@Target(ElementType.TYPE_USE)
@interface T {
} 
public class X { 
	<N> @T N f(@T N a) {
		return null;
	}
}
Comparing against reference compiler I see several problems:

(1) The following program compiles, it should not:

public class X {
	public <T> @Marker Object foo() {
            return null;
	}
}
@interface Marker {
}

Since @Marker does not specify @Target TYPE_USE it cannot feature in a place
where only type annotations are allowed.

(2) The following program is illegal, it is accepted:

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
@Target(ElementType.TYPE_USE)
@interface T {
} 
public class X {
	public <T> @Marker X() {
        
	}
}

(3) javac 8b108 crashes on:

import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
@Target(ElementType.TYPE_USE)
@interface T {
} 
public class X { 

	class Y {
		
	}
	
	<N extends Annotation> @T String f(N a) {
		return null;
	}
	
	public static void main(String[] args) {
		new @T X();
		new @T  ArrayList<String>();
		new X().new <String> @T Y() {
			
		};
		
	}
}

We do the right thing everywhere ;-)
(4) Also this code should not be compiled, but javac does.

// --
@interface X {
	@Marker String foo();
}
@interface Marker {
}
Fix and tests pushed here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=bc9ce3968f8f3e0eb426deb1d35cab387ea00774

[Stephan, sorry for breaking my own moratorium, we are preparing for
a public early access early next week].

[Shankha, Sorry, I grabbed this bug for the same reason.]


[1.8][parser] Should allow type annotations on return type of generic methods



Fixed bug Bug 416379 - [1.8][parser] Should allow type annotations on return type of generic methods 