BETA_JAVA8: The following program triggers an ambiguity.

// --
interface I { 
	int foo(); 
}
interface J { 
	double foo(); 
}
public class X {
	static int foo(I i) {
		return 0;
	}
	static int foo(J j) {
		return 1;
	}
	public static void main(String argv[]) {
		System.out.println(foo (() -> true ? 0 : 1));
	}
}

BETA_JAVA8: The following program triggers an ambiguity.

// --
interface I { 
	int foo(); 
}
interface J { 
	double foo(); 
}
public class X {
	static int foo(I i) {
		return 0;
	}
	static int foo(J j) {
		return 1;
	}
	public static void main(String argv[]) {
		System.out.println(foo (() -> true ? 0 : 1));
	}
}
Silly mistake with a trivial fix. Subtyping relationship between two types
is best determined with TypeBinding.isCompatibleWith rather than using
TypeBinding.findSupertypeOriginatingFrom as the latter does not work with
relationship between primitive types described by 4.10.1.

Fix under test.
Fix and tests released here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=e71c12a24430281e16e762ec1f4388b25978109a


[1.8][compiler] Overloaded method call with poly-conditional expression rejected by the compiler



Fixed Bug 422050 - [1.8][compiler] Overloaded method call with poly-conditional expression rejected by the compiler 