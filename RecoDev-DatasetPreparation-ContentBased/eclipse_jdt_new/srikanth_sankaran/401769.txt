BETA_JAVA8:

As outlined in https://bugs.eclipse.org/bugs/show_bug.cgi?id=400874#c12,
in order to determine whether a lambda is compatible with a type T from
its context, we need to compute the set of all "results expressions". These
are the types of the expressions in return statements of the lambda body
in all possible paths of execution.

Computing this set requires us to traverse the lambda more than once,
one time each for possible target types from an overloaded call context.

The present solution adopted is from https://bugs.eclipse.org/bugs/show_bug.cgi?id=400874#c18. While this is a super clean solution, it is not also super
efficient. The method LambdaExpression#isComptaibleWith is coded to
minimize the copies - for example if the lambda is not even potentially
applicable, we will not traverse it multiple times. Another opportunity
is for isComptaibleWith to always return true, IFF we are in a INVOCATION_CONTEXT
but not in an overload resolution scenario (i.e singleton potentially
applicable method) - this could allow resolution to succeed where it should
not, but the error will surface itself during resolve.

Even better solutions could exist - This bug is to explore them.

BETA_JAVA8:

As outlined in https://bugs.eclipse.org/bugs/show_bug.cgi?id=400874#c12,
in order to determine whether a lambda is compatible with a type T from
its context, we need to compute the set of all "results expressions". These
are the types of the expressions in return statements of the lambda body
in all possible paths of execution.

Computing this set requires us to traverse the lambda more than once,
one time each for possible target types from an overloaded call context.

The present solution adopted is from https://bugs.eclipse.org/bugs/show_bug.cgi?id=400874#c18. While this is a super clean solution, it is not also super
efficient. The method LambdaExpression#isComptaibleWith is coded to
minimize the copies - for example if the lambda is not even potentially
applicable, we will not traverse it multiple times. Another opportunity
is for isComptaibleWith to always return true, IFF we are in a INVOCATION_CONTEXT
but not in an overload resolution scenario (i.e singleton potentially
applicable method) - this could allow resolution to succeed where it should
not, but the error will surface itself during resolve.

Even better solutions could exist - This bug is to explore them.
v0.6.2 of the JSR335 specification mandates complete resolution of the
lambda body for every candidate target type in an overloaded method
invocation. Errors in the lambda body triggered by the super imposition
of the target type should disqualify the candidate method.

Given this requirement, multiple resolutions are the order of the day
and I don't see a cleaner solution than what we have - it is super
clean, tiny and eminently understandable. Any alternates in terms of
"unresolve" or clone of subtrees is going to be unwieldy.

Given we are going to live with this implementation, I cleaned it up
significantly both from a performance standpoint and code readability
stand point, http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=d043ef6776b1e3fad1bb618496ee2a48a9410e4b makes significant
strides.

Shape analysis and result expressions collection which were two separate
passes earlier, implemented via specific ASTVisitor's is folded into normal
resolve now. This should address performance concerns. We are near intrinsic
complexity levels now and this item can be closed.


[1.8][compiler] Explore solutions with better performance characteristics than LambdaExpression#copy()

performance

Fixed Bug 401769 - [1.8][compiler] Explore solutions with better performance characteristics than LambdaExpression#copy() 