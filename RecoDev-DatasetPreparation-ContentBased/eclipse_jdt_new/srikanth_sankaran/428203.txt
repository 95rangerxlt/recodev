As a way to stress test the Java 8 compiler, we could build the entire
eclipse SDK as a collection of 1.8 projects.

We already know that we are able to build the SDK at the prevailing compliance/source levels, but artificially boosting to 1.8 and building
could serve as an excellent test.

This CR will serve as the master bug for this project, with leaf level bugs
created for problems and linked here.

As a way to stress test the Java 8 compiler, we could build the entire
eclipse SDK as a collection of 1.8 projects.

We already know that we are able to build the SDK at the prevailing compliance/source levels, but artificially boosting to 1.8 and building
could serve as an excellent test.

This CR will serve as the master bug for this project, with leaf level bugs
created for problems and linked here.
Jay, Thanks for driving this to completion.
See https://bugs.eclipse.org/bugs/show_bug.cgi?id=428198#c7.
Since Jay is busy with bug 425134, Manoj can you take this over, it would
be ideal if this could be closed for RC1. TIA.
Steps to get started:

    - Install Kepler SR2 - RC4
    - Update to the latest Java 8 bundles from  http://build.eclipse.org/eclipse/builds/4P/siteDir/updates/4.3-P-builds
    - Launch an inner eclipse on a fresh workspace.
    - Install JDK 8b129 (on the fresh ...)
    - Import all projects from target platform as source projects.
    - Follow the steps in https://bugs.eclipse.org/bugs/show_bug.cgi?id=428198#c7
      to get rid of build errors.
    - Boost all projects to be 1.8 source, compliance and code generation.
    - Analyze any build errors and raise defects.
    - Once we have a clean build, import JDT/Core + APT + UI test projects
      and make sure they are green.
    - Launch an inner-inner eclipse and do some 15 minutes worth of smoke testing
Directly importing all projects from target platform produces huge number
of errors. I think this is a better way to make progress:

Launch the inner eclipse from a workspace with a patched version of JDT/Core
that boosts the project settings to 1.8 automatically (i.e ignore prefs files
settings). Also the patched version of JDT/Core should ignore incompatible JREs -
many projects don't build due to this setting being set to Error. With these
in place have a single JRE (JRE8b129) in in the inner eclipse and map that as
the JRE from all the way from 1.4 onwards.

I'll prepare a patch for this experiment.
Created attachment 240135
Patch to easily build entire SDK as a collection of 1.8 projects.
Manoj, 

This patch:

    - Forces the source level, compliance level and code generation level
to be uniformly 1.8 for all projects compiled with the patched compiler by
simply ignoring and overriding any attempt to set it to other values via
any means (preferences files, APIs, ...). With this in effect, there is no
need to manually patch the properties of 268 projects from the target platform.

    - Simply ignores all forbidden API related errors by once again ignoring
and overriding any attempt to set it to Error/Warning through preferences, APIs
etc.

    - Ignores/discards any incompatible JRE diagnostics that would originate
by processing class path entries, container descriptions.

So here is the process:

    - Start Kepler SR2 - RC4 + Latest Java 8 bundles on a JDT/Core development
workspace.

    - Ensure the JDT/Core development workspace (aka outer eclipse workspace)
is synched with the repo - pull, make sure there are no dirty checked out files
etc.

    - Apply the patch provided.

    - Launch an inner eclipse on a clean/empty workspace.

    - In the inner workspace, make sure there is only one JRE: JRE8b129.

    - In the inner eclipse set file encoding to UTF8.

    - Inner eclipse - set missing API baseline to ignore.

    - Import all projects from target platform as source projects - you
should see 268 of them.

    - Inner eclipse: Close these 11 projects that have build time dependancies
that are not satisfied by the target platform + JRE:

/org.apache.commons.logging
/org.apache.felix.gogo.command
/org.apache.felix.gogo.runtime
/org.apache.felix.gogo.shell
/org.apache.httpcomponents.httpclient
/com.jcraft.jsch
/org.eclipse.core.runtime.compatibility.registry
/org.eclipse.jetty.continuation
/org.eclipse.jetty.server
/org.eclipse.jetty.servlet
/org.eclipse.jetty.util

(org.eclipse.core.runtime.compatibility.registry - I didn't fully
understand the reason why this wouldn't build, but it has nothing
to do with the compiler, so let us move on) 

    - Inner eclipse: multi select the errors: "Build path specifies execution environment ..." and delete the markers.

    - At this point, you should be left with just one error: Remove the
(Object) cast - that is bad 1.5+ code.

    - You should have 0 errors now.

    - To verify that the patched compiler worked, go put some lambda code
somewhere in JDT/Core - it should compile without your being told, you can't
use lambda below 1.8 - after all, we have boosted settings to 1.8 forcefully.

    - Launch an inner inner eclipse and do some smoke testing

    - In the inner eclipse, back out the effects of the patch from the
outer eclipse and run JDT/Core tests. 

Let me know if I skipped some step and the script does not play out exactly
as I have outlined.
(In reply to Srikanth Sankaran from comment #7)

>     - Launch an inner inner eclipse and do some smoke testing

BTW, this worked fine for me - though I tested it only very briefly.

>     - In the inner eclipse, back out the effects of the patch from the
> outer eclipse and run JDT/Core tests. 

This step is crucial before running automated tests - as otherwise the 
inner eclipse will also artificially boost project settings and the tests
will fail.
Stephan, I see a bunch of NPEs in the automated tests all having to do with
SE7 style null annotation bundles - I have seen some mails fly about on this 
topic without having paid close attention to them and assume there is a rational
explanation for these failures.

Failing statement (there are 2-3 variants, but essence is the same) looks
somewhat like:

		String version = sourceLevel < ClassFileConstants.JDK1_8 ? "[1.1.0,2.0.0)" : "[2.0.0,3.0.0)";
		Bundle[] bundles = Platform.getBundles("org.eclipse.jdt.annotation", version);
		File bundleFile = FileLocator.getBundleFile(bundles[0]);

NPE at the bundles[0] access.

If you think something is amiss, please reopen. (1.8 null annotations tests
all pass)

Test scenario is described in comment#7.
Smoke testing + automated testing went well. Resolving.
(In reply to Srikanth Sankaran from comment #9)
> Stephan, I see a bunch of NPEs in the automated tests all having to do with
> SE7 style null annotation bundles - I have seen some mails fly about on this 
> topic without having paid close attention to them and assume there is a
> rational
> explanation for these failures.
> 
> Failing statement (there are 2-3 variants, but essence is the same) looks
> somewhat like:
> 
> 		String version = sourceLevel < ClassFileConstants.JDK1_8 ? "[1.1.0,2.0.0)"
> : "[2.0.0,3.0.0)";
> 		Bundle[] bundles = Platform.getBundles("org.eclipse.jdt.annotation",
> version);
> 		File bundleFile = FileLocator.getBundleFile(bundles[0]);
> 
> NPE at the bundles[0] access.

I'm working on the exact equivalent in the QuickFix for adding the library to a Java project. Basically we need to directly use the PackageAdmin instead of Platform.getBundles(), because one of the bundle versions doesn't get resolved by the Equinox framework, and Platform.getBundles() doesn't answer unresolved bundles :( -- when switching to the other API this is no longer an issue.

I can prepare a patch for our tests, but I'd like to finish the installation and JDT/UI side of this first, OK?
(In reply to Stephan Herrmann from comment #11)

> I can prepare a patch for our tests, but I'd like to finish the installation
> and JDT/UI side of this first, OK?

No hurry, I was just trying to confirm that these errors have an explanation.
(In reply to Srikanth Sankaran from comment #9)
> Stephan, I see a bunch of NPEs in the automated tests all having to do with
> SE7 style null annotation bundles - 

Just to clarify - this is not in our normal test process.
Should we want to patch our tests to cope with an unresolved o.e.j.annotation_2.0.0 then s.t. like this commit in JDT/UI should do the trick: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=7881a5bf9c5f5d61a3d148acfc9dcc7538bc8086

(it's from bug 414444 comment 34).

Should, however, never be needed when the annotation bundle exists in source in the same workspace / build.


[1.8][compiler] Build Eclipse SDK as a collection of 1.8 project using ECJ8.

