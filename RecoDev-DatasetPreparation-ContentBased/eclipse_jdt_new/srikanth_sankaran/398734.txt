BETA_JAVA8

The following program should be rejected due to the mismatch between int and String.

interface I {
  String foo();
}
public class X {
  public static void main(String[] args) {
    I i = () -> 42;
  }
}

However, this should be allowed, due to boxing.

interface I {
  Integer baz();
}
public class X {
  public static void main(String[] args) {
    I i = () -> 10;
  }
}

BETA_JAVA8

The following program should be rejected due to the mismatch between int and String.

interface I {
  String foo();
}
public class X {
  public static void main(String[] args) {
    I i = () -> 42;
  }
}

However, this should be allowed, due to boxing.

interface I {
  Integer baz();
}
public class X {
  public static void main(String[] args) {
    I i = () -> 10;
  }
}
And the finer details: This should give an error, shouldn't it?

interface I2 {
  void foo();
}
public class X {
  public static void main(String[] args) {
    I2 i = () -> 42; // Warning: '42' is not used and has no effect
  }
}


Also, I wonder if this should give a warning, though, since it is likely to be a mistake:

interface I3 {
  Object foo();
}
public class X {
  public static void main(String[] args) {
    I3 i = () -> 42; // Warning: Autoboxing, but casting to Object??
  }
}
Created attachment 225939
Patch which adds type checking to a lambda expression (i.e. not a block)

Note this only handles the error cases, not the warning about lack of side effects.

The return statement inside a lambda block is checked already, by virtue of the  of the call to this.block.resolve(...).
Created attachment 225960
Improved patch which also complains about dead expressions

This checks if lambda expressions producing void results have side effects.

I used an anonymous ASTVisitor subclass, I don't know if that's how it's supposed to be done, or should be put into the flow analysis stuff.

Now all that's missing is the check that non-void result lambdas has an actual return statement somewhere:

interface I {
  int baz();
}
public class X {
  public static void main(String[] args) {
    I i1 = () -> {
      System.out.println("No return"); // Error: Lambda block should return value
    };

    I i2 = () -> {
      if (Math.random() < 0.5) return 42;
      // Error: Lambda block doesn't always return a value
    };
  }
}

I see that MethodDeclaration has all what's needed, but I'm unsure how to re-use the code without just copying it.
Created attachment 225978
Patch which also adds the return-path and dead-code analysis for the lambda block

There's a bit of cut and paste from the method and some TODOs but it's going in the right direction.

Also, a MethodBinding is now generated for the lambda body, kept under the LambdaScope::bodyBinding. The implemented method's binding is now known as FunctionalLiteral::targetBinding, rather than 'singleMethod'.

Minor bother: The error text is reused as 'This method must return a result of type {0}'. This should be 'This lambda expression must return a result of type {0}'.
Created attachment 226009
New flow-analysis patch, with fixes

Better return-path and dead-code analysis for lambda blocks:
- Flow info from inside lambda propagated out into surrounding context
- Simple expression lambdas were wrongly checked for return-statements
Created attachment 226095
One more test case, testing escaped exceptions from the block statement

One more test case, and it already passes due to the logic work in attachment 226009.
(In reply to comment #5)
> Created attachment 226009 [details]
> New flow-analysis patch, with fixes
> 
> Better return-path and dead-code analysis for lambda blocks:
> - Flow info from inside lambda propagated out into surrounding context

I haven't checked the spec in this regard, but it looks surprising to me:
Which flow effects of a lambda should have an effect on the surrounding context?
(In reply to comment #7)
> > - Flow info from inside lambda propagated out into surrounding context
> 
> I haven't checked the spec in this regard, but it looks surprising to me:
> Which flow effects of a lambda should have an effect on the surrounding
> context?

You are right - none! Sorry, it wasn't clear - this patch a correction to the earlier patch which didn't isolate the lambda's flow analysis from the analysis of the surrounding expression. You'll see that the patch introduces a copy of the flow, for that reason.
In Gerrit:

https://git.eclipse.org/r/#/c/9919/
https://git.eclipse.org/r/#/c/9921/
https://git.eclipse.org/r/#/c/9922/
https://git.eclipse.org/r/#/c/9944/
(In reply to comment #8)
> You are right - none! Sorry, it wasn't clear - this patch a correction to
> the earlier patch which didn't isolate the lambda's flow analysis from the
> analysis of the surrounding expression. You'll see that the patch introduces
> a copy of the flow, for that reason.

I see now. Yes, the code seems to do the right thing. Thanks.
Most of the fix was already in place (https://bugs.eclipse.org/bugs/show_bug.cgi?id=382701#c47).

Added tests and some tweaks and released via 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=0f7570d7c684bd534d1a62f43357e2b89df8719a
(In reply to comment #1)
> And the finer details: This should give an error, shouldn't it?
> 
> interface I2 {
>   void foo();
> }
> public class X {
>   public static void main(String[] args) {
>     I2 i = () -> 42; // Warning: '42' is not used and has no effect
>   }
> }

This gives an error now: 

Void methods cannot return a value. I don't think we want secondary
errors about value computation without any effects in this scenario.

> Also, I wonder if this should give a warning, though, since it is likely to
> be a mistake:
> 
> interface I3 {
>   Object foo();
> }
> public class X {
>   public static void main(String[] args) {
>     I3 i = () -> 42; // Warning: Autoboxing, but casting to Object??
>   }
> }

We retain behavior compatible with method return. I will add this test
as is to the suite.

(In reply to comment #6)
> Created attachment 226095 [details]
> One more test case, testing escaped exceptions from the block statement
> 
> One more test case, and it already passes due to the logic work in
> attachment 226009 [details].

I'll include this test in bug 399537 which is already released, but still
open pending tests. Thanks.
I released the 4 tests from Jesper's patches via: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=de459e09ccca6c2f4f843cc26e4ef2324f96a78f

and

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=419cadea108bb839203132a84c9622b8cd480296.

Thanks!

The exception test will be included in the relevant bug.
I thought your checks regarding void results were too strict, but I've checked with the spec (EDR 0.5.1 section 15.27.3), regarding lambda congruence, and according to it, the following should NOT be allowed:

    Runnable r3 = () -> data++; // OK, side effect

Funny thing is that javac (b74) allows this without complaints -- it only complains if the expression has no effect, as in: 

X.java:12: error: incompatible types: bad return type in lambda expression
    Runnable r9 = () -> 2 + 2;  // Dead: No side effects
                          ^
    int cannot be converted to void

Perhaps it's worth asking on the lambda-dev list if a spec change is forthcoming in this area - my opinion is that the rule is too strict.
The wording was not clear: The current check matches the spec, but is stricter than b74 javac when a non-block lambda expression is non-void, but the functional descriptor returns void.
Time will tell if spec will be changed, or javac fixed.
(In reply to comment #15)
> The wording was not clear: The current check matches the spec, but is
> stricter than b74 javac when a non-block lambda expression is non-void, but
> the functional descriptor returns void.
> Time will tell if spec will be changed, or javac fixed.

I think you are right - the spec reads: 

"If the descriptor's return type is void, then the lambda body is either a statement expression or a void-compatible block"

From JLS7, a statement expression is one of:

StatementExpression:
Assignment
PreIncrementExpression
PreDecrementExpression
PostIncrementExpression
PostDecrementExpression
MethodInvocation
ClassInstanceCreationExpression

Further more, elsewhere:

#

If the body of a lambda is a statement expression (that is, an expression that would be allowed to stand alone as a statement), it is compatible with a void-producing functional interface type; any result is simply discarded. So, for example, both of the following are legal:

// Predicate has a boolean return
Predicate<String> p = s -> list.add(s);
// Block has a void return
Block<String> b = s -> list.add(s);

Generally speaking, a lambda of the form () -> expr, where expr is a statement expression, is interpreted as either () -> { return expr; } or () -> { expr; }, depending on the target type. 

// ----------

I think a simple instance of check should suffice, we don't need a recursive
descent of the AST with a visitor.

Thanks for catching this, I'll raise a follow up bug.

Glad to have a spec meister on board the ship :)
(In reply to comment #6)
> Created attachment 226095 [details]
> One more test case, testing escaped exceptions from the block statement
> 
> One more test case, and it already passes due to the logic work in
> attachment 226009 [details].

Released this test via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=d47987eb8adab327484d0ae6a8b0d36cd720a33c

on behalf of bug 399537.

Thanks!


[1.8][compiler] Lambda expression type or return type should be checked against the target functional interface method's result type



Bug 398734 - [1.8][compiler] Lambda expression type or return type should be checked against the target functional interface method's result type 