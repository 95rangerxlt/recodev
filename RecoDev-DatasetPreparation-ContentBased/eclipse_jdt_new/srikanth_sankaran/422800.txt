Follow-up to bug 422515. This time, I won't guess a reason...

package jsr335;

public class LambdaAccess2 {
    private String fField; // must be here; can be used or unused

    public void foo(Integer arg) {
        new Thread(() -> {
            // at "arg": Missing code implementation in the compiler
            arg.intValue();
        });
    }
}

Follow-up to bug 422515. This time, I won't guess a reason...

package jsr335;

public class LambdaAccess2 {
    private String fField; // must be here; can be used or unused

    public void foo(Integer arg) {
        new Thread(() -> {
            // at "arg": Missing code implementation in the compiler
            arg.intValue();
        });
    }
}
Sorry, dumb clerical error. I forgot to account for the fields while reaching
for the locals bit in the bit vector. Fixed here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=9195cb5da21bc5c48732c2bcc3d71f4dcc60f9f9

[I don't consider the issue of reusing scopes and bindings from the original
universe in the parallel universe for trial resolves to be declared GRAS yet,
we will have watch out for problems here]


[1.8][compiler] "Missing code implementation in the compiler" 2



Fixed Bug 422800 - [1.8][compiler] "Missing code implementation in the compiler" 2 