This code causes an LCE when run:

interface Functional {
    Long square(Integer a);
}

public class X {
    static class Base {
    	 private Long square(Integer a) {
             return Long.valueOf(a*a);
         } 
    }
    static class SubClass extends Base {
        public Long callSquare(Integer i) {
            Functional fi = SubClass.super::square;
            return fi.square(i);
        }
    }
    public static void main(String argv[]) throws Exception {
    	System.out.println(new SubClass().callSquare(-1));
    }
}

Looks like the method reference in the lambda is associated with SubClass even though it is declared to be from 'super'.

This code causes an LCE when run:

interface Functional {
    Long square(Integer a);
}

public class X {
    static class Base {
    	 private Long square(Integer a) {
             return Long.valueOf(a*a);
         } 
    }
    static class SubClass extends Base {
        public Long callSquare(Integer i) {
            Functional fi = SubClass.super::square;
            return fi.square(i);
        }
    }
    public static void main(String argv[]) throws Exception {
    	System.out.println(new SubClass().callSquare(-1));
    }
}

Looks like the method reference in the lambda is associated with SubClass even though it is declared to be from 'super'.
We seem to miss support for invoking super's private method. If I change it
to public access things work fine. I'l investigate.
Thanks Jay, we were incorrectly massaging the signature to the "compatible type",
which is wrong since private methods cannot be inherited and the signature
should encode only the receiver type.

Fix and tests available here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=a9a745d3dc8adaa654d6924765178874380c9a20


[1.8] LambdaConversionException when method reference to an inherited method is invoked from sub class



Fixed Bug 426086 - [1.8] LambdaConversionException when method reference to an inherited method is invoked from sub class 