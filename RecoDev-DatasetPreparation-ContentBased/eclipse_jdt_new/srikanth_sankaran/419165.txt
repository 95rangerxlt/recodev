BETA_JAVA8:

From https://bugs.eclipse.org/bugs/show_bug.cgi?id=417113#c63:

// --
Working on type inference I discovered:
- an InferenceVariable (subclass of TypeVariableBinding) appeared twice as a key in a HashMap, assumably caused by:
- TypeBinding.hashCode relies on stability of TypeBinding.id
- UnannotatedTypeSystem lazily assigns ids, which violates stability

In that particular case I can workaround by either of:
- eagerly registering with UTS
- overriding hashCode() and equals()

Raising this issue here, because:
- the problem could potentially affect other subclasses of TypeBinding?
- the lone hashCode() looks strange without a matching equals()

@Srikanth, do you have reasons at hand, why the existing code is safe, or should I file a new bug?

// --

No, the existing code is not safe as your HashMap experience shows. The id
assignment is safe from the pov of UTS + ATS, but that is not good enough.

I'll work on resolving this asap. Thanks for catching this.

BETA_JAVA8:

From https://bugs.eclipse.org/bugs/show_bug.cgi?id=417113#c63:

// --
Working on type inference I discovered:
- an InferenceVariable (subclass of TypeVariableBinding) appeared twice as a key in a HashMap, assumably caused by:
- TypeBinding.hashCode relies on stability of TypeBinding.id
- UnannotatedTypeSystem lazily assigns ids, which violates stability

In that particular case I can workaround by either of:
- eagerly registering with UTS
- overriding hashCode() and equals()

Raising this issue here, because:
- the problem could potentially affect other subclasses of TypeBinding?
- the lone hashCode() looks strange without a matching equals()

@Srikanth, do you have reasons at hand, why the existing code is safe, or should I file a new bug?

// --

No, the existing code is not safe as your HashMap experience shows. The id
assignment is safe from the pov of UTS + ATS, but that is not good enough.

I'll work on resolving this asap. Thanks for catching this.
(In reply to Srikanth Sankaran from comment #0)

> In that particular case I can workaround by either of:
> - eagerly registering with UTS

This could be a course of action to unblock your work, till the fix is in. 
Simply calling this.environment.getUnannotatedType(this) from the constructor 
should suffice.
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=e08c40cf1dd83a4533badddfba88090397fd7a51.

Some notes:

    - Significant clean up/rewrite in TypeSystem hierarchy. Basically
UnannotatedTypeSystem got folded into TypeSystem.
    
    - Separate stores in ATS and the now defunct UTS eliminated in
favor of unified storage in TS. This storage is simply an array indexed
by the TypeBinding.id and so there is no need for hashCode to be tinkered
with.
    
    - I considered, but dismissed eager/early registration of types.
At the moment, only those type that undergo, participate in and result
from "derivation" of some sort are tracked by TS and I would prefer to
keep it that way. The term derivation is used in the Pascal sense and
not in the OOP parlance. So derivation here means, creation of arrays,
parameterized types, raw types, wildcard types, annotated types etc.
Exposing every type to TS would mean the tables could blow up in size
with millions of entries most of which would be useless.
 
Commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=49a66f9a973247a981c10aeaef835e85ffcc455f addresses
some remaining corner cases where we were missing opportunities to
create unique annotated types. This is not a correctness issue as
the non-unique ones still shared the TypeBinding.id, but wasted
memory. A bunch of tests exercise these common cases to verify that
we don't clone unless needed. An earlier commit had actually moved
to using unannotated type as the key in table look ups eliminating
some of the scenarios, this one takes in further and I don't know
of cases where we would engage in redundant object creation.

As mistakes go, this one was a pretty dumb one ;-), thanks for catching 
it.


[1.8][compiler] TypeBinding.id assignment interferes with hashmap storage/retrieval



Fixed Bug 419165 - [1.8][compiler] TypeBinding.id assignment cannot be done lazily. 