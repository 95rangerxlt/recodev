Spawned from https://bugs.eclipse.org/bugs/show_bug.cgi?id=430027#c2

For binary types, the problem from bug 430026 shows up no matter if the lambda parameter does or doesn't declare the type.

Example in java.util.function.IntPredicate:

    default IntPredicate and(IntPredicate other) {
        Objects.requireNonNull(other);
        return (value) -> test(value) && other.test(value);
    }

See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=430027#c3

Spawned from https://bugs.eclipse.org/bugs/show_bug.cgi?id=430027#c2

For binary types, the problem from bug 430026 shows up no matter if the lambda parameter does or doesn't declare the type.

Example in java.util.function.IntPredicate:

    default IntPredicate and(IntPredicate other) {
        Objects.requireNonNull(other);
        return (value) -> test(value) && other.test(value);
    }

See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=430027#c3
Jay, please take it forward - I don't know at this time how to materialize
a ICU from BCU.
(In reply to Srikanth Sankaran from comment #1)
> Jay, please take it forward - I don't know at this time how to materialize
> a ICU from BCU.

Actually, I don't think we should try to materialize an ICU at all. We should
recognize this being the binary type scenario and chain accordingly.
(In reply to Srikanth Sankaran from comment #2)
> Actually, I don't think we should try to materialize an ICU at all. We should
> recognize this being the binary type scenario and chain accordingly.

I don't understand what you mean here. I am seeing binding.declaringScope.isLambdaSubscope() not returning true in case of binary. Should I even expect it to?
(In reply to Jayaprakash Arthanareeswaran from comment #3)

> I don't understand what you mean here. I am seeing
> binding.declaringScope.isLambdaSubscope() not returning true in case of
> binary. Should I even expect it to?


Are you sure, it does as shown by the fix and test here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=dd0d8de41ff9634977089468dd69785577ba4097


[1.8][model] Lambda elements missing in ancestry for binary elements



Fixed Bug 430033 - [1.8][model] Lambda elements missing in ancestry for binary elements 