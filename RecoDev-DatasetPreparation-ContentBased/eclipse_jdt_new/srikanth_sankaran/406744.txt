BETA_JAVA8:

We generate bad code that triggers a LCE for this program:

// ---
interface I {
    void foo(Integer a1, Integer a2, String a3);
}

class Y {
    static void m(Number a1, Object... rest) { 
        System.out.println(a1);
        print(rest);
    }
    static void print (Object [] o) {
        for (int i = 0; i < o.length; i++)
            System.out.println(o[i]);
    }
    
}

public class X {
    public static void main(String [] args) {
        I i = Y::m;
        i.foo(10, 20, "10, 20");
    }
}

BETA_JAVA8:

We generate bad code that triggers a LCE for this program:

// ---
interface I {
    void foo(Integer a1, Integer a2, String a3);
}

class Y {
    static void m(Number a1, Object... rest) { 
        System.out.println(a1);
        print(rest);
    }
    static void print (Object [] o) {
        for (int i = 0; i < o.length; i++)
            System.out.println(o[i]);
    }
    
}

public class X {
    public static void main(String [] args) {
        I i = Y::m;
        i.foo(10, 20, "10, 20");
    }
}
Created attachment 230488
Work in progress
I'll take this one up freeing up Jay to look at APT changes. Stephan
if and when cycles become available, this is up for grabs.

This is an interesting fix to work on.

By default, I'll work on it after bringing the overload resolution project
to a good shape.
Andy, this is a very interesting bug to work on. Take a look at
SyntheticMethodBinding.java for various synthetics we already
create.
Anirban, please take it forward, there is an early version of patch
attached to this bug,
Pleases see the disabled test NullTypeAnnotationTest._testBug424637_comment3() for another situation throwing the same exception. Enable after fixing.
*** Bug 425494 has been marked as a duplicate of this bug. ***
Created attachment 239213
First cut working patch

This first cut patch at least passes the example in the description, and some others.
The patch is yet to be completed by:
- considering other scenarios
- general hygiene
- testcases

Regards
Created attachment 239322
Code patch and testcase

Code patch and testcase.
Created attachment 239323
Patch synchronized to HEAD

I released the junits in a disabled form here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=1438111baa39ba1a30117b19ff4ad6ece4a69fe1

I also deleted the already disabled junit since this has been duplicated
in your patch.

(to avoid merge conflicts as this is a busy file)

Patch under review attached.
Comments:

(We need a lot more tests: Please fix these issues add more tests and ask
for review again - I didn't yet review the code - simply did some black
box testing.)

(1) Copy + pasting code as is is dangerous: We generate bad code for:

interface I {
    void foo(int a1, Integer a2, String a3);
}

interface Y {
    static void m(float a1, Object... rest) { 
        System.out.println(a1);
        print(rest);
    }
    static void print (Object [] o) {
        for (int i = 0; i < o.length; i++)
            System.out.println(o[i]);
    }
    
}

public interface X extends Y {
    public static void main(String [] args) {
        I i = Y::m;
        i.foo(10, 20, "10, 20"); 
    }
}


Exception in thread "main" java.lang.ClassFormatError: bootstrap_method_index 36 has bad constant type in class file X
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:760)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:455)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:73)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:367)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:361)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:360)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:495)

// ----

(2) The following program triggers an AIOOB:

interface I {
        String method(int a);
}
class C {
    static String foo(Integer... i) {
        return "foo";
    }

    static String goo(Integer bi, Integer... i) {
        return "bar";
    }

    public void foo() {
    	I i;

    	i = C::foo;
    	i.method(0);

    	i = C::goo;
    	i.method(0);
    }

}

public class X {
    public static void main(String argv[])   {
        new C().foo();
    }
}

java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.syntheticMethods(SourceTypeBinding.java:2400)
	at org.eclipse.jdt.internal.compiler.ClassFile.addSpecialMethods(ClassFile.java:880)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:574)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:639)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode(CompilationUnitDeclaration.java:369)

(3) The following triggers a LambdConversionException:

// --
interface I {
    void foo(Integer a1, Integer a2, String a3);
}

class Y {
    void m(Number a1, Object... rest) { 
        System.out.println(a1);
        print(rest);
    }
    static void print (Object [] o) {
        for (int i = 0; i < o.length; i++)
            System.out.println(o[i]);
    }
    
}

public class X extends Y {
	
	static void print (Object [] o) {
		for (int i = 0; i < o.length; i++)
			System.out.println(o[i]);
	}
	    
    public static void main(String [] args) {
    	new X().foo();
    }
    void foo() { 
    	I i = super::m;
        i.foo(10, 20, "10, 20");
    }
}

Exception in thread "main" java.lang.BootstrapMethodError: call site initialization exception
	at java.lang.invoke.CallSite.makeSite(CallSite.java:328)
	at java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:296)
	at X.foo(X.java:28)
	at X.main(X.java:25)
Caused by: java.lang.invoke.LambdaConversionException: Incorrect number of parameters for static method invokeStatic X.access$0:(X,Number,Object[])void; 1 captured parameters, 3 functional interface method parameters, 3 implementation parameters
	at java.lang.invoke.AbstractValidatingLambdaMetafactory.validateMetafactoryArgs(AbstractValidatingLambdaMetafactory.java:188)
	at java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:303)
	at java.lang.invoke.CallSite.makeSite(CallSite.java:289)
	... 3 more

(4) We generate bad code for this program. As a result, the compiled program
prints:

10
10
20
10, 20

while with javac it prints: (correctly)

10
20
10, 20


// --
interface I {
    void foo(Integer a1, Integer a2, String a3);
}

class Y {
    
    static void print (Object [] o) {
        for (int i = 0; i < o.length; i++)
            System.out.println(o[i]);
    }
    
}

public class X extends Y {
	private void m(Number a1, Object... rest) { 
        System.out.println(a1);
        print(rest);
    }
	static void print (Object [] o) {
		for (int i = 0; i < o.length; i++)
			System.out.println(o[i]);
	}
	    
    public static void main(String [] args) {
    	new X().foo();
    }
    void foo() { 
    	I i = this::m;
        i.foo(10, 20, "10, 20");
    }
}

(5) This program triggers a java.lang.BootstrapMethodError: call site initialization exception: Type mismatch for lambda argument 1: class [I is not convertible to class [Ljava.lang.Object;

interface I {
    void foo(int [] ia);
}

class Y {
    void m(Object... rest) { 
        print(rest);
    }
    static void print (Object [] o) {
        for (int i = 0; i < o.length; i++)
            System.out.println(o[i]);
    }
    
}

public class X extends Y {
    public static void main(String [] args) {
    	new X().foo();
    }
    void foo() { 
    	I i = super::m;
        i.foo(new int [0]);
    }
}
(In reply to Srikanth Sankaran from comment #10)

> (2) The following program triggers an AIOOB:

Please fix this first as this is inhibiting further testing
Created attachment 239367
Code and test patch

Code and test patch. Fixed all the reported issues. Added several other testcases. Ran RunOnlyJava8Tests. Will run all jdt core tests sometime during the day.
Please obsolete old patches as you post new ones.

I did some more black box testing and it appears we continue to generate
bad code for fairly straightforward cases. Here are some examples:

(1) We generate bad code for the following program: As a result the
class file fails verification step:

interface I {
	void foo(Integer i);
}
public class X {
	static void foo(int ... x) {
	}
	public static void main(String[] args) {
		I i = X::foo;
		i.foo(1);
	}
}

Exception in thread "main" java.lang.VerifyError: Bad local variable type

(2) Even without autoboxing involved, I get a verify error for:

interface I {
	void foo(int i);
}
public class X {
	static void foo(int ... x) {
	}
	public static void main(String[] args) {
		I i = X::foo;
		i.foo(1);
	}
}

(3) We generate bad code for the following program. It should print "OK"
instead throws 

Exception in thread "main" java.lang.RuntimeException
	at X.foo(X.java:13)
	at X.lambda$0(X.java:1)
	at X$$Lambda$1/1995265320.foo(Unknown Source)
	at X.goo(X.java:20)
	at X.main(X.java:16)

After these are fixed, I'll test some more. Thanks for looking into this
asap.
You may have an easier time, if the bridge's signature is derived from
the target method rather than from the interface method. That way auto
boxing/unboxing concerns may be delegated to the lambda meta factory.
(I haven't verified this would work - it should is my expectation)
(In reply to Srikanth Sankaran from comment #13)

> (3) We generate bad code for the following program. It should print "OK"
> instead throws 

Sorry, forgot to attach test case: here it is

interface I {
	void foo(Integer i);
}
class Base {
	void foo(Object ...objects) {
		System.out.println("Ok");
	}
}
public class X extends Base {
	void foo(Object... objects) {
		throw new RuntimeException();
	}
	public static void main(String[] args) {
		new X().goo();
	}
	void goo() {
		I i = super::foo;
		i.foo(10);
	}
}
Created attachment 239376
patch

Hello,
Patch that fixes all the previously reported bugs, and adds them 9and many others) as testcases.
RunOnlyJava8Tests clean.
I'll do some more testing.
Regards
Anirban
More problems in code generation:

(1) LambdaConversionException: Type mismatch in captured lambda parameter 0: expecting class X, found class Base

interface I {
	void foo(int x);
}

class Base {
	public void foo(int ...is) {
		System.out.println("foo");
	}
}
public class X extends Base {
  public static void main( String[] args ) {
	  I i = new X()::foo;
	  i.foo(10);
  }
}
 
Exception in thread "main" java.lang.BootstrapMethodError: call site initialization exception
	at java.lang.invoke.CallSite.makeSite(CallSite.java:328)
	at java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:296)
	at X.main(X.java:12)
Caused by: java.lang.invoke.LambdaConversionException: Type mismatch in captured lambda parameter 0: expecting class X, found class Base
	at java.lang.invoke.AbstractValidatingLambdaMetafactory.validateMetafactoryArgs(AbstractValidatingLambdaMetafactory.java:237)
	at java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:303)
	at java.lang.invoke.CallSite.makeSite(CallSite.java:289)
	... 2 more

(2) Type mismatch for lambda argument 1: int is not convertible to class [I

interface I {
	void foo(int x);
}

public class X {
	private void foo(int ...is) {
		System.out.println("foo");
	}

	public static void main(String[] args ) {
		new X().new Y().foo();
	}
	
  class Y extends X {
	  void foo() {
		  I i = new X()::foo;
		  i.foo(10);
	  }
  }
}

Exception in thread "main" java.lang.BootstrapMethodError: call site initialization exception
	at java.lang.invoke.CallSite.makeSite(CallSite.java:328)
	at java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:296)
	at X$Y.foo(X.java:16)
	at X.main(X.java:11)
Caused by: java.lang.invoke.LambdaConversionException: Type mismatch for lambda argument 1: int is not convertible to class [I
	at java.lang.invoke.AbstractValidatingLambdaMetafactory.validateMetafactoryArgs(AbstractValidatingLambdaMetafactory.java:248)
	at java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:303)
	at java.lang.invoke.CallSite.makeSite(CallSite.java:289)
	... 3 more

(3) The following program triggers a verify error:

Exception in thread "main" java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    X.lambda$0(I)LX; @11: invokespecial
  Reason:
    Type uninitialized 0 (current frame, stack[1]) is not assignable to 'X'

// --
import p.*;
interface I {
	X foo(int x);
}

public class X {

	class Y extends X {
	    Y(int ... x) {
		    System.out.println("Y::Y");
	    }
	}
	public static void main(String[] args ) {
		new X().goo();
	}
	
	void goo() {
		I i = Y::new;
		i.foo(10);
	}
}


(4) We generate bad code for the program below. It should print

X.foo
Y.foo

instead prints:

X.foo
X.foo


interface I {
	void foo(int t);
}

class Y {
	public static void foo(int ...is) {
		System.out.println("Y.foo");
	}
}
public class X {
	public static void foo(int ...is) {
		System.out.println("X.foo");
	}
	public static void main(String[] args) {
		I i = X::foo;
		i.foo(10);
		i = Y::foo;
		i.foo(20);
	}
}

(We should simply be checking for == of method bindings on the target side
not name, parameters and return type.)

(5) Another variant that triggers a runtime error:

interface I {
	void foo(int t, int [] ia);
}
public class X {
	public static void foo(Integer i, int ...is) {
		System.out.println("Y.foo");
	}
	public static void main(String[] args) {
		I i = X::foo;
		i.foo(10, null);
	}
}

Review Comments:

(1) Please fix the new compiler warnings introduced.
(2) Let us get rid of the entire bridge method reuse mechanism for now,
We will address this in a follow up patch. For now every reference
expression targetting a varargs method can have its own synthetic method.
(3) (2) would also mean we would be able to postpone the NOT_BOOTSTRAPPED
logic ? If so remove these portions also for now.
(4) What explains this code in syntheticMethods()
	if (bindings.length == 1 && bindings[0] == null) {
		return null;
	}
(In reply to Srikanth Sankaran from comment #17)
> More problems in code generation:

Many cases already work so that it may make sense to release what we have for
EAR3 and then address the new crop of problems in a follow up patch.

So could you look into the clean ups required by these comments first and
post a patch ? Thanks
 
> Review Comments:

...
Created attachment 239430
patch

Hello,
This RunOnlyJava8Tests clean patch fixes all the issues reported upto comment#17.
I'll clean up code, remove optimizers etc and do some testing and submit another patch shortly.
Regards
Anirban
(In reply to ANIRBAN CHAKRABORTY from comment #19)

> This RunOnlyJava8Tests clean patch fixes all the issues reported upto
> comment#17.

Upto and including comment#17. Testcases added.
(In reply to ANIRBAN CHAKRABORTY from comment #20)
> (In reply to ANIRBAN CHAKRABORTY from comment #19)
> 
> > This RunOnlyJava8Tests clean patch fixes all the issues reported upto
> > comment#17.
> 
> Upto and including comment#17. Testcases added.

This ignores the request in comment#18 to simplify the existing patch
by removing all non-essentials so it would be easy to review and release
in time for EAR3 and goes the other direction by adding more 
non-essentials :-(

Comparing the newly introduced method

org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isSubClassOf(SourceTypeBinding, SourceTypeBinding)

with the existing:

 org.eclipse.jdt.internal.compiler.lookup.TypeBinding.findSuperTypeOriginatingFrom(TypeBinding)

I suspect that there could be holes in the new implementation - didn't
actually verify.

// ----

This patch causes build failures:

Description	Resource	Path	Location	Type
The uninterned types TypeBinding and SourceTypeBinding should not be compared using ==/!= operators.	ReferenceExpression.java	/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast	line 207	Java Problem
The uninterned types SourceTypeBinding and SourceTypeBinding should not be compared using ==/!= operators.	ReferenceExpression.java	/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast	line 250	Java Problem

Since it obviously compiles for you, you must be using a stale and incorrect 
build environment. Please upgrade.

Now no need to back track, let us move forward by fixing the build errors,
and incorporate the clean ups requested in comment#17 bottom and start the
review once it is done. Thanks.
Created attachment 239463
patch after removing optimizer

patch after removing optimizer
(In reply to ANIRBAN CHAKRABORTY from comment #22)
> Created attachment 239463 [details]
> patch after removing optimizer
> 
> patch after removing optimizer

Thanks Anirban, I may not have time to wrap up the review in for EAR3,
but in any case assuming all is well, we will release this early next
week.
The following program triggers a verify error: 

// --
interface I {
	X foo(int x);
}
public class X<T> {
	class Y extends X {
	    Y(int ... x) {
		    System.out.println("Y::Y");
	    }
	}
	public static void main(String[] args ) {
		System.out.println("Hello");
		new X().goo();
	}
	void goo() {
		I i = Y::new;
		i.foo(10);
	}
}

Exception in thread "main" java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    X.lambda$0(I)LX; @11: invokespecial
  Reason:
    Type uninitialized 0 (current frame, stack[1]) is not assignable to 'X'

(2) Likewise this case:

interface I {
	X<String> foo(int x);
}
public class X<T> {  
	class Y extends X<String> {
	    Y(int ... x) {
		    System.out.println("Y::Y"); 
	    }
	}
	public static void main(String[] args ) {
		System.out.println("Hello");
		new X<String>().goo();  
	}
	void goo() {
		I i = Y::new;
		i.foo(10); 
	}
}

(3) I also noticed some cases where the program produces no output while
it should. I don't know the exact sequence needed to reproduce this, clean
build vs incremental build seems to have an influence. 

These are all corner cases. I think we should wrap up the review since
many cases work well - I'll take up this task, but this cannot be squeeezed
in for EAR3.
Doing some white box testing along with code review, I can spot problem areas:
Continuing the numbering with issues still open from comment#24:

(3) The following program triggers an exception because 
in manageSyntheticAccessIfNecessary, varargs are not considered in the
if (this.isConstructorReference()) {} block.


Exception in thread "main" java.lang.BootstrapMethodError: call site initialization exception
	at java.lang.invoke.CallSite.makeSite(CallSite.java:328)
	at java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:296)
	at X$Y.goo(X.java:14)
	at X.main(X.java:10)
Caused by: java.lang.invoke.LambdaConversionException: Incorrect number of parameters for static method invokeStatic X$Y.lambda$0:(int[])X; 0 captured parameters, 0 functional interface method parameters, 1 implementation parameters
	at java.lang.invoke.AbstractValidatingLambdaMetafactory.validateMetafactoryArgs(AbstractValidatingLambdaMetafactory.java:188)
	at java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:303)
	at java.lang.invoke.CallSite.makeSite(CallSite.java:289)
	... 3 more


// --
interface I {
	X foo();
}
public class X {
	private X(int ... is) {
		System.out.println("X::X");
	}
	
	public static void main(String[] args) {
		new X().new Y().goo();
	}
	public class Y {
		public void goo() {
			I i = X::new; 
			i.foo();
		} 
	}
}

(4) The following program triggers an exception because 
in manageSyntheticAccessIfNecessary, varargs are not considered in the
if (this.binding.isProtected() && (this.bits & ASTNode.DepthMASK) != 0 && codegenBinding.declaringClass.getPackage() != enclosingSourceType.getPackage()) {}

block:

Exception in thread "main" java.lang.BootstrapMethodError: call site initialization exception
	at java.lang.invoke.CallSite.makeSite(CallSite.java:328)
	at java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:296)
	at p2.B$Y.g(B.java:12)
	at p2.B.main(B.java:19)
Caused by: java.lang.invoke.LambdaConversionException: Type mismatch for lambda argument 0: int is not convertible to class [I
	at java.lang.invoke.AbstractValidatingLambdaMetafactory.validateMetafactoryArgs(AbstractValidatingLambdaMetafactory.java:248)
	at java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:303)
	at java.lang.invoke.CallSite.makeSite(CallSite.java:289)
	... 3 more

// --
package p2;
import p1.*;								
interface I {
	void foo(int x);
}
interface J {
	void foo(int x);
}
public class B extends A {
	class Y {
		void g() {
			I i = B::foo;
			i.foo(10);
			J j = new B()::goo;
			j.foo(10);
		}
	}
	public static void main(String[] args) {
		new B().new Y().g();
	}
}
// --
package p1;
import p2.*;
public class A {
	protected static void foo(int ... is) {
	    System.out.println("A's static foo");
	}
	protected void goo(int ... is) {
	    System.out.println("A's instance goo");
	}
}
Continuing with code review and white box testing, I am finding more and
more issues. The patch looks overly complicated with quite a bit of reinvention
and not enough reuse.

Anirban, I'll take this one over, I have a 50 line implementation that passes all
the tests including the most recently reported one.
Created attachment 239563
Proposed patch

This passes all the varargs tests. Running all JDT/Core tests now.
Anirban, please take a look. We delegate all the complexity to MessageSend
by synthesizing an implicit lambda.

This patch is < 60 lines long all told and should be very simple to understand.
Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=0b6cbc7336ec44b9257b7aa04e8ba2a7e4c8be56

This is essentially the same as the "Proposed patch" with 3 differences:

    - Fixed a wrong check ReferenceExpression.manageSyntheticAccessIfNecessary
    - Added a test to establish that the above is necessary and sufficient.
    - Eliminated potential double reporting of errors/warnings during flow
      analysis. 

The approach exemplified by this patch could perhaps be used for all situations
that require synthetics, not just variable arity methods, but it will incur
a bit of runtime overhead ([implicit lambda -> bridge -> target] as opposed to
[bridge -> target].


[1.8][compiler][codegen] LambdaConversionException seen when method reference targets a varargs method.



Fixed Bug 406744 - [1.8][compiler][codegen] LambdaConversionException seen when method reference targets a varargs method 

(Disabled) junits for Bug 406744 - [1.8][compiler][codegen] LambdaConversionException seen when method reference targets a varargs method. 

Added (disabled) test for bug 406744 