This happened while I was trying to create an example for bug 422515. The code has compile errors, but there shouldn't be an NPE.

!ENTRY org.eclipse.jdt.core 4 4 2013-11-25 20:47:34.680
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package jsr335;

public class LambdaAccessArray {
    public static void main(String[] args) throws InterruptedException {
        final int[] result= { 0 };
        Thread t = new Thread(() -> {
            sysoresult[0]= 42;
        });
        t.start();
        t.join();
        System.out.println(result[0]);
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ArrayReference.analyseAssignment(ArrayReference.java:57)
	at org.eclipse.jdt.internal.compiler.ast.Assignment.analyseCode(Assignment.java:80)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:43)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.doesNotCompleteNormally(LambdaExpression.java:309)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.isCompatibleWith(LambdaExpression.java:506)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4435)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4404)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:678)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:620)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getConstructor(Scope.java:2172)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType(AllocationExpression.java:446)
	at org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:244)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:620)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:303)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:531)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1209)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1319)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:570)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:920)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:196)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)

This happened while I was trying to create an example for bug 422515. The code has compile errors, but there shouldn't be an NPE.

!ENTRY org.eclipse.jdt.core 4 4 2013-11-25 20:47:34.680
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package jsr335;

public class LambdaAccessArray {
    public static void main(String[] args) throws InterruptedException {
        final int[] result= { 0 };
        Thread t = new Thread(() -> {
            sysoresult[0]= 42;
        });
        t.start();
        t.join();
        System.out.println(result[0]);
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ArrayReference.analyseAssignment(ArrayReference.java:57)
	at org.eclipse.jdt.internal.compiler.ast.Assignment.analyseCode(Assignment.java:80)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:43)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.doesNotCompleteNormally(LambdaExpression.java:309)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.isCompatibleWith(LambdaExpression.java:506)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4435)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4404)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:678)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:620)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getConstructor(Scope.java:2172)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType(AllocationExpression.java:446)
	at org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:244)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:620)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:303)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:531)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1209)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1319)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:570)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:920)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:196)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
Variant after some more typing:

        Thread t = new Thread(() -> {
            System.out.printlnresult[0]= 42;
        });

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Reference.checkNullableFieldDereference(Reference.java:62)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference.checkNPE(QualifiedNameReference.java:285)
	at org.eclipse.jdt.internal.compiler.ast.ArrayReference.analyseCode(ArrayReference.java:67)
	at org.eclipse.jdt.internal.compiler.ast.ArrayReference.analyseAssignment(ArrayReference.java:56)
	at org.eclipse.jdt.internal.compiler.ast.Assignment.analyseCode(Assignment.java:80)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:43)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.doesNotCompleteNormally(LambdaExpression.java:309)
In the normal course of things, if there are resolution errors, ECJ will not
proceed to data/control analysis. So, much of the code in that part of the world
is unprepared for errors in resolution phase.

With lambda expressions, we need the ability to analyze a lambda body to compute
its "shape" i.e whether it is value compatible or void compatible or both or 
neither - this information is required during resolution stage itself. 

Perhaps, we could defer the shape analysis till we have a "valid" target type
i.e one that does not result in resolution errors due to imposition of the
target type. This could result in subtle differences in diagnostics: We could
dismiss a method as not being applicable due to errors in the lambda body that
are extraneous to the target type. We could in some corner cases compile code
that should not be compiled - not sure, I'll investigate. Till then we will
be in a find & fix mode. 

doesNotCompleteNormally() also runs the flow analysis on the lambda without
running flow analysis on the enclosing method - that method has not been
fully resolved - we are after all in the thick midst of it when we ran into
the lambda. In the normal scheme of things, this would be a no-no due to
spurious errors that would result, but here we are interested in only the
shape and all diagnostics are suppressed by opting for a silent error
handling policy.
Fix and tests available here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=6908ed269579bdf5bd73625206374e9ed19646b4

Stephan, when you have a moment you may want to scan through the
null type annotation code to see if there are other such places that need
to be guarded with a != null or isValidBinding checks. I don't think it
is reasonable to expect to guard all code with isAnnotationBasedNullAnalysisEnabled
since it is a pain to have to traverse to top scope to retrieve this.

It is amazing that retrieving an option can be so tedious as in JDT.
Value/void compatibility is also not a "structural property": it cannot be
ascertained by writing an ASTVisitor of sorts. Constants in control flow, 
exception throws etc have a bearing on the result.
(In reply to Srikanth Sankaran from comment #3)

> Stephan, when you have a moment you may want to scan through the
> null type annotation code to see if there are other such places 

Please ignore this request ! I realized that in https://bugs.eclipse.org/bugs/show_bug.cgi?id=421897 I rather over eagerly
pruned some code that is absolutely necessary (not as is, but with some minor
changes).

Basically carrying out control/data flow analysis when the construct has
semantic errors in resolve phase is fraught with peril and is tantamount
to open invitation for NPE ! Consider:

// --
interface I {
	void foo(String [] x, String y);
}
public class X {
	static void goo(I i) {
	} 
	public static void main(String[] args) throws InterruptedException {
		goo((x, y) -> { x[0] = y.toUpperCase(); });  
	}
}
// -- 

Now thrown in another interface and an overloaded method:

// --
interface J {
	void foo(int x, int y);
}
interface I {
	void foo(String [] x, String y);
}
public class X {
	static void goo(J j) {  
	}
	static void goo(I i) {
	} 
	public static void main(String[] args) throws InterruptedException {
		goo((x, y) -> { x[0] = y.toUpperCase(); });  
	}
}
// --

As potentially applicable methods are compatibility tested, if resolution and
shape analysis are carried out first in the context of the target type J, then

x[0].resolvedType ==> null
y.toUpperCase().binding == null.

I'll reinstate that code and tweak it to work (i.e carry out flow analysis
only if resolve is successful - the lambda is tagged as having an unknown
shape until such time we have a target type that allows successful resolution
of the lambda body.
The point fix posted earlier was withdrawn and a comprehensive fix released
via https://bugs.eclipse.org/bugs/show_bug.cgi?id=422489#c2.


[1.8][compiler] NPE in ArrayReference.analyseAssignment



Fixed bug Bug 422516 - [1.8][compiler] NPE in ArrayReference.analyseAssignment 