Using Eclipse 4.3.2, BETA_JAVA8 JDT plugins 1.0.0.v20140309-1413, Eclipse.org, jdk1.8 build 132,

ECJ compiler fails with the
ERROR MESSAGE: "The target type of this expression must be a functional interface".

This worked a few days before.
Jdk8 compiles fine.



import java.util.function.Supplier;

public class Main {

	public static void main(String[] args) {
		
		// This does not compile with ECJ
		test(() -> "hi");
		
	}
	
	// Note: when removing this code the main function compiles with ECJ
	static void test(String message) {
	}

	static void test(Supplier<String> messageSupplier) {
	}
	
}

Using Eclipse 4.3.2, BETA_JAVA8 JDT plugins 1.0.0.v20140309-1413, Eclipse.org, jdk1.8 build 132,

ECJ compiler fails with the
ERROR MESSAGE: "The target type of this expression must be a functional interface".

This worked a few days before.
Jdk8 compiles fine.



import java.util.function.Supplier;

public class Main {

	public static void main(String[] args) {
		
		// This does not compile with ECJ
		test(() -> "hi");
		
	}
	
	// Note: when removing this code the main function compiles with ECJ
	static void test(String message) {
	}

	static void test(Supplier<String> messageSupplier) {
	}
	
}
Thanks, will follow up.
That is embarrassing - sorry for the regression. We have several dozens of new
tests added for overload resolution and this one still managed to leak through.

Turns out the order of the declaration of methods is important to expose the
bug and in our suite they are in the other order (which makes the program
compile correctly).

New tests and fix released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=790a4755f1e08ee65c34f5b100ef95ca16f9dd1e

Thanks for continued testing.


[1.8][compiler] Resolution of right method signature



Fixed Bug 429985 - [1.8][compiler] Resolution of right method signature 