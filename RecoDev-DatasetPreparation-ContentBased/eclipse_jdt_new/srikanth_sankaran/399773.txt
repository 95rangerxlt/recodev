BETA_JAVA8: 

Java 8 amends to 15.16 allow type casts to constitute an intersection
type of the form (Runnable & Serializable), so the following program
is legal:

// -----
interface I {
	void foo();
}
interface J {
	
}
class X {
	I i = (I & J) () -> {};
}
// ---

ECJ at the moment lacks support for such constructs starting at the
grammar level.

BETA_JAVA8: 

Java 8 amends to 15.16 allow type casts to constitute an intersection
type of the form (Runnable & Serializable), so the following program
is legal:

// -----
interface I {
	void foo();
}
interface J {
	
}
class X {
	I i = (I & J) () -> {};
}
// ---

ECJ at the moment lacks support for such constructs starting at the
grammar level.
Gee. This restarts the war with jikes parser generator. Sigh.
(In reply to comment #1)
> Gee. This restarts the war with jikes parser generator. Sigh.

I have one big hammer (i.e the VanguardParser) and every problem looks
like a nail (i.e a look ahead problem). By manufacturing and injecting
synthetic tokens, I am able to pound the grammar into LALR(1). Anybody
is welcome to take a look at alternate more traditional solutions.
(In reply to comment #2)

> Anybody is welcome to take a look at alternate more traditional solutions.

The way the language parsing challenges are growing, look ahead is fast
becoming the traditional solution ! I shudder to think of Java 9, 10, 11 ...
Created attachment 226735
Work in progress.

Scanner, Grammar/parser, AST changes are in place. Resolution will come in
shortly. Passes all java8 tests, but otherwise has seen only minimal testing.
First batch of changes comprising scanner + grammar/parser + AST construction
changes released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=de0ec0255833f27449d5f59da580e82b41fe6f0d.

Semantic analysis and resolution support will follow in a separate commit.
Released full implementation via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=c8d8bdad35a9dc8d924116cabb6dd00986cff218.

Tests and any cleanups will come in the next batch.
Tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=a37ee47488a77bad716b4a3fedf657bf44dd87da


[1.8][compiler] Cast expression should allow for additional bounds to form intersection types



Tests for 399773: cast changes for 335. 

Bug 399773 - [1.8][compiler] Cast expression should allow for additional bounds to form intersection types - First batch of changes. 