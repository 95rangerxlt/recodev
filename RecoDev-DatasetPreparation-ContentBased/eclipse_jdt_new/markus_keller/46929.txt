I20031119 (M5 testpass)

1. Have this code:

public class Test {
	
	public void foobar() {
		class Listener2 {
			public int bar() {
				return 0;
			}
		}
		
		this.addListener(new Listener2() {
			public int bar() {
				return 1;
			}
		});
	}
	
	
	public void addListener(Object o) {
	}
}

2. Select the anonymous class extending the local type
3. Choose Refactor->Convert Anonymous Class to Nested

-> The refactoring is possible and does the semi-expected, creating a new nested
type
-> This is wrong, because the Listener type is not visible outside the method

I20031119 (M5 testpass)

1. Have this code:

public class Test {
	
	public void foobar() {
		class Listener2 {
			public int bar() {
				return 0;
			}
		}
		
		this.addListener(new Listener2() {
			public int bar() {
				return 1;
			}
		});
	}
	
	
	public void addListener(Object o) {
	}
}

2. Select the anonymous class extending the local type
3. Choose Refactor->Convert Anonymous Class to Nested

-> The refactoring is possible and does the semi-expected, creating a new nested
type
-> This is wrong, because the Listener type is not visible outside the method
We should check if one of the super types is a local type. If so the 
refactoring should report and error, or be disabled.
Fixed.
It's too late to remember I really have to click the 'Resolve...' radio button ...


refactoring: anonymous subclass of local type can be made nested [refactoring]



46929: refactoring: anonymous subclass of local type can be made nested 