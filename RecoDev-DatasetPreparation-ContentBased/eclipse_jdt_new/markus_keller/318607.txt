org.eclipse.ltk.core.refactoring.participants.RefactoringParticipant.checkConditions() has a throws clause of OperationCanceledException. In my implementation of checkConditions() I check progressMonitor.isCanceled() and then throw the OperationCanceledException. ProcessorBasedRefactoring catches it and logs it, which just seems wrong to me.

Of course the workaround is just to return null instead of throwing the OperationCanceledException.

RefactoringParticipant.createChange() has the same problem but worse. In this case my participant gets removed from the framework as a result of throwing the OperationCanceledException.

I assume createPreChange() has the same issue.

org.eclipse.ltk.core.refactoring.participants.RefactoringParticipant.checkConditions() has a throws clause of OperationCanceledException. In my implementation of checkConditions() I check progressMonitor.isCanceled() and then throw the OperationCanceledException. ProcessorBasedRefactoring catches it and logs it, which just seems wrong to me.

Of course the workaround is just to return null instead of throwing the OperationCanceledException.

RefactoringParticipant.createChange() has the same problem but worse. In this case my participant gets removed from the framework as a result of throwing the OperationCanceledException.

I assume createPreChange() has the same issue.
That's bad. Has been like this forever though (bug 116223, bug 63155), so I'm just going to fix it for 3.7, given that you already have a workaround.
Created attachment 173299
Fix
Fixed in HEAD.
Thanks for fixing this so quickly, Markus! Looks good to me, checked it out from head


[ltk] RefactoringParticipant methods declare throws OperationCanceledExeption: exception gets logged



Bug 318607: [ltk] RefactoringParticipant methods declare throws OperationCanceledExeption: exception gets logged 