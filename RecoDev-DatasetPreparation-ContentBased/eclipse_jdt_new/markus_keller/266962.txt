Hamcrest core is now available in orbit (bug 260092).

Please consider removing it from JUnit and consuming hamcrest core from orbit instead.

Hamcrest core is now available in orbit (bug 260092).

Please consider removing it from JUnit and consuming hamcrest core from orbit instead.
(In reply to bug 261234 comment #10)
> And of course, the JUnit classpath container and the Java and PDE JUnit launch
> configurations would have to be adjusted to work with the org.junit 4.5 bundle.
> And everything also needs to work when you develop with Eclipse 3.5 against a
> 3.4 target platform.

Adjustments to get the hamcrest Jar in everywhere would need to be done no matter whether we move JUnit4 to Orbit or not (bug 261234).
I started to look into this, but I ran into bug 269724.
Created attachment 129980
Fix

When releasing this patch:
- update junit.jar
- update junitsrc.zip
- add org.hamcrest.core to orbit.map

(In reply to https://dev.eclipse.org/ipzilla/show_bug.cgi?id=2860#c22 )
Ketan, could you please post the CQ # of the orbit request for org.hamcrest.core here, when that CQ is available? I'll open our request then for JDT to reuse the orbit bundle.
I've created https://dev.eclipse.org/ipzilla/show_bug.cgi?id=3224. The bug needs to be renamed to hamcrest.core, but JDT will be able to PB on that CQ.

Marcus,

I've released hamcrest.core into orbit (along with the other bundles, which continue continue to depend on the old CQ).

I've also updated the ip logs of hamcrest.core to point to CQ3224.

Please pull the tag v200903242230 of org.hamcrest.core from orbit if you wish to build/test the bundle. There's a build in progress and you should be able to test it out from the committer download site at http://download.eclipse.org/tools/orbit/committers/ in about an hour from now.
OK, legal stuff is cleared and I'm ready to go.

But I guess we need PMC approval to consume the new plug-in from Orbit in the build?
You'll need to file another CQ/modify existing CQ to PB on the new hamcrest core CQ. The IP team is probably the best source for this answer.

(In reply to comment #7)
> You'll need to file another CQ/modify existing CQ to PB on the new hamcrest
> core CQ.

We already got approval to use Hamcrest Core together with JUnit 4.5, see https://dev.eclipse.org/ipzilla/show_bug.cgi?id=2583 .

We don't need another CQ to use org.hamcrest.core 1.1 from Orbit. As stated in https://dev.eclipse.org/ipzilla/show_bug.cgi?id=2860#c24 , the CQs are about who's allowed to use what, not about how the stuff is finally packaged:

> Solely as it relates to IP review of nonEPL code, the CQ you create reflects
> how the code is provided by the third party project rather than how we bundle
> it after we get it in.
Would you consider importing the hamcrest packages instead of requiring the org.hamcrest.core bundle directly?

In my use case, I need the full version of the "org.hamcrest" package, not just the partial version provided in the org.hamcrest.core bundle.  So I would like to be able to swap out org.hamcrest.core with my own hamcrest bundle.

I recently submitted bug 271157 about this against Orbit (it it looks like JDT may have been the proper place).
(In reply to comment #9)
The current plan for org.junit4 is to remove the 3 org.hamcrest* packages from the Export-Package clause and add the following (org.hamcrest.core from Orbit):

Require-Bundle: org.hamcrest.core;bundle-version="1.1.0";visibility:=reexport

The "Require-Bundle" approach makes sure the org.hamcrest.core bundle is really available and contains the classes we expect to be there. This is also the way most bundles in the SDK are packaged.

I don't see a compelling reason for abandoning the Require-Bundle and use e.g.

Import-Package: org.hamcrest.core;version="1.1.0"

instead. Don't the other new org.hamcrest.* bundles from Orbit work for you? If you need the full Hamcrest 1.1, you can just require the new org.hamcrest bundle, and everything should be fine.
(In reply to comment #10)
> I don't see a compelling reason for abandoning the Require-Bundle
In general, it's the proper OSGi and future proof way to go.  There have been discussions about this in on e4-dev list (summary here http://blogs.itemis.de/wloch/2009/01/19/bundle-dependency-preferences-in-eclipse-4/) and many other write-ups (e.g. http://www.osgi.org/blog/2008/06/jsr-277-and-import-package.html).

> Don't the other new org.hamcrest.* bundles from Orbit work for you? If
> you need the full Hamcrest 1.1, you can just require the new org.hamcrest
> bundle, and everything should be fine.
The orbit bundles do not work for me now (http://bugs.eclipse.org/271348). But even if that gets fixed/resolved, my code would still be forced to have an explicit dependency on the Orbit bundle.  It would be nice to be able to substitute a different hamcrest bundle.  For example, my project maintains its dependencies on third party libraries separately and wraps the hamcrest jars it obtains through Maven into its own bundle.

I think that, ideally, Eclipse would not be tied at all to specific junit or hamcrest bundles.

Think about it another way - by using require-bundle, you are also imposing on orbit to package Hamcrest a certain way.  The bundle maintainers are no longer free to change things because in addition to providing the org.hamcrest and org.hamcrest.core packages, they also have to provide a specifically named org.hamcrest.core bundle.

All that being said, I will work with what I get :)  And it is definitely a helpful step in the right direction to remove hamcrest-core from org.junit4.  
*** Bug 271157 has been marked as a duplicate of this bug. ***
Tom, would you also recommend that org.junit4 refers to the org.hamcrest.core bundle via Import-Package and not via Require-Bundle?

Philippe, can you please give the PMC approval for adding org.hamcrest.core 1.1.0 to the SDK (from Orbit)?
Forgot to CC Tom.
(In reply to comment #13)
> Tom, would you also recommend that org.junit4 refers to the org.hamcrest.core
> bundle via Import-Package and not via Require-Bundle?
> 
> Philippe, can you please give the PMC approval for adding org.hamcrest.core
> 1.1.0 to the SDK (from Orbit)?
> 

I reluctantly have to recommend Require-Bundle because of the issue in comment 10.  the current org.junit4 bundle exports the org.hamcrest packages.  Clients that use Require-Bundle: org.junit4 are expecting the org.hamcrest packages to be available.

I'm not sure if org.junit4 contained the hamcrest packages in the Ganymede release.  If they did then using Import-Package in junit4 to get the hamcrest packages would be a breaking API change to the junit4 bundle because clients would no longer get the packages they were gauranteed in the prior release.

If the hamcrest packages were not included in the junit4 bundle of Ganymede then we could consider using Import-Package instead and force all the clients to get the hamcrest packages with their own declared dependencies.  But this is still and API change after the API freeze (M6) date and will require an Eclipse PMC approval I think.
BTW, all the reasons I gave in comment 15 are the identical reasons many in the OSGi community hate Require-Bundle so much.  It really limits the flexibility and is terribly brittle.
Here's another idea:  What if org.eclipse.jdt.junit4.runtime import-packaged junit?  In the normal case, org.eclipse.jdt.junit4.runtime would be wired to org.junit4 as before and everything works the same.  

The org.junit4 can use Require-Bundle on hamcrest to preserve backward compatibility, but people would then also have the option to use other bundles - they just have to replace both JUnit and Hamcrest.
(In reply to comment #17)
> Here's another idea:  What if org.eclipse.jdt.junit4.runtime import-packaged
> junit?  In the normal case, org.eclipse.jdt.junit4.runtime would be wired to
> org.junit4 as before and everything works the same.  
> 
> The org.junit4 can use Require-Bundle on hamcrest to preserve backward
> compatibility, but people would then also have the option to use other bundles
> - they just have to replace both JUnit and Hamcrest.
> 

That is a possibility, but you would need to do that same thing for all other's in the SDK that may use Require-Bundle on junit4.  I'm not saying it is impossible (or even that it is not the correct thing to do), just that it is not a change to take lightly at this point in the Galileo release.
(In reply to comment #18)
> That is a possibility, but you would need to do that same thing for all other's
> in the SDK that may use Require-Bundle on junit4.
In 3.5M6 SDK, I only see org.eclipse.jdt.junit4.runtime requiring org.junit4.  Also, I don't think other consumers would need to change - org.junit4 would be there as before.

To be clear, I am suggesting that org.junit4 *does* require-bundle on hamcrest given all the issues that have been mentioned.  I just think that in conjunction, if we loosen the coupling between the JUnit tooling and org.junit4, then users will not tied to the problematic org.junit4 bundle.

My particular use case is an RCP application.  In Ganymede, to be able to use the IDE tooling to run our JUnit tests, I needed to have org.eclipse.jdt.junit4.runtime and org.junit4 in my target platform.  The first problem this caused was org.junit4 was stuck on junit 4.3.1 and some of my tests required junit 4.5.  Thankfully someone made a feature patch to use junit 4.4 (http://bugs.eclipse.org/197170) and I was then able to tweak that bundle to actually include 4.5.  Then I needed the full hamcrest libraries instead of just core.  So I further hacked the org.junit4 bundle to import-package hamcrest and then provided my own hamcrest bundle.

If org.eclipse.jdt.junit4.runtime instead imported the necessary packages from junit (with a lenient version, say "[4.4, 5.0)"), then people would be free to run whatever versions of junit and hamcrest they like!  JUnit 4.6 RC is already out - no reason to force people to wait for the next major Eclipse releases to use it :)


(In reply to comment #19)

> If org.eclipse.jdt.junit4.runtime instead imported the necessary packages from
> junit (with a lenient version, say "[4.4, 5.0)"), then people would be free to
> run whatever versions of junit and hamcrest they like!  JUnit 4.6 RC is already
> out - no reason to force people to wait for the next major Eclipse releases to
> use it :)

+1 I noticed the same, jdt.junit4 is(was) bound to 4.3.1 which meant that I could not write pde tests using junit 4.5, we're already considering moving to JUnit 4.6 as well so I'm not sure how helpful jdt would be here.


OK, org.junit4 will continue to export everything that's necessary for clients to run JUnit4 tests, so the ...
Require-Bundle: org.hamcrest.core;bundle-version="1.1.0";visibility:=reexport
... in the patch will stay -- an nothing really changes for clients.

In 3.5, org.eclipse.jdt.junit4.runtime declares ...
Require-Bundle: org.junit4;bundle-version="[4.4.0,5.0.0)",
... for quite some time now, and I've just verified that Plug-in tests work fine (and use 4.6) when I add another org.junit4 bundle that contains JUnit 4.6.0 (packaged in the proposed shape of the org.junit4 4.5.0 bundle).

We can talk about using Import-Package in the jdt.junit*.runtime plug-ins when JUnit4 is moved to Orbit (bug 186369).

Will: When this bug is closed, it's easy to create an org.junit4 4.6.0 bundle that will be picked up instead of org.junit4 4.5.0. I can provide steps again if necessary, but this time, no complicated feature patch is needed any more.

For Galileo, JUnit 4.6 just came in too late.
(In reply to comment #21)
> We can talk about using Import-Package in the jdt.junit*.runtime plug-ins when
> JUnit4 is moved to Orbit (bug 186369).
Sounds good, this is mostly a "nice to have" - it allows clients to use any junit bundle rather then making a specific one named org.junit4.

> Will: When this bug is closed, it's easy to create an org.junit4 4.6.0 bundle
> that will be picked up instead of org.junit4 4.5.0. I can provide steps again
> if necessary, but this time, no complicated feature patch is needed any more.
No need to provide steps for my sake, I'm already doing this to use 4.5 with the 4.4 feature patch in Ganymede.

Thanks for addressing this.
+1 as I understand this is not going to grow the SDK size, just have us own less code.
Fixed in HEAD (also updated the about.html).
*** Bug 271157 has been marked as a duplicate of this bug. ***


JUnit to consume hamcrest.core from orbit.



Bug 266962: JUnit to consume hamcrest.core from orbit: Don't unpack 

Bug 266962: JUnit to consume hamcrest.core from orbit. 