Given the following source file in a plugin with an OSGI import:

import org.osgi.framework.Bundle;

public class MyClass {
	Bundle getBundle() { return null; }
}

select getBundle() and do Declarations->Project.

Expect: 1 result

Actual: 42 results

If I want results outside my project, I would do Declarations->Workspace, but even there the result should be 1 since MyClass has no super/subclass other than Object so the only candidate second declaration is Object::getBundle() that does not exist.

(I think it was about 3 years ago that Find Declarations became so overenthusiastic and consequently useless. I'm generally forced into a text search.)

Given the following source file in a plugin with an OSGI import:

import org.osgi.framework.Bundle;

public class MyClass {
	Bundle getBundle() { return null; }
}

select getBundle() and do Declarations->Project.

Expect: 1 result

Actual: 42 results

If I want results outside my project, I would do Declarations->Workspace, but even there the result should be 1 since MyClass has no super/subclass other than Object so the only candidate second declaration is Object::getBundle() that does not exist.

(I think it was about 3 years ago that Find Declarations became so overenthusiastic and consequently useless. I'm generally forced into a text search.)
JDT core returns the search results based on the flags (limitTo) passed. In this case, the declaringType is set to ignore and all the occurrences are returned, as expected when this flag is set. These flags are passed by jdt/ui and hence assigning to JDT/UI for further comments.


Ed: Meanwhile you can still select the method, Search -> select search for as Method, and limitTo as Declarations, and the correct result (only one) is returned.
(In reply to Ed Willink from comment #0)
> If I want results outside my project, I would do Declarations->Workspace,
> but even there the result should be 1 since MyClass has no super/subclass
> other than Object so the only candidate second declaration is
> Object::getBundle() that does not exist.

Sounds like you should use "Search > Declarations > Hierarchy" instead.

The idea of "Search > Declarations > Project" is to do the same as "Declarations > Workspace", but restricted to the enclosing project (and libraries on the project's build path).

The search in Project or Workspace scope needs to be "less exact" than the search in Hierarchy -- otherwise, it wouldn't be different from the latter. To get an interesting set of similar method declarations, we ignore the declaring type and the return type.

For "Declarations > Project", you maybe want to to switch to "Group By Project" in the Search view. If you need more control over the scope, you can use the Search > Java... dialog, where you can e.g. configure only "Search In: Sources".
(In reply to Markus Keller from comment #2)
> Sounds like you should use "Search > Declarations > Hierarchy" instead.

Yes that does exactly waht I want, and when I go back to Ganymede that works there too. It has always confused me and so been useless for me.

So just a UI enhancement request.

"Declarations > Hierarchy" is unintelligible without an expanation.

"Declarations > Project" is counter intuitive.

Suggest rename as:

"Declarations > Hierarchy" => "Declarations > Project files"

"Declarations > Project" => "Declarations > Project and classpath"
I've updated the documentation for these actions:
http://git.eclipse.org/c/platform/eclipse.platform.common.git/commit/?id=4797736bbc9ca71fb795ccd49dda3217e53e9476

I don't think the names you proposed would be more intuitive, so no plans to change that.


[search] Extra Find Declarations hits

