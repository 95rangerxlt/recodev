Refactoring a method from an interface on a class with overloaded signatures
will cause a warning that the method is part of the interface implemented by the
class even though it is a completely different method.

On the example below, trying to rename one of the first four method 'a' will
result in a warning that the method is an implementation of method a(Long l)
from the ISample interface which is clearly not the case.

--- Interface ---

public interface ISample {
  void a(Long l);
}

--- Class showing problem ---

public class ClassA implements ISample {

  protected void a(Integer a)
  {
  }
  
  protected boolean a(String s)
  {
    return false;
  }
  
  protected void a(int[] a)
  {
  }
  
  protected void a(int a)
  {
  }
  
  protected void a(int a, int b)
  {
  }

  /* (non-Javadoc)
   * @see ISample#a(java.lang.Long)
   */
  public void a(Long l) {
    // TODO Auto-generated method stub

  }

}

Refactoring a method from an interface on a class with overloaded signatures
will cause a warning that the method is part of the interface implemented by the
class even though it is a completely different method.

On the example below, trying to rename one of the first four method 'a' will
result in a warning that the method is an implementation of method a(Long l)
from the ISample interface which is clearly not the case.

--- Interface ---

public interface ISample {
  void a(Long l);
}

--- Class showing problem ---

public class ClassA implements ISample {

  protected void a(Integer a)
  {
  }
  
  protected boolean a(String s)
  {
    return false;
  }
  
  protected void a(int[] a)
  {
  }
  
  protected void a(int a)
  {
  }
  
  protected void a(int a, int b)
  {
  }

  /* (non-Javadoc)
   * @see ISample#a(java.lang.Long)
   */
  public void a(Long l) {
    // TODO Auto-generated method stub

  }

}
Moving to JDT/UI.
This is a know problem with the ripple method finder. 

Markus, we should really try to fix this for 3.0.
The RippleMethodFinder is OK. The problem is in
MethodChecks.isDeclaredInInterface(.), which calls
Checks.findMethod(IMethod, IType), which doesn't compare argument types.

Need to correct implementation and javadoc and see who else is affected by this.
Fixed in HEAD.


Method rename refactorying problem with overloaded methods



55219: Method rename refactorying problem with overloaded methods 