I20081007-1600

(In reply to bug 206949 comment #1)
> > - I found it hard to explain why fields are only expanded on the first level,
> > so I removed that restriction.
> 
> When selecting write accesses, the following code:
> public class C0 {
>         int i;
>         int bar(int a) {
>                 return this.i= a;
>         }
>         int x= bar(3);
>         void foo() {
>                 this.x += 3;
>         }
> }
> will produce a funny call tree:
> i - C0
>   bar(int) - C0
>     x - C0
>       foo() - C0
>       x - C0 (w/ recursion mark!)
> 
> So when I look for call chains that make 'i' change its value,
> the call hierarchy will suggest to look at method foo().
> This seems wrong to me, since method foo() cannot affect the
> value of i.
> Generally speaking, if the call hierarchy should be seen as a
> visualization for cause-effect chains in the program (that's my
> intuition at least), a field can hardly be an intermediate link
> in this chain, since an access to a field never has any effects,
> (unless you consider on-demand class loading due to a field access).
> 
> That's why I figured that fields should only be expanded at the root.

I support this argumentation, but only for write accesses to fields, though not in the general case. For read access and references, it does make sense to follow reference chains, e.g. here:

        public static final int A= 0;
        public static final int B= A + 1;
        public static final int C= B;

... a caller hierarchy on A should look like this:

        A
          B
            C

... because C is really a reference to B.

> It also looks funny that field x is supposed to be accessed by itself ;-)

That's because the initializer of a field is a write access to the field (but not a read access nor a reference).

I20081007-1600

(In reply to bug 206949 comment #1)
> > - I found it hard to explain why fields are only expanded on the first level,
> > so I removed that restriction.
> 
> When selecting write accesses, the following code:
> public class C0 {
>         int i;
>         int bar(int a) {
>                 return this.i= a;
>         }
>         int x= bar(3);
>         void foo() {
>                 this.x += 3;
>         }
> }
> will produce a funny call tree:
> i - C0
>   bar(int) - C0
>     x - C0
>       foo() - C0
>       x - C0 (w/ recursion mark!)
> 
> So when I look for call chains that make 'i' change its value,
> the call hierarchy will suggest to look at method foo().
> This seems wrong to me, since method foo() cannot affect the
> value of i.
> Generally speaking, if the call hierarchy should be seen as a
> visualization for cause-effect chains in the program (that's my
> intuition at least), a field can hardly be an intermediate link
> in this chain, since an access to a field never has any effects,
> (unless you consider on-demand class loading due to a field access).
> 
> That's why I figured that fields should only be expanded at the root.

I support this argumentation, but only for write accesses to fields, though not in the general case. For read access and references, it does make sense to follow reference chains, e.g. here:

        public static final int A= 0;
        public static final int B= A + 1;
        public static final int C= B;

... a caller hierarchy on A should look like this:

        A
          B
            C

... because C is really a reference to B.

> It also looks funny that field x is supposed to be accessed by itself ;-)

That's because the initializer of a field is a write access to the field (but not a read access nor a reference).
Fixed in HEAD of CallerMethodWrapper and MethodWrapper.


[call hierarchy] should expand read references to fields



250149: [call hierarchy] should expand read references to fields 