Set up a failing JUnit test.
Run it.
Double click the failed test in "Failures" pane in the JUnit view.

Current behaviour:
An editor is opened.  The cursor is on the first line of the failing JUnit test
method.

Expected behaviour:
An editor should be opened.  The cursor should be on the line of the JUnit
assertion that failed.

Set up a failing JUnit test.
Run it.
Double click the failed test in "Failures" pane in the JUnit view.

Current behaviour:
An editor is opened.  The cursor is on the first line of the failing JUnit test
method.

Expected behaviour:
An editor should be opened.  The cursor should be on the line of the JUnit
assertion that failed.
Which build are you using? Is there anything in the log file?
I'm using 3.0 GA, build 200406251208.  No there isn't anything in the log file.

As an example, the relevant lines in the test failure backtrace says:

junit.framework.AssertionFailedError: Logs should have shrunk when becoming >
maxTotalLogSize bytes
	at junit/framework/Assert.fail(Ljava/lang/String;)V(Assert.java:47)
	at junit/framework/Assert.assertTrue(Ljava/lang/String;Z)V(Assert.java:20)
	at
com/jrockit/console/persistence/test/PairStorageTest.testSetMaxTotalLogSize()V(PairStorageTest.java:1042)
	at
jrockit/reflect/NativeMethodInvoker.invoke0(Ljava/lang/Object;ILjava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;(Unknown
Source)
...

If I double click the failed test case I'm taken to the top of
testSetMaxTotalLogSize() at line 996 of PairStorageTest.java, rather than to
line 1042 of the same file where the assertion actually failed according to the
above backtrace.

It seems as if Eclipse only reads the failed method name from the backtrace
rather than reading the line number of the failure.

Time permitted.
Moving back to the JDT/UI inbox
Agree that this would be helpful: It should be possible to look through the stacktrace of you find the signature of the test method and use that line.
Yep, the assertion failure could occur in another method than the failing test method (even in another class).

import junit.framework.TestCase;
public class Failing extends TestCase {
	public void testFail() throws Exception {
		assertBig(17, Integer.MAX_VALUE);
	}

	private void assertBig(int... values) {
		for (int v : values) {
			assertBig(v);
		}
	}

	private void assertBig(int value) {
		assertTrue("big number: " + value, value < Short.MAX_VALUE);
	}
}


junit.framework.AssertionFailedError: big number: 17
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.assertTrue(Assert.java:20)
	at junit.samples.Failing.assertBig(Failing.java:17)
	at junit.samples.Failing.assertBig(Failing.java:12)
	at junit.samples.Failing.testFail(Failing.java:7)

Yes please!
Fixed in HEAD.

(In reply to comment #6)
I just select the first occurrence of the test method in the stack trace, i.e.
junit.samples.Failing.testFail(Failing.java:7) in the example. Selecting the concrete assertion failure inside another method would be confusing.



[JUnit] Double clicking a failed JUnit test should show me the failing JUnit assertion



68738: [JUnit] Double clicking a failed JUnit test should show me the failing JUnit assertion (prevent NPE) 

68738: [JUnit] Double clicking a failed JUnit test should show me the failing JUnit assertion 

68738: [JUnit] Double clicking a failed JUnit test should show me the failing JUnit assertion 