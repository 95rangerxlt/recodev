Created attachment 227640
Testcase to reproduce the error

A "\n" introduced when an additional Annotation is added using rewrite

Created attachment 227640
Testcase to reproduce the error

A "\n" introduced when an additional Annotation is added using rewrite
See https://bugs.eclipse.org/bugs/show_bug.cgi?id=395612#c6
Manoj, this may fall in the area of the formatter, if so it may make sense
for Jesper to follow up. Would you like this reassigned ?
(In reply to comment #2)
> Manoj, this may fall in the area of the formatter, if so it may make sense
> for Jesper to follow up. Would you like this reassigned ?

yes, please.
The patch from comment#0 does not compile - there are various errors.
Please fix it and provide a test that can be worked on.
I think this is coming because that is the formatting style for SE7 annotations and the formatter cannot always distinguish between the two. Only if bindings are
requested, it can.
(In reply to comment #4)
> The patch from comment#0 does not compile - there are various errors.
Please
> fix it and provide a test that can be worked on.

Please take just the testPrimitiveType() function and add it to any rewriting test, say ASTRewritingTypeDeclTest.java and the test compiles without any error, and will show the issue while running.
(In reply to comment #5)
> I think this is coming because that is the formatting style for SE7
> annotations and the formatter cannot always distinguish between the two.
> Only if bindings are
requested, it can.

In this case, the annotations are at a place where SE7 annotations cannot come.
Created attachment 228806
Testcase as a patch to reproduce

Testcase to reproduce attached as a patch
(In reply to comment #7)
> (In reply to comment #5)
> > I think this is coming because that is the formatting style for SE7
> > annotations and the formatter cannot always distinguish between the two.
> > Only if bindings are
> requested, it can.
> 
> In this case, the annotations are at a place where SE7 annotations cannot
> come.

Which location are you referring to as one where SE7 annotations cannot come ?

	public @Annot int b;

@Annot could be a SE8 annotation or a SE7 annotation.

OTOH

    class X extends @Annot Y {}

@Annot is featuring in a SE8 only location.
See also: https://bugs.eclipse.org/bugs/show_bug.cgi?id=122247
(In reply to comment #9)
> (In reply to comment #7)

> 	public @Annot int b;
> 
> @Annot could be a SE8 annotation or a SE7 annotation.
> 
right. missed adding ElementType.FIELD in the test case. So as you mentioned, we need the binding to distinguish.
WRT https://bugs.eclipse.org/bugs/show_bug.cgi?id=403816,
the spec committee is at the very least likely to amend JLS to recommend that
as a coding convention, type annotations should immediately precede the type.

If that recommendation is in place, then the formatter could under an
option format the immediately preceding annotations "inline"
When this is fixed, ASTRewritingMethodDeclTest._testReceiver4_since_8() should be enabled.
Manoj, please study and share your findings.TIA.
Created attachment 238733
Test case

Patch depicting both scenarios: 
 - For SE8 exclusive locations, this issue is not present. As described in comment 9, the problem occurs in SE7 location (ie public @Annot int i;) where a SE8 annotation comes.
Moving to 4.4
Make sure bug 425040 is fixed before you start investigating the problem with ASTRewrite.
(In reply to Manoj Palat from comment #15) 
>  - For SE8 exclusive locations, this issue is not present. 

bug 426868 comment #1 - the disabled test in the patch, is an example of the SE8 exclusive location where the issue occurs.

Example:
-------------------------------------------------------------------
import java.io.FileNotFoundException;
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

class E {
	void test(int a) {
		throw new @Marker FileNotFoundException();
	}
}

@Target(ElementType.TYPE_USE)
@interface Marker { }
-------------------------------------------------------------------
Apply the patch from bug 426868 comment #1 in JDT/UI and hover over the error in above example (at 'thorw').
Select "Add throws declaration" quick fix. The result is:
-------------------------------------------------------------------
class E {
	void test(int a) throws @Marker
	FileNotFoundException {
		throw new @Marker FileNotFoundException();
	}
}
-------------------------------------------------------------------

Here, the "@Marker FileNotFoundException" node to be added in 'throws' comes as a SimpleType with #annotations having '@Marker'.

Please check if the above issue will be resolved with this bug or bug 425040.
(In reply to Noopur Gupta from comment #18)
Observed that this issue happens only when "Insert new line after annotations on fields" is enabled.
(In reply to Noopur Gupta from comment #19)
> (In reply to Noopur Gupta from comment #18)
> Observed that this issue happens only when "Insert new line after
> annotations on fields" is enabled.

Yup, that's because ASTRewriteFormatter#formatNode(ASTNode, String, int) creates a snippet where the type is in a field declaration:

	case ASTNode.SIMPLE_TYPE:
		suffix= " x;"; //$NON-NLS-1$
		code= CodeFormatter.K_CLASS_BODY_DECLARATIONS;
		break;

The problem is that the given ASTNode is a new node, so you can't find the right context via getLocationInParent(). The full fix has to pass the StructuralPropertyDescriptor from ListRewriter#rewriteList(..) down into #formatNode(..):

ASTRewriteFormatter.formatNode(ASTNode, String, int) line: 289	
ASTRewriteFormatter.getFormattedResult(ASTNode, int, Collection) line: 191	
ASTRewriteAnalyzer.doTextInsert(int, ASTNode, int, boolean, TextEditGroup) line: 1343	
ASTRewriteAnalyzer$ListRewriter.rewriteList(ASTNode, StructuralPropertyDescriptor, String, String, int) line: 635	


A quick hack that would improve the situation with the default code formatter profile (where insert_new_line_after_annotation_on_parameter=do not insert) is to just format the type in a method parameter list like this:

	case ASTNode.SIMPLE_TYPE:
		prefix= "void m("; //$NON-NLS-1$
		suffix= " x);"; //$NON-NLS-1$
		code= CodeFormatter.K_CLASS_BODY_DECLARATIONS;
(In reply to Markus Keller from comment #20)

> A quick hack that would improve the situation with the default code
> formatter profile (where insert_new_line_after_annotation_on_parameter=do
> not insert) is to just format the type in a method parameter list like this:
> 
> 	case ASTNode.SIMPLE_TYPE:
> 		prefix= "void m("; //$NON-NLS-1$
> 		suffix= " x);"; //$NON-NLS-1$
> 		code= CodeFormatter.K_CLASS_BODY_DECLARATIONS;

Thanks. It does not look particularly hacky to me as one snippet is as
arbitrary as the other. 

Do you see any side effects ?
(In reply to Srikanth Sankaran from comment #21)
> (In reply to Markus Keller from comment #20)
> 
> > A quick hack that would improve the situation with the default code
> > formatter profile (where insert_new_line_after_annotation_on_parameter=do
> > not insert) is to just format the type in a method parameter list like this:
> > 
> > 	case ASTNode.SIMPLE_TYPE:
> > 		prefix= "void m("; //$NON-NLS-1$
> > 		suffix= " x);"; //$NON-NLS-1$
> > 		code= CodeFormatter.K_CLASS_BODY_DECLARATIONS;
> 
> Thanks. It does not look particularly hacky to me as one snippet is as
> arbitrary as the other. 
> 
> Do you see any side effects ?

Manoj, please put together a test that invokes rewrite on the type reference
of the field by programmatically inserting annotations and let us understand
what is the impact - if any,
(In reply to Srikanth Sankaran from comment #22)
> 
> Manoj, please put together a test that invokes rewrite on the type reference
> of the field by programmatically inserting annotations and let us understand
> what is the impact - if any,

testcase commit via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=f7a3f976b2776b953199bf3c6716d25e2ddea03e
(In reply to Srikanth Sankaran from comment #21)
> Thanks. It does not look particularly hacky to me as one snippet is as
> arbitrary as the other. 
> 
> Do you see any side effects ?

No, releasing that would be fine for me. The only "hack" is that this doesn't fix the complete problem, but just works around the visible effects.
Comment 20 has been released with bug 427622.

(In reply to Markus Keller from comment #24)
> The only "hack" is that this
> doesn't fix the complete problem, but just works around the visible effects.

Just to spell this out: The snippet puts the type into a method parameter, and since the default code formatter setting for insert_new_line_after_annotation_on_parameter is "do not insert", we don't get a new line any more.

Remaining problems:

1) If *_annotation_on_parameter is set to "insert", then we again get a new line for the type annotation, even if *_type_annotation is "do not insert".

2) If *_annotation_on_parameter is set to "do not insert", and *_type_annotation is "insert", then we don't get a new line.

The first problem can be fixed by changing the snippet in ASTRewriteFormatter to
    prefix= "void m(final "; //$NON-NLS-1$

The second problem can be fixed with an improved fix for bug 425040 comment 13. However, I now think we should only treat method parameters specially, i.e. assume type annotations if there are no other keywords in the modifier list.

A common usage pattern is to have @SuppressWarnings("...") on a local variable, and we should not start treating these as type annotations.

Fixed this bug and the modified version of bug 425040 comment 13 with
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=cd140389e1d0cdca9f232f9b33d1b09e90034b22


ASTRewrite on type annotations adds an additional <CR>



Additional test added for Bug 401848 ASTRewrite on type annotations adds an additional <CR> comment 22 