Build Identifier: 20100318-1801

In the Preferences window (General->Appearance->Label Decorations) user can set a check-box "Java Type Indicator". If the box is checked, small icons appear in the Package Explorer: I (interface), A (abstract), E (enum).
I propose the following extensions:
1) (more important). Add check-box "Java Deprecated Decorator" which means that deprecated classes will be highlighted somehow in Package Explorer. At once I can imagine 3 variants a) strike-out; b) italic; c) diagonal line like in Outline. As for me, (a) strike-out is the best variant (if the name of a class remains readable).
2) (less important). Add the check-box "Java Throwable Indicator/Decorator"  for Throwable and possibly for abstract Throwable (because Throwable can be abstract also). It can be a) Indicator, so small icon will be shown for Throwable (maybe letter "T" and letters "AT" for abstract one). Or b) Decorator and the name of the class become italic for example (if deprecated decorator is not italic) or something like this.

Reproducible: Always

Steps to Reproduce:
1. Open Package Explorer.

Build Identifier: 20100318-1801

In the Preferences window (General->Appearance->Label Decorations) user can set a check-box "Java Type Indicator". If the box is checked, small icons appear in the Package Explorer: I (interface), A (abstract), E (enum).
I propose the following extensions:
1) (more important). Add check-box "Java Deprecated Decorator" which means that deprecated classes will be highlighted somehow in Package Explorer. At once I can imagine 3 variants a) strike-out; b) italic; c) diagonal line like in Outline. As for me, (a) strike-out is the best variant (if the name of a class remains readable).
2) (less important). Add the check-box "Java Throwable Indicator/Decorator"  for Throwable and possibly for abstract Throwable (because Throwable can be abstract also). It can be a) Indicator, so small icon will be shown for Throwable (maybe letter "T" and letters "AT" for abstract one). Or b) Decorator and the name of the class become italic for example (if deprecated decorator is not italic) or something like this.

Reproducible: Always

Steps to Reproduce:
1. Open Package Explorer.
I once started to experiment with a "deprecated" overlay, but gave up after the first tries. In the Outline view, the diagonal line is painted behind the icon, but that doesn't work for the compilation unit icon, since that one is too big.

Next try was to paint the line on top of the icon, but that also draws on top of the problem indicator in the lower left. Could try it again with redrawing the problem overlay in the decorator.
Created attachment 170333
First try
Hi Markus.
Thanks for your reply.

Unfortunately I am not very familiar with Eclipse internal structure, so I cannot try this patch by myself.
Btw, what about striking-out the name (not icon) of deprecated class?
Created attachment 170519
Screenshots

I've tried it with drawing the problem overlay again in the decorator, see the screenshot on the left. But that way, the deprecation is hardly visible unless the type is a class.

I guess we better take the right hand side, where the "deprecated" bar is drawn on top of the problem overlay.

We once considered rendering deprecated with a strikeout text, but we also didn't do this in other places because it make the text hard to read. We won't use a different rendering for "deprecated" than the well-known diagonal line. But of course, you're free to write your own plug-in that does it differently (take the a look at the InterfaceIndicatorLabelDecorator for how to implement this).
Thanks Markus.

As for me, the right variant (on the screenshot) fits my needs and I think many developers want it too.
Btw, this decorator is generally useful for *.class files from jars rather than for own code, so problem-decorator (warnings, errors etc) will be rarely mixed with deprecated-decorator.

Is there any chance to include this decorator into official release? Or where it can be downloaded separately?

Maybe I will also do some manipulations with it, but not earlier that in a couple of months.
OK, I'll do that for 3.7. The attached patch already implements this, but needs some polish to make it understandable.

And I'll probably also include bug 168520.
(In reply to comment #6)
> OK, I'll do that for 3.7. The attached patch already implements this, but needs
> some polish to make it understandable.
> 
> And I'll probably also include bug 168520.

Btw, why not to include it into 3.6 RC3?
(In reply to comment #7)
First, because RC3 has already been shipped, and second, because we're in the stabilization phase and only fix serious defects (i.e. don't add new features):
http://www.eclipse.org/eclipse/development/plans/freeze_plan_3.6.php#FixPassAfterRC3
Created attachment 172530
Fix

Adds 'deprecated' and 'package visible' overlays (the latter is for bug 168520). Also needs /org.eclipse.jdt.ui/icons/full/ovr16/default_tsk.gif.
Fixed in HEAD.
Sorry, but this looks too ugly/scrambled, e.g. the deprecation line is drawn over the icon hiding the 'J' and also problem decorators. We either need to find a better way or leave it.
Created attachment 173650
Scrambled icon
It's always a tradeoff, and that's the best solution I found. What do you propose?

I don't want to drop this useful feature just because it doesn't look perfect in some cases. I actually think it looks fine, and I don't think users will have a problem understanding what's going on. Also remember that the case with a single CU in one package is not relevant in practice -- you normally have a lot more context.
>It's always a tradeoff, and that's the best solution I found. What do you
>propose?
Not to add the feature unless we find a decent solution. One thing could be additional support in Platform UI that allows to draw decorations behind the current image.
> additional support in Platform UI that allows to draw decorations behind the
> current image.

Technical issues can be attacked later -- we first need a solution that is visually pleasing in all cases. See comment 4 (left screenshot) for how hard to see deprecated types are when the '/' is behind the warning and type info adornments. Drawing the '/' behind the 'J' would show even less of the '/'.
If we'd change '/' to '\' it would probably destroy less info.
Verified the enablement with I20100802-1800.
> If we'd change '/' to '\' it would probably destroy less info.
That's not an option since '/' is already used everywhere and '\' already means 'Hide' in view filter toolbar buttons.
In practice, the "scrambled icons" problem doesn't show up often, and we didn't get any other complaints about this so far. We're going to live with current solution for now.

See bug 318224 for improvements in the Synchronize view and Commit dialog.
(In reply to comment #19)
> In practice, the "scrambled icons" problem doesn't show up often, and we didn't
> get any other complaints about this so far. We're going to live with current
> solution for now.
> 
> See bug 318224 for improvements in the Synchronize view and Commit dialog.

Point taken.


[package explorer][render] Decorator on CUs for deprecated and package-visible



Bug 314283: [package explorer][render] Decorator on CUs for Deprecated and Throwable 