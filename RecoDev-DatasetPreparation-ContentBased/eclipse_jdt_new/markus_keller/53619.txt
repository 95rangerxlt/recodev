Suppose there are an interface AND an implementing class with mehtods two (or
more) methods with the same name but different arguments, like this:

public interface RefactorRenameTest {
    public void refatorRename(String s);
    // ...other methos with the same name and different arguments...
    public void refatorRename(Boolean b);
}

public class RRT implements RefactorRenameTest {
    public void refatorRename(Boolean B) {
    }
    // ...other methos with the same name and different arguments...
    public void refatorRename(String s) {
    }
}

When one tries to Refactor -> Rename the first one (or one of the other
possibles) the last one is also renamed. This can be seen before happening with
the Preview button.

Suppose there are an interface AND an implementing class with mehtods two (or
more) methods with the same name but different arguments, like this:

public interface RefactorRenameTest {
    public void refatorRename(String s);
    // ...other methos with the same name and different arguments...
    public void refatorRename(Boolean b);
}

public class RRT implements RefactorRenameTest {
    public void refatorRename(Boolean B) {
    }
    // ...other methos with the same name and different arguments...
    public void refatorRename(String s) {
    }
}

When one tries to Refactor -> Rename the first one (or one of the other
possibles) the last one is also renamed. This can be seen before happening with
the Preview button.
Moving to JDT/UI.
Sorry, didn't knew Refactor was UI...
This has been fixed in the 3.0 stream.


Problems with Refactor -> Rename for methods with same name

