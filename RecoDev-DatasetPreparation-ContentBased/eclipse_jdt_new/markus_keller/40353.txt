20030716
public class S {
	void f(){
		for (int i = 0; i < 1; i++) {
		}
	}
}

extracting temp from 'i++' should be disallowed (like extract method is)

20030716
public class S {
	void f(){
		for (int i = 0; i < 1; i++) {
		}
	}
}

extracting temp from 'i++' should be disallowed (like extract method is)
Might be something for Markus.
Markus, can you have a look at this and add code to protect against this case?
(also, i<1 should not be extractable
and other things like that)

please add test cases
I attach patches which disallow "Extract Local Variable" in the
head of a "for" statement. Better behavior would require more analysis
to exclude only expressions which refer to a variable defined in
the for_inititializer. But that is IMHO rarely useful.



Created attachment 5600
Implementation
Created attachment 5601
Tests
Markus, two things: 

you walk up the hierarchy until the parent is null. This is not necessary. AS 
soon as the parent is a statement you are sure that the expression isn't part 
of the updater.

why are you disallowing extrating a local in intializers. They are only 
executed once. So they don't cause any harm.

Please keep the PR assigned to you until we agree on the final code. I added 
myself to the CC list to track any changes.
And another thing: we should only disallow extracting the expression into a 
local iff the expression uses locals declared inside the for initializer. 
Otherwise I can't extract this like list.size() in the test expression anymore
Fixed.

All comments have been accounted for. Test cases verify correctness.
Errors caused by matching expressions are also handled:
    for (int i = 0; i < 1; i++) {
        i++; //Extracting i++ here does NOT replace i++ in the for statement
    }

Will append patches.
Created attachment 5678
Implementation , 2nd version
Created attachment 5679
Tests, 2nd version
Adam, please review.
i released your patch (after some trivial modifications, like extracting a 
method for readability). it looks good.

please also include code to cover the following cases:
void f(int is){
	int i=0;
	for (; ; i=0) { //extracting i=0 should be dissallowed
        }	
}

int f1(int is){
	for (f(9),f(8) ; ; ) {//extracting f(9) should be dissallowed
	}	
}
Created attachment 5736
Implementation, 3rd

Okay then, this catches all for-initializers and -updaters (and excludes such
expressions from matching fragments).
Created attachment 5737
Additional tests
great job
released, thanks


extract temp: should be dissallowed in increment part of 'for' [refactoring]



fix for 40353 provided by Markus 

tests for 40353 

40353  - 

fix for 40353  - provided by Markus, touched by me 