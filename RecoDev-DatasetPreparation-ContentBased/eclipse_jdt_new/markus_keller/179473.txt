N20070327-0010

'Refactor > Rename' in 'Rename in Editor' mode should enter linked mode if the selected identifier cannot be resolved. This is the last advantage of the 'Rename In File' quick assist over the in-place rename refactoring.

E.g. Alt+Shift+R should link the two unresolved 'argument' references (but not show the refactoring popup at all):

public class Try {
	void m(String arg) {
		System.out.println(argument + argument);
	}
}

Currently, we show a dialog that the element could not be resolved.

Martin, do you agree?

N20070327-0010

'Refactor > Rename' in 'Rename in Editor' mode should enter linked mode if the selected identifier cannot be resolved. This is the last advantage of the 'Rename In File' quick assist over the in-place rename refactoring.

E.g. Alt+Shift+R should link the two unresolved 'argument' references (but not show the refactoring popup at all):

public class Try {
	void m(String arg) {
		System.out.println(argument + argument);
	}
}

Currently, we show a dialog that the element could not be resolved.

Martin, do you agree?
I think this will be confusing. The user invoked refactoring and get a local rename.
Setting to remind until we have a better idea.
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.
(In reply to comment #1)
> I think this will be confusing. The user invoked refactoring and get a local
> rename.

(In reply to comment #0)
> E.g. Alt+Shift+R should link the two unresolved 'argument' references (but not
> show the refactoring popup at all):

=> The omission of the refactoring popup is enough to indicate that it's not really a refactoring. We could also add an error message to the status bar to make it super-clear.
Fixed in HEAD (including the error message in the status line).


[rename] Rename in Editor should enter linked mode if identifier cannot be resolved



Bug 179473: [rename] Rename in Editor should enter linked mode if identifier cannot be resolved 