Here is the original source code:

public class A {
	public int i = 0;
	public void m(B b) {
		i++;
	}	
}

public class B {
	public void m() {		
	}
}

When method m of A is moved to B by applying move-refactoring,
Eclipse error occurs saying that "A method with name 'm' already exists in the target type 'B'.
But it should not be an error since method m will have different parameters in B:

public class B {
	public void m() {		
	}

	public void m(A a) {
		a.i++;
	}
}

Here is the original source code:

public class A {
	public int i = 0;
	public void m(B b) {
		i++;
	}	
}

public class B {
	public void m() {		
	}
}

When method m of A is moved to B by applying move-refactoring,
Eclipse error occurs saying that "A method with name 'm' already exists in the target type 'B'.
But it should not be an error since method m will have different parameters in B:

public class B {
	public void m() {		
	}

	public void m(A a) {
		a.i++;
	}
}
Can reproduce in 4.3 M6.

The refactoring can successfully be executed.


Worse is the following case:

public class A {
	public void m(B b) {
	}	
}

public class B {
	public void m() {		
	}
}

Here, no error is displayed but there's an compile error after the refactoring.
*** Bug 404471 has been marked as a duplicate of this bug. ***
Created attachment 238291
Test+Fix

This contribution complies with http://www.eclipse.org/legal/CoO.php

One character change!
This patch doesn't fix bug 404471.
It seems it isn't a duplicate.
I added a patch for bug 404471 as well.
Thanks Nikolay, the patch looks good. It will be released for 4.4 M5.
Excellent... thanks Noopur,
Can I please ask that you review my patch for bug 99622?
(In reply to Nikolay Metchev from comment #7)
> Can I please ask that you review my patch for bug 99622?

Sure, but that involves more changes and hence might take a while since currently we are focusing on Java 8 work.
Released your patch with:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=9e6c10b4bc71eb8bab57420f4867da8c08d6720a
Can you explain why

    if (!needsTargetNode())
        newParamCount--;

should be correct?

This change broke bug 286221 again.

Before releasing one-liners like this, please use the Show Annotations command and see why the code was written like that. If the change was not part of a huge rewrite, then there's a high chance that it was actually necessary for something else, and the correct fix needs a bit more thought.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=8717bb32ca56b944750ec526e361df28ade42339
Sorry Marcus,
I will try and be more thorough in the future.
(In reply to Markus Keller from comment #10)

I missed the case where we can move a method to the type of a field also.
For moving to the type of a parameter, the change looked fine since if the target node is not required, the parameter would just be removed.

From next time onwards, I would be more careful before releasing a patch and will also use the Show Annotations to check the code history.
(In reply to Noopur Gupta from comment #12)
> I missed the case where we can move a method to the type of a field also.
> For moving to the type of a parameter, the change looked fine since if the
> target node is not required, the parameter would just be removed.

Thanks for the explanation. 

You two essentially made the same mistake as I did when I fixed bug 286221 and when I wrote the question in comment 10. I missed the parameter case, while you missed the field case. And once one has adopted a too restricted view, then just considering needsTargetNode() seems to be a good solution.

I've cleaned up the convoluted implementation of createArgumentList(..) so that this should be easier to grasp in the future: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=6b49a46af46efd84c3912310f00e98c2f87d43ea


[move method] Wrong detection of duplicate methods (can result in compile errors)



Bug 404477: [move method] Wrong detection of duplicate methods (can result in compile errors) 

Bug 404477: [move method] Wrong detection of duplicate methods (can result in compile errors) 

Fixed bug 404477: [move method] Wrong detection of duplicate methods (can result in compile errors) 