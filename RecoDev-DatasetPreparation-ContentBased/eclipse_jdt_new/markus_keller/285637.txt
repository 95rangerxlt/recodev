I'm happy to write the patch.

The problem is that it's rather undiscoverable that you can run a single method from a single test -- only through the launch shortcut.

I propose a solution that makes it clear you can select a single method: The method name is still only shown as a label, but it's _always_ visible, and says something like "(all)" as a default. There's a "Search..." button that uses the test name to find available candidate methods.

Thoughts?

I'm happy to write the patch.

The problem is that it's rather undiscoverable that you can run a single method from a single test -- only through the launch shortcut.

I propose a solution that makes it clear you can select a single method: The method name is still only shown as a label, but it's _always_ visible, and says something like "(all)" as a default. There's a "Search..." button that uses the test name to find available candidate methods.

Thoughts?
Created attachment 143454
Potential patch

This is my first patch, and the very first time I ever dealt with externalized strings, so be gentle!
Moving to JUI - the owner of the JUnit launcher.
> This is my first patch
You mean: The first after the zeroth in bug 280114? ;-)

I'll have a look during M2.
Markus, my man! Well I meant that it was my first substantial patch. That last one didn't do much, but will help me later on. In fact this is my third patch, but the Very First One I wrote was rewritten by a commiter, which was just fine with me.
Hi. Any update on this?
Sorry, I didn't want to let this interfere with the core/UI split, and now I ran out of time for M2.
Understood. Am I going to need to rewrite the patch? (I hope not. :))
> Am I going to need to rewrite the patch? (I hope not. :))

Nope, that code has not been affected by the split.
Markus, hold. I found a bug that I didn't see the first time. I will submit a second patch shortly -- that is, some time today.
Created attachment 147481
Proposed patch, rev 2
The 'Test method' field should be an editable Text field like the other fields we already have there, such that the user can use copy/paste or edit the name directly. The label needs a mnemonic, and the mnemonic of the second Search... button must not conflict with the mnemonic of the first one.

Please remove the '(all)' element. If you think it's necessary to tell the user explicitly that the test method can also be empty, you can use a ControlDecoration and set a description text there.

The new method selection dialog only works for JUnit 3. You should also list all methods that have an @Test annotation (JUnit 4 tests). And the dialog should also show test methods from superclasses (unless they are overridden, of course).

When you validate the test method, just issue a warning (not an error) when the method could not be found. At least in JUnit 3, the test name does not have to be a method name (that's the default for subclasses of TestCase, but we should not block people from launching tests if their tests are implemented differently and they know what they are doing). You should also walk up the superclass hierarchy and look for a method there.

Please provide further patches against HEAD of org.eclipse.jdt.junit.
FYI: I won't be around till the end of October, so you don't have to hurry.
*** Bug 40597 has been marked as a duplicate of this bug. ***
Markus,

Thanks for your review. I will make changes as you recommend.

Would it be fair to say that you agree in principle to the enhancement? (If you say you do, it'll give me the motivation -- you know how it is.)

Thanks, Robert
> Would it be fair to say that you agree in principle to the enhancement? (If you
> say you do, it'll give me the motivation -- you know how it is.)

Sure, getting that functionality would be great! I realize I didn't write this explicitly, but if I don't agree with an enhancement request, I usually close the bug as WONTFIX or tell explicitly what I'd like to see changed, rather than wasting my and your time with a review for something I won't ever accept in the end ;-)
Created attachment 151519
Updated patch.
Markus, per your comments:

1] Make it a text field. Done.
2] Add distinct keyboard mnenomics for the label and search button. Done.
3] Remove "all" element. Done, though an equivalent still lives in the search dialog.
4] Recommendation on using ControlDecoration. Neat idea, but I couldn't make it work. I no longer care.
5] Address JUnit 4. Done. Please double-check my work here, because I lack confidence in my JUnit 4-foo.
6] Show methods from subclasses. Done.
7] Only issue a warning, not an error when the method isn't a valid test method. Done.

I wouldn't mind caching those values, but also I am happy to leave it as-is, if you agree. If I require caching, then the junit version should also be a parameter to the method listing (that is, the set of testable methods is distinct by project/class/test runner).

There may be some minor issues, such as JUnit 4 behavior (e.g. what happens if superclass has "@Test foo()" and subclass has "foo()". The search dialog gives no visual clue that a method may be a subclass method.

I'm available to put together faster replies and patches for the near future. If you see any non-major issues, then perhaps accept this patch and I'll follow it up with an update? Your call.
Hi Markus, any thoughts?
> 7] Only issue a warning, not an error when the method isn't a valid
> test method. Done.
The info message was not visible enough, and since there's no warning message in that dialog, I turned it back to error (but made sure the page is still valid with an error in the method name field).

I've fixed a few more problems and added the proposed cache in HEAD.
Hi Markus,

Thanks for looking at this. I'm not sure if there's something for me to do, based on your comment.
> Thanks for looking at this. I'm not sure if there's something for me to do,
> based on your comment.

No, except for testing whether the fix works for you.

I was just too tired to write a clear comment and mark the bug as fixed...
*** Bug 83651 has been marked as a duplicate of this bug. ***
Fantastic. Thanks much.


[JUnit] Improve discoverability of the ability to run a single method under JUnit Tests



Bug 285637: [JUnit] Improve discoverability of the ability to run a single method under JUnit Tests 