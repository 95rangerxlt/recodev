During 3.2, support has been added to store information about automatic fixing of deprecated constant accesses and method invocations. This functionality is currently used in the following refactorings:

- Rename
- Move
- Change Signature
- Introduce Parameter
- Replace Invocations

In order to let the user configure how references to a deprecated members can be resolved by clients, an action is needed in the "Source" menu which offers this facilities.

The following (non-breaking) API additions are suggested:

IJavaEditorActionDefinitionIds.java:

/**
 * Action definition ID of the source ->configure deprecation fix action
 * (value <code>"org.eclipse.jdt.ui.edit.text.java.configure.deprecation.fix"</code>).
 * @since 3.2
 */
public static final String CONFIGURE_DEPRECATION_FIX= "org.eclipse.jdt.ui.edit.text.java.configure.deprecation.fix"; //$NON-NLS-1$


JdtActionConstants.java:

	
/**
 * Source menu: name of standard configure deprecation fix global action
 * (value <code>"org.eclipse.jdt.ui.actions.ConfigureDeprecationFix"</code>).
 * @since 3.2
 */
public static final String CONFIGURE_DEPRECATION_FIX= "org.eclipse.jdt.ui.actions.ConfigureDeprecationFix"; //$NON-NLS-1$

Additionally, plugin.xml contains the corresponding command and action markup

During 3.2, support has been added to store information about automatic fixing of deprecated constant accesses and method invocations. This functionality is currently used in the following refactorings:

- Rename
- Move
- Change Signature
- Introduce Parameter
- Replace Invocations

In order to let the user configure how references to a deprecated members can be resolved by clients, an action is needed in the "Source" menu which offers this facilities.

The following (non-breaking) API additions are suggested:

IJavaEditorActionDefinitionIds.java:

/**
 * Action definition ID of the source ->configure deprecation fix action
 * (value <code>"org.eclipse.jdt.ui.edit.text.java.configure.deprecation.fix"</code>).
 * @since 3.2
 */
public static final String CONFIGURE_DEPRECATION_FIX= "org.eclipse.jdt.ui.edit.text.java.configure.deprecation.fix"; //$NON-NLS-1$


JdtActionConstants.java:

	
/**
 * Source menu: name of standard configure deprecation fix global action
 * (value <code>"org.eclipse.jdt.ui.actions.ConfigureDeprecationFix"</code>).
 * @since 3.2
 */
public static final String CONFIGURE_DEPRECATION_FIX= "org.eclipse.jdt.ui.actions.ConfigureDeprecationFix"; //$NON-NLS-1$

Additionally, plugin.xml contains the corresponding command and action markup
Erich, do you approve?
For a NLS action we decided to first keep the constant internal. This is better until we know for sure that this is the action how we want it. 



Is there a reason to be different than the NLS action, i.e., internal first and then publish?
I have temporarily moved the constants to an internal package


[source actions] Provide action to configure the deprecation fix of a member

api

132302 [source actions] Provide action to configure the deprecation fix of a member 