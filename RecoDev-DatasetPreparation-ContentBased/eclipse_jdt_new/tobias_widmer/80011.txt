Using build I20041130.  The quick fix for generation of serialVersionUID never
works.  It always produces the same UID (so it's useless): 6009335074727417445L.
 Nothing in the error log.  Always reproducible, tested with Eclipse on Sun J2SE
1.4.2/5.0, and IBM 1.4.2.  Bug doesn't happen in 3.1M3, so I just moved back to M3.

Another variant that happens even in M3: sometimes, the UID generation freezes,
with the dialog box showing "Computing serial version UID" / "Starting virtual
machine" forever while the launched javaw.exe doesn't use any CPU.  If I click
"Cancel", nothing happens (the dialog is not dismissed).  I have to kill the
launched javaw.exe, then... the serialVersionUID field appears in my Java class
normally.  (But there are repeated values.) In the log, this exception appears
only when I do that kill:

java.io.EOFException
	at java.io.DataInputStream.readFully(DataInputStream.java:178)
	at java.io.DataInputStream.readLong(DataInputStream.java:380)
	at
org.eclipse.jdt.internal.ui.text.correction.SerialVersionLaunchConfigurationDelegate$SerialVersionRunner.run(SerialVersionLaunchConfigurationDelegate.java:190)
	at
org.eclipse.jdt.internal.ui.text.correction.SerialVersionLaunchConfigurationDelegate.launch(SerialVersionLaunchConfigurationDelegate.java:280)
	at
org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:569)
	at
org.eclipse.jdt.internal.ui.text.correction.SerialVersionHashProposal.computeDefaultExpression(SerialVersionHashProposal.java:177)
	at
org.eclipse.jdt.internal.ui.text.correction.SerialVersionHashProposal$2.run(SerialVersionHashProposal.java:124)
	at
org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:105)

It seems that the SerialVersionRunner is just failing to notice when the
launched process terminates, or failing to close this process, considering that
it has already captured its output.

BTW, thanks for this new warning and quick-fix for missing serialVersionUIDs.
These lint-like facilities contribute hugely to coding productivity and quality!

Using build I20041130.  The quick fix for generation of serialVersionUID never
works.  It always produces the same UID (so it's useless): 6009335074727417445L.
 Nothing in the error log.  Always reproducible, tested with Eclipse on Sun J2SE
1.4.2/5.0, and IBM 1.4.2.  Bug doesn't happen in 3.1M3, so I just moved back to M3.

Another variant that happens even in M3: sometimes, the UID generation freezes,
with the dialog box showing "Computing serial version UID" / "Starting virtual
machine" forever while the launched javaw.exe doesn't use any CPU.  If I click
"Cancel", nothing happens (the dialog is not dismissed).  I have to kill the
launched javaw.exe, then... the serialVersionUID field appears in my Java class
normally.  (But there are repeated values.) In the log, this exception appears
only when I do that kill:

java.io.EOFException
	at java.io.DataInputStream.readFully(DataInputStream.java:178)
	at java.io.DataInputStream.readLong(DataInputStream.java:380)
	at
org.eclipse.jdt.internal.ui.text.correction.SerialVersionLaunchConfigurationDelegate$SerialVersionRunner.run(SerialVersionLaunchConfigurationDelegate.java:190)
	at
org.eclipse.jdt.internal.ui.text.correction.SerialVersionLaunchConfigurationDelegate.launch(SerialVersionLaunchConfigurationDelegate.java:280)
	at
org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:569)
	at
org.eclipse.jdt.internal.ui.text.correction.SerialVersionHashProposal.computeDefaultExpression(SerialVersionHashProposal.java:177)
	at
org.eclipse.jdt.internal.ui.text.correction.SerialVersionHashProposal$2.run(SerialVersionHashProposal.java:124)
	at
org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:105)

It seems that the SerialVersionRunner is just failing to notice when the
launched process terminates, or failing to close this process, considering that
it has already captured its output.

BTW, thanks for this new warning and quick-fix for missing serialVersionUIDs.
These lint-like facilities contribute hugely to coding productivity and quality!
Move to JDT/UI
Tobias, please investigate for M4.
Fixed > 20041203
New minor problem with this feature:  The quick-fix invokes an external java
process that reads the source file, and this may not be consistent with the
editor's content.  If I make some change to the source, but activate this
quick-fix without saving the modifications, the serial version generator will
execute on the old version of the source that's in the filesystem.

This is inconsistent with the general behavior, whcih causes problems.  Suppose
I have a class that's not serializable.  Then I edit it and add "implements
Serializable".  The hint "The serializable class XXX does not declare a static
final field serialVersionUID of type long" appears immediately (even without
saving the file).  Then I click in the quick-fix, and I get and error because
the file (in the disk) does not implement java.io.Serializable!

A more subtle problem is: I change something in the class (i.e. add a new
attribute), then I delete the serialVersionUID field so I can re-invoke this
quick-fix, once again without saving, and the same serialVersionUID will be
generated; but the correct behavior is generating a different UID because the
structure of the class (field and method signatures) is used for that.

A simple solution would be prompting the user to save the source file, if
necessary, when activating this quick-fix.  But you could also copy the editor's
content to a temp file to not bother the user with this requirement of saving.
How far should we go here, Dirk?
Added query to save compilation unit if necessary
Fixed > 20050103


Quick fix broken: Add generated serial version UID



80011 Quick fix broken: Add generated serial version UID 

80011 Quick fix broken: Add generated serial version UID 