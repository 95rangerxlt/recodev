TM (6/11/2001 17:26:11)
	sdk 122

	1) smoke test setup
	2) open LoadingTestRunner.java
	3) select lines from the second line of the comment of main(String[]) down to (including) the 
		line containing the method name.
	4) format
	5) observe: the formatting leaves the comment open, thus making the rest of the CU a comment.

EG (7/12/01 10:54:50 AM)
	the formatter selection should be extended to full lines

TM (6/11/2001 17:26:11)
	sdk 122

	1) smoke test setup
	2) open LoadingTestRunner.java
	3) select lines from the second line of the comment of main(String[]) down to (including) the 
		line containing the method name.
	4) format
	5) observe: the formatting leaves the comment open, thus making the rest of the CU a comment.

EG (7/12/01 10:54:50 AM)
	the formatter selection should be extended to full lines
moved to 'active'
still a problem
Still a problem but a corner case. Leaving P4.

deferring
Moving to core
I think this is a minor defect, if it is a defect. The selected code should be a
valid piece of Java code. There is no way for the formatter to guess that the
selection is in the middle of a comment. So the first '*' will be seen an
operator and not as the line in a comment.
The refactoring has such limitation to select a valid piece of code, so it
should be the same thing for the formatter.
The whole comment should be selected, not just a part of it.
We need to clear 2.1 bug reports that won't be addressed before 2.1. The new 
implementation is still in the works. Therefore we cannot include it for 2.1. 
Not enough testing and we need to polish the preferences. This will be address 
for 2.2 as stated in the JDT/Core plan.
Resurrecting for 3.0
Reopen for 3.0 consideration.
This has to be handled by the UI. For new formatter, simply return edits.
The new formatter won't be able to start directly in the middle of a comment.
Move to JDT/UI for comment.
Tobias, this should now work, right?
The new content formatter automatically expands the region to be formatted to 
partition boundaries and, if starting with default content type partition, also 
block-aligns the region.
The content formatter therefore uses the code formatter exactly the way 
Ctrl+Shift+F5 does. The comment formatter only "patches" the comment regions 
afterwards.
Verified


Formatter can't handle selections starting in comments (1GF5XQK)



Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis - refactoring and cleanup (after bug 416307) 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (9) nullness conflict formal/actual type parameter   - incl. fixes for annotated type variables 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (8) nullAnnotatedReadableName(): remove from RB, improve for PTB   - incl. a fix for detecting mismatch due to enclosing 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (7) tidy: include ArrayBinding in this treatment 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (4) only reduced flow analysis here (only NON_NULL) 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (3) report detailed typing issues in ReturnExpression 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (2) ConditionalExpression: always use unannotated() unless identical 

Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099 - (1): remove residue of intermediate work 

Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis - fixed CompilerInvocationTests 

Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis 

Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis - avoid generating illegal signatures 

Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis Bug 403216 - [1.8][null] TypeReference#captureTypeAnnotations treats type annotations as type argument annotations Bug 403457 - [1.8][compiler] NPE in WildcardBinding.signature 

Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis - fixed a regression after merging with bug 388281 

Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis 

Bug 13920 - NPE evaluating a keyCode 

- added support for custom carets on non-win32 platforms - added support for wide carets (~accessibility) - preference to disable custom carets (accessibility) - preference to disable wide carets - smart insert caret is now default, raw caret is bracket fixes - bug 39600: [misc] Java editor does not read lines in JAWS 4.5 - bug 39205: [misc] Cursor in 3.0-M1has changed to ugly "[" shape - bug 21715: StyledText - Text cursor is too thin in editor 