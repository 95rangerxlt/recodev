Add support to fix deprecations by refactoring (see also bug 106207)

Since 3.2 M4, the Rename refactorings are capable of generating delegate methods and fields to leave the refactored code API compatible. Since method invocations and field accesses to deprecated members can be fixed automatically in some cases, provide the necessary refactoring infrastructure to create a refactoring script to resolve the deprecation. The refactoring script can then be used by clients to automatically fix the deprecation on the client side.

The proposed API additions are:

org.eclipse.jdt.ui.jarpackager.JarPackageData#isDeprecationAware()
org.eclipse.jdt.ui.jarpackager.JarPackageData#setDeprecationAware(boolean).

and an additional constructor

RefactoringHistoryWizard(boolean, String, String, String)

which is a non-breaking addition.

Add support to fix deprecations by refactoring (see also bug 106207)

Since 3.2 M4, the Rename refactorings are capable of generating delegate methods and fields to leave the refactored code API compatible. Since method invocations and field accesses to deprecated members can be fixed automatically in some cases, provide the necessary refactoring infrastructure to create a refactoring script to resolve the deprecation. The refactoring script can then be used by clients to automatically fix the deprecation on the client side.

The proposed API additions are:

org.eclipse.jdt.ui.jarpackager.JarPackageData#isDeprecationAware()
org.eclipse.jdt.ui.jarpackager.JarPackageData#setDeprecationAware(boolean).

and an additional constructor

RefactoringHistoryWizard(boolean, String, String, String)

which is a non-breaking addition.
Erich, do you approve the proposed API additions?
+1
Fixed in HEAD > 20060227


[refactoring] Add support to fix deprecations by refactoring

api