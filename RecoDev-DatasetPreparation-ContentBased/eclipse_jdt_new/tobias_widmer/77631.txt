I200411022000

Not sure what the policy here is but moving Bar#foo(Foo) to Foo results in a
compile error due to a 'call' null.foo():

package test;
public class Bar {
	public void foo(Foo foo) {
	}
	public void bar() {
		foo(null);
	}
}

package test;
public class Foo {
}

I200411022000

Not sure what the policy here is but moving Bar#foo(Foo) to Foo results in a
compile error due to a 'call' null.foo():

package test;
public class Bar {
	public void foo(Foo foo) {
	}
	public void bar() {
		foo(null);
	}
}

package test;
public class Foo {
}
*** Bug 77956 has been marked as a duplicate of this bug. ***
Fixed > 20041108


Move method can result in uncompilable code



77938 Move Instance Method shows referenced field twice in list [refactoring] [move] 77653 Move method does not work with List<Integer> in method body [refactoring] [move] 77635 Move method uses wrong target name 77631 Move method can result in uncompilable code 77461 Move instance method: strange check boxes [refactoring] [move] 