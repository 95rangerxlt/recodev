I use autocompletion to generate an iteration through a collection.  So this is
the kind of code I'm getting:

   for (Iterator iter = myCollection.iterator(); iter.hasNext();) {
      type element = (type) iter.next();

However, autocompletion leaves my .java file without the neccessary

   import java.util.Iterator;

required for all of this to make sense.

I feel it's not as "auto" and not as "complete" as it could be (if you pardon
the pun).

I use autocompletion to generate an iteration through a collection.  So this is
the kind of code I'm getting:

   for (Iterator iter = myCollection.iterator(); iter.hasNext();) {
      type element = (type) iter.next();

However, autocompletion leaves my .java file without the neccessary

   import java.util.Iterator;

required for all of this to make sense.

I feel it's not as "auto" and not as "complete" as it could be (if you pardon
the pun).
Known limitation. We have to live with it for 2.0
Since we try to be smart regarding imports in JDT we should investigate if we 
can add an import in this case as well. Claude the is a special edit to 
organize imports. May be you only need to add that edit to the text buffer.

Please investigate
fixed >= 20020805
*** Bug 10812 has been marked as a duplicate of this bug. ***


Autocompletion "Iterate through Collection" should add "import java.util.Iterator"

investigate

fixed 20424 