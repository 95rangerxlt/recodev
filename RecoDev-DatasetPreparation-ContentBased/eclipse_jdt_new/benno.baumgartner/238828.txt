Using I20080624-0800.

Consider the following test case:
public class X {

private String javaProjectName;
private String buildNumber;

/**
 * Returns a string representation of the receiver.
 */
public String toString() {
	return "State for " + javaProjectName //$NON-NLS-1$
		+ " (#" + buildNumber //$NON-NLS-1$
			+ ")"; //$NON-NLS-1$
}

}

I perform a code clean-up to add 'this' qualifier and here's the output I get:
public class X {

private String javaProjectName;
private String buildNumber;

/**
 * Returns a string representation of the receiver.
 */
public String toString() {
	return "State for " + this.javaProjectName
		+ " (#" + this.buildNumber
			+ ")"; //$NON-NLS-1$
}

}

Note that the two NON-NLS tags located behind the modified fields have been wrongly removed...

Using I20080624-0800.

Consider the following test case:
public class X {

private String javaProjectName;
private String buildNumber;

/**
 * Returns a string representation of the receiver.
 */
public String toString() {
	return "State for " + javaProjectName //$NON-NLS-1$
		+ " (#" + buildNumber //$NON-NLS-1$
			+ ")"; //$NON-NLS-1$
}

}

I perform a code clean-up to add 'this' qualifier and here's the output I get:
public class X {

private String javaProjectName;
private String buildNumber;

/**
 * Returns a string representation of the receiver.
 */
public String toString() {
	return "State for " + this.javaProjectName
		+ " (#" + this.buildNumber
			+ ")"; //$NON-NLS-1$
}

}

Note that the two NON-NLS tags located behind the modified fields have been wrongly removed...
Using the ASTView, I have verified that the extended range of the simple names 'javaProjectName' and 'builderName' are correct: they both include the trailing NON-NLS comment...

The operation is to replace node 'javaProjectName' with 'this.javaProjectName'.

//$NON-NLS-1$ is part of javaProjectName so it will be replaced as well.

Note that trying to preserve the //$NON-NLS-1$ is very difficult, and we decided not to try. It's not always clear what the modification is going to do, if it inserts several lines, or replaces as NLS'd string with a non-NLS'ed.



N20080629-2000

Given:
package test1;
public class E01 {
	private int field;

	public String foo() {
		return "Foo" + field //MyComment
					+ field;
	}
}
1. Clean Up...
2. Select to 'this' qualify fields
3. Finish
Is:
 MyComment is removed
Should:
 Not be removed

Well, but I have a simple fix: I need to move the simple name, the AST rewrite seams to do it correct in this case. At the moment I replace it with a string placeholder (old code).
Created attachment 106100
fix
fixed > N20080629-2000


[clean up] Add 'this' qualifier removes necessary NON-NLS tag



238828 [clean up] Add 'this' qualifier removes necessary NON-NLS tag 