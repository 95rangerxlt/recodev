Assume a package "test" that contains two classes named "Class" and "Test". You write a method in "Test" and want to reference the system class "java.lang.Class", so you write the fully qualified package name. During typing, the proposal-list shows up (or you force it with Ctrl+Space). When you press Space after the last letter, the package name is removed. No import is added (because java.lang is always imported), but now the variable has the wrong type "test.Class" instead of "java.lang.Class".

So the add import logic should not remove the fully qualified package if a class with the same name is present in the current package.

Assume a package "test" that contains two classes named "Class" and "Test". You write a method in "Test" and want to reference the system class "java.lang.Class", so you write the fully qualified package name. During typing, the proposal-list shows up (or you force it with Ctrl+Space). When you press Space after the last letter, the package name is removed. No import is added (because java.lang is always imported), but now the variable has the wrong type "test.Class" instead of "java.lang.Class".

So the add import logic should not remove the fully qualified package if a class with the same name is present in the current package.
Another case for the new ContextSensitiveImportRewriteContext... JavaTypeCompletionProposal is for code assist, AddImportsOperation is for 'Add import'). It will be intersting to see if we still get good results as in these cases the AST is usually incomplete.
Created attachment 32672
fix
Created attachment 32676
fix

Use ASTProvider
released > 20060105


[add import] add import should not remove package name



121225 [add import] add import should not remove package name - Use ASTProvider 

121225 [add import] add import should not remove package name 