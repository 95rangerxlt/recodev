Currently the package explorer (and other widgets showing file lists) show a
small 'J' icon for java files.

It would be useful if this was one symbol for classes, and another for
interfaces. The choice would be made based on the public class/interface in the
file.

I frequently have a class and interface of the same name in different packages,
and it's hard to tell the difference.

Currently the package explorer (and other widgets showing file lists) show a
small 'J' icon for java files.

It would be useful if this was one symbol for classes, and another for
interfaces. The choice would be made based on the public class/interface in the
file.

I frequently have a class and interface of the same name in different packages,
and it's hard to tell the difference.
This would be a quite expansive operation as it would require opening each file
to find about the type. Dirk, what do you think? 
The case that bothers me most is when I'm looking at a list of files I have open - in this case the need to 
open files doesn't apply.

But it'd also be handy in the package explorer, and I'd assumed this information was already around for 
things like the 'Open Type' searching and jumping to definitions.
The only way I think this could be done is with decoration in the backgound. I'm
categorize this to 'decorators'.
As Martin said, this requires opening every single file in a package to get this
information from the Java model. If we query this information form the search
engine (which is possible) we have to map it back to the Java model.

Michael, are you aware of the browsing perspective which shows you types instead
of CUs as members of a package ?
I hadn't seen the browsing perspective and it does look useful.

I think it'd be nice in the package explorer, but feel free to close as unworkable.
*** Bug 115242 has been marked as a duplicate of this bug. ***
*** Bug 117586 has been marked as a duplicate of this bug. ***
Alright, a silly question....

Since code assist and the compiler "know" about the classes, their methods, and their fields, then it must be true that there is a map of all the classes of the project in memory somewhere. This map must include the package information to keep like named classes distinct.

If so, then the hiearchy view should be able to get information about the Java file (since it is in the same package structure (directory structure) from this map, and thus the type of class.
Has there been anything going on with this bug?
Personally I think this would be very, very handy enhancement but it looks like it isn't getting many votes.. I'm just wondering if there is any chance for this to happen, anytime soon - even if it doesn't seem to have votes?

To re-iterate how I see this:

Like I said in the other bug report (that's closed now), my vision of this is to retrofit the current package-explorer to optionally show types and hide Java-files altogether. Note that I'd prefer Projects and other files etc. to be visible though.

There should be a way to quickly switch between the two modes. Like a toggle-button on the top of package explorer.

When the "types only"-button is activated, all classes in all Java-files would be added to package-explorer and Java-files would be hidden.

The types could be sorted either by filename or type (for example, interfaces/abstract classes first).

Most of the functionality for this is already in the Types-view! It splits Java-files to types and adds them all to the list view. It shows separate icons for classes, interfaces, enums etc. It just needs packages and needs to be retrofitted in the package explorer.

I've no idea, though, how the package explorer actually works but as I see it this should definitely be possible to implement: the package-explorer already has these types too (as you can see when you click the + in a Java-file), it's just that the Java file-level must be left out AND the types inside the Java-files be added to the same list.

If this is not possible to do, an alternative would be a "Type Explorer"-view. It wouldn't show any files at all, but it would have packages (so it'd be like the current Types-view with packages).

Really hoping to see this happening!

BTW. There's also a small graphical glitch in the current Types-view: the type-names aren't centered with the icon.
There are no plans to change the package explorer to directly show types. Whe can only do this if the number of types to show is limited, e.g. in the types view by the current package, or in content assist by a name prefix.
The type hierarchy is already special case and can take minutes if you open it on e.g Object. This is because getting the information required opening and parsing files.
Also note the tricks that had to be done in the types view. Import declarations are shown as children of types. Some files have secondary types, so two types for the same file. Most of tools work on a file basis, e.g. CVS. Committing a secondary type also releases the primary type ect... The current package explorer shows the correct structure without tricks.

As mentioned, we think a background decorator is the way to go. We will see if we have time to implement this for 3.2.

Benno, you could experiment with that. Add a lightweigth decorarator similar to the OverrideIndicatorLabelDecorator.
A decorator has been added > I20060221-1300

It decorates Interfaces, Enums, and Annotations but not Classes because this would look to noisy. For now it is turned off by default. You can turn it on in Preferences->General->Apperance->Label Decorators->Java Type Indicator. 
WARNING WARNING WARNING: This feature is highly provisional and may be removed in the future.
I hope you give me some feedback. Well, at least I like it...
fixed > I20060322-1335

It will be in M6, still waiting for nicer icons...
I actually like those icons already, except that they look better when moving the icon 1 pixel to the left and up (and the enum icon is a bit smaller than others).

Also, it'd be useful to decorate abstract classes. What about colorizing the whole [J]-icon for abstract classes and interfaces.
Something like this ("Resource" is an abstract class): 

http://img529.imageshack.us/my.php?image=icons9rd.png

btw. Where are these icons located in the eclipse folder?
> Also, it'd be useful to decorate abstract classes. 

Bug 130530 [decoration] Java type decoration could also decorate abstract top-level types

> What about colorizing the
> whole [J]-icon for abstract classes and interfaces.
> Something like this ("Resource" is an abstract class): 
> 
> http://img529.imageshack.us/my.php?image=icons9rd.png

We thought about that, but implementing this would only be possible by using a bad hack because the label decorator does only allow to decorate icons but not to exchange the icon (it would be possible to hide the orginal icon by decorating the whole icon, but this only works until someone else has the same idea...)

> 
> btw. Where are these icons located in the eclipse folder?
> 

org.eclipse.jdt.ui\icons\full\ovr16





[decorators] info if class or interface is in file



111885 [decorators] info if class or interface is in file 