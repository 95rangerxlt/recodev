Bindings from reconciler are sometimes missing type annotations.

- launch a clean runtime workspace with a 1.8 JRE
- copy all the code below to the clipboard and paste it into the Package Explorer in one batch
- put the caret after "bug.imports.Outer.getInner();" and press Ctrl+1, Enter

=> The created field type is "@A(1) Outer<Random>.Inner<Date> inner", which misses most of the type annotations.

The problem is that the AST from the SharedASTProvider is missing these type annotations in the binding for the ...getInner() expression. This can also be seen in the ASTView if you switch to "Use SharedASTProvider.getAST" or "Use ICompilationUnit.reconcile".

Workaround to get correct bindings: Switch to another Java editor and then switch back. In this case, an ASTParser is used to feed the SharedASTProvider. If you modify the active editor, then the bindings become wrong again.


=============================
package bug.imports;

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

@Target(ElementType.TYPE_USE)  
public @interface A {
    int value() default 0;
}

package bug.imports;

public class Outer<O> {
    public class Inner<I> {
    }
    
    public static @A(1) Outer<java.util.@A(2) Random>.@A(3) Inner<java.util.@A(4) Date> getInner() {
        return null;
    }
}

package bug.imports;

public class Client {
//    class Random {}
//    class Date {}
//    class Outer {}
//    class Inner {}
//    class A {}
    
    void foo() {
        bug.imports.Outer.getInner();
    }
}

======================================

Bindings from reconciler are sometimes missing type annotations.

- launch a clean runtime workspace with a 1.8 JRE
- copy all the code below to the clipboard and paste it into the Package Explorer in one batch
- put the caret after "bug.imports.Outer.getInner();" and press Ctrl+1, Enter

=> The created field type is "@A(1) Outer<Random>.Inner<Date> inner", which misses most of the type annotations.

The problem is that the AST from the SharedASTProvider is missing these type annotations in the binding for the ...getInner() expression. This can also be seen in the ASTView if you switch to "Use SharedASTProvider.getAST" or "Use ICompilationUnit.reconcile".

Workaround to get correct bindings: Switch to another Java editor and then switch back. In this case, an ASTParser is used to feed the SharedASTProvider. If you modify the active editor, then the bindings become wrong again.


=============================
package bug.imports;

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

@Target(ElementType.TYPE_USE)  
public @interface A {
    int value() default 0;
}

package bug.imports;

public class Outer<O> {
    public class Inner<I> {
    }
    
    public static @A(1) Outer<java.util.@A(2) Random>.@A(3) Inner<java.util.@A(4) Date> getInner() {
        return null;
    }
}

package bug.imports;

public class Client {
//    class Random {}
//    class Date {}
//    class Outer {}
//    class Inner {}
//    class A {}
    
    void foo() {
        bug.imports.Outer.getInner();
    }
}

======================================
I came across the below scenario:
@Target({ TYPE_USE })
public @interface ReadOnly {

}

public interface I1 {
	public @ReadOnly String bar2(@ReadOnly String s, @ReadOnly List l1, @ReadOnly List<String> l2);
}


public class A implements I1, InnerA { //Invoke quick assist here


	}
interface InnerA{
public @ReadOnly String bar1(@ReadOnly String s, @ReadOnly List<Object> l1, @ReadOnly List<String> l2);
}

When Add UnImplemented method quick fix is invoked, the methods from I1 do not carry the type annotation. Found that ITypeBinding#getDeclaredMethods()do not have the type annottaion. Will this case be handled with this bug or should a separate bug be raised?
(In reply to Manju Mathew from comment #1)
> Will this
> case be handled with this bug or should a separate bug be raised?

I don't know at the moment. I will raise a separate bug if required later.

For the original reported issue, it looks like the ITypeBinding is holding onto a RawTypeBinding. I will investigate further.
(In reply to Manju Mathew from comment #1)
> When Add UnImplemented method quick fix is invoked, the methods from I1 do
> not carry the type annotation. Found that
> ITypeBinding#getDeclaredMethods()do not have the type annottaion. Will this
> case be handled with this bug or should a separate bug be raised?

I don't know if I am doing the right thing, but I can see the type annotations being picked both for return type as well as parameters. What result are you seeing?
(In reply to Jayaprakash Arthanareeswaran from comment #3)
> I don't know if I am doing the right thing, but I can see the type
> annotations being picked both for return type as well as parameters. What
> result are you seeing?

I didn't put all the classes/interfaces in separate CUs. Does it matter?
(In reply to Jayaprakash Arthanareeswaran from comment #4)
> I didn't put all the classes/interfaces in separate CUs. Does it matter?

It might well be. I see the same behavior for the issue reported in comment #0 as well. If the method being invoked comes from the same compilation unit, the local-variable/field gets all the type annotations. But not so when it comes from a different file.
Here's what happens when ASTParser#createAST() is called:

When the CU is being constructed, it takes the following path:

	CommentRecorderParser(Parser).parse(MethodDeclaration, CompilationUnitDeclaration) 
	MethodDeclaration.parseStatements() line: 188	
	TypeDeclaration.parseMethods() line: 877	
	CommentRecorderParser(Parser).getMethodBodies() line: 10026	
	CompilationUnitResolver.resolve() line: 1163	
	CompilationUnitResolver.resolve() line: 693	
	ASTParser.internalCreateAST() line: 1187	
	ASTParser.createAST() line: 813	

When the method is declared in another CU, the statement nodes are constructed without the annotations.

Srikanth, any idea what might be going on?
(In reply to Jayaprakash Arthanareeswaran from comment #5)
> (In reply to Jayaprakash Arthanareeswaran from comment #4)
> > I didn't put all the classes/interfaces in separate CUs. Does it matter?

The annotation interface ReadOnly and I1 should be in its own separate CU were as InnerA is declared within class A. 

> It might well be. I see the same behavior for the issue reported in comment
> #0 as well. If the method being invoked comes from the same compilation
> unit, the local-variable/field gets all the type annotations. But not so
> when it comes from a different file.
Right, methods from InnerA carries all the annotation but I1 do not. But if we replace the ReadOnly annotation with org.eclipse.jdt.annotation.NonNull or Nullable annotations in I1, then the type binding contain the required annotation. The problem seems to be with user defined annotations.
(In reply to Jayaprakash Arthanareeswaran from comment #6)
> Srikanth, any idea what might be going on?

Why am I not surprised. The signature of the java model says it all:

char[] ISourceMethod.getReturnTypeName()

Obviously when the source type converter reconstruct the ast, it will never have the annotations. But bug 405843 should have addressed this by setting TypeInfo#typeAnnotated and thus using the parser instead of SourceTypeConverter. But obviously there's some scenario where it's not working as expected. Continuing to investigate.
I can make the testcase from comment #0 pass when I add 10 or more annotations to Outer. However, it doesn't work when there is a presence of a type annotation. I noticed that the TypeDeclaration, MethodDeclaration etc. that SourceElementNotifier receives do not have the HasTypeAnnotations bit set, nor do the declarations have their bindings resolved.

Srikanth, any idea?
Created attachment 239461
Patch that works but not automation tested.

Jay, thanks for a clear and correct analysis. Just one nit: It is not that 
annotations were missing in SEP parsed file, but the HastTypeAnnotations bit 
is getting set in MethodDeclaration.resolveStatements() - too late/unreachable 
for clients that don't call resolve.

Please take it forward by (a) adding junit, (b) removing the line 199 of
MethodDeclaration.java and making sure nothing breaks. TIA.
(In reply to Jayaprakash Arthanareeswaran from comment #9)

>nor do the declarations have their bindings resolved.

This is by client request.
(In reply to Srikanth Sankaran from comment #10)

> Please take it forward by (a) adding junit, (b) removing the line 199 of
> MethodDeclaration.java and making sure nothing breaks. TIA.

I may have mispoken - ignore (b) - it is harmless anyways.

If coming up with a junit is going to take time due to SR2 testing or other
tasks:

    - Please release the patch after eyeballing the changes and verifying the fix,
so UI work can be unblocked.
    - Lower importance to normal.
    - Leave the bug open until a junit is available.

Thanks!
(In reply to Srikanth Sankaran from comment #10)
> Created attachment 239461 [details]
> Patch that works but not automation tested.

All existing tests pass and the fix has been released via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=673c0ef3c8529bb5f21f9c2d4f6ecb473d4a323c

I will keep the bug open and look to add new tests in a day or two.
(In reply to Manju Mathew from comment #1)
> I came across the below scenario:

Manju, this appears to be working as expected now. I can see that the type annotations are being brought into the implemented method.

But I found a bigger problem. Now the reconciler complains that the overridden method has the same erasure but doesn't override it. Will raise a separate bug for this.
(In reply to Jayaprakash Arthanareeswaran from comment #14)
> But I found a bigger problem. Now the reconciler complains that the
> overridden method has the same erasure but doesn't override it. Will raise a
> separate bug for this.

If found relevant, we can use this bug itself, as it's still open.

The following files should be in their own files:

I1.java
public interface I1 {
	public String bar2( String s, @Marker List l1, List<String> l2);
}

-------------
A.java

public class A implements I1 {

	@Override
	public String bar2(String s, @Marker List l1, List<String> l2) {
		return null;
	}
}

Doing a clean build, you can notice there's no error. But when you touch A.java in the editor, the reconciler reports error.
(In reply to Jayaprakash Arthanareeswaran from comment #15)
> (In reply to Jayaprakash Arthanareeswaran from comment #14)
> > But I found a bigger problem. Now the reconciler complains that the
> > overridden method has the same erasure but doesn't override it. Will raise a
> > separate bug for this.
> 
> If found relevant, we can use this bug itself, as it's still open.

No, it is better to raise a different bug. 

See also: https://bugs.eclipse.org/bugs/show_bug.cgi?id=330537#c3
(In reply to Jayaprakash Arthanareeswaran from comment #15)
> If found relevant, we can use this bug itself, as it's still open.

Just wanted to confirm this is not a recent one. I can confirm now that this has nothing to do with this bug or recent commit. I have raised bug 427105.
(In reply to Jayaprakash Arthanareeswaran from comment #14)
> Manju, this appears to be working as expected now. I can see that the type
> annotations are being brought into the implemented method.

After pulling changes i tested and it did not work as expected. Hence raised bug 427337 to track it.
Regression test released via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=87b34be930dd9e470c5a81364392c915d2db0f45
Following instructions as specified in Comment 0 all the type annotations are correctly created with the local field variable.
@A(1)
Outer<@A(2) Random>.@A(3) Inner<@A(4) Date> inner
Verified as working for Eclipse + Java 8 RC1 Eclipse Kepler 4.3.2(RC4) Build id: M20140212-0800 +  
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054.


[1.8][dom ast] Bindings from reconciler are sometimes missing type annotations



Bug 426515 - Added regression test 

Bug 426515 - [1.8][dom ast] Bindings from reconciler are sometimes missing type annotations 