Created attachment 240672
Patch 1

Superinterfaces of lambda element's IType are missing type arguments. The effect of this is that method override computations in JDT UI fail (e.g. in Ctrl+T and to render Javadocs for the lambda IMethod).

Example:

    Function<List<String>, List<String>> sup = (arg) -> {
        return new ArrayList<>(arg);
    };

    Function<List<String>, List<String>> suppe =
                new Function<List<String>, List<String>>() {
        @Override
        public List<String> apply(List<String> arg) {
            return new ArrayList<>(arg);
        }
    };

IType#getSuperInterfaceTypeSignatures() on the IType for the lambda returns "QFunction;". This signature is missing type arguments.

The corresponding anonymous type always returns the supertype via IType#getSuperclassTypeSignature(). Here, it returns the correctly parameterized signature "QFunction<QList<QString;>;QList<QString;>;>;".

For the lambda IType, resolved supertypes would be also be better than unresolved ones.

The attached patch fixes this, but I don't really understand the difference between the LambdaExpression and ResolvedLambdaExpression types.

Created attachment 240672
Patch 1

Superinterfaces of lambda element's IType are missing type arguments. The effect of this is that method override computations in JDT UI fail (e.g. in Ctrl+T and to render Javadocs for the lambda IMethod).

Example:

    Function<List<String>, List<String>> sup = (arg) -> {
        return new ArrayList<>(arg);
    };

    Function<List<String>, List<String>> suppe =
                new Function<List<String>, List<String>>() {
        @Override
        public List<String> apply(List<String> arg) {
            return new ArrayList<>(arg);
        }
    };

IType#getSuperInterfaceTypeSignatures() on the IType for the lambda returns "QFunction;". This signature is missing type arguments.

The corresponding anonymous type always returns the supertype via IType#getSuperclassTypeSignature(). Here, it returns the correctly parameterized signature "QFunction<QList<QString;>;QList<QString;>;>;".

For the lambda IType, resolved supertypes would be also be better than unresolved ones.

The attached patch fixes this, but I don't really understand the difference between the LambdaExpression and ResolvedLambdaExpression types.
Jay, please follow up, thanks, we want this for the GA.
(In reply to Markus Keller from comment #0)
> Created attachment 240672 [details]
> Patch 1

Thanks Markus.

> The attached patch fixes this, but I don't really understand the difference
> between the LambdaExpression and ResolvedLambdaExpression types.

I don't either !

This appeared to be required for certain hierarchy operations/tests and
is a simply modeled after ResolvedSourceType.

I had tried to not do this class on account of the fact that LE's at the 
time of construction are always resolved (i.e have all the information 
from resolution) and so one abstraction should be enough - but had trouble
earlier - but saw some issues.

However having RLE class may have only somehow masked those problems and
the real fix could have been the specialized equals method that ignores
working copy owner.

OK, I'll remove this class and test. If tests are green and also any UI tests
that have been written so far are green, we can remove this.
Created attachment 240677
Patch to eliminate ResolvedLambdaExpression

(In reply to Srikanth Sankaran from comment #2)

> OK, I'll remove this class and test. If tests are green and also any UI tests
> that have been written so far are green, we can remove this.

RunAllJava8Tests and RunAllModelTests are green even after I remove ResolvedLambdaExpression abstraction.

Jay, please work with Noopur to make sure any new UI tests are also not affected
and get rid of this abstraction. TIA.
Comment on attachment 240677
Patch to eliminate ResolvedLambdaExpression

We still would have to override getKey() in LE otherwise we may always
return the unresolved key - looking into it.
(In reply to Srikanth Sankaran from comment #2)
> (In reply to Markus Keller from comment #0)
> > Created attachment 240672 [details]
> > Patch 1
> 
> Thanks Markus.
> 
> > The attached patch fixes this, but I don't really understand the difference
> > between the LambdaExpression and ResolvedLambdaExpression types.
> 
> I don't either !

> OK, I'll remove this class and test. If tests are green and also any UI tests
> that have been written so far are green, we can remove this.

I think it is better to leave this in as is for now. Though removing this
does not seem to affect JDT/core tests, I tested before adding equivalent
getKey() method in LE.
There is also a further problem that org.eclipse.jdt.internal.compiler.ast.LambdaExpression.getTypeBinding().LambdaTypeBinding.computeUniqueKey() returns the functional interface type's key. It is too
late to fix this unless it impacts something.

Markus see org.eclipse.jdt.internal.core.JavaElement.resolved(Binding) and
org.eclipse.jdt.internal.core.JavaElement.unresolved() - These are not APIs
but used all over the place from API implementations, most notably from
implementations of org.eclipse.jdt.core.dom.IBinding.getJavaElement()

Also, ATM, org.eclipse.jdt.core.dom.LambdaExpression does not allow asking for getJavaElement()

Notwithstanding the documentation of these observations, I suggest we only
make those changes that are requested from UI side for now.
AFAIK, the resolved/unresolved versions of ITypes exist because IParent#getChildren() and similar Java element tree queries only return unresolved elements. For Java 1.5, codeSelect and the type hierarchy were enhanced to return ITypes with resolved type arguments.

I don't think we should deal with unresolved lambdas anywhere. But I only have an API client view and don't know all the JDT Core internals.

(In reply to Srikanth Sankaran from comment #5)
> I think it is better to leave this in as is for now.

OK for me.

(In reply to Srikanth Sankaran from comment #6)
> Also, ATM, org.eclipse.jdt.core.dom.LambdaExpression does not allow asking
> for getJavaElement()

Yup, bug 429813 (IMethodBinding#getJavaElement() returns null).
Created attachment 240704
Patch with new test

Same as the previous patch from Markus with a new unit test.

Patch looks good to me. Srikanth, I am planning to release this in a bit. Let me know if you would like to review before releasing.
(In reply to Jayaprakash Arthanareeswaran from comment #8)

> Patch looks good to me. Srikanth, I am planning to release this in a bit.
> Let me know if you would like to review before releasing.

I looked through, looks fine, Could you just insert a space before = (3 places)
and release please ? Thanks
Thanks for the patch, Markus. Released the fix with test here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=fce949b99d272770d0ef99d0fd14291b59c28cff
(From bug 429812 comment #17)
> We should actually use TypeBinding#genericTypeSignature() here.

This also needs to be applied for this bug. The lesson learned is that you can't convert Binding#readableName() to a resolved signature without information loss. For unresolved signatures, writing "QT;" for a reference to a type variable T is fine. For a resolved signature, "LT;" is wrong. It needs to be "TT;".

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c5d3e87bb720e91660c058962146e02390cfc415 and also in BETA_JAVA8 branch.


[1.8][model] Superinterfaces of lambda element's IType are missing type arguments



Bug 429910: [1.8][model] Superinterfaces of lambda element's IType are missing type arguments 

Bug 429910: [1.8][model] Superinterfaces of lambda element's IType are missing type arguments 

Bug 429910 - [1.8][model] Superinterfaces of lambda element's IType are missing type arguments 