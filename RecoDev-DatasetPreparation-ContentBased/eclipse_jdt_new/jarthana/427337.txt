Since the fix for bug 426515 did not resolve the issue reported in bug 426515, comment #1, I am raising a new bug to track it.

package pack1;

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

@Target({ ElementType.TYPE_USE })
public @interface ReadOnly {

}
package pack1;

import java.util.List;

public interface I1 {
public @ReadOnly
String bar2(@ReadOnly String s, @ReadOnly List<@ReadOnly String> l2);
}
package pack1;

import java.util.List;

public class AImpl implements I1, InnerA {}//Invoke the quick fix to Add Unimplemented methods

interface InnerA{
public @ReadOnly
String bar1(@ReadOnly String s, @ReadOnly List<@ReadOnly String> l2);
}

Inspect the IMethodBinding corresponding to InnerA#bar1(). binding.getParameterTypes()[0].getTypeAnnotations() returns the AnnotationBinding corresponding to @ReadOnly()

Now inspect the IMethodBinding corresponding to I1#bar2(). binding.getParameterTypes()[0].getTypeAnnotations() returns empty AnnotationBinding. Now inspect with the same binding binding.getParameterAnnotations(0), this returns the AnnotationBinding corresponding to @ReadOnly(), which seems wrong as the Javadoc for getParameterAnnotations() says that this is supposed to return the declaration annotation and not the type annotation.

Since the fix for bug 426515 did not resolve the issue reported in bug 426515, comment #1, I am raising a new bug to track it.

package pack1;

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

@Target({ ElementType.TYPE_USE })
public @interface ReadOnly {

}
package pack1;

import java.util.List;

public interface I1 {
public @ReadOnly
String bar2(@ReadOnly String s, @ReadOnly List<@ReadOnly String> l2);
}
package pack1;

import java.util.List;

public class AImpl implements I1, InnerA {}//Invoke the quick fix to Add Unimplemented methods

interface InnerA{
public @ReadOnly
String bar1(@ReadOnly String s, @ReadOnly List<@ReadOnly String> l2);
}

Inspect the IMethodBinding corresponding to InnerA#bar1(). binding.getParameterTypes()[0].getTypeAnnotations() returns the AnnotationBinding corresponding to @ReadOnly()

Now inspect the IMethodBinding corresponding to I1#bar2(). binding.getParameterTypes()[0].getTypeAnnotations() returns empty AnnotationBinding. Now inspect with the same binding binding.getParameterAnnotations(0), this returns the AnnotationBinding corresponding to @ReadOnly(), which seems wrong as the Javadoc for getParameterAnnotations() says that this is supposed to return the declaration annotation and not the type annotation.
On HEAD, after the quick assist for add implemented methods, this is what I see:

public class AImpl implements I1, InnerA {

	@Override
	public @ReadOnly
	String bar1(@ReadOnly String s, @ReadOnly List<@ReadOnly String> l2) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public @ReadOnly
	String bar2(@ReadOnly String s, @ReadOnly List<@ReadOnly String> l2) {
		// TODO Auto-generated method stub
		return null;
	}}//Invoke the quick fix to Add Unimplemented methods

interface InnerA{
public @ReadOnly
String bar1(@ReadOnly String s, @ReadOnly List<@ReadOnly String> l2);
}


Manju, what exactly is wrong with this and what are you expecting ? Glancing
through, it looks alright to me.
(In reply to Srikanth Sankaran from comment #1)
> Manju, what exactly is wrong with this and what are you expecting ? Glancing
> through, it looks alright to me.

Below is how my code looks like after the Quick Fix:
public class AImpl implements I1, InnerA {

	@Override
	public @ReadOnly
	String bar1(@ReadOnly String s, @ReadOnly List<@ReadOnly String> l2) {
	// TODO Auto-generated method stub
	return null;
	}

	@Override
	public @ReadOnly
	String bar2(String s, List<@ReadOnly String> l2) {
	// TODO Auto-generated method stub
	return null;
	}}

interface InnerA{
public @ReadOnly
String bar1(@ReadOnly String s, @ReadOnly List<@ReadOnly String> l2);
}

#bar2 is missing the type annotation after the Quick Fix. I have pulled all changes from BETA_JAVA8. So when i inspected the binding i did not find the type annotation corresponding to #bar2 in the right place and i was able to retrieve the same from methodBinding#getParameterAnnotations() which prompted me to raise this bug. Let me investigate more to make sure this is not a false alarm.
(In reply to Manju Mathew from comment #2)
> Let me investigate more to make sure this is
> not a false alarm.

We would rather you investigate more to make sure it *is* a false alarm ;-)
With the latest code and no local changes in BETA_JAVA8 of JDT/Core and JDT/UI, I can see the result as mentioned by Manju in comment #2.
(In reply to Noopur Gupta from comment #4)
> With the latest code and no local changes in BETA_JAVA8 of JDT/Core and
> JDT/UI, I can see the result as mentioned by Manju in comment #2.


Here is what I did. Launch an IDE comprising Kepler SR1 + Java bundles (latest)
on a clean workspace, paste the code from comment#0 and apply add unimplemented
methods: I see the annotations where they should be.

Noopur is trying to replicate this same experiment and if that works, it would
indicate some issues with the set up used by UI members.
OK, 

4.4 M5 + Java 8 bundles - No problem
Kepler SR1 + Java 8 bundles - No problem


Kepler SR2 M build + Java 8 bundles - I can see the problem.

Jay, please follow up, no idea what would explain this.
It gets even more interesting. I have two projects (let's say 1 and 2) in a workspace and in one of which I am able to reproduce this issue while on the other I can't. The project (1) where it's working fine was an existing project. The other project (2) is newly created.

It turns out that the project 1 has few more additional preferences set, including null analysis. I will continue to investigate.
(In reply to Jayaprakash Arthanareeswaran from comment #7)
> It turns out that the project 1 has few more additional preferences set,
> including null analysis. I will continue to investigate.

I can confirm that the bug occurs only when null analysis is turned OFF. Don't yet know why.
The reason why it works when null analysis or annotation processing is enabled is because of this code in SourceTypeBinding:

	if (compilerOptions.isAnnotationBasedNullAnalysisEnabled || compilerOptions.processAnnotations)
		createArgumentBindings(method, compilerOptions); // need annotations resolved already at this point

Srikanth, is this something I should bother about or do you think the problem lies elsewhere?
(In reply to Jayaprakash Arthanareeswaran from comment #9)
> The reason why it works when null analysis or annotation processing is
> enabled is because of this code in SourceTypeBinding:
> 
> 	if (compilerOptions.isAnnotationBasedNullAnalysisEnabled ||
> compilerOptions.processAnnotations)
> 		createArgumentBindings(method, compilerOptions); // need annotations
> resolved already at this point
> 
> Srikanth, is this something I should bother about or do you think the
> problem lies elsewhere?

That looks incorrect to me. It should actually say: 

 	if (compilerOptions.isAnnotationBasedNullAnalysisEnabled ||
 compilerOptions.storeAnnotations)
 		createArgumentBindings(method, compilerOptions);

i.e we are checking if there is somebody who is interested in annotations.
The check as is coded will include null analysis + APT and will exclude UI
which uses API's that come in with storeAnnotations set but not processAnnotations.

As you fix this. please also search for other suspicious such uses.

Thanks!
(In reply to Srikanth Sankaran from comment #10)

> That looks incorrect to me. It should actually say: 
> 
>  	if (compilerOptions.isAnnotationBasedNullAnalysisEnabled ||
>  compilerOptions.storeAnnotations)
>  		createArgumentBindings(method, compilerOptions);
> 

just checking if (this.globalOptions.storeAnnotations) should suffice since
the former implies the latter.
(In reply to Srikanth Sankaran from comment #11)

> just checking if (this.globalOptions.storeAnnotations) should suffice since
> the former implies the latter.

Jay, this is the problem, thanks for the analysis and zooming in on the problem
spot. To unblock Manju, I release the fix here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=e684e6a21ba6785236f2750955d595e2406bc4cc

Please add a test to TypeBindingTests308 and close. TIA.

Manju, please verify, TIA.
Verified, it works as expected after the fix. Thanks.
Added regression test:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=a96eb1003c8f030ad3ac54b72eb69895f0a3e0dd
Consider the test case picked up from regression Test (Comment 14).

import java.util.List;
interface I { 
 String bar2(@NonNull String s, @NonNull List<@NonNull String> l2);
} 

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
@Target(ElementType.TYPE_USE)
@interface NonNull {}

import java.util.List;

public class X implements I {}

Click on Quick Fix.

Without the fix:

@Override
	public String bar2(String s, List<@NonNull String> l2) {
		// TODO Auto-generated method stub
		return null;
	}


With fix:

@Override
	public String bar2(@NonNull String s, @NonNull List<@NonNull String> l2) {
		// TODO Auto-generated method stub
		return null;
	}
Verified as working for Eclipse + Java 8 RC1 Eclipse Kepler 4.3.2(RC4) Build id: M20140212-0800 +  
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054.


[1.8][dom ast] Type annotation is appearing in parameter annotation



Bug 427337 - Added regression test in TypeBindingTests308 

Fix for Bug 427337 - [1.8][dom ast] Type annotation is appearing in parameter annotation 