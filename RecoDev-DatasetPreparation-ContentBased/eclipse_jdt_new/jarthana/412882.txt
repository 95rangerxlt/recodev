During the classpath validation first all the classpath entries are validated and then the validation status is not reported for the optional entries. Due to that when large number of optional entries existed on classpath a majority of portion is spent on their validation which is of no use.

In a project with 12000+ optional library jars, setRawclaasspath is spending  more than 90% of time on this unnecessary validation. Here is the call tree captured with a profiler ...

- 21,925 ms org.eclipse.jdt.internal.core.JavaProject.setRawClasspath
 - 21,925 ms org.eclipse.jdt.internal.core.JavaProject.setRawClasspath
  - 21,925 ms org.eclipse.jdt.internal.core.JavaModelOperation.runOperation
   - 21,675 ms org.eclipse.core.internal.resources.Workspace.run
    - 21,675 ms org.eclipse.jdt.internal.core.JavaModelOperation.run
     - 21,675 ms org.eclipse.jdt.internal.core.SetClasspathOperation.executeOperation
      - 20,500 ms org.eclipse.jdt.internal.core.ChangeClasspathOperation.classpathChanged
       - 20,376 ms org.eclipse.jdt.internal.core.ClasspathValidation.validate
        - 20,214 ms org.eclipse.jdt.internal.core.ClasspathEntry.validateClasspathEntry
         - 20,214 ms org.eclipse.jdt.internal.core.ClasspathEntry.validateClasspathEntry
          - 19,978 ms org.eclipse.jdt.internal.core.ClasspathEntry.validateLibraryEntry
           - 13,461 ms org.eclipse.jdt.internal.core.ClasspathEntry.validateLibraryContents
            - 13,461 ms org.eclipse.jdt.internal.core.JavaModelManager.verifyArchiveContent
             - 12,023 ms org.eclipse.jdt.internal.core.JavaModelManager.getZipFile
              - 12,006 ms java.util.zip.ZipFile.<init>
               - 5,511 µs org.eclipse.core.internal.resources.Workspace.getRoot
                - 5,439 µs org.eclipse.core.runtime.Path.toFile
                 - 1,438 ms org.eclipse.jdt.internal.core.JavaModelManager.closeZipFile

I am working on a patch to avoid this unncessery validation and will send it across soon.

During the classpath validation first all the classpath entries are validated and then the validation status is not reported for the optional entries. Due to that when large number of optional entries existed on classpath a majority of portion is spent on their validation which is of no use.

In a project with 12000+ optional library jars, setRawclaasspath is spending  more than 90% of time on this unnecessary validation. Here is the call tree captured with a profiler ...

- 21,925 ms org.eclipse.jdt.internal.core.JavaProject.setRawClasspath
 - 21,925 ms org.eclipse.jdt.internal.core.JavaProject.setRawClasspath
  - 21,925 ms org.eclipse.jdt.internal.core.JavaModelOperation.runOperation
   - 21,675 ms org.eclipse.core.internal.resources.Workspace.run
    - 21,675 ms org.eclipse.jdt.internal.core.JavaModelOperation.run
     - 21,675 ms org.eclipse.jdt.internal.core.SetClasspathOperation.executeOperation
      - 20,500 ms org.eclipse.jdt.internal.core.ChangeClasspathOperation.classpathChanged
       - 20,376 ms org.eclipse.jdt.internal.core.ClasspathValidation.validate
        - 20,214 ms org.eclipse.jdt.internal.core.ClasspathEntry.validateClasspathEntry
         - 20,214 ms org.eclipse.jdt.internal.core.ClasspathEntry.validateClasspathEntry
          - 19,978 ms org.eclipse.jdt.internal.core.ClasspathEntry.validateLibraryEntry
           - 13,461 ms org.eclipse.jdt.internal.core.ClasspathEntry.validateLibraryContents
            - 13,461 ms org.eclipse.jdt.internal.core.JavaModelManager.verifyArchiveContent
             - 12,023 ms org.eclipse.jdt.internal.core.JavaModelManager.getZipFile
              - 12,006 ms java.util.zip.ZipFile.<init>
               - 5,511 µs org.eclipse.core.internal.resources.Workspace.getRoot
                - 5,439 µs org.eclipse.core.runtime.Path.toFile
                 - 1,438 ms org.eclipse.jdt.internal.core.JavaModelManager.closeZipFile

I am working on a patch to avoid this unncessery validation and will send it across soon.
I pushed the patch (https://git.eclipse.org/r/#/c/14524/) to Gerrit. I added Jayaprakash Arthanareeswaran as reviewer to the change, please let me know if I need to add anyone else too.

I didn't added a regression test as I didn't find any simple way to validate that some file is not read during the classpath validation. In addition to that as this change is not changing any behaviour and only avoiding some unnecessary work, I thought it would be ok with out a test. Please let me know if the test is required and there is possible way to write one.
Here is the call tree of setRawClasspath (with my patch) I captured of the same project with 12000+ optional jars. In my observation with this patch the setRawClasspath time went from around 22 seconds to around 4 seconds.

- 3,599 ms org.eclipse.jdt.internal.core.JavaProject.setRawClasspath
 - 3,599 ms org.eclipse.jdt.internal.core.JavaProject.setRawClasspath
   - 3,599 ms org.eclipse.jdt.internal.core.JavaModelOperation.runOperation
    - 3,420 ms org.eclipse.core.internal.resources.Workspace.run
     - 3,420 ms org.eclipse.jdt.internal.core.JavaModelOperation.run
      - 3,420 ms org.eclipse.jdt.internal.core.SetClasspathOperation.executeOperation
       - 2,351 ms org.eclipse.jdt.internal.core.ChangeClasspathOperation.classpathChanged
        - 2,187 ms org.eclipse.jdt.internal.core.ClasspathValidation.validate
         - 2,012 ms org.eclipse.jdt.internal.core.ClasspathEntry.validateClasspathEntry
          - 2,007 ms org.eclipse.jdt.internal.core.ClasspathEntry.validateClasspathEntry
           - 1,958 ms org.eclipse.jdt.internal.core.ClasspathEntry.validateLibraryEntry
            - 1,915 ms org.eclipse.jdt.internal.core.JavaModel.getTarget
             - 1,915 ms org.eclipse.jdt.internal.core.JavaModel.getExternalTarget
              - 1,894 ms java.io.File.isFile
               - 5,229 µs org.eclipse.jdt.internal.core.JavaModel.existingExternalFilesAdd
Will take a look at the patch sometime next week.
I updated the patch to avoid org.eclipse.jdt.internal.core.JavaModel.getTarget ->
org.eclipse.jdt.internal.core.JavaModel.getExternalTarget -> java.io.File.isFile call sequence when JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL project option is set to IGNORE and the library entry is optional. With this change the setRawClasspath execution time came to 2050 ms (from 3599 ms with previous patch and 21,925 ms originally).

I pushed the latest patch to Gerrit as Patch Set 2 and please have a look at it and let me know if you any suggestions.
A gentle reminder ...
(In reply to comment #5)
> A gentle reminder ...

Thanks for the reminder, but this one will have to wait as I am busy with Java 8 work. Let me see if I can find sometime during M2.
Sorry, but couldn't spare time for this during M2 amid tight java 8 schedule. Will have to take this up later.
Patch looks good. Will release it after running the tests once. Also we have existing tests that cover the scenario where optional classpath entries are not marked with classpath problems. So we don't need new tests.
Thanks for the patch, Thirumala! Gerrit patch has been merged into master:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=b95d0b5c5a2546979ad1285fdd89f2009b47e5cb
Fixed typos: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=6d909392b424b951896d8712e15f8cc7ac1235db
Thank you Jayaprakash ...

(In reply to Jayaprakash Arthanareeswaran from comment #9)
> Thanks for the patch, Thirumala! Gerrit patch has been merged into master:
> 
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
> ?id=b95d0b5c5a2546979ad1285fdd89f2009b47e5cb


Unnecessary validation of optional library classpath entries.



Fixed bug 412882: Avoid optional library classpath entries validation. 

Fixed bug 412882: Avoid optional library classpath entries validation. 