BETA_JAVA8:

    Internally, the compiler splits the declarations with multiple field/local
variables into multiple declarations. On the DOM side, these are managed via
fragments with possible extra dimensions property. The extra dimensions may
carry type annotations and we need to add support for that.

BETA_JAVA8:

    Internally, the compiler splits the declarations with multiple field/local
variables into multiple declarations. On the DOM side, these are managed via
fragments with possible extra dimensions property. The extra dimensions may
carry type annotations and we need to add support for that.
The following node types have extra dimensions:

MethodDeclaration
SingleVariableDeclaration
VariableDeclarationFragment
This is an interesting case: - The child list property descriptor will
need to be specified as Annotion[].class. I don't know if there are
precedents to this.
(In reply to comment #2)
> This is an interesting case: - The child list property descriptor will
> need to be specified as Annotion[].class. I don't know if there are
> precedents to this.

This won't work since the children need to be of type ASTNode - they can' be of array type. The other alternatives I am considering are:

1. Use the ArrayType itself to capture the annotations on dimensions. In fact, as part of the earlier work for JSR 308, we have added annotations property to the ArrayType. So, we could just leverage that.

2. Create a new ASTNode, let's say Dimension to represent dimensions. The nodes specified in comment #1 can have new property (let's say extraDimensionsList), which is a list of Dimension. And Dimension will have a list of Annotation. This is not much different from 1st approach. Only advantage I see is that we represent the dimensions and their annotations in a flat structure instead of a nested structure. This approach will make the existing extraDimensions property redundant. Perhaps we can make it deprecated? Otherwise, we will have to deal with the situations when both the extraDimensions and extraDimensionsList properties are modified in a conflicting way.

Markus/Srikanth, do you have any suggestions?
Created attachment 223782
work in progress

(In reply to comment #3)
> 1. Use the ArrayType itself to capture the annotations on dimensions. In
> fact, as part of the earlier work for JSR 308, we have added annotations
> property to the ArrayType. So, we could just leverage that.

I am proceeding with this approach. Except in the case of VariableDeclarationFragment, the ArrayType with annotations is already fully constructed and could be used as the value for the new field, which I am calling extra dimensions type. This is a WIP - I will be making bit more changes and add tests.
(In reply to comment #4)
> I am proceeding with this approach. Except in the case of
> VariableDeclarationFragment, the ArrayType with annotations is already fully
> constructed and could be used as the value for the new field, which I am
> calling extra dimensions type. This is a WIP - I will be making bit more
> changes and add tests.

There is a problem with this approach when the client may have altered both the extraDimensions (old) and the new extra dimensions type (new) property. Surely we can't give preference to one over the other, can we? That's why I see an advantage with the other approach of coming up with a new node type. With this approach, we can make the extraDimensions deprecated and get that property from the size of the dimensions array. 

Srikanth, do you have some suggestions for this problem?
Sorry for not answering earlier. I somehow missed the dynamite berried here.

We should take a step back and think a bit more about the spec. JLS7 8.4 already tells that the extra dimensions on a MethodDeclaration are just for compatibility and should not be used for new code.

Therefore, it doesn't make sense to add support for annotations on these extra dimensions. Why should the spec add more functionality to a construct that should not be used in new code? The changes in jsr308 for MethodDeclaratorRest and InterfaceMethodDeclaratorRest should be removed in the spec.


For SingleVariableDeclaration, the MODIFIERS_PROPERTY is a precedent of a similar problem. In JLS8 level, the AST should just support a single way to store extra dimensions. getExtraDimensions() can stay, but the implementation should defer to the new property. setExtraDimensions(..) should be deprecated and throw an UnsupportedOperationException in the JLS8 API.

In the WIP patch, the ArrayType is problematic, since the COMPONENT_TYPE_PROPERTY would either be null (illegal), or it would point to some other type, which would eventually violate the "Source ranges nest properly" rule in the Javadoc of ASTParser#setKind(int).

I think Jay's proposal #2 is a better solution. Dimension (or may be better DimensionType) could extend the AnnotatedType from bug 391890 comment 7, adding just the ANNOTATIONS_PROPERTY as API.
Created attachment 223996
Updated patch

With the alternate approach I was talking about. This patch still has some way to go, just updating the patch here before I can come back to this after couple of M4 items. Here is the list of tasks still pending:

1. Make DimensionType as AnnotableType as Markus mentioned.
2. Update documentations
3. Tests

The updated ASTView is good and helped me test the implementation better (Thanks Markus!) Also note that I intend to put the rewrite part in a separate patch so that we can move forward with the DOM/AST portion.
Created attachment 224706
Updated patch

This patch needs to be applied on top of the patch from bug 391890, comment #15  (attachment 224705) since it uses the new AnnotatableType.
Raised bug 396576 to track the AST rewrite part.
Created attachment 225413
Latest patch

Cleaned up few things, updated the documentation and copyright.

Might be adding new tests too.
Created attachment 225453
Updated patch

Actually, I didn't realize I had a more recent version of the patch and here is it.
Created attachment 225573
Updated patch

Patch had to be adjusted after the recent commits.

Srikanth, a note on the patch:
The API additions in VariableDeclaration forced me to add a API filter. Please let me know that shouldn't be the case.
Jay, this patch no longer applies. Could you refresh so I can do a first cut review ? I think Markus is in a better position to review this though.
(In reply to comment #6)

> Therefore, it doesn't make sense to add support for annotations on these
> extra dimensions. Why should the spec add more functionality to a construct
> that should not be used in new code? The changes in jsr308 for
> MethodDeclaratorRest and InterfaceMethodDeclaratorRest should be removed in
> the spec.

Sorry, I missed this comment, I'll take it up with the EG.
Created attachment 226075
Updated patch

Patch after resolving the merge conflicts.

Also note that I have left out a TODO to address the annotations on extra dimension on method declarations.
(In reply to comment #15)
> Created attachment 226075 [details]
> Updated patch
> 
> Patch after resolving the merge conflicts.

I released some clean up changes not related to the present bug via
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=caf64c6ca6cb6ffdc91f9978b4ee34c5d2fad461
Review comments:

(1) Javadoc of org.eclipse.jdt.core.dom.ASTNode.DIMENSION_TYPE links to
java.awt.Dimension. I don't think you wanted that.

(2) org.eclipse.jdt.core.dom.ASTNode.nodeClassForType(int) is missing the
new node type.

(3) I think the new node type is better named DimensionInfo rather than
DimensionType. It should NOT also be a subtype of AnnotatableType. It is
better derived directly from ASTNode with annotations property locally declared.

(4) We need to change all occurrences of dimension type (in code, javadoc, other
comments ...) to dimension info.

(5) javadoc of org.eclipse.jdt.core.dom.DimensionType.EXPRESSION_PROPERTY 
mentions "The "dimensions" structural property of this node type" - this
looks incorrect.

(6) Javadoc for org.eclipse.jdt.core.dom.DimensionType.expression mentions
expression*s* ? 

Also says: Defaults to an empty list. ???

(7) ASTVisitor.java is missing JCP disclaimer.

(8) Remove the TODO comment in ASTConverter for now. We will follow up
with a separate bug if there is a spec change.

(9) Should methodDecl.setExtraDimensions(extraDimensions); be invoked for
JLS8 ? 

(10) Is the statement in org.eclipse.jdt.core.dom.MethodDeclaration.clone0(AST):
			result.extraDimensionTypes = new ASTNode.NodeList(EXTRA_DIMENSION_TYPES_PROPERTY);

needed ? Does not the constructor already create it ?

(11) Does the call to result.setExtraDimensions(getExtraDimensions());
happen in < JLS8 ?

(12) Could you separate the ASTrewrite changes into a different bug ?
Are the changes in ASTRewriteFlattener integral to the DOM/AST side
of work ? 

(13) org.eclipse.jdt.core.dom.MethodDeclaration.EXTRA_DIMENSIONS_PROPERTY's
javadoc should mention it is not to be used at JLS8+ ? 

(14) org.eclipse.jdt.core.dom.MethodDeclaration.getExtraDimensions() should
thrown an exception at JLS8+ ? Likewise setExtra* ? 

(15) SingleVariableDeclaration memSize () treeSize() don't have to change ?

(16) Not sure of the change in VariableDeclaration and the resultant API
error.

I'll review once more after these changes are made and tested before 
asking Markus.
Created attachment 226117
Updated patch

(In reply to comment #17)
> Review comments:

All review suggestions included except (3) and (4).

Before we can rename DimensionType, I think we need to answer the question posted here: bug 39189, comment #1. If we were to include an expression as part of a DimensionType or whatever it is called, it'll be more than just an info, right? As far as I can see, Type is pretty much an abstract node and most sub types of Type don't seem to use more than one method from Type. In a way, DimensionType is like UnionType, which itself doesn't represent any single Type.
(In reply to comment #18)

> All review suggestions included except (3) and (4).
> 
> Before we can rename DimensionType, I think we need to answer the question
> posted here: bug 39189, comment #1. If we were to include an expression as
> part of a DimensionType or whatever it is called, it'll be more than just an
> info, right? 

I think the question link is bad. I don't see why DimensionInfo can't capture
expressions. It is just another property. That said, I haven't studied the
other patch dealing with ArrayCreation. I will take look and see. 

>As far as I can see, Type is pretty much an abstract node and
> most sub types of Type don't seem to use more than one method from Type. In
> a way, DimensionType is like UnionType, which itself doesn't represent any
> single Type.

The thing is variables can be declared to be of Type's. DimensionType cannot
be the Type of any variable. There is an abstraction breakdown here.
(In reply to comment #19)
> I think the question link is bad. I don't see why DimensionInfo can't capture
> expressions. It is just another property. That said, I haven't studied the
> other patch dealing with ArrayCreation. I will take look and see. 

https://bugs.eclipse.org/bugs/show_bug.cgi?id=391894#c1

> The thing is variables can be declared to be of Type's. DimensionType cannot
> be the Type of any variable. There is an abstraction breakdown here.

Makes sense, thanks for pointing out.
Created attachment 226179
Updated patch

Patch with suggestions discussed in the previous commit.
Review comments: I apologize that some of these comments should have been
given earlier and slipped through the first pass:

(1) org.eclipse.jdt.core.dom.AST.newDimensionInfo(Annotation[]): I think
factory method is better design to NOT take arguments that may only be
occassionally used as otherwise clients will be inconvenienced in having
to manufacture and pass null arguments needlessly.

(2) If you fix this (please :)) remember to adjust the javadoc accordingly.

(3) DimensionInfo - copyright does not look right - should it mention 
2000 - 2013 ?

(4) Javadoc of DimensionInfo: Should it enclose SingleVariableDeclaration
and friends in <code> </code> ?

(5) Same Javadoc, Need a line break before For JLS8:

(6) Javadoc for DimensionInfo.annotations(): @exception section is wrong.

(7)  DimensionInfo constructor's javadoc should have @exception section 
instead ?

(8) I would remove the javadoc from org.eclipse.jdt.core.dom.DimensionInfo.expression. It mentions element type
incorrectly, as it is valid only for containers.

(9) org.eclipse.jdt.core.dom.DimensionInfo.setExpression(Expression)'s javadoc
mentions "@param expression the new array type" - does not read right.

(10) Javadoc of org.eclipse.jdt.core.dom.MethodDeclaration.EXTRA_DIMENSIONS_PROPERTY
mentions non-existent EXTRA_DIMENSION_TYPES_PROPERTY.

(11) Javadoc of org.eclipse.jdt.core.dom.MethodDeclaration.extraDimensionInfos
mentions dimension types. Should be infos.

(12) Should org.eclipse.jdt.core.dom.MethodDeclaration.internalGetChildListProperty(ChildListPropertyDescriptor) directly return the extraDimensionInfos ? Or should it call
the properties accessor method ? The latter would check JLS levels ? Same
comment for SVD.

(13) RecoveredVariableBinding is missing JCP disclaimer.

(14) org.eclipse.jdt.core.dom.SingleVariableDeclaration.EXTRA_DIMENSIONS_PROPERTY 
mentions the non-existent EXTRA_DIMENSION_TYPES_PROPERTY.

(15) Did you mean to add setExtraDimension to the javadoc of org.eclipse.jdt.core.dom.SingleVariableDeclaration.setExtraDimensions(int)
instead of getExtraDimension ? 

(16) VariableDeclarationFragment references the non-existent EXTRA_DIMENSION_TYPES_PROPERTY.

Please do a self review one more time after these changes and I'll also
review once more.
(1) The DimensionInfo solution looks good to me.

(2) Getters and setters and properties that are not supported any more in JLS8 should be deprecated. See e.g. MethodDeclaration#getReturnType(). (I just saw that we missed to deprecate MethodDeclaration#MODIFIERS_PROPERTY.)

(3) For MethodDeclaration#getExtraDimensions(), it would be nice to keep the getter, but compute the value from the new slot (extraDimensionInfos.size()). The setter should be deprecated. See BodyDeclaration#getModifiers() for a precedent. (BTW: I still hope the jsr308 expert group fixes this mistake and doesn't touch the method declaration's extra dimensions at all).
(In reply to comment #23)
> (2) Getters and setters and properties that are not supported any more in
> JLS8 should be deprecated. See e.g. MethodDeclaration#getReturnType(). (I
> just saw that we missed to deprecate MethodDeclaration#MODIFIERS_PROPERTY.)

I don't have a problem with this. But this means we would get more warnings in our code since we will continue to call setExtraDimensions() for AST4 and below in ASTConverter.
(In reply to comment #23)
> (2) Getters and setters and properties that are not supported any more in
> JLS8 should be deprecated. See e.g. MethodDeclaration#getReturnType(). (I
> just saw that we missed to deprecate MethodDeclaration#MODIFIERS_PROPERTY.)

I have another question here: Shouldn't we deprecate AST#JLS4 also at this point?
(In reply to comment #25)
> I have another question here: Shouldn't we deprecate AST#JLS4 also at this
> point?

Yes, we should deprecate it. To avoid internal deprecation warnings, we should use techniques similar to AST#JLS3_INTERNAL and BodyDeclaration#internalSetModifiers(int).
Created attachment 226254
Updated patch

Patch incorporates review comments from Srikanth and Markus and also includes few other documentation changes.

Note that the patch produces lot of new deprecated warnings.
(In reply to comment #27)

> Note that the patch produces lot of new deprecated warnings.

The usual trick to avoid these warnings is to rely on two behaviors: (a) Deprecated code referencing deprecated fields does not produce a warning out
of the box (b) deprecated warnings are issued only for client code and not 
for the class it.

Have you tried these ?
Review comments: 

(1) For future work: (no need to change now)

    DimensionInfo result = new DimensionInfo(this);
    return result;

could have been clutter free as "return new DimensionInfo(this);"

(2) DimensionInfo top level javadoc needs reformatting with <pre> tags.

(3) The phrase "dimension type" still shows up in 10 places per text
search and needs to be replaced with "dimension info"

(4) org.eclipse.jdt.core.dom.MethodDeclaration.getExtraDimensionInfos()'s
javadoc mentions element type as {@link DimensionInfo}[] - this is incorrect.

(5) Same problem as (4) in SVD.

(6) Please get rid of the change in RecoveredVariableBinding as it is no 
longer relevant.

(7) Javadoc on org.eclipse.jdt.core.dom.VariableDeclarationFragment.extraDimensionInfos reads:
"The extra dimensions this node has with annotations if any" - I think
you meant to say "The extra dimensions this node has with optional annotations"

:)

(8) org.eclipse.jdt.core.dom.VariableDeclarationFragment.accept0(ASTVisitor):
The comment reads: // visit children in normal left to right reading order
So extra dimensions should be handled before initializer.

(9) Same problem as (4) in VDF

(10) Flattener: for (int i = 0; i < dimensions.size(); i++) , extract the loop
invariant size() into local. (3 places)

(11) ASTStructuralPropertyTest is missing copyright update and JCP disclaimer.

(12) The *existing* method ASTConverter#retrieveEndOfRightParenthesisPosition 
is totally bogus and will fail for a test case like:

public class X {
 	static void foo(@ReadOnly("Blah") int z) { 
 		
 	} 
}

@interface ReadOnly {
	String value() default "Blah";
}

The method must discount balanced parentheses. Please raise a follow up
(low priority) defect for that.

(13) Please get rid of all changes of the form:
(this.ast.apiLevel < AST.JLS8) ? variableDeclarationFragment.getExtraDimensions() 
						: variableDeclarationFragment.getExtraDimensionInfos().size());
as they are just cluttering the code and are not required.

(14) This patch generates many compiler warnings - all of which must be
cleaned up. See comment #28.

Finally, you ought to set up an appointment with an optometrist to get
checked out for Saleswaram :)

---

If these are the only changes you are making, please proceed to release.
Thanks.
(In reply to comment #29)
> (12) The *existing* method
> ASTConverter#retrieveEndOfRightParenthesisPosition 
> is totally bogus and will fail for a test case like:
> ... 
> The method must discount balanced parentheses. Please raise a follow up
> (low priority) defect for that.

Logged bug 399600 for this.
 
> If these are the only changes you are making, please proceed to release.
> Thanks.

Yes, and released here the fix via commit:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=ebf5deb17f462a2a1a50c9b4076f1d52394081e1
Marking as resolved.
(In reply to comment #30)
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
> ?h=BETA_JAVA8&id=ebf5deb17f462a2a1a50c9b4076f1d52394081e1

In the last commit, one file got left out due to a staging error. I have pushed it here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=a6672627189e3721a2c066ce225fd09afe979f63
Refer to bug 391894, comment #2 through 5 - this commit removes expression from DimensionInfo after renaming the same to ExtraDimension.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=7df061f9da0ab96be87e5851cb157a28c5f5bca0


[1.8][dom ast] Annotation support for extended dimensions



Fix for bug 391895 - Rename DimensionInfo to ExtraDimension and remove expression from same. 

Fix for bug 391895 - Changes missed out due conflict 

Fix for bug 391895 - [1.8][dom ast] Annotation support for extended dimensions 