Created attachment 228323
ASTConverter18Tests.java test case to reproduce the issue

Annotations are not converted (and displayed) correctly in case of annotations on inner classes.

Test program to reproduce:

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
public class X  {
	void foo1(@Marker X this) {}
	public class Y {		
 	    void foo(@Marker X.@Marker Y this) {}
	}
}
@Target(ElementType.TYPE_USE)	
@interface Marker {}


OR 

Add the attached test case to ASTConverter18Tests.java and the test will fail at the last assertion

Created attachment 228323
ASTConverter18Tests.java test case to reproduce the issue

Annotations are not converted (and displayed) correctly in case of annotations on inner classes.

Test program to reproduce:

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
public class X  {
	void foo1(@Marker X this) {}
	public class Y {		
 	    void foo(@Marker X.@Marker Y this) {}
	}
}
@Target(ElementType.TYPE_USE)	
@interface Marker {}


OR 

Add the attached test case to ASTConverter18Tests.java and the test will fail at the last assertion
Here is the where things go wrong:

Let's say we are converting the receiver with a qualified type @A X. @B .Y @C Z.

In the case of a regular parameter, the @A is associated with the modifier2 property of the SVD. But in the above case of receiver, the converter is adding @A to the actual receiver type - 'Z', which is wrong. It should either add it to the qualifier 'X' or even better we come up with a new child list for receiver annotations.

Markus, I tend to think the latter approach would be cleaner and easier to understand for a client also. What do you think?
(In reply to comment #1)
> Here is the where things go wrong:
> 
> Let's say we are converting the receiver with a qualified type @A X. @B .Y
> @C Z.
> 
> In the case of a regular parameter, the @A is associated with the modifier2
> property of the SVD. But in the above case of receiver, the converter is
> adding @A to the actual receiver type - 'Z', which is wrong. It should
> either add it to the qualifier 'X' or even better we come up with a new
> child list for receiver annotations.

Where Java SE8 annotations occur in a SE7 location, we have left it in to
decorate the same annotation target as SE7. Unless resolution is requested, 
we will not know that a certain annotation is a type annotation.

But in the case of receivers, the compiler itself can transfer the annotation
as needed because it is illegal to annotate a receiver with a Java7 style
annotation (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=394355)
Created attachment 228378
Proposed fix

I have added code to move the receiver.annotations to receiver.type.annotations[0] in Parser - at the earliest point possible.

Srikanth, please review.
Created attachment 228384
Updated patch

Previous patch didn't properly set the HasTypeAnnotations flag to Receiver#type. Fixed in this patch.
I made a few cosmetic changes as follows:

(1) Parser: Renamed recAnnotations to be simply annotations.
(2) Changed new Annotation[type.getTypeName().length][] to be
new Annotation[type.getAnnotatableLevels()][]

Also in future, in converter tests it is better not to rely on toString
output comparisons too much. These are welcome, but we should verify things
structurally.

Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=079de37f5a5bae65a968aa0699ca7ca223c351c8
There is a problem with the fix released - the source range of the type doesn't include the annotations that are being moved into the type.
Created attachment 228437
Patch to fix the source range

Srikanth, I believe this should do. Can you take a look at the patch, please?
(In reply to comment #7)
> Created attachment 228437 [details]
> Patch to fix the source range
> 
> Srikanth, I believe this should do. Can you take a look at the patch, please?

Released with a small change to honor the proper ranges in this scenario:

  foo(final @Readonly X this) {}

Here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=79e266e9fa3c92d3c79f9b02e4b66f170c6636c7

cf: Parser.annotateTypeReference
(In reply to comment #8)
> Released with a small change to honor the proper ranges in this scenario:
> 
>   foo(final @Readonly X this) {}

Since we decided to go with the receiver type and qualifier instead of SingleVariableDeclaration, looks like the DOM AST doesn't have room to store the modifiers at all. Looks trouble to me!
(In reply to comment #9)
> (In reply to comment #8)
> > Released with a small change to honor the proper ranges in this scenario:
> > 
> >   foo(final @Readonly X this) {}
> 
> Since we decided to go with the receiver type and qualifier instead of
> SingleVariableDeclaration, looks like the DOM AST doesn't have room to store
> the modifiers at all. Looks trouble to me!

I just noticed that the JSR308 amended grammar does not allow modifiers
on the this parameter - they don't make sense really, the only modifier
that is legal there is final and this is final anyways:

FormalParameterDecls:
{VariableModifier} UnannType FormalParameterDeclsRest
FormalParameterDeclsRest:
VariableDeclaratorId [, FormalParameterDecls]
[Annotations] ... VariableDeclaratorId

FormalParameters:
( [FormalParameterOrReceiverDecls] )
FormalParameterOrReceiverDecls:
Type [Identifier .] this [, FormalParameterDecls]
FormalParameterDecls

So this is not an issue - we should raise a bug for rejecting modifiers if
they are indeed present after confirming javac does the same,
(In reply to comment #9)
> Since we decided to go with the receiver type and qualifier instead of
> SingleVariableDeclaration, looks like the DOM AST doesn't have room to store
> the modifiers at all. Looks trouble to me!

Okay, this is not a valid concern as the latest spec clearly says modifiers are not allowed for receivers. For this, I have raised bug 403410.


[1.8][DOM] Incorrect ASTConversion for Annotations on inner classes of Receiver



Follow on fix to Bug 403132 - [1.8][DOM] Incorrect ASTConversion for Annotations on inner classes of Receiver 

Fixed Bug 403132 - [1.8][DOM] Incorrect ASTConversion for Annotations on inner classes of Receiver 