Using the Java code shown below, when I insert the text "Refer to {@link " into 
the Javadoc comments on line 39, position 67 (in front of the 
word "According"), the UI hangs for about 30 seconds. A dialog then appears 
appears indicating the following error:

org.eclipse.swt.SWTException: Failed to execute runnable 
(java.lang.OutOfMemoryError)
	at org.eclipse.swt.SWT.error(SWT.java:1887)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages
(Synchronizer.java:96)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:1390)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1208)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:788)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:771)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:777)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:319)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.Main.main(Main.java:362)
*** Stack trace of contained exception ***
java.lang.OutOfMemoryError

I suspect that may be due to some kind of recursive problem. When the UI hangs, 
in the Windows task manager the CPU usage goes to 100%, however memory usage 
barely changes.

Cheers,

- David Lewis

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
package org.nfis.cubewerx.wmt;

import java.util.*;
import java.net.URL;
import java.net.MalformedURLException;
import java.io.PrintStream;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.nfis.wmt.xml.layer.LegendURL;
import org.nfis.wmt.xml.util.*;

/**
 * A Style element lists the name by which a style is requested and a
 * human-readable title for pick lists, optionally (and ideally) provides a
 * human-readable description, and optionally gives a style URL. With WMT
 * MS Capabilities 1.1.0, two new elements were added: {@link LegendURL} 
 * and {@link StyleSheetURL}.
 * 
 * <p><b>Supported by:</b> WMT MS Capabilities 0.9.3 and greater.</p>
 * @version 	2.0
 * @author David Lewis <dlewis@pfc.forestry.ca>
 */
public class Style implements java.io.Serializable {

	private static final long serialVersionUID = 7815103380041966231L;
	private String name;
	private String title;
	private String abstractDescription;
	private URL url;
	private LegendURL legend = null;
	private static Style defaultStyle;

	/**
	 * Class constructor.<hr>
	 *
	 * 2002-03-05 David Lewis <dlewis@pfc.forestry.ca><br>
	 * I suspect that this static method is used by the GeoExplore client 
and
	 * server to specify that the default Style is being requested. 
According
	 * to the OCG specification (GC 01-068r3, section 7.2.3.4), the default
	 * Style is requested with a null value (as in "STYLE="). With WMT MS
	 * Capabilities 1.1.0 and later, a Style object has two new elements 
	 * added: LegendURL and StyleSheetURL.  Refer to the static method 
	 * {@link getDefaultStyle} for more information. This static method may 
	 * need to be refactored/modified to accomodate these changes.<hr>
	 * 
	 * @param name a name; must not be null<P>
	 * @param title a human-readable title; must not be null<P>
	 * @param abstract a human-readable description; can be null<P>
	 * @param url a URL providing information; can be null<P>
	 */
	protected Style (String name, String title, String abstractDescription,
				URL url) {
		if (name == null || title == null)
			throw new IllegalArgumentException();

		this.name = name;
		this.title = title;
		this.abstractDescription = abstractDescription;
		this.url = url;
	}
	/**
	 * Class constructor which creates a Style by parsing the given
	 * XML element.<P>
	 *
	 * @param element the XML element to parse<P>
	 *
	 * @throws CapabilitiesParseException if the given XML element cannot
	 * be parsed as a Style<P>
	 */
	protected Style (Element element) throws CapabilitiesParseException {
		Node child = element.getFirstChild();
		while (child != null) {
			if (child.getNodeType() == Node.ELEMENT_NODE) {
				String nodeName = child.getNodeName();
				if (nodeName.equalsIgnoreCase("Name"))
					name = WMT_XMLParser.simpleElementParser
((Element) child);
				else if (nodeName.equalsIgnoreCase("Title"))
					title = 
WMT_XMLParser.simpleElementParser((Element) child);
				else if (nodeName.equalsIgnoreCase("Abstract"))
					abstractDescription = 
WMT_XMLParser.simpleElementParser((Element) child);
				else if (nodeName.equalsIgnoreCase("StyleURL"))
					url = WMT_XMLParser.parseUrl((Element) 
child);
				else if (nodeName.equalsIgnoreCase("LegendURL"))
					legend = new LegendURL(child);

			}
			child = child.getNextSibling();
		}

		if (name == null)
			throw new CapabilitiesParseException(
				"section \"" + element.getNodeName() + "\" is 
missing section \"Name\"");

		if (title == null)
			throw new CapabilitiesParseException(
				"section \"" + element.getNodeName() + "\" is 
missing section \"Title\"");

	}

	/**
	 * Dumps a text representation of this Style to the specified stream
	 * for dubugging purposes.<P>
	 *
	 * @param stream where to send the output<P>
	 * @param tab the String to use to indent each line of the output<P>
	 */
	public void dumpToStream(PrintStream stream, String tab) {
		Iterator i;

		stream.println(tab + "Style:");
		tab = tab + "    ";
		stream.println(tab + "Name: " + name);
		stream.println(tab + "Title: " + title);
		stream.println(tab + "Abstract: " + abstractDescription);
		stream.println(tab + "URL: " + url);
	}

	/**
	 * Returns a human-readable description of this Style, or null if none
	 * was provided.
	 * @return a human-readable description of this Style, or null if none
	 * was provided
	 */
	public String getAbstract() {
		return abstractDescription;
	}

	/**
	 * Returns a default Style that is valid for all {@link Layer}s during a
	 * {@link Server#getMap getMap} request.<P>
	 *
	 * @return a default Style that is valid for all {@link Layer}s during a
	 * {@link Server#getMap getMap} request<P>
	 * 
	 * 
**********************************************************************
	 * 2002-03-05 David Lewis <dlewis@pfc.forestry.ca>
	 * I suspect that this static method is used by the GeoExplore client 
and
	 * server to specify that the default Style is being requested. 
According
	 * to the OCG specification (GC 01-068r3, section 7.2.3.4), the default
	 * Style is requested with a null value (as in "STYLE="). With WMT MS
	 * Capabilities 1.1.0 and later, a Style object has two new elements 
	 * added: LegendURL and StyleSheetURL. This static method may need to 
be 
	 * refactored/modified to accomodate these changes.
	 * 
**********************************************************************
	 */
	public static Style getDefaultStyle() {
		if (defaultStyle == null)
			defaultStyle = new Style("default", "default", null, 
null);

		return defaultStyle;
	}

	/**
	 * Returns the name of this Style.
	 * @return the name of this Style
	 */
	public String getName() {
		return name;
	}

	/**
	 * Returns a human-readable title for this Style.
	 * @return a human-readable title for this Style
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Returns a URL providing information about this Style, or null if none
	 * was provided.
	 * @return a URL providing information about this Style, or null if none
	 * was provided
	 */
	public URL getUrl() {
		return url;
	}

	public LegendURL getLegend() {
		return legend;
	}

	/**
	 * The equals compares objects based only on the name attribute as 
described
	 * in the OGC Web Map Service Implementation Specification, verion 
1.1.1 
	 * (OGC 01-068r3), section 7.1.4.5.4
	 * 
	 * Style declarations are inherited by child Layers.  A child shall not 
	 * redefine a Style with the same Name as one inherited from a parent.  
	 * A child may define a new Style with a new Name that is not available 
for 
	 * the parent Layer.
	 *  
	 * @see Object#equals(Object)
	 */
	public boolean equals(Object obj) {
		boolean equals = false;
		if(obj != null && obj instanceof Extent) {
			equals = this.name.equals(((Extent)obj).getName());
		}
		
		return equals;		
	}


	/**
	 * Returns a human-readable title for this Style.
	 * @return a human-readable title for this Style
	 */
	public String toString() {
		return "Style [Name: " + getName() + ", Title: " + getTitle() + 
			", URL: " + getUrl() + "]";
	}

}

Using the Java code shown below, when I insert the text "Refer to {@link " into 
the Javadoc comments on line 39, position 67 (in front of the 
word "According"), the UI hangs for about 30 seconds. A dialog then appears 
appears indicating the following error:

org.eclipse.swt.SWTException: Failed to execute runnable 
(java.lang.OutOfMemoryError)
	at org.eclipse.swt.SWT.error(SWT.java:1887)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages
(Synchronizer.java:96)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:1390)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1208)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:788)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:771)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:777)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:319)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.Main.main(Main.java:362)
*** Stack trace of contained exception ***
java.lang.OutOfMemoryError

I suspect that may be due to some kind of recursive problem. When the UI hangs, 
in the Windows task manager the CPU usage goes to 100%, however memory usage 
barely changes.

Cheers,

- David Lewis

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
package org.nfis.cubewerx.wmt;

import java.util.*;
import java.net.URL;
import java.net.MalformedURLException;
import java.io.PrintStream;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.nfis.wmt.xml.layer.LegendURL;
import org.nfis.wmt.xml.util.*;

/**
 * A Style element lists the name by which a style is requested and a
 * human-readable title for pick lists, optionally (and ideally) provides a
 * human-readable description, and optionally gives a style URL. With WMT
 * MS Capabilities 1.1.0, two new elements were added: {@link LegendURL} 
 * and {@link StyleSheetURL}.
 * 
 * <p><b>Supported by:</b> WMT MS Capabilities 0.9.3 and greater.</p>
 * @version 	2.0
 * @author David Lewis <dlewis@pfc.forestry.ca>
 */
public class Style implements java.io.Serializable {

	private static final long serialVersionUID = 7815103380041966231L;
	private String name;
	private String title;
	private String abstractDescription;
	private URL url;
	private LegendURL legend = null;
	private static Style defaultStyle;

	/**
	 * Class constructor.<hr>
	 *
	 * 2002-03-05 David Lewis <dlewis@pfc.forestry.ca><br>
	 * I suspect that this static method is used by the GeoExplore client 
and
	 * server to specify that the default Style is being requested. 
According
	 * to the OCG specification (GC 01-068r3, section 7.2.3.4), the default
	 * Style is requested with a null value (as in "STYLE="). With WMT MS
	 * Capabilities 1.1.0 and later, a Style object has two new elements 
	 * added: LegendURL and StyleSheetURL.  Refer to the static method 
	 * {@link getDefaultStyle} for more information. This static method may 
	 * need to be refactored/modified to accomodate these changes.<hr>
	 * 
	 * @param name a name; must not be null<P>
	 * @param title a human-readable title; must not be null<P>
	 * @param abstract a human-readable description; can be null<P>
	 * @param url a URL providing information; can be null<P>
	 */
	protected Style (String name, String title, String abstractDescription,
				URL url) {
		if (name == null || title == null)
			throw new IllegalArgumentException();

		this.name = name;
		this.title = title;
		this.abstractDescription = abstractDescription;
		this.url = url;
	}
	/**
	 * Class constructor which creates a Style by parsing the given
	 * XML element.<P>
	 *
	 * @param element the XML element to parse<P>
	 *
	 * @throws CapabilitiesParseException if the given XML element cannot
	 * be parsed as a Style<P>
	 */
	protected Style (Element element) throws CapabilitiesParseException {
		Node child = element.getFirstChild();
		while (child != null) {
			if (child.getNodeType() == Node.ELEMENT_NODE) {
				String nodeName = child.getNodeName();
				if (nodeName.equalsIgnoreCase("Name"))
					name = WMT_XMLParser.simpleElementParser
((Element) child);
				else if (nodeName.equalsIgnoreCase("Title"))
					title = 
WMT_XMLParser.simpleElementParser((Element) child);
				else if (nodeName.equalsIgnoreCase("Abstract"))
					abstractDescription = 
WMT_XMLParser.simpleElementParser((Element) child);
				else if (nodeName.equalsIgnoreCase("StyleURL"))
					url = WMT_XMLParser.parseUrl((Element) 
child);
				else if (nodeName.equalsIgnoreCase("LegendURL"))
					legend = new LegendURL(child);

			}
			child = child.getNextSibling();
		}

		if (name == null)
			throw new CapabilitiesParseException(
				"section \"" + element.getNodeName() + "\" is 
missing section \"Name\"");

		if (title == null)
			throw new CapabilitiesParseException(
				"section \"" + element.getNodeName() + "\" is 
missing section \"Title\"");

	}

	/**
	 * Dumps a text representation of this Style to the specified stream
	 * for dubugging purposes.<P>
	 *
	 * @param stream where to send the output<P>
	 * @param tab the String to use to indent each line of the output<P>
	 */
	public void dumpToStream(PrintStream stream, String tab) {
		Iterator i;

		stream.println(tab + "Style:");
		tab = tab + "    ";
		stream.println(tab + "Name: " + name);
		stream.println(tab + "Title: " + title);
		stream.println(tab + "Abstract: " + abstractDescription);
		stream.println(tab + "URL: " + url);
	}

	/**
	 * Returns a human-readable description of this Style, or null if none
	 * was provided.
	 * @return a human-readable description of this Style, or null if none
	 * was provided
	 */
	public String getAbstract() {
		return abstractDescription;
	}

	/**
	 * Returns a default Style that is valid for all {@link Layer}s during a
	 * {@link Server#getMap getMap} request.<P>
	 *
	 * @return a default Style that is valid for all {@link Layer}s during a
	 * {@link Server#getMap getMap} request<P>
	 * 
	 * 
**********************************************************************
	 * 2002-03-05 David Lewis <dlewis@pfc.forestry.ca>
	 * I suspect that this static method is used by the GeoExplore client 
and
	 * server to specify that the default Style is being requested. 
According
	 * to the OCG specification (GC 01-068r3, section 7.2.3.4), the default
	 * Style is requested with a null value (as in "STYLE="). With WMT MS
	 * Capabilities 1.1.0 and later, a Style object has two new elements 
	 * added: LegendURL and StyleSheetURL. This static method may need to 
be 
	 * refactored/modified to accomodate these changes.
	 * 
**********************************************************************
	 */
	public static Style getDefaultStyle() {
		if (defaultStyle == null)
			defaultStyle = new Style("default", "default", null, 
null);

		return defaultStyle;
	}

	/**
	 * Returns the name of this Style.
	 * @return the name of this Style
	 */
	public String getName() {
		return name;
	}

	/**
	 * Returns a human-readable title for this Style.
	 * @return a human-readable title for this Style
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Returns a URL providing information about this Style, or null if none
	 * was provided.
	 * @return a URL providing information about this Style, or null if none
	 * was provided
	 */
	public URL getUrl() {
		return url;
	}

	public LegendURL getLegend() {
		return legend;
	}

	/**
	 * The equals compares objects based only on the name attribute as 
described
	 * in the OGC Web Map Service Implementation Specification, verion 
1.1.1 
	 * (OGC 01-068r3), section 7.1.4.5.4
	 * 
	 * Style declarations are inherited by child Layers.  A child shall not 
	 * redefine a Style with the same Name as one inherited from a parent.  
	 * A child may define a new Style with a new Name that is not available 
for 
	 * the parent Layer.
	 *  
	 * @see Object#equals(Object)
	 */
	public boolean equals(Object obj) {
		boolean equals = false;
		if(obj != null && obj instanceof Extent) {
			equals = this.name.equals(((Extent)obj).getName());
		}
		
		return equals;		
	}


	/**
	 * Returns a human-readable title for this Style.
	 * @return a human-readable title for this Style
	 */
	public String toString() {
		return "Style [Name: " + getName() + ", Title: " + getTitle() + 
			", URL: " + getUrl() + "]";
	}

}
Is this problem reproducible for you?
I have reproduced this bug at least six times, including after closing and 
restarting the Eclipse IDE. The most recent time I reproduced this bug, the IDE 
hung, with no dialog appearing ... after 3 minutes I killed the process. 

The hang occurs shortly after the auto activation for Javadoc code completion. 
When I type "{@link " before the word "According", the IDE no longer responds 
to any keyboard or mouse input. I can type "{@link " in many other places 
within this and other documents with no problem. I am use build 20020214.
Created attachment 442
Java Source: org.nfis.cubewerx.wmt.Style
I have also reproduced the behavior (erimurph@pfc.forestry.ca)  described by my 
collegue David Lewis on my computer using the same project. Upon further 
investigation the hang on line 39 position 67 seems to occur regardless of what 
text follows the {@link.  In other words after typing {@link<space> the hang 
occurs regardess of the text that follows.  You must let the suggestion box pop 
up after typing {@ then continue typing link.
When reproducing the error, here's the information added to the log file 
(\eclipse\workspace\.metadata\.log):

Log: Thu Mar 07 10:30:07 PST 2002
1 org.eclipse.core.resources 4 Unhandled exception caught in event loop.
Log: Thu Mar 07 10:30:07 PST 2002
4 org.eclipse.ui 0 Failed to execute runnable (java.lang.OutOfMemoryError)
org.eclipse.swt.SWTException: Failed to execute runnable 
(java.lang.OutOfMemoryError)
	at org.eclipse.swt.SWT.error(SWT.java:1887)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages
(Synchronizer.java:96)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:1390)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1208)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:788)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:771)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:777)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:319)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.Main.main(Main.java:362)
Log: Thu Mar 07 10:30:07 PST 2002
1 org.eclipse.core.resources 4 *** Stack trace of contained exception ***
Log: Thu Mar 07 10:30:07 PST 2002
4 org.eclipse.ui 0 java.lang.OutOfMemoryError
java.lang.OutOfMemoryError
I couldn't reproduce it with 20020528.
Can you check if this is still a problem?
I cannot reproduce this bug using the 20020425 build. I haven't tested it using 
the 20020528 build. I think we can consider this bug fixed now! Thanks!


Inserting javadoc "{@link ..." causes OutOfMemoryError



108856 

108856 

108856 