I work on the EJB tooling team for WSAD.  We have a need to add behavior to the 
Java editor in the form of set of menu actions for a selected method.  We also 
want to provide additional image overlays for a method and we need to be able 
to determine when the overlay and which one should be added to each method.  
The last request that we have is a means to force the outline to refresh on our 
terms.  This is needed because our new overlays our determined using our own 
Java Mof model within WSAD and it sends events when it re-reflects a Java 
type.  This doesn't necessarily correlate with the JDT events.

In V1 of Eclipse, we were told that this would not be possible and the only way 
to get this behavior would be to have our own Java editor that could override 
the basic behavior of the existing Java editor.  So we started by overriding 
the CompilationUnitEditor.  This was fine but we needed to override some of the 
behavior on the JavaOutlinePage.  This is where the problems began because the 
JavaOutlinePage is package visibility.  This meant that I had to copy the class 
before I could subclass it.  Since I had to copy the outline page I now have to 
copy the CompilationUnitEditor and the JavaEditor superclass because the 
outline page field type has changed.
In Eclipse V2, I no longer need to override the JavaOutlinePage class in order 
to add the menu actions because there is the new extension point; however, I 
still need to override it to get my own JavaElementLabelProvider.
I had to copy and override the JavaElementLabelProvider because the fields were 
protected and I needed to override them.  Also, the JavaElementImageProvider 
had to be copied and subclassed because some private methods had to be 
overriden.  I also had to copy te JavaEditorErrorTickUpdater and the 
SurroundWithTryCatchAction since they have the JavaEditor passed in the 
constructor and I had to copy it.
So as you can see, there gets complicated very quickly just to do a simple 
thing.  Ideally, we would like a mechanism to provide additional overlays for 
the selected item as well as a mechanism to force a refresh on the outline 
view.  The other option would be to make it easier for us to override behavior 
on the JavaEditor so we do not need to copy so many classes.  The coping of 
classes is causing more other problems with translated strings as well since 
they are not exported in the NL fragments.

I can provide a JAR with the copied Java classes (note that I copied the 
classes and changed them enough just so I could then subclass them to add my 
own behavior).

I work on the EJB tooling team for WSAD.  We have a need to add behavior to the 
Java editor in the form of set of menu actions for a selected method.  We also 
want to provide additional image overlays for a method and we need to be able 
to determine when the overlay and which one should be added to each method.  
The last request that we have is a means to force the outline to refresh on our 
terms.  This is needed because our new overlays our determined using our own 
Java Mof model within WSAD and it sends events when it re-reflects a Java 
type.  This doesn't necessarily correlate with the JDT events.

In V1 of Eclipse, we were told that this would not be possible and the only way 
to get this behavior would be to have our own Java editor that could override 
the basic behavior of the existing Java editor.  So we started by overriding 
the CompilationUnitEditor.  This was fine but we needed to override some of the 
behavior on the JavaOutlinePage.  This is where the problems began because the 
JavaOutlinePage is package visibility.  This meant that I had to copy the class 
before I could subclass it.  Since I had to copy the outline page I now have to 
copy the CompilationUnitEditor and the JavaEditor superclass because the 
outline page field type has changed.
In Eclipse V2, I no longer need to override the JavaOutlinePage class in order 
to add the menu actions because there is the new extension point; however, I 
still need to override it to get my own JavaElementLabelProvider.
I had to copy and override the JavaElementLabelProvider because the fields were 
protected and I needed to override them.  Also, the JavaElementImageProvider 
had to be copied and subclassed because some private methods had to be 
overriden.  I also had to copy te JavaEditorErrorTickUpdater and the 
SurroundWithTryCatchAction since they have the JavaEditor passed in the 
constructor and I had to copy it.
So as you can see, there gets complicated very quickly just to do a simple 
thing.  Ideally, we would like a mechanism to provide additional overlays for 
the selected item as well as a mechanism to force a refresh on the outline 
view.  The other option would be to make it easier for us to override behavior 
on the JavaEditor so we do not need to copy so many classes.  The coping of 
classes is causing more other problems with translated strings as well since 
they are not exported in the NL fragments.

I can provide a JAR with the copied Java classes (note that I copied the 
classes and changed them enough just so I could then subclass them to add my 
own behavior).
Support for decorating images is provided via so called Decorators by the 
platform UI (Nick I couldn't find the extension point documentation, can you 
pls help out with details/examples).


BTW. A "process" comment in Bugzilla the priority field is owned by the 
developers please use the severity field to indicate how important this is for 
you.
I looked at the Dectorator extension point and there is a chance that I could 
use this but the LabelProvider used in the JavaOutlinePage is not a 
DecoratingLabelProvider.  This is what ties into this extension point.  The 
PackageExplorerPart does setup a LabelProvider that is a DecoratingLabelProvider 
(see line 298).  If the JavaOutlinePage used a DecoratingLabelProvider, I might 
be able to use this extension point.
The extension point doc is in 
eclipse\plugins\org.eclipse.ui\doc\decorators.html.
The interface to implement is org.eclipse.jface.viewers.ILabelDecorator.

For triggering refreshes on views using decorators, fire events to the event 
listeners registered on the ILabelDecorator.  
To simplify the implementation, you can subclass LabelProvider.
See also LabelProviderChangedEvent and LabelProvider.fireLabelProviderChanged.
The two constructors on LabelProviderChangedEvent handle the two different 
refresh cases: full refresh vs. update a single element.

I was wondering when I could expect to find a driver that has the 
JavaOutlinePage using a DecoratingLabelProvider?  We need this in order to stop 
copying the JDT classes.
We could not do it for the M3 milestone. It will be in for the next milestone 
M4 (the milestone list hasn't been updated yet).

The plan is to add decorator support to all Java views (type hierarchy, browser 
views). The outline view has the highest priority so we will start with this 
one.
*** Bug 10237 has been marked as a duplicate of this bug. ***
Decorator support is in 0319


WSAD Request to open Java editor framework



Fixed Bug 418919 - [1.8][compiler][internal] Remove boolean forcing creation of annotated bindings. 

Bug 38919 - context-menu "Show in Package Explorer" [Scrapbook] 

bug 38919 - context-menu "Show in Package Explorer" [Scrapbook] 

bug 38919 - context-menu "Show in Package Explorer" [Scrapbook] 

Bug 198919 [reorg] Test failure in MoveTest in N20070805-0010 

Fixed bug 189198: [spell checking] Spell checker mis-flagging correctly spelled "Initially" 

releasing patches by Susan Franklin - Bug 89197 [Undo] - Warning/prompting usability issues 

Released Susan's patches to fix bug 89197: [Undo] - Warning/prompting usability issues 

Released modified patches from Susan to fix bug 89197: [Undo] - Warning/prompting usability issues 