Build 20020409

Create the following CU

public class QuickFixTest {
	public void foo(float f) {
		foo(bar());
	}

	private void bar() {
	}
}

- save it. You get one compiler error and a squiggly under foo
- delete bar. You get two squigglies.
- quick fix bar (e.g. create method bar)

Observe: you still have an error on method invocation foo although it got fixed 
by created method bar. You have to save to remove that error two.

Build 20020409

Create the following CU

public class QuickFixTest {
	public void foo(float f) {
		foo(bar());
	}

	private void bar() {
	}
}

- save it. You get one compiler error and a squiggly under foo
- delete bar. You get two squigglies.
- quick fix bar (e.g. create method bar)

Observe: you still have an error on method invocation foo although it got fixed 
by created method bar. You have to save to remove that error two.
This would require adding state in the problem marker to tag it as quick fixed. 
In this way at least the editor could filter them out. The problem markers 
themselves are owned by JDT Core and there is currently no API to remove them, 
but if needed it would make sense to add this support. Carboned Philippe for 
comment.

The current behavior is that we don't take the error icon away but overlay 
compile time problems with temporary problems. This way the user sees quick-
fixable problems and no squigglies when a problem is fixed. We also perform 
problem checking on focus gain. Build F2.
Discarding Java problems when reconciling would be dangerous, since you would 
need to recreate them in case user reverts to previous state... especially when 
autobuild is off.




Quick Fix: build problem stays although fixed by quick fix

