[org.eclipse.jdt.core.tests.compiler.regression.AmbiguousMethodTest._test009()]

Similar error message though, but different for the following code:

import java.util.*;
public class T {
   void test() {
   	OrderedSet<String> os = null;
   	os.add("hello");
   	OrderedSet<Integer> os2 = null;
   	os2.add(1);
   }
}interface OrderedSet<E> extends List<E>, Set<E> { boolean add(E o); }

JDT Core reports two errors and two warnings [b74 build]

Errors for the last line:
Multiple markers at this line
	- Duplicate methods named parallelStream with the parameters () and () are inherited from the types Set<E> and 
	 List<E>
	- implements java.util.List<E>.add
	- Duplicate methods named stream with the parameters () and () are inherited from the types Set<E> and List<E>

Warnings for os(2).add lines:
Null pointer access: The variable os can only be null at this location
Null pointer access: The variable os2 can only be null at this location

Reference compiler reports:
$/lambda-8-b74-windows-x64-21_jan_2013/jdk1.8.0/bin/javac.exe T.java
T.java:10: error: interface OrderedSet<E> inherits unrelated defaults for parallelStream() from types List and Set
}interface OrderedSet<E> extends List<E>, Set<E> {
 ^
  where E is a type-variable:
    E extends Object declared in interface OrderedSet
1 error


$lambda-8-b74-windows-x64-21_jan_2013/jdk1.8.0/bin/javac.exe -version
javac 1.8.0-ea

[org.eclipse.jdt.core.tests.compiler.regression.AmbiguousMethodTest._test009()]

Similar error message though, but different for the following code:

import java.util.*;
public class T {
   void test() {
   	OrderedSet<String> os = null;
   	os.add("hello");
   	OrderedSet<Integer> os2 = null;
   	os2.add(1);
   }
}interface OrderedSet<E> extends List<E>, Set<E> { boolean add(E o); }

JDT Core reports two errors and two warnings [b74 build]

Errors for the last line:
Multiple markers at this line
	- Duplicate methods named parallelStream with the parameters () and () are inherited from the types Set<E> and 
	 List<E>
	- implements java.util.List<E>.add
	- Duplicate methods named stream with the parameters () and () are inherited from the types Set<E> and List<E>

Warnings for os(2).add lines:
Null pointer access: The variable os can only be null at this location
Null pointer access: The variable os2 can only be null at this location

Reference compiler reports:
$/lambda-8-b74-windows-x64-21_jan_2013/jdk1.8.0/bin/javac.exe T.java
T.java:10: error: interface OrderedSet<E> inherits unrelated defaults for parallelStream() from types List and Set
}interface OrderedSet<E> extends List<E>, Set<E> {
 ^
  where E is a type-variable:
    E extends Object declared in interface OrderedSet
1 error


$lambda-8-b74-windows-x64-21_jan_2013/jdk1.8.0/bin/javac.exe -version
javac 1.8.0-ea
Stephan, please take a look to see if our additional error is justified. TIA
Stephan: Please note that this test has been disabled as part of bug 399452 and hence once this is fixed, re-enable the same.
(In reply to comment #0)
> [org.eclipse.jdt.core.tests.compiler.regression.AmbiguousMethodTest.
> _test009()]
> 
> Similar error message though, but different for the following code:
> 
> import java.util.*;
> public class T {
>    void test() {
>    	OrderedSet<String> os = null;
>    	os.add("hello");
>    	OrderedSet<Integer> os2 = null;
>    	os2.add(1);
>    }
> }interface OrderedSet<E> extends List<E>, Set<E> { boolean add(E o); }


Isn't this an example of valid Java 7 code rendered invalid by Java 8 ?
The error is justified by this para in the summary of Part H:

  It is a compile-time error if I or C inherits a default method whose signature is override-equivalent with another method inherited by I. This is the case whether the other method is abstract or not. 
  
Srikanth, do you think we should give a more specific message, like javac does, by mentioning that a default method is involved in the conflict?
(In reply to comment #4)

> Srikanth, do you think we should give a more specific message, like javac
> does, by mentioning that a default method is involved in the conflict?

I think our message is clear enough, so it is your call, remember to re-enable
the test as you close, TIA.
Released for BETA_JAVA8 via commit c06e07ca77c0b109ce7d4e6c3f60180a3777bc7d:

Diversify the test into three scenarios:
* original test at 1.7-
* same input at 1.8 on 1.8 JRE: expect new error
* on 1.8 JRE: disambiguate by new methods in OrderedSet


[1.8] Different error message from the reference compiler



Bug 399567 - [1.8] Different error message from the reference compiler 