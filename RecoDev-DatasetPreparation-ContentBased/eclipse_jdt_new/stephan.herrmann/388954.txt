Default methods have no specific modifier in the class file format, yet the compiler needs to know when a method is a default method.

I'm not 100% sure how compilation for 1.7- should handle any default methods it finds. 
At those levels the compiler doesn't expect any non-abstract methods in interfaces. 
So maybe we should add the AccAbstract flag for default methods in 1.7-, but I wouldn't know, where this is specified.

Default methods have no specific modifier in the class file format, yet the compiler needs to know when a method is a default method.

I'm not 100% sure how compilation for 1.7- should handle any default methods it finds. 
At those levels the compiler doesn't expect any non-abstract methods in interfaces. 
So maybe we should add the AccAbstract flag for default methods in 1.7-, but I wouldn't know, where this is specified.
(In reply to comment #0)
> Default methods have no specific modifier in the class file format, yet the
> compiler needs to know when a method is a default method.

This may change, as the current thinking in the EG is to treat default
as a modifier and allow it syntactically in the same place as modifiers.
I don't have any information as to how it would be persisted though.

> 
> I'm not 100% sure how compilation for 1.7- should handle any default methods
> it finds. 
> At those levels the compiler doesn't expect any non-abstract methods in
> interfaces. 
> So maybe we should add the AccAbstract flag for default methods in 1.7-, but
> I wouldn't know, where this is specified.

Since your investigation of how javac behaves indicates that javac is 
automatically adding the AccAbstract flag, I would say this is the right
course of action for us also.

On a similar note, when it came to generics we used to discard generic
signature information from 1.5 binaries if the source level is 1.4, but
that led to a slew of bugs: See (among others)

https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850
https://bugs.eclipse.org/bugs/show_bug.cgi?id=330537
https://bugs.eclipse.org/bugs/show_bug.cgi?id=329593
https://bugs.eclipse.org/bugs/show_bug.cgi?id=329589
https://bugs.eclipse.org/bugs/show_bug.cgi?id=329588
https://bugs.eclipse.org/bugs/show_bug.cgi?id=329584
https://bugs.eclipse.org/bugs/show_bug.cgi?id=186565

So if we force inject the AccAbstract flag on all interface
methods while compiling for 1.7-, do all problems go away ? 
In particular, does https://bugs.eclipse.org/bugs/show_bug.cgi?id=388800
require any further work at all ?
Resolved via commit dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a
- in 1.7- modes all interface methods are now considered as abstract
- additionally, when overriding a default method AccImplementing is now used, so that reporting for these cases is covered by OPTION_ReportMissingOverrideAnnotationForInterfaceMethodImplementation.

With this implementation, the change from bug 388800 comment 1 (commit 4da3045d875134bb37de1ca00076288feb78d111) had to be reverted and I started walking in the opposite direction instead. As a result this patch contains the major leg work for bug 388800, too, do be documented there.


[1.8][compiler] detect default methods in class files



Bug 388954 - [1.8][compiler] detect default methods in class files - incl. revert of one patch from bug 388800 - replace with new strategy to fix-up tests by adding stub impls. 