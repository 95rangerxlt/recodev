This code is rejected, while Javac allows:

public class X {
	interface I<U extends List<X>, V> {
		V foo(U p);
	}
	public void main() {
		I<List<X>, Object> fi = p -> p.toArray(new X[] {});
	}
}

This appears to be a recent regression.

This code is rejected, while Javac allows:

public class X {
	interface I<U extends List<X>, V> {
		V foo(U p);
	}
	public void main() {
		I<List<X>, Object> fi = p -> p.toArray(new X[] {});
	}
}

This appears to be a recent regression.
Indeed, this compiles with   

Eclipse Java Development Tools Patch for Java 8 Support (BETA)	1.0.0.v20140128-0105_BETA_JAVA8	org.eclipse.jdt.java8patch.feature.group	Eclipse.org

The error message looks bizarre: On the theory that such cases should have
a simple fix somewhere I'll take a look first.

"Type mismatch: cannot convert from X[] to Object"
Disabled junit available here: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=733b86db2327db90691ce417f854923bab36a366

inferInvocation type returns null for this.solutionsPerTargetType.get(targetType);
Thanks for the prepared test :)

I have one place in the inference implementation where I need to test if a type S has a given class or interface type T as its super type. Here I forgot to consider the special case of S being an array and T being j.l.Object.

Fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=12bb3007708f198ce96e1ee7074598576067e3f5


[1.8] Eclipse rejects valid type conversion in lambda



Bug 426965 - [1.8] Eclipse rejects valid type conversion in lambda 

Disabled junit for bug 426965 