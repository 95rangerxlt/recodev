This was first proposed in Bug 331649 comment 32: 
When dereferencing a @Nullable field the safest solution is to assign the field to a local variable before null-checking and dereferencing.

The quick fix does exactly that.

My implementation was first attached to bug 337977 comment 18 but I think it deserves a bug on its own.

This was first proposed in Bug 331649 comment 32: 
When dereferencing a @Nullable field the safest solution is to assign the field to a local variable before null-checking and dereferencing.

The quick fix does exactly that.

My implementation was first attached to bug 337977 comment 18 but I think it deserves a bug on its own.
Created attachment 226058
proposed implementation with tests

Here's my implementation, which is based on attachment 217460 (from bug 337977).
These bits were published as part of the beta feature, and have seen some field use already.

The patch includes a small fix for existing quick fixes, hope it's OK to include here:
- fix wrong label<->operation association (see bug 337977 comment 36).



During cleanup I made the following improvements over attachment 217460:
1. make the quick fix applicable to more situations, not just field *dereference*,
  but also usage of a @Nullable/unknown field in a context where @NonNull is required
2. handle scoping of existing local variables
3. internal code refactoring

Item 3. is best explained by an example:

class X {
  @Nullable X other;
  String f;
  void Object foo() {
      String myF = this.other.f; // warning here: dereference @Nullable 'other'
      System.out.println(myF);
  }
}

Previously, the quick fix would only wrap the current statement:
  void Object foo() {
      X other1 = this.other;
      if (other1 != null) {
        String myF = other1.f;
      } else {
         // TODO handle null value
      }
      System.out.println(myF);
  }
which obviously breaks the usage of myF further down.

My new implementation solves this like this: IFF the dangerous field dereference is inside the initialization of a local variable, all subsequent statements of the enclosing block are moved into the then part of the new if:
  void Object foo() {
      X other1 = this.other;
      if (other1 != null) {
        String myF = this.other.f;
      } else {
         // TODO handle null value
         System.out.println(myF);
      }
  }
If not changing the initialization of a local declaration, the change region is kept small by wrapping only the offensive statement.

The patch includes tests which also demonstrate the various situations handled by the quick fix.
*** Bug 383540 has been marked as a duplicate of this bug. ***
Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=9f5838bea1419b66d88c7e62d7617e995b5aa58e


[quick fix] Extract field access to checked local variable



Fixed bug 398995: [quick fix] Extract field access to checked local variable 