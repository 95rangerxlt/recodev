During initial experiments regarding bug 458200 I learned that ClassFileEditor does not at all participate in quick assists (for obvious reasons).

Yet, in that other bug it would be awesome if we could indeed use the accustomed gesture of quick assist for adding external annotations to library classes.

I have some experimental changes in my workspace that succeed in invoking the QuickAssistProcessor on a ClassFileEditor:

ClassFileEditor.createActions():
- create a variant of the QUICK_ASSIST action with runsOnReadOnly=true

ClassFileEditor.createJavaSourceViewer():
- adjust signature to override the corresponding super method, 
  so we actually get invoked
  FIXME: is that signature mismatch a bug? The method is currently unused!
- in the anonymous JavaSourceViewer override canDoOperation and
  doOperation to handle QUICK_ASSIST (similar to CompilationUnitEditor)

JavaCorrectionProcessor.computeQuickAssistProposals():
- add an "else" to the block guarded by "if (model != null ..."
  - fetch the IClassFile
  - from the IClassFile obtain a ClassFileWorkingCopy
  - using that working copy create an AssistContext
  - proceed as the block above

The part regarding the ClassFileWorkingCopy poses a problem: I could not find any API in JDT/Core that would allow this (my experiments had to set discouraged access to warning for this reason). BTW, ITypeRoot.getWorkingCopy() is close but no cigar.

Other than that the experiment was quite smooth and successful up-to the point mentioned above: invoking QuickAssistProcessor.hasAssists() - just we didn't find any applicable assists :) but that would then be the job of bug 458200.

During initial experiments regarding bug 458200 I learned that ClassFileEditor does not at all participate in quick assists (for obvious reasons).

Yet, in that other bug it would be awesome if we could indeed use the accustomed gesture of quick assist for adding external annotations to library classes.

I have some experimental changes in my workspace that succeed in invoking the QuickAssistProcessor on a ClassFileEditor:

ClassFileEditor.createActions():
- create a variant of the QUICK_ASSIST action with runsOnReadOnly=true

ClassFileEditor.createJavaSourceViewer():
- adjust signature to override the corresponding super method, 
  so we actually get invoked
  FIXME: is that signature mismatch a bug? The method is currently unused!
- in the anonymous JavaSourceViewer override canDoOperation and
  doOperation to handle QUICK_ASSIST (similar to CompilationUnitEditor)

JavaCorrectionProcessor.computeQuickAssistProposals():
- add an "else" to the block guarded by "if (model != null ..."
  - fetch the IClassFile
  - from the IClassFile obtain a ClassFileWorkingCopy
  - using that working copy create an AssistContext
  - proceed as the block above

The part regarding the ClassFileWorkingCopy poses a problem: I could not find any API in JDT/Core that would allow this (my experiments had to set discouraged access to warning for this reason). BTW, ITypeRoot.getWorkingCopy() is close but no cigar.

Other than that the experiment was quite smooth and successful up-to the point mentioned above: invoking QuickAssistProcessor.hasAssists() - just we didn't find any applicable assists :) but that would then be the job of bug 458200.
Created attachment 250165
Experimental changes

Changes as described above
Created attachment 250285
improved patch

I found that the problems with ClassFile.getWorkingCopy() can be fixed in JDT/Core (bug 458577), so no new API is needed. However, the resulting ClassFileWorkingCopy doesn't seem to be fully supported in all scenarios, so we must be sure to close / remove it on all paths.

Yet, for simple scenarios in bug 458200 this patch works fine already.
I would have to take a closer look, but out of the box, I'd say we don't want to go and open up the class file editor in such a way.
(In reply to Dani Megert from comment #3)
> I would have to take a closer look, but out of the box, I'd say we don't
> want to go and open up the class file editor in such a way.

Is your reluctance due to technical reasons or for UX principles?

Do you have another idea, what gestures we could offer for adding external annotations while looking at the library's source code?

Note, that in my draft implementation I'm explicitly avoiding all "normal" quick assists on a class file editor, I just re-use the existing framework.
With a little code clean up this could be made into a ClassFileAssistProcessor to completely separate both engines.
Created attachment 250323
patch v3

Just in case the worries were technically motivated, here's a small update:

I realize that IClassFile.getWorkingCopy() is a "dangerous" API, I see that handling of ClassFileWorkingCopy is not fully tested for all scenarios and may cause hick-ups here and there. Some have been identified in bug 458577 (I've proposed simple fixes).

The updated patch fixes a potential leak of ClassFileWorkingCopy into after-life (simply by paying respect to the rule that getWorkingCopy() and discardWorkingCopy() must always match).

On top of this patch, my draft from bug 458200 behaves well, which is a significant piece of information, given that the entire business of external null annotations is sensitive to stale Java model caches etc.

The updated patch even contains a (commented) snippet to completely avoid the new code path if annotation-based null analysis is disabled in the current project, if so desired.

If you have other reasons please let me know.
We'd have to add lot more things to the Class File editor if we want to support Quick Assists (light bulb, menu, context menu etc.). For 80% of the people that action will do nothing.

We'd have to protect all our Quick Assists against not being evaluated at all in this unexpected new scenario. If you e.g. press Ctrl+1 in the CFE with your patch, it shows 'Rename in File and if you have 'org.eclipse.jdt.ui.tests'  in your workspace it will tgry to evaluate org.eclipse.jdt.ui.examples.MyQuickAssistProcessor.getStringWrappedProposal(IInvocationContext, List) and throw an OOME.

This will not help when the source is not attached. A better solution might be to add an action on the Java elements, so that one can add the external annotations via Outline via a well-named action.


NOTE: With your last patch the Overview ruler is gone.
(In reply to Dani Megert from comment #6)
> We'd have to protect all our Quick Assists against not being evaluated at
> all in this unexpected new scenario. If you e.g. press Ctrl+1 in the CFE
> with your patch, it shows 'Rename in File ...

Shouldn't happen, and actually doesn't happen with my patch in bug 458200 ...

> ... and if you have
> 'org.eclipse.jdt.ui.tests'  in your workspace it will tgry to evaluate
> org.eclipse.jdt.ui.examples.MyQuickAssistProcessor.
> getStringWrappedProposal(IInvocationContext, List) and throw an OOME.

Avoiding other assist processors is a bit trickier, agreed.
 
> This will not help when the source is not attached.

I call this an advantage, actually: If you'd attach annotations just based on what you see in the outline, you'd be flying totally blind. You need to inspect the sources to analyse which annotations are safe to add (javadoc would be a middle ground...).

> A better solution might
> be to add an action on the Java elements, so that one can add the external
> annotations via Outline via a well-named action.

Sorry, but no: in order to work with type annotations, we need to point to an AST node. Outline won't allow me to select, eg., "type bound of the 2nd type argument of the third parameter". Even just pointing to a particular parameter is "difficult" using just the Java model.


Admittedly, my patch isn't bullet proof, it's meant as a demonstration, not the final product.


What other gestures can we think of that directly relate to nodes in the AST?

Would it improve if we just use a different key binding (while still in the background re-using part of the quick assist engine)?
(In reply to Stephan Herrmann from comment #7)
> Would it improve if we just use a different key binding (while still in the
> background re-using part of the quick assist engine)?

At least a different name & key binding would avoid the expectation that this feature comes with support like light bulb etc.

I still like Ctrl-1 for this, but could be convinced otherwise ...
I see your point regarding the source.

Having a separate command would be acceptable for me. We could even use Ctrl+1 as shortcut.
Changing the title to reflect the change in strategy.
Created attachment 251129
overhauled patch

This patch introduces a new command which on the one hand is well separated from quick assist, while still leveraging much of the proposal infrastructure.

Key points of integration:

- new action AnnotateClassFileAction
  - new operation constant in JavaSourceViewer, this is (the only) new API.
  - new id in IJavaEditorActionDefinitionIds
  - wiring in plugin.xml: command, context, key
  - wiring in ClassFileEditor:
    - setAction, add to context menu, activate the new context
    - enable local class JavaSourceViewer by fixing a signature bug
      - handle the new operation here

- a single processor, ExternalNullAnnotationQuickAssistProcessor, offering a fixed set of proposals (if applicable) - does not invoke any contributed processors.
  - integrated from JavaCorrectionAssistant based on the type of editor.
    This also avoids that a ClassFileEditor has a regular assist processor
    (extra safety).

Presentation in the UI: mostly re-using proposal popups etc. as-is.
- use '@' icon
- show caption "Change external annotations", I hope this is not considered as abuse of the popup's caption. It allows me to use shorter labels for the individual proposals.

Bumping up the bundle version, since adding one API constant.


Additionally, the patch contains the ExternalNullAnnoatationChangeProposals that addresses the dependent bug 458200.
Let me know if separate patches for these two bugs are preferred.


I'm confident that this creates the desired separation between assists working on a CompilationUnitEditor, and the new command working on a ClassFileEditor.

Let me know if you want to do a detailed review. Otherwise my idea is to continue testing, add automated tests, and release some time next week.
Answering specific concerns:

(In reply to Dani Megert from comment #6)
> We'd have to add lot more things to the Class File editor if we want to
> support Quick Assists (light bulb, menu, context menu etc.). For 80% of the
> people that action will do nothing.

No light bulb (no need)

New command is added to context menu, but not to "edit" menu

I'm working on additional protection, like: if null annotations are not enabled, the new processor will do a quick exit. I already implemented this in canAssist(), but I just noticed that this method is never called.
 
> We'd have to protect all our Quick Assists against not being evaluated at
> all in this unexpected new scenario. If you e.g. press Ctrl+1 in the CFE
> with your patch, it shows 'Rename in File and if you have
> 'org.eclipse.jdt.ui.tests'  in your workspace it will tgry to evaluate
> org.eclipse.jdt.ui.examples.MyQuickAssistProcessor.
> getStringWrappedProposal(IInvocationContext, List) and throw an OOME.

Resolved
 
> NOTE: With your last patch the Overview ruler is gone.

This still happens, I'm investigating.
Created attachment 251130
overhauled patch, overview ruler restored

(In reply to Stephan Herrmann from comment #12)
> > NOTE: With your last patch the Overview ruler is gone.
> 
> This still happens, I'm investigating.

Resolved.

The original code contains this:
  new JavaSourceViewer(parent, ruler, null, false, styles, store)

i.e. overviewRuler = null, showAnnotationsOverview = false

This code was never reached due to the mentioned signature bug (failure to override). 

Fixed in the updated patch.
(In reply to Stephan Herrmann from comment #11)
>   - wiring in ClassFileEditor:
>     - enable local class JavaSourceViewer by fixing a signature bug

Browsing the history, I found that ClassFileEditor.createJavaSourceViewer() was implemented to fix bug 19445. It seems this implementation was never called since commit f2db10c91328da519181230c2f744867ca4fb6b1 (2004-04-20, no bug#).

To witness: configure dynamic help to be shown in an infopopup, open a JavaEditor, open dynamic help (F1, Shift-F1 .. depending on your platform), then while the infopopup is showing, ctrl-hover over an identifier that has some relevant options and observe:
- CompilationUnitEditor: nothing (good)
- ClassFileEditor: second popup appears, may overlap the infopopup.

OK, the original bug 19445 was about regular hovers, which seem to be blocked by some other means now, but still the behavior is inconsistent.

I wouldn't have bothered, normally, but this confirms that correcting the signature of ClassFileEditor.createJavaSourceViewer() is desirable, indeed (included in my patch).
(In reply to Stephan Herrmann from comment #14)
> It seems this implementation was never called since 
> commit f2db10c91328da519181230c2f744867ca4fb6b1 (2004-04-20, no bug#).

Tiny correction: already commit a00aec3f122ead992ef48aceec40c62173a465c6 broke the overriding (2003-01-27 "unify Class and CU editor") 

Apparently not super-important if nobody noticed in 12 years :)
Released for 4.5 M6 via http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=a84e33bf4d28ab3cbe043bca574f66a36d35ca24

The commit also contains the main functionality for bug 458200 (see there for details).


Offer new command "Annotate" on ClassFileEditor



Bug 458200, bug 458201: fixed typo in ExternalNullAnnoatationChangeProposals 

Bug 458201 - Offer new command "Annotate" on ClassFileEditor Bug 458200 - [null] "Annotate" proposals for adding external null annotations to library classes 