Seems to be a problem with both new and old inference schemes.

// -- X.java: 

import p.*;

public class X  {
    public static void main(String argv[]) {
        new B().foo(null, null);
    }
}
    

// B.java
package p;

class A {
}

public class B extends A {
    public <T extends A> void foo(T ... o) { }
}

If the Type parameter T were to be replaced directly by A, I get an error
as expected.

Seems to be a problem with both new and old inference schemes.

// -- X.java: 

import p.*;

public class X  {
    public static void main(String argv[]) {
        new B().foo(null, null);
    }
}
    

// B.java
package p;

class A {
}

public class B extends A {
    public <T extends A> void foo(T ... o) { }
}

If the Type parameter T were to be replaced directly by A, I get an error
as expected.
(In reply to Srikanth Sankaran from comment #0)
> Seems to be a problem with both new and old inference schemes.

Correction, 1.7- does give an error.
Stephan,

In Scope.computeCompatibleMethod:


			if (compatibilityLevel == VARARGS_COMPATIBLE) {
				TypeBinding varargsElementType = method.parameters[method.parameters.length - 1].leafComponentType();
				if (varargsElementType instanceof ReferenceBinding) {
					if (!((ReferenceBinding) varargsElementType).canBeSeenBy(this)) {
						return new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.VarargsElementTypeNotVisible);
					}
				}
			}
the PGMB comes out as: 

public transient void foo(null[]) 

It stays that way well into MessageSend.generateCode.

As a result, VarargsElementTypeNotVisible does not get checked. I don't yet
understand all the voodoo :), so I'll assign this one to you.
Regression test released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=c65347571547f67c860a6ef249183861500993de

that is GenericsRegressionTest.test426534(), remember to adjust the compliance
check at the top of the test, Thanks.
Quick guess: T is inferred as the null-type, which is
- a subtype of any reference type (incl. A :) )
- visible

So, what should we report? null is not visible? :)
(In reply to Stephan Herrmann from comment #4)
> Quick guess: T is inferred as the null-type, which is
> - a subtype of any reference type (incl. A :) )
> - visible

Given this example gets flagged in 1.7- by us and by JDK including 8, 
if there is a chain of reasoning per the new specification leading to 
null-type, we need to report this to Oracle since they flag this code 
as erroneous too.

But the need for the visibility check comes from having to box the
arguments into an array for which the concrete array type must be
visible. So I am inclined to think we have a real bug here,
(In reply to Srikanth Sankaran from comment #5)
> But the need for the visibility check comes from having to box the
> arguments into an array for which the concrete array type must be
> visible.

Interesting point. See what we are generating:

         8: anewarray     #19                 // class N

(attempt to generate "new null[]" ;-P )

Investigating
On investing how the null type could be offered as an inference solution I'm staring at these in 18.2.3:

"A constraint formula of the form ⟨S <: T⟩ is reduced as follows:
* ...
* ...
* Otherwise, if T is an inference variable, α, the constraint reduces to the bound S <: α.
* Otherwise, if S is the null type, the constraint reduces to true."

I have the constraint ⟨null <: T#0⟩, which does *not* reduce to true, because prior to testing for the null type we find that T is an inference variable.

Boom!

BTW: no other section mentions the null type, so this is the only rule that could possibly get the null out of our way (incl. the inverse case ⟨T <: null⟩ -> false).

Changing the order of checks (thus violating the spec) fixes the issue, I'm currently testing if it breaks anything else.
I've reported the issue to the EG list [1], changed the order of checks and all seems well; it even cleared up two funny deviations in error messages.

It's here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=31225f931c10340b8616c3f4ecc6725f368df84c

[1] http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2014-January/000494.html


[1.8][compiler] Accessibility of vararg element type not checked for generic methods.



Bug 426534 - [1.8][compiler] Accessibility of vararg element type not checked for generic methods. 

Test for Bug 426534 - [1.8][compiler] Accessibility of vararg element type not checked for generic methods. 