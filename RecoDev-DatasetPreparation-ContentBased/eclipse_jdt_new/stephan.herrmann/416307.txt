In this snipped:

// ===
import java.util.Map;

import org.eclipse.jdt.annotation.*;

abstract public class X<Y> implements Map<@NonNull String,Y> {
	void foo(X<Object> x) {
		Map<@NonNull String, Object> m1 = x; // OK
		Map<@Nullable String, Object> m2 = x; // NOK
	}
}
// ===

we should see one error at (NOK), but the compiler fails to see that X specifies
type parameter Map.K as @NonNull.

In this snipped:

// ===
import java.util.Map;

import org.eclipse.jdt.annotation.*;

abstract public class X<Y> implements Map<@NonNull String,Y> {
	void foo(X<Object> x) {
		Map<@NonNull String, Object> m1 = x; // OK
		Map<@Nullable String, Object> m2 = x; // NOK
	}
}
// ===

we should see one error at (NOK), but the compiler fails to see that X specifies
type parameter Map.K as @NonNull.
Currently, Statement#findNullTypeAnnotationMismatch() directly compares 
type parameter lists, but before comparing these:
  <Object>
  <@Nullable String, Object>
we should navigate to the super interface of X<Object>, which is
  Map<@NonNull String,Object>

Luckily, TypeBinding#findSuperTypeOriginatingFrom() provides exactly this functionality.
Once the compiler is no longer confused I find messages like these confusing for the user:

  Null type mismatch (type annotations): required 'Map<@Nullable String,Object>' but this expression has type 'X<Object>'

Where is the annotation mismatch??

Therefore, I'm adding more explanation if suitable:
  ...  corresponding supertype is 'Map<@NonNull String,Object>'

Now it is a bit easier to see why these don't match:
  required: 'Map<@Nullable String,Object>'
  provided: 'Map<@NonNull String,Object>'
Released for BETA_JAVA8 via commit af79dfe4ab6f88841082d7727b71d3b65b4f7778


[1.8][compiler][null] subclass with type parameter substitution confuses null checking



Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis - refactoring and cleanup (after bug 416307) 

Bug 416307 - [1.8][compiler][null] subclass with type parameter substitution confuses null checking 