In

@NonNull String[] s = new String[0];

the compiler complains that "Null type safety (type annotations): The expression of type 'String[]' needs unchecked conversion to conform to '@NonNull String []'". 

I think the compiler could be smart enough to recognize that this is an array of size '0' and thus, by construction, satisfies @NonNull String[]?

In

@NonNull String[] s = new String[0];

the compiler complains that "Null type safety (type annotations): The expression of type 'String[]' needs unchecked conversion to conform to '@NonNull String []'". 

I think the compiler could be smart enough to recognize that this is an array of size '0' and thus, by construction, satisfies @NonNull String[]?
makes sense, thanks.
New Gerrit change created: https://git.eclipse.org/r/60814
The first version of my change was a bit arbitrary, since a "new X[0]" could potentially conform to both "@NonNull X[]" AND "@Nullable X[]".

So generally assuming that it should always be read as "@NonNull X[]" may follow good intentions but will surprise those users really hard, who may need the opposite.

To avoid over-interpreting intentions I'm reducing my solution to only work when we know the expected type, i.e., within assignments (and field initialization) not for arguments of an invocation.

I hope that is good enough.

Released for 4.6 M4 via commit 48aaa503eb58e270f9afd7df4a85cb65e562a44f
I'll try as soon as it's available. Thank you.
Stephan, just to confirm, is this the expected behavior?


public class Snippet {
	@NonNull String[] s1 = new String[0]; // No warning
	public void handleIncidentBeforeCreate() {
		@NonNull String[] s = new String[0]; // Warning
	}
}


[compiler][null] Empty arrays should satisfy @NonNull Type[]



Bug 482247 - [compiler][null] Empty arrays should satisfy @NonNull Type[] 