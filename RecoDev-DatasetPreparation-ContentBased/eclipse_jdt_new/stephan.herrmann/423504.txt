While work in bug 400874 is reaching the first milestone, the new spec section mentioned in the bug title has not yet been implemented, partly for lack of test cases for this situation.

While work in bug 400874 is reaching the first milestone, the new spec section mentioned in the bug title has not yet been implemented, partly for lack of test cases for this situation.
Here's a test case:

public class X  {
  public static void main(String argv[]) {
    I<? extends Collection<String>> sorter = (List<String> m) -> { /* sort */ };
  }
} 

interface I<T> { 
  public void sort(T col);
}

ECJ complains about incompatible parameter (Javac, b116 allows this code).

Note this is also a problem for 'super'
I think the example in bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=420525
is also the same issue ?
@Srikanth, for implementing this part I will have to modify PTB.getSingleAbstractMethod(). Inside that method handling of wildcards seems to refer to some spec, but I couldn't find which. Is it safe if I *replace* that wildcard handling with an implementation for 18.5.3 or would that conflict with some other rules?

Do you recall which tests required that wildcard handling?
(In reply to Stephan Herrmann from comment #3)
> @Srikanth, for implementing this part I will have to modify
> PTB.getSingleAbstractMethod(). Inside that method handling of wildcards
> seems to refer to some spec, but I couldn't find which. Is it safe if I
> *replace* that wildcard handling with an implementation for 18.5.3 or would
> that conflict with some other rules?
> 
> Do you recall which tests required that wildcard handling?


The present spec reads:

The targeted function type is derived from the target type as follows:
If the target type is a wildcard-parameterized functional interface, or an intersection that induces a wildcard-parameterized
functional interface, and if the lambda expression has explicit parameter types P1, ..., Pn, then the targeted function type is the
function type of the inferred wildcard instantiation of T for P1, ..., Pn, as defined in 18.5.3

I think before 18.5.3 got introduced, there was a detailed in place specification
in its stead and the present code is implementing it. Yes, it can be safely
replaced as required.
(In reply to Srikanth Sankaran from comment #4)

> The present spec reads:
> 
> The targeted function type is derived from the target type as follows:
> If the target type is a wildcard-parameterized functional interface, or an
> intersection that induces a wildcard-parameterized
> functional interface, and if the lambda expression has explicit parameter
> types P1, ..., Pn, then the targeted function type is the
> function type of the inferred wildcard instantiation of T for P1, ..., Pn,
> as defined in 18.5.3
> 
> I think before 18.5.3 got introduced, there was a detailed in place
> specification
> in its stead and the present code is implementing it. Yes, it can be safely
> replaced as required.

From 0.6.1:

The function descriptor of a parameterized functional interface, F<A1...An>, where A1...An are type arguments (4.5.1), is derived as follows. Let P1...Pn be the type parameters of F; types T1...Tn are derived from the type arguments according to the following rules (for 1 ≤ i ≤ n):

If Ai is a type, then Ti = Ai.
If Ai is a upper-bounded wildcard ? extends Ui, then Ti = Ui.
If Ai is a lower-bounded wildcard ? super Li, then Ti = Li.
If Ai is an unbound wildcard ?, then if Pi has upper bound Bi that mentions none of P1...Pn, then Ti = Bi; otherwise, Ti = Object.


I think this part got replaced by 18.5.3, probably at 0.6.3 time under the
change log entry:

"Addressed a negative interaction of wildcards with derivation of a function 
type"
Sorry, I think I am confusing you more than helping. The code in PTB,
implemented the spec at the time of 0.6.1 - Yes.

I see two passages in the present spec:
----------
9.8:

The function type of a parameterized functional interface, F<A1...An>, where A1...An are type arguments (4.5.1), is derived as follows,
where P1...Pn are the type parameters of F with corresponding bounds B1...Bn.
If one of the type arguments, Ai, is a wildcard, and the corresponding type parameter bound, Bi, mentions one of P1...Pn, the function
type of F<A1...An> is undefined.
Otherwise, types T1...Tn are derived from the type arguments according to the following rules (for 1 ≤ i ≤ n):
If Ai is a type, then Ti = Ai.
If Ai is an unbound wildcard ?, then Ti = Bi.
If Ai is a upper-bounded wildcard ? extends Ui, then Ti = glb(Ui, Bi).
If Ai is a lower-bounded wildcard ? super Li, then Ti = Li.
Finally, the function type of F<A1...An> is the result of applying the substitution [P1:=T1, ..., Pn:=Tn] to the function type of interface
F.
--------

15.27.3:

The targeted function type is derived from the target type as follows:
If the target type is a wildcard-parameterized functional interface, or an intersection that induces a wildcard-parameterized
functional interface, and if the lambda expression has explicit parameter types P1, ..., Pn, then the targeted function type is the
function type of the inferred wildcard instantiation of T for P1, ..., Pn, as defined in 18.5.3.
Otherwise, the targeted function type is the function type of T.
So looks like there are two things here: 

1. ECJ is implementing old rules for 9.8.
2. 18.5.3 is only for explicit lambdas and we are not yet implementing it.
Can you look into the changes required between comment#5 and comment#6's
versions of 9.8 ? That could explain why I am seeing descriptor with JLO
mentioned in it in the code selection problem.
(In reply to Srikanth Sankaran from comment #7)
> So looks like there are two things here: 
> 
> 1. ECJ is implementing old rules for 9.8.
> 2. 18.5.3 is only for explicit lambdas and we are not yet implementing it.
> Can you look into the changes required between comment#5 and comment#6's
> versions of 9.8 ?

Mh, so 9.8 is new to me (I just took that part for granted :) ).

Given it says "The function type of a parameterized functional interface" and given that 18.5.3 is inferring the parameterized functional inferface, shouldn't we first apply 18.5.3 and then 9.8 on top of the result?

I hope I can show you a draft of 18.5.3 soonish.

> That could explain why I am seeing descriptor with JLO
> mentioned in it in the code selection problem.

Indeed, with wildcard handling removed from PTB and not yet in place via 18.5.3 the test for bug 419048 indeed fails. Stay tuned for an update re 18.5.3.
(In reply to Stephan Herrmann from comment #8)
> (In reply to Srikanth Sankaran from comment #7)
> > So looks like there are two things here: 
> > 
> > 1. ECJ is implementing old rules for 9.8.
> > 2. 18.5.3 is only for explicit lambdas and we are not yet implementing it.
> > Can you look into the changes required between comment#5 and comment#6's
> > versions of 9.8 ?
> 
> Mh, so 9.8 is new to me (I just took that part for granted :) ).
> 
> Given it says "The function type of a parameterized functional interface"
> and given that 18.5.3 is inferring the parameterized functional inferface,
> shouldn't we first apply 18.5.3 and then 9.8 on top of the result?

18.5.3 may only be for explicit lambdas. PTB's version needs update wrt 9.8
since the rules read different.
Created attachment 238359
draft patch

Here's a draft implementation with request for comments on these issues:

In order to find a point in time where we have all LE.arguments resolved but before checking them against the descriptor I split the loop over arguments into two. Between loops I hooked the inference. Seems to work, but I haven't checked whether cutting the loop into two is a kosher thing to do.

For the elided case and for ReferenceExpression we still need the old wildcard replacement (perhaps with some update from the spec, haven't checked). To distinguish situations I added a parameter to getSingleAbstractMethod: boolean replaceWildcards. Only an LE with explicit arguments passes false (only on one call path actually).

I had to adjust some expected results in NegativeLambdaExpressionTest, haven't checked in depth if the new messages are good.

Does this look like a winning strategy?
I updated the implementation of PTB.getSingleAbstractMethod from the new version of 9.8.

Some cleanup of the impl. of 18.5.3.

Included the correction that "inferenceFinished" shouldn't say true too early.

Pushed everything as http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=799bcf90c7e5ed6ce45339b7f5c6f4ecccd1d29c

I will proceed testing this via other bugs (next in line: bug 420525).


[1.8] Implement "18.5.3 Functional Interface Parameterization Inference"



Bug 423504 - [1.8] Implement "18.5.3 Functional Interface Parameterization Inference" 