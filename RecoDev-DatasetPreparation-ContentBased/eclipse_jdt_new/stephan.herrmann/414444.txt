Following the discussion in bug 394539 the bundle org.eclipse.jdt.annotation
will be bumped up to 2.0.0 to require a BREE of 1.8 and change our annotations
for target TYPE_USE.

At the same time we don't want to loose the ability to run our tests in 1.7 mode.
I'm currently trying how the tests could automatically switch between both versions
of this bundle.

Following the discussion in bug 394539 the bundle org.eclipse.jdt.annotation
will be bumped up to 2.0.0 to require a BREE of 1.8 and change our annotations
for target TYPE_USE.

At the same time we don't want to loose the ability to run our tests in 1.7 mode.
I'm currently trying how the tests could automatically switch between both versions
of this bundle.
It'll be interesting
Letting the tests pick the right annotation bundle isn't difficult,
PackageAdmin.getBundles() is our friend here (which, although deprecated,
is still recommended by Tom Watson).

The "interesting" part is: can we build and ship the SDK with two versions
of org.eclipse.jdt.annotation? If all goes well, we may only need to
- create a new project - say org.eclipse.jdt.annotation_old
- have both projects use the same BSN, but different versions
- include both bundles with explicit version in feature.xml

I'll make a little experiment if tycho would be happy with this setup.
Luckily there's no reason to make this bundle a singleton, so OSGi should
be happy with installing both versions side-by-side.


The reason for wanting both versions also in the release:
Users of Luna must still be able to program Java 7- and use null annotations
that are (have to be) declaration annotations.
Plug-in projects select one of the annotation bundles by specifying the
version as either "[1.1.0,2.0.0)" or "[2.0.0,3.0.0)".
Plain Java projects will simply copy the desired jar onto their classpath.
Quick experiments indicate that PDE (IDE) and Tycho (headless build) seem to
be happy with including two versions of a plugin into the same feature.

As mentioned before, tests in my workspace can already leverage both versions
side-by-side.

-------------------------------------------------------
Therefore, can one of you guys please +1 this proposal:
-------------------------------------------------------

Ship Luna/J8 with two versions of org.eclipse.jdt.annotation
 - 1.1.0.v20130513-1648 for those needing SE5 annotations
 - 2.0.0.qualifier for those needing type annoatations

To achieve this
 - clone the existing project into org.eclipse.jdt.annotation_old, or similar
 - bump up the "real" annotation project to 2.0.0
 - include both bundles in the JDT feature with explicit versions


Given we don't want annotations with mixed targets (declaration and TYPE_USE)
this is the most straight-forward solution I can see right now.
(In reply to comment #3)
Sounds good. I'd call the SE5 project org.eclipse.jdt.annotation_v1.
(In reply to comment #3)

No objections.
(In reply to comment #4 & comment #5)

Thanks!

I've made the changes that were needed to unlock bug 392099:
- split org.eclipse.jdt.annotation into two projects with different versions
- adjust the tests so they access the correct annotations per compliance level

These changes are in commit 6e45c3b12d66a6d00320490b98ad7820ecc63934


This, however, doesn't fully resolve this bug:

- org.eclipse.jdt git repo has no BETA_JAVA8 branch where I could make the
  corresponding addition to feature.xml
  => this will be needed as soon as the jdt feature should be built for J8.

- I don't think everybody working on BETA_JAVA8 is doing this in a Java-8-
  enabled host IDE, so the following changes would not work in the IDE:
  - set the BREE to JavaSE-1.8
  - set compliance to 1.8
  Instead I made .classpath point to a JRE called "jdk1.8.0".
  This means that for development in the branch you need to have a JRE
  configured by this exact name.

- maven build currently has a hickup:
  - the mojo org.eclipse.tycho.extras:tycho-eclipserun-plugin
    doesn't find its class org.eclipse.tycho.extras.eclipserun.Dependency
    I don't see how I could have caused that.
  Obviously, for the 1.8 project mvn needs to run on a 1.8 JRE.
(In reply to comment #6)
> This, however, doesn't fully resolve this bug:
> 
> - org.eclipse.jdt git repo has no BETA_JAVA8 branch where I could make the
>   corresponding addition to feature.xml
>   => this will be needed as soon as the jdt feature should be built for J8.

I've created the branch and updated the feature.
>   Instead I made .classpath point to a JRE called "jdk1.8.0".
>   This means that for development in the branch you need to have a JRE
>   configured by this exact name.

Let's call the JRE "JavaSE-1.8". That way, the JRE_CONTAINER classpath entry magically converts to the EE as soon as it becomes available.

I've also updated the compiler compliance levels to 1.7, so that they match the 1.7 BREE for now.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=f6e41fcbae6b07a9efa1ca2e2b5d7b062827d264
Tests have been cleaned up, a workaround is no longer necessary. 
Released via commit 0ebf7eb2d8f3c62d99ed8bef750b4c618547fe08
org.eclipse.jdt.annotation_v1 must keep BREE J2SE-1.5.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=79e1bfca1c2af548692a1956fbf0eca8f8470de9
After comment 6's http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=6e45c3b12d66a6d00320490b98ad7820ecc63934 , org.eclipse.jdt.core.tests.compiler now declares:

Require-Bundle:
 org.eclipse.jdt.annotation;bundle-version="[1.1.0,2.0.0)",
 org.eclipse.jdt.annotation;bundle-version="[2.0.0,3.0.0)"

The second requirement means that tests can only be run with a 1.7 VM, since org.eclipse.jdt.annotation 2.0.0 has a JavaSE-1.7 BREE (which will eventually even become 1.8).

I've marked the second requirement as optional for now: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=74cb74226fe254108607eae80c548bb2b6719e32
I am working on adding Java 8 support in APT and for this I am going to use few Java 8 APIs in one of the test projects - org.eclipse.jdt.apt.tests. I guess I should do the same as what's being done for the annotation project for the time being, right? Or is it enough if I just set the classpath to use JavaSE1-8 or is it really necessary to update the MANIFEST and compliance to use 1.7?
(In reply to Markus Keller from comment #11)
> After comment 6's
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
> ?id=6e45c3b12d66a6d00320490b98ad7820ecc63934 ,
> org.eclipse.jdt.core.tests.compiler now declares:
> 
> Require-Bundle:
>  org.eclipse.jdt.annotation;bundle-version="[1.1.0,2.0.0)",
>  org.eclipse.jdt.annotation;bundle-version="[2.0.0,3.0.0)"
> 
> The second requirement means that tests can only be run with a 1.7 VM, since
> org.eclipse.jdt.annotation 2.0.0 has a JavaSE-1.7 BREE (which will
> eventually even become 1.8).
> 
> I've marked the second requirement as optional for now:
> http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
> ?id=74cb74226fe254108607eae80c548bb2b6719e32


Looks like this is all too high for me. How do you think this will work? 

If both versions of the bundle are available 1.x and 2.x will be enabled (v1 has a EE of 1.5) if you are running on JDK8. So i think both need to be optional? And you can not work with EE but need to make sure that 1.x is only loaded when the VM is <= 1.8 which can only be done using capabilities.

Require-Capability: osgi.ee;filter:="(&(osgi.ee=JavaSE)(version>=1.5)(!(version>=1.8)))"
> How do you think this will work? 

The bundles are not singletons, and they are not actually used directly by the test bundle. They are only used by tests that put them on the classpath of a test project. I think they could actually both be marked as optional (or not show up in Require-Bundle at all).

My main goal was to allow me to run tests with 1.6 again. I think the CBI setup for the two annotation bundles needs more work. I'm e.g. not sure the
         version="1.1.0.qualifier"
in /org.eclipse.jdt-feature/feature.xml is correct, given that org.eclipse.jdt.annotation_v1 has a hardcoded
Bundle-Version: 1.1.0.v20130513-1648

I also don't see the org.eclipse.jdt.annotation 2.0.0 in Andy's BETA_JAVA8 preview build.
(In reply to Markus Keller from comment #14)
> I also don't see the org.eclipse.jdt.annotation 2.0.0 in Andy's BETA_JAVA8
> preview build.

Doesn't his preview build pre-date org.eclipse.jdt.annotation 2.0.0?


To further de-mystiphy: the code inside the test bundle doesn't directly reference
code from the annotation bundle. Access is by explicitly asking Equinox for a
particular version of the bundle (using PackageAdmin [1]). The resulting bundle is
then added to the classpath of a test project.
The dependency only ensures that Equinox finds both versions.


[1] http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/tree/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractNullAnnotationTest.java?h=BETA_JAVA8#l81
PS: sorry for giving redundant comments as I read through the comments on various related bugs ...
Are there still open issues here ?
Stephan, can this be closed ? What else needs to happen from who's side ?
(In reply to Srikanth Sankaran from comment #18)
> Stephan, can this be closed ? What else needs to happen from who's side ?

- We should verify that Eclipse can be built with both versions of the annotation bundle contained. I can (and will) make some local experiments, but the final +1 has to come from the official SDK build, I'd say. I've been in contact with Kris de Volder who maintains our current EA-builds. The patch feature contains the newer version, but s.t. is still fishy wrt the older version, which is unintentionally uninstalled during update.

- I want to check with JDT/UI if their support for pulling the bundle into a Java project needs to select versions depending on the project's compliance.
The JDT UI code in UnresolvedElementsSubProcessor just used to call Platform.getBundle("org.eclipse.jdt.annotation").

I've fixed that in BETA_JAVA8 with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=60c782eff728e9dc6e69dca8f048ce998399aba0


For the PDE case, where we offer to add

    additional.bundles = org.eclipse.jdt.annotation

to build.properties, I don't think there's a solution. org.eclipse.pde.internal.core.RequiredPluginsClasspathContainer#addSecondaryDependencies(..) doesn't support a version constraint on "additional.bundles" entries. The only way to get the right version is to disable to unwanted one in the Target Platform.
(In reply to Markus Keller from comment #20)
> The JDT UI code in UnresolvedElementsSubProcessor just used to call
> Platform.getBundle("org.eclipse.jdt.annotation").
> 
> I've fixed that in BETA_JAVA8 with
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/
> ?id=60c782eff728e9dc6e69dca8f048ce998399aba0

Cool, thanks! 


> For the PDE case, where we offer to add
> 
>     additional.bundles = org.eclipse.jdt.annotation
> 
> to build.properties, I don't think there's a solution.
> org.eclipse.pde.internal.core.
> RequiredPluginsClasspathContainer#addSecondaryDependencies(..) doesn't
> support a version constraint on "additional.bundles" entries. The only way
> to get the right version is to disable to unwanted one in the Target
> Platform.

Well, that strategy had issues anyway. Did you see bug 413583?
The current beta snapshots succeed to build and provision both versions of o.e.j.annotation, but the generated metadata is bogus, resulting in failure to install both versions, only 2.0.0 is present after installing the patch feature.

Problem: p2 declares both versions as <change>. Installation would succeed if only one version were declared as a <change>, the other as a fresh new dependency (<required>).

I see 3 (theoretical) options:
1. post-process metadata (manually, or with some existing means(?)), or
2. instruct p2 to generate the metadata we need, or
3. introduce the new dependency by some other means

Obviously (1) is not very compelling. I'm afraid (2) would require some changes in p2 - in the light of current p2 development resources not very likely to happen in time.

Leaves us with (3): I made experiments (by metadata editing for now), to introduce o.e.j.annotation_2.0.0 *not* via the patch feature, but via a dependency from one of our plugins. This works as desired!

Hence I'm proposing the following workaround for the time we are shipping J8 support as a patch feature (should not be needed for Luna):
- remove o.e.j.annotation_2.0.0 from the jdt patch feature
- add a dependcy from jdt.ui to o.e.j.annotation_2.0.0

I'm proposing jdt.ui not jdt.core because core should always have minimal dependencies, right? Any of the jdt plugins should be able to play this role, actually.


BTW, we don't seem to have a patch feature in our git, yet. That shouldn't be more than adding
   <requires>
      <import feature="org.eclipse.jdt" version="3.8.2.v20130116-090414-8-8nFu3FNOfwKLRuqgXKIy9z0I83" patch="true"/>
   </requires>
right? (Plus suitable about/license/disclaimer texts..)
After installing from http://build.eclipse.org/eclipse/builds/4P/siteDir/updates/4.3-P-builds I only see the 1.1 version of o.e.j.annotation installed, while both are correctly contained in the repo.

In the metadata I see the same situation as described in comment 22.


JDT leads, could you please comment on this proposal:

(In reply to Stephan Herrmann from comment #22)
> Hence I'm proposing the following workaround for the time we are shipping J8
> support as a patch feature (should not be needed for Luna):
> - remove o.e.j.annotation_2.0.0 from the jdt patch feature
> - add a dependcy from jdt.ui to o.e.j.annotation_2.0.0

thanks
(In reply to Stephan Herrmann from comment #23)
> After installing from
> http://build.eclipse.org/eclipse/builds/4P/siteDir/updates/4.3-P-builds I
> only see the 1.1 version of o.e.j.annotation installed, while both are
> correctly contained in the repo.
> 
> In the metadata I see the same situation as described in comment 22.
> 
> 
> JDT leads, could you please comment on this proposal:
> 
> (In reply to Stephan Herrmann from comment #22)
> > Hence I'm proposing the following workaround for the time we are shipping J8
> > support as a patch feature (should not be needed for Luna):
> > - remove o.e.j.annotation_2.0.0 from the jdt patch feature
> > - add a dependcy from jdt.ui to o.e.j.annotation_2.0.0
> 
> thanks

You mean optionally as proposed in bug 413583 comment 1?
(In reply to Dani Megert from comment #24)
> (In reply to Stephan Herrmann from comment #23)
> > After installing from
> > http://build.eclipse.org/eclipse/builds/4P/siteDir/updates/4.3-P-builds I
> > only see the 1.1 version of o.e.j.annotation installed, while both are
> > correctly contained in the repo.
> > 
> > In the metadata I see the same situation as described in comment 22.
> > 
> > 
> > JDT leads, could you please comment on this proposal:
> > 
> > (In reply to Stephan Herrmann from comment #22)
> > > Hence I'm proposing the following workaround for the time we are shipping J8
> > > support as a patch feature (should not be needed for Luna):
> > > - remove o.e.j.annotation_2.0.0 from the jdt patch feature
> > > - add a dependcy from jdt.ui to o.e.j.annotation_2.0.0
> > 
> > thanks
> 
> You mean optionally as proposed in bug 413583 comment 1?

I was thinking of a normal dependency, because (unlike bug 413583 comment 1) what I want is not a (workaround for a) compile time dependency, but a means to actually pull the annotation bundle into installations (from where it can then be consumed by client projects).

Do you want me to try whether "optional" suffices to serve this purpose?
(In reply to Stephan Herrmann from comment #25)
>I was thinking of a normal dependency,

Well, without "optional" it's a no go, since this would mean JDT UI needs JRE 8 to run.
Well maybe simply providing 2 bundles with a different name - i know this is not good OSGi style but it would solve the problem with installing and useage - to get the correct jdt.annotation wired one can not use build.properties but has to create an optional dependency on jdt.annotation only to make the compiler happy which seems a bad thing for compiletime only dependency!
I made quick experiments to ensure the long-term solution is good:

Starting with Luna we can provide both versions of o.e.j.annotation as a normal inclusion from the JDT feature and deploying and installing of both versions works without additional efforts. I tried with manual export from the IDE and installation into a 4.3.2RC4 Platform Binary. Both versions are installed.

At runtime we still need a tiny tweak: the JDT quickfix to add the annotation bundle to a plain Java project can only find one version, because the other version is only INSTALLED in Equinox, not RESOLVED. This can be easily solved by using PackageAdmin.getBundles() to find also unresolved bundles. I'll post a patch to the corresponding JDT/UI bug.

Regarding the build.properties vs. Require-Bundle +optional approach I don't see any advantage of the former. OSGi doesn't seem to have a clear concept of compile-time only dependencies, but an optional dependency is a viable workaround. Not being able to specify a version in build.properties is a no go in my opinion.

So, I tried all four scenarii: 
 - Plain Java project vs. Plug-in Project
 - 1.7  vs. 1.8
All work smoothly in what can be our configuration in Luna and beyond.


Remains the problem of the day: the patch feature. Only for this limited situation we have the problem that inclusion of two bundle versions from one feature doesn't work. I'll check, whether "optional" is sufficient in that scenario, but actually I understood that the J8-Patch is indented for users wanting to try Java 8 - don't we assume they have JRE8 installed?
(In reply to Stephan Herrmann from comment #28)
> but actually I understood that the J8-Patch is indented for users
> wanting to try Java 8 - don't we assume they have JRE8 installed?

Yes, try out Java 8 but not necessarily run their IDE with a JRE 8.
For the feature patch, couldn't we just add a new bundle org.eclipse.jdt.annotation.p2kludge and make it require org.eclipse.jdt.annotation 2.0.0?
After a bunch of unsuccessful experiments (I don't think you'll want to know all those failures :) ), here's an approach that works:


Create a new *feature* (thanks Markus for suggesting the name :) ):

<?xml version="1.0" encoding="UTF-8"?>
<feature
      id="org.eclipse.jdt.annotation.p2kludge.feature"
      label="Inclusion of org.eclipse.jdt.annotation_2.0.0"
      version="1.0.0.qualifier"
      provider-name="Eclipse.org">
   <plugin
         id="org.eclipse.jdt.annotation"
         download-size="0"
         install-size="0"
         version="2.0.0.qualifier"
         unpack="false"/>
</feature>

Remove o.e.j.annotation_2.0.0 from org.eclipse.jdt.java8patch and add instead:

   <includes
         id="org.eclipse.jdt.annotation.p2kludge.feature"
         version="0.0.0"/>

(We probably want to hide that feature by not adding it to any category).

To my own surprise this succeeds to install both versions *even* when running *on* JRE7 (thanks Dani for reminding me of that difference)


This only needs a little massaging in terms of proper feature name, legal files etc., but from my p.o.v. this is the best solution we have right now.


Anything else I can do to make this happen? 
(I don't think I have commit rights to the feature repos, do I?
 BTW, what repo actually hosts the patch feature?)
(In reply to Stephan Herrmann from comment #31)
Sounds good, thanks a lot!

The patch features are here:
http://git.eclipse.org/c/platform/eclipse.platform.releng.aggregator.git/tree/eclipse.platform.releng.tychoeclipsebuilder/java8patch?h=BETA_JAVA8

Stephan, can you take the solution over to bug 428099, so that David can release this?
Created attachment 240170
update for JDT/UI

(In reply to Markus Keller from comment #20)
> The JDT UI code in UnresolvedElementsSubProcessor just used to call
> Platform.getBundle("org.eclipse.jdt.annotation").
> 
> I've fixed that in BETA_JAVA8 with
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/
> ?id=60c782eff728e9dc6e69dca8f048ce998399aba0

My patch updates that approach so that it also finds an installed but unresolved bundle.

The approach directly mirrors s.t. I found in JUnitPlugin :)
(In reply to Stephan Herrmann from comment #33)
> My patch updates that approach so that it also finds an installed but
> unresolved bundle.

That happens when the IDE is started with a pre-Java8 VM. To test the quick fix in the runtime, make sure the o.e.j.annotations 2.0.0 bundle is not in source.

> The approach directly mirrors s.t. I found in JUnitPlugin :)

I'm not afraid of the word "kludge", so feel free to use it when it fits ;)

Thanks for catching the problem and supplying a fix!

Released to BETA_JAVA8 with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=7881a5bf9c5f5d61a3d148acfc9dcc7538bc8086
(In reply to Markus Keller from comment #34)
> (In reply to Stephan Herrmann from comment #33)
> > My patch updates that approach so that it also finds an installed but
> > unresolved bundle.
> 
> That happens when the IDE is started with a pre-Java8 VM. To test the quick
> fix in the runtime, make sure the o.e.j.annotations 2.0.0 bundle is not in
> source.

Good point. I indeed tested this in a fresh standalone installation.

 
> > The approach directly mirrors s.t. I found in JUnitPlugin :)
> 
> I'm not afraid of the word "kludge", so feel free to use it when it fits ;)

I was only worried you might be worried of using deprecated API, but Tom Watson keeps confirming that the PackageAdmin is safe to use, so we should be safe :)

> Thanks for catching the problem and supplying a fix!
> 
> Released to BETA_JAVA8 with
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/
> ?id=7881a5bf9c5f5d61a3d148acfc9dcc7538bc8086

Thanks!
Seeing bug 428099 resolved I think it's (finally) time to close this one, too.

Thanks!


[1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE)



Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) 

Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) 

Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) - clean up tests, workaround is no longer needed 

Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) 

Bug 414444 - [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) - adjust one more test suite 

Bug 414444 - [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) - split annotation bundle, but cannot yet use BREE JavaSE-1.8 

Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) 

Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) 

Bug 414444: [1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE) 