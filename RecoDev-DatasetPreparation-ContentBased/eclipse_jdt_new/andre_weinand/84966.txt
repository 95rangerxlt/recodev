build I20050209

While working on bug 37221 and looking for refs to getDirtyEditors(), I came
across JavaHistoryActionImpl.getEditor(IFile), which does:

	final JavaEditor getEditor(IFile file) {
		IWorkbench workbench= JavaPlugin.getDefault().getWorkbench();
		IWorkbenchWindow[] windows= workbench.getWorkbenchWindows();
		for (int i= 0; i < windows.length; i++) {
			IWorkbenchPage[] pages= windows[i].getPages();
			for (int x= 0; x < pages.length; x++) {
				IEditorPart[] editors= pages[x].getDirtyEditors();
				for (int z= 0; z < editors.length; z++) {
					IEditorPart ep= editors[z];
					if (ep instanceof JavaEditor)
						return (JavaEditor) ep;
				}
			}
		}
		return null;
	}

This looks suspicious since it ignores the argument, and just picks the first
dirty Java editor, which seems arbitrary.

build I20050209

While working on bug 37221 and looking for refs to getDirtyEditors(), I came
across JavaHistoryActionImpl.getEditor(IFile), which does:

	final JavaEditor getEditor(IFile file) {
		IWorkbench workbench= JavaPlugin.getDefault().getWorkbench();
		IWorkbenchWindow[] windows= workbench.getWorkbenchWindows();
		for (int i= 0; i < windows.length; i++) {
			IWorkbenchPage[] pages= windows[i].getPages();
			for (int x= 0; x < pages.length; x++) {
				IEditorPart[] editors= pages[x].getDirtyEditors();
				for (int z= 0; z < editors.length; z++) {
					IEditorPart ep= editors[z];
					if (ep instanceof JavaEditor)
						return (JavaEditor) ep;
				}
			}
		}
		return null;
	}

This looks suspicious since it ignores the argument, and just picks the first
dirty Java editor, which seems arbitrary.
Andre, can you please comment on this.
fixed for N20050510


JavaHistoryActionImpl.getEditor(IFile) picks first dirty editor, ignoring argument



fixed #84966: JavaHistoryActionImpl.getEditor(IFile) picks first dirty editor, ignoring argument 