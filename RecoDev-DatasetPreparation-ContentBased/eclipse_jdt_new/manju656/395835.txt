The code to find the Javadoc for an element is currently duplicated in the classes JavadocView -> getJavadocHtml and JavadocHover -> getHoverInfo. This needs to be consolidated to a common class.

The code to find the Javadoc for an element is currently duplicated in the classes JavadocView -> getJavadocHtml and JavadocHover -> getHoverInfo. This needs to be consolidated to a common class.
Created attachment 226372
Proposed Fix.

JavadocView and JavadocHover shared code which resulted in a cyclic dependency between these two classes. Most of the common code is now moved to JavadocContentAccess2.

JavadocHover has a dependency with JavadocView as it needs to populate the Javadoc content when user executes the "Show in Javadoc View" action.
Thanks for the patch.

We could consider to change #isPackageInfo(ICompilationUnit) to #isPackageInfo(ITypeRoot) and then change the implementation that it works for IClassFile too, but that seems overkill at this point.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=52ff99eb9b2828612fe521d9d8c881b170bf8b02
(In reply to comment #2)
> Thanks for the patch.
> 
> We could consider to change #isPackageInfo(ICompilationUnit) to
> #isPackageInfo(ITypeRoot) and then change the implementation that it works
> for IClassFile too, but that seems overkill at this point.
> 
> Fixed with
> http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/
> ?id=52ff99eb9b2828612fe521d9d8c881b170bf8b02

Sorry, this went into the wrong bug.
.
I know we've discussed this but when I now look at the changes that go into 'JavadocContentAccess2' it's better if we keep that class as the provider of the (pure) Javadoc (+ links).

We already have helpers in the JavadocHover that are called from JavadocView, so, it's best if we add all the helper methods there.
Ok, let's keep JavadocContentAccess2 to retrieve pure Javadoc +links.

JavadocHover has a dependency with JavadocView, so wouldn't it be better to keep the helper methods in JavadocView, so that we can avoid a cyclic dependency.
(In reply to comment #6)
> Ok, let's keep JavadocContentAccess2 to retrieve pure Javadoc +links.
> 
> JavadocHover has a dependency with JavadocView, so wouldn't it be better to
> keep the helper methods in JavadocView, so that we can avoid a cyclic
> dependency.

With "cyclic" you mean they call each other but not as real cycle, right?

I *think* currently we already have more helpers in JavadocHover. If that's not the case and the view has more helpers that are already called by the hover class, then we would put the helpers into JavadocHover.
Not a real cycle, but they call each other. There is no helper method in JavadocView which the JavadocHover require.

So i will revert back the changes.
Created attachment 226449
Proposed Fix.

Consolidated the common code and moved it to JavadocHover.
Comment on attachment 226449
Proposed Fix.

Thanks Manju, the patch simplifies things quite a bit!

Things that need further attention:

I don't understand why you changed #isStaticFinal (except for making it public).

The style sheet handling is now broken: the font in JavadocHover is no longer taken from the current preference value.

The changes in #getJavadocHtml and #getHoverInfo are more local than trying to reuse code and harder to understand and verify their correctness without deeper review. E.g., why 'hasContents' got removed? #getLabel got introduced which is not good since we already have/use #getInfoText for that. For now, I think we just leave those methods as is, except for thing that can be extracted to separate methods.

#addImageAndLabel can me simplified further
Created attachment 226831
Updated Patch.

(In reply to comment #10)
> I don't understand why you changed #isStaticFinal (except for making it
> public).
#isStaticFinal now handles only elements of type IField. 
> 
> The style sheet handling is now broken: the font in JavadocHover is no
> longer taken from the current preference value.
Fixed the broken stylesheet in JavadocHover

> The changes in #getJavadocHtml and #getHoverInfo are more local than trying
> to reuse code and harder to understand and verify their correctness without
> deeper review. E.g., why 'hasContents' got removed? #getLabel got introduced
> which is not good since we already have/use #getInfoText for that. For now,
> I think we just leave those methods as is, except for thing that can be
> extracted to separate methods.
reverted back changes to those 2 methods

> #addImageAndLabel can me simplified further
the method signature is simplified.
Comment on attachment 226831
Updated Patch.

The patch is good except for two trivial issues, see below [1].

Committed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=20c463d7a212c4c913f3549bdc61fa97cd43f1d0


[1]
1) superfluous toString() after calling #getImageAndLabel
2) String imageName= allowImage ? JavadocHover.getImageName(member) : null;
   can also be refactored
Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=a583861f948d28d2aaad73cc78eb5183bb1fb9e8
.


[General] Consolidate the code which finds the Javadoc for an element.



Fixed bug 395835: Consolidate the code which finds the Javadoc for an element. 