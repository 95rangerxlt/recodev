Consider the following example and apply the quick fix "Add return statement" on the lines with comments:

@FunctionalInterface
interface I {
	int foo(int x);	
}

public class A {
	void fun1() {
		I i= (int x) -> { // [1] NPE on applying quick fix
			x++;
		};		
	}
	
	void fun2() {
		I i= (int x) -> { // [2] Incorrect result from quick fix
			x++;
		};
		
		fun1();
	}
}

[1] =>
java.lang.NullPointerException
	at org.eclipse.jdt.internal.corext.dom.ASTNodes.asString(ASTNodes.java:132)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.MissingReturnTypeCorrectionProposal.evaluateReturnExpressions(MissingReturnTypeCorrectionProposal.java:154)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.MissingReturnTypeCorrectionProposal.getRewrite(MissingReturnTypeCorrectionProposal.java:113)
	at org.eclipse.jdt.ui.text.java.correction.ASTRewriteCorrectionProposal.addEdits(ASTRewriteCorrectionProposal.java:113)
	at org.eclipse.jdt.ui.text.java.correction.CUCorrectionProposal.createTextChange(CUCorrectionProposal.java:234)
...


[2] => Adds return statement to method fun2() instead of the lambda expression. Results in:
	void fun2() {
		I i= (int x) -> { 
			x++;
		};
		
		return fun1(); // Incorrect result
	}

Consider the following example and apply the quick fix "Add return statement" on the lines with comments:

@FunctionalInterface
interface I {
	int foo(int x);	
}

public class A {
	void fun1() {
		I i= (int x) -> { // [1] NPE on applying quick fix
			x++;
		};		
	}
	
	void fun2() {
		I i= (int x) -> { // [2] Incorrect result from quick fix
			x++;
		};
		
		fun1();
	}
}

[1] =>
java.lang.NullPointerException
	at org.eclipse.jdt.internal.corext.dom.ASTNodes.asString(ASTNodes.java:132)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.MissingReturnTypeCorrectionProposal.evaluateReturnExpressions(MissingReturnTypeCorrectionProposal.java:154)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.MissingReturnTypeCorrectionProposal.getRewrite(MissingReturnTypeCorrectionProposal.java:113)
	at org.eclipse.jdt.ui.text.java.correction.ASTRewriteCorrectionProposal.addEdits(ASTRewriteCorrectionProposal.java:113)
	at org.eclipse.jdt.ui.text.java.correction.CUCorrectionProposal.createTextChange(CUCorrectionProposal.java:234)
...


[2] => Adds return statement to method fun2() instead of the lambda expression. Results in:
	void fun2() {
		I i= (int x) -> { 
			x++;
		};
		
		return fun1(); // Incorrect result
	}
Created attachment 235652
Patch with testcases.

This patch is created from the remote branch ngupta/BETA_JAVA8.
With this patch only one proposal is given for the missing return type in lambda expression i.e. to "Add return statement". The other proposal "Change return type to void" is not shown as in most of the cases the quick fix is not complete(either the functional interface is defined in a different file or it does not find all references of the method and change the return type there also) and the resulting compilation unit still has compiler errors.
The test cases are also attached.
Created attachment 237635
Additional Changes

The changes for Bug 403927: [1.8] Switch ASTs to JLS8, added visit methods for LambdaExpression which resulted in local variables declared in the Lambda Expression being ignored during the ScopeAnalyzerVisit operation. In the above patch the #visit(LambdaExpession) is overridden in ScopeAnalyzerVisit.
Created attachment 240739
Fix+Test for the additional issues found

Fixed 2 more issues found in the same bug category
1.
 @FunctionalInterface
interface I {
     int foo(int x);    
}
public class A {    
    I i2= (int x) -> {
        x++;
    };
}
'x' was never proposed as a possible return candidate as FieldDeclaration was never visited in detail.
Soln: Enabled to visit FieldDeclaration in HierarchicalASTVisitor and modified ScopeAnalyzer to consider FielDeclaration while computing local variable declaration.
2.
@FunctionalInterface
interface D<S, T> {
	Object m(Class c);
}

class E {
	D<BigInteger, BigInteger> d = (x) -> {
	};
}
'd' was proposed as a possible return candidate which resulted in compiler error as 'd' is yet to be defined.
Soln: While computing the proposal for lambda return, bindings are checked to avoid the above scenario.
(In reply to Manju Mathew from comment #3)
> Soln: Enabled to visit FieldDeclaration in HierarchicalASTVisitor

This is definitely a no-go, see the spec of HierarchicalASTVisitor. You can't change a general utility class just for one specific usage.

I guess you wanted to add this to ScopeAnalyzerVisitor:

		@Override
		public boolean visit(FieldDeclaration node) {
			return !fBreak && isInside(node);
		}
		
		@Override
		public boolean visit(LambdaExpression node) {
			return !fBreak && isInside(node);
		}

(In reply to Manju Mathew from comment #1)
> Created attachment 235652 [details] [diff]
> Patch with testcases.

The change in ASTResolving#getPossibleReferenceBinding() at
"case ASTNode.RETURN_STATEMENT:" didn't get executed by the tests. But the idea makes sense, so I left it in. But I used ASTResolving.findEnclosingLambdaExpression(..) instead of the unsafe ASTResolving.findAncestor(..), and added a disclaimer to the latter.

Didn't have time for a thorough review of MissingReturnType*CorrectionProposal, but the changes and tests looked reasonable.

Released all 3 patches together as http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=ac35462a94ac60b8320ccf4979113602e3153c36


[1.8][quick fix] NPE and incorrect result from "Add return statement" quick fix on lambda expression



Fixed Bug 408979: [1.8][quick fix] NPE and incorrect result from "Add return statement" quick fix on lambda expression 

Fixed Bug 408979: [1.8][quick fix] NPE and incorrect result from "Add return statement" quick fix on lambda expression 

Fixed Bug 408979: [1.8][quick fix] NPE and incorrect result from "Add return statement" quick fix on lambda expression 

Fix for bug 408979: [1.8][quick fix] NPE and incorrect result from "Add return statement" quick fix on lambda expression 

Fix for bug 408979: [1.8][quick fix] NPE and incorrect result from "Add return statement" quick fix on lambda expression 