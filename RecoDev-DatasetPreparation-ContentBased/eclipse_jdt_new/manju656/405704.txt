Add an icon adornment for default methods and annotation type elements with a default value.

The overlay for both will be a blue "D" with colors borrowed from
native_co.gif / final_co.gif.

Add an icon adornment for default methods and annotation type elements with a default value.

The overlay for both will be a blue "D" with colors borrowed from
native_co.gif / final_co.gif.
Created attachment 229797
default_co.gif
Manju, please have a look.
Created attachment 229909
Patch.

Default icon adornment added for default methods and annotation type elements with a default value. Tested the icon visibility in Outline View, Call Hierarchy View, Type Hierarchy View and Package explorer view.

Markus, kindly review.
We don't need two constants in JavaPluginImages. These are not API.

HierarchyLabelProvider:
- bad formatting/parentheses
- why do we need this change?

JavaElementImageProvider:
- since we know these flags are only for IMethods, we should not process them for all IMembers

BindingLabelProvider:
- same as above: only process for methods
- I don't think Modifier.isDefault(..) will work, see analysis in bug 405517 comment 0. Please test this and mention here how to test it.
- implement AnnotationDefault flag
Below are some of the issues/clarifications that came up while working on this bug:
1. Default & static methods of the interface are not shown in the concrete class's method completion proposal.
2. Extract Interface from an Interface with default methods, in the newly created interface, the default methods are converted to abstract methods. The default implementation is lost.
3. Have an interface with a default method, static method and an abstract method. The concrete class which implements this interface will be asked to add the unimplemented methods. On using this quick fix, along with the abstract method, the default and static methods are also implemented. Is this the right behavior? Shouldn't we give an option to user not to re-implement the default method? The static method overriding ends up in a compiler error.
4. During content assist, shouldn't the default methods and the type annotation with default values be adorned with the proper image? This can be taken care in the current fix if required.

Markus, let me know if i need to create separate bug for any of the above points.
(In reply to comment #5)
These all sound like valid [1.8] bugs. Please open a new bug for each item.

For content assist, parts of the problem could also be in JDT Core. The first task for that bug will be to determine where exactly the problem is (not just implement a solution in JDT UI or Text).
Created attachment 229959
Updated Patch.

(In reply to comment #4)
> We don't need two constants in JavaPluginImages. These are not API.
Renamed the image descriptor to "DESC_OVR_ANNOTATION_DEFAULT_METHOD" which will be shared by default methods and type annotaion with default values.

> HierarchyLabelProvider:
> - bad formatting/parentheses
> - why do we need this change?
Wrong code change, removed it.

> JavaElementImageProvider:
> - since we know these flags are only for IMethods, we should not process
> them for all IMembers
Done
 
> BindingLabelProvider:
> - same as above: only process for methods
Done

> - I don't think Modifier.isDefault(..) will work, see analysis in bug 405517
> comment 0. 
Done.

> Please test this and mention here how to test it.
To test copy paste the below code to package explorer.
package p1;

public interface I1 {	
	 default int m1(){
		 return 10;
	 }	
}

package p1;

public class Clazz implements I1{}

Invoke Source-> Override/Implement Methods... on Clazz

> - implement AnnotationDefault flag
Done
To test, remove the checks in GenerateMethodAbstractAction#checkAndRun(IType) and then invoke Source > Generate toString() on the below Type Annotation.
package p1;
public @interface ClassPreamble {
   String author();
   String date();
   int currentRevision() default 1;
   String lastModified() default "N/A";
   String lastModifiedBy() default "N/A";
   String[] reviewers();
}

(In reply to comment #6)
> (In reply to comment #5)
> These all sound like valid [1.8] bugs. Please open a new bug for each item.
I will create new bugs for them.

> For content assist, parts of the problem could also be in JDT Core. The
> first task for that bug will be to determine where exactly the problem is
> (not just implement a solution in JDT UI or Text).
The proposal itself not being populated is partly the core issue. The image not displayed for default method and annotation with default value is fixed in the UI component CompletionProposalLabelProvider#decorateImageDescriptor and is included as part of the current patch.

Markus, kindly review.
(In reply to comment #6)
> (In reply to comment #5)
> These all sound like valid [1.8] bugs. Please open a new bug for each item.
> 
> For content assist, parts of the problem could also be in JDT Core. The
> first task for that bug will be to determine where exactly the problem is
> (not just implement a solution in JDT UI or Text).
bug 402812 in JDT Core deals with this issue. Once this bug is fixed we can check if we require additional effort in UI.
The changes in TypeNameMatchLabelProvider also look unnecessary. The rest looks good, please commit.
Thanks Markus. Removed the changes in TypeNameMatchLabelProvider and released the patch as:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?h=BETA_JAVA8&id=449a3453b969f43104f75fec7c5c1f039a339dc7
The blue color of the D can make it hard to distinguish abstract and default methods, e.g. in an Override/Implement Methods dialog for a class that implements Map.

Changed to brown: http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=38330b7ef90447fa12ba22332c94c02d0ef62306


[1.8][render] Adornment for default methods and annotation type elements with default



Bug 405704: [1.8][render] Adornment for default methods and annotation type elements with default 

Fixed bug 405704 -[1.8][render] Adornment for default methods and annotation type elements with default. 