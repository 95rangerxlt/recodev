Manoj has collected some profiles that show that ~70% of time spent
in indexing goes into the new method SourceIndex.indexedResolvedDocument.

We need to find ways to speed this up:

Some obvious candidates looking at the profile (Manoj - please attach)

    - Disabling task tag processing
    - Setting a bit in those methods that have a functional type and only
populating those methods's bodies in the parse tree (others will have the
skeleton built by diet parser)

etc.

Manoj has collected some profiles that show that ~70% of time spent
in indexing goes into the new method SourceIndex.indexedResolvedDocument.

We need to find ways to speed this up:

Some obvious candidates looking at the profile (Manoj - please attach)

    - Disabling task tag processing
    - Setting a bit in those methods that have a functional type and only
populating those methods's bodies in the parse tree (others will have the
skeleton built by diet parser)

etc.
Manoj, please take it forward, TIA.
(In reply to Srikanth Sankaran from comment #0)

>     - Setting a bit in those methods that have a functional type and only
> populating those methods's bodies in the parse tree (others will have the
> skeleton built by diet parser)

That suggestion is broken. Unless the method bodies are parsed, we won't know
if they have functional types. What we should do is to clear the bodies of
those methods that don't have functional types before resolve, so they don't
pull in the transitive closure of all types referenced from the irrelevant 
bodies during resolution.

Start with defining ASTNode.Bit22 to be HasFunctionalInterfaceTypes and
change the method name of Parser.markEnclosingMemberWithLocalTypeOrLambda
to be markEnclosingMemberWithLocalOrFunctionalType which should also be
called for reference Expressions.

This method should:

    - when called for local types, set the HasLocalType bit only.
    - when called for reference expressions, should set the HasFunctionalInterfaceTypes  bit only
    - when called for lambdas should set both bits.

Take a look at org.eclipse.jdt.internal.core.search.matching.MatchLocator.purgeMethodStatements(TypeDeclaration, boolean) for equivalent behavior.

We want to disable javadoc resolution also.
Created attachment 240428
Proposed Patch

contains both optimizations.
Patch looks good.

    - changed the enum contextInfo to LocalTypeKind.
    - Updated stale comments due to copy paste into SourceIndexer.
    - Removed redundant cast from AbstractMethodDeclaration to ASTNode.

Fix released here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=37ab8697c014821dd4f22aba728dc823cf065eac

Thanks a lot Manoj!

For completeness, post summary data here that shows the improvement achieved.
Created attachment 240627
Benchmark Time

benchmark sorted with total time
Created attachment 240628
Time Post checkTask removal
The execution time is down from 752,619 (ms) to 458,197 (ms) primarily due to org.eclipse.jdt.internal.compiler.parser.Scanner.checkTaskTag(int, int).
Verified as working for Eclipse + Java 8 RC2 using Kepler SR2 +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA) 
1.0.0.v20140306-1935


[1.8][index] Java 8 search support degrades indexing performance.



Fixed Bug 429279 - [1.8][index] Java 8 search support degrades indexing performance 