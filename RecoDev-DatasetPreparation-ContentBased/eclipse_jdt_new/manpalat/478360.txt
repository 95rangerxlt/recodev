With the latest change in modules using build b82 and the patch of bug 473901 the search of java.base methods (for eg println) results in the following ArrayIndexOutofBoundException with the following stacktrace


java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.eclipse.jdt.internal.compiler.util.ObjectVector.copyInto(ObjectVector.java:87)
	at org.eclipse.jdt.internal.core.search.matching.PossibleMatchSet.getPossibleMatches(PossibleMatchSet.java:51)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1301)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1443)
	at org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:122)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches(BasicSearchEngine.java:232)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.search(BasicSearchEngine.java:516)
	at org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:584)
	at org.eclipse.jdt.internal.ui.search.JavaSearchQuery.run(JavaSearchQuery.java:148)
	at org.eclipse.search2.internal.ui.InternalSearchUI$InternalSearchJob.run(InternalSearchUI.java:91)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

follow up of Ref bug 473901 comment 13 and bug 473901 comment 9

Root cause is the addition of new Module structures in addition to PFR - search PossibleMatches need to factor in these structure while allocation.

With the latest change in modules using build b82 and the patch of bug 473901 the search of java.base methods (for eg println) results in the following ArrayIndexOutofBoundException with the following stacktrace


java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.eclipse.jdt.internal.compiler.util.ObjectVector.copyInto(ObjectVector.java:87)
	at org.eclipse.jdt.internal.core.search.matching.PossibleMatchSet.getPossibleMatches(PossibleMatchSet.java:51)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1301)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1443)
	at org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:122)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches(BasicSearchEngine.java:232)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.search(BasicSearchEngine.java:516)
	at org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:584)
	at org.eclipse.jdt.internal.ui.search.JavaSearchQuery.run(JavaSearchQuery.java:148)
	at org.eclipse.search2.internal.ui.InternalSearchUI$InternalSearchJob.run(InternalSearchUI.java:91)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

follow up of Ref bug 473901 comment 13 and bug 473901 comment 9

Root cause is the addition of new Module structures in addition to PFR - search PossibleMatches need to factor in these structure while allocation.
Fixed via commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA9&id=fe3ac1852503ee5f3d26919dd323775bfa197648
Fixed


[1.9][search] AIOOBE while searching for java.base methods



Fix for bug 478360 - [1.9][search] AIOOBE  while searching for java.base methods 