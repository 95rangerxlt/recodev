Classes generated at run-time or processed by byte code manipulators may contain source line information for some but not all methods.

For this reason, ReferenceType.allLineLocations() should return all available line locations from all methods that do provide line locations, rather than throwing an AbsentInformationException for the first method without line locations.

The exception should only be thrown when no method of the given class provides any line locations. This is the behaviour observed with the JDI implementation of the Oracle JDK.

Classes generated at run-time or processed by byte code manipulators may contain source line information for some but not all methods.

For this reason, ReferenceType.allLineLocations() should return all available line locations from all methods that do provide line locations, rather than throwing an AbsentInformationException for the first method without line locations.

The exception should only be thrown when no method of the given class provides any line locations. This is the behaviour observed with the JDI implementation of the Oracle JDK.
Harald,
Can you help in testing/verifying the proposed patch ?
Created attachment 252293
To throw exception if line location not found for all methods

This patch allows to throw exception if line location is not found for all methods. Exception will not be thrown if any method has line information. I tested different java breakpoints with Lambda scenarios , it works fine.
Comment on attachment 252293
To throw exception if line location not found for all methods

The try is in the wrong spot - it will cause the loop to stop at the first method is finds with no line infos
Created attachment 252303
fix

Try this patch with your tests. We also don't need a new NLS string (there is one already stating there are no line infos)
Thanks Mike. 
I did test with my test cases but With the lack of real test scenario where we have all line info missing or with only one method with line info will help. 
Harald,
If you can help me with the setup, I can test the same.
(In reply to Sarika Sinha from comment #5)
> Thanks Mike. 
> I did test with my test cases but With the lack of real test scenario where
> we have all line info missing or with only one method with line info will
> help. 
> Harald,
> If you can help me with the setup, I can test the same.

You could try:

1. loading up the ASM code; we use it in API tools if you want to see an example 
2. create a test classfile with debug infos 
3. read the classfile with ASM and remove the debug infos for one (or more) method - ASM is a class reader / writer
(In reply to Michael Rennie from comment #6)
Mike,
I used ASM to write the class file with line numbers removed for few methods. But the problem I faced is that for Java Stratum, it doesn't evaluate based on fileInfos, it just adds the line no info.
Do you suggest to put this in RC1 ?
Pushed fix to:

http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=910eb26657a8a66e5f9d329a1e1a4c791107b4bc
Harald, please verify the fix using http://download.eclipse.org/eclipse/downloads/drops4/I20150519-2000/
This change will be partially reverted, see bug 467845.


Gracefully handle partial absence of line information



Bug 462932 - Gracefully handle partial absence of line information 