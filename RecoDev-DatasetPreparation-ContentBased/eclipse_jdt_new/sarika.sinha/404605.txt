We are using Execution Environment Descriptions http://wiki.eclipse.org/Execution_Environment_Descriptions to contribute custom Java VM installations to eclipse. VM has ee.language.level=1.4 and eclipse IDE decides that it has support for JAXP for some reason. This is needed to evaluating VM system properties by executing special class org.eclipse.jdt.internal.launching.support.SystemProperties used for retrieving system information for the VM itself. This class uses JAXP which is NOT mandatory functionality for jdk 1.4. As result all features of eclipse which use these system properties doesn't work. New property should be added to the execution environment descriptions which informs eclipse to use the legacy org.eclipse.jdt.internal.launching.support.LegacySystemProperties instead of detecting XML support by language level.

We are using Execution Environment Descriptions http://wiki.eclipse.org/Execution_Environment_Descriptions to contribute custom Java VM installations to eclipse. VM has ee.language.level=1.4 and eclipse IDE decides that it has support for JAXP for some reason. This is needed to evaluating VM system properties by executing special class org.eclipse.jdt.internal.launching.support.SystemProperties used for retrieving system information for the VM itself. This class uses JAXP which is NOT mandatory functionality for jdk 1.4. As result all features of eclipse which use these system properties doesn't work. New property should be added to the execution environment descriptions which informs eclipse to use the legacy org.eclipse.jdt.internal.launching.support.LegacySystemProperties instead of detecting XML support by language level.
Let me try to understand where the problem lies.

org.eclipse.jdt.lauching (which is owned by JDT/Debug) provides two
facilities for reading system properties, one with and the other without
the need to have javax.xml in the JRE. This is fine, right?

> VM has ee.language.level=1.4 and eclipse IDE decides that it has support for
> JAXP for some reason. This is needed to evaluating VM system properties by
> executing special class 
> org.eclipse.jdt.internal.launching.support.SystemProperties used for
> retrieving system information for the VM itself.

Which part of Eclipse "decides" that JAXP is available? Who is using
SystemProperities, where they should use LegacySystemProperties?

All this does not happen in JDT/Core (which has no dependency on JDT/Debug) -
some more hints are needed to re-assign this bug to the proper component.


BTW, have you seen these remarks?
http://wiki.eclipse.org/Execution_Environments#XML_and_other_optional_JRE_pieces
Is that related to your issue?
I'm sorry if my report is not clear enough.
We are using org.eclipse.jdt.launching.vmInstalls extension point to contribute custom VM installation. It includes the VM itself packed as part of this plug-in and execution environment description file used by JDT for running VM in specific mode i.e debug mode for example.

<extension
     point="org.eclipse.jdt.launching.vmInstalls">
 <vmInstall
     home="${some.var}/jre/desc.ee"
     id="com.mycompany.id"
     name="The JRE Name"
     vmArgs="-Dcom.mycompany.prop=some_value"
     vmInstallType="org.eclipse.jdt.launching.EEVMType">
 </vmInstall>
</extension>

desc.ee file is standard java properties file which contains:
-Dee.language.level=1.4

This property is required for every org.eclipse.jdt.launching.EEVMType VM definitions.
The org.eclipse.jdt.internal.launching.EEVMInstall (which represents org.eclipse.jdt.launching.EEVMType VM installation in JDT) class inherits from 
org.eclipse.jdt.launching.AbstractVMInstall and it uses the base class evaluateSystemProperties implementation. This implementation contains this source lines:

....
      File file = LaunchingPlugin.getFileInPlugin(new Path("lib/launchingsupport.jar"));
      if ((file != null) && (file.exists())) {
        String javaVersion = getJavaVersion();
        boolean hasXMLSupport = false;
        if (javaVersion != null) {
          hasXMLSupport = true;
          if ((javaVersion.startsWith("1.1")) || 
            (javaVersion.startsWith("1.2")) || 
            (javaVersion.startsWith("1.3"))) {
            hasXMLSupport = false;
          }
        }
        String mainType = null;
        if (hasXMLSupport)
          mainType = "org.eclipse.jdt.internal.launching.support.SystemProperties";
        else {
          mainType = "org.eclipse.jdt.internal.launching.support.LegacySystemProperties";
        }
....
Obviously here we use getJavaVersion method to retrieve supported java version. For org.eclipse.jdt.internal.launching.EEVMInstall instances the value of -Dee.language.level property described above is returned by the overridden getJavaVersion method. If the method returns 1.4 which is exactly the problematic case the value of hasXMLSupport local variable will be
true and JDT will try to use org.eclipse.jdt.internal.launching.support.SystemProperties to retrieve VM system properties. Java language level 1.4 doesn't guarantee that the virtual
machine itself has support for JAXP which was used in org.eclipse.jdt.internal.launching.support.SystemProperties class. This is true for Oracle JDK implementations but it's NOT standard part of JavaSE.
As result all calls to evaluateSystemProperties will fail because JAXP is NOT supported and some of the IDE functionality won't work. My suggestion is to give some kind of ability to implementers to decide if their VM has JAXP support (just like our case). Such guessing is bad idea in general.
I cannot add JAXP to the VM because this VM is used for embedded development and almost exactly the same code is compiled for desktop machines. It has some limited set API's supported and users might decide that JAXP will work on the embedded system too.
While all this information will be useful for future investigation,
this is what we needed first:

(In reply to comment #2)
> [...]
> The org.eclipse.jdt.internal.launching.EEVMInstall (which represents
> org.eclipse.jdt.launching.EEVMType VM installation in JDT) class inherits
> from 
> org.eclipse.jdt.launching.AbstractVMInstall and it uses the base class
> evaluateSystemProperties implementation. 


IOW: org.eclipse.jdt.launching.AbstractVMInstall contains bogus logic
for guessing the presence of XML support.

Moving to JDT/Debug for follow-up.
I'm interested only in the case when execution environment descriptions are used. Of course I could probably create VM install type from scratch override this method and fix the problem, but this is quite long and complex way to fix something elementary so it doesn't worth.
(In reply to comment #5)
> I'm interested only in the case when execution environment descriptions are
> used. Of course I could probably create VM install type from scratch
> override this method and fix the problem, but this is quite long and complex
> way to fix something elementary so it doesn't worth.

The fix for bug 124137 added the support for guessing at XML support.

I am not inclined to add new API for this (no new description options). But perhaps we could improve the way we determine if a VM has XML support. 

Another option would be to just toss the legacy class and go back to not outputting XML at all, that way it doesn't matter is the VM supports XML or not. We don't persist the flag for XML support, so to me this option makes the most sense.
I agree that using the "legacy" class org.eclipse.jdt.internal.launching.support.LegacySystemProperties is definitely the most simple solution but I'm not quite sure why XML is used for all for this.
Based on the discussio we can go for a simple solution:
As JAXP is NOT standard part of JavaSE 1.4,we can use LegacySystemProperties till version 1.4 instead of 1.3 version( as done currently) and we can continue to SystemProperties for version 1.5 onwards. 
Impact will be limited to the programs where 1.4 is used with JAXP support.
Yes JAXP is optional part of Java SE profile, in fact all packages which name begins with javax are optional and may not be implemented by some vendors. It would be great if only LegacySystemProperties is used to determine system properties of a VM installation. This classes uses only basic java.lang APIs and it should run successfully in all JVMs.
Changes done - Removed the XML support logic in AbstractVMInstall which will use LegacySystemProperties always.

Sent for code review in Gerrit.
(In reply to Sarika Sinha from comment #10)
> Changes done - Removed the XML support logic in AbstractVMInstall which will
> use LegacySystemProperties always.
> 
> Sent for code review in Gerrit.

The gerrit change is: https://git.eclipse.org/r/#/c/20232/
This gerrit change has been merged with master: http://git.eclipse.org/c/jdt/eclipse.jdt.debug.git/commit/?id=72a2dd63bdac100bd99c0df62690bd2dfb915634
Created attachment 238844
Using LegalSystemProperties always

for JDK versions greater than 1.3 , VM Installer was assuming JAXP
support (which is not mandatory in JDK). Changes have been done to use
LegacySystemProperties always and not generate properties in xml format.


Need additional property for Virtual Machine XML support for execution environment descriptions

contributed

Bug Id: 404605 - Evaluation of VM System Properties fails with JDK having no support for JAXP 