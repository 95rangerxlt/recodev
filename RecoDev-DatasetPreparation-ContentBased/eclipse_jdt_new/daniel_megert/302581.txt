I20100209-2300

I got this deadlock yesterday while doing some Java coding. I will attach two stack traces that are about four minutes apart that appear to be in roughly the same state.

It also seemed strange that it is fetching AST's during label decoration in the UI thread - I thought expensive label decoration work was supposed to happen in a background decoration thread.

I20100209-2300

I got this deadlock yesterday while doing some Java coding. I will attach two stack traces that are about four minutes apart that appear to be in roughly the same state.

It also seemed strange that it is fetching AST's during label decoration in the UI thread - I thought expensive label decoration work was supposed to happen in a background decoration thread.
Created attachment 158848
First stack trace
Created attachment 158849
Second stack trace 4 minutes later
From looking at the code I believe this is a race condition. ASTProvider#getAST does this (code slightly simplified):

synchronized (fReconcileLock) {
	isReconciling= isReconciling(input);
	...
}

if (isReconciling) {
	synchronized (fWaitLock) {
		fWaitLock.wait();
	}

When reconciliation completes the following code runs (ASTProvider#reconciled):

synchronized (fReconcileLock) {
	synchronized (fWaitLock) {
		fWaitLock.notifyAll();
	}
}

Now what happens if reconciliation completes between the two sync blocks in the getAST method. The notifyAll() method will have no effect because no threads are waiting. Now when fWaitLock.wait() is invoked, nobody will ever wake it up. 

The usual pattern here to avoid a race condition like this is that you test the wait condition within the synchronized block before you wait:

	synchronized (fWaitLock) {
		if (we still need to wait)
			fWaitLock.wait();
	}

That way there is no possible window in which the notification can happen before the wait, which leads to deadlock.
Thanks for the nice analysis.

Fixed in HEAD
Available in builds > N20100214-2000.


>It also seemed strange that it is fetching AST's during label decoration in the
>UI thread - I thought expensive label decoration work was supposed to happen in
>a background decoration thread.
We decorate the override indicators in the UI thread because
- using the decoration manager which does it in the background causes lots
  of flickering (see bug 55576).
- there is no framework to decorate in the background besides the decoration 
  manager
- the decoration manager is global and has the same settings for all i.e.
  does not allow to exclude a registered decorator (like CVS) or to only use a
  specific decorator (e.g. override indicator)
  ==> nothing we can do here except pressing on bug 55576 but this bug is hard 
      to solve. Not having the override indicators in Quick Outline is a no go.
*** Bug 266510 has been marked as a duplicate of this bug. ***
*** Bug 305360 has been marked as a duplicate of this bug. ***
Created attachment 163097
Thread dump on e4 I20100320-2100 SDK

This happened to me today on an e4 I20100320-2100 SDK.
Made the fIsReconciling flag volatile to make sure the latest value is used.
hi, i've seen this a few times with 64-bit 3.6 SR1 on mac os 10.6.5. 

Build id: 20100917-0705

Here is the java stack of the dead thread:


"main" prio=6 tid=114800800 nid=0x7fff706afca0 in Object.wait() [7fff5fbfa000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <7e0e61108> (a java.lang.Object)
	at java.lang.Object.wait(Object.java:485)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:456)
	- locked <7e0e61108> (a java.lang.Object)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:126)
	at org.eclipse.jdt.ui.actions.OrganizeImportsAction.run(OrganizeImportsAction.java:269)
	at org.eclipse.jdt.ui.actions.OrganizeImportsAction.run(OrganizeImportsAction.java:201)
	at org.eclipse.jdt.ui.actions.SelectionDispatchAction.dispatchRun(SelectionDispatchAction.java:278)
	at org.eclipse.jdt.ui.actions.SelectionDispatchAction.run(SelectionDispatchAction.java:250)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
	at org.eclipse.ui.commands.ActionHandler.execute(ActionHandler.java:185)
	at org.eclipse.ui.internal.handlers.LegacyHandlerWrapper.execute(LegacyHandlerWrapper.java:109)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:476)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.ui.internal.handlers.HandlerService.executeCommand(HandlerService.java:169)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:468)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:786)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:885)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:567)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3(WorkbenchKeyboard.java:508)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent(WorkbenchKeyboard.java:123)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1031)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:3775)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1367)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1390)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1375)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1404)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1400)
	at org.eclipse.swt.widgets.Canvas.sendKeyEvent(Canvas.java:416)
	at org.eclipse.swt.widgets.Control.doCommandBySelector(Control.java:958)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5068)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSResponder.interpretKeyEvents(NSResponder.java:56)
	at org.eclipse.swt.widgets.Composite.keyDown(Composite.java:587)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4978)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Widget.callSuper(Widget.java:220)
	at org.eclipse.swt.widgets.Widget.windowSendEvent(Widget.java:1943)
	at org.eclipse.swt.widgets.Shell.windowSendEvent(Shell.java:2025)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5040)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Display.applicationSendEvent(Display.java:4582)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:4659)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSApplication.sendEvent(NSApplication.java:115)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3274)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2640)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2604)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2438)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:671)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:664)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:115)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:369)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:619)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:574)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1407)
(In reply to comment #9)
> hi, i've seen this a few times with 64-bit 3.6 SR1 on mac os 10.6.5. 
Please cc yourself on bug 322914.


[implementation] Deadlock fetching AST during label decoration



Fixed bug 302581: [implementation] Deadlock fetching AST during label decoration 