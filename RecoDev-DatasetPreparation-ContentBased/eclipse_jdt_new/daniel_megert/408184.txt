When autocompleting for a method in a class, I am given the option to create a "Default constructor". However, this is incorrect. A default constructor is not something that a developer can create; per the JLS it's emitted solely by the compiler if one isn't provided in the source. The label should be "No-arg constructor" or "Empty constructor".

When autocompleting for a method in a class, I am given the option to create a "Default constructor". However, this is incorrect. A default constructor is not something that a developer can create; per the JLS it's emitted solely by the compiler if one isn't provided in the source. The label should be "No-arg constructor" or "Empty constructor".
Moving to JDT/UI where this label is defined.
I'd rename it to "Constructor with no parameters" or leave as is, since most people label it as such despite the spec.

Markus, any other suggestion?
I think "Empty argument constructor" may be a good middle ground. However, keeping the current language just perpetuates the misnomer.
JLS7 mentions a "nullary constructor", but that also sounds kludgy.

The current content assist proposal doesn't exactly generate an equivalent of the default constructor, since it always uses the "public" modifier.

Anyway, the main label already ends with "()", so the adjective is redundant and we can just say "Constructor".
Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=a2ac6a98bd5c1c7f44d551e7bc1c9431412d831c


[content assist] Default constructor mislabeled



Fixed bug 408184: [content assist] Default constructor mislabeled 