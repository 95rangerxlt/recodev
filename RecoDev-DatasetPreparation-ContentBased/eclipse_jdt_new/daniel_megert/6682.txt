20011206 - (happened to be on Windows2000)
- Open an editor on a class that is in a deep hierarchy
   (I was in List in the SWT Widget hierarchy)
- In the Outline view, select a method that has a declaration in several 
classes in the hierarchy
   (I selected createScrollBar(int) - this method is defined in Scrollable and 
redefined in List)
- Context menu -> Declarations -> Hierarchy
- It only found the method that was defined in List, and it missed the one that 
is defined in Scrollable (super of List)

I notice that if you select the method (createScrollBar(int))in the superclass 
(Scrollable) and search for declarations in the hierarchy, it will find all of 
the methods. So I suspect that the search algorithm is only looking "down" for 
declarations, when it needs to look "up" as well.

20011206 - (happened to be on Windows2000)
- Open an editor on a class that is in a deep hierarchy
   (I was in List in the SWT Widget hierarchy)
- In the Outline view, select a method that has a declaration in several 
classes in the hierarchy
   (I selected createScrollBar(int) - this method is defined in Scrollable and 
redefined in List)
- Context menu -> Declarations -> Hierarchy
- It only found the method that was defined in List, and it missed the one that 
is defined in Scrollable (super of List)

I notice that if you select the method (createScrollBar(int))in the superclass 
(Scrollable) and search for declarations in the hierarchy, it will find all of 
the methods. So I suspect that the search algorithm is only looking "down" for 
declarations, when it needs to look "up" as well.
Search does not find all References, either.

- Open an editor on a class that is in a deep hierarchy
   (I was in Control in the SWT Widget hierarchy)
- In the Outline view, select a method that has references in several 
classes in the hierarchy
   (I selected createWidget() - this method is defined in Control and 
referenced in about 12 places below and in Control)
- Context menu -> References -> Hierarchy
- It only found 4 references - it missed 8 references, and I can't see a 
pattern for what it is missing and what it is finding.

Just for another strange example of this strange behavior, select a class that 
is lower in the hierarchy (I selected Scrollable) and still defines the same 
method (createWidget()). Again, do:
Context menu -> References -> Hierarchy
This time, it found 9 references. In other words, when the super was selected, 
it only found 4 references, but select the subclass and it finds more 
references?

One last example of this strange behavior was noted when I selected 
Control.createWidget() again, and this time I decided to search everywhere:
Context menu -> References -> Workspace.
It only found 4 references? This is the same (incorrect) result as searching 
the Hierarchy.
AHA - now I understand what the problem is. Search has changed to do "the right 
thing" and it now finds only declarations/references of the exact method 
specified. So I was actually searching for references to: 
"org.eclipse.swt.widgets.Control.createWidget()".

This was what we wanted, and it is good.

HOWEVER, it is not what I wanted or expected (or needed) in the scenarios 
listed in this PR. So this PR has turned into a DCR that is requesting a new 
search feature: Search in Hierarchy for all references/declarations 
of "createWidget()", not "org.eclipse.swt.widgets.Control.createWidget()".

If the menu items were something like this, then I think there wouldn't have 
been any confusion:

References -> createWidget() -> Workspace/Hierarchy/Working Set...

Declarations -> org.eclipse.swt.widgets.Control.createWidget() -> 
Workspace/Hierarchy/Working Set...

Of course, this creates another level of menu items (yuk), so maybe a nice new 
tool in the toolbar would be better, for example the tooltip for this tool 
could be something like: "Fully-Qualified/Unqualified Searches" or something.

Or maybe just always do an unqualified (no class or package, but do use 
signature) method name search when searching in the hierarchy?

It's just that the current qualified way is so unexpected when you are 
searching through a hierarchy.
IMO searching for declaration in a hierarchy should find all declaration not 
only those defined in subclasses. 

Regarding the reference case I think we are doing the right thing. When you are 
searching for reference to a method and a subclass overrides this method you 
don't want to get references to this method too.

On the other hand such a functionality would be helpful. Instead of extending 
the menus we could think about extending the dialog.
I also agree that searching for declarations in a hierarchy should return
results from super classes.

Moving to JCore (UI uses search within hierarchy scope)


Infrastructure is there in JDT/Core.
To find declarations in superclasses as well, UI needs to pass an unqualified 
method name and search in a hierarchy scope.
Moving back to UI.
Comments from Jerome's mail:
Dani,

You're right. Searching for declarations of a method using a Java element as
input will find *true* declarations of this method (i.e. the method in its
declaring type and its subtypes).

If you search using a String in a hierarchy scope, it will distinguish a(int)
from a(float).

Jerome
Philippe, you started a thread on the mailing list about this topic
(http://dev.eclipse.org/mhonarc/lists/jdt-core-dev/msg00076.html) and Jerome
told me to wait for a JDT Core decision on this.

Please move the PR directly back to me if you decide that the current J Core
behavior does not change.

The current JCore behavior will not change, since it allows more specific 
search (e.g. searching for declarations of X.toString() is not going to find 
Object.toString()). So UI has to trigger a declaration search with no declaring 
class to match the expected behavior.

Fixed.


Search in Hierarchy does not find Declarations in supers



Fixed bug 366829: Batch compiler option and SuppressWarnings token for Overriding a Synchronized Method with a Non-synchronized Method 

HEAD - Fixed bug 366829: Batch compiler option and SuppressWarnings token for Overriding a Synchronized Method with a Non-synchronized Method 

3.5 maintenance - Fix for 286682 

HEAD - Fix for 286682 

HEAD - Fix for 286682 

HEAD - 246682 

76682 

Bug 166824 invalid classpath when running Ant script in same JRE 

Bug 166824 invalid classpath when running Ant script in same JRE 

Bug 106682  -   Java debug code assist inconsistent 

166824: invalid classpath when running Ant script in same JRE 

86682 Test failures in HEAD - found unexpected Type Safety error 

Fixed bug 6682: Search in Hierarchy does not find Declarations in supers 