User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.33 Safari/532.0
Build Identifier: 3.6.0  I20091125-2200

We are facing compatibility issues between the 3.4 and 3.6 Eclipse versions.
And we would really appreciate if you can help us get it back.

I have summarized the issues that we are facing :-

1) fOutlineSelectionChangedListener method in org.eclipse.jdt.internal.ui.javaeditor.JavaEditor has been removed.

2) org.eclipse.jdt.internal.ui.workingsets.JavaWorkingSetUpdater.ID constant removed.

And the following two internals removed:-
org.eclipse.jdt.internal.ui.refactoring.RefactoringSaveHelper 
and org.eclipse.jdt.internal.debug.ui.actions.ValidBreakpointLocationLocator

Thanks,
Rekha

Reproducible: Always

User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.33 Safari/532.0
Build Identifier: 3.6.0  I20091125-2200

We are facing compatibility issues between the 3.4 and 3.6 Eclipse versions.
And we would really appreciate if you can help us get it back.

I have summarized the issues that we are facing :-

1) fOutlineSelectionChangedListener method in org.eclipse.jdt.internal.ui.javaeditor.JavaEditor has been removed.

2) org.eclipse.jdt.internal.ui.workingsets.JavaWorkingSetUpdater.ID constant removed.

And the following two internals removed:-
org.eclipse.jdt.internal.ui.refactoring.RefactoringSaveHelper 
and org.eclipse.jdt.internal.debug.ui.actions.ValidBreakpointLocationLocator

Thanks,
Rekha

Reproducible: Always
Are you trying to compile against 3.6, or trying to run your 3.4 plugins?

PW
(In reply to comment #1)
> Are you trying to compile against 3.6, or trying to run your 3.4 plugins?
> 
> PW

Compile the code against 3.6.

Thanks
Rekha
Reading your last comment you want your source to work. If this is not the case and you need to run your old existing code (i.e. binary compatibility) then let us know by reopening this bug.

For the source case you have to adjust your source since we made some of the internal code API or refactored it. It is straightforward to adjust your code:

fOutlineSelectionChangedListener method
==> you probably mean *field*, right? Why did you access that field i.e. what did you try to achieve? I suspect you have a subclass of JavaEditor (or CompilationUnitEditor). In that case it is probably good enough if you add doSelectionChanged(ISelection) to your editor where you first call super.doSelectionChanged(...) and then your listener code.

org.eclipse.jdt.internal.ui.workingsets.JavaWorkingSetUpdater.ID
==> org.eclipse.jdt.internal.ui.workingsets.IWorkingSetIDs.JAVA

org.eclipse.jdt.internal.ui.refactoring.RefactoringSaveHelper 
==> org.eclipse.jdt.ui.refactoring.RefactoringSaveHelper

org.eclipse.jdt.internal.debug.ui.actions.ValidBreakpointLocationLocator
==> org.eclipse.jdt.internal.debug.core.breakpoints.ValidBreakpointLocationLocator
Darin, please confirm.
(In reply to comment #3)
> org.eclipse.jdt.internal.debug.ui.actions.ValidBreakpointLocationLocator
> ==>
> org.eclipse.jdt.internal.debug.core.breakpoints.ValidBreakpointLocationLocator
> Darin, please confirm.

Yes, this is the equivalent class in 3.6
Sorry about the confusion. 
We need binary compatibility between the two versions. Need the existing 3.4 code to run against Eclipse 3.6.
(In reply to comment #5)
> Sorry about the confusion. 
> We need binary compatibility between the two versions. Need the existing 3.4
> code to run against Eclipse 3.6.

:-)  Just to be clear, you have pre-built jars (built against 3.4) and you are trying to run them on 3.6?

PW
(In reply to comment #6)
> (In reply to comment #5)
> > Sorry about the confusion. 
> > We need binary compatibility between the two versions. Need the existing 3.4
> > code to run against Eclipse 3.6.
> 
> :-)  Just to be clear, you have pre-built jars (built against 3.4) and you are
> trying to run them on 3.6?
> 
> PW

Hi Paul,

Thanks for your answer. We would like to have API compatibility. We have code that needs to compile and run against a 3.4 and a 3.6 JDT base, or we would need to know how to modify our code so that we can achieve this. I thank you for your support. Please, let me know if you need any additional information.

Thanks,
~Loic
>We would like to have API compatibility. 
OK, then you have to remove your references to internal code. Internal code is not API.

>We have code
>that needs to compile and run against a 3.4 and a 3.6 JDT base, or we would
>need to know how to modify our code so that we can achieve this.
You could achieve this by copying the internal code that you use in 3.4.

Anyway, we'll bring back the code for you.
>org.eclipse.jdt.internal.debug.ui.actions.ValidBreakpointLocationLocator
This is not in JDT UI. Filed bug 297808 to track this.
>org.eclipse.jdt.internal.ui.workingsets.JavaWorkingSetUpdater.ID
>org.eclipse.jdt.internal.ui.refactoring.RefactoringSaveHelper 
This is fixed in HEAD.

For item 1) from comment 0 I need more information as already mentioned in comment 3: please provide details form where and how you access that field, otherwise I cannot help you.
(In reply to comment #10)
> >org.eclipse.jdt.internal.ui.workingsets.JavaWorkingSetUpdater.ID
> >org.eclipse.jdt.internal.ui.refactoring.RefactoringSaveHelper 
> This is fixed in HEAD.
> 
> For item 1) from comment 0 I need more information as already mentioned in
> comment 3: please provide details form where and how you access that field,
> otherwise I cannot help you.


Our code is a subclass of CompilationUnitEditor. And it overrides the createOutline method from the parent class so that it can create its own outline page. The rest of the code including the fOutlineSelectionChangedListener is a copy of the JDT's createOutline method.
>Our code is a subclass of CompilationUnitEditor. And it overrides the
>createOutline method
There is no such method. Do you mean org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.createOutlinePage()? Please post the exact method together with the complete method body. Is that the only place where you reference the 'fOutlineSelectionChangedListener' field? Also, does your outline page extend org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage or not?
(In reply to comment #12)
> >Our code is a subclass of CompilationUnitEditor. And it overrides the
> >createOutline method
> There is no such method. Do you mean
> org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.createOutlinePage()? Please
> post the exact method together with the complete method body. Is that the only
> place where you reference the 'fOutlineSelectionChangedListener' field? Also,
> does your outline page extend
> org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage or not?

Yes, the method is CreateOutlinePage(). Here is the method body
   /**
     * Creates the outline page
     */
    protected JavaOutlinePage createOutlinePage() {
        JavaOutlinePage page = new OutlinePage(fOutlinerContextMenuId,
                this);
        fOutlineSelectionChangedListener.install(page);	
        setOutlinePageInput(page, getEditorInput());
        return page;
    }

That is the only place where we reference fOutlineSelectionChangedListener. 
The OutlinePage extends org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage
OK, thanks for the info. One last question: in your subclass of org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage do you override createControl(Composite) and if so, does this method call super.createControl(parent)?
(In reply to comment #14)
> OK, thanks for the info. One last question: in your subclass of
> org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage do you override
> createControl(Composite) and if so, does this method call
> super.createControl(parent)?

No, the OutlinePage does not override createControl(Composite) method.
Fixed last issue in HEAD.
Available in builds >= I20100119-0800.
(In reply to comment #16)
> Fixed last issue in HEAD.
> Available in builds >= I20100119-0800.

Thanks a lot Dani for your help and support!!


To resolve compatibility issues between Eclipse 3.4 and 3.6, need constant and internals to be put back in JDT.



Fixed bug 297529: To resolve compatibility issues between Eclipse 3.4 and 3.6, need constant and internals to be put back in JDT. 

Fixed bug 297529: To resolve compatibility issues between Eclipse 3.4 and 3.6, need constant and internals to be put back in JDT. 