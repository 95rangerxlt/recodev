3.2 M5

Yet another case where keybindings are not properly restored... this is not 100% reproducable, but I 'succeed' about every third time if I try really hard.

- open a decent size Java file (e.g. AbstractTextEditor) in the Java editor
- press Ctrl+O in the Java editor to show the quick outline and start typing a filter expression right ahead (before the outline comes up)

> the outline opens, but does not have focus
> neither has the workbench focus

- now Alt+Tab back to the workbench, press Esc to close the non-focused outline

> keybindings are gone
> selecting "Show Outline" from the navigation menu and regularly closing the outline restores the correct behavior

3.2 M5

Yet another case where keybindings are not properly restored... this is not 100% reproducable, but I 'succeed' about every third time if I try really hard.

- open a decent size Java file (e.g. AbstractTextEditor) in the Java editor
- press Ctrl+O in the Java editor to show the quick outline and start typing a filter expression right ahead (before the outline comes up)

> the outline opens, but does not have focus
> neither has the workbench focus

- now Alt+Tab back to the workbench, press Esc to close the non-focused outline

> keybindings are gone
> selecting "Show Outline" from the navigation menu and regularly closing the outline restores the correct behavior
Would it be possible for you to attach a trace with the following debug options: "sources", "keyBindings", "keyBindings.verbose".
I think this recurring problem indicates that the "workaround" used previously in AbstractInformationControl should be made permanent.  The problem occurs whenever clients use the AbstractInformationControl>>setVisible API to close the dialog.  The JDT editor code uses this API whenever the editor is clicked.  If the popup was not closed by the user before it is hidden, then the popup gets hidden without getting disposed.  This means the key binding scopes are never restored.

Last time we examined this I offered to work on the PopupDialog code so that it wouldn't get stuck open.  The bottom line, though, is that AbstractInformationControl includes API to hide the popup without closing it, and whenever this API is used, you will lose the keybinding scopes.

My recommendation is to permanently keep the "workaround" whereby the popup is closed when hidden... OR...you should be changing out the keybinding scopes on AbstractInformationControl.setVisible, as well as on open and dispose.  Even if I were to fix all the different platform cases of the popup hanging open, clients can still call this API and cause the problem.

See bug #120921 comment #11
To clarify previous remarks.
I'm not certain that the setVisible API is the specific cause of the scenario you describe, but I do know that having the setVisible API available leaves a hole whereby the scopes are not restored if the popup is hidden without being closed.

So the workaround I was referring to before should likely be made permanent:

AbstractInformationControl
	public void setVisible(boolean visible) {
		if (visible)
			open();
		else {
			// FIXME: workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=120921
			dispose();
		}
	}

Perhaps try this and see if it solves the problem.
cc'ing Dani.
Dani - I agree that I should minimize the cases that this happens due to platform differences, but the bottom line is that as long as setVisible API is provided, the dispose() should be forced so that they keybindings are restored.
Let me nail this on our side.
*** Bug 127164 has been marked as a duplicate of this bug. ***
I've rewritten the dispose/setVisible/key binding quick view code.


[key binding] lost keybindings when typing before PopupDialog shows



Fixed bug 128632: [key binding] lost keybindings when typing before PopupDialog shows (polish) 

Fixed bug 128632: [key binding] lost keybindings when typing before PopupDialog shows 