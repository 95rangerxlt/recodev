http://www.ott.oti.com/uvm/OTIIBM/numbat/Testing/JCK-
14/tests/lang/BINC/binc057/binc05701/binc05701.html - POSITIVE TEST
	This is a binary compatibility test. You need to compile the test cases 
in the same order I put them below one by one. And then execute it. The problem 
with the Eclipse
	compiler occurs only at runtime.

Test cases:

	javac 1.4:
		compilation: OK
		runtime: passed with java.lang.IllegalAccessError: try to 
access field javasoft.sqe.tests.lang.binc057.binc05701.binc05701s.f from class 
javasoft.sqe.tests.lang.binc057.binc05701.binc05701c

	javac 1.3:
		compilation: OK
		runtime: failed

	Eclipse compiler:
		compilation: OK
		runtime: failed

NOTES:

	OT (19/09/2001 12:38:42 PM)
		Same explanation than for 1GK7VSN: ITPJCORE:WIN2000 - JCK 1.4 - 
the new field is a static (respectively instance) field.
		We specify Super to the declaring class of the field. Then we 
never go through binc05701s to do the lookup and we don't detect that there is 
a new field with the same 
		signature that is not visible. We definitely need to change the 
declaring class of the field to fix these PRs, but this would break the 1.3 
compatibility.

http://www.ott.oti.com/uvm/OTIIBM/numbat/Testing/JCK-
14/tests/lang/BINC/binc057/binc05701/binc05701.html - POSITIVE TEST
	This is a binary compatibility test. You need to compile the test cases 
in the same order I put them below one by one. And then execute it. The problem 
with the Eclipse
	compiler occurs only at runtime.

Test cases:

	javac 1.4:
		compilation: OK
		runtime: passed with java.lang.IllegalAccessError: try to 
access field javasoft.sqe.tests.lang.binc057.binc05701.binc05701s.f from class 
javasoft.sqe.tests.lang.binc057.binc05701.binc05701c

	javac 1.3:
		compilation: OK
		runtime: failed

	Eclipse compiler:
		compilation: OK
		runtime: failed

NOTES:

	OT (19/09/2001 12:38:42 PM)
		Same explanation than for 1GK7VSN: ITPJCORE:WIN2000 - JCK 1.4 - 
the new field is a static (respectively instance) field.
		We specify Super to the declaring class of the field. Then we 
never go through binc05701s to do the lookup and we don't detect that there is 
a new field with the same 
		signature that is not visible. We definitely need to change the 
declaring class of the field to fix these PRs, but this would break the 1.3 
compatibility.
Adapted to this change for 1.4 mode only.
Fixed


JCK 1.4 - BINC - the new field is less accessible than the old one (1GK7VMD)



Fix for bug 403414 - Disabling test for all platforms 

Fix for bug 403414 - Disabling the test JavaProjectTests.testRootGetPackageFragments3 in windows 

Fix for bug 403414 - Disabling test for all platforms 

Fix for bug 403414 - Disabling the test JavaProjectTests.testRootGetPackageFragments3 in windows 

Fix for bug 403414 - Fixing the failing test to use unique project names 

Fix for bug 403414 - Fixing the failing test to use unique project names 

BETA_JAVA7 - Added test for bug 341462: [1.7][search][diamond] Search doesn't return the reference to a function when called with diamond constructor 

BETA_JAVA7 - Fixed bug 341499: [compiler][null] allocate extra bits in all methods of UnconditionalFlowInfo 

HEAD - Fixed bug 341499: [compiler][null] allocate extra bits in all methods of UnconditionalFlowInfo 

BETA_JAVA7 - Fixed bug 341499: [compiler][null] allocate extra bits in all methods of UnconditionalFlowInfo 

HEAD - Fixed bug 341499: [compiler][null] allocate extra bits in all methods of UnconditionalFlowInfo 

BETA_JAVA7 - Fixed bug 341475: Eclipse doesn't show a "never read locally" warning if a private field serialVersionUID exists but the class does not implement Serializable 

HEAD - Fixed bug 341475: Eclipse doesn't show a "never read locally" warning if a private field serialVersionUID exists but the class does not implement Serializable 

BETA_JAVA7 - Fixed bug 341475: Eclipse doesn't show a "never read locally" warning if a private field serialVersionUID exists but the class does not implement Serializable 

BETA_JAVA7 - Fixed bug 341475: Eclipse doesn't show a "never read locally" warning if a private field serialVersionUID exists but the class does not implement Serializable 

BETA_JAVA7 - Fixed bug 341494: Elements.getConstantExpression(Object) doesn't return the right value for String constant 

BETA_JAVA7 - Fixed bug 341475: Eclipse doesn't show a "never read locally" warning if a private field serialVersionUID exists but the class does not implement Serializable 

HEAD - Fixed bug 341475: Eclipse doesn't show a "never read locally" warning if a private field serialVersionUID exists but the class does not implement Serializable 

Bug 341485: [1.7][navigate] "Open declared type" does not navigate to LUB for a multi-catch's argument 

Fixed bug 234143: [syntax coloring] Deprecation doesn't properly appear on keywords this and super for construction calls 