http://www.ott.oti.com/uvm/OTIIBM/numbat/Testing/JCK-
14/tests/lang/BINC/binc055/binc05501/binc05501.html - POSITIVE TEST
	This is a binary compatibility test. You need to compile the test cases 
in the same order I put them below one by one. And then execute it. The problem 
with the Eclipse
	compiler occurs only at runtime.

Test cases:

	javac 1.4:
		compilation: OK
		runtime: passed with java.lang.IncompatibleClassChangeError

	javac 1.3:
		compilation: OK
		runtime: failed

	Eclipse compiler:
		compilation: OK
		runtime: failed

NOTES:

	OT (19/09/2001 10:48:26 AM)
		In this case javac changes the declaring class of a field. The 
getfield bytecode is different.
	We can see that javac refers to binc05501c.i and we refer to 
binc05501s.i. Then we the declarations of binc05501s and binc05501i are changed 
we don't detect it,
	but javac does. The lookup for the field i leads to two fields (one for 
the interface and one for the super class). That would explain why an 
IncompatibleClassChangeError
	is thrown.

http://www.ott.oti.com/uvm/OTIIBM/numbat/Testing/JCK-
14/tests/lang/BINC/binc055/binc05501/binc05501.html - POSITIVE TEST
	This is a binary compatibility test. You need to compile the test cases 
in the same order I put them below one by one. And then execute it. The problem 
with the Eclipse
	compiler occurs only at runtime.

Test cases:

	javac 1.4:
		compilation: OK
		runtime: passed with java.lang.IncompatibleClassChangeError

	javac 1.3:
		compilation: OK
		runtime: failed

	Eclipse compiler:
		compilation: OK
		runtime: failed

NOTES:

	OT (19/09/2001 10:48:26 AM)
		In this case javac changes the declaring class of a field. The 
getfield bytecode is different.
	We can see that javac refers to binc05501c.i and we refer to 
binc05501s.i. Then we the declarations of binc05501s and binc05501i are changed 
we don't detect it,
	but javac does. The lookup for the field i leads to two fields (one for 
the interface and one for the super class). That would explain why an 
IncompatibleClassChangeError
	is thrown.
Adapted to this change for 1.4 mode only.
Fixed


JCK 1.4 - BINC - detection of an IncompatibleClassChangeError (1GK7VCA)



HEAD - Fixed bug 341394: Remove 'Unavailable' JMX attributes of WebAppContext MBean 

BETA_JAVA7 - Fixed bug 341333: [1.7][compiler] DisjunctiveTypeReference#resolveType(..) does not set the value for DisjunctiveTypeReference$resolvedType 

HEAD - bug 183413 

HEAD - bug 183413 

Update for 34130 

bug 34138 - Invalid thread access during JDT Debug UI plugin startup 

Fixed bug 283413: [content assist] Package-level javadoc requires fully-qualified refs for @see and @link tags 

143413 [build path] New Project Wizard creates default output folder although value changed to non default 