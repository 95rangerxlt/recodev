Build 20020224

The scope is internally based on resources and hence binary elements from
external JARs cause problems (and I guess also from internal JARs).

The API does not specify this restriction.

Build 20020224

The scope is internally based on resources and hence binary elements from
external JARs cause problems (and I guess also from internal JARs).

The API does not specify this restriction.
Java search scope are internally based on paths. For a file in a jar (external 
or internal), this path is the path to the jar plus the path inside the jar to 
the file.

I created a search scope on a package p in an external jar. I then searched for 
the type declarations in this scope and it gave me only the type declarations 
in package p.

Do you have a test case where this would fail?
1. Select a binary package which contains a class (e.g. "T") or select "T"
   (I tested with javax.swing.AbstractButton)
2. Open Search dialog
3. Enter the name "T", search for Type Declarations
4. Check scope: "Selected Resources"==> no matches.


Indeed that was a bug for class file elements in external jars. The underlying 
resource was used to determine the path.
Fixed.


SearchEngine.createJavaSearchScope((IJavaElement[]) does not work for binary elements



JSR_308 - 310213 

HEAD - 310213 

210213 

102132: [nls tooling] Externalize Strings Wizard should not touch annotation arguments 