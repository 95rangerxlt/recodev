Build: 20020319

On line 230 of org.eclipse.jdt.internal.compiler.batch.Main.compile(String[])
the out stream is flushed.  But if a log file was specified, it needs to be closed.

I have tested replacing:

} finally {
   out.flush();
}

with:

} finally {
   if (log != null) {
      out.close();
   } else {
      out.flush();
   }
}

An it appears to fix my test case.  I tried to boil my test case down, but I
couldn't get a reproducable one.  You may not want to waste your time on this
test case.

A close approximation of my test case is the following:

1. New PDE project, test.
2. Create a new Java file.
3. Put an error in the java file.
4. Right-click on the plugin.xml and select "Create Plug-in JARs".
5. When the ant dialog comes up select test.jar and testsrc.zip, click Finish.
6. Refresh local on the test project.
7. Delete the test.jar.bin.log file, sometimes you get errors.

Build: 20020319

On line 230 of org.eclipse.jdt.internal.compiler.batch.Main.compile(String[])
the out stream is flushed.  But if a log file was specified, it needs to be closed.

I have tested replacing:

} finally {
   out.flush();
}

with:

} finally {
   if (log != null) {
      out.close();
   } else {
      out.flush();
   }
}

An it appears to fix my test case.  I tried to boil my test case down, but I
couldn't get a reproducable one.  You may not want to waste your time on this
test case.

A close approximation of my test case is the following:

1. New PDE project, test.
2. Create a new Java file.
3. Put an error in the java file.
4. Right-click on the plugin.xml and select "Create Plug-in JARs".
5. When the ant dialog comes up select test.jar and testsrc.zip, click Finish.
6. Refresh local on the test project.
7. Delete the test.jar.bin.log file, sometimes you get errors.
I think ideally the right code is:
   out.flush();
   if (log != null) {
      out.close();
   }

Fixed and released in HEAD.
Fixed.


Main.compile does not close log file



Update for 12000 

Fix for 12000 