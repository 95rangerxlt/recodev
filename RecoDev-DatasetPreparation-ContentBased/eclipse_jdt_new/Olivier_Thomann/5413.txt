package junit.framework;
public class A {
	void t(){}
}
class B extends A{
	public void f(){
	}
	public void second(int y){}
	public void s(){}
	public void sd(){}
}
//class C extends A{
//	void f(){}
//}
//class E extends A{
//	private void f(){}
//	public void second(){}
//}
//class F extends A{
//	protected void f(){
//	}
//}
class G extends A{
	public int sd(){return 0;}
}

source range for G includes 1 line of comment from another class

package junit.framework;
public class A {
	void t(){}
}
class B extends A{
	public void f(){
	}
	public void second(int y){}
	public void s(){}
	public void sd(){}
}
//class C extends A{
//	void f(){}
//}
//class E extends A{
//	private void f(){}
//	public void second(){}
//}
//class F extends A{
//	protected void f(){
//	}
//}
class G extends A{
	public int sd(){return 0;}
}

source range for G includes 1 line of comment from another class
The fix is located in the checkAnnotion() method of the Parser. But fixing this 
problem breaks a lot of in the JDOM code and the JDOM tests. JDOM includes the 
comment preceeding a member even if this comment is not a javadoc comment.
So we cannot break this code right now and we have to defer this PR till the 
actual JDOM implementation is replaced with the new DOM nodes.
Fix released in HEAD. Change in the Parse::checkAnnotation()


incorrect class source range



Bug 415413 - [compiler][null] NullpointerException in Null Analysis caused by interaction of LoopingFlowContext and FinallyFlowContext - fix and more tests 

Bug 415413 - [compiler][null] NullpointerException in Null Analysis caused by interaction of LoopingFlowContext and FinallyFlowContext - Test 

Bug 415413 - [compiler][null] NullpointerException in Null Analysis caused by interaction of LoopingFlowContext and FinallyFlowContext - fix and more tests 

Bug 415413 - [compiler][null] NullpointerException in Null Analysis caused by interaction of LoopingFlowContext and FinallyFlowContext - Test 

Update for 6429, 6433 and 5413 

Update for 6429, 6433 and 5413 

Fix for 6429, 6433 and 5413 

Fixed Bug 425413: [1.8][quick assist] Conversion from anonymous class to lambda loses annotations Changes were overriden by the last check-in. 

Fixed Bug 425413: [1.8][quick assist] Conversion from anonymous class to lambda loses annotations 

85413 [content assist] 'Override method' content assist creates invalid methods for interface methods 

85413 [content assist] 'Override method' content assist creates invalid methods for interface methods 