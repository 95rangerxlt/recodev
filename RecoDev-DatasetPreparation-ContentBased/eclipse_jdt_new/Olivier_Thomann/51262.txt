It appears that the additional bounds in type parameters were not being 
properly handled. This resulted in the construction of an incorrect 
TypeDeclaration AST node. Attached is the patch against the latest source from 
JAVA_1_5 branch:

Index: Parser.java
===================================================================
RCS 
file: /home/eclipse/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compi
ler/parser/Parser.java,v
retrieving revision 1.188.2.37
diff -u -r1.188.2.37 Parser.java
--- Parser.java	28 Jan 2004 16:06:07 -0000	1.188.2.37
+++ Parser.java	5 Feb 2004 20:25:09 -0000
@@ -898,7 +898,7 @@
 	this.astLengthStack[this.astLengthPtr - 1] += this.astLengthStack
[this.astLengthPtr--];
 }
 protected void consumeAdditionalBound() {
-	pushOnAstStack(getTypeReference(this.intStack[this.intPtr--]));
+	pushOnGenericsStack(getTypeReference(this.intStack[this.intPtr--]));
 }
 protected void consumeAdditionalBound1() {
 }
@@ -6202,7 +6202,7 @@
 }
 protected void consumeTypeParameterWithExtends() {
 	TypeParameter typeParameter = new TypeParameter();
-	TypeReference superType = (TypeReference) this.genericsStack
[this.genericsPtr];
+	TypeReference superType = getTypeReference(this.intStack[this.intPtr--
]);
 	
 	long pos = this.identifierPositionStack[this.identifierPtr];
 	typeParameter.declarationSourceEnd = (int) pos;
@@ -6211,7 +6211,7 @@
 	this.identifierLengthPtr--;
 	
 	typeParameter.type = superType;
-	this.genericsStack[this.genericsPtr] = typeParameter;
+	pushOnGenericsStack(typeParameter);
 }
 protected void consumeTypeParameterWithExtendsAndBounds() {
 	TypeParameter typeParameter = new TypeParameter();

It appears that the additional bounds in type parameters were not being 
properly handled. This resulted in the construction of an incorrect 
TypeDeclaration AST node. Attached is the patch against the latest source from 
JAVA_1_5 branch:

Index: Parser.java
===================================================================
RCS 
file: /home/eclipse/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compi
ler/parser/Parser.java,v
retrieving revision 1.188.2.37
diff -u -r1.188.2.37 Parser.java
--- Parser.java	28 Jan 2004 16:06:07 -0000	1.188.2.37
+++ Parser.java	5 Feb 2004 20:25:09 -0000
@@ -898,7 +898,7 @@
 	this.astLengthStack[this.astLengthPtr - 1] += this.astLengthStack
[this.astLengthPtr--];
 }
 protected void consumeAdditionalBound() {
-	pushOnAstStack(getTypeReference(this.intStack[this.intPtr--]));
+	pushOnGenericsStack(getTypeReference(this.intStack[this.intPtr--]));
 }
 protected void consumeAdditionalBound1() {
 }
@@ -6202,7 +6202,7 @@
 }
 protected void consumeTypeParameterWithExtends() {
 	TypeParameter typeParameter = new TypeParameter();
-	TypeReference superType = (TypeReference) this.genericsStack
[this.genericsPtr];
+	TypeReference superType = getTypeReference(this.intStack[this.intPtr--
]);
 	
 	long pos = this.identifierPositionStack[this.identifierPtr];
 	typeParameter.declarationSourceEnd = (int) pos;
@@ -6211,7 +6211,7 @@
 	this.identifierLengthPtr--;
 	
 	typeParameter.type = superType;
-	this.genericsStack[this.genericsPtr] = typeParameter;
+	pushOnGenericsStack(typeParameter);
 }
 protected void consumeTypeParameterWithExtendsAndBounds() {
 	TypeParameter typeParameter = new TypeParameter();
Sorry. Fixed and released in stream 1.5.
Thanks for the patch.
JAVA_1_5 branch is not going in 3.0 M8. Removing target milestone.


[1.5] Handling of additional bounds in type parameters



Fix for 51262 and 52673 

Bug 351262: [1.7][quick fix] Change compiler compliance when diamond operator is used in 1.6 or lower 