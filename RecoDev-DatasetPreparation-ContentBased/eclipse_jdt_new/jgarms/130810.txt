I have Eclipse 3.2 M5a where I created a Java project and added all the libraries from Sun's JAX-WS reference implementation:

activation.jar
FastInfoset.jar
http.jar
jaxb-api.jar
jaxb-impl.jar
jaxb-xjc.jar
jaxws-api.jar
jaxws-rt.jar
jaxws-tools.jar
jsr173-api.jar
jsr181-api.jar
jsr250-api.jar
resolver.jar
saaj-api.jar
saaj-impl.jar
sjsxp.jar

I then added all these jars to the build path for my Java project as well as the Factory Path for the project. I also enabled project specific settings to do this. After applying the changes, my project rebuilt and the JAX-WS classes for my Java class were generated in the default .apt_generated directory. However, when I modified my file by adding a parameter to an annotation or even removing an annotation altogether, the files in .apt_generated were deleted I could not get the files to regenerate without going through the process of making the Factory Path dirty. My Java class is the following:

package foo;

import javax.jws.WebMethod;
import javax.jws.WebService;

@WebService
public class Echo {
	@WebMethod
	public String echoString(String input)
	{
		return input;
	}

}

I have Eclipse 3.2 M5a where I created a Java project and added all the libraries from Sun's JAX-WS reference implementation:

activation.jar
FastInfoset.jar
http.jar
jaxb-api.jar
jaxb-impl.jar
jaxb-xjc.jar
jaxws-api.jar
jaxws-rt.jar
jaxws-tools.jar
jsr173-api.jar
jsr181-api.jar
jsr250-api.jar
resolver.jar
saaj-api.jar
saaj-impl.jar
sjsxp.jar

I then added all these jars to the build path for my Java project as well as the Factory Path for the project. I also enabled project specific settings to do this. After applying the changes, my project rebuilt and the JAX-WS classes for my Java class were generated in the default .apt_generated directory. However, when I modified my file by adding a parameter to an annotation or even removing an annotation altogether, the files in .apt_generated were deleted I could not get the files to regenerate without going through the process of making the Factory Path dirty. My Java class is the following:

package foo;

import javax.jws.WebMethod;
import javax.jws.WebService;

@WebService
public class Echo {
	@WebMethod
	public String echoString(String input)
	{
		return input;
	}

}
When last I looked at the JAX-WS processor, it stored static data that needed to be reset every time it was run. APT can do this by reloading the class on every build, also known as "batch mode". This unfortunately means that the processor only gets run on a full clean build.

To try this, go to the factory path dialog and select the jar containing the annotation processor. Click on the "Advanced..." button. Then click on the checkbox for "Run this container's processors in batch mode". 
Jess,

Thanks for the quick response. Unfortunately, running in batch mode, I get:

!ENTRY org.eclipse.jdt.apt.core 4 1 2006-03-07 16:42:21.816
!MESSAGE Unexpected failure running APT on the file(s): Echo.java
!STACK 0
java.lang.NoClassDefFoundError: com.sun.xml.ws.util.localization.Localizable
	at java.lang.J9VMInternals.verifyImpl(Native Method)
	at java.lang.J9VMInternals.verify(J9VMInternals.java:57)
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:126)
	at com.sun.istack.ws.AnnotationProcessorFactoryImpl.getProcessorFor(AnnotationProcessorFactoryImpl.java:101)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTInMixedMode(APTDispatchRunnable.java:407)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.build(APTDispatchRunnable.java:561)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.build(APTDispatchRunnable.java:211)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.run(APTDispatchRunnable.java:163)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1733)
	at org.eclipse.jdt.apt.core.internal.APTDispatchRunnable.runAPTDuringBuild(APTDispatchRunnable.java:86)
	at org.eclipse.jdt.apt.core.internal.AptCompilationParticipant.processAnnotations(AptCompilationParticipant.java:158)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.processAnnotations(AbstractImageBuilder.java:502)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:261)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:50)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:214)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:137)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:593)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:168)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:202)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:231)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:234)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:303)
	at org.eclipse.core.internal.resources.Project.build(Project.java:87)
	at org.eclipse.jdt.internal.ui.util.CoreUtility$BuildJob.run(CoreUtility.java:142)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)

This missing class is coming from jaxws-rt.jar which is on my build path and also on the factory path.
Ah, I think we must have the classloader hierarchy incorrect. I'll fix that, but in the meantime you could try putting *all* of the jars on the factory path into batch mode, which should put everything in the same classloader.
Pardon me for asking, but how exactly do you put all the factory path jars into batch mode? The Advanced button for running an annotations processor in batch mode only applies when I single select a jar and the dialog that comes up only has a checkbox to toggle whether or not to run the processor in batch mode with a listbox showing the annotations processors in the jar.
Sorry, should have attached more info.

The checkbox toggling whether or not to run the annotation processors in batch mode has the side-effect of changing which classloader the entire jar gets loaded from. If you toggle that for all of the jars in your factory path, they'll all end up in the same classloader.

You shouldn't need to be aware of this, and once I fix the classloader hierarchy problem it shouldn't matter, but if you want to try toggling the batch checkbox on all your jars it may allow the processor to run on each clean build.
Thanks Jess. Your suggestion allows the JAX-WS processor to run for each clean build.
I've made the classloader hierarchy fix so that only the jar that contains the processor needs to be put into batch mode.

Unfortunately, the JAX-WS processor can still only be run once per clean build, due to its use of static data and batch-based processing.


JAX-WS processor runs just once



https://bugs.eclipse.org/bugs/show_bug.cgi?id=130810 

Bugzilla bug 130810. 