I20050301

The TypeEnvironment that manages TTypes should be more strict with regards to
accepting null values. I found two null-checks which whould better just throw a
NullPointerException rather than hiding the existence of a bug somewhere.

a) TType#initialize(..) should not accept null for the binding and it should
also throw an exception when the binding key is null.

b) TypeEnvironment#createTypeBindings(..) should not accept a null binding and
should also throw an exception when the ASTParser did not call back for a
requested binding key. The current behavior caused me a long debugging session
just to find out that bug 83500 has not been fixed.

I20050301

The TypeEnvironment that manages TTypes should be more strict with regards to
accepting null values. I found two null-checks which whould better just throw a
NullPointerException rather than hiding the existence of a bug somewhere.

a) TType#initialize(..) should not accept null for the binding and it should
also throw an exception when the binding key is null.

b) TypeEnvironment#createTypeBindings(..) should not accept a null binding and
should also throw an exception when the ASTParser did not call back for a
requested binding key. The current behavior caused me a long debugging session
just to find out that bug 83500 has not been fixed.
Changed the code. However, instead of throwing an exception the 
TypeEnvironment#createTypeBindings(..) method will return a null value inside of
the array for each type that couldn't be restored. That seems a little bit more
friendly for clients instead of throwing an exception.


TTypes environment should throw exception with null as binding key or  type binding



[86985] TTypes environment should throw exception with null as binding key or type binding 