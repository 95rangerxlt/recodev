In the following program, if an interface "I" is extracted from class "C"
containing method "dot()" (with updating of references), then the resulting
program will contain a type error in the line labeled with "BUG".

package artofillusion;
public class Bug2 {
    void foo() {
		C v1[] = null;
		C v2[] = null;
		v2[1] = (true ? null : v1[1]); // BUG
		v1[1].dot(v2[1]);
	}
}

class C {
	public double x;
	public final double dot(C v) {
		return v.x;
	}
}

In the following program, if an interface "I" is extracted from class "C"
containing method "dot()" (with updating of references), then the resulting
program will contain a type error in the line labeled with "BUG".

package artofillusion;
public class Bug2 {
    void foo() {
		C v1[] = null;
		C v2[] = null;
		v2[1] = (true ? null : v1[1]); // BUG
		v1[1].dot(v2[1]);
	}
}

class C {
	public double x;
	public final double dot(C v) {
		return v.x;
	}
}
No constraints are ever generated for ?/: expressions. I think we need
to generated constraints that require equality of the branches, and the
type of the whole expression should be a subtype of the type of the
branches.

  -Frank
I have a fix for this now.

  -Frank
Frank,

can you attach the fix to this bug an coordinate with Adam ?
this should be fixed by the patch attached to bug 50676
(checked in)
Fixed for M7.


another bug in "Extract Interface" [refactoring]

