As an example I start with this class:

public class Test {
	
	private Object obj;

	public Test (Object obj) {
		this.obj = obj;
	}

}

Then apply the "Self Encapsulate" refactoring on the obj field, which results:

public class Test {
	
	private Object obj;

	public Test (Object obj) {
		this.getObj() = obj;
	}

	private void setObj(Object obj) {
		this.obj = obj;
	}

	private Object getObj() {
		return obj;
	}

}

The "this.getObj() = obj;" in the constructor should be "setObj(obj);" 
correctly.

My Eclipse version was: 20020602

As an example I start with this class:

public class Test {
	
	private Object obj;

	public Test (Object obj) {
		this.obj = obj;
	}

}

Then apply the "Self Encapsulate" refactoring on the obj field, which results:

public class Test {
	
	private Object obj;

	public Test (Object obj) {
		this.getObj() = obj;
	}

	private void setObj(Object obj) {
		this.obj = obj;
	}

	private Object getObj() {
		return obj;
	}

}

The "this.getObj() = obj;" in the constructor should be "setObj(obj);" 
correctly.

My Eclipse version was: 20020602
The problem is that the left hand side of an assignment in this case isn't a 
name reference. Need to handle this case as well.

May be a candidate for F4 also this coding style isn't very common. Also it 
does the wrong thing there is still undo to revert it back. And it causes a 
compile error.
Wrong code is only generated for type declaring the field (this.field is only 
valid there).
it is rare and recovery path exists - readme
2.0.1 candidate
*** Bug 20761 has been marked as a duplicate of this bug. ***
Not really critical for 2.0.1. Postpone to 2.1
Reopen bug
Fixed in 2.1 build > 20020813
.


Self Encapsulate does not work correctly when "this.field = value" is used before refactoring [refactoring]



[20017] 