The Eclipse Core Expressions framework provides a nice way to declare an enablement clause for arbitrary extension points. However, the property testers used by this framework are not loaded when referenced in an expression. Instead, clients that take advantage of the core expressions mechanism must either (1) wait for the property tester plugin to load by chance or (2) insert a hack to force the plugin that declares a necessary property tester to load, or worse yet (3) make the plugin that declares the property tester an early start up plugin (I hope you shuddered when you read that like I did when I typed it). 

So, I submit that the framwork, while trying to be performance-friendly has sacrificed the usability and consumeability of this highly useful framework by not declaring some quality, efficient mechanism to force the property tester to be available when needed. 

I'm open to suggestions on how this issue should be fixed, but I would suggest at a minimum that the propertyTester extension point declare a "forceLoad" attribute (which I'm happy to let default to false) so that property testers can decide when they are really important or optional. Granted, many people will probably want to set this flag to true; but better they do it this way rather than make their property tester plugins early startup plugins because they could find no other solution.

The Eclipse Core Expressions framework provides a nice way to declare an enablement clause for arbitrary extension points. However, the property testers used by this framework are not loaded when referenced in an expression. Instead, clients that take advantage of the core expressions mechanism must either (1) wait for the property tester plugin to load by chance or (2) insert a hack to force the plugin that declares a necessary property tester to load, or worse yet (3) make the plugin that declares the property tester an early start up plugin (I hope you shuddered when you read that like I did when I typed it). 

So, I submit that the framwork, while trying to be performance-friendly has sacrificed the usability and consumeability of this highly useful framework by not declaring some quality, efficient mechanism to force the property tester to be available when needed. 

I'm open to suggestions on how this issue should be fixed, but I would suggest at a minimum that the propertyTester extension point declare a "forceLoad" attribute (which I'm happy to let default to false) so that property testers can decide when they are really important or optional. Granted, many people will probably want to set this flag to true; but better they do it this way rather than make their property tester plugins early startup plugins because they could find no other solution.
*** Bug 130231 has been marked as a duplicate of this bug. ***
May be some background:

When the core expression plug-in got implemented we already had the discussion whether a property tester should be loaded when referenced. To avoid massive plug-in loading we decided to not do so. Instead the evaluation engine reports NOT_LOADED back signaling that in principal there is a tester but the defining plug-in isn't loaded.

We discussed the forceLoad flag as well and decided not to add it unless there is a very strong demand for it. Having such a flag easily results in seeing it on all property testers. 

If we want to go down the road of having such a flag then I opt today to add it to the test expression not to the property tester itself. Since whether a tester should be loaded or not depends more on the client specifying the test expression than the implementor of property tester (may be one wants to load the plug-in and another not).

Side note: I discussed the concrete problem Michael Elder is having with him and  I think we found a workaround (hack) how he can enforce the plug-in loading today (simply reference a class from the plug-in that defines the tester; They have a dependency on that plug-in anyways).
Moving to JDT UI.  Dirk, is that still the best home for core.expressions PRs?

I would be fine with the flag specified on the expression extension rather than
the definition of the property tester.

The hack would require that we (1) know the specific property tester or set of
property testers that clients of an extension point might reference; then
reference those classes before calling any of the extension management
framework before calling into the extension management framework to load
extensions. In this case, it would mean reference a class before a Drag and
Drop action so that the right extensions would be available when dropping on
the viewer. This is _barely_ a partial solution for this use case. In many
cases, clients are going to define property testers downstream from the
extension framework that they are using the property testers for. Right now,
the extension framework that is using the WTP property tester does not have a
direct dependency to the WTP property tester plugin; we would need to add it,
and then reference a class to force the load. 

This means that everytime a property tester is added, we must go into the
places where we call into the extension management framework and add a
reference to that class. For clients that tap into our extension management
framework, they _will not_ be able to add their own custom property testers
since they can't go into our code and add references; first because they don't
have access and second because we are upstream from them. 

We experimented with trying to use instanceof and adapt to force the load of
the class, but neither of these work; instanceof doesn't for the load of the
class that's referenced, and adapt will only load the class if there is an
adapter defined for it. 

This solution effectively destroys the downstream extensibility of the property
testers without forcing each property tester definition plugin to be an early
startup plugin as well. 
Michael, if you reference the property tester you must reference the namespace in which the property tester is defined. So from a concpetual point of view you already have a reference. 

I will CC John and Jeff for commenting on eager loading. Additionally I remove the milestone since I can't commit for this for M6. It is basically an API change which needs approval.
Michael, but in principal you are able to add that reference (its not a layer breaker in your world) and to work around that problem. Right ?
However, the reference is down in the plugin with the expression; which should only be loaded if the expression is tripped, so to force the load of that plugin, so it can force the load of the property testers that it uses in its expression. To me this not only seems convoluted, it seems wrong. 

Plugins that declare property testers should be required to be lightweight with shallow dependency trees. The plugins that declare extensions that use expressions are not likely be small or have shallow dependency trees. 

The workaround is not valid. It will not support our downstream clients to reference classes at our layer to force the load of property testers; it is by chance that we have an upstream property tester that one of our clients want to use here, but there are likely to be others that our clients will want to define.

I'll briefly highlight that this also affects just about every extension made available by the Common Navigator since it makes heavy use of Core expressions.
I see the point with the upstream clients defining their own property testers. In this case you have to interpret NOT_LOADED as true and have to add the extensions (thats what we do at other places in the UI as well).

However upstream cliens that want to use property testers defined by you don't have a problem. When you evaluate the extension point then your plug-in is loaded and the property tester defined by your plug-in is loaded as well.

As said I am not totally against the idea that core expression loads plug-ins. But since it has a broader impact on the platform I would like to hear Johns and Jeff opinion first.

Side note: I am on vacation next week.

An example of what this might look like on the expression:

In plugin org.acme.foo:

... some extension that uses Core Expressions ...
<enablement>
  <test name="org.acme.bar.MyProperty" .... loadTesterIfNecessary="true" />
</enablement>
...

The attribute "loadTesterIfNecessary" (or a better named attribute) would indicate that the tester (and therefore the plugin that defines the tester -- "org.acme.bar") should be loaded if it is not already. The plugin that defines the expression ("org.acme.foo") would not be loaded unless the expression evaluated to true.

Another alternative would be as follows:


In plugin org.acme.foo:

... some extension that uses Core Expressions ...
<enablement lazyEvaluation="false">
  <test name="org.acme.bar.MyProperty" ... />
</enablement>
...

The "lazyEvaluation" flag would indicate whether the expression should force the load of any property testers that the expression makes use of. The default value would be "true" to indicate that the property testers referenced in the expression should not be loaded. One problem with this is that there are several places where we take advantage of the Eclipse Core expressions framework under different names (than "enablement") and this wouldn't carry over cleanly in those cases.

Still yet another alternative would be to introduce a new expression element:

<eagerEvaluation> or <nonlazyEvaluation>:
... ext ...
<enablement>
   <nonlazyEvaluation> 
      <and>
         <adapt ... >
            <test ...
         </adapt ...
      </and ..
   </nonlazyEvaluation>
</enablement>

Anything nested in the nonlazyEvaluation element would always evaluate to either TRUE or FALSE and NEVER evaluation to NOT_LOADED. 


The summary here is that the activation information is a characteristic of the user of the property tester, not the tester itself.  Personally I prefer the first syntax.
Michael,

I was wondering why ltk.core and refactoring participants don't suffer from the same problem and looked at the current implementation and here is what LTK.Core is doing:

- it precomputes a set of values which it passes to the expression specified in 
  XML which makes it very likely that particpant can evaluate the expression 
  without returning NOT_LOADED. In LTK the precomputed set of values is the 
  selection plus a list if project natures which are affected by the 
  refactoring. This ensure for example that a Java refactoring doesn't load any 
  PHP participants.

- if in the very unlikely case that an expression of a participant returns
  NOT_LOADED then the framework instantiates the participant and calls a 
  method on the participant to check if it is really interested.

Can you please comment on whether a equivalent approach would be feasible for the common navigator as well. 

Just to clarify again what the consequences of adding the requested support are: it will allow clients to force plug-in loading whenever an expression specified in XML is evaluated (this for example happens when context menus are opened).

Hi Dirk,

  What I would really like is the instantiation of the property tester plugin to be loaded when necessary; not the plugin that defines the expression. 

  In our scenarios, the property tester plugins are generally small, lightweight plugins that know about an existing or new characteristic for the thing they are designed to test (e.g. IProject has facet X or other relevant properties). The plugin that defines the expression tends to have more meat to it; at a minimum Common Navigator plugins will pull in one or more model plugins (since the standard pattern in WTP is a .core+.ui plugin for model+view respectively). These models may have other enhancements or dependencies that will also need to be satisfied. Therefore, in general, we expect the property tester plugin to be lighter and faster to load than the plugin that defines an extension which uses a core expression.

   The point of using the core expression is to avoid loading the extension-defining plugin. The suggested solution would force us to load every plugin that returned NOT_LOADED. Alot of these plugins will likely use the same property tester (e.g. the facet tester in WTP). So for 3 plugins that define a Common Navigator extension focused on a particular project facet (say "ejb", "web", "ear", etc), we will need to load at a minimum the 3 plugins defining the Common Navigator extension and their model plugins. The alternative would have been to just load the facet property tester plugin once, and use it to establish that none of the projects in the user's workspace currently match the described facets. 

   I've been using the WTP facet tester as an example, but outside of the Common Navigator, we have found this to be a useful pattern for extensible frameworks based on EMF models. So a solution for this problem cannot include Common Navigator-specific "enhancements" (read: "hacks").

   Here are the solutions proposed to avoid needing to load the property tester on demand:

Suggested solutions:
a) reference a class in the property tester plugin to force the load.
b) register the property tester plugin as an early startup plugin.
c) define a secondary evaluation framework/component to an extension framework which can filter extensions based on project natures.
d) modify the contract of the extension framework such that a NOT_LOADED forces the load of the extension which defines the core expression (which we are trying to avoid needlessly doing) and ask it directly. 

Issues with suggestions:
a) This is only a viable solution if the property tester is upstream from the extension framework. It also precludes clients from defining new property testers, which I think hinders significantly a very useful capability of the Core Expression framework 
b) Issues with this solution are obvious.
c) Not all of the extensions in our space can be narrowly defined to be driven from project natures. In WTP, project facets will drive most if not all of the selection for extensible frameworks. In other product stacks, project natures do not affect the EMF metamodels used in specific extensible contexts. Therefore, this solution will render little or no usefulness to solve the problem
d) Defeats much of the purpose for using core expressions, in the scenarios that I'm trying to provide solutions for.

I'm perfectly happy with any solution that allows a two part contract for load-on-demand-if-nececssary expressions. A two part contract could allow the extension framework to indicate as part of the evaluation context whether it wanted to allow the load of any plugins that define property testers used in the expression. Then expressions could use any one of the schemes described in comment 9 to indicate when it was important enough to force the load of the property tester plugin. A two part contract like this, if documented well, would allow solutions to the scenarios we have, without hindering the singular important scenario of popping menus quickly, since the menu rendering framework wouldn't have to be modified to pass the "load if necessary" flag in the evaluation context. 

Is this an acceptable compromise?
I have prepared a patch which adds the follow new functionality:

- a test expression can now specify if it wants to force the loading of the
  plug-in defining the property tester. The name of the XML attribute is
  forcePluginLoading. By default the value is false.

- the evaluation context has a new boolean state whether it allows plug-in 
  activation or not. The default value is set to false.

Plugin activation only takes place if both the evaluation context and the tester sets the flag to true. This ensures that for example for context menus even if the contributor sets the forcePluginLoading to true the context can override this and avoid plug-in loading. This make this fix fully backwards compatible in regards of plug-in loading.

Additional API additions:

- interface IEvaluationContext defines two new methods setAllowPluginActivation
  and getAllowPluginActivation. Per spec the interface isn't implementable (
  clients should use EvalutionContext).

- a new method internalActivateDeclaringPlugin() on PropertyTester. There is
  no need for clients to call this method. It is purely for internal use as
  other methods on PropertyTester as well.

Jeff, can you please vote for the fix. As said the current fix doesn't result in more plug-in activation and the reader of an extension point can still fully control whether plug-in activation is supported or not (can override the flag of the test expression).
Created attachment 36261
The patch
Nick, can you please vote on the patch as a component owner.
+1 for the enhancement and API change.

I think it will be confusing to clients if they specify forcePluginLoading="true" but the context does not allow it.  What is the behaviour in this case?  It should probably get logged as a programming error (once).


The behavior would vary by the EvaluationContext, so in the case where the context says "don't load" and the expression says "load", then the evaluation context wins out. A framework may want a quick scan (e.g. menus) and may come back and evaluate the extensions again with a "load if necessary" directive in the Evaluation Context. Clients should be aware that the attribute in the expression will only apply if the Evaluation Context also requests the load.
Regarding comment #16: currently the plug-in isn't loaded.

The documentation of the extension point clarifies this. In addition we could:

- add a log entry
- rename the attribute to activatePlugin to make clear that the client can't 100% force it.

Jeff, can you please vote on the enhancement.

I would be thrilled! 

+1
Patch released. Opened bug 133297 for Nick's comment on writing a log entry if tester specifies forcePluginActivation=true but plug-in activation isn't supported by extension point reader.
I have added @since 3.2 tags for the three new methods (two on IEvaluationContext and one on PropertyTester)
Verified using I20060328-0010
Thanks John.
While investigating bug 134412 I found a stray Bundle#start method being called from PlatformTester#internalActivateDeclaringPlugin.  This method has no callers in the org.eclipse.core.expressions bundle, but the method is marked as internal use only.

It looks like this method was added while investigating a fix for this bug but then was not really needed after all.  Explicitly calling start on a bundle object is not a good coding practice because it can end up marking the bundle to be persistently started.  I would recommend removing the method if possible (it is supposed to be internal anyway).  If that is not possible then maybe you should make it an empty method.


Hi Thomas,

    I know that this is a decently long bug report, but that method was one of the key outcomes of the fix for this bug. Take a quick look at comment 13 and the rationale (detailed above) for why this method is necessary. The bundle is only activated when both parties (the expression and the evaluator) deem it necessary. I think this bug can remained FIXED. After reading the rationale and the details of the fix, I believe you will agree. 
Hi Thomas,

I added the method to be able to activate a plug-in, however I forgot to add a corresponding call to the method (which is clearly a bug). The code path is only called when the plug-in registry changes and a plug-in gets unloaded. That's why the bug doesn't have any impact right now (as far as I know we don't support plug-in unloading right now, but I will clarify this).

You wrote that: "Explicitly calling start on a bundle object is not a good coding practice because it can end up marking the bundle to be persistently started."

What is the recommended way to start a plug-in if I need to and don't have a class I want to instantiate. I always thought that Bundle#start is the right thing to do then.
Bundle.start() spec guarantees that once started in this fashion, it will be auto-started in all future sessions:

 * <li>Persistently record that this bundle has been started. When the
 * Framework is restarted, this bundle must be automatically started.

I suspect in the expressions case the method is necessary, but the implementation should change. The only alternative I know of is to attempt to load a class on that bundle.  It seems bogus, but even loading a non-existent class would do the trick:

bundle.loadClass("foo.Bar");

Tom, Jeff, any other recommendations on alternative ways to "explicitly" lazy start a bundle? I'll do a search in my full source workspace today to see if there are any other callers of Bundle.start()
I talked to Dirk about this issue.  The code in expressions really should not and does not need to call Bundle#start.  The case where it was going to be called (currently not called in the code today) was when a bundle is unloaded.  In this case a registry changed event would get published.  In this case the cache must be synchronized to throw out the old objects for the unloaded bundle.  Dirk is looking into a change to sync/flush the cache on registry change events.
Thomas, 

I looked at it in more detail and here is my current state:

- the evaluation framework already listens to registry change event and flushes
  the caches. So property tester already have to deal with the fact that the
  instance of a property tester changes during execution time. I will add an
  appropriate comment. So we are fine with flushing the caches during uninstall
  (not API or behaviour change).

- no registry change event is sent out when a bundle is stopped. I only receive
  events on uninstall. If I have to treat cases where a bundle is stopped but
  not uninstalled then the current implementation will fail and I have to 
  use Johns suggestion to restart the bundle. Can you or Jeff please advice 
  how Eclipse should behave if a bundle is stopped, but not uninstalled.
right. the registry does not care about start/stop events, just resolve/unresolve (unistall actually).  You certainly can listen for bundle stop events from the bundles you are interested in.  Its a bit of work but ultimately just one listener and a list of interesting bundles.  (page 366 of the RCP book :-)
Jeff, just to clarify: do we have to treat the case that a bundle is stop but not uninstalled ? 
I would be suprised if anyone is handling this case.  IMO paying attention to bundle STOPPED events is not critical to 3.2.  Maybe we can focus on dynamic unloading of bundles in 3.3, but it is to late to do that now for 3.2.  Thoughts Jeff?
Agreed with Tom.  Dirk, I thought you were saying that you needed to handle the bundle stop situation. I am certainly not pushing you to do that.
OK. I have adapted the code so that it works correctly with plug-in uninstall.

The method Thomas was complaining about is now not necessary anymore. It is a method introduced in M6, marked as internal (name is internalActivateDeclaringPlugin) but in an API class. I still favour to remove the method. Jeff, John any objections from an API point of view ?
Internal public methods in API classes look bad from an API point of view, so I'm all in favour of deleting it. (one pattern to avoid this would be to make PropertyTester extend a non-API superclass in the org.eclipse.core.internal.expressions package, and then make these "internal" methods package-private on the superclass)
I have made the following changes:

- removed the method internalActivateDeclaringPlugin
- changed the code in a way that it correctly handles plug-in uninstalls
- NO support for plug-in stop

Updated code and tests.
The fix implemented for this was quite complete, but rather than re-opening this bug, I opened a new one...

https://bugs.eclipse.org/bugs/show_bug.cgi?id=169736
Sorry. Meant to say "not quite complete"...


Eclipse Core Expressions Property Testers not loaded on demand

