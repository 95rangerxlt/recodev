Sometimes after entering anything in open type dialog, the dialog cannot be
closed any more, neither with OK, Cancel or the Window close cross.

I have to kill Eclipse with task manager.

This does happen only occasionally and I cannot always reproduce it, but there
seems to be something very wrong.

Sometimes after entering anything in open type dialog, the dialog cannot be
closed any more, neither with OK, Cancel or the Window close cross.

I have to kill Eclipse with task manager.

This does happen only occasionally and I cannot always reproduce it, but there
seems to be something very wrong.
Found a way to always reproduce it:

Select another Java source buffer with the buffer selector >>
(which takes abnormally long, about 10s), this step is necessary.

Afterwards do C-S-T, after the Type is found (and not before), the dialog cannot
be closed any more.
With source buffer you mean Javae editor?

Can you start Eclipse form a console and press CTRL + break in the console when
this happens?
Juergen, I can't reproduce the problem. Can you please provide more detailed
steps (best a zipped workspace with some files revealing the problem).
Additionally can you please answer the following questions:

- is Eclipse frozen or does the dialog not close. If you press the Cancel or OK
  button does the button responed to the click or is the UI frozen. If it is 
  frozen can you please create a VM dump. This will help a lot to track down the
  problem.

- is the anything in the log file ?

- are you using a different XML library (for example xerces) than the one
  provided by the JDK. There is a know issue here which prevents the dialog
  from closing in this case (see bug 106447)
After I rebootet XP I could not reproduce the bug for some time and then not
always. I have a feeling it has something to do with the Clearcase plugin.
Anyway, the vm dump will show. But how do I create it in Windows XP?
Start Eclipse using the following command from a Windows command prompt,
replacing eclipse_install and jdk_install with the path to the corresponding
installations on disk:

C:\eclipse_install\eclipse.exe -vm C:\jdk_install\bin\java.exe -vmargs -Xms30M
-Xmx200M

when the situation occurs simple activate the command window and press
Ctrl+Break. This will print the VM dump to the command window. Please make sure
you increase the height of the screen buffer size via the properties dialog of
the command window (Layout tab) so that the dump will not be clipped.
Closing as works for me since I can't reproduce the bug. Juergen, if you can
provide the requested information please reopen.
Created attachment 30219
threaddump

D:\eclipse>D:\eclipse\eclipse.exe -data D:\GBOBWorkspace -vm
D:\jdk1.5.0_05\bin\java.exe -vmargs -XX:+UseParallelGC -server
OK, I could reproduce it (and had started eclipse from a console window, too 8-)

I'll attach the thread dump.

Also, in the logs is the stacktrace below, I don't know if it has anything todo
with the problem. It is kind of strange, because there are the weblogic classes.
Classpath DOS env variable is definitely empty, I ran eclipse.exe


!ENTRY org.eclipse.ui 4 4 2005-11-18 13:46:10.523
!MESSAGE Unhandled event loop exception

!ENTRY org.eclipse.ui 4 0 2005-11-18 13:46:10.523
!MESSAGE org/apache/xalan/processor/TransformerFactoryImpl
!STACK 0
java.lang.NoClassDefFoundError: org/apache/xalan/processor/TransformerFactoryImpl
	at
weblogic.xml.jaxp.RegistryTransformerFactory.<init>(RegistryTransformerFactory.java:62)
	at
weblogic.xml.jaxp.RegistrySAXTransformerFactory.<init>(RegistrySAXTransformerFactory.java:12)
	at sun.reflect.GeneratedConstructorAccessor10.newInstance(Unknown Source)
	at
sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:494)
	at java.lang.Class.newInstance0(Class.java:350)
	at java.lang.Class.newInstance(Class.java:303)
	at javax.xml.transform.FactoryFinder.newInstance(FactoryFinder.java:100)
	at javax.xml.transform.FactoryFinder.findJarServiceProvider(FactoryFinder.java:278)
	at javax.xml.transform.FactoryFinder.find(FactoryFinder.java:185)
	at javax.xml.transform.TransformerFactory.newInstance(TransformerFactory.java:103)
	at
org.eclipse.jdt.internal.corext.util.TypeInfoHistory.save(TypeInfoHistory.java:374)
	at
org.eclipse.jdt.internal.corext.util.TypeInfoHistory.save(TypeInfoHistory.java:337)
	at
org.eclipse.jdt.internal.ui.dialogs.TypeSelectionDialog2.close(TypeSelectionDialog2.java:177)
	at
org.eclipse.jdt.internal.ui.dialogs.OpenTypeSelectionDialog2.close(OpenTypeSelectionDialog2.java:94)
	at org.eclipse.jface.dialogs.Dialog.okPressed(Dialog.java:856)
	at
org.eclipse.ui.dialogs.SelectionStatusDialog.okPressed(SelectionStatusDialog.java:142)
	at org.eclipse.jface.dialogs.Dialog.buttonPressed(Dialog.java:409)
	at org.eclipse.jface.dialogs.Dialog$2.widgetSelected(Dialog.java:556)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:90)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:843)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3080)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2713)
	at org.eclipse.jface.window.Window.runEventLoop(Window.java:809)
	at org.eclipse.jface.window.Window.open(Window.java:787)
	at
org.eclipse.jdt.internal.ui.dialogs.TypeSelectionDialog2.open(TypeSelectionDialog2.java:173)
	at org.eclipse.jdt.internal.ui.actions.OpenTypeAction.run(OpenTypeAction.java:57)
	at org.eclipse.jdt.internal.ui.actions.OpenTypeAction.run(OpenTypeAction.java:78)
	at org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:246)
	at org.eclipse.ui.internal.WWinPluginAction.runWithEvent(WWinPluginAction.java:223)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:117)
	at org.eclipse.core.commands.Command.execute(Command.java:311)
	at
org.eclipse.core.commands.ParameterizedCommand.execute(ParameterizedCommand.java:396)
	at
org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:459)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:781)
	at
org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:828)
	at
org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:550)
	at
org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3(WorkbenchKeyboard.java:493)
	at
org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent(WorkbenchKeyboard.java:117)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:917)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:842)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:867)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:852)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:880)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:876)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1190)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:3135)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3038)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:3706)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:1656)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2711)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1699)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1663)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:367)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)
	at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:103)
	at
org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:226)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:376)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:163)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.eclipse.core.launcher.Main.invokeFramework(Main.java:334)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:278)
	at org.eclipse.core.launcher.Main.run(Main.java:973)
	at org.eclipse.core.launcher.Main.main(Main.java:948)
Juergen,

thanks for providing the additional information.

As outlined in bug 106447 the problem is a misconfiguration of the XML parser
you are using. The class org/apache/xalan/processor/TransformerFactoryImpl can't
be found.

I can't do anything against the misconfiguration, however I added protection
code to the dialog that it closes even if this situation occurs. The protection
code went into 3.2 M3.
But how can I as user misconfigure the XML parser? Eclipse JDT is supposed to
come with all the plugins it needs, so if the parser fails, it is a bug in the
eclipse product (either for not delivering a parser or not configuring it right).

But if it is a misconfigurion induced by me, it is still a bug of Eclipse,
because the plugin system is supposed to shield the plugins from each other, so
my user plugins are not to affect JDT plugins.
No, since Eclipse 3.0 we don't have our own XML parser anymore. We take the one
that is part of the JDK installation. 

There are two ways to overrule the default parser:

- installing one in the JDK (see bug 106447)
- a plug-in contributed to Eclipse installs again a misconfigured XML parser.

From the stack trace it looks like that their is an XML parser from weblogic
that causes the problem. And this is not under Eclipse SDK control.

Do you have an additional weblogic plug-in installed ?
Regarding your point: "the plugin system is supposed to shield"

This is not possible since the plug of a XML parser happens on JDK level over
which we don't have control. We only shield plug-ins against each other.
(In reply to comment #11)

I did not have a weblogic plug-in installed, but I was remote debugging a WLS
EJB and running a local WLS client (from a Java project with weblogic.jar in the
classpath) in the console. 
If that is the reason for another XML parser being drawn in, this is a too easy
way to break JDT and should be fixed.
As you can see the from the stack trace produced by Eclipse the weblogic XML
parser is available inside the Eclipse VM.

If you don't have an additional plug-in install in Eclipse then the only way
that parser can end up in the Eclipse VM is by installing it into the JDK location.

Can you try the following: 

- a fresh Eclipse install without additional plug-ins
- a fresh VM install or a different VM that is not used to debug your 
  application

If then there is still the web logic XML parser available in the Eclipse VM
there is really something strange.
weblogic.jar is nowhere on the eclipse classpath, only on the classpath of a java project within eclipse.

I could imagine that on running the project once, weblogic.jar somehow sets the system property javax.xml.transform.TransformerFactory which javax.xml.transform.TransformerFactory.newInstance() uses. And afterwards if the eclipse gui code gets called, it gets the wrong transformer.

So we have the situation that a JDT project can break the eclipse runtime.

Maybe the gui code should check that it uses the correct transformer:

savingTransformer
{
   OpenTypeDialog();
}


[open type] Open Type Dialog cannot be closed

