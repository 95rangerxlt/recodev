When using Ctrl+Shift+M to 'unqualify' calls to private static methods within the same class, JDT generates unresolvable imports.

To reproduce, use this code:
class Snippet {
  static void foo() {
    Snippet.b|ar();
  }
  private static void bar() {
  }
}
Position the cursor on the bar() invocation (as indicated by |) and press Ctrl+Shift+M. JDT creates a static import for the private method bar(), which naturally cannot be resolved. and leads to a compile error.

Though the code snippet might appear artifical, it isn't quite. When moving static methods, invocations remain 'qualified' even if the moved method now resides in the same class as the invoking code (see bug 409592). After manually declaring the moved method as private, the result looks like the snippet above. To get rid of the qualified invocations, I usually use Ctrl+Shift+M.

When using Ctrl+Shift+M to 'unqualify' calls to private static methods within the same class, JDT generates unresolvable imports.

To reproduce, use this code:
class Snippet {
  static void foo() {
    Snippet.b|ar();
  }
  private static void bar() {
  }
}
Position the cursor on the bar() invocation (as indicated by |) and press Ctrl+Shift+M. JDT creates a static import for the private method bar(), which naturally cannot be resolved. and leads to a compile error.

Though the code snippet might appear artifical, it isn't quite. When moving static methods, invocations remain 'qualified' even if the moved method now resides in the same class as the invoking code (see bug 409592). After manually declaring the moved method as private, the result looks like the snippet above. To get rid of the qualified invocations, I usually use Ctrl+Shift+M.
(In reply to comment #0)
> To reproduce, use this code:
> class Snippet {
>   static void foo() {
>     Snippet.b|ar();
>   }
>   private static void bar() {
>   }
> }

This snippet does not reproduce the problem as it has no package declaration. This one does the trick:

package p;

class Snippet {
	static void foo() {
		Snippet.bar();
	}

	private static void bar() {
	}
}
Created attachment 234064
Introduced Unit Test + Bug Fix
Created attachment 234090
improvement on original patch.

Change the unit test to use AbstractSelectionTestCase.
Created attachment 234111
Combined previous two patches from Nikolay
On pressing Ctrl+Shift+M (Add Import), the static import for the private member(method/field) should not be added.
But it should replace the qualified access of the member with a direct access.

The patch prevents the import addition, but also prevents the replacement of qualified access with direct access.

The check for private member should be added around the code where static import is added i.e.:
---------------------------------------------------------------------
if (containerName.equals(declaringClass.getName()) || containerName.equals(declaringClass.getQualifiedName()) ) {
	if (!Modifier.isPrivate(binding.getModifiers())) { // added the check
		String res= importRewrite.addStaticImport(declaringClass.getQualifiedName(), binding.getName(), isField);
		if (!res.equals(simpleName)) {
			// adding import failed
			return null;
		}
	}
	return new ReplaceEdit(qualifierStart, simpleNameStart - qualifierStart, ""); //$NON-NLS-1$
}
---------------------------------------------------------------------

Please update your tests and move them to org.eclipse.jdt.ui.tests.core.AddImportTest.
Also, include the test for a private static field.

Some general guidelines:
- Add your credentials to the copyright headers
- Make sure the copyright date is updated to 2013
- As a rule, make the patch as small as possible i.e. don't make any changes that are not necessary to fix the problem (like marking fields 'final' and adding '@Override' to methods in existing code). This makes the review easier and faster.
- Post this in the bug report as a comment: "This contribution complies with http://www.eclipse.org/legal/CoO.php"
Noopur,
It seems bugzilla didn't send me an email with your code review changes. I will start working on this now.
Hello Noopur,

I agree with all your comments apart from moving my unit test to org.eclipse.jdt.ui.tests.core.AddImportTest.

The new UnitTest class I have created explicitly test the Ctrl+Shift+M (Add Import) Action. 

How strongly do you feel about me moving those tests?
Created attachment 234418
Patch after code review comments implemented

This contribution complies with http://www.eclipse.org/legal/CoO.php

I thought I would submit a patch which is everything except moving the unit tests. If you feel strongly that they should be moved let me know and I can create a new patch.
Created attachment 234498
Patch for AddImportsOperation

org.eclipse.jdt.ui.tests.core.AddImportTest contains all the tests related to AddImportsOperation and new tests should also be added to the same file. Have a look at methods #testAddImportAction1/2/..() which test this action.

Also, in the new patch, you have removed the check for declaring class being private. It will create compilation error by adding the import with private class in the following case:
-----------------------------------------------
package p;
class SnippetX {	
	private static class Test {
		class X {
			void foo() {
				Test.bar();
			}			
		}
		public static void bar() {}		
	}
}
-----------------------------------------------
However, the check at the existing location does not allow the qualified access to be changed to direct access in the above example.

Overall, if the static member is directly accessible from the invoking location of the action, the static import should not be added and the access should be changed to direct.
- Direct access is possible only if the declaring class of the static member is present in the parent chain of the invoking location's node (as in the given examples).
- If direct access is not possible, only then the import has to be added and we need to check for the declaring class being private. So, that check can be moved accordingly. Example:
-----------------------------------------------
package p;
class SnippetY {	
	[private] static class Test {
		static void bar() {}		
	}
	
	void foo() {
		 Test.bar();
	 }
}
-----------------------------------------------
Attached a patch with these changes.

@Dani/Markus: Please let me know if the approach is correct.
(In reply to comment #9)

Sounds good. Two comments:
1) Separate your changes from the contribution
2) Change the copyright addition to follow this one line pattern:
Name <e-mail> - summary - https://bugs.eclipse.org/BUG_NUMBER
Comment on attachment 234498
Patch for AddImportsOperation

Thanks Dani.

Nikolay, please attach a new patch with only your changes, taking care of the following:
- Move tests to org.eclipse.jdt.ui.tests.core.AddImportTest 
- Do not remove the check for declaring class being private
- Change the copyright addition to follow this one line pattern:
Name <e-mail> - summary - https://bugs.eclipse.org/BUG_NUMBER
Hello,
I am on holiday right now for 2 weeks. If I find some time I will do it otherwise I hope it is ok for you to wait.
(In reply to comment #12)
> Hello,
> I am on holiday right now for 2 weeks. If I find some time I will do it
> otherwise I hope it is ok for you to wait.

It can easily wait.
Created attachment 234527
My changes only

I have done as requested. I added a 3rd test case which was outlined as part of the code review. It will fail until Noopur applies her changes.
This contribution complies with http://www.eclipse.org/legal/CoO.php
Thanks Nikolay. Released your changes with:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=a7c8179b26c590dc8e6c57f367219e70f1518cbe

Released my fix and additional tests with:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=7d3ed4666e2f34c393fc3d878c63fd27de60614b
The isDirectlyAccessible check only checks if the classes are exactly the same. What about subclasses?
package q;

public class Test2 {
	protected static void bar() {
	}
}

-----

package p;

import q.Test2;

class Test extends Test2 {
	void foo() {
		Test2.bar();
	}
}

----
I have to now figure out how to create a unit test with 2 input source files so that I can add the appropriate test case.
Created attachment 234624
Directly Accessible ammendment

This contribution complies with http://www.eclipse.org/legal/CoO.php
Thanks for the patch Nikolay. Released after removing the unused local variable warning from the test:
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=ce9a6955d0988c959a9ef9c68951813be13d54dc
We should use isSubTypeCompatible(..) rather than isAssignmentCompatible(..) here. And resolveBinding() needs a null check.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=0510ca0101656d933cfd2f371ac268173dd7e6f4


[organize imports] Import static (Ctrl+Shift+M) creates imports for private methods



Bug 409594: [organize imports] Import static (Ctrl+Shift+M) creates imports for private methods 

Fixed bug 409594: [organize imports] Import static (Ctrl+Shift+M) creates imports for private methods 

Fixed bug 409594: [organize imports] Import static (Ctrl+Shift+M) creates imports for private methods 

Fixed bug 409594: [organize imports] Import static (Ctrl+Shift+M) creates imports for private methods 